{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Broadworks OCI-P Interface broadworks_ocip interfaces to the OCI-P provisioning interface of a Broadworks softswitch Free software: BSD license Documentation: https://nigelm.github.io/broadworks_ocip/ Features python objects to match all Broadworks schema objects API framework to talk to a Broadworks server additional magic to handle authentication and sessions Based on Broadworks schema R21 Installation With pip : python3 -m pip install broadworks-ocip Usage More details is given within the usage section of the documentation, but the minimal summary is:- from broadworks_ocip import BroadworksAPI # configure the API, connect and authenticate to the server api = BroadworksAPI ( host = args . host , port = args . port , username = args . username , password = args . password , ) # get the platform software level response = api . command ( \"SystemSoftwareVersionGetRequest\" ) print ( response . version ) Credits The class is built using Michael DeHaan's ClassForge object system. Development on the python version was done by Nigel Metheringham <nigelm@cpan.org>","title":"Overview"},{"location":"#broadworks-oci-p-interface","text":"broadworks_ocip interfaces to the OCI-P provisioning interface of a Broadworks softswitch Free software: BSD license Documentation: https://nigelm.github.io/broadworks_ocip/","title":"Broadworks OCI-P Interface"},{"location":"#features","text":"python objects to match all Broadworks schema objects API framework to talk to a Broadworks server additional magic to handle authentication and sessions Based on Broadworks schema R21","title":"Features"},{"location":"#installation","text":"With pip : python3 -m pip install broadworks-ocip","title":"Installation"},{"location":"#usage","text":"More details is given within the usage section of the documentation, but the minimal summary is:- from broadworks_ocip import BroadworksAPI # configure the API, connect and authenticate to the server api = BroadworksAPI ( host = args . host , port = args . port , username = args . username , password = args . password , ) # get the platform software level response = api . command ( \"SystemSoftwareVersionGetRequest\" ) print ( response . version )","title":"Usage"},{"location":"#credits","text":"The class is built using Michael DeHaan's ClassForge object system. Development on the python version was done by Nigel Metheringham <nigelm@cpan.org>","title":"Credits"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . Unreleased Changes [1.3.0] - 2021-01-18 Fixed problems with boolean response value decode (added tests) [1.2.1] - 2020-12-01 Corrected the install information for the project [1.2.0] - 2020-11-30 Add tests to show issues with ServiceProviderGetListResponse Fix echo=\"\" attribute on responses command element Fix parsing of embedded subtypes due to incorrect method rename earlier Build XML generator for table elements [1.1.1] - 2020-11-17 Moved the following classes into the module top level declarations:- ElementInfo ErrorResponse OCICommand OCIRequest OCIResponse OCIType SuccessResponse Fixed some Makefile issues Internal documentation improvements Fixed the Changelog auto update [1.0.1] - 2020-10-15 Reworked ElementInfo into attrs based class Various improvements to schema parsing into classes Session Id is no longer hidden on command classes Additional how/why documentation Converted to use poetry for development management [0.5.3] - 2020-10-07 Occaisionally you can get an exception thrown on socket close as the api object is deleted. Added try/except around this to catch. More log modifications - less opinionated Split traffic logging to a VERBOSE_DEBUG setting - log level 9 [0.5.2] - 2020-10-07 Logging was on at debug level by default - switched to WARNING level. [0.5.1] - 2020-10-06 Removed a development debug print which had managed to stay hidden... [0.5.0] - 2020-10-06 Reversed the stupid mistake of trying to special case complex types such as UnboundedPositiveInt - these now need to be treated as the complex types they are. [0.4.0] - 2020-10-06 Split out handling in API of Types and Commands. This changes get_command_class() to get_type_class() and adds get_type_object() [0.3.1] - 2020-10-05 Fixed error where exception thrown as tests cleaned up. [0.3.0] - 2020-10-01 Support for lists in XML generation Support for XSD choice elements - handled by making them optional Handling of embedded types in XML generation Start of special casing some base types - ie UnboundedPositiveInt [0.2.0] - 2020-09-30 Support for list returns - eg ServiceProviderServicePackGetListResponse [0.1.0] - 2020-09-30 First release but not on PyPI. Patch releases on Pypi after automation sorted.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased-changes","text":"","title":"Unreleased Changes"},{"location":"changelog/#130-2021-01-18","text":"Fixed problems with boolean response value decode (added tests)","title":"[1.3.0] - 2021-01-18"},{"location":"changelog/#121-2020-12-01","text":"Corrected the install information for the project","title":"[1.2.1] - 2020-12-01"},{"location":"changelog/#120-2020-11-30","text":"Add tests to show issues with ServiceProviderGetListResponse Fix echo=\"\" attribute on responses command element Fix parsing of embedded subtypes due to incorrect method rename earlier Build XML generator for table elements","title":"[1.2.0] - 2020-11-30"},{"location":"changelog/#111-2020-11-17","text":"Moved the following classes into the module top level declarations:- ElementInfo ErrorResponse OCICommand OCIRequest OCIResponse OCIType SuccessResponse Fixed some Makefile issues Internal documentation improvements Fixed the Changelog auto update","title":"[1.1.1] - 2020-11-17"},{"location":"changelog/#101-2020-10-15","text":"Reworked ElementInfo into attrs based class Various improvements to schema parsing into classes Session Id is no longer hidden on command classes Additional how/why documentation Converted to use poetry for development management","title":"[1.0.1] - 2020-10-15"},{"location":"changelog/#053-2020-10-07","text":"Occaisionally you can get an exception thrown on socket close as the api object is deleted. Added try/except around this to catch. More log modifications - less opinionated Split traffic logging to a VERBOSE_DEBUG setting - log level 9","title":"[0.5.3] - 2020-10-07"},{"location":"changelog/#052-2020-10-07","text":"Logging was on at debug level by default - switched to WARNING level.","title":"[0.5.2] - 2020-10-07"},{"location":"changelog/#051-2020-10-06","text":"Removed a development debug print which had managed to stay hidden...","title":"[0.5.1] - 2020-10-06"},{"location":"changelog/#050-2020-10-06","text":"Reversed the stupid mistake of trying to special case complex types such as UnboundedPositiveInt - these now need to be treated as the complex types they are.","title":"[0.5.0] - 2020-10-06"},{"location":"changelog/#040-2020-10-06","text":"Split out handling in API of Types and Commands. This changes get_command_class() to get_type_class() and adds get_type_object()","title":"[0.4.0] - 2020-10-06"},{"location":"changelog/#031-2020-10-05","text":"Fixed error where exception thrown as tests cleaned up.","title":"[0.3.1] - 2020-10-05"},{"location":"changelog/#030-2020-10-01","text":"Support for lists in XML generation Support for XSD choice elements - handled by making them optional Handling of embedded types in XML generation Start of special casing some base types - ie UnboundedPositiveInt","title":"[0.3.0] - 2020-10-01"},{"location":"changelog/#020-2020-09-30","text":"Support for list returns - eg ServiceProviderServicePackGetListResponse","title":"[0.2.0] - 2020-09-30"},{"location":"changelog/#010-2020-09-30","text":"First release but not on PyPI. Patch releases on Pypi after automation sorted.","title":"[0.1.0] - 2020-09-30"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Report Bugs Report bugs at https://github.com/nigelm/broadworks_ocip/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation broadworks_ocip could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/nigelm/broadworks_ocip/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up broadworks_ocip for local development. Fork the broadworks_ocip repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/broadworks_ocip.git We use poetry for development, this is how you set up your fork for local development $ cd broadworks_ocip/ $ poetry install Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, use pre-commit to do basic checks and ensure formatting is consitant, and check that your changes pass the tests:: $ pre-commit run $ poetry run pytest $ poetry run make docs # generate local docs for checking pre-commit may need to be installed onto your system. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Deploying A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md ). Then run: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/nigelm/broadworks_ocip/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"broadworks_ocip could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/nigelm/broadworks_ocip/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up broadworks_ocip for local development. Fork the broadworks_ocip repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/broadworks_ocip.git We use poetry for development, this is how you set up your fork for local development $ cd broadworks_ocip/ $ poetry install Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, use pre-commit to do basic checks and ensure formatting is consitant, and check that your changes pass the tests:: $ pre-commit run $ poetry run pytest $ poetry run make docs # generate local docs for checking pre-commit may need to be installed onto your system. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md ). Then run: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"internals/","text":"Internal Design The intention was always to have a python class per OCICommand element from the Broadworks AS schema. To make this easier the process_schema.py program was produced to break down the Broadworks schema into its component parts, which are represented as python classes. The classes are broken down into types , requests (commands that are sent to the Broadworks system), and responses (the replies back from the Broadworks system). The classes themselves are described by a tuple of ElementInfo instances - one per property in the schema class, and a class property for each schema property. Naming of these is in the more pythonic snake case rather than the Java-esque CamelCase. The ElementInfo class is used mainly to guide the XML serialisation and deserialisation of each object. They contain the python and XML names of each property and some flags about the propery - for example is this a required element is_required , an array like element is_array , a tabular set of data is_table or a complex element (ie containing sub-elements) is_complex . All of the component classes of the system are intended to be immutable. There are currently no helpers to aid creating a modified instance from an existing instance because these operations do not appear to be part of a normal Broadworks workflow. Implementation The ElementInfo class was originally a named tuple, but this was changed later to an attrs based class for speed and to give some type checking. The generated classes are all based on Michael DeHaan's ClassForge object system. Although it appears that attrs can provide all the functionality these objects need, it became apparent in testing that using attrs based classes added a substantial startup cost to the library, which ClassForge does not. Due to the huge number of component classes, and that they need to have the session id associated with them on creation (since the objects themselves are immutable), the BroadworksAPI class has a set of helper methods to create and send the serialised commands to the server and then return the results. In practice a user only interacts with the BroadworksAPI methods. Problems There is no easy way that I can find - especially when autogenerated - to replicate the XML schema choice elements - effectively a union between different possibilities. As such any element within a choice element has been expressed as a non-required element, and it is up to the library user to apply appropriate values to make the generated XML work. As an example of this, look at the UnboundedPositiveInt elements within the usage example, which may have either a positive numeric quantity value or have unlimited set true. Additionally in the example the surrounding ServicePackAuthorization element may have either unauthorized=True or authorized_quantity set to a UnboundedPositiveInt . The tables returned in many command responses have no type information in the schema as to how to treat them - the column information is also passed within the response itself. This means that often there are boolean or numeric values that are represented as strings. In particular the booleans will have textual values of either true or false - all in lower case.","title":"Internal Design"},{"location":"internals/#internal-design","text":"The intention was always to have a python class per OCICommand element from the Broadworks AS schema. To make this easier the process_schema.py program was produced to break down the Broadworks schema into its component parts, which are represented as python classes. The classes are broken down into types , requests (commands that are sent to the Broadworks system), and responses (the replies back from the Broadworks system). The classes themselves are described by a tuple of ElementInfo instances - one per property in the schema class, and a class property for each schema property. Naming of these is in the more pythonic snake case rather than the Java-esque CamelCase. The ElementInfo class is used mainly to guide the XML serialisation and deserialisation of each object. They contain the python and XML names of each property and some flags about the propery - for example is this a required element is_required , an array like element is_array , a tabular set of data is_table or a complex element (ie containing sub-elements) is_complex . All of the component classes of the system are intended to be immutable. There are currently no helpers to aid creating a modified instance from an existing instance because these operations do not appear to be part of a normal Broadworks workflow.","title":"Internal Design"},{"location":"internals/#implementation","text":"The ElementInfo class was originally a named tuple, but this was changed later to an attrs based class for speed and to give some type checking. The generated classes are all based on Michael DeHaan's ClassForge object system. Although it appears that attrs can provide all the functionality these objects need, it became apparent in testing that using attrs based classes added a substantial startup cost to the library, which ClassForge does not. Due to the huge number of component classes, and that they need to have the session id associated with them on creation (since the objects themselves are immutable), the BroadworksAPI class has a set of helper methods to create and send the serialised commands to the server and then return the results. In practice a user only interacts with the BroadworksAPI methods.","title":"Implementation"},{"location":"internals/#problems","text":"There is no easy way that I can find - especially when autogenerated - to replicate the XML schema choice elements - effectively a union between different possibilities. As such any element within a choice element has been expressed as a non-required element, and it is up to the library user to apply appropriate values to make the generated XML work. As an example of this, look at the UnboundedPositiveInt elements within the usage example, which may have either a positive numeric quantity value or have unlimited set true. Additionally in the example the surrounding ServicePackAuthorization element may have either unauthorized=True or authorized_quantity set to a UnboundedPositiveInt . The tables returned in many command responses have no type information in the schema as to how to treat them - the column information is also passed within the response itself. This means that often there are boolean or numeric values that are represented as strings. In particular the booleans will have textual values of either true or false - all in lower case.","title":"Problems"},{"location":"license/","text":"BSD License Copyright (c) 2020, Nigel Metheringham All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"usage/","text":"Usage Simple Usage To use Broadworks OCI-P Interface in a project:- from broadworks_ocip import BroadworksAPI # configure the API, connect and authenticate to the server api = BroadworksAPI ( host = args . host , port = args . port , username = args . username , password = args . password , ) # get the platform software level response = api . command ( \"SystemSoftwareVersionGetRequest\" ) print ( response . version ) # get a list of Service Providers on the platform response = api . command ( \"ServiceProviderGetListRequest\" ) # the response table is provided as a list of named tuple entries for provider in response . service_provider_table : print ( provider . service_provider_id ) More Complex Usage Some commands are more complex and made up of additional type components. This could lead to commands such as this:: result = api . get_command_object ( \"GroupServiceModifyAuthorizationListRequest\" , service_provider_id = \"some_enterprise\" , group_id = \"somegroup\" , service_pack_authorization = [ # a list of ServicePackAuthorization objects api . get_type_object ( # authorized, no limits \"ServicePackAuthorization\" , service_pack_name = \"Voicemail\" , authorized_quantity = api . get_type_object ( \"UnboundedPositiveInt\" , unlimited = True , ), ), api . get_type_object ( # authorized, limited to 32 instances \"ServicePackAuthorization\" , service_pack_name = \"Hushmail\" , authorized_quantity = api . get_type_object ( \"UnboundedPositiveInt\" , quantity = 32 , ), ), api . get_type_object ( # de-authorized \"ServicePackAuthorization\" , service_pack_name = \"Phone\" , unauthorized = True , ), ], ) Failures and Exceptions A failed command typically returns an ErrorResponse . When decoded the ErrorResponse will raise a OCIErrorResponse exception. Additionally a command may raise other exceptions, related to the TCP communications layers, or a OCIErrorTimeOut if no response is received in reasonable time. Server Due to the way these objects have been built it should be fairly simple to make a Broadworks OCI-P server which accepts and decodes requests and replies with appropriate responses; and this was done in a very simplified form to make the fakeserver.py which is used in testing. However this is not likely to be very useful in practice.","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#simple-usage","text":"To use Broadworks OCI-P Interface in a project:- from broadworks_ocip import BroadworksAPI # configure the API, connect and authenticate to the server api = BroadworksAPI ( host = args . host , port = args . port , username = args . username , password = args . password , ) # get the platform software level response = api . command ( \"SystemSoftwareVersionGetRequest\" ) print ( response . version ) # get a list of Service Providers on the platform response = api . command ( \"ServiceProviderGetListRequest\" ) # the response table is provided as a list of named tuple entries for provider in response . service_provider_table : print ( provider . service_provider_id )","title":"Simple Usage"},{"location":"usage/#more-complex-usage","text":"Some commands are more complex and made up of additional type components. This could lead to commands such as this:: result = api . get_command_object ( \"GroupServiceModifyAuthorizationListRequest\" , service_provider_id = \"some_enterprise\" , group_id = \"somegroup\" , service_pack_authorization = [ # a list of ServicePackAuthorization objects api . get_type_object ( # authorized, no limits \"ServicePackAuthorization\" , service_pack_name = \"Voicemail\" , authorized_quantity = api . get_type_object ( \"UnboundedPositiveInt\" , unlimited = True , ), ), api . get_type_object ( # authorized, limited to 32 instances \"ServicePackAuthorization\" , service_pack_name = \"Hushmail\" , authorized_quantity = api . get_type_object ( \"UnboundedPositiveInt\" , quantity = 32 , ), ), api . get_type_object ( # de-authorized \"ServicePackAuthorization\" , service_pack_name = \"Phone\" , unauthorized = True , ), ], )","title":"More Complex Usage"},{"location":"usage/#failures-and-exceptions","text":"A failed command typically returns an ErrorResponse . When decoded the ErrorResponse will raise a OCIErrorResponse exception. Additionally a command may raise other exceptions, related to the TCP communications layers, or a OCIErrorTimeOut if no response is received in reasonable time.","title":"Failures and Exceptions"},{"location":"usage/#server","text":"Due to the way these objects have been built it should be fairly simple to make a Broadworks OCI-P server which accepts and decodes requests and replies with appropriate responses; and this was done in a very simplified form to make the fakeserver.py which is used in testing. However this is not likely to be very useful in practice.","title":"Server"},{"location":"api/api/","text":"Main API The library is mainly used via the BroadworksAPI class in the api module: Broadworks OCI-P Interface API Class and code Main API interface - this is basically the only consumer visible part BroadworksAPI BroadworksAPI - A class encapsulating the Broadworks OCI-P API This encapsulates a connection to the Broadworks OCI-P API server and provides an interface to cerate and despatch commands to the server and receive responses back (as response class instances). Attributes: Name Type Description host str hostname/ip to connect to port int port number to connect to. Default 2208 username str username to authenticate with password str password to authenticate with logger logger object to use - set up internally by default authenticated bool are we authenticated? connect_timeout int connection timeout value (default 8) command_timeout int command timeout value (default 30) socket connection socket - set up internally session_id str session id - set up internally, only set this for testing authenticate ( self ) Authenticate the connection to the OCI-P server Exceptions: Type Description OCIErrorResponse An error was returned from the server Returns: Type Description resp Response object Source code in broadworks_ocip/api.py def authenticate ( self ): \"\"\" Authenticate the connection to the OCI-P server Arguments: Raises: OCIErrorResponse: An error was returned from the server Returns: resp: Response object \"\"\" self . send_command ( \"AuthenticationRequest\" , user_id = self . username ) resp = self . receive_response () authhash = hashlib . sha1 ( self . password . encode ()) . hexdigest () . lower () signed_password = ( hashlib . md5 ( \":\" . join ([ resp . nonce , authhash ]) . encode ()) . hexdigest () . lower () ) self . send_command ( \"LoginRequest14sp4\" , user_id = self . username , signed_password = signed_password , ) # if this fails to authenticate an ErrorResponse will be returned which forces # an exception to be raised resp = self . receive_response () # if authentication failed this line will never be executed self . authenticated = True return resp build_despatch_table ( self ) Create a despatch table of commands and types used Source code in broadworks_ocip/api.py def build_despatch_table ( self ): \"\"\" Create a despatch table of commands and types used \"\"\" self . logger . debug ( \"Building Broadworks despatch table\" ) despatch_table = {} # deal with all the main request/responses for module in ( broadworks_ocip . responses , broadworks_ocip . requests , broadworks_ocip . types , ): for name , data in inspect . getmembers ( module , inspect . isclass ): if name . startswith ( \"__\" ): continue try : if data . __module__ in ( \"broadworks_ocip.types\" , \"broadworks_ocip.requests\" , \"broadworks_ocip.responses\" , ): despatch_table [ name ] = data except AttributeError : continue # deal with special cases in base for name , data in inspect . getmembers ( broadworks_ocip . base , inspect . isclass ): if name in ( \"SuccessResponse\" , \"ErrorResponse\" ): despatch_table [ name ] = data despatch_table [ \"c:\" + name ] = data # namespace issues # we now have a despatch table... self . _despatch_table = despatch_table self . logger . debug ( \"Built Broadworks despatch table\" ) close ( self , no_log = False ) Close the connection to the OCI-P server Source code in broadworks_ocip/api.py def close ( self , no_log = False ): \"\"\" Close the connection to the OCI-P server \"\"\" if self . authenticated and not no_log : self . logger . debug ( \"Disconnect by logging out\" ) self . send_command ( \"LogoutRequest\" , user_id = self . username , reason = \"Connection close\" , ) self . authenticated = False if self . socket : try : self . socket . shutdown ( socket . SHUT_RDWR ) self . socket . close () except OSError : pass # we just ignore this under these circumstances if not no_log : self . logger . info ( f \"Disconnected from host= { self . host } port= { self . port } \" ) self . socket = None command ( self , command , ** kwargs ) Send a command and parameters to the server, receive and decode a response Parameters: Name Type Description Default command A single word name of a OCIRequest() required kwargs The arguments for the command {} Exceptions: Type Description OCIErrorResponse An error was returned from the server OCIErrorTimeOut The client timed out waiting for the server OCIErrorUnknown Unknown return from the server IOError Communications failure Returns: Type Description resp Response class instance object Source code in broadworks_ocip/api.py def command ( self , command , ** kwargs ): \"\"\" Send a command and parameters to the server, receive and decode a response Arguments: command: A single word name of a `OCIRequest()` kwargs: The arguments for the command Raises: OCIErrorResponse: An error was returned from the server OCIErrorTimeOut: The client timed out waiting for the server OCIErrorUnknown: Unknown return from the server IOError: Communications failure Returns: resp: Response class instance object \"\"\" if not self . authenticated : self . connect () self . authenticate () self . send_command ( command , ** kwargs ) return self . receive_response () configure_logger ( self ) Create and configure a logging object By default sets up a basic logger logging to the console and syslog at WARNING level. Source code in broadworks_ocip/api.py def configure_logger ( self ): \"\"\" Create and configure a logging object By default sets up a basic logger logging to the console and syslog at `WARNING` level. \"\"\" logger = logging . getLogger ( __name__ ) logger . setLevel ( logging . WARNING ) console_handler = logging . StreamHandler ( sys . stdout ) console_handler . setLevel ( logging . WARNING ) logger . addHandler ( console_handler ) self . logger = logger connect ( self ) Open the connection to the OCI-P server Exceptions: Type Description IOError Communications failure Returns: Type Description None Source code in broadworks_ocip/api.py def connect ( self ): \"\"\" Open the connection to the OCI-P server Arguments: Raises: IOError: Communications failure Returns: None \"\"\" self . logger . debug ( f \"Attempting connection host= { self . host } port= { self . port } \" ) try : address = ( self . host , self . port ) conn = socket . create_connection ( address = address , timeout = self . connect_timeout , ) self . socket = conn self . logger . info ( f \"Connected to host= { self . host } port= { self . port } \" ) except OSError as e : self . logger . error ( \"Connection failed\" ) raise e except socket . timeout as e : self . logger . error ( \"Connection timed out\" ) raise e decode_xml ( self , xml ) Decode XML into an OCICommand based object instance Parameters: Name Type Description Default xml An XML string required Exceptions: Type Description OCIErrorResponse An error was returned from the server OCIErrorUnknown Unknown return from the server Returns: Type Description Class instance object Source code in broadworks_ocip/api.py def decode_xml ( self , xml ): \"\"\" Decode XML into an OCICommand based object instance Arguments: xml: An XML string Raises: OCIErrorResponse: An error was returned from the server OCIErrorUnknown: Unknown return from the server Returns: Class instance object \"\"\" root = etree . fromstring ( xml ) if root . tag != \" {C} BroadsoftDocument\" : raise ValueError self . logger . debug ( \"Decoding BroadsoftDocument\" ) for element in root : if element . tag == \"command\" : command = element . get ( \"{http://www.w3.org/2001/XMLSchema-instance}type\" ) self . logger . debug ( f \"Decoding command { command } \" ) cls = self . _despatch_table [ command ] result = cls . build_from_etree_ ( element ) self . logger . info ( f \"<<< { result . type_ } \" ) result . post_xml_decode_ () return result raise OCIErrorUnknown ( message = \"Unknown XML decode\" , object = root ) get_command_object ( self , command , ** kwargs ) Build the OCICommand object instance for a command and parameter The difference between get_type_object , and this method is that this one sets up the session_id (which is only relevant for a command object). Parameters: Name Type Description Default command A single word name of a OCIRequest() or OCIResponse() required kwargs The arguments for the command {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description cmd An appropriate class instance Source code in broadworks_ocip/api.py def get_command_object ( self , command , ** kwargs ): \"\"\" Build the OCICommand object instance for a command and parameter The difference between `get_type_object`, and this method is that this one sets up the session_id (which is only relevant for a command object). Arguments: command: A single word name of a `OCIRequest()` or `OCIResponse()` kwargs: The arguments for the command Raises: KeyError: If command could not be found Returns: cmd: An appropriate class instance \"\"\" cls = self . get_type_class ( command ) cmd = cls ( session_id = self . session_id , ** kwargs ) return cmd get_command_xml ( self , command , ** kwargs ) Build the XML for a command and parameter Parameters: Name Type Description Default command A single word name of a OCIRequest() or OCIResponse() required kwargs The arguments for the command {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description xml An XML string Source code in broadworks_ocip/api.py def get_command_xml ( self , command , ** kwargs ): \"\"\" Build the XML for a command and parameter Arguments: command: A single word name of a `OCIRequest()` or `OCIResponse()` kwargs: The arguments for the command Raises: KeyError: If command could not be found Returns: xml: An XML string \"\"\" cmd = self . get_command_object ( command , ** kwargs ) return cmd . build_xml_ () get_type_class ( self , command ) Given a name (Request/Response/Type) name, return a class object for it Parameters: Name Type Description Default command str A single word name of a OCIType(),OCIRequest(),OCIResponse() required Exceptions: Type Description KeyError If command could not be found Returns: Type Description cls An appropriate class object Source code in broadworks_ocip/api.py def get_type_class ( self , command : str ): \"\"\" Given a name (Request/Response/Type) name, return a class object for it Arguments: command: A single word name of a OCIType(),OCIRequest(),OCIResponse() Raises: KeyError: If command could not be found Returns: cls: An appropriate class object \"\"\" try : cls = self . _despatch_table [ command ] except KeyError as e : self . logger . error ( f \"Unknown command requested - { command } \" ) raise e return cls get_type_object ( self , command , ** kwargs ) Build the OCIType object instance for a type and parameters The difference between this method, and get_command_object() is that the latter set up the session_id (which is only relevant for a command object). Parameters: Name Type Description Default command A single word name of a OCIType() required kwargs The arguments for the type {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description cmd An appropriate class instance Source code in broadworks_ocip/api.py def get_type_object ( self , command , ** kwargs ): \"\"\" Build the OCIType object instance for a type and parameters The difference between this method, and `get_command_object()` is that the latter set up the session_id (which is only relevant for a command object). Arguments: command: A single word name of a `OCIType()` kwargs: The arguments for the type Raises: KeyError: If command could not be found Returns: cmd: An appropriate class instance \"\"\" cls = self . get_type_class ( command ) cmd = cls ( ** kwargs ) return cmd on_init ( self ) Initialise the API object. Automatically called by the object initialisation code. Sets up the session_id to a random uuid.uuid4() , builds a logger object if none was passed and builds a despatch table. Source code in broadworks_ocip/api.py def on_init ( self ): \"\"\" Initialise the API object. Automatically called by the object initialisation code. Sets up the session_id to a random `uuid.uuid4()`, builds a logger object if none was passed and builds a despatch table. \"\"\" if self . session_id is None : self . session_id = str ( uuid . uuid4 ()) if self . logger is None : self . configure_logger () self . build_despatch_table () self . authenticated = False receive_response ( self ) Wait and receive response XML from server, and decode it Exceptions: Type Description OCIErrorResponse An error was returned from the server OCIErrorTimeOut The client timed out waiting for the server OCIErrorUnknown Unknown return from the server IOError Communications failure Returns: Type Description Class instance object Source code in broadworks_ocip/api.py def receive_response ( self ): \"\"\" Wait and receive response XML from server, and decode it Arguments: Raises: OCIErrorResponse: An error was returned from the server OCIErrorTimeOut: The client timed out waiting for the server OCIErrorUnknown: Unknown return from the server IOError: Communications failure Returns: Class instance object \"\"\" content = b \"\" while True : readable , writable , exceptional = select . select ( [ self . socket ], [], [], self . command_timeout , ) if readable : # there is only one thing in the set... content += self . socket . recv ( 4096 ) # look for the end of document marker (we ignore line ends) splits = content . partition ( b \"</BroadsoftDocument>\" ) if len ( splits [ 1 ]) > 0 : break elif not readable and not writable and not exceptional : raise OCIErrorTimeOut ( object = self , message = \"Read timeout\" ) self . logger . log ( VERBOSE_DEBUG , f \"RECV: { str ( content ) } \" ) return self . decode_xml ( content ) send_command ( self , command , ** kwargs ) Build the XML for a command and parameter and send it to the server Parameters: Name Type Description Default command A single word name of a OCIRequest() or OCIResponse() required kwargs The arguments for the command {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description None Source code in broadworks_ocip/api.py def send_command ( self , command , ** kwargs ): \"\"\" Build the XML for a command and parameter and send it to the server Arguments: command: A single word name of a `OCIRequest()` or `OCIResponse()` kwargs: The arguments for the command Raises: KeyError: If command could not be found Returns: None \"\"\" self . logger . info ( f \">>> { command } \" ) xml = self . get_command_xml ( command , ** kwargs ) self . logger . log ( VERBOSE_DEBUG , f \"SEND: { str ( xml ) } \" ) self . socket . sendall ( xml + b \" \\n \" )","title":"API"},{"location":"api/api/#main-api","text":"The library is mainly used via the BroadworksAPI class in the api module:","title":"Main API"},{"location":"api/api/#broadworks_ocip.api","text":"Broadworks OCI-P Interface API Class and code Main API interface - this is basically the only consumer visible part","title":"broadworks_ocip.api"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI","text":"BroadworksAPI - A class encapsulating the Broadworks OCI-P API This encapsulates a connection to the Broadworks OCI-P API server and provides an interface to cerate and despatch commands to the server and receive responses back (as response class instances). Attributes: Name Type Description host str hostname/ip to connect to port int port number to connect to. Default 2208 username str username to authenticate with password str password to authenticate with logger logger object to use - set up internally by default authenticated bool are we authenticated? connect_timeout int connection timeout value (default 8) command_timeout int command timeout value (default 30) socket connection socket - set up internally session_id str session id - set up internally, only set this for testing","title":"BroadworksAPI"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.authenticate","text":"Authenticate the connection to the OCI-P server Exceptions: Type Description OCIErrorResponse An error was returned from the server Returns: Type Description resp Response object Source code in broadworks_ocip/api.py def authenticate ( self ): \"\"\" Authenticate the connection to the OCI-P server Arguments: Raises: OCIErrorResponse: An error was returned from the server Returns: resp: Response object \"\"\" self . send_command ( \"AuthenticationRequest\" , user_id = self . username ) resp = self . receive_response () authhash = hashlib . sha1 ( self . password . encode ()) . hexdigest () . lower () signed_password = ( hashlib . md5 ( \":\" . join ([ resp . nonce , authhash ]) . encode ()) . hexdigest () . lower () ) self . send_command ( \"LoginRequest14sp4\" , user_id = self . username , signed_password = signed_password , ) # if this fails to authenticate an ErrorResponse will be returned which forces # an exception to be raised resp = self . receive_response () # if authentication failed this line will never be executed self . authenticated = True return resp","title":"authenticate()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.build_despatch_table","text":"Create a despatch table of commands and types used Source code in broadworks_ocip/api.py def build_despatch_table ( self ): \"\"\" Create a despatch table of commands and types used \"\"\" self . logger . debug ( \"Building Broadworks despatch table\" ) despatch_table = {} # deal with all the main request/responses for module in ( broadworks_ocip . responses , broadworks_ocip . requests , broadworks_ocip . types , ): for name , data in inspect . getmembers ( module , inspect . isclass ): if name . startswith ( \"__\" ): continue try : if data . __module__ in ( \"broadworks_ocip.types\" , \"broadworks_ocip.requests\" , \"broadworks_ocip.responses\" , ): despatch_table [ name ] = data except AttributeError : continue # deal with special cases in base for name , data in inspect . getmembers ( broadworks_ocip . base , inspect . isclass ): if name in ( \"SuccessResponse\" , \"ErrorResponse\" ): despatch_table [ name ] = data despatch_table [ \"c:\" + name ] = data # namespace issues # we now have a despatch table... self . _despatch_table = despatch_table self . logger . debug ( \"Built Broadworks despatch table\" )","title":"build_despatch_table()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.close","text":"Close the connection to the OCI-P server Source code in broadworks_ocip/api.py def close ( self , no_log = False ): \"\"\" Close the connection to the OCI-P server \"\"\" if self . authenticated and not no_log : self . logger . debug ( \"Disconnect by logging out\" ) self . send_command ( \"LogoutRequest\" , user_id = self . username , reason = \"Connection close\" , ) self . authenticated = False if self . socket : try : self . socket . shutdown ( socket . SHUT_RDWR ) self . socket . close () except OSError : pass # we just ignore this under these circumstances if not no_log : self . logger . info ( f \"Disconnected from host= { self . host } port= { self . port } \" ) self . socket = None","title":"close()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.command","text":"Send a command and parameters to the server, receive and decode a response Parameters: Name Type Description Default command A single word name of a OCIRequest() required kwargs The arguments for the command {} Exceptions: Type Description OCIErrorResponse An error was returned from the server OCIErrorTimeOut The client timed out waiting for the server OCIErrorUnknown Unknown return from the server IOError Communications failure Returns: Type Description resp Response class instance object Source code in broadworks_ocip/api.py def command ( self , command , ** kwargs ): \"\"\" Send a command and parameters to the server, receive and decode a response Arguments: command: A single word name of a `OCIRequest()` kwargs: The arguments for the command Raises: OCIErrorResponse: An error was returned from the server OCIErrorTimeOut: The client timed out waiting for the server OCIErrorUnknown: Unknown return from the server IOError: Communications failure Returns: resp: Response class instance object \"\"\" if not self . authenticated : self . connect () self . authenticate () self . send_command ( command , ** kwargs ) return self . receive_response ()","title":"command()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.configure_logger","text":"Create and configure a logging object By default sets up a basic logger logging to the console and syslog at WARNING level. Source code in broadworks_ocip/api.py def configure_logger ( self ): \"\"\" Create and configure a logging object By default sets up a basic logger logging to the console and syslog at `WARNING` level. \"\"\" logger = logging . getLogger ( __name__ ) logger . setLevel ( logging . WARNING ) console_handler = logging . StreamHandler ( sys . stdout ) console_handler . setLevel ( logging . WARNING ) logger . addHandler ( console_handler ) self . logger = logger","title":"configure_logger()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.connect","text":"Open the connection to the OCI-P server Exceptions: Type Description IOError Communications failure Returns: Type Description None Source code in broadworks_ocip/api.py def connect ( self ): \"\"\" Open the connection to the OCI-P server Arguments: Raises: IOError: Communications failure Returns: None \"\"\" self . logger . debug ( f \"Attempting connection host= { self . host } port= { self . port } \" ) try : address = ( self . host , self . port ) conn = socket . create_connection ( address = address , timeout = self . connect_timeout , ) self . socket = conn self . logger . info ( f \"Connected to host= { self . host } port= { self . port } \" ) except OSError as e : self . logger . error ( \"Connection failed\" ) raise e except socket . timeout as e : self . logger . error ( \"Connection timed out\" ) raise e","title":"connect()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.decode_xml","text":"Decode XML into an OCICommand based object instance Parameters: Name Type Description Default xml An XML string required Exceptions: Type Description OCIErrorResponse An error was returned from the server OCIErrorUnknown Unknown return from the server Returns: Type Description Class instance object Source code in broadworks_ocip/api.py def decode_xml ( self , xml ): \"\"\" Decode XML into an OCICommand based object instance Arguments: xml: An XML string Raises: OCIErrorResponse: An error was returned from the server OCIErrorUnknown: Unknown return from the server Returns: Class instance object \"\"\" root = etree . fromstring ( xml ) if root . tag != \" {C} BroadsoftDocument\" : raise ValueError self . logger . debug ( \"Decoding BroadsoftDocument\" ) for element in root : if element . tag == \"command\" : command = element . get ( \"{http://www.w3.org/2001/XMLSchema-instance}type\" ) self . logger . debug ( f \"Decoding command { command } \" ) cls = self . _despatch_table [ command ] result = cls . build_from_etree_ ( element ) self . logger . info ( f \"<<< { result . type_ } \" ) result . post_xml_decode_ () return result raise OCIErrorUnknown ( message = \"Unknown XML decode\" , object = root )","title":"decode_xml()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.get_command_object","text":"Build the OCICommand object instance for a command and parameter The difference between get_type_object , and this method is that this one sets up the session_id (which is only relevant for a command object). Parameters: Name Type Description Default command A single word name of a OCIRequest() or OCIResponse() required kwargs The arguments for the command {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description cmd An appropriate class instance Source code in broadworks_ocip/api.py def get_command_object ( self , command , ** kwargs ): \"\"\" Build the OCICommand object instance for a command and parameter The difference between `get_type_object`, and this method is that this one sets up the session_id (which is only relevant for a command object). Arguments: command: A single word name of a `OCIRequest()` or `OCIResponse()` kwargs: The arguments for the command Raises: KeyError: If command could not be found Returns: cmd: An appropriate class instance \"\"\" cls = self . get_type_class ( command ) cmd = cls ( session_id = self . session_id , ** kwargs ) return cmd","title":"get_command_object()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.get_command_xml","text":"Build the XML for a command and parameter Parameters: Name Type Description Default command A single word name of a OCIRequest() or OCIResponse() required kwargs The arguments for the command {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description xml An XML string Source code in broadworks_ocip/api.py def get_command_xml ( self , command , ** kwargs ): \"\"\" Build the XML for a command and parameter Arguments: command: A single word name of a `OCIRequest()` or `OCIResponse()` kwargs: The arguments for the command Raises: KeyError: If command could not be found Returns: xml: An XML string \"\"\" cmd = self . get_command_object ( command , ** kwargs ) return cmd . build_xml_ ()","title":"get_command_xml()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.get_type_class","text":"Given a name (Request/Response/Type) name, return a class object for it Parameters: Name Type Description Default command str A single word name of a OCIType(),OCIRequest(),OCIResponse() required Exceptions: Type Description KeyError If command could not be found Returns: Type Description cls An appropriate class object Source code in broadworks_ocip/api.py def get_type_class ( self , command : str ): \"\"\" Given a name (Request/Response/Type) name, return a class object for it Arguments: command: A single word name of a OCIType(),OCIRequest(),OCIResponse() Raises: KeyError: If command could not be found Returns: cls: An appropriate class object \"\"\" try : cls = self . _despatch_table [ command ] except KeyError as e : self . logger . error ( f \"Unknown command requested - { command } \" ) raise e return cls","title":"get_type_class()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.get_type_object","text":"Build the OCIType object instance for a type and parameters The difference between this method, and get_command_object() is that the latter set up the session_id (which is only relevant for a command object). Parameters: Name Type Description Default command A single word name of a OCIType() required kwargs The arguments for the type {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description cmd An appropriate class instance Source code in broadworks_ocip/api.py def get_type_object ( self , command , ** kwargs ): \"\"\" Build the OCIType object instance for a type and parameters The difference between this method, and `get_command_object()` is that the latter set up the session_id (which is only relevant for a command object). Arguments: command: A single word name of a `OCIType()` kwargs: The arguments for the type Raises: KeyError: If command could not be found Returns: cmd: An appropriate class instance \"\"\" cls = self . get_type_class ( command ) cmd = cls ( ** kwargs ) return cmd","title":"get_type_object()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.on_init","text":"Initialise the API object. Automatically called by the object initialisation code. Sets up the session_id to a random uuid.uuid4() , builds a logger object if none was passed and builds a despatch table. Source code in broadworks_ocip/api.py def on_init ( self ): \"\"\" Initialise the API object. Automatically called by the object initialisation code. Sets up the session_id to a random `uuid.uuid4()`, builds a logger object if none was passed and builds a despatch table. \"\"\" if self . session_id is None : self . session_id = str ( uuid . uuid4 ()) if self . logger is None : self . configure_logger () self . build_despatch_table () self . authenticated = False","title":"on_init()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.receive_response","text":"Wait and receive response XML from server, and decode it Exceptions: Type Description OCIErrorResponse An error was returned from the server OCIErrorTimeOut The client timed out waiting for the server OCIErrorUnknown Unknown return from the server IOError Communications failure Returns: Type Description Class instance object Source code in broadworks_ocip/api.py def receive_response ( self ): \"\"\" Wait and receive response XML from server, and decode it Arguments: Raises: OCIErrorResponse: An error was returned from the server OCIErrorTimeOut: The client timed out waiting for the server OCIErrorUnknown: Unknown return from the server IOError: Communications failure Returns: Class instance object \"\"\" content = b \"\" while True : readable , writable , exceptional = select . select ( [ self . socket ], [], [], self . command_timeout , ) if readable : # there is only one thing in the set... content += self . socket . recv ( 4096 ) # look for the end of document marker (we ignore line ends) splits = content . partition ( b \"</BroadsoftDocument>\" ) if len ( splits [ 1 ]) > 0 : break elif not readable and not writable and not exceptional : raise OCIErrorTimeOut ( object = self , message = \"Read timeout\" ) self . logger . log ( VERBOSE_DEBUG , f \"RECV: { str ( content ) } \" ) return self . decode_xml ( content )","title":"receive_response()"},{"location":"api/api/#broadworks_ocip.api.BroadworksAPI.send_command","text":"Build the XML for a command and parameter and send it to the server Parameters: Name Type Description Default command A single word name of a OCIRequest() or OCIResponse() required kwargs The arguments for the command {} Exceptions: Type Description KeyError If command could not be found Returns: Type Description None Source code in broadworks_ocip/api.py def send_command ( self , command , ** kwargs ): \"\"\" Build the XML for a command and parameter and send it to the server Arguments: command: A single word name of a `OCIRequest()` or `OCIResponse()` kwargs: The arguments for the command Raises: KeyError: If command could not be found Returns: None \"\"\" self . logger . info ( f \">>> { command } \" ) xml = self . get_command_xml ( command , ** kwargs ) self . logger . log ( VERBOSE_DEBUG , f \"SEND: { str ( xml ) } \" ) self . socket . sendall ( xml + b \" \\n \" )","title":"send_command()"},{"location":"api/base/","text":"Base Classes All of the command/request/response classes for Broadworks are built on top of these base classes: Broadworks OCI-P Interface Base Classes Base classes used by the types, requests and responses as well as other components like ElementInfo that are used by those. ElementInfo ElementInfo - information on each element of a Broadsoft OCIType Used to describe the element when serialising to/from XML Attributes: Name Type Description name str name of this element (in python snake case) xmlname str name of this element (in Java like camel case) type the type of the resulting element is_complex bool is this a complex element - containing another OCIType derived class is_required bool Is this required (True) or Optional (False) is_array bool Is this an array/list of element values is_table bool Is this a Broadworks table type - only seen in Responses __init__ ( self , name , xmlname , type , is_complex = False , is_required = False , is_array = False , is_table = False ) special Method generated by attrs for class ElementInfo. Source code in broadworks_ocip/base.py def __init__ ( self , name , xmlname , type , is_complex = attr_dict [ 'is_complex' ] . default , is_required = attr_dict [ 'is_required' ] . default , is_array = attr_dict [ 'is_array' ] . default , is_table = attr_dict [ 'is_table' ] . default ): _setattr = _cached_setattr . __get__ ( self , self . __class__ ) _setattr ( 'name' , name ) _setattr ( 'xmlname' , xmlname ) _setattr ( 'type' , type ) _setattr ( 'is_complex' , is_complex ) _setattr ( 'is_required' , is_required ) _setattr ( 'is_array' , is_array ) _setattr ( 'is_table' , is_table ) ErrorResponse The ErrorResponse is concrete response sent whenever a transaction fails and does not return any data. As this an error, when it is created from an incoming command response, a OCIErrorResponse exception is raised in post_xml_decode_ . build_xml_command_element_ ( self , root ) Build the XML etree of the main command element of the current Command Responses have an echo attribute in the element. :rtype: etree.Element() Source code in broadworks_ocip/base.py def build_xml_command_element_ ( self , root ): return etree . SubElement ( root , \"command\" , { \"type\" : \"Error\" , \"echo\" : \"\" , \"{http://www.w3.org/2001/XMLSchema-instance}type\" : \"c:\" + self . type_ , }, nsmap = self . ERROR_NSMAP , ) post_xml_decode_ ( self ) Raise an exception as this is an error Source code in broadworks_ocip/base.py def post_xml_decode_ ( self ): \"\"\"Raise an exception as this is an error\"\"\" raise OCIErrorResponse ( object = self , message = f \" { self . error_code } : { self . summary } - { self . detail } \" , ) OCICommand OCICommand - base class for all OCI Command (Request/Response) types Attributes: Name Type Description session_id str The session ID used for the command exchange. We use UUIDs by default, although this is not required. The default is fixed on here (but normally passed in from the containing API object) - do not use the default in production - its simply there to give a known value for testing. build_from_etree_non_parameters_ ( element , initialiser ) classmethod Pick up the session id from the command set Overrides the class method defined in OCIType. Source code in broadworks_ocip/base.py @classmethod def build_from_etree_non_parameters_ ( cls , element : \"etree._Element\" , initialiser : dict , ): \"\"\" Pick up the session id from the command set Overrides the class method defined in OCIType. \"\"\" node = element . find ( \"sessionId\" ) if node is not None : initialiser [ \"session_id\" ] = node . text build_xml_ ( self ) Build an XML document of the current Command (Request/Response) Returns: Type Description xml string containing XML document Source code in broadworks_ocip/base.py def build_xml_ ( self ): \"\"\" Build an XML document of the current Command (Request/Response) Parameters: Returns: xml: string containing XML document \"\"\" # document root element root = etree . Element ( \" {C} BroadsoftDocument\" , { \"protocol\" : \"OCI\" }, nsmap = self . DOCUMENT_NSMAP , ) # # add the session session = etree . SubElement ( root , \"sessionId\" , nsmap = self . DEFAULT_NSMAP ) session . text = self . session_id # # and the command element = self . build_xml_command_element_ ( root ) self . etree_sub_components_ ( element ) # attach parameters etc # # wrap a tree around it tree = etree . ElementTree ( root ) return etree . tostring ( tree , xml_declaration = True , encoding = \"ISO-8859-1\" , # standalone=False, # pretty_print=True, ) build_xml_command_element_ ( self , root ) Build the XML etree of the main command element of the current Command Intended to be overridden in a subclass for the few elements that do things a little differently (for example errors). :rtype: etree.Element() Source code in broadworks_ocip/base.py def build_xml_command_element_ ( self , root : \"etree._Element\" ): \"\"\" Build the XML etree of the main command element of the current Command Intended to be overridden in a subclass for the few elements that do things a little differently (for example errors). :rtype: etree.Element() \"\"\" return etree . SubElement ( root , \"command\" , { \"{http://www.w3.org/2001/XMLSchema-instance}type\" : self . type_ }, nsmap = self . DEFAULT_NSMAP , ) OCIRequest OCIRequest - base class for all OCI Command Request types OCIResponse OCIResponse - base class for all OCI Command Response types build_xml_command_element_ ( self , root ) Build the XML etree of the main command element of the current Command Responses have an echo attribute in the element. :rtype: etree.Element() Source code in broadworks_ocip/base.py def build_xml_command_element_ ( self , root : \"etree._Element\" ): \"\"\" Build the XML etree of the main command element of the current Command Responses have an echo attribute in the element. :rtype: etree.Element() \"\"\" return etree . SubElement ( root , \"command\" , { \"echo\" : \"\" , \"{http://www.w3.org/2001/XMLSchema-instance}type\" : self . type_ }, nsmap = self . DEFAULT_NSMAP , ) OCIType OCIType - Base type for all the OCI-P component classes type_ property readonly Return the typename of the class build_from_etree_ ( element ) classmethod Create an OciType based instance from an XML etree element Parameters: Name Type Description Default element etree._Element The OCITable XML element required Returns: Type Description results Object instance for this class Source code in broadworks_ocip/base.py @classmethod def build_from_etree_ ( cls , element : \"etree._Element\" ): \"\"\" Create an OciType based instance from an XML etree element Arguments: element: The OCITable XML element Returns: results: Object instance for this class \"\"\" initialiser = {} for elem in cls . _ELEMENTS : if elem . is_array : result = [] nodes = element . findall ( elem . xmlname ) for node in nodes : result . append ( node . text ) initialiser [ elem . name ] = result else : node = element . find ( elem . xmlname ) if node is not None : if elem . is_table : initialiser [ elem . name ] = cls . decode_table_ ( node ) elif elem . is_complex : initialiser [ elem . name ] = elem . type . build_from_etree_ ( node ) elif elem . type == bool : initialiser [ elem . name ] = elem . type ( True if node . text == \"true\" else False , ) else : initialiser [ elem . name ] = elem . type ( node . text ) # else... # I am inclined to thow an error here - at least after checking if # the thing is require, but the class builder should do that so lets # let it do its thing # now have a dict with all the bits in it. # use that to build a new object return cls ( ** initialiser ) build_from_etree_non_parameters_ ( element , initialiser ) classmethod Handle any items outside the parameter set Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. Source code in broadworks_ocip/base.py @classmethod def build_from_etree_non_parameters_ ( cls , element : \"etree._Element\" , initialiser : dict , ): \"\"\" Handle any items outside the parameter set Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. \"\"\" pass column_header_snake_case_ ( header ) classmethod Converts an XML name into a pythonic snake case name Parameters: Name Type Description Default header The header name in space separated words required Returns: Type Description snake lower cased and underscore separated result name Source code in broadworks_ocip/base.py @classmethod def column_header_snake_case_ ( cls , header ): \"\"\" Converts an XML name into a pythonic snake case name Arguments: header: The header name in space separated words Returns: snake: lower cased and underscore separated result name \"\"\" return re . sub ( \"[ _]+\" , r \"_\" , header ) . lower () decode_table_ ( element ) classmethod Decode a table (used in a OCIResponse) into a list of named tuples Parameters: Name Type Description Default element etree._Element The OCITable XML element required Returns: Type Description results List of namedtuple elements, one for each table row Source code in broadworks_ocip/base.py @classmethod def decode_table_ ( cls , element : \"etree._Element\" ): \"\"\" Decode a table (used in a OCIResponse) into a list of named tuples Arguments: element: The OCITable XML element Returns: results: List of namedtuple elements, one for each table row \"\"\" typename : str = element . tag results = [] columns = [ cls . column_header_snake_case_ ( b . text ) for b in element . iterfind ( \"colHeading\" ) ] type = namedtuple ( typename , columns ) # type: ignore for row in element . iterfind ( \"row\" ): rowdata = [ b . text for b in row . iterfind ( \"col\" )] rowobj = type ( * rowdata ) results . append ( rowobj ) return results etree_components_ ( self , name = None ) Build XML etree element tree for this OCIType Parameters: Name Type Description Default name The name or tag of the element - defaults to the type_ None Returns: Type Description etree etree.Element() for this class Source code in broadworks_ocip/base.py def etree_components_ ( self , name = None ): \"\"\" Build XML etree element tree for this OCIType Arguments: name: The name or tag of the element - defaults to the `type_` Returns: etree: etree.Element() for this class \"\"\" if name is None : name = self . type_ element = etree . Element ( name , nsmap = self . DEFAULT_NSMAP ) return self . etree_sub_components_ ( element ) etree_sub_components_ ( self , element ) Build XML etree subelements for the components within this OCIType Parameters: Name Type Description Default element etree._Element The parent element that the components are to be attached to required Returns: Type Description etree etree.Element() for this class Source code in broadworks_ocip/base.py def etree_sub_components_ ( self , element : \"etree._Element\" ): \"\"\" Build XML etree subelements for the components within this OCIType Arguments: element: The parent element that the components are to be attached to Returns: etree: etree.Element() for this class \"\"\" for sub_element in self . _ELEMENTS : value = getattr ( self , sub_element . name ) if sub_element . is_array : if value is not None : for subvalue in value : self . etree_sub_element_ ( element , sub_element , subvalue ) else : self . etree_sub_element_ ( element , sub_element , value ) return element etree_sub_element_ ( self , element , sub_element , value ) Build XML etree subelement for one elemnt within this OCIType Parameters: Name Type Description Default element etree._Element The parent element that the components are to be attached to required sub_element ElementInfo The definition of the sub element to be attached required value Value of the sub element - quite possibly None required Returns: Type Description etree etree.Element() for this class Source code in broadworks_ocip/base.py def etree_sub_element_ ( self , element : \"etree._Element\" , sub_element : \"ElementInfo\" , value , ): \"\"\" Build XML etree subelement for one elemnt within this OCIType Arguments: element: The parent element that the components are to be attached to sub_element: The definition of the sub element to be attached value: Value of the sub element - quite possibly None Returns: etree: etree.Element() for this class \"\"\" if value is None : if sub_element . is_required : etree . SubElement ( element , sub_element . xmlname , { \"{http://www.w3.org/2001/XMLSchema-instance}nil\" : \"true\" }, nsmap = self . DEFAULT_NSMAP , ) elif sub_element . is_table : # any table should be a list of namedtuple elements if type ( value ) is list and len ( value ) > 0 : elem = etree . SubElement ( element , sub_element . xmlname , nsmap = self . DEFAULT_NSMAP , ) first = value [ 0 ] for col in first . _fields : col_heading = etree . SubElement ( elem , \"colHeading\" ) col_heading . text = self . snake_case_to_column_header ( col ) for row in value : row_item = etree . SubElement ( elem , \"row\" ) for col in row : col_item = etree . SubElement ( row_item , \"col\" ) col_item . text = col elif sub_element . is_complex : elem = etree . SubElement ( element , sub_element . xmlname , nsmap = self . DEFAULT_NSMAP , ) value . etree_sub_components_ ( elem ) else : elem = etree . SubElement ( element , sub_element . xmlname , nsmap = self . DEFAULT_NSMAP , ) if sub_element . type == bool : elem . text = \"true\" if value else \"false\" elif sub_element . type == int : elem . text = str ( value ) else : elem . text = value post_xml_decode_ ( self ) Carry out any operations after the XML decode Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. Source code in broadworks_ocip/base.py def post_xml_decode_ ( self ): \"\"\" Carry out any operations after the XML decode Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. \"\"\" pass snake_case_to_column_header ( self , snake_str ) Converts a pythonic snake case name into a column header name Parameters: Name Type Description Default header The header name in snake lower case required Returns: Type Description snake initial capital and space separated result name Source code in broadworks_ocip/base.py def snake_case_to_column_header ( self , snake_str ): \"\"\" Converts a pythonic snake case name into a column header name Arguments: header: The header name in snake lower case Returns: snake: initial capital and space separated result name \"\"\" components = snake_str . split ( \"_\" ) # We capitalize the first letter of each component except the first one # with the 'title' method and join them together. return \" \" . join ( x . title () for x in components ) SuccessResponse The SuccessResponse is concrete response sent whenever a transaction is successful and does not return any data.","title":"Base Classes"},{"location":"api/base/#base-classes","text":"All of the command/request/response classes for Broadworks are built on top of these base classes:","title":"Base Classes"},{"location":"api/base/#broadworks_ocip.base","text":"Broadworks OCI-P Interface Base Classes Base classes used by the types, requests and responses as well as other components like ElementInfo that are used by those.","title":"broadworks_ocip.base"},{"location":"api/base/#broadworks_ocip.base.ElementInfo","text":"ElementInfo - information on each element of a Broadsoft OCIType Used to describe the element when serialising to/from XML Attributes: Name Type Description name str name of this element (in python snake case) xmlname str name of this element (in Java like camel case) type the type of the resulting element is_complex bool is this a complex element - containing another OCIType derived class is_required bool Is this required (True) or Optional (False) is_array bool Is this an array/list of element values is_table bool Is this a Broadworks table type - only seen in Responses","title":"ElementInfo"},{"location":"api/base/#broadworks_ocip.base.ElementInfo.__init__","text":"Method generated by attrs for class ElementInfo. Source code in broadworks_ocip/base.py def __init__ ( self , name , xmlname , type , is_complex = attr_dict [ 'is_complex' ] . default , is_required = attr_dict [ 'is_required' ] . default , is_array = attr_dict [ 'is_array' ] . default , is_table = attr_dict [ 'is_table' ] . default ): _setattr = _cached_setattr . __get__ ( self , self . __class__ ) _setattr ( 'name' , name ) _setattr ( 'xmlname' , xmlname ) _setattr ( 'type' , type ) _setattr ( 'is_complex' , is_complex ) _setattr ( 'is_required' , is_required ) _setattr ( 'is_array' , is_array ) _setattr ( 'is_table' , is_table )","title":"__init__()"},{"location":"api/base/#broadworks_ocip.base.ErrorResponse","text":"The ErrorResponse is concrete response sent whenever a transaction fails and does not return any data. As this an error, when it is created from an incoming command response, a OCIErrorResponse exception is raised in post_xml_decode_ .","title":"ErrorResponse"},{"location":"api/base/#broadworks_ocip.base.ErrorResponse.build_xml_command_element_","text":"Build the XML etree of the main command element of the current Command Responses have an echo attribute in the element. :rtype: etree.Element() Source code in broadworks_ocip/base.py def build_xml_command_element_ ( self , root ): return etree . SubElement ( root , \"command\" , { \"type\" : \"Error\" , \"echo\" : \"\" , \"{http://www.w3.org/2001/XMLSchema-instance}type\" : \"c:\" + self . type_ , }, nsmap = self . ERROR_NSMAP , )","title":"build_xml_command_element_()"},{"location":"api/base/#broadworks_ocip.base.ErrorResponse.post_xml_decode_","text":"Raise an exception as this is an error Source code in broadworks_ocip/base.py def post_xml_decode_ ( self ): \"\"\"Raise an exception as this is an error\"\"\" raise OCIErrorResponse ( object = self , message = f \" { self . error_code } : { self . summary } - { self . detail } \" , )","title":"post_xml_decode_()"},{"location":"api/base/#broadworks_ocip.base.OCICommand","text":"OCICommand - base class for all OCI Command (Request/Response) types Attributes: Name Type Description session_id str The session ID used for the command exchange. We use UUIDs by default, although this is not required. The default is fixed on here (but normally passed in from the containing API object) - do not use the default in production - its simply there to give a known value for testing.","title":"OCICommand"},{"location":"api/base/#broadworks_ocip.base.OCICommand.build_from_etree_non_parameters_","text":"Pick up the session id from the command set Overrides the class method defined in OCIType. Source code in broadworks_ocip/base.py @classmethod def build_from_etree_non_parameters_ ( cls , element : \"etree._Element\" , initialiser : dict , ): \"\"\" Pick up the session id from the command set Overrides the class method defined in OCIType. \"\"\" node = element . find ( \"sessionId\" ) if node is not None : initialiser [ \"session_id\" ] = node . text","title":"build_from_etree_non_parameters_()"},{"location":"api/base/#broadworks_ocip.base.OCICommand.build_xml_","text":"Build an XML document of the current Command (Request/Response) Returns: Type Description xml string containing XML document Source code in broadworks_ocip/base.py def build_xml_ ( self ): \"\"\" Build an XML document of the current Command (Request/Response) Parameters: Returns: xml: string containing XML document \"\"\" # document root element root = etree . Element ( \" {C} BroadsoftDocument\" , { \"protocol\" : \"OCI\" }, nsmap = self . DOCUMENT_NSMAP , ) # # add the session session = etree . SubElement ( root , \"sessionId\" , nsmap = self . DEFAULT_NSMAP ) session . text = self . session_id # # and the command element = self . build_xml_command_element_ ( root ) self . etree_sub_components_ ( element ) # attach parameters etc # # wrap a tree around it tree = etree . ElementTree ( root ) return etree . tostring ( tree , xml_declaration = True , encoding = \"ISO-8859-1\" , # standalone=False, # pretty_print=True, )","title":"build_xml_()"},{"location":"api/base/#broadworks_ocip.base.OCICommand.build_xml_command_element_","text":"Build the XML etree of the main command element of the current Command Intended to be overridden in a subclass for the few elements that do things a little differently (for example errors). :rtype: etree.Element() Source code in broadworks_ocip/base.py def build_xml_command_element_ ( self , root : \"etree._Element\" ): \"\"\" Build the XML etree of the main command element of the current Command Intended to be overridden in a subclass for the few elements that do things a little differently (for example errors). :rtype: etree.Element() \"\"\" return etree . SubElement ( root , \"command\" , { \"{http://www.w3.org/2001/XMLSchema-instance}type\" : self . type_ }, nsmap = self . DEFAULT_NSMAP , )","title":"build_xml_command_element_()"},{"location":"api/base/#broadworks_ocip.base.OCIRequest","text":"OCIRequest - base class for all OCI Command Request types","title":"OCIRequest"},{"location":"api/base/#broadworks_ocip.base.OCIResponse","text":"OCIResponse - base class for all OCI Command Response types","title":"OCIResponse"},{"location":"api/base/#broadworks_ocip.base.OCIResponse.build_xml_command_element_","text":"Build the XML etree of the main command element of the current Command Responses have an echo attribute in the element. :rtype: etree.Element() Source code in broadworks_ocip/base.py def build_xml_command_element_ ( self , root : \"etree._Element\" ): \"\"\" Build the XML etree of the main command element of the current Command Responses have an echo attribute in the element. :rtype: etree.Element() \"\"\" return etree . SubElement ( root , \"command\" , { \"echo\" : \"\" , \"{http://www.w3.org/2001/XMLSchema-instance}type\" : self . type_ }, nsmap = self . DEFAULT_NSMAP , )","title":"build_xml_command_element_()"},{"location":"api/base/#broadworks_ocip.base.OCIType","text":"OCIType - Base type for all the OCI-P component classes","title":"OCIType"},{"location":"api/base/#broadworks_ocip.base.OCIType.type_","text":"Return the typename of the class","title":"type_"},{"location":"api/base/#broadworks_ocip.base.OCIType.build_from_etree_","text":"Create an OciType based instance from an XML etree element Parameters: Name Type Description Default element etree._Element The OCITable XML element required Returns: Type Description results Object instance for this class Source code in broadworks_ocip/base.py @classmethod def build_from_etree_ ( cls , element : \"etree._Element\" ): \"\"\" Create an OciType based instance from an XML etree element Arguments: element: The OCITable XML element Returns: results: Object instance for this class \"\"\" initialiser = {} for elem in cls . _ELEMENTS : if elem . is_array : result = [] nodes = element . findall ( elem . xmlname ) for node in nodes : result . append ( node . text ) initialiser [ elem . name ] = result else : node = element . find ( elem . xmlname ) if node is not None : if elem . is_table : initialiser [ elem . name ] = cls . decode_table_ ( node ) elif elem . is_complex : initialiser [ elem . name ] = elem . type . build_from_etree_ ( node ) elif elem . type == bool : initialiser [ elem . name ] = elem . type ( True if node . text == \"true\" else False , ) else : initialiser [ elem . name ] = elem . type ( node . text ) # else... # I am inclined to thow an error here - at least after checking if # the thing is require, but the class builder should do that so lets # let it do its thing # now have a dict with all the bits in it. # use that to build a new object return cls ( ** initialiser )","title":"build_from_etree_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.build_from_etree_non_parameters_","text":"Handle any items outside the parameter set Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. Source code in broadworks_ocip/base.py @classmethod def build_from_etree_non_parameters_ ( cls , element : \"etree._Element\" , initialiser : dict , ): \"\"\" Handle any items outside the parameter set Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. \"\"\" pass","title":"build_from_etree_non_parameters_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.column_header_snake_case_","text":"Converts an XML name into a pythonic snake case name Parameters: Name Type Description Default header The header name in space separated words required Returns: Type Description snake lower cased and underscore separated result name Source code in broadworks_ocip/base.py @classmethod def column_header_snake_case_ ( cls , header ): \"\"\" Converts an XML name into a pythonic snake case name Arguments: header: The header name in space separated words Returns: snake: lower cased and underscore separated result name \"\"\" return re . sub ( \"[ _]+\" , r \"_\" , header ) . lower ()","title":"column_header_snake_case_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.decode_table_","text":"Decode a table (used in a OCIResponse) into a list of named tuples Parameters: Name Type Description Default element etree._Element The OCITable XML element required Returns: Type Description results List of namedtuple elements, one for each table row Source code in broadworks_ocip/base.py @classmethod def decode_table_ ( cls , element : \"etree._Element\" ): \"\"\" Decode a table (used in a OCIResponse) into a list of named tuples Arguments: element: The OCITable XML element Returns: results: List of namedtuple elements, one for each table row \"\"\" typename : str = element . tag results = [] columns = [ cls . column_header_snake_case_ ( b . text ) for b in element . iterfind ( \"colHeading\" ) ] type = namedtuple ( typename , columns ) # type: ignore for row in element . iterfind ( \"row\" ): rowdata = [ b . text for b in row . iterfind ( \"col\" )] rowobj = type ( * rowdata ) results . append ( rowobj ) return results","title":"decode_table_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.etree_components_","text":"Build XML etree element tree for this OCIType Parameters: Name Type Description Default name The name or tag of the element - defaults to the type_ None Returns: Type Description etree etree.Element() for this class Source code in broadworks_ocip/base.py def etree_components_ ( self , name = None ): \"\"\" Build XML etree element tree for this OCIType Arguments: name: The name or tag of the element - defaults to the `type_` Returns: etree: etree.Element() for this class \"\"\" if name is None : name = self . type_ element = etree . Element ( name , nsmap = self . DEFAULT_NSMAP ) return self . etree_sub_components_ ( element )","title":"etree_components_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.etree_sub_components_","text":"Build XML etree subelements for the components within this OCIType Parameters: Name Type Description Default element etree._Element The parent element that the components are to be attached to required Returns: Type Description etree etree.Element() for this class Source code in broadworks_ocip/base.py def etree_sub_components_ ( self , element : \"etree._Element\" ): \"\"\" Build XML etree subelements for the components within this OCIType Arguments: element: The parent element that the components are to be attached to Returns: etree: etree.Element() for this class \"\"\" for sub_element in self . _ELEMENTS : value = getattr ( self , sub_element . name ) if sub_element . is_array : if value is not None : for subvalue in value : self . etree_sub_element_ ( element , sub_element , subvalue ) else : self . etree_sub_element_ ( element , sub_element , value ) return element","title":"etree_sub_components_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.etree_sub_element_","text":"Build XML etree subelement for one elemnt within this OCIType Parameters: Name Type Description Default element etree._Element The parent element that the components are to be attached to required sub_element ElementInfo The definition of the sub element to be attached required value Value of the sub element - quite possibly None required Returns: Type Description etree etree.Element() for this class Source code in broadworks_ocip/base.py def etree_sub_element_ ( self , element : \"etree._Element\" , sub_element : \"ElementInfo\" , value , ): \"\"\" Build XML etree subelement for one elemnt within this OCIType Arguments: element: The parent element that the components are to be attached to sub_element: The definition of the sub element to be attached value: Value of the sub element - quite possibly None Returns: etree: etree.Element() for this class \"\"\" if value is None : if sub_element . is_required : etree . SubElement ( element , sub_element . xmlname , { \"{http://www.w3.org/2001/XMLSchema-instance}nil\" : \"true\" }, nsmap = self . DEFAULT_NSMAP , ) elif sub_element . is_table : # any table should be a list of namedtuple elements if type ( value ) is list and len ( value ) > 0 : elem = etree . SubElement ( element , sub_element . xmlname , nsmap = self . DEFAULT_NSMAP , ) first = value [ 0 ] for col in first . _fields : col_heading = etree . SubElement ( elem , \"colHeading\" ) col_heading . text = self . snake_case_to_column_header ( col ) for row in value : row_item = etree . SubElement ( elem , \"row\" ) for col in row : col_item = etree . SubElement ( row_item , \"col\" ) col_item . text = col elif sub_element . is_complex : elem = etree . SubElement ( element , sub_element . xmlname , nsmap = self . DEFAULT_NSMAP , ) value . etree_sub_components_ ( elem ) else : elem = etree . SubElement ( element , sub_element . xmlname , nsmap = self . DEFAULT_NSMAP , ) if sub_element . type == bool : elem . text = \"true\" if value else \"false\" elif sub_element . type == int : elem . text = str ( value ) else : elem . text = value","title":"etree_sub_element_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.post_xml_decode_","text":"Carry out any operations after the XML decode Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. Source code in broadworks_ocip/base.py def post_xml_decode_ ( self ): \"\"\" Carry out any operations after the XML decode Intended for use by subclasses where they need to take actions immediately after they are created from an incoming XML document. \"\"\" pass","title":"post_xml_decode_()"},{"location":"api/base/#broadworks_ocip.base.OCIType.snake_case_to_column_header","text":"Converts a pythonic snake case name into a column header name Parameters: Name Type Description Default header The header name in snake lower case required Returns: Type Description snake initial capital and space separated result name Source code in broadworks_ocip/base.py def snake_case_to_column_header ( self , snake_str ): \"\"\" Converts a pythonic snake case name into a column header name Arguments: header: The header name in snake lower case Returns: snake: initial capital and space separated result name \"\"\" components = snake_str . split ( \"_\" ) # We capitalize the first letter of each component except the first one # with the 'title' method and join them together. return \" \" . join ( x . title () for x in components )","title":"snake_case_to_column_header()"},{"location":"api/base/#broadworks_ocip.base.SuccessResponse","text":"The SuccessResponse is concrete response sent whenever a transaction is successful and does not return any data.","title":"SuccessResponse"},{"location":"api/exceptions/","text":"Exceptions These exceptions are used within the code - there may be some generic OS exceptions that things like communications issues can throw as well: Broadworks OCI-P Interface Exception Classes Exception classes used by the API. OCIError Base Exception raised by OCI operations. Attributes: Name Type Description message str explanation of why it went bang object the thing that went bang __init__ ( self , message , object = None ) special Method generated by attrs for class OCIError. Source code in broadworks_ocip/exceptions.py def __init__ ( self , message , object = attr_dict [ 'object' ] . default ): _setattr = _cached_setattr . __get__ ( self , self . __class__ ) _setattr ( 'message' , message ) _setattr ( 'object' , object ) OCIErrorResponse Exception raised when an ErrorResponse is received and decoded. Subclass of OCIError() OCIErrorTimeOut Exception raised when nothing is head back from the server. Subclass of OCIError() OCIErrorUnknown Exception raised when life becomes too much for the software. Subclass of OCIError()","title":"Exceptions"},{"location":"api/exceptions/#exceptions","text":"These exceptions are used within the code - there may be some generic OS exceptions that things like communications issues can throw as well:","title":"Exceptions"},{"location":"api/exceptions/#broadworks_ocip.exceptions","text":"Broadworks OCI-P Interface Exception Classes Exception classes used by the API.","title":"broadworks_ocip.exceptions"},{"location":"api/exceptions/#broadworks_ocip.exceptions.OCIError","text":"Base Exception raised by OCI operations. Attributes: Name Type Description message str explanation of why it went bang object the thing that went bang","title":"OCIError"},{"location":"api/exceptions/#broadworks_ocip.exceptions.OCIError.__init__","text":"Method generated by attrs for class OCIError. Source code in broadworks_ocip/exceptions.py def __init__ ( self , message , object = attr_dict [ 'object' ] . default ): _setattr = _cached_setattr . __get__ ( self , self . __class__ ) _setattr ( 'message' , message ) _setattr ( 'object' , object )","title":"__init__()"},{"location":"api/exceptions/#broadworks_ocip.exceptions.OCIErrorResponse","text":"Exception raised when an ErrorResponse is received and decoded. Subclass of OCIError()","title":"OCIErrorResponse"},{"location":"api/exceptions/#broadworks_ocip.exceptions.OCIErrorTimeOut","text":"Exception raised when nothing is head back from the server. Subclass of OCIError()","title":"OCIErrorTimeOut"},{"location":"api/exceptions/#broadworks_ocip.exceptions.OCIErrorUnknown","text":"Exception raised when life becomes too much for the software. Subclass of OCIError()","title":"OCIErrorUnknown"}]}