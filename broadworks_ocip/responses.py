"""Broadworks OCI-P Interface Response Classes"""
# Autogenerated from the Broadworks XML Schemas.
# Do not edit as changes will be overwritten.
# Generated on 2022-02-03T19:53:17.839584
# fmt: off
from typing import Tuple

import broadworks_ocip.types as OCI
from .base import ElementInfo as E
from .base import OCIResponse


class AuthenticationResponse(OCIResponse):
    """
    ``AuthenticationRequest()``/Response is 1st stage of the 2 stage OCI login process.


    Attributes:
        user_id: userId
        nonce: nonce
        password_algorithm: passwordAlgorithm
    """

    __slots__ = [
        "user_id",
        "nonce",
        "password_algorithm",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("nonce", "nonce", str, is_required=True),
            E("password_algorithm", "passwordAlgorithm", str, is_required=True),
        )


class AuthenticationVerifyResponse(OCIResponse):
    """
    Response to ``AuthenticationVerifyRequest()``

    Replaced By: ``AuthenticationVerifyResponse14sp8()``

    Attributes:
        login_type: loginType
        locale: locale
        encoding: encoding
        group_id: groupId
        service_provider_id: serviceProviderId
        is_enterprise: isEnterprise
        password_expires_days: passwordExpiresDays
        user_domain: userDomain
        last_name: lastName
        first_name: firstName
    """

    __slots__ = [
        "login_type",
        "locale",
        "encoding",
        "group_id",
        "service_provider_id",
        "is_enterprise",
        "password_expires_days",
        "user_domain",
        "last_name",
        "first_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("login_type", "loginType", str, is_required=True),
            E("locale", "locale", str, is_required=True),
            E("encoding", "encoding", str, is_required=True),
            E("group_id", "groupId", str),
            E("service_provider_id", "serviceProviderId", str),
            E("is_enterprise", "isEnterprise", bool, is_required=True),
            E("password_expires_days", "passwordExpiresDays", int),
            E("user_domain", "userDomain", str, is_required=True),
            E("last_name", "lastName", str),
            E("first_name", "firstName", str),
        )


class AuthenticationVerifyResponse14sp8(OCIResponse):
    """
    Response to ``AuthenticationVerifyRequest14sp8()`` If a phoneNumber is returned, it
    will be the primay DN of the user

    Attributes:
        login_type: loginType
        locale: locale
        encoding: encoding
        group_id: groupId
        service_provider_id: serviceProviderId
        is_enterprise: isEnterprise
        password_expires_days: passwordExpiresDays
        last_name: lastName
        first_name: firstName
        user_id: userId
        phone_number: phoneNumber
    """

    __slots__ = [
        "login_type",
        "locale",
        "encoding",
        "group_id",
        "service_provider_id",
        "is_enterprise",
        "password_expires_days",
        "last_name",
        "first_name",
        "user_id",
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("login_type", "loginType", str, is_required=True),
            E("locale", "locale", str, is_required=True),
            E("encoding", "encoding", str, is_required=True),
            E("group_id", "groupId", str),
            E("service_provider_id", "serviceProviderId", str),
            E("is_enterprise", "isEnterprise", bool, is_required=True),
            E("password_expires_days", "passwordExpiresDays", int),
            E("last_name", "lastName", str),
            E("first_name", "firstName", str),
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str),
        )


class DeviceManagementFileAuthLocationGetResponse(OCIResponse):
    """
    Return the address and credentials of the File Repository hosting the requested access
    device file.

    Also return the file name and path on the File Repository.  This is a response to
    ``DeviceManagementFileAuthLocationGetRequest()``.

    Attributes:
        file_repository_user_name: fileRepositoryUserName
        file_repository_password: fileRepositoryPassword
        net_address: netAddress
        remote_file_format: remoteFileFormat
        port_number: portNumber
        root_directory: rootDirectory
        cpe_file_directory: cpeFileDirectory
        secure: secure
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        completion_notification: completionNotification
        file_category: fileCategory
    """

    __slots__ = [
        "file_repository_user_name",
        "file_repository_password",
        "net_address",
        "remote_file_format",
        "port_number",
        "root_directory",
        "cpe_file_directory",
        "secure",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "completion_notification",
        "file_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_repository_user_name",
                "fileRepositoryUserName",
                str,
                is_required=True,
            ),
            E(
                "file_repository_password",
                "fileRepositoryPassword",
                str,
                is_required=True,
            ),
            E("net_address", "netAddress", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("port_number", "portNumber", int),
            E("root_directory", "rootDirectory", str),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E("secure", "secure", bool),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
            E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
            ),
            E("completion_notification", "completionNotification", bool),
            E("file_category", "fileCategory", str),
        )


class DeviceManagementFileAuthLocationGetResponse17(OCIResponse):
    """
    Return the address and credentials of the File Repository hosting the requested access
    device file.

    Also return the file name and path on the File Repository.  This is a response to
    ``DeviceManagementFileAuthLocationGetRequest17()``. Replaced by:
    ``DeviceManagementFileAuthLocationGetRequest18()``

    Attributes:
        file_repository_user_name: fileRepositoryUserName
        file_repository_password: fileRepositoryPassword
        net_address: netAddress
        remote_file_format: remoteFileFormat
        port_number: portNumber
        root_directory: rootDirectory
        cpe_file_directory: cpeFileDirectory
        secure: secure
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        completion_notification: completionNotification
        file_category: fileCategory
    """

    __slots__ = [
        "file_repository_user_name",
        "file_repository_password",
        "net_address",
        "remote_file_format",
        "port_number",
        "root_directory",
        "cpe_file_directory",
        "secure",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "completion_notification",
        "file_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_repository_user_name",
                "fileRepositoryUserName",
                str,
                is_required=True,
            ),
            E(
                "file_repository_password",
                "fileRepositoryPassword",
                str,
                is_required=True,
            ),
            E("net_address", "netAddress", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("port_number", "portNumber", int),
            E("root_directory", "rootDirectory", str),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E("secure", "secure", bool),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
            E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
            ),
            E("completion_notification", "completionNotification", bool),
            E("file_category", "fileCategory", str),
        )


class DeviceManagementFileAuthLocationGetResponse18(OCIResponse):
    """
    Return the address and credentials of the File Repository hosting the requested access
    device file.

    Also return the file name and path on the File Repository.  This is a response to
    ``DeviceManagementFileAuthLocationGetRequest18()``. Replaced by:
    ``DeviceManagementFileAuthLocationGetResponse21()``.

    Attributes:
        file_repository_user_name: fileRepositoryUserName
        file_repository_password: fileRepositoryPassword
        net_address: netAddress
        remote_file_format: remoteFileFormat
        port_number: portNumber
        root_directory: rootDirectory
        cpe_file_directory: cpeFileDirectory
        secure: secure
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        completion_notification: completionNotification
        file_category: fileCategory
        enable_caching: enableCaching
    """

    __slots__ = [
        "file_repository_user_name",
        "file_repository_password",
        "net_address",
        "remote_file_format",
        "port_number",
        "root_directory",
        "cpe_file_directory",
        "secure",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "completion_notification",
        "file_category",
        "enable_caching",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_repository_user_name",
                "fileRepositoryUserName",
                str,
                is_required=True,
            ),
            E(
                "file_repository_password",
                "fileRepositoryPassword",
                str,
                is_required=True,
            ),
            E("net_address", "netAddress", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("port_number", "portNumber", int),
            E("root_directory", "rootDirectory", str),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E("secure", "secure", bool),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
            E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
            ),
            E("completion_notification", "completionNotification", bool),
            E("file_category", "fileCategory", str),
            E("enable_caching", "enableCaching", bool),
        )


class DeviceManagementFileAuthLocationGetResponse21(OCIResponse):
    """
    This is a response to ``DeviceManagementFileAuthLocationGetRequest21()``.

    Return the address and credentials of the File Repository hosting the requested access
    device file.  Also return the file name and path on the File Repository.  Also returns
    the status of the file authentication.

    Attributes:
        status: status
        file_repository_user_name: fileRepositoryUserName
        file_repository_password: fileRepositoryPassword
        net_address: netAddress
        remote_file_format: remoteFileFormat
        port_number: portNumber
        root_directory: rootDirectory
        cpe_file_directory: cpeFileDirectory
        secure: secure
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        completion_notification: completionNotification
        file_category: fileCategory
        enable_caching: enableCaching
        notify_file_upload: notifyFileUpload
    """

    __slots__ = [
        "status",
        "file_repository_user_name",
        "file_repository_password",
        "net_address",
        "remote_file_format",
        "port_number",
        "root_directory",
        "cpe_file_directory",
        "secure",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "completion_notification",
        "file_category",
        "enable_caching",
        "notify_file_upload",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status", "status", str),
            E(
                "file_repository_user_name",
                "fileRepositoryUserName",
                str,
                is_required=True,
            ),
            E(
                "file_repository_password",
                "fileRepositoryPassword",
                str,
                is_required=True,
            ),
            E("net_address", "netAddress", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("port_number", "portNumber", int),
            E("root_directory", "rootDirectory", str),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E("secure", "secure", bool),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
            E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
            ),
            E("completion_notification", "completionNotification", bool),
            E("file_category", "fileCategory", str),
            E("enable_caching", "enableCaching", bool),
            E("notify_file_upload", "notifyFileUpload", bool),
        )


class EnterpriseBroadWorksMobileManagerGetDomainListResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetDomainListRequest()``.

    Contains the list of domains.

    Attributes:
        domain_name: domainName
    """

    __slots__ = [
        "domain_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("domain_name", "domainName", str, is_array=True),
        )


class EnterpriseBroadWorksMobileManagerGetHomeZoneListResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetHomeZoneListRequest()``.

    Contains a table with column headings: "Home Zone Id", "Domain Name", "Mobile Country
    Code", "Mobile Network Code", "Local Area Code" and "Cell Identity".

    Attributes:
        home_zones_table: homeZonesTable
    """

    __slots__ = [
        "home_zones_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "home_zones_table",
                "homeZonesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseBroadWorksMobileManagerGetHomeZoneResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetHomeZoneRequest()``

    Attributes:
        home_zone_domain_name: homeZoneDomainName
        mobile_country_code: mobileCountryCode
        mobile_network_code: mobileNetworkCode
        location_area_code: locationAreaCode
        cell_identity: cellIdentity
    """

    __slots__ = [
        "home_zone_domain_name",
        "mobile_country_code",
        "mobile_network_code",
        "location_area_code",
        "cell_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("home_zone_domain_name", "homeZoneDomainName", str, is_required=True),
            E("mobile_country_code", "mobileCountryCode", str, is_required=True),
            E("mobile_network_code", "mobileNetworkCode", str, is_required=True),
            E("location_area_code", "locationAreaCode", str, is_required=True),
            E("cell_identity", "cellIdentity", str, is_required=True),
        )


class EnterpriseBroadWorksMobileManagerGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseBroadWorksMobileManagerGetRequest()``

    Attributes:
        mobile_manager_id: mobileManagerId
        name: name
        is_active: isActive
        local_to_carrier: localToCarrier
        deactivation_reason: deactivationReason
        max_tx_per_second_enabled: maxTxPerSecondEnabled
        max_tx_per_second: maxTxPerSecond
        tldn_enabled: tldnEnabled
        generic_number_enabled: genericNumberEnabled
        mobile_state_check_enabled: mobileStateCheckEnabled
        location_based_services_enabled: locationBasedServicesEnabled
    """

    __slots__ = [
        "mobile_manager_id",
        "name",
        "is_active",
        "local_to_carrier",
        "deactivation_reason",
        "max_tx_per_second_enabled",
        "max_tx_per_second",
        "tldn_enabled",
        "generic_number_enabled",
        "mobile_state_check_enabled",
        "location_based_services_enabled",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mobile_manager_id", "mobileManagerId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("local_to_carrier", "localToCarrier", bool, is_required=True),
            E("deactivation_reason", "deactivationReason", str),
            E(
                "max_tx_per_second_enabled",
                "maxTxPerSecondEnabled",
                bool,
                is_required=True,
            ),
            E("max_tx_per_second", "maxTxPerSecond", int),
            E("tldn_enabled", "tldnEnabled", bool, is_required=True),
            E("generic_number_enabled", "genericNumberEnabled", bool, is_required=True),
            E(
                "mobile_state_check_enabled",
                "mobileStateCheckEnabled",
                bool,
                is_required=True,
            ),
            E(
                "location_based_services_enabled",
                "locationBasedServicesEnabled",
                bool,
                is_required=True,
            ),
        )


class EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListRequest()``.

    The response contains a table with columns: "Mobile Number", "User Id", "Last Name",
    "First Name","Phone Number","Extension", "Group Id", "Department" and "Mobile
    Network". The "Mobile Number" column contains a single DN. The "User Id", "Last Name"
    and "First Name" columns contains the corresponding attributes of the user possessing
    the DN(s). The "Phone Number" column contains a single DN. The "Group Id" column
    contains the Group Id of the user.  The "Department" column contains the department of
    the user if it is part of a department.  The "Mobile Network" column contains the
    Mobile Network the number belongs to.

    Attributes:
        mobile_subscriber_directory_numbers_assignment_table:
            mobileSubscriberDirectoryNumbersAssignmentTable
    """

    __slots__ = [
        "mobile_subscriber_directory_numbers_assignment_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "mobile_subscriber_directory_numbers_assignment_table",
                "mobileSubscriberDirectoryNumbersAssignmentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest()``.

    Contains a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any user.

    Attributes:
        available_mobile_subscriber_directory_number:
            availableMobileSubscriberDirectoryNumber
    """

    __slots__ = [
        "available_mobile_subscriber_directory_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_mobile_subscriber_directory_number",
                "availableMobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


class EnterpriseCallCenterAgentThresholdDefaultProfileGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentThresholdDefaultProfileGetRequest()``.

    The agent table contains the agents assigned to the profile and has column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address";

    Attributes:
        profile_name: profileName
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address: notificationEmailAddress
        agent_table: agentTable
    """

    __slots__ = [
        "profile_name",
        "profile_description",
        "threshold_current_call_state_idle_time_yellow",
        "threshold_current_call_state_idle_time_red",
        "threshold_current_call_state_on_call_time_yellow",
        "threshold_current_call_state_on_call_time_red",
        "threshold_current_agent_state_unavailable_time_yellow",
        "threshold_current_agent_state_unavailable_time_red",
        "threshold_average_busy_in_time_yellow",
        "threshold_average_busy_in_time_red",
        "threshold_average_busy_out_time_yellow",
        "threshold_average_busy_out_time_red",
        "threshold_average_wrap_up_time_yellow",
        "threshold_average_wrap_up_time_red",
        "enable_notification_email",
        "notification_email_address",
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_name", "profileName", str, is_required=True),
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E(
                "enable_notification_email",
                "enableNotificationEmail",
                bool,
                is_required=True,
            ),
            E(
                "notification_email_address",
                "notificationEmailAddress",
                str,
                is_array=True,
            ),
            E("agent_table", "agentTable", list, is_complex=True, is_table=True),
        )


class EnterpriseCallCenterAgentThresholdProfileGetAvailableAgentListResponse(OCIResponse):
    """
    Response to the
    ``EnterpriseCallCenterAgentThresholdProfileGetAvailableAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Agent Threshold Profile";

    Attributes:
        agent_table: agentTable
    """

    __slots__ = [
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_table",
                "agentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterAgentThresholdProfileGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentThresholdProfileGetListRequest()``.

    Contains a table with all the Call Center Agent Threshold Profiles in the Enterprise.
    The column headings are: "Default", "Name", "Description".

    Attributes:
        profiles_table: profilesTable
    """

    __slots__ = [
        "profiles_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profiles_table",
                "profilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterAgentThresholdProfileGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentThresholdProfileGetRequest()``.

    The agentTable contains the agents assigned to the profile and has the column
    headings: "User Id", "Group Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address";

    Attributes:
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address: notificationEmailAddress
        agent_table: agentTable
    """

    __slots__ = [
        "profile_description",
        "threshold_current_call_state_idle_time_yellow",
        "threshold_current_call_state_idle_time_red",
        "threshold_current_call_state_on_call_time_yellow",
        "threshold_current_call_state_on_call_time_red",
        "threshold_current_agent_state_unavailable_time_yellow",
        "threshold_current_agent_state_unavailable_time_red",
        "threshold_average_busy_in_time_yellow",
        "threshold_average_busy_in_time_red",
        "threshold_average_busy_out_time_yellow",
        "threshold_average_busy_out_time_red",
        "threshold_average_wrap_up_time_yellow",
        "threshold_average_wrap_up_time_red",
        "enable_notification_email",
        "notification_email_address",
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E(
                "enable_notification_email",
                "enableNotificationEmail",
                bool,
                is_required=True,
            ),
            E(
                "notification_email_address",
                "notificationEmailAddress",
                str,
                is_array=True,
            ),
            E(
                "agent_table",
                "agentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterAgentUnavailableCodeGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentUnavailableCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".

    Attributes:
        unavailable_codes_table: unavailableCodesTable
    """

    __slots__ = [
        "unavailable_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "unavailable_codes_table",
                "unavailableCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterAgentUnavailableCodeGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterAgentUnavailableCodeGetRequest()``

    Attributes:
        is_active: isActive
        description: description
    """

    __slots__ = [
        "is_active",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


class EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest()``.

    Replaced by ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse17sp4()``.

    Attributes:
        enable_agent_unavailable_codes: enableAgentUnavailableCodes
        default_agent_unavailable_code_on_dnd: defaultAgentUnavailableCodeOnDND
        default_agent_unavailable_code_on_personal_calls:
            defaultAgentUnavailableCodeOnPersonalCalls
        default_agent_unavailable_code_on_consecutive_bounces:
            defaultAgentUnavailableCodeOnConsecutiveBounces
        force_use_of_agent_unavailable_codes: forceUseOfAgentUnavailableCodes
        default_agent_unavailable_code: defaultAgentUnavailableCode
    """

    __slots__ = [
        "enable_agent_unavailable_codes",
        "default_agent_unavailable_code_on_dnd",
        "default_agent_unavailable_code_on_personal_calls",
        "default_agent_unavailable_code_on_consecutive_bounces",
        "force_use_of_agent_unavailable_codes",
        "default_agent_unavailable_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_agent_unavailable_codes",
                "enableAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E(
                "default_agent_unavailable_code_on_dnd",
                "defaultAgentUnavailableCodeOnDND",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_personal_calls",
                "defaultAgentUnavailableCodeOnPersonalCalls",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_consecutive_bounces",
                "defaultAgentUnavailableCodeOnConsecutiveBounces",
                str,
            ),
            E(
                "force_use_of_agent_unavailable_codes",
                "forceUseOfAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
        )


class EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse17sp4(OCIResponse):
    """
    Response to ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest17sp4()``.


    Attributes:
        enable_agent_unavailable_codes: enableAgentUnavailableCodes
        default_agent_unavailable_code_on_dnd: defaultAgentUnavailableCodeOnDND
        default_agent_unavailable_code_on_personal_calls:
            defaultAgentUnavailableCodeOnPersonalCalls
        default_agent_unavailable_code_on_consecutive_bounces:
            defaultAgentUnavailableCodeOnConsecutiveBounces
        default_agent_unavailable_code_on_not_reachable:
            defaultAgentUnavailableCodeOnNotReachable
        force_use_of_agent_unavailable_codes: forceUseOfAgentUnavailableCodes
        default_agent_unavailable_code: defaultAgentUnavailableCode
    """

    __slots__ = [
        "enable_agent_unavailable_codes",
        "default_agent_unavailable_code_on_dnd",
        "default_agent_unavailable_code_on_personal_calls",
        "default_agent_unavailable_code_on_consecutive_bounces",
        "default_agent_unavailable_code_on_not_reachable",
        "force_use_of_agent_unavailable_codes",
        "default_agent_unavailable_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_agent_unavailable_codes",
                "enableAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E(
                "default_agent_unavailable_code_on_dnd",
                "defaultAgentUnavailableCodeOnDND",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_personal_calls",
                "defaultAgentUnavailableCodeOnPersonalCalls",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_consecutive_bounces",
                "defaultAgentUnavailableCodeOnConsecutiveBounces",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_not_reachable",
                "defaultAgentUnavailableCodeOnNotReachable",
                str,
            ),
            E(
                "force_use_of_agent_unavailable_codes",
                "forceUseOfAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
        )


class EnterpriseCallCenterCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".

    Attributes:
        disposition_codes_table: dispositionCodesTable
    """

    __slots__ = [
        "disposition_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disposition_codes_table",
                "dispositionCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCallDispositionCodeGetRequest()``

    Attributes:
        is_active: isActive
        description: description
    """

    __slots__ = [
        "is_active",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


class EnterpriseCallCenterCallDispositionCodeGetUsageListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCallDispositionCodeGetUsageListRequest()``.

    The Type column contains either "Call Center" or "Route Point". Contains a table with
    column headings: "Group Id", "Id", "Name" and "Type".

    Attributes:
        call_center_table: callCenterTable
    """

    __slots__ = [
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterCurrentAndPastAgentGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCurrentAndPastAgentGetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        agent_user_table: agentUserTable
        deleted_agent_user_table: deletedAgentUserTable
    """

    __slots__ = [
        "agent_user_table",
        "deleted_agent_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "deleted_agent_user_table",
                "deletedAgentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterCurrentAndPastCallCenterGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCurrentAndPastCallCenterGetListRequest()``.


    Attributes:
        service_user_id: serviceUserId
        deleted_service_user_id: deletedServiceUserId
    """

    __slots__ = [
        "service_user_id",
        "deleted_service_user_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_array=True),
            E("deleted_service_user_id", "deletedServiceUserId", str, is_array=True),
        )


class EnterpriseCallCenterCurrentAndPastDNISGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterCurrentAndPastDNISGetListRequest()``.


    Attributes:
        name: name
        deleted_name: deletedName
    """

    __slots__ = [
        "name",
        "deleted_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_array=True),
            E("deleted_name", "deletedName", str, is_array=True),
        )


class EnterpriseCallCenterEnhancedReportingBrandingGetResponse(OCIResponse):
    """
    Response to the ``EnterpriseCallCenterEnhancedReportingBrandingGetRequest()``.


    Attributes:
        branding_choice: brandingChoice
        branding_file_description: brandingFileDescription
    """

    __slots__ = [
        "branding_choice",
        "branding_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("branding_choice", "brandingChoice", str, is_required=True),
            E("branding_file_description", "brandingFileDescription", str),
        )


class EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListRequest()``.

    Contains a table with column headings: "Name", "Description" and "Level", "Is Agent
    Required", "Is Call Center Required", "Is Call Center Dnis Required", "Is Real Time
    Report", "Is Sampling Period Required", "Call Completion Threshold Parameter", "Short
    Duration Threshold Parameter", "Service Level Threshold Parameter", "Service Level
    Inclusions Parameter", "Service Level Objective Threshold Parameter", "Abandoned Call
    Threshold Parameter", "Service Level Threshold Parameter Number", "Abandoned Call
    Threshold Parameter Number" and "Scope". The possible values for "Level" are "System"
    and "Enterprise". The possible values for "Is Agent Required", "Is Call Center
    Required", "Is Call Center Dnis Required", "Is Real Time Report" and "Is Sampling
    Period Required" are "true" and "false". The possible values for "Call Completion
    Threshold Parameter", "Short Duration Threshold Parameter", "Service Level Threshold
    Parameter", "Service Level Inclusions Parameter", "Service Level Objective Threshold
    Parameter" and "Abandoned Call Threshold Parameter" are "Required", "Hidden" and "Does
    Not Apply". The possible values for "Scope" are "Supervisor Only" and "Supervisor and
    Agent".

    Attributes:
        report_template_table: reportTemplateTable
    """

    __slots__ = [
        "report_template_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "report_template_table",
                "reportTemplateTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterEnhancedReportingGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingGetRequest()``.

    Replaced by ``EnterpriseCallCenterEnhancedReportingGetResponse19()``

    Attributes:
        reporting_server: reportingServer
        web_statistic_source: webStatisticSource
    """

    __slots__ = [
        "reporting_server",
        "web_statistic_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("reporting_server", "reportingServer", str, is_required=True),
            E("web_statistic_source", "webStatisticSource", str, is_required=True),
        )


class EnterpriseCallCenterEnhancedReportingGetResponse19(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingGetRequest19()``.


    Attributes:
        reporting_server: reportingServer
    """

    __slots__ = [
        "reporting_server",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("reporting_server", "reportingServer", str, is_required=True),
        )


class EnterpriseCallCenterEnhancedReportingReportTemplateGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingReportTemplateGetListRequest()``.

    Contains a table with column headings: "Name", "Description", "Type" and "Enabled".

    Attributes:
        report_template_table: reportTemplateTable
    """

    __slots__ = [
        "report_template_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "report_template_table",
                "reportTemplateTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterEnhancedReportingReportTemplateGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingReportTemplateGetRequest()``.


    Attributes:
        description: description
        data_template: dataTemplate
        filter_number: filterNumber
        xslt_template_description: xsltTemplateDescription
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        call_completion_threshold_param: callCompletionThresholdParam
        short_duration_threshold_param: shortDurationThresholdParam
        service_level_threshold_param: serviceLevelThresholdParam
        service_level_inclusions_param: serviceLevelInclusionsParam
        service_level_objective_threshold_param: serviceLevelObjectiveThresholdParam
        abandoned_call_threshold_param: abandonedCallThresholdParam
        service_level_threshold_param_number: serviceLevelThresholdParamNumber
        abandoned_call_threshold_param_number: abandonedCallThresholdParamNumber
        filter_value: filterValue
    """

    __slots__ = [
        "description",
        "data_template",
        "filter_number",
        "xslt_template_description",
        "scope",
        "is_enabled",
        "is_realtime_report",
        "call_completion_threshold_param",
        "short_duration_threshold_param",
        "service_level_threshold_param",
        "service_level_inclusions_param",
        "service_level_objective_threshold_param",
        "abandoned_call_threshold_param",
        "service_level_threshold_param_number",
        "abandoned_call_threshold_param_number",
        "filter_value",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("data_template", "dataTemplate", str, is_required=True),
            E("filter_number", "filterNumber", int),
            E(
                "xslt_template_description",
                "xsltTemplateDescription",
                str,
                is_required=True,
            ),
            E("scope", "scope", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("call_completion_threshold_param", "callCompletionThresholdParam", str),
            E("short_duration_threshold_param", "shortDurationThresholdParam", str),
            E("service_level_threshold_param", "serviceLevelThresholdParam", str),
            E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
            E(
                "service_level_objective_threshold_param",
                "serviceLevelObjectiveThresholdParam",
                str,
            ),
            E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
            E(
                "service_level_threshold_param_number",
                "serviceLevelThresholdParamNumber",
                int,
            ),
            E(
                "abandoned_call_threshold_param_number",
                "abandonedCallThresholdParamNumber",
                int,
            ),
            E("filter_value", "filterValue", str, is_array=True),
        )


class EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListRequest()``.

    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Report Template Name", "Report Template Level" and
    "Recurring". The "Created By" can be either "Administrator" or user id if created by
    supervisor.  The possible values for "Recurring" are "None", "Daily", "Weekly",
    "Monthly" and "Yearly". The possible values for "Report Level" are "System" and
    "Enterprise".

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListRequest()``
    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Report Template Name", "Report Template Level" and
    "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Level" are "System" and "Enterprise".

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterEnhancedReportingScheduledReportGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingScheduledReportGetListRequest()``.

    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Status", "Report Template Name", "Report Template Level" and
    "Recurring". The "Created By" can be either "Administrator" or user id if created by
    supervisor.  The possible values for "Status" are "Active", and "Completed". The
    possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and "Yearly".
    The possible values for "Report Level" are "System" and "Enterprise".

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest()``.

    Contains a table with column headings: "Schedule Name", "Created By", "Created By
    Supervisor", and "Is Active". The "Created By" can be either "Administrator" or user
    id if created by supervisor.

    Attributes:
        schedule_report_table: scheduleReportTable
    """

    __slots__ = [
        "schedule_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_report_table",
                "scheduleReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseCallCenterGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterGetRequest()``.

    Replaced by ``EnterpriseCallCenterGetResponse17sp4()``.

    Attributes:
        use_system_default_guard_timer: useSystemDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
    """

    __slots__ = [
        "use_system_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_system_default_guard_timer",
                "useSystemDefaultGuardTimer",
                bool,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
        )


class EnterpriseCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to ``EnterpriseCallCenterGetRequest17sp4()``.


    Attributes:
        use_system_default_guard_timer: useSystemDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
    """

    __slots__ = [
        "use_system_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "force_agent_unavailable_on_not_reachable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_system_default_guard_timer",
                "useSystemDefaultGuardTimer",
                bool,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
        )


class EnterpriseCallCenterGetRoutingPolicyResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterGetRoutingPolicyRequest()``.

    Contains a table with column headings: "Service User Id", "Name" and "Priority".

    Attributes:
        routing_policy: routingPolicy
        call_center_table: callCenterTable
    """

    __slots__ = [
        "routing_policy",
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("routing_policy", "routingPolicy", str, is_required=True),
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseEnterpriseTrunkGetAvailableUserListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetAvailableUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number",
    "Extension", "Department", "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseEnterpriseTrunkGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetListRequest()``.

    Contains a table of enterprise trunks defined in the enterprise The column headings
    are: "Enterprise Trunk Name", "Routing Type"

    Attributes:
        enterprise_trunk_table: enterpriseTrunkTable
    """

    __slots__ = [
        "enterprise_trunk_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enterprise_trunk_table",
                "enterpriseTrunkTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseEnterpriseTrunkGetResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetRequest()``.

    Replaced by: ``EnterpriseEnterpriseTrunkGetResponse21()``.

    Attributes:
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
    """

    __slots__ = [
        "maximum_reroute_attempts",
        "route_exhaustion_action",
        "route_exhaustion_forward_address",
        "ordered_routing",
        "priority_weighted_routing",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
        )


class EnterpriseEnterpriseTrunkGetResponse21(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetRequest21()``.


    Attributes:
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
        enable_capacity_management: enableCapacityManagement
        max_active_calls: maxActiveCalls
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
    """

    __slots__ = [
        "maximum_reroute_attempts",
        "route_exhaustion_action",
        "route_exhaustion_forward_address",
        "ordered_routing",
        "priority_weighted_routing",
        "enable_capacity_management",
        "max_active_calls",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "enable_capacity_management",
                "enableCapacityManagement",
                bool,
                is_required=True,
            ),
            E("max_active_calls", "maxActiveCalls", int),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
        )


class EnterpriseEnterpriseTrunkGetUserListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "Group Id", "User Id", "Last
    Name", "First Name", "Phone Number", "Alternate Trunk Identity", "Hiragana Last Name",
    "Hiragana First Name", "Extension", "Department", "Email Address" and "Route List
    Assigned".

    Attributes:
        enterprise_trunk_user_table: enterpriseTrunkUserTable
    """

    __slots__ = [
        "enterprise_trunk_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enterprise_trunk_user_table",
                "enterpriseTrunkUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterprisePhoneDirectoryGetListResponse(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id". If extended directory information is requested, the following
    columns are also included: "First Name", "Last Name", "User Id", "Pager", "Title",
    "Time Zone", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country". Replace by: ``EnterprisePhoneDirectoryGetListResponse17()``

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterprisePhoneDirectoryGetListResponse17(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest17()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "Is Virtual On-Net User". If extended directory information is
    requested, the following columns are also included: "First Name", "Last Name", "User
    Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1", "Address Line 2",
    "City", "State", "Zip", "Country". Replaced by:
    ``EnterprisePhoneDirectoryGetListResponse18()``

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterprisePhoneDirectoryGetListResponse17sp3(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest17sp3()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "IMP Id", "Is Virtual On-Net User". If extended directory
    information is requested, the following columns are also included: "First Name", "Last
    Name", "User Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country". Replaced by:
    ``EnterprisePhoneDirectoryGetListResponse18()``

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterprisePhoneDirectoryGetListResponse18(OCIResponse):
    """
    Response to ``EnterprisePhoneDirectoryGetListRequest18()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "User Id", "IMP Id", "Is Virtual On-Net User". If extended
    directory information is requested, the following columns are also included: "First
    Name", "Last Name", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country".

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterprisePreAlertingAnnouncementGetResponse(OCIResponse):
    """
    Get the Enterprise level pre-alerting service settings.

    The response is either a ``EnterprisePreAlertingAnnouncementGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        announcement_interruption: announcementInterruption
        interruption_digit_sequence: interruptionDigitSequence
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        video_file_url: videoFileUrl
    """

    __slots__ = [
        "announcement_interruption",
        "interruption_digit_sequence",
        "audio_selection",
        "audio_file_description",
        "audio_media_type",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_media_type",
        "video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_interruption",
                "announcementInterruption",
                str,
                is_required=True,
            ),
            E("interruption_digit_sequence", "interruptionDigitSequence", str),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("video_file_url", "videoFileUrl", str),
        )


class EnterpriseRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``EnterpriseRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest()``.

    Contains a list of number ranges that are assigned to an enterprise and still
    available for assignment to users within the enterprise.  The column headings are
    "Number Range Start", "Number Range End" and "Is Active".

    Attributes:
        available_number_range_table: availableNumberRangeTable
    """

    __slots__ = [
        "available_number_range_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_number_range_table",
                "availableNumberRangeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to ``EnterpriseRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The response contains a table with columns: "Number Range Start", "Number Range End",
    "Group Id", "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department", "Email Address", "Enterprise
    Trunk" and "Is Active". The "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name", "Phone Number", "Extension", "Department" and "Email
    Address" columns contains the corresponding attributes of the user possessing the
    number range.  The "Enterprise Trunk" column contains the enterprise trunk the user
    possessing the number range belongs to.  The "Is Active" column indicates if the
    number range has been activated.

    Attributes:
        number_range_summary_table: numberRangeSummaryTable
    """

    __slots__ = [
        "number_range_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "number_range_summary_table",
                "numberRangeSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseSessionAdmissionControlGroupGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGroupGetListRequest()``.

    Contains a table of session admission control group configured in the enterprise.  The
    column headings are: "Name", "Is Default", "Maximum Sessions", "Maximum Originating
    Sessions", "Maximum Terminating Sessions"..

    Attributes:
        session_admission_control_group_table: sessionAdmissionControlGroupTable
    """

    __slots__ = [
        "session_admission_control_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "session_admission_control_group_table",
                "sessionAdmissionControlGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListResponse(OCIResponse):
    """
    Response to ``EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListRequest()``.

    Contains a table with column headings : "Group Id", "Last Name", "First Name", "Phone
    Number", "Extension", "Virtual On-Net Call Type" in a row for each user.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseVoiceVPNGetPolicyListResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetListResponse()``.

    Returns a 4 column table with column headings: "Location Code", "Min Extension
    Length", "Max Extension Length", "Location Selection".

    Attributes:
        location_list: locationList
    """

    __slots__ = [
        "location_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "location_list",
                "locationList",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class EnterpriseVoiceVPNGetResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetRequest()``.

    Replaced By: ``EnterpriseVoiceVPNGetResponse14sp3()``

    Attributes:
        is_active: isActive
        default_selection: defaultSelection
        e164_selection: e164Selection
    """

    __slots__ = [
        "is_active",
        "default_selection",
        "e164_selection",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("default_selection", "defaultSelection", str, is_required=True),
            E("e164_selection", "e164Selection", str, is_required=True),
        )


class EnterpriseVoiceVPNGetResponse14sp3(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetRequest14sp3()``.


    Attributes:
        is_active: isActive
        default_selection: defaultSelection
        e164_selection: e164Selection
        use_phone_context: usePhoneContext
    """

    __slots__ = [
        "is_active",
        "default_selection",
        "e164_selection",
        "use_phone_context",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("default_selection", "defaultSelection", str, is_required=True),
            E("e164_selection", "e164Selection", str, is_required=True),
            E("use_phone_context", "usePhoneContext", bool, is_required=True),
        )


class ExternalAuthenticationCreateLoginTokenResponse(OCIResponse):
    """
    Response to ``ExternalAuthenticationCreateLoginTokenRequest()``.


    Attributes:
        login_token: loginToken
    """

    __slots__ = [
        "login_token",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("login_token", "loginToken", str, is_required=True),
        )


class GroupAccessDeviceAvailablePortGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceAvailablePortGetListRequest()``.

    Contains a list of available ports in a device using static mode.  The list is empty
    in case the device is using dynamic mode.

    Attributes:
        port_number: portNumber
    """

    __slots__ = [
        "port_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("port_number", "portNumber", int, is_array=True),
        )


class GroupAccessDeviceCustomTagGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device profile basis.  The column headings are: "Tag Name", "Tag Value"

    Attributes:
        device_custom_tags_table: deviceCustomTagsTable
    """

    __slots__ = [
        "device_custom_tags_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_custom_tags_table",
                "deviceCustomTagsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``GroupAccessDeviceFileGetListResponse14sp8()``

    Attributes:
        device_files_table: deviceFilesTable
    """

    __slots__ = [
        "device_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_files_table",
                "deviceFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAccessDeviceFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL", "Extended Capture". The following
    columns are only used in AS data mode: "Extended Capture"

    Attributes:
        device_files_table: deviceFilesTable
    """

    __slots__ = [
        "device_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_files_table",
                "deviceFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest()``.

    Replaced By: ``GroupAccessDeviceFileGetResponse14sp8()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
        )


class GroupAccessDeviceFileGetResponse14sp8(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest14sp8()``.

    Replaced by: ``GroupAccessDeviceFileGetResponse16sp1()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
        )


class GroupAccessDeviceFileGetResponse16sp1(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest16sp1()``.


    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "access_url",
        "repository_url",
        "template_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
        )


class GroupAccessDeviceFileGetResponse20(OCIResponse):
    """
    Response to ``GroupAccessDeviceFileGetRequest20()``.


    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
        extended_capture_enabled: extendedCaptureEnabled
        extended_capture_url: extendedCaptureURL
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "access_url",
        "repository_url",
        "template_url",
        "extended_capture_enabled",
        "extended_capture_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
            E("extended_capture_enabled", "extendedCaptureEnabled", bool),
            E("extended_capture_url", "extendedCaptureURL", str),
        )


class GroupAccessDeviceGetAvailableDetailListResponse14(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetAvailableDetailListRequest14()``.


    Attributes:
        available_access_device: availableAccessDevice
    """

    __slots__ = [
        "available_access_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_access_device",
                "availableAccessDevice",
                str,
                is_complex=True,
                is_array=True,
            ),  # unknown
        )


class GroupAccessDeviceGetAvailableDetailListResponse19(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetAvailableDetailListRequest19()``.


    Attributes:
        available_access_device: availableAccessDevice
    """

    __slots__ = [
        "available_access_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_access_device",
                "availableAccessDevice",
                str,
                is_complex=True,
                is_array=True,
            ),  # unknown
        )


class GroupAccessDeviceGetEnhancedConfigurationTypeListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetEnhancedConfigurationTypeListRequest()``.


    Attributes:
        device_type: deviceType
    """

    __slots__ = [
        "device_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_array=True),
        )


class GroupAccessDeviceGetEnhancedConfigurationTypeResponse14(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetEnhancedConfigurationTypeRequest14()``.


    Attributes:
        supports_enhanced_configuration: supportsEnhancedConfiguration
        supports_reset: supportsReset
        configuration_type: configurationType
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "supports_enhanced_configuration",
        "supports_reset",
        "configuration_type",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "supports_enhanced_configuration",
                "supportsEnhancedConfiguration",
                bool,
                is_required=True,
            ),
            E("supports_reset", "supportsReset", bool, is_required=True),
            E("configuration_type", "configurationType", str),
            E("configuration_file_name", "configurationFileName", str),
        )


class GroupAccessDeviceGetListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetListRequest()``.

    Contains a table of devices configured in the group.  The column headings are: "Device
    Name", "Device Type", "Available Ports", "Net Address", "MAC Address", "Status" and
    "Version".

    Attributes:
        access_device_table: accessDeviceTable
    """

    __slots__ = [
        "access_device_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_device_table",
                "accessDeviceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAccessDeviceGetUserListResponse(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetUserListRequest()``.

    The column headings for the deviceUserTable are: "Line/Port", "Last Name", "First
    Name", "Phone Number", "User Id", "User Type", "Endpoint Type", "Order", "Primary
    Line/Port", "Extension", "Department", "Email Address", "Private Identity". In IMS
    mode, the table will contain a row for each TEL-URI in the Phone Number column.  In
    Standalone mode, rows for the alternate numbers are not included.  The User Type
    column contains one of the enumerated UserType values.  The Endpoint Type column
    contains one of the enumerated EndpointType values.  The Private Identity column is
    empty is AS mode.

    Attributes:
        device_user_table: deviceUserTable
    """

    __slots__ = [
        "device_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_user_table",
                "deviceUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAccountAuthorizationCodesGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupAccountAuthorizationCodesGetAvailableUserListRequest()``.

    The column headings are: "User Id", "Last Name", "First Name", "Hiragana Last Name"
    and "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAccountAuthorizationCodesGetResponse(OCIResponse):
    """
    Response to ``GroupAccountAuthorizationCodesGetRequest()``.

    The tables has the following column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address".

    Attributes:
        type: type
        number_of_digits: numberOfDigits
        allow_local_and_toll_free_calls: allowLocalAndTollFreeCalls
        mandatory_usage_user_table: mandatoryUsageUserTable
        optional_usage_user_table: optionalUsageUserTable
    """

    __slots__ = [
        "type",
        "number_of_digits",
        "allow_local_and_toll_free_calls",
        "mandatory_usage_user_table",
        "optional_usage_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("type", "type", str, is_required=True),
            E("number_of_digits", "numberOfDigits", int, is_required=True),
            E(
                "allow_local_and_toll_free_calls",
                "allowLocalAndTollFreeCalls",
                bool,
                is_required=True,
            ),
            E(
                "mandatory_usage_user_table",
                "mandatoryUsageUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "optional_usage_user_table",
                "optionalUsageUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAdminGetListResponse(OCIResponse):
    """
    Response to ``GroupAdminGetListRequest()``.

    Contains a 5 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Department", "Language".

    Attributes:
        group_admin_table: groupAdminTable
    """

    __slots__ = [
        "group_admin_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_admin_table",
                "groupAdminTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAdminGetPolicyResponse(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest()``.

    Contains the policy settings for the group administrator.

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        service_access: serviceAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "service_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
        )


class GroupAdminGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest14sp1()``.

    Contains the policy settings for the group administrator.

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "service_access",
        "trunk_group_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
        )


class GroupAdminGetPolicyResponse16sp1(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest16sp1()``.

    Contains the policy settings for the group administrator.  Replaced by:
    ``GroupAdminGetPolicyRequest17()``

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "service_access",
        "trunk_group_access",
        "session_admission_control_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
        )


class GroupAdminGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest16sp2()``.

    Contains the policy settings for the group administrator.

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
        dialable_caller_id_access: dialableCallerIDAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "trunk_group_access",
        "session_admission_control_access",
        "dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class GroupAdminGetPolicyResponse17(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest17()``.

    Contains the policy settings for the group administrator.

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
        office_zone_access: officeZoneAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "trunk_group_access",
        "session_admission_control_access",
        "office_zone_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
        )


class GroupAdminGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest17sp3()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
        office_zone_access: officeZoneAccess
        dialable_caller_id_access: dialableCallerIDAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "trunk_group_access",
        "session_admission_control_access",
        "office_zone_access",
        "dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class GroupAdminGetPolicyResponse18(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest18()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
        office_zone_access: officeZoneAccess
        number_activation_access: numberActivationAccess
        dialable_caller_id_access: dialableCallerIDAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "trunk_group_access",
        "session_admission_control_access",
        "office_zone_access",
        "number_activation_access",
        "dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "number_activation_access",
                "numberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class GroupAdminGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest19sp1()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess
    communicationBarringUserProfileAccess (This element will not be returned in the
    response for Service Provider group administrators)

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
        office_zone_access: officeZoneAccess
        number_activation_access: numberActivationAccess
        dialable_caller_id_access: dialableCallerIDAccess
        communication_barring_user_profile_access: communicationBarringUserProfileAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "trunk_group_access",
        "session_admission_control_access",
        "office_zone_access",
        "number_activation_access",
        "dialable_caller_id_access",
        "communication_barring_user_profile_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "number_activation_access",
                "numberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "communication_barring_user_profile_access",
                "communicationBarringUserProfileAccess",
                str,
            ),
        )


class GroupAdminGetPolicyResponse20(OCIResponse):
    """
    Response to ``GroupAdminGetPolicyRequest20()``.

    Contains the policy settings for the group administrator.  The following elements are
    only used in AS data mode: dialableCallerIDAccess verifyTranslationAndroutingAccess
    communicationBarringUserProfileAccess (This element is only returned for groups in an
    enterprise)

    Attributes:
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
        office_zone_access: officeZoneAccess
        number_activation_access: numberActivationAccess
        dialable_caller_id_access: dialableCallerIDAccess
        verify_translation_and_routing_access: verifyTranslationAndRoutingAccess
        communication_barring_user_profile_access: communicationBarringUserProfileAccess
    """

    __slots__ = [
        "profile_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "enhanced_service_instance_access",
        "feature_access_code_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "trunk_group_access",
        "session_admission_control_access",
        "office_zone_access",
        "number_activation_access",
        "dialable_caller_id_access",
        "verify_translation_and_routing_access",
        "communication_barring_user_profile_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "enhanced_service_instance_access",
                "enhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code_access",
                "featureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("trunk_group_access", "trunkGroupAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "number_activation_access",
                "numberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "verify_translation_and_routing_access",
                "verifyTranslationAndRoutingAccess",
                str,
                is_required=True,
            ),
            E(
                "communication_barring_user_profile_access",
                "communicationBarringUserProfileAccess",
                str,
            ),
        )


class GroupAdminGetResponse(OCIResponse):
    """
    Response to the ``GroupAdminGetRequest()``.

    The response contains the group administrators profile information.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        first_name: firstName
        last_name: lastName
        language: language
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "first_name",
        "last_name",
        "language",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("language", "language", str, is_required=True),
        )


class GroupAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``GroupAdviceOfChargeGetRequest()``.

    Contains a list of Advice of Charge group parameters.

    Attributes:
        use_group_level_ao_c_settings: useGroupLevelAoCSettings
        delay_between_notification_seconds: delayBetweenNotificationSeconds
    """

    __slots__ = [
        "use_group_level_ao_c_settings",
        "delay_between_notification_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_group_level_ao_c_settings",
                "useGroupLevelAoCSettings",
                bool,
                is_required=True,
            ),
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
                is_required=True,
            ),
        )


class GroupAnnouncementFileGetListResponse(OCIResponse):
    """
    Response to ``GroupAnnouncementFileGetAvailableListRequest()``.

    When requested, the response contains a table with columns: "Name", "Media Type" and
    "File Size". The "Name" column contains the name of the announcement file.  The "Media
    Type" column contains the media type of the announcement File with the possible
    values: WMA - Windows Media Audio file WAV - A WAV file 3GP - A 3GP file MOV - A MOV
    file using a H.263 or H.264 codec.  The "File Size" column contains the file size (KB)
    of the announcement file.

    The response also contains the current total file size (KB) for the group across all
    media types and the maximum total file size (MB) allowed for the group.

    Attributes:
        announcement_table: announcementTable
        total_file_size: totalFileSize
        max_file_size: maxFileSize
    """

    __slots__ = [
        "announcement_table",
        "total_file_size",
        "max_file_size",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_table",
                "announcementTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("total_file_size", "totalFileSize", int, is_required=True),
            E("max_file_size", "maxFileSize", int, is_required=True),
        )


class GroupAnnouncementFileGetResponse(OCIResponse):
    """
    Response to ``GroupAnnouncementFileGetRequest()``.

    The response contains the file size, uploaded timestamp, description and usage for an
    announcement file in the user announcement repository.  The usage table has columns
    "Service Name", and "Instance Name". The Service Name values correspond to string
    values of the GroupService and UserService data types.  With the exception of the
    string "Voice Portal" which is returned when the announcement is being used by Voice
    Portal Personalized Name.

    Attributes:
        description: description
        filesize: filesize
        last_uploaded: lastUploaded
        usage_table: usageTable
    """

    __slots__ = [
        "description",
        "filesize",
        "last_uploaded",
        "usage_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str, is_required=True),
            E("filesize", "filesize", int, is_required=True),
            E("last_uploaded", "lastUploaded", str, is_required=True),
            E(
                "usage_table",
                "usageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupApplicationServerSetGetResponse(OCIResponse):
    """
    Response to the ``GroupApplicationServerSetGetRequest()``.

    The response contains the group's Application Server set information.

    Attributes:
        application_server_set_name: applicationServerSetName
    """

    __slots__ = [
        "application_server_set_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_server_set_name", "applicationServerSetName", str),
        )


class GroupAutoAttendantGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupAutoAttendantGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department", "Is Active", "Type". The column values for "Video"
    and "Is Active" can either be true, or false.  The column values for "Type" can either
    be Basic or Standard.  In HSS Mode the value for the "Type" column will always be
    populated with Basic.

    Attributes:
        auto_attendant_table: autoAttendantTable
    """

    __slots__ = [
        "auto_attendant_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "auto_attendant_table",
                "autoAttendantTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAutoAttendantSubmenuGetListResponse(OCIResponse):
    """
    Response to the ``GroupAutoAttendantSubmenuGetListRequest()``.

    Contains a table with column headings: "Submenu Id" "Is Used". The column values for
    "Is Used" can either be true, or false.

    Attributes:
        submenu_table: submenuTable
    """

    __slots__ = [
        "submenu_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "submenu_table",
                "submenuTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupAutoAttendantSubmenuGetUsageListResponse(OCIResponse):
    """
    Response to the ``GroupAutoAttendantSubmenuGetUsageListRequest()``.

    Contains a table with column headings: "Type" and "Submenu ID". The "Type" Column will
    contain one of the following: Business Hours Menu, After Hours Menu, Holiday Menu or
    Submenu.  The "Submenu ID" Column will be left blank when the "Type" Column contains
    one of the base menu types (Business Hours Menu, After Hours Menu or Holiday Menu),
    and will contain the Submenu ID when the "Type" Column contains type Submenu.

    Attributes:
        submenu_table: submenuTable
    """

    __slots__ = [
        "submenu_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "submenu_table",
                "submenuTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupBroadWorksAnywhereGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksAnywhereGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.

    Attributes:
        broad_works_anywhere_table: broadWorksAnywhereTable
    """

    __slots__ = [
        "broad_works_anywhere_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "broad_works_anywhere_table",
                "broadWorksAnywhereTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupBroadWorksMobileManagerGetDomainListResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetDomainListRequest()``.

    Contains the list of domains.

    Attributes:
        domain_name: domainName
    """

    __slots__ = [
        "domain_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("domain_name", "domainName", str, is_array=True),
        )


class GroupBroadWorksMobileManagerGetHomeZoneListResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetHomeZoneListRequest()``.

    Contains a table with column headings: "Home Zone Id", "Domain Name", "Mobile Country
    Code", "Mobile Network Code", "Local Area Code" and "Cell Identity".

    Attributes:
        home_zones_table: homeZonesTable
    """

    __slots__ = [
        "home_zones_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "home_zones_table",
                "homeZonesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupBroadWorksMobileManagerGetHomeZoneResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetHomeZoneRequest()``

    Attributes:
        home_zone_domain_name: homeZoneDomainName
        mobile_country_code: mobileCountryCode
        mobile_network_code: mobileNetworkCode
        location_area_code: locationAreaCode
        cell_identity: cellIdentity
    """

    __slots__ = [
        "home_zone_domain_name",
        "mobile_country_code",
        "mobile_network_code",
        "location_area_code",
        "cell_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("home_zone_domain_name", "homeZoneDomainName", str, is_required=True),
            E("mobile_country_code", "mobileCountryCode", str, is_required=True),
            E("mobile_network_code", "mobileNetworkCode", str, is_required=True),
            E("location_area_code", "locationAreaCode", str, is_required=True),
            E("cell_identity", "cellIdentity", str, is_required=True),
        )


class GroupBroadWorksMobileManagerGetResponse(OCIResponse):
    """
    Response to the ``GroupBroadWorksMobileManagerGetRequest()``

    Attributes:
        mobile_manager_id: mobileManagerId
        name: name
        is_active: isActive
        local_to_carrier: localToCarrier
        deactivation_reason: deactivationReason
        max_tx_per_second_enabled: maxTxPerSecondEnabled
        max_tx_per_second: maxTxPerSecond
        tldn_enabled: tldnEnabled
        generic_number_enabled: genericNumberEnabled
        mobile_state_check_enabled: mobileStateCheckEnabled
        location_based_services_enabled: locationBasedServicesEnabled
    """

    __slots__ = [
        "mobile_manager_id",
        "name",
        "is_active",
        "local_to_carrier",
        "deactivation_reason",
        "max_tx_per_second_enabled",
        "max_tx_per_second",
        "tldn_enabled",
        "generic_number_enabled",
        "mobile_state_check_enabled",
        "location_based_services_enabled",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mobile_manager_id", "mobileManagerId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("local_to_carrier", "localToCarrier", bool, is_required=True),
            E("deactivation_reason", "deactivationReason", str),
            E(
                "max_tx_per_second_enabled",
                "maxTxPerSecondEnabled",
                bool,
                is_required=True,
            ),
            E("max_tx_per_second", "maxTxPerSecond", int),
            E("tldn_enabled", "tldnEnabled", bool, is_required=True),
            E("generic_number_enabled", "genericNumberEnabled", bool, is_required=True),
            E(
                "mobile_state_check_enabled",
                "mobileStateCheckEnabled",
                bool,
                is_required=True,
            ),
            E(
                "location_based_services_enabled",
                "locationBasedServicesEnabled",
                bool,
                is_required=True,
            ),
        )


class GroupBroadWorksMobilityGetResponse(OCIResponse):
    """
    The response to a ``GroupBroadWorksMobilityGetRequest()``.


    Attributes:
        use_setting_level: useSettingLevel
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
    """

    __slots__ = [
        "use_setting_level",
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        )


class GroupBroadWorksMobilityGetResponse19sp1(OCIResponse):
    """
    The response to a ``GroupBroadWorksMobilityGetRequest19sp1()``.


    Attributes:
        use_setting_level: useSettingLevel
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        enable_announcement_suppression: enableAnnouncementSuppression
    """

    __slots__ = [
        "use_setting_level",
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "enable_announcement_suppression",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E(
                "enable_announcement_suppression",
                "enableAnnouncementSuppression",
                bool,
                is_required=True,
            ),
        )


class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListResponse(OCIResponse):
    """
    Response to the
    ``GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListRequest()``.

    The response contains a table with columns: "Mobile Number", "User Id", "Last Name",
    "First Name","Phone Number", "Extension", "Department",. The "Mobile Number" column
    contains a single DN. The "User Id", "Last Name" and "First Name" columns contains the
    corresponding attributes of the user possessing the DN(s). The "Phone Number" column
    contains a single DN. The "Department" column contains the department of the user if
    it is part of a department.

    Attributes:
        mobile_subscriber_directory_number_table: mobileSubscriberDirectoryNumberTable
    """

    __slots__ = [
        "mobile_subscriber_directory_number_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "mobile_subscriber_directory_number_table",
                "mobileSubscriberDirectoryNumberTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest()``.

    Contains a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any user.

    Attributes:
        mobile_subscriber_directory_number: mobileSubscriberDirectoryNumber
    """

    __slots__ = [
        "mobile_subscriber_directory_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "mobile_subscriber_directory_number",
                "mobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


class GroupCallCapacityManagementGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallCapacityManagementGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCapacityManagementGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallCapacityManagementGetInstanceListRequest()``.

    Contains a table with column headings: "Name", "Is Default", "Maximum Calls", "Maximum
    Incoming Calls", "Maximum Outgoing Calls".

    Attributes:
        call_capacity_group_table: callCapacityGroupTable
    """

    __slots__ = [
        "call_capacity_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_capacity_group_table",
                "callCapacityGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCapacityManagementGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupCallCapacityManagementGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        name: name
        max_active_calls_allowed: maxActiveCallsAllowed
        max_incoming_active_calls_allowed: maxIncomingActiveCallsAllowed
        max_outgoing_active_calls_allowed: maxOutgoingActiveCallsAllowed
        default_group_for_new_users: defaultGroupForNewUsers
        user_table: userTable
    """

    __slots__ = [
        "name",
        "max_active_calls_allowed",
        "max_incoming_active_calls_allowed",
        "max_outgoing_active_calls_allowed",
        "default_group_for_new_users",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E(
                "max_active_calls_allowed",
                "maxActiveCallsAllowed",
                int,
                is_required=True,
            ),
            E("max_incoming_active_calls_allowed", "maxIncomingActiveCallsAllowed", int),
            E("max_outgoing_active_calls_allowed", "maxOutgoingActiveCallsAllowed", int),
            E(
                "default_group_for_new_users",
                "defaultGroupForNewUsers",
                bool,
                is_required=True,
            ),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterAgentThresholdDefaultProfileGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentThresholdDefaultProfileGetRequest()``.

    The agent table contains the agents assigned to the profile and has column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address";

    Attributes:
        profile_name: profileName
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address: notificationEmailAddress
        agent_table: agentTable
    """

    __slots__ = [
        "profile_name",
        "profile_description",
        "threshold_current_call_state_idle_time_yellow",
        "threshold_current_call_state_idle_time_red",
        "threshold_current_call_state_on_call_time_yellow",
        "threshold_current_call_state_on_call_time_red",
        "threshold_current_agent_state_unavailable_time_yellow",
        "threshold_current_agent_state_unavailable_time_red",
        "threshold_average_busy_in_time_yellow",
        "threshold_average_busy_in_time_red",
        "threshold_average_busy_out_time_yellow",
        "threshold_average_busy_out_time_red",
        "threshold_average_wrap_up_time_yellow",
        "threshold_average_wrap_up_time_red",
        "enable_notification_email",
        "notification_email_address",
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_name", "profileName", str, is_required=True),
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E(
                "enable_notification_email",
                "enableNotificationEmail",
                bool,
                is_required=True,
            ),
            E(
                "notification_email_address",
                "notificationEmailAddress",
                str,
                is_array=True,
            ),
            E("agent_table", "agentTable", list, is_complex=True, is_table=True),
        )


class GroupCallCenterAgentThresholdProfileGetAvailableAgentListResponse(OCIResponse):
    """
    Response to the
    ``GroupCallCenterAgentThresholdProfileGetAvailableAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Agent Threshold Profile";

    Attributes:
        agent_table: agentTable
    """

    __slots__ = [
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_table",
                "agentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterAgentThresholdProfileGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentThresholdProfileGetListRequest()``.

    Contains a table with all the Call Center Agent Threshold Profiles in the Group.  The
    column headings are: "Default", "Name", "Description".

    Attributes:
        profiles_table: profilesTable
    """

    __slots__ = [
        "profiles_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profiles_table",
                "profilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterAgentThresholdProfileGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentThresholdProfileGetRequest()``.

    The agentTable contains the agents assigned to the profile and has the column
    headings: "User Id", "Group Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address";

    Attributes:
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address: notificationEmailAddress
        agent_table: agentTable
    """

    __slots__ = [
        "profile_description",
        "threshold_current_call_state_idle_time_yellow",
        "threshold_current_call_state_idle_time_red",
        "threshold_current_call_state_on_call_time_yellow",
        "threshold_current_call_state_on_call_time_red",
        "threshold_current_agent_state_unavailable_time_yellow",
        "threshold_current_agent_state_unavailable_time_red",
        "threshold_average_busy_in_time_yellow",
        "threshold_average_busy_in_time_red",
        "threshold_average_busy_out_time_yellow",
        "threshold_average_busy_out_time_red",
        "threshold_average_wrap_up_time_yellow",
        "threshold_average_wrap_up_time_red",
        "enable_notification_email",
        "notification_email_address",
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E(
                "enable_notification_email",
                "enableNotificationEmail",
                bool,
                is_required=True,
            ),
            E(
                "notification_email_address",
                "notificationEmailAddress",
                str,
                is_array=True,
            ),
            E(
                "agent_table",
                "agentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterAgentUnavailableCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentUnavailableCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".

    Attributes:
        unavailable_codes_table: unavailableCodesTable
    """

    __slots__ = [
        "unavailable_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "unavailable_codes_table",
                "unavailableCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterAgentUnavailableCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterAgentUnavailableCodeGetRequest()``

    Attributes:
        is_active: isActive
        description: description
    """

    __slots__ = [
        "is_active",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


class GroupCallCenterAgentUnavailableCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterAgentUnavailableCodeSettingsGetRequest()``.

    Replaced by ``GroupCallCenterAgentUnavailableCodeSettingsGetResponse17sp4()``.

    Attributes:
        enable_agent_unavailable_codes: enableAgentUnavailableCodes
        default_agent_unavailable_code_on_dnd: defaultAgentUnavailableCodeOnDND
        default_agent_unavailable_code_on_personal_calls:
            defaultAgentUnavailableCodeOnPersonalCalls
        default_agent_unavailable_code_on_consecutive_bounces:
            defaultAgentUnavailableCodeOnConsecutiveBounces
        force_use_of_agent_unavailable_codes: forceUseOfAgentUnavailableCodes
        default_agent_unavailable_code: defaultAgentUnavailableCode
    """

    __slots__ = [
        "enable_agent_unavailable_codes",
        "default_agent_unavailable_code_on_dnd",
        "default_agent_unavailable_code_on_personal_calls",
        "default_agent_unavailable_code_on_consecutive_bounces",
        "force_use_of_agent_unavailable_codes",
        "default_agent_unavailable_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_agent_unavailable_codes",
                "enableAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E(
                "default_agent_unavailable_code_on_dnd",
                "defaultAgentUnavailableCodeOnDND",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_personal_calls",
                "defaultAgentUnavailableCodeOnPersonalCalls",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_consecutive_bounces",
                "defaultAgentUnavailableCodeOnConsecutiveBounces",
                str,
            ),
            E(
                "force_use_of_agent_unavailable_codes",
                "forceUseOfAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
        )


class GroupCallCenterAgentUnavailableCodeSettingsGetResponse17sp4(OCIResponse):
    """
    Response to ``GroupCallCenterAgentUnavailableCodeSettingsGetRequest17sp4()``.


    Attributes:
        enable_agent_unavailable_codes: enableAgentUnavailableCodes
        default_agent_unavailable_code_on_dnd: defaultAgentUnavailableCodeOnDND
        default_agent_unavailable_code_on_personal_calls:
            defaultAgentUnavailableCodeOnPersonalCalls
        default_agent_unavailable_code_on_consecutive_bounces:
            defaultAgentUnavailableCodeOnConsecutiveBounces
        default_agent_unavailable_code_on_not_reachable:
            defaultAgentUnavailableCodeOnNotReachable
        force_use_of_agent_unavailable_codes: forceUseOfAgentUnavailableCodes
        default_agent_unavailable_code: defaultAgentUnavailableCode
    """

    __slots__ = [
        "enable_agent_unavailable_codes",
        "default_agent_unavailable_code_on_dnd",
        "default_agent_unavailable_code_on_personal_calls",
        "default_agent_unavailable_code_on_consecutive_bounces",
        "default_agent_unavailable_code_on_not_reachable",
        "force_use_of_agent_unavailable_codes",
        "default_agent_unavailable_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_agent_unavailable_codes",
                "enableAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E(
                "default_agent_unavailable_code_on_dnd",
                "defaultAgentUnavailableCodeOnDND",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_personal_calls",
                "defaultAgentUnavailableCodeOnPersonalCalls",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_consecutive_bounces",
                "defaultAgentUnavailableCodeOnConsecutiveBounces",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_not_reachable",
                "defaultAgentUnavailableCodeOnNotReachable",
                str,
            ),
            E(
                "force_use_of_agent_unavailable_codes",
                "forceUseOfAgentUnavailableCodes",
                bool,
                is_required=True,
            ),
            E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
        )


class GroupCallCenterBouncedCallGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterBouncedCallGetRequest()``.


    Attributes:
        is_active: isActive
        number_of_rings_before_bouncing_call: numberOfRingsBeforeBouncingCall
        enable_transfer: enableTransfer
        transfer_phone_number: transferPhoneNumber
        bounce_call_when_agent_unavailable: bounceCallWhenAgentUnavailable
    """

    __slots__ = [
        "is_active",
        "number_of_rings_before_bouncing_call",
        "enable_transfer",
        "transfer_phone_number",
        "bounce_call_when_agent_unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "number_of_rings_before_bouncing_call",
                "numberOfRingsBeforeBouncingCall",
                int,
                is_required=True,
            ),
            E("enable_transfer", "enableTransfer", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "bounce_call_when_agent_unavailable",
                "bounceCallWhenAgentUnavailable",
                bool,
                is_required=True,
            ),
        )


class GroupCallCenterBouncedCallGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterBouncedCallGetRequest17()``.


    Attributes:
        is_active: isActive
        number_of_rings_before_bouncing_call: numberOfRingsBeforeBouncingCall
        enable_transfer: enableTransfer
        transfer_phone_number: transferPhoneNumber
        bounce_call_when_agent_unavailable: bounceCallWhenAgentUnavailable
        alert_call_center_call_on_hold: alertCallCenterCallOnHold
        alert_call_center_call_on_hold_seconds: alertCallCenterCallOnHoldSeconds
        bounce_call_center_call_on_hold: bounceCallCenterCallOnHold
        bounce_call_center_call_on_hold_seconds: bounceCallCenterCallOnHoldSeconds
    """

    __slots__ = [
        "is_active",
        "number_of_rings_before_bouncing_call",
        "enable_transfer",
        "transfer_phone_number",
        "bounce_call_when_agent_unavailable",
        "alert_call_center_call_on_hold",
        "alert_call_center_call_on_hold_seconds",
        "bounce_call_center_call_on_hold",
        "bounce_call_center_call_on_hold_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "number_of_rings_before_bouncing_call",
                "numberOfRingsBeforeBouncingCall",
                int,
                is_required=True,
            ),
            E("enable_transfer", "enableTransfer", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "bounce_call_when_agent_unavailable",
                "bounceCallWhenAgentUnavailable",
                bool,
            ),
            E("alert_call_center_call_on_hold", "alertCallCenterCallOnHold", bool),
            E(
                "alert_call_center_call_on_hold_seconds",
                "alertCallCenterCallOnHoldSeconds",
                int,
            ),
            E("bounce_call_center_call_on_hold", "bounceCallCenterCallOnHold", bool),
            E(
                "bounce_call_center_call_on_hold_seconds",
                "bounceCallCenterCallOnHoldSeconds",
                int,
            ),
        )


class GroupCallCenterCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description".

    Attributes:
        disposition_codes_table: dispositionCodesTable
    """

    __slots__ = [
        "disposition_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disposition_codes_table",
                "dispositionCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCallDispositionCodeGetRequest()``

    Attributes:
        is_active: isActive
        description: description
    """

    __slots__ = [
        "is_active",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


class GroupCallCenterCallDispositionCodeGetUsageListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCallDispositionCodeGetUsageListRequest()``.

    The Type column contains either "Call Center" or "Route Point". Contains a table with
    column headings: "Id", "Name" and "Type".

    Attributes:
        call_center_table: callCenterTable
    """

    __slots__ = [
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterComfortMessageBypassGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterComfortMessageBypassGetRequest()``.


    Attributes:
        is_active: isActive
        call_waiting_age_threshold_seconds: callWaitingAgeThresholdSeconds
        play_announcement_after_ringing: playAnnouncementAfterRinging
        ring_time_before_playing_announcement_seconds:
            ringTimeBeforePlayingAnnouncementSeconds
        audio_message_selection: audioMessageSelection
        audio_file_url: audioFileUrl
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_message_selection: videoMessageSelection
        video_file_url: videoFileUrl
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
    """

    __slots__ = [
        "is_active",
        "call_waiting_age_threshold_seconds",
        "play_announcement_after_ringing",
        "ring_time_before_playing_announcement_seconds",
        "audio_message_selection",
        "audio_file_url",
        "audio_file_description",
        "audio_media_type",
        "video_message_selection",
        "video_file_url",
        "video_file_description",
        "video_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "call_waiting_age_threshold_seconds",
                "callWaitingAgeThresholdSeconds",
                int,
                is_required=True,
            ),
            E(
                "play_announcement_after_ringing",
                "playAnnouncementAfterRinging",
                bool,
                is_required=True,
            ),
            E(
                "ring_time_before_playing_announcement_seconds",
                "ringTimeBeforePlayingAnnouncementSeconds",
                int,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E("audio_file_url", "audioFileUrl", str),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E("video_file_url", "videoFileUrl", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
        )


class GroupCallCenterCurrentAndPastAgentGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCurrentAndPastAgentGetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        agent_user_table: agentUserTable
        deleted_agent_user_table: deletedAgentUserTable
    """

    __slots__ = [
        "agent_user_table",
        "deleted_agent_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "deleted_agent_user_table",
                "deletedAgentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterCurrentAndPastCallCenterGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCurrentAndPastCallCenterGetListRequest()``.


    Attributes:
        service_user_id: serviceUserId
        deleted_service_user_id: deletedServiceUserId
    """

    __slots__ = [
        "service_user_id",
        "deleted_service_user_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_array=True),
            E("deleted_service_user_id", "deletedServiceUserId", str, is_array=True),
        )


class GroupCallCenterCurrentAndPastDNISGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterCurrentAndPastDNISGetListRequest()``.


    Attributes:
        name: name
        deleted_name: deletedName
    """

    __slots__ = [
        "name",
        "deleted_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_array=True),
            E("deleted_name", "deletedName", str, is_array=True),
        )


class GroupCallCenterDistinctiveRingingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterDistinctiveRingingGetRequest()``.


    Attributes:
        distinctive_ringing_call_center_calls: distinctiveRingingCallCenterCalls
        distinctive_ringing_ring_pattern_for_call_center:
            distinctiveRingingRingPatternForCallCenter
        distinctive_ringing_force_delivery_ring_pattern:
            distinctiveRingingForceDeliveryRingPattern
    """

    __slots__ = [
        "distinctive_ringing_call_center_calls",
        "distinctive_ringing_ring_pattern_for_call_center",
        "distinctive_ringing_force_delivery_ring_pattern",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "distinctive_ringing_call_center_calls",
                "distinctiveRingingCallCenterCalls",
                bool,
                is_required=True,
            ),
            E(
                "distinctive_ringing_ring_pattern_for_call_center",
                "distinctiveRingingRingPatternForCallCenter",
                str,
                is_required=True,
            ),
            E(
                "distinctive_ringing_force_delivery_ring_pattern",
                "distinctiveRingingForceDeliveryRingPattern",
                str,
            ),
        )


class GroupCallCenterEnhancedGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedGetRequest()``.


    Attributes:
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
    """

    __slots__ = [
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "override_agent_wrap_up_time",
                "overrideAgentWrapUpTime",
                bool,
                is_required=True,
            ),
            E("wrap_up_seconds", "wrapUpSeconds", int),
        )


class GroupCallCenterEnhancedReportingBrandingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterEnhancedReportingBrandingGetRequest()``.


    Attributes:
        branding_choice: brandingChoice
        branding_file_description: brandingFileDescription
    """

    __slots__ = [
        "branding_choice",
        "branding_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("branding_choice", "brandingChoice", str, is_required=True),
            E("branding_file_description", "brandingFileDescription", str),
        )


class GroupCallCenterEnhancedReportingGetAvailableReportTemplateListResponse(OCIResponse):
    """
    Response to
    ``GroupCallCenterEnhancedReportingGetAvailableReportTemplateListRequest()``.

    Contains a table with column headings: "Name", "Description" and "Level", "Is Agent
    Required", "Is Call Center Required", "Is Call Center Dnis Required","Is Real Time
    Report", "Is Sampling Period Required", "Call Completion Threshold Parameter", "Short
    Duration Threshold Parameter", "Service Level Threshold Parameter", "Service Level
    Inclusions Parameter", "Service Level Objective Threshold Parameter", "Abandoned Call
    Threshold Parameter", "Service Level Threshold Parameter Number", and "Abandoned Call
    Threshold Parameter Number". The possible values for "Level" are "System" and "Group".
    The possible values for "Is Agent Required", "Is Call Center Required", "Is Call
    Center Dnis Required", "Is Real Time Report" and "Is Sampling Period Required" are
    "true" and "false". The possible values for "Call Completion Threshold Parameter",
    "Short Duration Threshold Parameter", "Service Level Threshold Parameter", "Service
    Level Inclusions Parameter","Service Level Objective Threshold Parameter" and
    "Abandoned Call Threshold Parameter" are "Required", "Hidden" and "Does Not Apply".

    Attributes:
        report_template_table: reportTemplateTable
    """

    __slots__ = [
        "report_template_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "report_template_table",
                "reportTemplateTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterEnhancedReportingGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingGetRequest()``.

    Replaced by ``GroupCallCenterEnhancedReportingGetResponse19()``

    Attributes:
        reporting_server: reportingServer
        web_statistic_source: webStatisticSource
    """

    __slots__ = [
        "reporting_server",
        "web_statistic_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("reporting_server", "reportingServer", str, is_required=True),
            E("web_statistic_source", "webStatisticSource", str, is_required=True),
        )


class GroupCallCenterEnhancedReportingGetResponse19(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingGetRequest19()``.


    Attributes:
        reporting_server: reportingServer
    """

    __slots__ = [
        "reporting_server",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("reporting_server", "reportingServer", str, is_required=True),
        )


class GroupCallCenterEnhancedReportingReportTemplateGetListResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingReportTemplateGetListRequest()``.

    Contains a table with column headings: "Name", "Description", "Type" and "Enabled"

    Attributes:
        report_template_table: reportTemplateTable
    """

    __slots__ = [
        "report_template_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "report_template_table",
                "reportTemplateTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterEnhancedReportingReportTemplateGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingReportTemplateGetRequest()``.


    Attributes:
        description: description
        data_template: dataTemplate
        filter_number: filterNumber
        xslt_template_description: xsltTemplateDescription
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        call_completion_threshold_param: callCompletionThresholdParam
        short_duration_threshold_param: shortDurationThresholdParam
        service_level_threshold_param: serviceLevelThresholdParam
        service_level_inclusions_param: serviceLevelInclusionsParam
        service_level_objective_threshold_param: serviceLevelObjectiveThresholdParam
        abandoned_call_threshold_param: abandonedCallThresholdParam
        service_level_threshold_param_number: serviceLevelThresholdParamNumber
        abandoned_call_threshold_param_number: abandonedCallThresholdParamNumber
        filter_value: filterValue
    """

    __slots__ = [
        "description",
        "data_template",
        "filter_number",
        "xslt_template_description",
        "scope",
        "is_enabled",
        "is_realtime_report",
        "call_completion_threshold_param",
        "short_duration_threshold_param",
        "service_level_threshold_param",
        "service_level_inclusions_param",
        "service_level_objective_threshold_param",
        "abandoned_call_threshold_param",
        "service_level_threshold_param_number",
        "abandoned_call_threshold_param_number",
        "filter_value",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("data_template", "dataTemplate", str, is_required=True),
            E("filter_number", "filterNumber", int),
            E(
                "xslt_template_description",
                "xsltTemplateDescription",
                str,
                is_required=True,
            ),
            E("scope", "scope", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("call_completion_threshold_param", "callCompletionThresholdParam", str),
            E("short_duration_threshold_param", "shortDurationThresholdParam", str),
            E("service_level_threshold_param", "serviceLevelThresholdParam", str),
            E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
            E(
                "service_level_objective_threshold_param",
                "serviceLevelObjectiveThresholdParam",
                str,
            ),
            E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
            E(
                "service_level_threshold_param_number",
                "serviceLevelThresholdParamNumber",
                int,
            ),
            E(
                "abandoned_call_threshold_param_number",
                "abandonedCallThresholdParamNumber",
                int,
            ),
            E("filter_value", "filterValue", str, is_array=True),
        )


class GroupCallCenterEnhancedReportingScheduledReportGetActiveListResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingScheduledReportGetActiveListRequest()``
    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Report Template Name", "Report Template Level" and
    "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System" and "Group".

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterEnhancedReportingScheduledReportGetCompletedListResponse(OCIResponse):
    """
    Response to
    ``GroupCallCenterEnhancedReportingScheduledReportGetCompletedListRequest()`` Contains
    a table with column headings : "Schedule Name", "Description", "Created By", "Is
    Supervisor Report", "Report Template Name", "Report Template Level" and "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System" and "Group".

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterEnhancedReportingScheduledReportGetListResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingScheduledReportGetListRequest()``.

    Contains a table with column headings : "Schedule Name", "Description", "Created By",
    "Is Supervisor Report", "Status", "Report Template Name", "Report Template Level" and
    "Recurring". The "Created By" can be either "Administrator" or user id if created by
    supervisor.  The possible values for "Status" are "Active", and "Completed". The
    possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and "Yearly".
    The possible values for "Report Template Level" are "System" and "Group".

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse(OCIResponse):
    """
    Response to
    ``GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest()``.

    Contains a table with column headings: "Schedule Name", "Created By", "Created By
    Supervisor", and "Is Active". The "Created By" can be either "Administrator" or user
    id if created by supervisor.

    Attributes:
        schedule_report_table: scheduleReportTable
    """

    __slots__ = [
        "schedule_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_report_table",
                "scheduleReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterForcedForwardingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterForcedForwardingGetRequest()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        allow_enable_via_fac: allowEnableViaFAC
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_file_url: audioFileUrl
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_message_selection: videoMessageSelection
        video_file_url: videoFileUrl
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "allow_enable_via_fac",
        "play_announcement_before_forwarding",
        "audio_message_selection",
        "audio_file_url",
        "audio_file_description",
        "audio_media_type",
        "video_message_selection",
        "video_file_url",
        "video_file_description",
        "video_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("allow_enable_via_fac", "allowEnableViaFAC", bool, is_required=True),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E("audio_file_url", "audioFileUrl", str),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E("video_file_url", "videoFileUrl", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
        )


class GroupCallCenterGetAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Weight", "Phone Number", "Extension",
    "Department", "Email Address", "Skill Level".

    Attributes:
        agent_table: agentTable
    """

    __slots__ = [
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_table",
                "agentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest()``.


    Attributes:
        entrance_message_selection: entranceMessageSelection
        entrance_message_audio_file_description: entranceMessageAudioFileDescription
        entrance_message_video_file_description: entranceMessageVideoFileDescription
        periodic_comfort_message_selection: periodicComfortMessageSelection
        periodic_comfort_message_audio_file_description:
            periodicComfortMessageAudioFileDescription
        periodic_comfort_message_video_file_description:
            periodicComfortMessageVideoFileDescription
        on_hold_message_selection: onHoldMessageSelection
        on_hold_message_audio_file_description: onHoldMessageAudioFileDescription
        on_hold_message_video_file_description: onHoldMessageVideoFileDescription
    """

    __slots__ = [
        "entrance_message_selection",
        "entrance_message_audio_file_description",
        "entrance_message_video_file_description",
        "periodic_comfort_message_selection",
        "periodic_comfort_message_audio_file_description",
        "periodic_comfort_message_video_file_description",
        "on_hold_message_selection",
        "on_hold_message_audio_file_description",
        "on_hold_message_video_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "entrance_message_selection",
                "entranceMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_file_description",
                "entranceMessageAudioFileDescription",
                str,
            ),
            E(
                "entrance_message_video_file_description",
                "entranceMessageVideoFileDescription",
                str,
            ),
            E(
                "periodic_comfort_message_selection",
                "periodicComfortMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_file_description",
                "periodicComfortMessageAudioFileDescription",
                str,
            ),
            E(
                "periodic_comfort_message_video_file_description",
                "periodicComfortMessageVideoFileDescription",
                str,
            ),
            E(
                "on_hold_message_selection",
                "onHoldMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "on_hold_message_audio_file_description",
                "onHoldMessageAudioFileDescription",
                str,
            ),
            E(
                "on_hold_message_video_file_description",
                "onHoldMessageVideoFileDescription",
                str,
            ),
        )


class GroupCallCenterGetAvailableAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAvailableAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetAvailableSupervisorListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAvailableSupervisorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetDNISAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        agent_table: agentTable
    """

    __slots__ = [
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_table",
                "agentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetDNISListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISListResponse()``.

    Contains a table with column headings: "Name", "Phone Number", "Extension",
    "Priority", "Is Primary DNIS".

    Attributes:
        display_dnis_number: displayDNISNumber
        display_dnis_name: displayDNISName
        promote_calls_from_priority1to0: promoteCallsFromPriority1to0
        promote_calls_from_priority2to1: promoteCallsFromPriority2to1
        promote_calls_from_priority3to2: promoteCallsFromPriority3to2
        promote_calls_from_priority1to0_seconds: promoteCallsFromPriority1to0Seconds
        promote_calls_from_priority2to1_seconds: promoteCallsFromPriority2to1Seconds
        promote_calls_from_priority3to2_seconds: promoteCallsFromPriority3to2Seconds
        dnis_table: dnisTable
    """

    __slots__ = [
        "display_dnis_number",
        "display_dnis_name",
        "promote_calls_from_priority1to0",
        "promote_calls_from_priority2to1",
        "promote_calls_from_priority3to2",
        "promote_calls_from_priority1to0_seconds",
        "promote_calls_from_priority2to1_seconds",
        "promote_calls_from_priority3to2_seconds",
        "dnis_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("display_dnis_number", "displayDNISNumber", bool, is_required=True),
            E("display_dnis_name", "displayDNISName", bool, is_required=True),
            E(
                "promote_calls_from_priority1to0",
                "promoteCallsFromPriority1to0",
                bool,
                is_required=True,
            ),
            E(
                "promote_calls_from_priority2to1",
                "promoteCallsFromPriority2to1",
                bool,
                is_required=True,
            ),
            E(
                "promote_calls_from_priority3to2",
                "promoteCallsFromPriority3to2",
                bool,
                is_required=True,
            ),
            E(
                "promote_calls_from_priority1to0_seconds",
                "promoteCallsFromPriority1to0Seconds",
                int,
                is_required=True,
            ),
            E(
                "promote_calls_from_priority2to1_seconds",
                "promoteCallsFromPriority2to1Seconds",
                int,
                is_required=True,
            ),
            E(
                "promote_calls_from_priority3to2_seconds",
                "promoteCallsFromPriority3to2Seconds",
                int,
                is_required=True,
            ),
            E(
                "dnis_table",
                "dnisTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetDNISResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISResponse()``.


    Attributes:
        dnis_phone_number: dnisPhoneNumber
        extension: extension
        use_custom_clid_settings: useCustomCLIDSettings
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        use_custom_dnis_announcement_settings: useCustomDnisAnnouncementSettings
        priority: priority
        allow_outgoing_acd_call: allowOutgoingACDCall
    """

    __slots__ = [
        "dnis_phone_number",
        "extension",
        "use_custom_clid_settings",
        "calling_line_id_phone_number",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "use_custom_dnis_announcement_settings",
        "priority",
        "allow_outgoing_acd_call",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_phone_number", "dnisPhoneNumber", str),
            E("extension", "extension", str),
            E(
                "use_custom_clid_settings",
                "useCustomCLIDSettings",
                bool,
                is_required=True,
            ),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E(
                "use_custom_dnis_announcement_settings",
                "useCustomDnisAnnouncementSettings",
                bool,
                is_required=True,
            ),
            E("priority", "priority", str, is_required=True),
            E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool, is_required=True),
        )


class GroupCallCenterGetDistinctiveRingingResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDistinctiveRingingRequest()``.


    Attributes:
        distinctive_ringing_call_center_calls: distinctiveRingingCallCenterCalls
        distinctive_ringing_ring_pattern_for_call_center:
            distinctiveRingingRingPatternForCallCenter
        distinctive_ringing_force_delivery_ring_pattern:
            distinctiveRingingForceDeliveryRingPattern
    """

    __slots__ = [
        "distinctive_ringing_call_center_calls",
        "distinctive_ringing_ring_pattern_for_call_center",
        "distinctive_ringing_force_delivery_ring_pattern",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "distinctive_ringing_call_center_calls",
                "distinctiveRingingCallCenterCalls",
                bool,
                is_required=True,
            ),
            E(
                "distinctive_ringing_ring_pattern_for_call_center",
                "distinctiveRingingRingPatternForCallCenter",
                str,
                is_required=True,
            ),
            E(
                "distinctive_ringing_force_delivery_ring_pattern",
                "distinctiveRingingForceDeliveryRingPattern",
                str,
            ),
        )


class GroupCallCenterGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department", "Is Active", "Policy", "Type". The column values
    for "Video" and "Is Active" can either be true, or false.  The column values for
    "Type" can be "Basic", "Standard" or "Premium". NOTE: prior to release 14, the policy
    column did not match the HuntPolicy enumerated type.

    Attributes:
        call_center_table: callCenterTable
    """

    __slots__ = [
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetInstanceQueueStatusResponse(OCIResponse):
    """
    Contains Call Center queue status and a table with column headings: "User Id", "First
    Name", "Last Name", "Phone Number", "Extension", "Department", "Email Address".


    Attributes:
        number_of_calls_queued_now: numberOfCallsQueuedNow
        agents_currently_staffed: agentsCurrentlyStaffed
    """

    __slots__ = [
        "number_of_calls_queued_now",
        "agents_currently_staffed",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "number_of_calls_queued_now",
                "numberOfCallsQueuedNow",
                int,
                is_required=True,
            ),
            E(
                "agents_currently_staffed",
                "agentsCurrentlyStaffed",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetInstanceStatisticsReportingResponse(OCIResponse):
    """
    Contains Call Center statistics reporting settings.


    Attributes:
        generate_daily_report: generateDailyReport
        collection_period_minutes: collectionPeriodMinutes
        reporting_email_address1: reportingEmailAddress1
        reporting_email_address2: reportingEmailAddress2
    """

    __slots__ = [
        "generate_daily_report",
        "collection_period_minutes",
        "reporting_email_address1",
        "reporting_email_address2",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("generate_daily_report", "generateDailyReport", bool, is_required=True),
            E(
                "collection_period_minutes",
                "collectionPeriodMinutes",
                int,
                is_required=True,
            ),
            E("reporting_email_address1", "reportingEmailAddress1", str),
            E("reporting_email_address2", "reportingEmailAddress2", str),
        )


class GroupCallCenterGetInstanceStatisticsReportingResponse16(OCIResponse):
    """
    Contains Call Center statistics reporting settings.


    Attributes:
        generate_daily_report: generateDailyReport
        collection_period_minutes: collectionPeriodMinutes
        reporting_email_address1: reportingEmailAddress1
        reporting_email_address2: reportingEmailAddress2
        statistics_source: statisticsSource
    """

    __slots__ = [
        "generate_daily_report",
        "collection_period_minutes",
        "reporting_email_address1",
        "reporting_email_address2",
        "statistics_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("generate_daily_report", "generateDailyReport", bool, is_required=True),
            E(
                "collection_period_minutes",
                "collectionPeriodMinutes",
                int,
                is_required=True,
            ),
            E("reporting_email_address1", "reportingEmailAddress1", str),
            E("reporting_email_address2", "reportingEmailAddress2", str),
            E("statistics_source", "statisticsSource", str, is_required=True),
        )


class GroupCallCenterGetInstanceStatisticsReportingResponse17sp1(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceStatisticsReportingRequest17sp1()``.

    Contains Call Center statistics reporting settings.

    Attributes:
        generate_daily_report: generateDailyReport
        collection_period_minutes: collectionPeriodMinutes
        reporting_email_address1: reportingEmailAddress1
        reporting_email_address2: reportingEmailAddress2
        statistics_source: statisticsSource
    """

    __slots__ = [
        "generate_daily_report",
        "collection_period_minutes",
        "reporting_email_address1",
        "reporting_email_address2",
        "statistics_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("generate_daily_report", "generateDailyReport", bool, is_required=True),
            E(
                "collection_period_minutes",
                "collectionPeriodMinutes",
                int,
                is_required=True,
            ),
            E("reporting_email_address1", "reportingEmailAddress1", str),
            E("reporting_email_address2", "reportingEmailAddress2", str),
            E("statistics_source", "statisticsSource", str, is_required=True),
        )


class GroupCallCenterGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterGetRequest()``.

    Replaced by ``GroupCallCenterGetResponse17sp4()``.

    Attributes:
        use_system_default_guard_timer: useSystemDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
    """

    __slots__ = [
        "use_system_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_system_default_guard_timer",
                "useSystemDefaultGuardTimer",
                bool,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
        )


class GroupCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to ``GroupCallCenterGetRequest17sp4()``.


    Attributes:
        use_system_default_guard_timer: useSystemDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
    """

    __slots__ = [
        "use_system_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "force_agent_unavailable_on_not_reachable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_system_default_guard_timer",
                "useSystemDefaultGuardTimer",
                bool,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
        )


class GroupCallCenterGetRoutingPolicyResponse(OCIResponse):
    """
    Response to ``GroupCallCenterGetRoutingPolicyRequest()``.

    Contains a table with column headings: "Service User Id", "Name" and "Priority".

    Attributes:
        routing_policy: routingPolicy
        call_center_table: callCenterTable
    """

    __slots__ = [
        "routing_policy",
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("routing_policy", "routingPolicy", str, is_required=True),
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetSupervisorListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetSupervisorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name". Element "reportingServerURL"" will always be blank.

    Replaced By: ``GroupCallCenterSupervisorReportingGetResponse()``

    Attributes:
        reporting_server_url: reportingServerURL
        supervisor_table: supervisorTable
    """

    __slots__ = [
        "reporting_server_url",
        "supervisor_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("reporting_server_url", "reportingServerURL", str),
            E(
                "supervisor_table",
                "supervisorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetSupervisorListResponse16(OCIResponse):
    """
    Response to the ``GroupCallCenterGetSupervisorListRequest16()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        supervisor_table: supervisorTable
    """

    __slots__ = [
        "supervisor_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "supervisor_table",
                "supervisorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterGetUnlicensedAgentListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetUnlicensedAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Group Id", "Extension",
    "Department", "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterHolidayServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest()``.


    Attributes:
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_file_url: audioFileUrl
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_message_selection: videoMessageSelection
        video_file_url: videoFileUrl
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
    """

    __slots__ = [
        "action",
        "holiday_schedule",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_file_url",
        "audio_file_description",
        "audio_media_type",
        "video_message_selection",
        "video_file_url",
        "video_file_description",
        "video_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("holiday_schedule", "holidaySchedule", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E("audio_file_url", "audioFileUrl", str),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E("video_file_url", "videoFileUrl", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
        )


class GroupCallCenterNightServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest()``.


    Attributes:
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_file_url: audioFileUrl
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_message_selection: videoMessageSelection
        video_file_url: videoFileUrl
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_file_url: manualAudioFileUrl
        manual_audio_file_description: manualAudioFileDescription
        manual_audio_media_type: manualAudioMediaType
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_file_url: manualVideoFileUrl
        manual_video_file_description: manualVideoFileDescription
        manual_video_media_type: manualVideoMediaType
    """

    __slots__ = [
        "action",
        "business_hours",
        "force_night_service",
        "allow_manual_override_via_fac",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_file_url",
        "audio_file_description",
        "audio_media_type",
        "video_message_selection",
        "video_file_url",
        "video_file_description",
        "video_media_type",
        "manual_announcement_mode",
        "manual_audio_message_selection",
        "manual_audio_file_url",
        "manual_audio_file_description",
        "manual_audio_media_type",
        "manual_video_message_selection",
        "manual_video_file_url",
        "manual_video_file_description",
        "manual_video_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("business_hours", "businessHours", str),
            E("force_night_service", "forceNightService", bool, is_required=True),
            E(
                "allow_manual_override_via_fac",
                "allowManualOverrideViaFAC",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E("audio_file_url", "audioFileUrl", str),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E("video_file_url", "videoFileUrl", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E(
                "manual_announcement_mode",
                "manualAnnouncementMode",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_message_selection",
                "manualAudioMessageSelection",
                str,
                is_required=True,
            ),
            E("manual_audio_file_url", "manualAudioFileUrl", str),
            E("manual_audio_file_description", "manualAudioFileDescription", str),
            E("manual_audio_media_type", "manualAudioMediaType", str),
            E(
                "manual_video_message_selection",
                "manualVideoMessageSelection",
                str,
                is_required=True,
            ),
            E("manual_video_file_url", "manualVideoFileUrl", str),
            E("manual_video_file_description", "manualVideoFileDescription", str),
            E("manual_video_media_type", "manualVideoMediaType", str),
        )


class GroupCallCenterOverflowGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterOverflowGetRequest()``.


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_file_url: audioFileUrl
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_message_selection: videoMessageSelection
        video_file_url: videoFileUrl
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "overflow_after_timeout",
        "timeout_seconds",
        "play_announcement_before_overflow_processing",
        "audio_message_selection",
        "audio_file_url",
        "audio_file_description",
        "audio_media_type",
        "video_message_selection",
        "video_file_url",
        "video_file_description",
        "video_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
            E("timeout_seconds", "timeoutSeconds", int, is_required=True),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E("audio_file_url", "audioFileUrl", str),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file_url", "videoFileUrl", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
        )


class GroupCallCenterQueueCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description" and "Level".
    Level column can be any of the values in the data type CallDispositionCodeLevel.

    Attributes:
        disposition_codes_table: dispositionCodesTable
    """

    __slots__ = [
        "disposition_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disposition_codes_table",
                "dispositionCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallCenterQueueCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueCallDispositionCodeGetRequest()``

    Attributes:
        is_active: isActive
        description: description
    """

    __slots__ = [
        "is_active",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


class GroupCallCenterQueueStatusNotificationGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueStatusNotificationGetRequest()``.

    The response contains the call center status configuration information.

    Attributes:
        enable_queue_status_notification: enableQueueStatusNotification
        enable_queue_depth_threshold: enableQueueDepthThreshold
        enable_waiting_time_threshold: enableWaitingTimeThreshold
        number_of_calls_threshold: numberOfCallsThreshold
        waiting_time_of_calls_threshold: waitingTimeOfCallsThreshold
    """

    __slots__ = [
        "enable_queue_status_notification",
        "enable_queue_depth_threshold",
        "enable_waiting_time_threshold",
        "number_of_calls_threshold",
        "waiting_time_of_calls_threshold",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_queue_status_notification",
                "enableQueueStatusNotification",
                bool,
                is_required=True,
            ),
            E(
                "enable_queue_depth_threshold",
                "enableQueueDepthThreshold",
                bool,
                is_required=True,
            ),
            E(
                "enable_waiting_time_threshold",
                "enableWaitingTimeThreshold",
                bool,
                is_required=True,
            ),
            E(
                "number_of_calls_threshold",
                "numberOfCallsThreshold",
                int,
                is_required=True,
            ),
            E(
                "waiting_time_of_calls_threshold",
                "waitingTimeOfCallsThreshold",
                int,
                is_required=True,
            ),
        )


class GroupCallCenterQueueThresholdsGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterQueueThresholdsGetRequest()``.


    Attributes:
        is_active: isActive
        threshold_current_calls_in_queue_yellow: thresholdCurrentCallsInQueueYellow
        threshold_current_calls_in_queue_red: thresholdCurrentCallsInQueueRed
        threshold_current_longest_waiting_call_yellow:
            thresholdCurrentLongestWaitingCallYellow
        threshold_current_longest_waiting_call_red: thresholdCurrentLongestWaitingCallRed
        threshold_average_estimated_wait_time_yellow:
            thresholdAverageEstimatedWaitTimeYellow
        threshold_average_estimated_wait_time_red: thresholdAverageEstimatedWaitTimeRed
        threshold_average_handling_time_yellow: thresholdAverageHandlingTimeYellow
        threshold_average_handling_time_red: thresholdAverageHandlingTimeRed
        threshold_average_speed_of_answer_yellow: thresholdAverageSpeedOfAnswerYellow
        threshold_average_speed_of_answer_red: thresholdAverageSpeedOfAnswerRed
        enable_notification_email: enableNotificationEmail
        notification_email_address: notificationEmailAddress
    """

    __slots__ = [
        "is_active",
        "threshold_current_calls_in_queue_yellow",
        "threshold_current_calls_in_queue_red",
        "threshold_current_longest_waiting_call_yellow",
        "threshold_current_longest_waiting_call_red",
        "threshold_average_estimated_wait_time_yellow",
        "threshold_average_estimated_wait_time_red",
        "threshold_average_handling_time_yellow",
        "threshold_average_handling_time_red",
        "threshold_average_speed_of_answer_yellow",
        "threshold_average_speed_of_answer_red",
        "enable_notification_email",
        "notification_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "threshold_current_calls_in_queue_yellow",
                "thresholdCurrentCallsInQueueYellow",
                int,
            ),
            E(
                "threshold_current_calls_in_queue_red",
                "thresholdCurrentCallsInQueueRed",
                int,
            ),
            E(
                "threshold_current_longest_waiting_call_yellow",
                "thresholdCurrentLongestWaitingCallYellow",
                int,
            ),
            E(
                "threshold_current_longest_waiting_call_red",
                "thresholdCurrentLongestWaitingCallRed",
                int,
            ),
            E(
                "threshold_average_estimated_wait_time_yellow",
                "thresholdAverageEstimatedWaitTimeYellow",
                int,
            ),
            E(
                "threshold_average_estimated_wait_time_red",
                "thresholdAverageEstimatedWaitTimeRed",
                int,
            ),
            E(
                "threshold_average_handling_time_yellow",
                "thresholdAverageHandlingTimeYellow",
                int,
            ),
            E(
                "threshold_average_handling_time_red",
                "thresholdAverageHandlingTimeRed",
                int,
            ),
            E(
                "threshold_average_speed_of_answer_yellow",
                "thresholdAverageSpeedOfAnswerYellow",
                int,
            ),
            E(
                "threshold_average_speed_of_answer_red",
                "thresholdAverageSpeedOfAnswerRed",
                int,
            ),
            E(
                "enable_notification_email",
                "enableNotificationEmail",
                bool,
                is_required=True,
            ),
            E(
                "notification_email_address",
                "notificationEmailAddress",
                str,
                is_array=True,
            ),
        )


class GroupCallCenterStrandedCallGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallGetRequest()``.


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_file_url: audioFileUrl
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_message_selection: videoMessageSelection
        video_file_url: videoFileUrl
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "audio_message_selection",
        "audio_file_url",
        "audio_file_description",
        "audio_media_type",
        "video_message_selection",
        "video_file_url",
        "video_file_description",
        "video_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E("audio_file_url", "audioFileUrl", str),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file_url", "videoFileUrl", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
        )


class GroupCallCenterSupervisorReportingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterSupervisorReportingGetRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name".

    Attributes:
        reporting_server_name: reportingServerName
        supervisor_table: supervisorTable
    """

    __slots__ = [
        "reporting_server_name",
        "supervisor_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("reporting_server_name", "reportingServerName", str),
            E(
                "supervisor_table",
                "supervisorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallParkGetAvailableAlternateRecallUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetAvailableAlternateRecallUserListResponse()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name".

    Attributes:
        available_hunt_group_table: availableHuntGroupTable
    """

    __slots__ = [
        "available_hunt_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_hunt_group_table",
                "availableHuntGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallParkGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallParkGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetInstanceListRequest()``.


    Attributes:
        name: name
    """

    __slots__ = [
        "name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_array=True),
        )


class GroupCallParkGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name". The users are in the table are in the order they
    will try to be parked on.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallParkGetInstanceResponse16sp2(OCIResponse):
    """
    Response to the ``GroupCallParkGetInstanceRequest16sp2()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address". The users are in the table are in the order they will try to be parked on.
    The following elements are only used in AS data mode: recallAlternateUserId recallTo

    Attributes:
        recall_alternate_user_id: recallAlternateUserId
        recall_to: recallTo
        user_table: userTable
    """

    __slots__ = [
        "recall_alternate_user_id",
        "recall_to",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("recall_alternate_user_id", "recallAlternateUserId", str),
            E("recall_to", "recallTo", str, is_required=True),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallParkGetResponse(OCIResponse):
    """
    Response to the ``GroupCallParkGetRequest()``.

    Contains the settings that apply to the whole group for Call Park.

    Attributes:
        recall_timer_seconds: recallTimerSeconds
        display_timer_seconds: displayTimerSeconds
        enable_destination_announcement: enableDestinationAnnouncement
    """

    __slots__ = [
        "recall_timer_seconds",
        "display_timer_seconds",
        "enable_destination_announcement",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("recall_timer_seconds", "recallTimerSeconds", int, is_required=True),
            E("display_timer_seconds", "displayTimerSeconds", int, is_required=True),
            E(
                "enable_destination_announcement",
                "enableDestinationAnnouncement",
                bool,
                is_required=True,
            ),
        )


class GroupCallParkGetResponse16sp2(OCIResponse):
    """
    Response to the ``GroupCallParkGetRequest16sp2()``.

    Contains the settings that apply to the whole group for Call Park.  The following
    elements are only used in AS data mode: recallAlternateUserId recallRingPattern
    recallTo alternateUserRecallTimerSeconds

    Attributes:
        recall_timer_seconds: recallTimerSeconds
        display_timer_seconds: displayTimerSeconds
        enable_destination_announcement: enableDestinationAnnouncement
        recall_alternate_user_id: recallAlternateUserId
        recall_ring_pattern: recallRingPattern
        recall_to: recallTo
        alternate_user_recall_timer_seconds: alternateUserRecallTimerSeconds
    """

    __slots__ = [
        "recall_timer_seconds",
        "display_timer_seconds",
        "enable_destination_announcement",
        "recall_alternate_user_id",
        "recall_ring_pattern",
        "recall_to",
        "alternate_user_recall_timer_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("recall_timer_seconds", "recallTimerSeconds", int, is_required=True),
            E("display_timer_seconds", "displayTimerSeconds", int, is_required=True),
            E(
                "enable_destination_announcement",
                "enableDestinationAnnouncement",
                bool,
                is_required=True,
            ),
            E("recall_alternate_user_id", "recallAlternateUserId", str),
            E("recall_ring_pattern", "recallRingPattern", str, is_required=True),
            E("recall_to", "recallTo", str, is_required=True),
            E(
                "alternate_user_recall_timer_seconds",
                "alternateUserRecallTimerSeconds",
                int,
                is_required=True,
            ),
        )


class GroupCallPickupGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCallPickupGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallPickupGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCallPickupGetInstanceListRequest()``.


    Attributes:
        name: name
    """

    __slots__ = [
        "name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_array=True),
        )


class GroupCallPickupGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupCallPickupGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14()``.


    Attributes:
        use_group_setting: useGroupSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
    """

    __slots__ = [
        "use_group_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_setting", "useGroupSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14sp1()``.


    Attributes:
        use_group_setting: useGroupSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_group_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_setting", "useGroupSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse14sp4(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14sp4()``.

    Replaced By : ``GroupCallProcessingGetPolicyResponse15()``

    Attributes:
        use_group_setting: useGroupSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_group_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_external_calls_via_private_dialing_plan",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_setting", "useGroupSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest14sp7()``.


    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_external_calls_via_private_dialing_plan",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
        )


class GroupCallProcessingGetPolicyResponse15(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest15()``.


    Attributes:
        use_group_setting: useGroupSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_group_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_setting", "useGroupSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse15sp2(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest15sp2()``.


    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
        )


class GroupCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest16()``.


    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
        )


class GroupCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest16sp2()``.


    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_group_dclid_setting: useGroupDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_group_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest17()``.


    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest17sp3()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID Replaced by ``GroupCallProcessingGetPolicyResponse17sp4()``

    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_group_dclid_setting: useGroupDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_group_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest17sp4()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity Replaced by
    ``GroupCallProcessingGetPolicyResponse18()``

    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_group_dclid_setting: useGroupDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_group_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse18(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest18()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride

    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_group_dclid_setting: useGroupDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_group_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
        )


class GroupCallProcessingGetPolicyResponse18sp1(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest18()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride enterpriseCallsCLIDPolicy groupCallsCLIDPolicy
    Replaced by: ``GroupCallProcessingGetPolicyResponse19sp1()``

    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_group_dclid_setting: useGroupDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        group_calls_clid_policy: groupCallsCLIDPolicy
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_group_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "group_calls_clid_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
        )


class GroupCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``GroupCallProcessingGetPolicyRequest()``.

    The following elements are only used in AS data mode: useGroupDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride enterpriseCallsCLIDPolicy groupCallsCLIDPolicy

    Attributes:
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_group_dclid_setting: useGroupDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        group_calls_clid_policy: groupCallsCLIDPolicy
    """

    __slots__ = [
        "use_group_clid_setting",
        "use_group_media_setting",
        "use_group_call_limits_setting",
        "use_group_translation_routing_setting",
        "use_group_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "group_calls_clid_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_clid_setting", "useGroupCLIDSetting", bool, is_required=True),
            E("use_group_media_setting", "useGroupMediaSetting", bool, is_required=True),
            E(
                "use_group_call_limits_setting",
                "useGroupCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
                is_required=True,
            ),
            E("use_group_dclid_setting", "useGroupDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
        )


class GroupCallRecordingGetResponse(OCIResponse):
    """
    Response to the ``GroupCallRecordingGetRequest()``.

    The response contains the group's Call Recording platform information.

    Attributes:
        name: name
    """

    __slots__ = [
        "name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str),
        )


class GroupCallingLineIdGetResponse(OCIResponse):
    """
    Response to the ``GroupCallingLineIdGetRequest()``.

    The response contains the group's calling line id settings.

    Attributes:
        use_group_number: useGroupNumber
        use_group_name: useGroupName
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_name: callingLineIdName
    """

    __slots__ = [
        "use_group_number",
        "use_group_name",
        "calling_line_id_phone_number",
        "calling_line_id_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_number", "useGroupNumber", bool, is_required=True),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("calling_line_id_name", "callingLineIdName", str),
        )


class GroupCallingPlanGetDigitPatternListResponse(OCIResponse):
    """
    Response to ``GroupCallingPlanGetDigitPatternListRequest()``.

    Contains a table with column headings: "Name", "Digit Pattern".

    Attributes:
        digit_pattern_table: digitPatternTable
    """

    __slots__ = [
        "digit_pattern_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "digit_pattern_table",
                "digitPatternTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCollaborateBridgeGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCollaborateBridgeGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCollaborateBridgeGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupCollaborateBridgeGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Participants", and "Is Default". The column values for "Is
    default" can either be true, or false.

    Attributes:
        collaborate_bridge_table: collaborateBridgeTable
    """

    __slots__ = [
        "collaborate_bridge_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "collaborate_bridge_table",
                "collaborateBridgeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCommPilotCallManagerGetResponse(OCIResponse):
    """
    Response to ``GroupCommPilotCallManagerGetRequest()``.


    Attributes:
        group_directory: groupDirectory
    """

    __slots__ = [
        "group_directory",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("group_directory", "groupDirectory", str, is_required=True),
        )


class GroupCommunicationBarringGetResponse(OCIResponse):
    """
    Response to ``SystemCommunicationBarringGetRequest()``.


    Attributes:
        use_default_service_provider_profile: useDefaultServiceProviderProfile
        profile: profile
    """

    __slots__ = [
        "use_default_service_provider_profile",
        "profile",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_default_service_provider_profile",
                "useDefaultServiceProviderProfile",
                bool,
                is_required=True,
            ),
            E("profile", "profile", str),
        )


class GroupCommunicationBarringProfileGetAssignedListResponse(OCIResponse):
    """
    Response to the ``GroupCommunicationBarringProfileGetAssignedListRequest()``.

    The response contains a simple list of all communication barring profiles assigned to
    the group.

    Attributes:
        profile_name: profileName
    """

    __slots__ = [
        "profile_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_name", "profileName", str, is_array=True),
        )


class GroupCustomContactDirectoryGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name". Replace by:
    ``GroupCustomContactDirectoryGetAvailableUserListResponse17()``

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCustomContactDirectoryGetAvailableUserListResponse17(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetAvailableUserListRequest17()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Virtual On-Net Phone Number", "Group Id", "Is
    Virtual On-Net User", "Phone Number", "Extension", "Department", "Email Address". If
    the entry represents a Virtual On-Net user then "User Id" is blank, the "Virtual On-
    Net Phone Number" contains the phone Number of the Virtual On-Net user, the "Group Id"
    contains the Virtual On-Net user's group and the "Is Virtual On-Net User" contains
    true.  If the entry represents a BroadWorks user then the "User Id" contains his
    BroadWorks userId, the "Virtual On-Net Phone Number" and "Group Id" fields are blank
    and the "Is Virtual On-Net User" contains false.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCustomContactDirectoryGetListResponse(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetListRequest()``.

    The response contains all the group's custom contact directory names.

    Attributes:
        name: name
    """

    __slots__ = [
        "name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_array=True),
        )


class GroupCustomContactDirectoryGetResponse(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetRequest()``.

    The response contains all the group's custom contact directory names.  Contains a
    table with column headings: "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name". Replace by:
    ``GroupCustomContactDirectoryGetResponse17()``

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCustomContactDirectoryGetResponse17(OCIResponse):
    """
    Response to the ``GroupCustomContactDirectoryGetRequest17()``.

    The response contains all the contacts in the group's given custom contact directory.
    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Virtual On-Net Phone Number", "Group Id", "Is
    Virtual On-Net User", "Department", "Phone Number", "Extension", "Mobile", "Email
    Address", "Yahoo Id", "Title", "IMP Id". If the entry represents a Virtual On-Net user
    then "User Id" is blank, the "Virtual On-Net Phone Number" contains the phone Number
    of the Virtual On-Net user, the "Group Id" contains the Virtual On-Net user's group
    and the "Is Virtual On-Net User" contains true.  If the entry represents a BroadWorks
    user then the "User Id" contains his BroadWorks userId, the "Virtual On-Net Phone
    Number" and "Group Id" fields are field is blank and the "Is Virtual On-Net User"
    contains false.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupCustomRingbackGroupGetResponse(OCIResponse):
    """
    Response to the ``GroupCustomRingbackGroupGetRequest()``.

    Replaced By: ``GroupCustomRingbackGroupGetResponse16()``

    Attributes:
        is_active: isActive
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_file_url: videoFileUrl
    """

    __slots__ = [
        "is_active",
        "audio_selection",
        "audio_file_description",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_file_url", "videoFileUrl", str),
        )


class GroupCustomRingbackGroupGetResponse16(OCIResponse):
    """
    Response to the ``GroupCustomRingbackGroupGetRequest16()``.


    Attributes:
        is_active: isActive
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        video_file_url: videoFileUrl
    """

    __slots__ = [
        "is_active",
        "audio_selection",
        "audio_file_description",
        "audio_media_type",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_media_type",
        "video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("video_file_url", "videoFileUrl", str),
        )


class GroupDepartmentAdminGetListResponse(OCIResponse):
    """
    Response to ``GroupDepartmentAdminGetListRequest()``.

    Contains a 5 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Department", "Language".

    Attributes:
        department_admin_table: departmentAdminTable
    """

    __slots__ = [
        "department_admin_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_admin_table",
                "departmentAdminTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDepartmentGetListResponse18(OCIResponse):
    """
    Response to ``GroupDepartmentGetListRequest18()``.

    Contains a table of department attributes.  The column headings are: "Is Enterprise
    Department", "Department Name", "Full Path Name", "Calling Line Id Name", and "Calling
    Line Id Phone Number"

    Attributes:
        department_table: departmentTable
    """

    __slots__ = [
        "department_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_table",
                "departmentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDeviceManagementEventGetListResponse(OCIResponse):
    """
    Response to ``GroupDeviceManagementEventGetListRequest()``.

    Contains a table with column headings: "Event Id", "Status", "Action", "Level",
    "Type", "Additional Info", "Is Local", "Completion %", "Pushed/ Same Hash/ Not
    Pushed", "Login Id", "Start Time", "Process Time". "Event Id" is a unique identifer
    for the event.  "Status" can be: Pending, Queued, In Progress, Process On Other Host,
    Stale, Completed, Canceled.  "Action" can be: Delete, Download, Rebuild, Reset,
    Upload.  "Level" can be: Device, Device Type, Device Type Group, Group, User.  "Type"
    can be: Automatic, Manual.  "Additional Info" includes the affected device type,
    device or group.  It depends on the level of the event: Device Profile: "Device Name"
    "Service Provider Id" "Group Id" Device Type: "Device Type Name" Device Type Group:
    "Service Provider Id" "Group Id" "Device Type Name" Group: "Service Provider Id"
    "Group Id" User: "User Id" "Is Local" is set to "yes" if the event is processed on the
    server who received the request, "no" otherwise meaning that the event is processed on
    another server.  "Completion %" provides an estimate of the completion of the event.
    A percentage is given, the current number of completed expanded event, and the total
    number of expanded event.  "Pushed/ Same Hash/ Not Pushed" gives the total number of
    files that were pushed, not pushed because of same hash, and not pushed when
    processing the event.  "LoginId" is the user or admin id who triggered the event.
    "Start Time" is the date when the event was started.  The display shows the month,
    days, hours, and minutes (MM-dd hh:mm). "Process Time" is the time taken to process
    the event in hours, minutes, seconds, and milliseconds (hhhh:mm:ss.SSS). Each row
    represents an event sorted by priority of processing.  The first row in the table is
    an event that has an associated expanded event currently being processed or next in
    line to be processed.

    Attributes:
        event_table: eventTable
    """

    __slots__ = [
        "event_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "event_table",
                "eventTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDeviceManagementGetAccessDeviceCountForDeviceTypeGroupResponse(OCIResponse):
    """
    Response to ``GroupDeviceManagementGetAccessDeviceCountForDeviceTypeGroupRequest()``.


    Attributes:
        access_device_count: accessDeviceCount
    """

    __slots__ = [
        "access_device_count",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_device_count", "accessDeviceCount", int, is_required=True),
        )


class GroupDeviceTypeCustomTagGetListResponse(OCIResponse):
    """
    Response to ``GroupDeviceTypeCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device type basis for a group.  The column headings are: "Tag Name", "Tag
    Value"

    Attributes:
        group_device_type_custom_tags_table: groupDeviceTypeCustomTagsTable
    """

    __slots__ = [
        "group_device_type_custom_tags_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_device_type_custom_tags_table",
                "groupDeviceTypeCustomTagsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDeviceTypeFileGetListResponse(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetListRequest()``.

    Contains a table of device type files managed by the Device Management System, on a
    per-group basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``GroupDeviceTypeFileGetListResponse14sp8()``

    Attributes:
        group_device_type_files_table: groupDeviceTypeFilesTable
    """

    __slots__ = [
        "group_device_type_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_device_type_files_table",
                "groupDeviceTypeFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDeviceTypeFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetListRequest14sp8()``.

    Contains a table of device type files managed by the Device Management System, on a
    per-group basis.  The column headings are: "File Format", "Is Authenticated", "Access
    URL", "Repository URL", "Template URL". Replaced by:
    GroupDeviceTypeFileGetListResponset21.

    Attributes:
        group_device_type_files_table: groupDeviceTypeFilesTable
        group_has_files_with_customizable_tags: groupHasFilesWithCustomizableTags
    """

    __slots__ = [
        "group_device_type_files_table",
        "group_has_files_with_customizable_tags",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_device_type_files_table",
                "groupDeviceTypeFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "group_has_files_with_customizable_tags",
                "groupHasFilesWithCustomizableTags",
                bool,
            ),
        )


class GroupDeviceTypeFileGetListResponse21(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetListRequest21()``.

    Contains a table of device type files managed by the Device Management System, on a
    per-group basis.  The column headings are: "File Format", "Is Authenticated", "Access
    URL", "Repository URL", "Template URL".

    Attributes:
        group_device_type_files_table: groupDeviceTypeFilesTable
        group_has_customizable_dynamic_files: groupHasCustomizableDynamicFiles
    """

    __slots__ = [
        "group_device_type_files_table",
        "group_has_customizable_dynamic_files",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_device_type_files_table",
                "groupDeviceTypeFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "group_has_customizable_dynamic_files",
                "groupHasCustomizableDynamicFiles",
                bool,
                is_required=True,
            ),
        )


class GroupDeviceTypeFileGetResponse(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetRequest()``.

    Replaced By: ``GroupDeviceTypeFileGetResponse14sp8()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str),
            E("configuration_file_name", "configurationFileName", str),
        )


class GroupDeviceTypeFileGetResponse14sp8(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetRequest14sp8()``.

    Replaced by: ``GroupDeviceTypeFileGetResponse16sp1()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str),
            E("configuration_file_name", "configurationFileName", str),
        )


class GroupDeviceTypeFileGetResponse16sp1(OCIResponse):
    """
    Response to ``GroupDeviceTypeFileGetRequest16sp1()``.


    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "access_url",
        "repository_url",
        "template_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str),
            E("configuration_file_name", "configurationFileName", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
        )


class GroupDialPlanPolicyGetAccessCodeListResponse(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetAccessCodeListRequest()`` Contains a table with
    column headings: "Access Code", "Enable Secondary Dial Tone", "Description"

    Attributes:
        access_code_table: accessCodeTable
    """

    __slots__ = [
        "access_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_code_table",
                "accessCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDialPlanPolicyGetAccessCodeResponse(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetAccessCodeRequest()``

    Attributes:
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    __slots__ = [
        "include_code_for_network_translations_and_routing",
        "include_code_for_screening_services",
        "enable_secondary_dial_tone",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
                is_required=True,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
                is_required=True,
            ),
            E(
                "enable_secondary_dial_tone",
                "enableSecondaryDialTone",
                bool,
                is_required=True,
            ),
            E("description", "description", str),
        )


class GroupDialPlanPolicyGetResponse(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetRequest()`` Replaced by:
    ``GroupDialPlanPolicyGetResponse17()``

    Attributes:
        use_setting: useSetting
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "use_setting",
        "requires_access_code_for_public_calls",
        "allow_e164_public_calls",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting", "useSetting", str, is_required=True),
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
                is_required=True,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


class GroupDialPlanPolicyGetResponse17(OCIResponse):
    """
    Response to ``GroupDialPlanPolicyGetRequest17()``

    Attributes:
        use_setting: useSetting
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        prefer_e164_number_format_for_callback_services:
            preferE164NumberFormatForCallbackServices
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "use_setting",
        "requires_access_code_for_public_calls",
        "allow_e164_public_calls",
        "prefer_e164_number_format_for_callback_services",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting", "useSetting", str, is_required=True),
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
                is_required=True,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
            E(
                "prefer_e164_number_format_for_callback_services",
                "preferE164NumberFormatForCallbackServices",
                bool,
                is_required=True,
            ),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


class GroupDialableCallerIDCriteriaGetResponse(OCIResponse):
    """
    Response to the ``GroupDialableCallerIDCriteriaGetRequest()``.

    The response contains the Dialable Caller ID Criteria information.

    Attributes:
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    __slots__ = [
        "description",
        "prefix_digits",
        "match_call_type",
        "match_alternate_call_indicator",
        "match_local_category",
        "match_national_category",
        "match_interlata_category",
        "match_intralata_category",
        "match_international_category",
        "match_private_category",
        "match_emergency_category",
        "match_other_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
        )


class GroupDialableCallerIDGetResponse(OCIResponse):
    """
    Response to the ``GroupDialableCallerIDGetRequest()``.

    The criteria table�s column headings are "Active", "Name", "Description", �Prefix
    Digits�, �Priority�.

    Attributes:
        use_group_criteria: useGroupCriteria
        ns_screening_failure_policy: nsScreeningFailurePolicy
        criteria_table: criteriaTable
    """

    __slots__ = [
        "use_group_criteria",
        "ns_screening_failure_policy",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_criteria", "useGroupCriteria", bool, is_required=True),
            E(
                "ns_screening_failure_policy",
                "nsScreeningFailurePolicy",
                str,
                is_required=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDigitCollectionGetResponse13mp4(OCIResponse):
    """
    Response to ``GroupDigitCollectionGetRequest13mp4()``.


    Attributes:
        use_setting: useSetting
        access_code: accessCode
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "use_setting",
        "access_code",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting", "useSetting", str, is_required=True),
            E("access_code", "accessCode", str),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


class GroupDirectoryNumberHuntingGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupDirectoryNumberHuntingGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDirectoryNumberHuntingGetResponse(OCIResponse):
    """
    Response to the ``GroupDirectoryNumberHuntingGetRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address". Replaced by: ``GroupDirectoryNumberHuntingGetResponse17sp1()``

    Attributes:
        agent_user_table: agentUserTable
    """

    __slots__ = [
        "agent_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDirectoryNumberHuntingGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupDirectoryNumberHuntingGetRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        agent_user_table: agentUserTable
        use_terminate_call_to_agent_first: useTerminateCallToAgentFirst
        use_original_agent_services_for_busy_and_no_answer_calls:
            useOriginalAgentServicesForBusyAndNoAnswerCalls
    """

    __slots__ = [
        "agent_user_table",
        "use_terminate_call_to_agent_first",
        "use_original_agent_services_for_busy_and_no_answer_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "use_terminate_call_to_agent_first",
                "useTerminateCallToAgentFirst",
                bool,
                is_required=True,
            ),
            E(
                "use_original_agent_services_for_busy_and_no_answer_calls",
                "useOriginalAgentServicesForBusyAndNoAnswerCalls",
                bool,
                is_required=True,
            ),
        )


class GroupDnGetActivationListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetActivationListRequest()``.

    The response contains a table with columns: "Phone Numbers", and "Activated". ". Phone
    Numbers are only returned if assigned to a user.  The "Phone Numbers" column contains
    either a single DN or a range of DNs.  The "Activated" column indicates if the phone
    number(s) are activated or not.

    Attributes:
        dn_table: dnTable
    """

    __slots__ = [
        "dn_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_table",
                "dnTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDnGetAssignmentListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetAssignmentListRequest()``.

    The response contains a table with columns: "Phone Numbers", "Assigned To",
    "Department", "Activated". The "Phone Numbers" column contains either a single DN or a
    range of DNs.  The "Assigned To" column contains the user name or service instance
    name possessing the DN(s). The "Department" column contains the department of the DN,
    not the department of the user or service instance.  The "Activated" column indicates
    if the DN or DN range has been activated.  Only has a value if the DN(s) is assigned
    to a user.  Replaced by: ``GroupDnGetAssignmentListResponse18()``

    Attributes:
        dn_table: dnTable
    """

    __slots__ = [
        "dn_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_table",
                "dnTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDnGetAssignmentListResponse18(OCIResponse):
    """
    Response to the ``GroupDnGetAssignmentListRequest18()``.

    The response contains a table with columns: "Phone Numbers", "Department",
    "Activated", "User Id", "Last Name", "First Name", "Extension", "Email Address", "User
    Type". The "Phone Numbers" column contains either a single DN or a range of DNs.  The
    "User Id", "Last Name" and "First Name" columns contains the corresponding attributes
    of the user possessing the DN(s). For a service instance, "Last Name" contains the
    service instance name and "First Name" column contains the corresponding enumerated
    UserType value.  The "Department" column contains the department of the DN, not the
    department of the user or service instance.  The "Activated" column indicates if the
    DN or DN range has been activated.  Only has a value if the DN(s) is assigned to a
    user.  The "User Type" column contains the corresponding enumerated UserType value.
    NOTE: the same phone number can show up in the list twice if the phone number is being
    used as the group calling line Id.

    Attributes:
        dn_table: dnTable
    """

    __slots__ = [
        "dn_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_table",
                "dnTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDnGetAvailableListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetAvailableListRequest()``.

    The response contains the list of DNs that are assigned to a group and still available
    for assignment to users or service instances within the group.

    Attributes:
        phone_number: phoneNumber
    """

    __slots__ = [
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_array=True),
        )


class GroupDnGetAvailableRangesListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetAvailableRangesListRequest()``.

    The response contains the list of group DNs that are not assigned to user, service
    instances or IMRN pool.  The Dns are returned in a list of DNs or DN ranges and
    formated in E164 format for display.

    Attributes:
        phone_number: phoneNumber
    """

    __slots__ = [
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_array=True),
        )


class GroupDnGetDetailedAvailableListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetDetailedAvailableListRequest()``.

    The response contains a table with columns: "Phone Number", "Department". The "Phone
    Numbers" column contains a single DN. The "Department" column contains the department
    of the DN if the DN is part of the department.  The "Activated" column indicates if
    the DN has been activated.  Only has a value if the DN(s) is assigned to a user or if
    "Group Enable Activation Mode" is enabled.

    Attributes:
        dn_table: dnTable
    """

    __slots__ = [
        "dn_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_table",
                "dnTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDnGetListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetListRequest()``.

    The response contains the list of DNs assigned to the group.

    Attributes:
        phone_number: phoneNumber
    """

    __slots__ = [
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_array=True),
        )


class GroupDnGetSummaryListResponse(OCIResponse):
    """
    Response to the ``GroupDnGetSummaryListRequest()``.

    The response contains a table with columns: "Phone Numbers", "Assigned". The "Phone
    Numbers" column contains either a single DN or a range of DNs.  The "Assigned" column
    contains a boolean flag indicating if the DN(s) are currently assigned to a user or
    service instance.  The "Activated" column indicates if the DN or DN range has been
    activated.  Only has a value if the DN(s) is assigned to a user or if "Group Enable
    Activation Mode" is enabled.

    Attributes:
        dn_table: dnTable
    """

    __slots__ = [
        "dn_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_table",
                "dnTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupDomainGetAssignedListResponse(OCIResponse):
    """
    Contains a simple list of all group domain names.


    Attributes:
        group_default_domain: groupDefaultDomain
        domain: domain
    """

    __slots__ = [
        "group_default_domain",
        "domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("group_default_domain", "groupDefaultDomain", str, is_required=True),
            E("domain", "domain", str, is_array=True),
        )


class GroupDomainGetAssignedUserListResponse(OCIResponse):
    """
    Response to ``GroupDomainGetAssignedUserListRequest()``.

    The table columns are: "User Id", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Service Provider Id", "Group Id", "Hiragana Last Name" and
    "Hiragana First Name", "Extension".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupEmergencyZonesGetResponse(OCIResponse):
    """
    Response to ``GroupEmergencyZonesGetRequest()``.


    Attributes:
        is_active: isActive
        emergency_zones_prohibition: emergencyZonesProhibition
        send_emergency_call_notify_email: sendEmergencyCallNotifyEmail
        emergency_call_notify_email_address: emergencyCallNotifyEmailAddress
    """

    __slots__ = [
        "is_active",
        "emergency_zones_prohibition",
        "send_emergency_call_notify_email",
        "emergency_call_notify_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "emergency_zones_prohibition",
                "emergencyZonesProhibition",
                str,
                is_required=True,
            ),
            E(
                "send_emergency_call_notify_email",
                "sendEmergencyCallNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "emergency_call_notify_email_address",
                "emergencyCallNotifyEmailAddress",
                str,
            ),
        )


class GroupEndpointGetListResponse(OCIResponse):
    """
    Response to ``GroupEndpointGetListRequest()``.

    The column headings for the endpointTable are: "Line/Port", "Last Name", "First Name",
    "User Id", "User Type", "Phone Number", "Extension", "Device Type", "Device Name",
    "Net Address", "MAC Address", "Department", "Email Address". Possible values for User
    Type are �User�, �CCBasic�, �CCStandard�, �CCPremium�, �RP�, �MOH�, �MOHVideo�.

    Attributes:
        endpoint_table: endpointTable
    """

    __slots__ = [
        "endpoint_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "endpoint_table",
                "endpointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupEnterpriseTrunkGetAvailableTrunkGroupListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetAvailableTrunkGroupListRequest()``.


    Attributes:
        trunk_group_name: trunkGroupName
    """

    __slots__ = [
        "trunk_group_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("trunk_group_name", "trunkGroupName", str, is_array=True),
        )


class GroupEnterpriseTrunkGetAvailableUserListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetAvailableUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number",
    "Extension", "Department", "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupEnterpriseTrunkGetListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetListRequest()``.

    Contains a table of enterprise trunks defined in the enterprise The column headings
    are: "Enterprise Trunk Name", "Routing Type"

    Attributes:
        enterprise_trunk_table: enterpriseTrunkTable
    """

    __slots__ = [
        "enterprise_trunk_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enterprise_trunk_table",
                "enterpriseTrunkTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupEnterpriseTrunkGetResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetRequest()``.

    Replaced by: ``GroupEnterpriseTrunkGetResponse21()``.

    Attributes:
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
    """

    __slots__ = [
        "maximum_reroute_attempts",
        "route_exhaustion_action",
        "route_exhaustion_forward_address",
        "ordered_routing",
        "priority_weighted_routing",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
        )


class GroupEnterpriseTrunkGetResponse21(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetRequest21()``.


    Attributes:
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
        enable_capacity_management: enableCapacityManagement
        max_active_calls: maxActiveCalls
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
    """

    __slots__ = [
        "maximum_reroute_attempts",
        "route_exhaustion_action",
        "route_exhaustion_forward_address",
        "ordered_routing",
        "priority_weighted_routing",
        "enable_capacity_management",
        "max_active_calls",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "enable_capacity_management",
                "enableCapacityManagement",
                bool,
                is_required=True,
            ),
            E("max_active_calls", "maxActiveCalls", int),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
        )


class GroupEnterpriseTrunkGetUserListResponse(OCIResponse):
    """
    Response to ``GroupEnterpriseTrunkGetUserListRequest()``.

    The column headings for the enterpriseTrunkUserTable are: "User Id", "Last Name",
    "First Name", "Phone Number", "Alternate Trunk Identity", "Hiragana Last Name",
    "Hiragana First Name", "Extension", "Department", "Email Address" and "Route List
    Assigned".

    Attributes:
        enterprise_trunk_user_table: enterpriseTrunkUserTable
    """

    __slots__ = [
        "enterprise_trunk_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enterprise_trunk_user_table",
                "enterpriseTrunkUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupExchangeIntegrationGetResponse(OCIResponse):
    """
    Response to ``GroupExchangeIntegrationGetRequest()``.


    Attributes:
        enable_exchange_integration: enableExchangeIntegration
        exchange_url: exchangeURL
        exchange_user_name: exchangeUserName
    """

    __slots__ = [
        "enable_exchange_integration",
        "exchange_url",
        "exchange_user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_exchange_integration",
                "enableExchangeIntegration",
                bool,
                is_required=True,
            ),
            E("exchange_url", "exchangeURL", str),
            E("exchange_user_name", "exchangeUserName", str),
        )


class GroupExtensionLengthGetResponse(OCIResponse):
    """
    Response to ``GroupExtensionLengthGetRequest()``.


    Attributes:
        extension_length: extensionLength
    """

    __slots__ = [
        "extension_length",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("extension_length", "extensionLength", int, is_required=True),
        )


class GroupExtensionLengthGetResponse17(OCIResponse):
    """
    Response to ``GroupExtensionLengthGetRequest17()``.


    Attributes:
        min_extension_length: minExtensionLength
        max_extension_length: maxExtensionLength
        default_extension_length: defaultExtensionLength
    """

    __slots__ = [
        "min_extension_length",
        "max_extension_length",
        "default_extension_length",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("min_extension_length", "minExtensionLength", int, is_required=True),
            E("max_extension_length", "maxExtensionLength", int, is_required=True),
            E(
                "default_extension_length",
                "defaultExtensionLength",
                int,
                is_required=True,
            ),
        )


class GroupFileRepositoryDeviceUserGetListResponse(OCIResponse):
    """
    Response to ``GroupFileRepositoryDeviceUserGetListRequest()``.

    Contains a table with column headings : "User Name","Allow Delete","Allow Get","Allow
    Put" in a row for each file repository service provider user.

    Attributes:
        file_repository_user_table: fileRepositoryUserTable
    """

    __slots__ = [
        "file_repository_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_repository_user_table",
                "fileRepositoryUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupFindMeFollowMeAlertingGroupGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupFindMeFollowMeAlertingGroupGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupFindMeFollowMeGetAlertingGroupListResponse(OCIResponse):
    """
    Response to the ``GroupFindMeFollowMeGetAlertingGroupListRequest()``.

    Contains a table with column headings: "Name", "Priority".

    Attributes:
        alerting_group_table: alertingGroupTable
    """

    __slots__ = [
        "alerting_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alerting_group_table",
                "alertingGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupFindMeFollowMeGetAlertingGroupResponse(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetAlertingGroupRequest()``.

    Contains the alerting group information.  The user table’s column headings are: "User
    Id", "Last Name", "First Name", "Hiragana Last Name" and "Hiragana First Name", "Phone
    Number", "Extension", "Department", "Email Address". The criteria table's column
    headings are: "Is Active", "Criteria Name", "Time Schedule", "Calls From",
    "Blacklisted", "Holiday Schedule"", "Calls To Type", "Calls To Number" and "Calls To
    Extension". The possible values for the "Calls To Type" column are the following or a
    combination of them separated by comma: - Primary - Alternate X (where x is a number
    between 1 and 10) The possible values for the "Calls To Number" column are the
    following or a combination of them separated by comma: - The value of the phone number
    for the corresponding Calls To Type, when the number is available.  i.e.  Alternate 1
    may have extension, but no number.  - When no number is available a blank space is
    provided instead.  The possible values for the "Calls To Extension" column are the
    following or a combination of them separated by comma: - The value of the extension
    for the corresponding Calls To Type, when the extension is available.  i.e.  Primary
    may have number, but no extension.  - When no extension is available a blank space is
    provided instead.

    Attributes:
        alerting_group_description: alertingGroupDescription
        use_diversion_inhibitor: useDiversionInhibitor
        answer_confirmation_required: answerConfirmationRequired
        number_of_rings: numberOfRings
        phone_number: phoneNumber
        user_table: userTable
        criteria_table: criteriaTable
    """

    __slots__ = [
        "alerting_group_description",
        "use_diversion_inhibitor",
        "answer_confirmation_required",
        "number_of_rings",
        "phone_number",
        "user_table",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("alerting_group_description", "alertingGroupDescription", str),
            E(
                "use_diversion_inhibitor",
                "useDiversionInhibitor",
                bool,
                is_required=True,
            ),
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
            E("number_of_rings", "numberOfRings", int, is_required=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupFindMeFollowMeGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupFindMeFollowMeGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.

    Attributes:
        find_me_follow_me_table: findMeFollowMeTable
    """

    __slots__ = [
        "find_me_follow_me_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "find_me_follow_me_table",
                "findMeFollowMeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupFlexibleSeatingAccessDeviceGetListResponse(OCIResponse):
    """
    Response to ``GroupFlexibleSeatingAccessDeviceGetListRequest()``

    Attributes:
        available_access_device: availableAccessDevice
    """

    __slots__ = [
        "available_access_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_access_device",
                "availableAccessDevice",
                str,
                is_complex=True,
                is_array=True,
            ),  # unknown
        )


class GroupFlexibleSeatingHostGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupFlexibleSeatingHostGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.

    Attributes:
        flexible_seating_host_table: flexibleSeatingHostTable
    """

    __slots__ = [
        "flexible_seating_host_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "flexible_seating_host_table",
                "flexibleSeatingHostTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupFlexibleSeatingHostGuestAssociationGetResponse(OCIResponse):
    """
    Response to ``GroupFlexibleSeatingHostGuestAssociationGetRequest()``.


    Attributes:
        enforce_association_limit: enforceAssociationLimit
        association_limit_hours: associationLimitHours
        access_level: accessLevel
        guest_last_name: guestLastName
        guest_first_name: guestFirstName
        guest_phone_number: guestPhoneNumber
        guest_extension: guestExtension
        guest_location_dialing_code: guestLocationDialingCode
        guest_association_date_time: guestAssociationDateTime
    """

    __slots__ = [
        "enforce_association_limit",
        "association_limit_hours",
        "access_level",
        "guest_last_name",
        "guest_first_name",
        "guest_phone_number",
        "guest_extension",
        "guest_location_dialing_code",
        "guest_association_date_time",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enforce_association_limit",
                "enforceAssociationLimit",
                bool,
                is_required=True,
            ),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("access_level", "accessLevel", str, is_required=True),
            E("guest_last_name", "guestLastName", str),
            E("guest_first_name", "guestFirstName", str),
            E("guest_phone_number", "guestPhoneNumber", str),
            E("guest_extension", "guestExtension", str),
            E("guest_location_dialing_code", "guestLocationDialingCode", str),
            E("guest_association_date_time", "guestAssociationDateTime", str),
        )


class GroupFlexibleSeatingHostRoutingPoliciesGetResponse(OCIResponse):
    """
    Response to the ``GroupFlexibleSeatingHostRoutingPoliciesGetRequest()``.


    Attributes:
        allow_emergency_calls: allowEmergencyCalls
        allow_calls_to_voice_portal: allowCallsToVoicePortal
    """

    __slots__ = [
        "allow_emergency_calls",
        "allow_calls_to_voice_portal",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_emergency_calls", "allowEmergencyCalls", bool, is_required=True),
            E(
                "allow_calls_to_voice_portal",
                "allowCallsToVoicePortal",
                bool,
                is_required=True,
            ),
        )


class GroupGetDefaultResponse(OCIResponse):
    """
    Response to the ``GroupGetDefaultRequest()``.

    All values are default values for a group's profile.

    Attributes:
        default_domain: defaultDomain
        user_limit: userLimit
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
    """

    __slots__ = [
        "default_domain",
        "user_limit",
        "time_zone",
        "time_zone_display_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_domain", "defaultDomain", str, is_required=True),
            E("user_limit", "userLimit", int, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
        )


class GroupGetListInServiceProviderResponse(OCIResponse):
    """
    Response to ``GroupGetListInServiceProviderRequest()``.

    Contains a 3 column table with column headings: "Group Id", "Group Name", "User Limit"
    and a row for each group.

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGetListInSystemResponse(OCIResponse):
    """
    Response to ``GroupGetListInSystemRequest()``.

    Contains a table with column headings: "Group Id", "Group Name", "User Limit",
    "Organization Id", "Organization Type" and a row for each group.  The "Organization
    Id" column is populated with either a service provider Id or an enterprise Id.  The
    "Organization Type" column is populated with one of the enumerated strings defined in
    the OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGetUserServiceAssignedUserListResponse(OCIResponse):
    """
    Return a table containing the list of users assigned the user service or service pack.

    The table contains columns: "User Id", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Hiragana Last Name"; "Hiragana First Name", "Extension".
    This is a response to the ``GroupGetUserServiceAssignedUserListRequest()``.

    Attributes:
        user_list_table: userListTable
    """

    __slots__ = [
        "user_list_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_list_table",
                "userListTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGroupPagingGetAvailableOriginatorListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetAvailableOriginatorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name" and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGroupPagingGetAvailableTargetListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetAvailableTargetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name" and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGroupPagingGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column value for "Is Active" can either be
    true, or false.

    Attributes:
        paging_group_table: pagingGroupTable
    """

    __slots__ = [
        "paging_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "paging_group_table",
                "pagingGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGroupPagingGetOriginatorListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetOriginatorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        originator_table: originatorTable
    """

    __slots__ = [
        "originator_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "originator_table",
                "originatorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGroupPagingGetTargetListResponse(OCIResponse):
    """
    Response to the ``GroupGroupPagingGetTargetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        target_table: targetTable
    """

    __slots__ = [
        "target_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "target_table",
                "targetTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupGroupPagingTargetsCapacityGetResponse(OCIResponse):
    """
    Response to ``GroupGroupPagingTargetsCapacityGetRequest()``.


    Attributes:
        maximum_target_users_from_service_provider: maximumTargetUsersFromServiceProvider
        maximum_target_users: maximumTargetUsers
    """

    __slots__ = [
        "maximum_target_users_from_service_provider",
        "maximum_target_users",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "maximum_target_users_from_service_provider",
                "maximumTargetUsersFromServiceProvider",
                int,
                is_required=True,
            ),
            E("maximum_target_users", "maximumTargetUsers", int, is_required=True),
        )


class GroupHolidayScheduleGetListResponse(OCIResponse):
    """
    Response to the ``GroupHolidayScheduleGetListRequest()``.

    The response contains all the group's holiday schedule name.

    Attributes:
        holiday_schedule_name: holidayScheduleName
    """

    __slots__ = [
        "holiday_schedule_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_array=True),
        )


class GroupHuntGroupGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupHuntGroupGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupHuntGroupGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupHuntGroupGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active", "Policy". The column values for "Is Active"
    can either be true, or false.  NOTE: prior to release 14, the policy column did not
    match the HuntPolicy enumerated type.

    Attributes:
        hunt_group_table: huntGroupTable
    """

    __slots__ = [
        "hunt_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "hunt_group_table",
                "huntGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupIMRNGetListResponse(OCIResponse):
    """
    Response to ``GroupIMRNGetListRequest()``.


    Attributes:
        imrn: imrn
    """

    __slots__ = [
        "imrn",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("imrn", "imrn", str, is_array=True),
        )


class GroupInstantGroupCallGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupInstantGroupCallGetInstanceListRequest()``.

    Contains a 6 column table with column headings: "Service User Id", "Name", "Phone
    Number", "Extension", "Department", "Is Active". The column values for Is Active can
    either be true, or false.

    Attributes:
        instant_group_call_table: instantGroupCallTable
    """

    __slots__ = [
        "instant_group_call_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "instant_group_call_table",
                "instantGroupCallTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``GroupIntegratedIMPGetRequest()``.

    The response contains the group Integrated IMP service attributes.

    Attributes:
        use_service_provider_setting: useServiceProviderSetting
        service_domain: serviceDomain
    """

    __slots__ = [
        "use_service_provider_setting",
        "service_domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_setting",
                "useServiceProviderSetting",
                bool,
                is_required=True,
            ),
            E("service_domain", "serviceDomain", str),
        )


class GroupInterceptGroupGetResponse(OCIResponse):
    """
    Response to the ``GroupInterceptGroupGetRequest()``.

    Replaced By: ``GroupInterceptGroupGetResponse16()``

    Attributes:
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file_description: audioFileDescription
        video_file_description: videoFileDescription
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
    """

    __slots__ = [
        "is_active",
        "announcement_selection",
        "audio_file_description",
        "video_file_description",
        "play_new_phone_number",
        "new_phone_number",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("video_file_description", "videoFileDescription", str),
            E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
            E("new_phone_number", "newPhoneNumber", str),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
        )


class GroupInterceptGroupGetResponse16(OCIResponse):
    """
    Response to the ``GroupInterceptGroupGetRequest16()``.

    Replaced By: ``GroupInterceptGroupGetResponse16sp1()``

    Attributes:
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
    """

    __slots__ = [
        "is_active",
        "announcement_selection",
        "audio_file_description",
        "audio_media_type",
        "video_file_description",
        "video_media_type",
        "play_new_phone_number",
        "new_phone_number",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
            E("new_phone_number", "newPhoneNumber", str),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
        )


class GroupInterceptGroupGetResponse16sp1(OCIResponse):
    """
    Response to the ``GroupInterceptGroupGetRequest16sp1()``.


    Attributes:
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
        reroute_outbound_calls: rerouteOutboundCalls
        outbound_reroute_phone_number: outboundReroutePhoneNumber
        allow_outbound_local_calls: allowOutboundLocalCalls
        inbound_call_mode: inboundCallMode
        alternate_blocking_announcement: alternateBlockingAnnouncement
        route_to_voice_mail: routeToVoiceMail
    """

    __slots__ = [
        "is_active",
        "announcement_selection",
        "audio_file_description",
        "audio_media_type",
        "video_file_description",
        "video_media_type",
        "play_new_phone_number",
        "new_phone_number",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "reroute_outbound_calls",
        "outbound_reroute_phone_number",
        "allow_outbound_local_calls",
        "inbound_call_mode",
        "alternate_blocking_announcement",
        "route_to_voice_mail",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
            E("new_phone_number", "newPhoneNumber", str),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("reroute_outbound_calls", "rerouteOutboundCalls", bool, is_required=True),
            E("outbound_reroute_phone_number", "outboundReroutePhoneNumber", str),
            E(
                "allow_outbound_local_calls",
                "allowOutboundLocalCalls",
                bool,
                is_required=True,
            ),
            E("inbound_call_mode", "inboundCallMode", str, is_required=True),
            E(
                "alternate_blocking_announcement",
                "alternateBlockingAnnouncement",
                bool,
                is_required=True,
            ),
            E("route_to_voice_mail", "routeToVoiceMail", bool, is_required=True),
        )


class GroupInventoryReportGetResponse(OCIResponse):
    """
    Response to ``GroupInventoryReportGetRequest()``.


    Attributes:
        inventory_report_table: inventoryReportTable
    """

    __slots__ = [
        "inventory_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "inventory_report_table",
                "inventoryReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupLDAPIntegrationGetDirectoryResponse(OCIResponse):
    """
    Response to ``GroupLDAPIntegrationGetDirectoryRequest()``.


    Attributes:
        use_level: useLevel
        server_net_address: serverNetAddress
        server_port: serverPort
        search_base: searchBase
        use_ssl: useSSL
        require_authentication: requireAuthentication
        authenticated_dn: authenticatedDN
        authenticated_password: authenticatedPassword
        is_sort_enabled: isSortEnabled
        is_paged_result_enabled: isPagedResultEnabled
        search_filter: searchFilter
        include_search_attribute_in_search_filter: includeSearchAttributeInSearchFilter
        column1_attribute_name: column1AttributeName
        column2_attribute_name: column2AttributeName
        column3_attribute_name: column3AttributeName
        column4_attribute_name: column4AttributeName
        column1_label: column1Label
        column2_label: column2Label
        column3_label: column3Label
        column4_label: column4Label
        search_column: searchColumn
    """

    __slots__ = [
        "use_level",
        "server_net_address",
        "server_port",
        "search_base",
        "use_ssl",
        "require_authentication",
        "authenticated_dn",
        "authenticated_password",
        "is_sort_enabled",
        "is_paged_result_enabled",
        "search_filter",
        "include_search_attribute_in_search_filter",
        "column1_attribute_name",
        "column2_attribute_name",
        "column3_attribute_name",
        "column4_attribute_name",
        "column1_label",
        "column2_label",
        "column3_label",
        "column4_label",
        "search_column",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_level", "useLevel", str, is_required=True),
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int, is_required=True),
            E("search_base", "searchBase", str),
            E("use_ssl", "useSSL", bool, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("authenticated_dn", "authenticatedDN", str),
            E("authenticated_password", "authenticatedPassword", str),
            E("is_sort_enabled", "isSortEnabled", bool, is_required=True),
            E("is_paged_result_enabled", "isPagedResultEnabled", bool, is_required=True),
            E("search_filter", "searchFilter", str),
            E(
                "include_search_attribute_in_search_filter",
                "includeSearchAttributeInSearchFilter",
                bool,
                is_required=True,
            ),
            E("column1_attribute_name", "column1AttributeName", str, is_required=True),
            E("column2_attribute_name", "column2AttributeName", str),
            E("column3_attribute_name", "column3AttributeName", str),
            E("column4_attribute_name", "column4AttributeName", str),
            E("column1_label", "column1Label", str),
            E("column2_label", "column2Label", str),
            E("column3_label", "column3Label", str),
            E("column4_label", "column4Label", str),
            E("search_column", "searchColumn", int, is_required=True),
        )


class GroupLDAPIntegrationGetResponse(OCIResponse):
    """
    Response to ``GroupLDAPIntegrationGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class GroupMWIDeliveryToMobileEndpointGetResponse(OCIResponse):
    """
    Response to ``GroupMWIDeliveryToMobileEndpointGetRequest()``.

    The templateActivationTable contains the list of templates defined for the group.  The
    column headings are "Enable", "Language", "Type".

    Attributes:
        use_setting_level: useSettingLevel
        template_activation_table: templateActivationTable
    """

    __slots__ = [
        "use_setting_level",
        "template_activation_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E(
                "template_activation_table",
                "templateActivationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupMeetMeConferencingGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupMeetMeConferencingGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", and "Hiragana First Name", "Phone Number", "Extension", "Department",
    "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupMeetMeConferencingGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupMeetMeConferencingGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Ports", and "Is Active". The column values for "Is Active"
    can either be true, or false.

    Attributes:
        conference_bridge_table: conferenceBridgeTable
    """

    __slots__ = [
        "conference_bridge_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "conference_bridge_table",
                "conferenceBridgeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupNetworkClassOfServiceGetAssignedListResponse(OCIResponse):
    """
    Response to ``GroupNetworkClassOfServiceGetAssignedListRequest()``.

    Contains a table of all Network Classes of Service assigned to the group.  The column
    headings are: "Name", "Description" and "Default".

    Attributes:
        network_class_of_service_table: networkClassOfServiceTable
    """

    __slots__ = [
        "network_class_of_service_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "network_class_of_service_table",
                "networkClassOfServiceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupNetworkClassOfServiceGetAssignedUserListResponse(OCIResponse):
    """
    Response to ``GroupNetworkClassOfServiceGetAssignedUserListRequest()``.

    Contains a table of users that have the Network Class of Service assigned.  The column
    headings are: "User Id", "User Type", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Service Provider Id", "Group Id", "Hiragana Last Name" and
    "Hiragana First Name" , "Extension". Replaced by
    ``GroupNetworkClassOfServiceGetAssignedUserListResponse21()``

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupNetworkClassOfServiceGetAssignedUserListResponse21(OCIResponse):
    """
    Response to ``GroupNetworkClassOfServiceGetAssignedUserListRequest21()``.

    Contains a table of users that have the Network Class of Service assigned.  The column
    headings are: "User Id", "User Type", "Last Name", "First Name", "Department", "Phone
    Number", "Email Address", "Service Provider Id", "Group Id", "Hiragana Last Name" and
    "Hiragana First Name" , "Extension". The User type column will display Auto Attendant
    and the Call Center subtype.  Call Center - Basic, Call Center - Standard and Call
    Center - Premium will be displayed instead of Call Center and Auto Attendant (for the
    Basic Auto Attendant) and Auto Attendant - Standard instead of Auto Attendant.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupOfficeZoneGetAssignedListResponse(OCIResponse):
    """
    Response to ``GroupOfficeZoneGetAssignedListRequest()``.

    Contains a table of all Office Zones assigned to the group.  The column headings are:
    "Name", "Description" and "Default".

    Attributes:
        office_zone_table: officeZoneTable
    """

    __slots__ = [
        "office_zone_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "office_zone_table",
                "officeZoneTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupOfficeZoneGetAssignedUserListResponse(OCIResponse):
    """
    Response to ``GroupOfiiceZoneGetAssignedUserListRequest()``.

    Contains a table of users that have the Office Zone assigned.  The column headings
    are: "User Id", "User Type", "Last Name", "First Name", "Department", "Phone Number",
    "Email Address", "Hiragana Last Name" and "Hiragana First Name", "Extension". Office
    Zones can only be unassigned if the Location-Based Calling Restrictions has been
    authorized to the group otherwise the request will fail.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupOutgoingCallingPlanPinholeDigitPatternGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPatternGetListRequest()``.

    Contains a table with column headings: "Name", "Digit Pattern".

    Attributes:
        digit_pattern_table: digitPatternTable
    """

    __slots__ = [
        "digit_pattern_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "digit_pattern_table",
                "digitPatternTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``GroupPasswordRulesGetRequest()``.

    Contains the password rules applicable to users within the group.  Repleced by:
    ``GroupPasswordRulesGetResponse16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "disallow_user_id",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "max_failed_login_attempts",
        "password_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "disallow_rules_modification",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("disallow_user_id", "disallowUserId", bool, is_required=True),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "max_failed_login_attempts",
                "maxFailedLoginAttempts",
                int,
                is_required=True,
            ),
            E("password_expires_days", "passwordExpiresDays", int, is_required=True),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E(
                "disallow_rules_modification",
                "disallowRulesModification",
                bool,
                is_required=True,
            ),
        )


class GroupPasswordRulesGetResponse16(OCIResponse):
    """
    Response to ``GroupPasswordRulesGetRequest16()``.

    Contains the password rules applicable to users within the group.

    Attributes:
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
        disallow_previous_passwords: disallowPreviousPasswords
        number_of_previous_passwords: numberOfPreviousPasswords
    """

    __slots__ = [
        "disallow_user_id",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "max_failed_login_attempts",
        "password_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "disallow_rules_modification",
        "disallow_previous_passwords",
        "number_of_previous_passwords",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("disallow_user_id", "disallowUserId", bool, is_required=True),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "max_failed_login_attempts",
                "maxFailedLoginAttempts",
                int,
                is_required=True,
            ),
            E("password_expires_days", "passwordExpiresDays", int, is_required=True),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E(
                "disallow_rules_modification",
                "disallowRulesModification",
                bool,
                is_required=True,
            ),
            E(
                "disallow_previous_passwords",
                "disallowPreviousPasswords",
                bool,
                is_required=True,
            ),
            E(
                "number_of_previous_passwords",
                "numberOfPreviousPasswords",
                int,
                is_required=True,
            ),
        )


class GroupPhoneDirectoryGetListResponse(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id". If extended directory information is requested, the following
    columns are also included: "First Name", "Last Name", "User Id", "Pager", "Title",
    "Time Zone", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country". Replace by: ``GroupPhoneDirectoryGetListResponse17()``

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupPhoneDirectoryGetListResponse17(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest17()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "Is Virtual On-Net User" If extended directory information is
    requested, the following columns are also included: "First Name", "Last Name", "User
    Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1", "Address Line 2",
    "City", "State", "Zip", "Country". Replaced by:
    ``GroupPhoneDirectoryGetListResponse18()``

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupPhoneDirectoryGetListResponse17sp3(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest17sp3()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "IMP Id" and "Is Virtual On-Net User" If extended directory
    information is requested, the following columns are also included: "First Name", "Last
    Name", "User Id", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country". Replaced by:
    ``GroupPhoneDirectoryGetListResponse18()``

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupPhoneDirectoryGetListResponse18(OCIResponse):
    """
    Response to ``GroupPhoneDirectoryGetListRequest18()``.

    Contains a table with a row for each phone number and column headings : "Name",
    "Number", "Extension", "Mobile", "Email Address", "Department", "Hiragana Name",
    "Group Id", "Yahoo Id", "User Id", "IMP Id" and "Is Virtual On-Net User". If extended
    directory information is requested, the following columns are also included: "First
    Name", "Last Name", "Pager", "Title", "Time Zone", "Location", "Address Line 1",
    "Address Line 2", "City", "State", "Zip", "Country".

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupPolicyGetResponse(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest()``.

    Contains the policy settings for the group.

    Attributes:
        calling_plan_access: callingPlanAccess
        extension_access: extensionAccess
        ldap_integration_access: ldapIntegrationAccess
        voice_messaging_access: voiceMessagingAccess
        department_admin_user_access: departmentAdminUserAccess
        user_authentication_access: userAuthenticationAccess
        user_group_directory_access: userGroupDirectoryAccess
        user_profile_access: userProfileAccess
    """

    __slots__ = [
        "calling_plan_access",
        "extension_access",
        "ldap_integration_access",
        "voice_messaging_access",
        "department_admin_user_access",
        "user_authentication_access",
        "user_group_directory_access",
        "user_profile_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("calling_plan_access", "callingPlanAccess", str, is_required=True),
            E("extension_access", "extensionAccess", str, is_required=True),
            E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
            E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
            E(
                "department_admin_user_access",
                "departmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "user_authentication_access",
                "userAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "user_group_directory_access",
                "userGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E("user_profile_access", "userProfileAccess", str, is_required=True),
        )


class GroupPolicyGetResponse14sp1(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest14sp1()``.

    Contains the policy settings for the group.

    Attributes:
        calling_plan_access: callingPlanAccess
        extension_access: extensionAccess
        ldap_integration_access: ldapIntegrationAccess
        voice_messaging_access: voiceMessagingAccess
        department_admin_user_access: departmentAdminUserAccess
        department_admin_trunk_group_access: departmentAdminTrunkGroupAccess
        user_authentication_access: userAuthenticationAccess
        user_group_directory_access: userGroupDirectoryAccess
        user_profile_access: userProfileAccess
    """

    __slots__ = [
        "calling_plan_access",
        "extension_access",
        "ldap_integration_access",
        "voice_messaging_access",
        "department_admin_user_access",
        "department_admin_trunk_group_access",
        "user_authentication_access",
        "user_group_directory_access",
        "user_profile_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("calling_plan_access", "callingPlanAccess", str, is_required=True),
            E("extension_access", "extensionAccess", str, is_required=True),
            E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
            E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
            E(
                "department_admin_user_access",
                "departmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_trunk_group_access",
                "departmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "user_authentication_access",
                "userAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "user_group_directory_access",
                "userGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E("user_profile_access", "userProfileAccess", str, is_required=True),
        )


class GroupPolicyGetResponse14sp4(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest14sp4()``.

    Contains the policy settings for the group.

    Attributes:
        calling_plan_access: callingPlanAccess
        extension_access: extensionAccess
        ldap_integration_access: ldapIntegrationAccess
        voice_messaging_access: voiceMessagingAccess
        department_admin_user_access: departmentAdminUserAccess
        department_admin_trunk_group_access: departmentAdminTrunkGroupAccess
        user_authentication_access: userAuthenticationAccess
        user_group_directory_access: userGroupDirectoryAccess
        user_profile_access: userProfileAccess
        user_enhanced_call_log_access: userEnhancedCallLogAccess
    """

    __slots__ = [
        "calling_plan_access",
        "extension_access",
        "ldap_integration_access",
        "voice_messaging_access",
        "department_admin_user_access",
        "department_admin_trunk_group_access",
        "user_authentication_access",
        "user_group_directory_access",
        "user_profile_access",
        "user_enhanced_call_log_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("calling_plan_access", "callingPlanAccess", str, is_required=True),
            E("extension_access", "extensionAccess", str, is_required=True),
            E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
            E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
            E(
                "department_admin_user_access",
                "departmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_trunk_group_access",
                "departmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "user_authentication_access",
                "userAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "user_group_directory_access",
                "userGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E("user_profile_access", "userProfileAccess", str, is_required=True),
            E(
                "user_enhanced_call_log_access",
                "userEnhancedCallLogAccess",
                str,
                is_required=True,
            ),
        )


class GroupPolicyGetResponse17(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest17()``.

    Contains the policy settings for the group.

    Attributes:
        calling_plan_access: callingPlanAccess
        extension_access: extensionAccess
        ldap_integration_access: ldapIntegrationAccess
        voice_messaging_access: voiceMessagingAccess
        department_admin_user_access: departmentAdminUserAccess
        department_admin_trunk_group_access: departmentAdminTrunkGroupAccess
        department_admin_phone_number_extension_access:
            departmentAdminPhoneNumberExtensionAccess
        department_admin_calling_line_id_number_access:
            departmentAdminCallingLineIdNumberAccess
        user_authentication_access: userAuthenticationAccess
        user_group_directory_access: userGroupDirectoryAccess
        user_profile_access: userProfileAccess
        user_enhanced_call_log_access: userEnhancedCallLogAccess
    """

    __slots__ = [
        "calling_plan_access",
        "extension_access",
        "ldap_integration_access",
        "voice_messaging_access",
        "department_admin_user_access",
        "department_admin_trunk_group_access",
        "department_admin_phone_number_extension_access",
        "department_admin_calling_line_id_number_access",
        "user_authentication_access",
        "user_group_directory_access",
        "user_profile_access",
        "user_enhanced_call_log_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("calling_plan_access", "callingPlanAccess", str, is_required=True),
            E("extension_access", "extensionAccess", str, is_required=True),
            E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
            E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
            E(
                "department_admin_user_access",
                "departmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_trunk_group_access",
                "departmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_phone_number_extension_access",
                "departmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_calling_line_id_number_access",
                "departmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "user_authentication_access",
                "userAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "user_group_directory_access",
                "userGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E("user_profile_access", "userProfileAccess", str, is_required=True),
            E(
                "user_enhanced_call_log_access",
                "userEnhancedCallLogAccess",
                str,
                is_required=True,
            ),
        )


class GroupPolicyGetResponse20(OCIResponse):
    """
    Response to ``GroupPolicyGetRequest20()``.

    Contains the policy settings for the group.

    Attributes:
        calling_plan_access: callingPlanAccess
        extension_access: extensionAccess
        ldap_integration_access: ldapIntegrationAccess
        voice_messaging_access: voiceMessagingAccess
        department_admin_user_access: departmentAdminUserAccess
        department_admin_trunk_group_access: departmentAdminTrunkGroupAccess
        department_admin_phone_number_extension_access:
            departmentAdminPhoneNumberExtensionAccess
        department_admin_calling_line_id_number_access:
            departmentAdminCallingLineIdNumberAccess
        user_authentication_access: userAuthenticationAccess
        user_group_directory_access: userGroupDirectoryAccess
        user_profile_access: userProfileAccess
        user_enhanced_call_log_access: userEnhancedCallLogAccess
        user_auto_attendant_name_dialing_access: userAutoAttendantNameDialingAccess
    """

    __slots__ = [
        "calling_plan_access",
        "extension_access",
        "ldap_integration_access",
        "voice_messaging_access",
        "department_admin_user_access",
        "department_admin_trunk_group_access",
        "department_admin_phone_number_extension_access",
        "department_admin_calling_line_id_number_access",
        "user_authentication_access",
        "user_group_directory_access",
        "user_profile_access",
        "user_enhanced_call_log_access",
        "user_auto_attendant_name_dialing_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("calling_plan_access", "callingPlanAccess", str, is_required=True),
            E("extension_access", "extensionAccess", str, is_required=True),
            E("ldap_integration_access", "ldapIntegrationAccess", str, is_required=True),
            E("voice_messaging_access", "voiceMessagingAccess", str, is_required=True),
            E(
                "department_admin_user_access",
                "departmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_trunk_group_access",
                "departmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_phone_number_extension_access",
                "departmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "department_admin_calling_line_id_number_access",
                "departmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "user_authentication_access",
                "userAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "user_group_directory_access",
                "userGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E("user_profile_access", "userProfileAccess", str, is_required=True),
            E(
                "user_enhanced_call_log_access",
                "userEnhancedCallLogAccess",
                str,
                is_required=True,
            ),
            E(
                "user_auto_attendant_name_dialing_access",
                "userAutoAttendantNameDialingAccess",
                str,
                is_required=True,
            ),
        )


class GroupPolycomPhoneServicesGetResponse(OCIResponse):
    """
    Response to ``GroupPolycomPhoneServicesGetRequest()``.


    Attributes:
        include_group_common_phone_list_in_directory:
            includeGroupCommonPhoneListInDirectory
        include_group_custom_contact_directory_in_directory:
            includeGroupCustomContactDirectoryInDirectory
        group_custom_contact_directory: groupCustomContactDirectory
    """

    __slots__ = [
        "include_group_common_phone_list_in_directory",
        "include_group_custom_contact_directory_in_directory",
        "group_custom_contact_directory",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "include_group_common_phone_list_in_directory",
                "includeGroupCommonPhoneListInDirectory",
                bool,
                is_required=True,
            ),
            E(
                "include_group_custom_contact_directory_in_directory",
                "includeGroupCustomContactDirectoryInDirectory",
                bool,
                is_required=True,
            ),
            E("group_custom_contact_directory", "groupCustomContactDirectory", str),
        )


class GroupPortalPasscodeRulesGetResponse(OCIResponse):
    """
    Response to ``GroupPortalPasscodeRulesGetRequest()``.

    Contains the group's passcode rules setting.

    Attributes:
        use_rule_level: useRuleLevel
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    __slots__ = [
        "use_rule_level",
        "disallow_repeated_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_rule_level", "useRuleLevel", str, is_required=True),
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


class GroupPortalPasscodeRulesGetResponse19(OCIResponse):
    """
    Response to ``GroupPortalPasscodeRulesGetRequest19()``.

    Contains the group's passcode rules setting.  The following elements are only used in
    AS data mode: numberOfRepeatedDigits disallowRepeatedPatterns
    disallowContiguousSequences numberOfAscendingDigits numberOfDescendingDigits
    numberOfPreviousPasscodes

    Attributes:
        use_rule_level: useRuleLevel
        disallow_repeated_digits: disallowRepeatedDigits
        number_of_repeated_digits: numberOfRepeatedDigits
        disallow_repeated_patterns: disallowRepeatedPatterns
        disallow_contiguous_sequences: disallowContiguousSequences
        number_of_ascending_digits: numberOfAscendingDigits
        number_of_descending_digits: numberOfDescendingDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        number_of_previous_passcodes: numberOfPreviousPasscodes
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    __slots__ = [
        "use_rule_level",
        "disallow_repeated_digits",
        "number_of_repeated_digits",
        "disallow_repeated_patterns",
        "disallow_contiguous_sequences",
        "number_of_ascending_digits",
        "number_of_descending_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "number_of_previous_passcodes",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_rule_level", "useRuleLevel", str, is_required=True),
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E(
                "number_of_repeated_digits",
                "numberOfRepeatedDigits",
                int,
                is_required=True,
            ),
            E(
                "disallow_repeated_patterns",
                "disallowRepeatedPatterns",
                bool,
                is_required=True,
            ),
            E(
                "disallow_contiguous_sequences",
                "disallowContiguousSequences",
                bool,
                is_required=True,
            ),
            E(
                "number_of_ascending_digits",
                "numberOfAscendingDigits",
                int,
                is_required=True,
            ),
            E(
                "number_of_descending_digits",
                "numberOfDescendingDigits",
                int,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "number_of_previous_passcodes",
                "numberOfPreviousPasscodes",
                int,
                is_required=True,
            ),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


class GroupPreAlertingAnnouncementGetResponse(OCIResponse):
    """
    Get the group level pre-alerting service settings.

    The response is either a ``GroupPreAlertingAnnouncementGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        announcement_interruption: announcementInterruption
        interruption_digit_sequence: interruptionDigitSequence
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        video_file_url: videoFileUrl
    """

    __slots__ = [
        "announcement_interruption",
        "interruption_digit_sequence",
        "audio_selection",
        "audio_file_description",
        "audio_media_type",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_media_type",
        "video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_interruption",
                "announcementInterruption",
                str,
                is_required=True,
            ),
            E("interruption_digit_sequence", "interruptionDigitSequence", str),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("video_file_url", "videoFileUrl", str),
        )


class GroupRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse(OCIResponse):
    """
    Response to ``GroupRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest()``.

    Contains a list of number ranges that are assigned to a group and still available for
    assignment to users within the group.  The column headings are "Number Range Start",
    "Number Range End" and "Is Active".

    Attributes:
        available_number_range_table: availableNumberRangeTable
    """

    __slots__ = [
        "available_number_range_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_number_range_table",
                "availableNumberRangeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to ``GroupRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The response contains a table with columns: "Number Range Start", "Number Range End",
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address", "Enterprise Trunk" and "Is
    Active". The "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department" and "Email Address" columns
    contains the corresponding attributes of the user possessing the number range.  The
    "Enterprise Trunk" column contains the enterprise trunk the user possessing the number
    range belongs to.  The "Is Active" column indicates if the number range has been
    activated.

    Attributes:
        number_range_summary_table: numberRangeSummaryTable
    """

    __slots__ = [
        "number_range_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "number_range_summary_table",
                "numberRangeSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRoutePointBouncedCallGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointBouncedCallGetRequest()``.


    Attributes:
        is_active: isActive
        number_of_rings_before_bouncing_call: numberOfRingsBeforeBouncingCall
        enable_transfer: enableTransfer
        transfer_phone_number: transferPhoneNumber
        bounce_call_when_agent_unavailable: bounceCallWhenAgentUnavailable
    """

    __slots__ = [
        "is_active",
        "number_of_rings_before_bouncing_call",
        "enable_transfer",
        "transfer_phone_number",
        "bounce_call_when_agent_unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "number_of_rings_before_bouncing_call",
                "numberOfRingsBeforeBouncingCall",
                int,
                is_required=True,
            ),
            E("enable_transfer", "enableTransfer", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "bounce_call_when_agent_unavailable",
                "bounceCallWhenAgentUnavailable",
                bool,
                is_required=True,
            ),
        )


class GroupRoutePointDistinctiveRingingGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointDistinctiveRingingGetRequest()``.


    Attributes:
        enable_distinctive_ringing: enableDistinctiveRinging
        distinctive_ringing_ring_pattern: distinctiveRingingRingPattern
        distinctive_ringing_force_delivery_ring_pattern:
            distinctiveRingingForceDeliveryRingPattern
    """

    __slots__ = [
        "enable_distinctive_ringing",
        "distinctive_ringing_ring_pattern",
        "distinctive_ringing_force_delivery_ring_pattern",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_distinctive_ringing",
                "enableDistinctiveRinging",
                bool,
                is_required=True,
            ),
            E(
                "distinctive_ringing_ring_pattern",
                "distinctiveRingingRingPattern",
                str,
                is_required=True,
            ),
            E(
                "distinctive_ringing_force_delivery_ring_pattern",
                "distinctiveRingingForceDeliveryRingPattern",
                str,
                is_required=True,
            ),
        )


class GroupRoutePointExternalSystemGetAssignedListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointExternalSystemGetAssignedListRequest()``.

    Contains a table of all Route Point External Systems assigned to the group.  The
    column headings are: "Name" and "Description".

    Attributes:
        external_system_table: externalSystemTable
    """

    __slots__ = [
        "external_system_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "external_system_table",
                "externalSystemTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRoutePointExternalSystemGetAssignedRoutePointListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointExternalSystemGetAssignedRoutePointListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department". The column values for "Video" can either be
    "true", or "false".

    Attributes:
        route_point_table: routePointTable
    """

    __slots__ = [
        "route_point_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "route_point_table",
                "routePointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRoutePointGetDNISAgentListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        agent_table: agentTable
    """

    __slots__ = [
        "agent_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_table",
                "agentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRoutePointGetDNISListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISListRequest()``.

    Contains a table with column headings: "Name", "Phone Number", "Extension".

    Attributes:
        display_dnis_number: displayDNISNumber
        display_dnis_name: displayDNISName
        dnis_table: dnisTable
    """

    __slots__ = [
        "display_dnis_number",
        "display_dnis_name",
        "dnis_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("display_dnis_number", "displayDNISNumber", bool, is_required=True),
            E("display_dnis_name", "displayDNISName", bool, is_required=True),
            E(
                "dnis_table",
                "dnisTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRoutePointGetDNISResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISRequest()``.


    Attributes:
        dnis_phone_number: dnisPhoneNumber
        extension: extension
        use_custom_clid_settings: useCustomCLIDSettings
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        use_custom_dnis_announcement_settings: useCustomDnisAnnouncementSettings
        allow_outgoing_acd_call: allowOutgoingACDCall
    """

    __slots__ = [
        "dnis_phone_number",
        "extension",
        "use_custom_clid_settings",
        "calling_line_id_phone_number",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "use_custom_dnis_announcement_settings",
        "allow_outgoing_acd_call",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_phone_number", "dnisPhoneNumber", str),
            E("extension", "extension", str),
            E(
                "use_custom_clid_settings",
                "useCustomCLIDSettings",
                bool,
                is_required=True,
            ),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E(
                "use_custom_dnis_announcement_settings",
                "useCustomDnisAnnouncementSettings",
                bool,
                is_required=True,
            ),
            E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool, is_required=True),
        )


class GroupRoutePointGetFailoverPolicyResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetFailoverPolicyRequest()``.


    Attributes:
        enable_failover_support: enableFailoverSupport
        external_system: externalSystem
        failover_phone_number: failoverPhoneNumber
        failover_status: failoverStatus
        per_call_enable_failover_support: perCallEnableFailoverSupport
        per_call_call_failure_timeout_seconds: perCallCallFailureTimeoutSeconds
        per_call_outbound_call_failure_timeout_seconds:
            perCallOutboundCallFailureTimeoutSeconds
        per_call_failover_phone_number: perCallFailoverPhoneNumber
    """

    __slots__ = [
        "enable_failover_support",
        "external_system",
        "failover_phone_number",
        "failover_status",
        "per_call_enable_failover_support",
        "per_call_call_failure_timeout_seconds",
        "per_call_outbound_call_failure_timeout_seconds",
        "per_call_failover_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_failover_support",
                "enableFailoverSupport",
                bool,
                is_required=True,
            ),
            E("external_system", "externalSystem", str),
            E("failover_phone_number", "failoverPhoneNumber", str),
            E("failover_status", "failoverStatus", str, is_required=True),
            E(
                "per_call_enable_failover_support",
                "perCallEnableFailoverSupport",
                bool,
                is_required=True,
            ),
            E(
                "per_call_call_failure_timeout_seconds",
                "perCallCallFailureTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "per_call_outbound_call_failure_timeout_seconds",
                "perCallOutboundCallFailureTimeoutSeconds",
                int,
                is_required=True,
            ),
            E("per_call_failover_phone_number", "perCallFailoverPhoneNumber", str),
        )


class GroupRoutePointGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Video", "Phone
    Number", "Extension", "Department", "Is Active". The column values for "Video" and "Is
    Active" can either be true, or false.

    Attributes:
        route_point_table: routePointTable
    """

    __slots__ = [
        "route_point_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "route_point_table",
                "routePointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRoutePointQueueCallDispositionCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointQueueCallDispositionCodeGetListRequest()``.

    Contains a table with column headings: "Is Active", "Code", "Description" and "Level".
    Level column can be any of the values in the data type CallDispositionCodeLevel.

    Attributes:
        disposition_codes_table: dispositionCodesTable
    """

    __slots__ = [
        "disposition_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disposition_codes_table",
                "dispositionCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupRoutePointQueueCallDispositionCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointQueueCallDispositionCodeGetRequest()``

    Attributes:
        is_active: isActive
        description: description
    """

    __slots__ = [
        "is_active",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


class GroupRoutingProfileGetResponse(OCIResponse):
    """
    Response to ``GroupRoutingProfileGetRequest()``.


    Attributes:
        routing_profile: routingProfile
    """

    __slots__ = [
        "routing_profile",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("routing_profile", "routingProfile", str),
        )


class GroupScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``GroupScheduleGetEventListRequest()``.

    The response contains a list of events.

    Attributes:
        event_name: eventName
    """

    __slots__ = [
        "event_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("event_name", "eventName", str, is_array=True),
        )


class GroupScheduleGetListResponse(OCIResponse):
    """
    Response to ``GroupScheduleGetListRequest()``.

    The response contains a list of system schedules.

    Attributes:
        schedule_name: scheduleName
        schedule_type: scheduleType
        schedule_level: scheduleLevel
    """

    __slots__ = [
        "schedule_name",
        "schedule_type",
        "schedule_level",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_name", "scheduleName", str, is_array=True),
            E("schedule_type", "scheduleType", str, is_array=True),
            E("schedule_level", "scheduleLevel", str, is_array=True),
        )


class GroupSeriesCompletionGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``GroupSeriesCompletionGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupSeriesCompletionGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupSeriesCompletionGetInstanceListRequest()``.


    Attributes:
        name: name
    """

    __slots__ = [
        "name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_array=True),
        )


class GroupSeriesCompletionGetInstanceResponse(OCIResponse):
    """
    Response to the ``GroupSeriesCompletionGetInstanceRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupServiceGetAuthorizationListResponse(OCIResponse):
    """
    Response to ``GroupServiceGetAuthorizationListRequest()``.

    Contains three tables, one for the service packs, one for the group services, and one
    for the user services.  The user table has the following column headings: "Service
    Name", "Authorized", "Assigned", "Limited", "Quantity", "Usage", "Licensed",
    "Allowed", "User Assignable", "Group Service Assignable". The group service table has
    the following column headings: "Service Name", "Authorized", "Assigned", "Limited",
    "Quantity", "Usage", "Licensed", "Allowed". The service pack table's column headings
    are: "Service Pack Name", "Authorized", "Assigned", "Limited", "Allocated", "Allowed",
    "Usage", "Description".

    Attributes:
        service_packs_authorization_table: servicePacksAuthorizationTable
        group_services_authorization_table: groupServicesAuthorizationTable
        user_services_authorization_table: userServicesAuthorizationTable
    """

    __slots__ = [
        "service_packs_authorization_table",
        "group_services_authorization_table",
        "user_services_authorization_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_packs_authorization_table",
                "servicePacksAuthorizationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "group_services_authorization_table",
                "groupServicesAuthorizationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "user_services_authorization_table",
                "userServicesAuthorizationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupServiceGetAuthorizedListResponse(OCIResponse):
    """
    Response to ``GroupServiceGetAuthorizedListRequest()``.


    Attributes:
        service_pack_name: servicePackName
        group_service_name: groupServiceName
        user_service_name: userServiceName
    """

    __slots__ = [
        "service_pack_name",
        "group_service_name",
        "user_service_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_pack_name", "servicePackName", str, is_array=True),
            E("group_service_name", "groupServiceName", str, is_array=True),
            E("user_service_name", "userServiceName", str, is_array=True),
        )


class GroupServiceInstancePrivacyGetResponse(OCIResponse):
    """
    Response to ``GroupServiceInstancePrivacyGetRequest()``.

    Replaced by: ``GroupServiceInstancePrivacyGetResponse17sp4()``

    Attributes:
        enable_directory_privacy: enableDirectoryPrivacy
        enable_auto_attendant_extension_dialing_privacy:
            enableAutoAttendantExtensionDialingPrivacy
    """

    __slots__ = [
        "enable_directory_privacy",
        "enable_auto_attendant_extension_dialing_privacy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_directory_privacy",
                "enableDirectoryPrivacy",
                bool,
                is_required=True,
            ),
            E(
                "enable_auto_attendant_extension_dialing_privacy",
                "enableAutoAttendantExtensionDialingPrivacy",
                bool,
                is_required=True,
            ),
        )


class GroupServiceInstancePrivacyGetResponse17sp4(OCIResponse):
    """
    Response to ``GroupServiceInstancePrivacyGetRequest17sp4()``.


    Attributes:
        enable_directory_privacy: enableDirectoryPrivacy
        enable_auto_attendant_extension_dialing_privacy:
            enableAutoAttendantExtensionDialingPrivacy
        enable_auto_attendant_name_dialing_privacy: enableAutoAttendantNameDialingPrivacy
    """

    __slots__ = [
        "enable_directory_privacy",
        "enable_auto_attendant_extension_dialing_privacy",
        "enable_auto_attendant_name_dialing_privacy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_directory_privacy",
                "enableDirectoryPrivacy",
                bool,
                is_required=True,
            ),
            E(
                "enable_auto_attendant_extension_dialing_privacy",
                "enableAutoAttendantExtensionDialingPrivacy",
                bool,
                is_required=True,
            ),
            E(
                "enable_auto_attendant_name_dialing_privacy",
                "enableAutoAttendantNameDialingPrivacy",
                bool,
                is_required=True,
            ),
        )


class GroupServiceIsAssignedResponse(OCIResponse):
    """
    Returns true if the GroupService is assigned, otherwise false.


    Attributes:
        is_assigned: isAssigned
    """

    __slots__ = [
        "is_assigned",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_assigned", "isAssigned", bool, is_required=True),
        )


class GroupServicePhoneNumberLookupResponse(OCIResponse):
    """
    Response to the ``GroupServicePhoneNumberLookupRequest()``.

    The column headings for the userTable are: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension" and
    "Department".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupServiceScriptsGroupGetLogResponse(OCIResponse):
    """
    Response to ``GroupServiceScriptsGroupGetLogRequest()``.


    Attributes:
        log_content: logContent
    """

    __slots__ = [
        "log_content",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("log_content", "logContent", str),
        )


class GroupServiceScriptsGroupGetResponse(OCIResponse):
    """
    Response to ``GroupServiceScriptsGroupGetRequest()``.


    Attributes:
        is_active: isActive
        script_name: scriptName
        script_content: scriptContent
    """

    __slots__ = [
        "is_active",
        "script_name",
        "script_content",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("script_name", "scriptName", str),
            E("script_content", "scriptContent", str),
        )


class GroupSessionAdmissionControlGetResponse(OCIResponse):
    """
    Response to the ``GroupSessionAdmissionControlGetRequest()``.

    The response contains the session admission control capacity allocated for the group.

    Attributes:
        restrict_aggregate_sessions: restrictAggregateSessions
        max_sessions: maxSessions
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        count_intra_group_sessions: countIntraGroupSessions
    """

    __slots__ = [
        "restrict_aggregate_sessions",
        "max_sessions",
        "max_user_originating_sessions",
        "max_user_terminating_sessions",
        "count_intra_group_sessions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "restrict_aggregate_sessions",
                "restrictAggregateSessions",
                bool,
                is_required=True,
            ),
            E("max_sessions", "maxSessions", int),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E(
                "count_intra_group_sessions",
                "countIntraGroupSessions",
                bool,
                is_required=True,
            ),
        )


class GroupSessionAdmissionControlGroupGetListResponse(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGroupGetListRequest()``.

    Contains a table of session admission control group configured in the group.  The
    column headings are: "Name", "Is Default", "Maximum Sessions", "Maximum Originating
    Sessions", "Maximum Terminating Sessions".

    Attributes:
        session_admission_control_group_table: sessionAdmissionControlGroupTable
    """

    __slots__ = [
        "session_admission_control_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "session_admission_control_group_table",
                "sessionAdmissionControlGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupSpeedDial100GetResponse(OCIResponse):
    """
    Response to the ``GroupSpeedDial100GetRequest()``.


    Attributes:
        prefix: prefix
    """

    __slots__ = [
        "prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix", "prefix", str, is_required=True),
        )


class GroupSpeedDial100GetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupSpeedDial100GetRequest17sp1()``.


    Attributes:
        prefix: prefix
    """

    __slots__ = [
        "prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix", "prefix", str),
        )


class GroupThirdPartyVoiceMailSupportGetResponse(OCIResponse):
    """
    Response to ``GroupThirdPartyVoiceMailSupportGetRequest()``.


    Attributes:
        is_active: isActive
        group_server: groupServer
    """

    __slots__ = [
        "is_active",
        "group_server",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("group_server", "groupServer", str),
        )


class GroupTimeScheduleGetListResponse(OCIResponse):
    """
    Response to the ``GroupTimeScheduleGetListRequest()``.

    The response contains all the group's time schedule name.

    Attributes:
        time_schedule: timeSchedule
    """

    __slots__ = [
        "time_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", str, is_array=True),
        )


class GroupTrunkGroupGetAvailableDetailListResponse(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetAvailableDetailListRequest()``.


    Attributes:
        trunk_group: trunkGroup
    """

    __slots__ = [
        "trunk_group",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group",
                "trunkGroup",
                str,
                is_complex=True,
                is_array=True,
            ),  # unknown
        )


class GroupTrunkGroupGetAvailableHostedUserListResponse(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetAvailableHostedUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupGetInstanceListResponse14(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceListRequest14()``.

    Contains a table with column headings "Service User Id", "Name", "Department", "Device
    Name", "Device Level", "Group Id". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.

    Attributes:
        trunk_group_table: trunkGroupTable
    """

    __slots__ = [
        "trunk_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_table",
                "trunkGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupGetInstanceListResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceListRequest14sp4()``.

    Contains a table with column headings "Name", "Department", "Device Name", "Device
    Level", "Group Id". The "Device Level" column contains one of the AccessDeviceLevel
    enumerated constants.

    Attributes:
        trunk_group_table: trunkGroupTable
    """

    __slots__ = [
        "trunk_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_table",
                "trunkGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupGetInstanceUserListResponse(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceUserListRequest()``.

    The response contains a 7 column table with column headings "User Id", "Last Name",
    "First Name", "Department", "Phone Number", "Hiragana Last Name", "Hiragana First
    Name".

    Attributes:
        trunk_group_user_table: trunkGroupUserTable
    """

    __slots__ = [
        "trunk_group_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_user_table",
                "trunkGroupUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupGetInstanceUserListResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceUserListRequest14sp4()``.

    The response contains a 9 column table with column headings "User Id", "Last Name",
    "First Name", "Department", "Phone Number", "Hiragana Last Name", "Hiragana First
    Name", "Extension", "Email Address".

    Attributes:
        trunk_group_user_table: trunkGroupUserTable
    """

    __slots__ = [
        "trunk_group_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_user_table",
                "trunkGroupUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupSecurityClassificationGetResponse(OCIResponse):
    """
    Response to the ``GroupTrunkGroupSecurityClassificationGetRequest()``.


    Attributes:
        default_security_classification: defaultSecurityClassification
    """

    __slots__ = [
        "default_security_classification",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_security_classification", "defaultSecurityClassification", str),
        )


class GroupTrunkGroupUserCreationTaskGetListResponse(OCIResponse):
    """
    Response to ``GroupTrunkGroupUserCreationTaskGetListRequest()``.

    Contains a table with a row for each user creation task and column headings : "Name",
    "Status", "Users Created", "Total Users To Create", "Error Count".

    Attributes:
        task_table: taskTable
    """

    __slots__ = [
        "task_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "task_table",
                "taskTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupUserCreationTaskGetListResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupUserCreationTaskGetListRequest14sp4()``.

    Contains a table with a row for each user creation task and column headings : "Name",
    "Status", "Users Created", "Total Users To Create", "Error Count".

    Attributes:
        task_table: taskTable
    """

    __slots__ = [
        "task_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "task_table",
                "taskTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupUserCreationTaskGetResponse(OCIResponse):
    """
    Response to a ``GroupTrunkGroupUserCreationTaskGetRequest()``.


    Attributes:
        user_id_format: userIdFormat
        user_id_domain: userIdDomain
        populate_extension: populateExtension
        line_port_format: linePortFormat
        line_port_domain: linePortDomain
        populate_contact: populateContact
        contact_format: contactFormat
        contact_domain: contactDomain
        users_created: usersCreated
        total_users_to_create: totalUsersToCreate
        error_count: errorCount
        service_pack_name: servicePackName
        user_service_name: userServiceName
        status: status
        user_creation_mode: userCreationMode
        task_summary: taskSummary
    """

    __slots__ = [
        "user_id_format",
        "user_id_domain",
        "populate_extension",
        "line_port_format",
        "line_port_domain",
        "populate_contact",
        "contact_format",
        "contact_domain",
        "users_created",
        "total_users_to_create",
        "error_count",
        "service_pack_name",
        "user_service_name",
        "status",
        "user_creation_mode",
        "task_summary",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id_format", "userIdFormat", str, is_required=True),
            E("user_id_domain", "userIdDomain", str, is_required=True),
            E("populate_extension", "populateExtension", bool, is_required=True),
            E("line_port_format", "linePortFormat", str, is_required=True),
            E("line_port_domain", "linePortDomain", str, is_required=True),
            E("populate_contact", "populateContact", bool, is_required=True),
            E("contact_format", "contactFormat", str),
            E("contact_domain", "contactDomain", str),
            E("users_created", "usersCreated", int, is_required=True),
            E("total_users_to_create", "totalUsersToCreate", int, is_required=True),
            E("error_count", "errorCount", int, is_required=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
            E("user_service_name", "userServiceName", str, is_array=True),
            E("status", "status", str, is_required=True),
            E("user_creation_mode", "userCreationMode", str, is_required=True),
            E("task_summary", "taskSummary", str, is_required=True),
        )


class GroupTrunkGroupUserCreationTaskGetResponse14sp4(OCIResponse):
    """
    Response to a ``GroupTrunkGroupUserCreationTaskGetRequest14sp4()``.


    Attributes:
        user_id_format: userIdFormat
        user_id_domain: userIdDomain
        populate_extension: populateExtension
        line_port_format: linePortFormat
        line_port_domain: linePortDomain
        populate_contact: populateContact
        contact_format: contactFormat
        contact_domain: contactDomain
        users_created: usersCreated
        total_users_to_create: totalUsersToCreate
        error_count: errorCount
        service_pack_name: servicePackName
        user_service_name: userServiceName
        status: status
        user_creation_mode: userCreationMode
        task_summary: taskSummary
        report_file_key: reportFileKey
    """

    __slots__ = [
        "user_id_format",
        "user_id_domain",
        "populate_extension",
        "line_port_format",
        "line_port_domain",
        "populate_contact",
        "contact_format",
        "contact_domain",
        "users_created",
        "total_users_to_create",
        "error_count",
        "service_pack_name",
        "user_service_name",
        "status",
        "user_creation_mode",
        "task_summary",
        "report_file_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id_format", "userIdFormat", str, is_required=True),
            E("user_id_domain", "userIdDomain", str, is_required=True),
            E("populate_extension", "populateExtension", bool, is_required=True),
            E("line_port_format", "linePortFormat", str, is_required=True),
            E("line_port_domain", "linePortDomain", str, is_required=True),
            E("populate_contact", "populateContact", bool, is_required=True),
            E("contact_format", "contactFormat", str),
            E("contact_domain", "contactDomain", str),
            E("users_created", "usersCreated", int, is_required=True),
            E("total_users_to_create", "totalUsersToCreate", int, is_required=True),
            E("error_count", "errorCount", int, is_required=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
            E("user_service_name", "userServiceName", str, is_array=True),
            E("status", "status", str, is_required=True),
            E("user_creation_mode", "userCreationMode", str, is_required=True),
            E("task_summary", "taskSummary", str, is_required=True),
            E("report_file_key", "reportFileKey", str, is_required=True),
        )


class GroupVirtualOnNetEnterpriseExtensionsGetUserListResponse(OCIResponse):
    """
    Response to ``GroupVirtualOnNetEnterpriseExtensionsGetUserListRequest()``.

    Contains a table with column headings: "Last Name", "First Name", "Phone Number",
    "Extension", "Virtual On-Net Call Type Name" in a row for each user.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupVirtualOnNetEnterpriseExtensionsGetUserResponse(OCIResponse):
    """
    Response to ``GroupVirtualOnNetEnterpriseExtensionsGetUserRequest()``.


    Attributes:
        extension: extension
        first_name: firstName
        last_name: lastName
        calling_line_id_first_name: callingLineIdFirstName
        calling_line_id_last_name: callingLineIdLastName
        virtual_on_net_call_type_name: virtualOnNetCallTypeName
    """

    __slots__ = [
        "extension",
        "first_name",
        "last_name",
        "calling_line_id_first_name",
        "calling_line_id_last_name",
        "virtual_on_net_call_type_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("extension", "extension", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "virtual_on_net_call_type_name",
                "virtualOnNetCallTypeName",
                str,
                is_required=True,
            ),
        )


class GroupVoiceMessagingGroupGetPasscodeRulesResponse(OCIResponse):
    """
    Response to ``GroupVoiceMessagingGroupGetPasscodeRulesRequest()``.

    Contains the group's voice portal passcode rules setting.

    Replaced By: ``GroupPortalPasscodeRulesGetResponse()``

    Attributes:
        use_rule_level: useRuleLevel
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    __slots__ = [
        "use_rule_level",
        "disallow_repeated_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_rule_level", "useRuleLevel", str, is_required=True),
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


class GroupVoiceMessagingGroupGetResponse(OCIResponse):
    """
    Response to ``GroupVoiceMessagingGroupGetRequest()``.

    Contains the group's voice messaging settings.

    Attributes:
        use_mail_server_setting: useMailServerSetting
        warn_caller_before_recording_voice_message: warnCallerBeforeRecordingVoiceMessage
        allow_users_configuring_advanced_settings: allowUsersConfiguringAdvancedSettings
        allow_compose_or_forward_message_to_entire_group:
            allowComposeOrForwardMessageToEntireGroup
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        real_delete_for_imap: realDeleteForImap
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
    """

    __slots__ = [
        "use_mail_server_setting",
        "warn_caller_before_recording_voice_message",
        "allow_users_configuring_advanced_settings",
        "allow_compose_or_forward_message_to_entire_group",
        "mail_server_net_address",
        "mail_server_protocol",
        "real_delete_for_imap",
        "max_mailbox_length_minutes",
        "does_message_age",
        "hold_period_days",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_mail_server_setting", "useMailServerSetting", str, is_required=True),
            E(
                "warn_caller_before_recording_voice_message",
                "warnCallerBeforeRecordingVoiceMessage",
                bool,
                is_required=True,
            ),
            E(
                "allow_users_configuring_advanced_settings",
                "allowUsersConfiguringAdvancedSettings",
                bool,
                is_required=True,
            ),
            E(
                "allow_compose_or_forward_message_to_entire_group",
                "allowComposeOrForwardMessageToEntireGroup",
                bool,
                is_required=True,
            ),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
            E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
            E(
                "max_mailbox_length_minutes",
                "maxMailboxLengthMinutes",
                int,
                is_required=True,
            ),
            E("does_message_age", "doesMessageAge", bool, is_required=True),
            E("hold_period_days", "holdPeriodDays", int, is_required=True),
        )


class GroupVoiceMessagingGroupGetVoicePortalBrandingResponse(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalBrandingRequest()``.

    Replaced By: ``GroupVoiceMessagingGroupGetVoicePortalBrandingResponse16()``

    Attributes:
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file_description: voicePortalGreetingFileDescription
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file_description: voiceMessagingGreetingFileDescription
    """

    __slots__ = [
        "voice_portal_greeting_selection",
        "voice_portal_greeting_file_description",
        "voice_messaging_greeting_selection",
        "voice_messaging_greeting_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "voice_portal_greeting_selection",
                "voicePortalGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_portal_greeting_file_description",
                "voicePortalGreetingFileDescription",
                str,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_messaging_greeting_file_description",
                "voiceMessagingGreetingFileDescription",
                str,
            ),
        )


class GroupVoiceMessagingGroupGetVoicePortalBrandingResponse16(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalBrandingRequest16()``.


    Attributes:
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file_description: voicePortalGreetingFileDescription
        voice_portal_greeting_media_type: voicePortalGreetingMediaType
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file_description: voiceMessagingGreetingFileDescription
        voice_messaging_greeting_media_type: voiceMessagingGreetingMediaType
    """

    __slots__ = [
        "voice_portal_greeting_selection",
        "voice_portal_greeting_file_description",
        "voice_portal_greeting_media_type",
        "voice_messaging_greeting_selection",
        "voice_messaging_greeting_file_description",
        "voice_messaging_greeting_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "voice_portal_greeting_selection",
                "voicePortalGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_portal_greeting_file_description",
                "voicePortalGreetingFileDescription",
                str,
            ),
            E("voice_portal_greeting_media_type", "voicePortalGreetingMediaType", str),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_messaging_greeting_file_description",
                "voiceMessagingGreetingFileDescription",
                str,
            ),
            E(
                "voice_messaging_greeting_media_type",
                "voiceMessagingGreetingMediaType",
                str,
            ),
        )


class GroupVoiceXmlGetInstanceListResponse(OCIResponse):
    """
    Response to the ``GroupVoiceXmlGetInstanceListRequest()``.

    Contains a table with column headings: "Service User Id", "Name", "Phone Number",
    "Extension", "Department", "Is Active". The column values for "Is Active" can either
    be true, or false.

    Attributes:
        voice_xml_table: voiceXmlTable
    """

    __slots__ = [
        "voice_xml_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "voice_xml_table",
                "voiceXmlTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class LoginResponse13mp10(OCIResponse):
    """
    ``LoginRequest13mp10()``/Response13mp10 is 2nd stage of the 2 stage OCI login process.


    Attributes:
        login_type: loginType
        locale: locale
        encoding: encoding
    """

    __slots__ = [
        "login_type",
        "locale",
        "encoding",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("login_type", "loginType", str, is_required=True),
            E("locale", "locale", str, is_required=True),
            E("encoding", "encoding", str, is_required=True),
        )


class LoginResponse14sp4(OCIResponse):
    """
    ``LoginRequest14sp4()``/Response14sp4 is 2nd stage of the 2 stage OCI login process.


    Attributes:
        login_type: loginType
        locale: locale
        encoding: encoding
        group_id: groupId
        service_provider_id: serviceProviderId
        is_enterprise: isEnterprise
        password_expires_days: passwordExpiresDays
        user_domain: userDomain
    """

    __slots__ = [
        "login_type",
        "locale",
        "encoding",
        "group_id",
        "service_provider_id",
        "is_enterprise",
        "password_expires_days",
        "user_domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("login_type", "loginType", str, is_required=True),
            E("locale", "locale", str, is_required=True),
            E("encoding", "encoding", str, is_required=True),
            E("group_id", "groupId", str),
            E("service_provider_id", "serviceProviderId", str),
            E("is_enterprise", "isEnterprise", bool, is_required=True),
            E("password_expires_days", "passwordExpiresDays", int),
            E("user_domain", "userDomain", str, is_required=True),
        )


class PrimaryInfoGetResponse(OCIResponse):
    """
    Information about the primary server in the high-availablity cluster.

    For optimization, we only get the hostname and addresses for primary if they are
    explicitly requested or if the current server is not the primary.

    Attributes:
        is_primary: isPrimary
        hostname_for_primary: hostnameForPrimary
        address_for_primary: addressForPrimary
        private_address_for_primary: privateAddressForPrimary
    """

    __slots__ = [
        "is_primary",
        "hostname_for_primary",
        "address_for_primary",
        "private_address_for_primary",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_primary", "isPrimary", bool, is_required=True),
            E("hostname_for_primary", "hostnameForPrimary", str),
            E("address_for_primary", "addressForPrimary", str, is_array=True),
            E(
                "private_address_for_primary",
                "privateAddressForPrimary",
                str,
                is_array=True,
            ),
        )


class PublicClusterGetFullyQualifiedDomainNameResponse(OCIResponse):
    """
    Response to ``PublicClusterGetFullyQualifiedDomainNameRequest()``.


    Attributes:
        public_cluster_fqdn: publicClusterFQDN
    """

    __slots__ = [
        "public_cluster_fqdn",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("public_cluster_fqdn", "publicClusterFQDN", str),
        )


class ServiceProviderAccessDeviceCustomTagGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device profile basis.  The column headings are: "Tag Name", "Tag Value"

    Attributes:
        device_custom_tags_table: deviceCustomTagsTable
    """

    __slots__ = [
        "device_custom_tags_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_custom_tags_table",
                "deviceCustomTagsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``ServiceProviderAccessDeviceFileGetListResponse14sp8()``

    Attributes:
        device_files_table: deviceFilesTable
    """

    __slots__ = [
        "device_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_files_table",
                "deviceFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderAccessDeviceFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL", "Extended Capture". The following
    columns are only used in AS data mode: "Extended Capture"

    Attributes:
        device_files_table: deviceFilesTable
    """

    __slots__ = [
        "device_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_files_table",
                "deviceFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest()``.

    Replaced By: ``ServiceProviderAccessDeviceFileGetResponse14sp8()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
        )


class ServiceProviderAccessDeviceFileGetResponse14sp8(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest14sp8()``.

    Replaced by: ``ServiceProviderAccessDeviceFileGetResponse16sp1()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
        )


class ServiceProviderAccessDeviceFileGetResponse16sp1(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest16sp1()``.


    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "access_url",
        "repository_url",
        "template_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
        )


class ServiceProviderAccessDeviceFileGetResponse20(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceFileGetRequest20()``.


    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
        extended_capture_enabled: extendedCaptureEnabled
        extended_capture_url: extendedCaptureURL
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "access_url",
        "repository_url",
        "template_url",
        "extended_capture_enabled",
        "extended_capture_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
            E("extended_capture_enabled", "extendedCaptureEnabled", bool),
            E("extended_capture_url", "extendedCaptureURL", str),
        )


class ServiceProviderAccessDeviceGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetListRequest()``.

    Contains a table of devices configured in the service provider.  The column headings
    are: "Device Name", "Device Type", "Available Ports", "Net Address", "MAC Address",
    "Status", and "Version".

    Attributes:
        access_device_table: accessDeviceTable
    """

    __slots__ = [
        "access_device_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_device_table",
                "accessDeviceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderAccessDeviceGetUserListResponse(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetUserListRequest()``.

    The column headings for the deviceUserTable are: "Line/Port", "Last Name", "First
    Name", "Phone Number", "Group Id", "User Id", "User Type", "Endpoint Type", "Primary
    Line/Port", "Order", "Extension", "Department", "Email Address", "Private Identity".
    In IMS mode, the table will contain a row for each TEL-URI in the Phone Number column.
    In standalone mode, rows for the alternate numbers are not included.  The User Type
    column contains one of the enumerated UserType values.  The Endpoint Type column
    contains one of the enumerated EndpointType values.  The Private Identity column is
    empty is AS mode.

    Attributes:
        device_user_table: deviceUserTable
    """

    __slots__ = [
        "device_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_user_table",
                "deviceUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderAdminGetListResponse14(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetListRequest14()``.

    Contains a 5 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Administrator Type", "Language".

    Attributes:
        service_provider_admin_table: serviceProviderAdminTable
    """

    __slots__ = [
        "service_provider_admin_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_admin_table",
                "serviceProviderAdminTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderAdminGetPolicyResponse14(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest14()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        web_branding_access: webBrandingAccess
        network_policy_access: networkPolicyAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "service_access",
        "service_pack_access",
        "web_branding_access",
        "network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("network_policy_access", "networkPolicyAccess", str),
        )


class ServiceProviderAdminGetPolicyResponse16sp1(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest16sp1()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.  Replaced by:
    ``ServiceProviderAdminGetPolicyResponse17()``

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        network_policy_access: networkPolicyAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "service_access",
        "service_pack_access",
        "session_admission_control_access",
        "web_branding_access",
        "network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("network_policy_access", "networkPolicyAccess", str),
        )


class ServiceProviderAdminGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest16sp1()``.

    Response to ``ServiceProviderAdminGetPolicyRequest16sp2()``. Contains the policy
    settings for the service provider administrator.  The networkPolicyAccess is returned
    only for the enterprise administrator.

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        network_policy_access: networkPolicyAccess
        dialable_caller_id_access: dialableCallerIDAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "service_access",
        "service_pack_access",
        "session_admission_control_access",
        "web_branding_access",
        "network_policy_access",
        "dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("network_policy_access", "networkPolicyAccess", str),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class ServiceProviderAdminGetPolicyResponse17(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest17()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        office_zone_access: officeZoneAccess
        network_policy_access: networkPolicyAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "service_pack_access",
        "session_admission_control_access",
        "web_branding_access",
        "office_zone_access",
        "network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E("network_policy_access", "networkPolicyAccess", str),
        )


class ServiceProviderAdminGetPolicyResponse17sp1(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest17sp1()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.  The following
    elements are only used in HSS data mode: communicationBarringAccess

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        office_zone_access: officeZoneAccess
        communication_barring_access: communicationBarringAccess
        network_policy_access: networkPolicyAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "service_pack_access",
        "session_admission_control_access",
        "web_branding_access",
        "office_zone_access",
        "communication_barring_access",
        "network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "communication_barring_access",
                "communicationBarringAccess",
                str,
                is_required=True,
            ),
            E("network_policy_access", "networkPolicyAccess", str),
        )


class ServiceProviderAdminGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest17sp3()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess is returned only for the enterprise administrator.  The following
    elements are only used in AS data mode: dialableCallerIDAccess The following elements
    are only used in HSS data mode: communicationBarringAccess

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        office_zone_access: officeZoneAccess
        communication_barring_access: communicationBarringAccess
        network_policy_access: networkPolicyAccess
        dialable_caller_id_access: dialableCallerIDAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "service_pack_access",
        "session_admission_control_access",
        "web_branding_access",
        "office_zone_access",
        "communication_barring_access",
        "network_policy_access",
        "dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "communication_barring_access",
                "communicationBarringAccess",
                str,
                is_required=True,
            ),
            E("network_policy_access", "networkPolicyAccess", str),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class ServiceProviderAdminGetPolicyResponse18(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest18()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess and numberActivationAccess are returned only for the enterprise
    administrator.  The following elements are only used in AS data mode:
    dialableCallerIDAccess

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        office_zone_access: officeZoneAccess
        communication_barring_access: communicationBarringAccess
        network_policy_access: networkPolicyAccess
        number_activation_access: numberActivationAccess
        dialable_caller_id_access: dialableCallerIDAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "service_pack_access",
        "session_admission_control_access",
        "web_branding_access",
        "office_zone_access",
        "communication_barring_access",
        "network_policy_access",
        "number_activation_access",
        "dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "communication_barring_access",
                "communicationBarringAccess",
                str,
                is_required=True,
            ),
            E("network_policy_access", "networkPolicyAccess", str),
            E("number_activation_access", "numberActivationAccess", str),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class ServiceProviderAdminGetPolicyResponse20(OCIResponse):
    """
    Response to ``ServiceProviderAdminGetPolicyRequest20()``.

    Contains the policy settings for the service provider administrator.  The
    networkPolicyAccess and numberActivationAccess are returned only for the enterprise
    administrator.  The following elements are only used in AS data mode:
    dialableCallerIDAccess verifyTranslationAndRoutingAccess

    Attributes:
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        office_zone_access: officeZoneAccess
        communication_barring_access: communicationBarringAccess
        network_policy_access: networkPolicyAccess
        number_activation_access: numberActivationAccess
        dialable_caller_id_access: dialableCallerIDAccess
        verify_translation_and_routing_access: verifyTranslationAndRoutingAccess
    """

    __slots__ = [
        "profile_access",
        "group_access",
        "user_access",
        "admin_access",
        "department_access",
        "access_device_access",
        "phone_number_extension_access",
        "calling_line_id_number_access",
        "service_access",
        "service_pack_access",
        "session_admission_control_access",
        "web_branding_access",
        "office_zone_access",
        "communication_barring_access",
        "network_policy_access",
        "number_activation_access",
        "dialable_caller_id_access",
        "verify_translation_and_routing_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_access", "profileAccess", str, is_required=True),
            E("group_access", "groupAccess", str, is_required=True),
            E("user_access", "userAccess", str, is_required=True),
            E("admin_access", "adminAccess", str, is_required=True),
            E("department_access", "departmentAccess", str, is_required=True),
            E("access_device_access", "accessDeviceAccess", str, is_required=True),
            E(
                "phone_number_extension_access",
                "phoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_number_access",
                "callingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E("service_access", "serviceAccess", str, is_required=True),
            E("service_pack_access", "servicePackAccess", str, is_required=True),
            E(
                "session_admission_control_access",
                "sessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E("web_branding_access", "webBrandingAccess", str, is_required=True),
            E("office_zone_access", "officeZoneAccess", str, is_required=True),
            E(
                "communication_barring_access",
                "communicationBarringAccess",
                str,
                is_required=True,
            ),
            E("network_policy_access", "networkPolicyAccess", str),
            E("number_activation_access", "numberActivationAccess", str),
            E(
                "dialable_caller_id_access",
                "dialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "verify_translation_and_routing_access",
                "verifyTranslationAndRoutingAccess",
                str,
                is_required=True,
            ),
        )


class ServiceProviderAdminGetResponse14(OCIResponse):
    """
    Response to the ``ServiceProviderAdminGetRequest14()``.

    The response contains the service provider administrators profile information.

    Attributes:
        service_provider_id: serviceProviderId
        first_name: firstName
        last_name: lastName
        language: language
        administrator_type: administratorType
    """

    __slots__ = [
        "service_provider_id",
        "first_name",
        "last_name",
        "language",
        "administrator_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("language", "language", str, is_required=True),
            E("administrator_type", "administratorType", str, is_required=True),
        )


class ServiceProviderAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderAdviceOfChargeGetRequest()``.

    Contains a list of Advice of Charge service provider parameters.

    Attributes:
        use_sp_level_ao_c_settings: useSPLevelAoCSettings
        delay_between_notification_seconds: delayBetweenNotificationSeconds
    """

    __slots__ = [
        "use_sp_level_ao_c_settings",
        "delay_between_notification_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_sp_level_ao_c_settings",
                "useSPLevelAoCSettings",
                bool,
                is_required=True,
            ),
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
                is_required=True,
            ),
        )


class ServiceProviderAnswerConfirmationGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderAnswerConfirmationGetRequest()``.

    Replaced By: ``ServiceProviderAnswerConfirmationGetResponse16()``

    Attributes:
        announcement_message_selection: announcementMessageSelection
        confirmation_message_audio_file_description:
            confirmationMessageAudioFileDescription
        confirmation_timout_seconds: confirmationTimoutSeconds
    """

    __slots__ = [
        "announcement_message_selection",
        "confirmation_message_audio_file_description",
        "confirmation_timout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_message_selection",
                "announcementMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "confirmation_message_audio_file_description",
                "confirmationMessageAudioFileDescription",
                str,
            ),
            E(
                "confirmation_timout_seconds",
                "confirmationTimoutSeconds",
                int,
                is_required=True,
            ),
        )


class ServiceProviderAnswerConfirmationGetResponse16(OCIResponse):
    """
    Response to the ``ServiceProviderAnswerConfirmationGetRequest16()``.


    Attributes:
        announcement_message_selection: announcementMessageSelection
        confirmation_message_audio_file_description:
            confirmationMessageAudioFileDescription
        confirmation_message_media_type: confirmationMessageMediaType
        confirmation_timout_seconds: confirmationTimoutSeconds
    """

    __slots__ = [
        "announcement_message_selection",
        "confirmation_message_audio_file_description",
        "confirmation_message_media_type",
        "confirmation_timout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_message_selection",
                "announcementMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "confirmation_message_audio_file_description",
                "confirmationMessageAudioFileDescription",
                str,
            ),
            E("confirmation_message_media_type", "confirmationMessageMediaType", str),
            E(
                "confirmation_timout_seconds",
                "confirmationTimoutSeconds",
                int,
                is_required=True,
            ),
        )


class ServiceProviderApplicationServerSetGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderApplicationServerSetGetRequest()``.

    The response contains the service provider or enterprise's Application Server set
    information.

    Attributes:
        application_server_set_name: applicationServerSetName
    """

    __slots__ = [
        "application_server_set_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_server_set_name", "applicationServerSetName", str),
        )


class ServiceProviderBroadWorksCommunicatorGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderBroadWorksCommunicatorGetRequest()``.


    Attributes:
        configuration_server_url: configurationServerURL
    """

    __slots__ = [
        "configuration_server_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("configuration_server_url", "configurationServerURL", str),
        )


class ServiceProviderBroadWorksMobilityGetResponse(OCIResponse):
    """
    The response to a ``ServiceProviderBroadWorksMobilityGetRequest()``.


    Attributes:
        use_setting_level: useSettingLevel
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
    """

    __slots__ = [
        "use_setting_level",
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        )


class ServiceProviderBroadWorksMobilityGetResponse19sp1(OCIResponse):
    """
    The response to a ``ServiceProviderBroadWorksMobilityGetRequest19sp1()``.


    Attributes:
        use_setting_level: useSettingLevel
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        enable_announcement_suppression: enableAnnouncementSuppression
    """

    __slots__ = [
        "use_setting_level",
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "enable_announcement_suppression",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E(
                "enable_announcement_suppression",
                "enableAnnouncementSuppression",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest()``.

    Contains a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any group.

    Attributes:
        available_mobile_subscriber_directory_number:
            availableMobileSubscriberDirectoryNumber
    """

    __slots__ = [
        "available_mobile_subscriber_directory_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_mobile_subscriber_directory_number",
                "availableMobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListRequest()``.

    The column headings are "Phone Number", "Group Id" and "Mobile Network".

    Attributes:
        mobile_subscriber_directory_numbers_summary_table:
            mobileSubscriberDirectoryNumbersSummaryTable
    """

    __slots__ = [
        "mobile_subscriber_directory_numbers_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "mobile_subscriber_directory_numbers_summary_table",
                "mobileSubscriberDirectoryNumbersSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
        )


class ServiceProviderCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14sp1()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse14sp4(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14sp4()``.

    Replaced By : ``ServiceProviderCallProcessingGetPolicyResponse15()``

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_external_calls_via_private_dialing_plan",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest14sp7()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_external_calls_via_private_dialing_plan",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse15(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest15()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse15sp2(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest15sp2()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest16()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest16sp2()``.


    Attributes:
        use_service_provider_dclid_setting: useServiceProviderDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_service_provider_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_dclid_setting",
                "useServiceProviderDCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest17()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest17sp3()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID

    Attributes:
        use_service_provider_dclid_setting: useServiceProviderDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_service_provider_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_dclid_setting",
                "useServiceProviderDCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest17sp4()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity

    Attributes:
        use_service_provider_dclid_setting: useServiceProviderDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
    """

    __slots__ = [
        "use_service_provider_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_dclid_setting",
                "useServiceProviderDCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderCallProcessingGetPolicyResponse18sp1(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest18sp1()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    enterpriseCallsCLIDPolicy groupCallsCLIDPolicy Replaced by:
    ``ServiceProviderCallProcessingGetPolicyResponse19sp1()``

    Attributes:
        use_service_provider_dclid_setting: useServiceProviderDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        group_calls_clid_policy: groupCallsCLIDPolicy
    """

    __slots__ = [
        "use_service_provider_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "enterprise_calls_clid_policy",
        "group_calls_clid_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_dclid_setting",
                "useServiceProviderDCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
        )


class ServiceProviderCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``ServiceProviderCallProcessingGetPolicyRequest19sp1()``.

    The following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    enterpriseCallsCLIDPolicy groupCallsCLIDPolicy

    Attributes:
        use_service_provider_dclid_setting: useServiceProviderDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        group_calls_clid_policy: groupCallsCLIDPolicy
    """

    __slots__ = [
        "use_service_provider_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "enforce_enterprise_calling_line_identity_restriction",
        "use_setting_level",
        "conference_uri",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "enterprise_calls_clid_policy",
        "group_calls_clid_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_dclid_setting",
                "useServiceProviderDCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("group_calls_clid_policy", "groupCallsCLIDPolicy", str, is_required=True),
        )


class ServiceProviderCommunicationBarringCriteriaGetAssignedListResponse(OCIResponse):
    """
    Response to ``ServiceProviderCommunicationBarringCriteriaGetAssignedListRequest()``.

    Contains a table of all Communication Barring Criteria assigned to the service
    provider.  The column headings are: "Name" and "Description".

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCommunicationBarringDigitPatternCriteriaGetListResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetListRequest()``.

    The response contains a table of all Digit Pattern Criteria defined for the service
    provider.  The column headings are "Name" and "Description"

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListRequest()``.

    The response contains the Digit Pattern Criteria information.

    Attributes:
        match_digit_pattern: matchDigitPattern
    """

    __slots__ = [
        "match_digit_pattern",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
        )


class ServiceProviderCommunicationBarringDigitPatternCriteriaGetResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetRequest()``.

    The response contains the Digit Pattern Criteria information.

    Attributes:
        description: description
    """

    __slots__ = [
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
        )


class ServiceProviderCommunicationBarringIncomingCriteriaGetAssignedListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderCommunicationBarringIncomingCriteriaGetAssignedListRequest()``.

    Contains a table of all Communication Barring Incoming Criteria assigned to the
    service provider.  The column headings are: "Name" and "Description".

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCommunicationBarringProfileGetAssignedGroupListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderCommunicationBarringProfileGetAssignedGroupListRequest()``.

    Contains a table of groups that have the Communication Barring Profile assigned.  The
    column headings are: "Group Id" and "Group Name".

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCommunicationBarringProfileGetCriteriaUsageListResponse(OCIResponse):
    """
    Response to ServiceProviderCommunicationBarring
    ``ProfileGetCriteriaUsageListRequest()``.

    Contains a table of profiles that have the Communication Barring Criteria assigned.
    The column headings are: "Name" and "Description".

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest()``.

    The response contains a table of all Profiles that use the specific Digit Pattern
    Criteria.  The column headings are "Name" and "Description"

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCommunicationBarringProfileGetIncomingCriteriaUsageListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderCommunicationBarringProfileGetIncomingCriteriaUsageListRequest()``.

    Contains a table of profiles that have the Communication Barring Incoming Criteria
    assigned.  The column headings are: "Name" and "Description".

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderCommunicationBarringProfileGetListResponse(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetListRequest()``.

    The response contains a table of all Communication Barring Profiles for the service
    provider.  The column headings are "Default" , "Name" and "Description"

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderDeviceManagementEventGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDeviceManagementEventGetListRequest()``.

    Contains a table with column headings: "Event Id", "Status", "Action", "Level",
    "Type", "Additional Info", "Is Local", "Completion %", "Pushed/ Same Hash/ Not
    Pushed", "Login Id", "Start Time", "Process Time". "Event Id" is a unique identifer
    for the event.  "Status" can be: Pending, Queued, In Progress, Process On Other Host,
    Stale, Completed, Canceled.  "Action" can be: Delete, Download, Rebuild, Reset,
    Upload.  "Level" can be: Device, Device Type, Device Type Group, Group, User.  "Type"
    can be: Automatic, Manual.  "Additional Info" includes the affected device type,
    device or group.  It depends on the level of the event: Device Profile: "Device Name"
    "Service Provider Id" "Group Id" Device Type: "Device Type Name" Device Type Group:
    "Service Provider Id" "Group Id" "Device Type Name" Group: "Service Provider Id"
    "Group Id" User: "User Id" "Is Local" is set to "yes" if the event is processed on the
    server who received the request, "no" otherwise meaning that the event is processed on
    another server.  "Completion %" provides an estimate of the completion of the event.
    A percentage is given, the current number of completed expanded event, and the total
    number of expanded event.  "Pushed/ Same Hash/ Not Pushed" gives the total number of
    files that were pushed, not pushed because of same hash, and not pushed when
    processing the event.  "LoginId" is the user or admin id who triggered the event.
    "Start Time" is the date when the event was started.  The display shows the month,
    days, hours, and minutes (MM-dd hh:mm). "Process Time" is the time taken to process
    the event in hours, minutes, seconds, and milliseconds (hhhh:mm:ss.SSS). Each row
    represents an event sorted by priority of processing.  The first row in the table is
    an event that has an associated expanded event currently being processed or next in
    line to be processed.

    Attributes:
        event_table: eventTable
    """

    __slots__ = [
        "event_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "event_table",
                "eventTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderDeviceProfileAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderDeviceProfileAuthenticationPasswordRulesGetRequest()``.

    Contains the device profile authentication password rules for the service provider.

    Attributes:
        use_service_provider_settings: useServiceProviderSettings
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        device_profile_authentication_lockout_type: deviceProfileAuthenticationLockoutType
        device_profile_temporary_lockout_threshold: deviceProfileTemporaryLockoutThreshold
        device_profile_wait_algorithm: deviceProfileWaitAlgorithm
        device_profile_lockout_fixed_minutes: deviceProfileLockoutFixedMinutes
        device_profile_permanent_lockout_threshold: deviceProfilePermanentLockoutThreshold
    """

    __slots__ = [
        "use_service_provider_settings",
        "disallow_authentication_name",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "send_permanent_lockout_notification",
        "permanent_lockout_notify_email_address",
        "device_profile_authentication_lockout_type",
        "device_profile_temporary_lockout_threshold",
        "device_profile_wait_algorithm",
        "device_profile_lockout_fixed_minutes",
        "device_profile_permanent_lockout_threshold",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_settings",
                "useServiceProviderSettings",
                bool,
                is_required=True,
            ),
            E(
                "disallow_authentication_name",
                "disallowAuthenticationName",
                bool,
                is_required=True,
            ),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
                is_required=True,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "device_profile_authentication_lockout_type",
                "deviceProfileAuthenticationLockoutType",
                str,
                is_required=True,
            ),
            E(
                "device_profile_temporary_lockout_threshold",
                "deviceProfileTemporaryLockoutThreshold",
                int,
                is_required=True,
            ),
            E(
                "device_profile_wait_algorithm",
                "deviceProfileWaitAlgorithm",
                str,
                is_required=True,
            ),
            E(
                "device_profile_lockout_fixed_minutes",
                "deviceProfileLockoutFixedMinutes",
                str,
                is_required=True,
            ),
            E(
                "device_profile_permanent_lockout_threshold",
                "deviceProfilePermanentLockoutThreshold",
                int,
                is_required=True,
            ),
        )


class ServiceProviderDialPlanPolicyGetAccessCodeListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetAccessCodeListRequest()``.

    Contains a table with column headings: "Access Code", "Enable Secondary Dial Tone",
    "Description".

    Attributes:
        access_code_table: accessCodeTable
    """

    __slots__ = [
        "access_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_code_table",
                "accessCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderDialPlanPolicyGetAccessCodeResponse(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetAccessCodeRequest()``

    Attributes:
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    __slots__ = [
        "include_code_for_network_translations_and_routing",
        "include_code_for_screening_services",
        "enable_secondary_dial_tone",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
                is_required=True,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
                is_required=True,
            ),
            E(
                "enable_secondary_dial_tone",
                "enableSecondaryDialTone",
                bool,
                is_required=True,
            ),
            E("description", "description", str),
        )


class ServiceProviderDialPlanPolicyGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetRequest()`` Replaced by:
    ``ServiceProviderDialPlanPolicyGetResponse17()``

    Attributes:
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "requires_access_code_for_public_calls",
        "allow_e164_public_calls",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
                is_required=True,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


class ServiceProviderDialPlanPolicyGetResponse17(OCIResponse):
    """
    Response to ``ServiceProviderDialPlanPolicyGetRequest17()``

    Attributes:
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        prefer_e164_number_format_for_callback_services:
            preferE164NumberFormatForCallbackServices
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "requires_access_code_for_public_calls",
        "allow_e164_public_calls",
        "prefer_e164_number_format_for_callback_services",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
                is_required=True,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
            E(
                "prefer_e164_number_format_for_callback_services",
                "preferE164NumberFormatForCallbackServices",
                bool,
                is_required=True,
            ),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


class ServiceProviderDialableCallerIDCriteriaGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderDialableCallerIDCriteriaGetRequest()``.

    The response contains the Dialable Caller ID Criteria information.

    Attributes:
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    __slots__ = [
        "description",
        "prefix_digits",
        "match_call_type",
        "match_alternate_call_indicator",
        "match_local_category",
        "match_national_category",
        "match_interlata_category",
        "match_intralata_category",
        "match_international_category",
        "match_private_category",
        "match_emergency_category",
        "match_other_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
        )


class ServiceProviderDialableCallerIDGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderDialableCallerIDGetRequest()``.

    The criteria table?s column headings are ?Active?, "Name", "Description", ?Prefix
    Digits?, and ?Priority?.

    Attributes:
        use_service_provider_criteria: useServiceProviderCriteria
        ns_screening_failure_policy: nsScreeningFailurePolicy
        criteria_table: criteriaTable
    """

    __slots__ = [
        "use_service_provider_criteria",
        "ns_screening_failure_policy",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_criteria",
                "useServiceProviderCriteria",
                bool,
                is_required=True,
            ),
            E(
                "ns_screening_failure_policy",
                "nsScreeningFailurePolicy",
                str,
                is_required=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderDigitCollectionGetResponse13mp4(OCIResponse):
    """
    Response to ``ServiceProviderDigitCollectionGetRequest13mp4()``.


    Attributes:
        access_code: accessCode
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "access_code",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_code", "accessCode", str),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


class ServiceProviderDnGetAvailableListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDnGetAvailableListRequest()``.

    Contains a list of available DNs not yet assigned to any group.

    Attributes:
        available_dn: availableDn
    """

    __slots__ = [
        "available_dn",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("available_dn", "availableDn", str, is_array=True),
        )


class ServiceProviderDnGetSummaryListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDnGetSummaryListRequest()``.

    The column headings are "Phone Numbers, "Group Id" and "Can Delete"

    Attributes:
        dn_summary_table: dnSummaryTable
    """

    __slots__ = [
        "dn_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_summary_table",
                "dnSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderDomainGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderDomainGetAssignedGroupListRequest()``.

    Contains a table with column headings: "Group Id", "Group Name" and a row for each
    group.

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderDomainGetAssignedListResponse(OCIResponse):
    """
    Contains a simple list of all service provider domain names.


    Attributes:
        service_provider_default_domain: serviceProviderDefaultDomain
        domain: domain
    """

    __slots__ = [
        "service_provider_default_domain",
        "domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_default_domain",
                "serviceProviderDefaultDomain",
                str,
                is_required=True,
            ),
            E("domain", "domain", str, is_array=True),
        )


class ServiceProviderEndpointGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderEndpointGetListRequest()``.

    The column headings for the endpointTable are: "Group Id", "Line/Port", "Last Name",
    "First Name", "User Id", "User Type", "Phone Number", "Extension", "Device Type",
    "Device Name", "Net Address", "MAC Address", "Department", "Email Address". Possible
    values for User Type are "User", "CCBasic", "CCStandard", "CCPremium", "RP", "MOH",
    "MOHVideo".

    Attributes:
        endpoint_table: endpointTable
    """

    __slots__ = [
        "endpoint_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "endpoint_table",
                "endpointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderEnhancedCallLogsGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderEnhancedCallLogsGetRequest()``.


    Attributes:
        max_logged_calls: maxLoggedCalls
        call_expiration_days: callExpirationDays
    """

    __slots__ = [
        "max_logged_calls",
        "call_expiration_days",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_logged_calls", "maxLoggedCalls", int, is_required=True),
            E("call_expiration_days", "callExpirationDays", int, is_required=True),
        )


class ServiceProviderEnhancedCallLogsGetResponse17sp4(OCIResponse):
    """
    Response to ``ServiceProviderEnhancedCallLogsGetRequest17sp4()``.


    Attributes:
        max_logged_calls: maxLoggedCalls
        call_expiration_days: callExpirationDays
    """

    __slots__ = [
        "max_logged_calls",
        "call_expiration_days",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_logged_calls", "maxLoggedCalls", int, is_required=True),
            E("call_expiration_days", "callExpirationDays", int, is_required=True),
        )


class ServiceProviderExternalCustomRingbackGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderExternalCustomRingbackGetRequest()``.


    Attributes:
        prefix_digits: prefixDigits
        server_net_address: serverNetAddress
        server_port: serverPort
        timeout_seconds: timeoutSeconds
    """

    __slots__ = [
        "prefix_digits",
        "server_net_address",
        "server_port",
        "timeout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix_digits", "prefixDigits", str),
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E("timeout_seconds", "timeoutSeconds", int, is_required=True),
        )


class ServiceProviderFileRepositoryDeviceUserGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderFileRepositoryDeviceUserGetListRequest()``.

    Contains a table with column headings : "User Name","Allow Delete","Allow Get","Allow
    Put" in a row for each file repository service provider user.

    Attributes:
        file_repository_user_table: fileRepositoryUserTable
    """

    __slots__ = [
        "file_repository_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_repository_user_table",
                "fileRepositoryUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderGetDefaultResponse(OCIResponse):
    """
    Response to the ``ServiceProviderGetDefaultRequest()``.

    All values are default values for a service provider or enterprise's profile.

    Attributes:
        is_enterprise: isEnterprise
        default_domain: defaultDomain
    """

    __slots__ = [
        "is_enterprise",
        "default_domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_enterprise", "isEnterprise", bool, is_required=True),
            E("default_domain", "defaultDomain", str, is_required=True),
        )


class ServiceProviderGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderGetListRequest()``.

    Contains a 3 column table with column headings 'Service Provider Id', 'Service
    Provider Name' and 'Is Enterprise' and a row for each service provider or enterprise.

    Attributes:
        service_provider_table: serviceProviderTable
    """

    __slots__ = [
        "service_provider_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_table",
                "serviceProviderTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderGroupPagingTargetsCapacityGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderGroupPagingTargetsCapacityGetRequest()``.


    Attributes:
        maximum_target_users: maximumTargetUsers
    """

    __slots__ = [
        "maximum_target_users",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("maximum_target_users", "maximumTargetUsers", int, is_required=True),
        )


class ServiceProviderIMRNGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderIMRNGetListRequest()``.


    Attributes:
        imrn: imrn
    """

    __slots__ = [
        "imrn",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("imrn", "imrn", str, is_array=True),
        )


class ServiceProviderInCallServiceActivationGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderInCallServiceActivationGetRequest()``.

    Replaced by: ``ServiceProviderInCallServiceActivationGetResponse17()``

    Attributes:
        activation_digits: activationDigits
    """

    __slots__ = [
        "activation_digits",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("activation_digits", "activationDigits", str, is_required=True),
        )


class ServiceProviderInCallServiceActivationGetResponse17(OCIResponse):
    """
    Response to ``ServiceProviderInCallServiceActivationGetRequest17()``.


    Attributes:
        flash_activation_digits: flashActivationDigits
        call_transfer_activation_digits: callTransferActivationDigits
    """

    __slots__ = [
        "flash_activation_digits",
        "call_transfer_activation_digits",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("flash_activation_digits", "flashActivationDigits", str, is_required=True),
            E(
                "call_transfer_activation_digits",
                "callTransferActivationDigits",
                str,
                is_required=True,
            ),
        )


class ServiceProviderIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderIntegratedIMPGetRequest()``.

    The response contains the service provider Integrated IMP service attributes.
    Replaced by: ``ServiceProviderIntegratedIMPGetResponse21()``

    Attributes:
        use_system_service_domain: useSystemServiceDomain
        service_domain: serviceDomain
    """

    __slots__ = [
        "use_system_service_domain",
        "service_domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_system_service_domain",
                "useSystemServiceDomain",
                bool,
                is_required=True,
            ),
            E("service_domain", "serviceDomain", str),
        )


class ServiceProviderIntegratedIMPGetResponse21(OCIResponse):
    """
    Response to the ``ServiceProviderIntegratedIMPGetRequest21()``.

    The response contains the service provider Integrated IMP service attributes.

    Attributes:
        use_system_service_domain: useSystemServiceDomain
        service_domain: serviceDomain
        service_port: servicePort
        use_system_messaging_server: useSystemMessagingServer
        provisioning_url: provisioningUrl
        provisioning_user_id: provisioningUserId
        bosh_url: boshURL
    """

    __slots__ = [
        "use_system_service_domain",
        "service_domain",
        "service_port",
        "use_system_messaging_server",
        "provisioning_url",
        "provisioning_user_id",
        "bosh_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_system_service_domain",
                "useSystemServiceDomain",
                bool,
                is_required=True,
            ),
            E("service_domain", "serviceDomain", str),
            E("service_port", "servicePort", int),
            E(
                "use_system_messaging_server",
                "useSystemMessagingServer",
                bool,
                is_required=True,
            ),
            E("provisioning_url", "provisioningUrl", str),
            E("provisioning_user_id", "provisioningUserId", str),
            E("bosh_url", "boshURL", str),
        )


class ServiceProviderLDAPIntegrationGetDirectoryResponse(OCIResponse):
    """
    Response to ``ServiceProviderLDAPIntegrationGetDirectoryRequest()``.


    Attributes:
        server_net_address: serverNetAddress
        server_port: serverPort
        search_base: searchBase
        use_ssl: useSSL
        require_authentication: requireAuthentication
        authenticated_dn: authenticatedDN
        authenticated_password: authenticatedPassword
        is_sort_enabled: isSortEnabled
        is_paged_result_enabled: isPagedResultEnabled
        search_filter: searchFilter
        include_search_attribute_in_search_filter: includeSearchAttributeInSearchFilter
        column1_attribute_name: column1AttributeName
        column2_attribute_name: column2AttributeName
        column3_attribute_name: column3AttributeName
        column4_attribute_name: column4AttributeName
        column1_label: column1Label
        column2_label: column2Label
        column3_label: column3Label
        column4_label: column4Label
        search_column: searchColumn
    """

    __slots__ = [
        "server_net_address",
        "server_port",
        "search_base",
        "use_ssl",
        "require_authentication",
        "authenticated_dn",
        "authenticated_password",
        "is_sort_enabled",
        "is_paged_result_enabled",
        "search_filter",
        "include_search_attribute_in_search_filter",
        "column1_attribute_name",
        "column2_attribute_name",
        "column3_attribute_name",
        "column4_attribute_name",
        "column1_label",
        "column2_label",
        "column3_label",
        "column4_label",
        "search_column",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int, is_required=True),
            E("search_base", "searchBase", str),
            E("use_ssl", "useSSL", bool, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("authenticated_dn", "authenticatedDN", str),
            E("authenticated_password", "authenticatedPassword", str),
            E("is_sort_enabled", "isSortEnabled", bool, is_required=True),
            E("is_paged_result_enabled", "isPagedResultEnabled", bool, is_required=True),
            E("search_filter", "searchFilter", str),
            E(
                "include_search_attribute_in_search_filter",
                "includeSearchAttributeInSearchFilter",
                bool,
                is_required=True,
            ),
            E("column1_attribute_name", "column1AttributeName", str, is_required=True),
            E("column2_attribute_name", "column2AttributeName", str),
            E("column3_attribute_name", "column3AttributeName", str),
            E("column4_attribute_name", "column4AttributeName", str),
            E("column1_label", "column1Label", str),
            E("column2_label", "column2Label", str),
            E("column3_label", "column3Label", str),
            E("column4_label", "column4Label", str),
            E("search_column", "searchColumn", int, is_required=True),
        )


class ServiceProviderLanguageGetAvailableListResponse(OCIResponse):
    """
    Response to ``ServiceProviderLanguageGetAvailableListRequest()``.

    The language table column headings are: "Language", "Locale" and "Encoding".

    Attributes:
        default_language: defaultLanguage
        language_table: languageTable
    """

    __slots__ = [
        "default_language",
        "language_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_language", "defaultLanguage", str, is_required=True),
            E(
                "language_table",
                "languageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderLanguageGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderLanguageGetListRequest()``.


    Attributes:
        language: language
        default_language: defaultLanguage
    """

    __slots__ = [
        "language",
        "default_language",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("language", "language", str, is_array=True),
            E("default_language", "defaultLanguage", str),
        )


class ServiceProviderMWIDeliveryToMobileEndpointGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderMWIDeliveryToMobileEndpointGetRequest()``.

    The templateActivationTable contains the list of templates defined for the service
    provider.  The column headings are "Enable", "Language", "Type".

    Attributes:
        template_activation_table: templateActivationTable
    """

    __slots__ = [
        "template_activation_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "template_activation_table",
                "templateActivationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderMaliciousCallTraceGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderMaliciousCallTraceGetRequest()``.

    The response contains the service provider Malicious Call Trace settings.

    Attributes:
        use_system_play_mct_warning_announcement: useSystemPlayMCTWarningAnnouncement
        play_mct_warning_announcement: playMCTWarningAnnouncement
    """

    __slots__ = [
        "use_system_play_mct_warning_announcement",
        "play_mct_warning_announcement",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_system_play_mct_warning_announcement",
                "useSystemPlayMCTWarningAnnouncement",
                bool,
                is_required=True,
            ),
            E(
                "play_mct_warning_announcement",
                "playMCTWarningAnnouncement",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderNetworkClassOfServiceGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderNetworkClassOfServiceGetAssignedGroupListRequest()``.

    Contains a table of groups that have the Network Class of Service assigned.  The
    column headings are: "Group Id" and "Group Name".

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderNetworkClassOfServiceGetAssignedListResponse(OCIResponse):
    """
    Response to ``ServiceProviderNetworkClassOfServiceGetAssignedListRequest()``.

    Contains a table of all Network Classes of Service assigned to the service provider.
    The column headings are: "Name", "Description" and "Default".

    Attributes:
        network_class_of_service_table: networkClassOfServiceTable
    """

    __slots__ = [
        "network_class_of_service_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "network_class_of_service_table",
                "networkClassOfServiceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderNumberPortabilityQueryGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderNumberPortabilityQueryGetRequest()``.

    The response contains the service provider number portability query information.

    Attributes:
        enable_number_portability_query_for_outgoing_calls:
            enableNumberPortabilityQueryForOutgoingCalls
        enable_number_portability_query_for_incoming_calls:
            enableNumberPortabilityQueryForIncomingCalls
        enable_number_portability_query_for_network_calls_only:
            enableNumberPortabilityQueryForNetworkCallsOnly
        digit_pattern: digitPattern
    """

    __slots__ = [
        "enable_number_portability_query_for_outgoing_calls",
        "enable_number_portability_query_for_incoming_calls",
        "enable_number_portability_query_for_network_calls_only",
        "digit_pattern",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_number_portability_query_for_outgoing_calls",
                "enableNumberPortabilityQueryForOutgoingCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_number_portability_query_for_incoming_calls",
                "enableNumberPortabilityQueryForIncomingCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_number_portability_query_for_network_calls_only",
                "enableNumberPortabilityQueryForNetworkCallsOnly",
                bool,
                is_required=True,
            ),
            E("digit_pattern", "digitPattern", str, is_array=True),
        )


class ServiceProviderOfficeZoneGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderOfficeZoneGetAssignedGroupListRequest()``.

    Contains a table of groups that have the Office Zone assigned.  The column headings
    are: "Group Id" and "Group Name".

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderOfficeZoneGetAssignedListResponse(OCIResponse):
    """
    Response to ``ServiceProviderOfficeZoneGetAssignedListRequest()``.

    Contains a table of all Office Zones assigned to the service provider.  The column
    headings are: "Name", "Description" and "Default".

    Attributes:
        office_zone_table: officeZoneTable
    """

    __slots__ = [
        "office_zone_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "office_zone_table",
                "officeZoneTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderPasswordRulesGetResponse13mp2(OCIResponse):
    """
    Response to ``ServiceProviderPasswordRulesGetRequest13mp2()``.

    Contains the group, department administrator and/or user password rules setting.

    Replaced By: ``ServiceProviderPasswordRulesGetResponse16()``

    Attributes:
        service_provider_id: serviceProviderId
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
    """

    __slots__ = [
        "service_provider_id",
        "rules_apply_to",
        "allow_web_add_external_authentication_users",
        "disallow_user_id",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "max_failed_login_attempts",
        "password_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "disallow_rules_modification",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("rules_apply_to", "rulesApplyTo", str, is_required=True),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
                is_required=True,
            ),
            E("disallow_user_id", "disallowUserId", bool, is_required=True),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "max_failed_login_attempts",
                "maxFailedLoginAttempts",
                int,
                is_required=True,
            ),
            E("password_expires_days", "passwordExpiresDays", int, is_required=True),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E(
                "disallow_rules_modification",
                "disallowRulesModification",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderPasswordRulesGetResponse16(OCIResponse):
    """
    Response to ``ServiceProviderPasswordRulesGetRequest16()``.

    Contains the group, department administrator and/or user password rules setting.

    Attributes:
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
        disallow_previous_passwords: disallowPreviousPasswords
        number_of_previous_passwords: numberOfPreviousPasswords
    """

    __slots__ = [
        "rules_apply_to",
        "allow_web_add_external_authentication_users",
        "disallow_user_id",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "max_failed_login_attempts",
        "password_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "disallow_rules_modification",
        "disallow_previous_passwords",
        "number_of_previous_passwords",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("rules_apply_to", "rulesApplyTo", str, is_required=True),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
                is_required=True,
            ),
            E("disallow_user_id", "disallowUserId", bool, is_required=True),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "max_failed_login_attempts",
                "maxFailedLoginAttempts",
                int,
                is_required=True,
            ),
            E("password_expires_days", "passwordExpiresDays", int, is_required=True),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E(
                "disallow_rules_modification",
                "disallowRulesModification",
                bool,
                is_required=True,
            ),
            E(
                "disallow_previous_passwords",
                "disallowPreviousPasswords",
                bool,
                is_required=True,
            ),
            E(
                "number_of_previous_passwords",
                "numberOfPreviousPasswords",
                int,
                is_required=True,
            ),
        )


class ServiceProviderPortalPasscodeRulesGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderPortalPasscodeRulesGetRequest()``.

    Contains the service provider's passcode rules setting.

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    __slots__ = [
        "disallow_repeated_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


class ServiceProviderPortalPasscodeRulesGetResponse19(OCIResponse):
    """
    Response to ``ServiceProviderPortalPasscodeRulesGetRequest19()``.

    Contains the service provider's passcode rules setting.  The following elements are
    only used in AS data mode: numberOfRepeatedDigits disallowRepeatedPatterns
    disallowContiguousSequences numberOfAscendingDigits numberOfDescendingDigits
    numberOfPreviousPasscodes

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        number_of_repeated_digits: numberOfRepeatedDigits
        disallow_repeated_patterns: disallowRepeatedPatterns
        disallow_contiguous_sequences: disallowContiguousSequences
        number_of_ascending_digits: numberOfAscendingDigits
        number_of_descending_digits: numberOfDescendingDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        number_of_previous_passcodes: numberOfPreviousPasscodes
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    __slots__ = [
        "disallow_repeated_digits",
        "number_of_repeated_digits",
        "disallow_repeated_patterns",
        "disallow_contiguous_sequences",
        "number_of_ascending_digits",
        "number_of_descending_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "number_of_previous_passcodes",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E(
                "number_of_repeated_digits",
                "numberOfRepeatedDigits",
                int,
                is_required=True,
            ),
            E(
                "disallow_repeated_patterns",
                "disallowRepeatedPatterns",
                bool,
                is_required=True,
            ),
            E(
                "disallow_contiguous_sequences",
                "disallowContiguousSequences",
                bool,
                is_required=True,
            ),
            E(
                "number_of_ascending_digits",
                "numberOfAscendingDigits",
                int,
                is_required=True,
            ),
            E(
                "number_of_descending_digits",
                "numberOfDescendingDigits",
                int,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "number_of_previous_passcodes",
                "numberOfPreviousPasscodes",
                int,
                is_required=True,
            ),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


class ServiceProviderPreferredCarrierGetAvailableCountryCodeListResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetAvailableCountryCodeListRequest()``.

    Contains the default country code and the list of unused country codes for a service
    provider / enterprise.

    Attributes:
        default_country_code: defaultCountryCode
        country_code: countryCode
    """

    __slots__ = [
        "default_country_code",
        "country_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_country_code", "defaultCountryCode", str),
            E("country_code", "countryCode", str, is_array=True),
        )


class ServiceProviderPreferredCarrierGetCarrierListResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetCarrierListRequest()``.

    Contains the lists of carriers for a specified country code for a service provider /
    enterprise.

    Attributes:
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    __slots__ = [
        "intra_lata_carrier",
        "inter_lata_carrier",
        "international_carrier",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("intra_lata_carrier", "intraLataCarrier", str, is_array=True),
            E("inter_lata_carrier", "interLataCarrier", str, is_array=True),
            E("international_carrier", "internationalCarrier", str, is_array=True),
        )


class ServiceProviderPreferredCarrierGetListResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetListRequest()``.

    Contains a table with one row per carrier.  The table columns are: "Country Code",
    "Intra-Lata PIC", "Inter-Lata PIC", "International PIC".

    Attributes:
        service_provider_carrier_table: serviceProviderCarrierTable
    """

    __slots__ = [
        "service_provider_carrier_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_carrier_table",
                "serviceProviderCarrierTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderPreferredCarrierGetResponse(OCIResponse):
    """
    Response to a ``ServiceProviderPreferredCarrierGetRequest()``.

    Contains the currently configured carriers for a specified country code for a service
    provider / enterprise.

    Attributes:
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    __slots__ = [
        "intra_lata_carrier",
        "inter_lata_carrier",
        "international_carrier",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("intra_lata_carrier", "intraLataCarrier", str),
            E("inter_lata_carrier", "interLataCarrier", str),
            E("international_carrier", "internationalCarrier", str),
        )


class ServiceProviderRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest()``.

    Contains a list of available number ranges not yet assigned to any group.  The column
    headings are "Number Range Start", "Number Range End" and "Is Active".

    Attributes:
        available_number_range_table: availableNumberRangeTable
    """

    __slots__ = [
        "available_number_range_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_number_range_table",
                "availableNumberRangeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to
    ``ServiceProviderRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The column headings are "Number Range Start", "Number Range End", "Group Id" and "Is
    Active".

    Attributes:
        number_range_summary_table: numberRangeSummaryTable
    """

    __slots__ = [
        "number_range_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "number_range_summary_table",
                "numberRangeSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderRoutePointExternalSystemGetAssignedGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderRoutePointExternalSystemGetAssignedGroupListRequest()``.

    Contains a table with column headings: "Group Id", "Group Name" and a row for each
    group.

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderRoutePointExternalSystemGetAssignedListResponse(OCIResponse):
    """
    Response to the ``ServiceProviderRoutePointExternalSystemGetAssignedListRequest()``.

    Contains a table of all Route Point External Systems assigned to the service provider.
    The column headings are: "Name" and "Description".

    Attributes:
        external_system_table: externalSystemTable
    """

    __slots__ = [
        "external_system_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "external_system_table",
                "externalSystemTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderRoutingProfileGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderRoutingProfileGetRequest()``.


    Attributes:
        routing_profile: routingProfile
    """

    __slots__ = [
        "routing_profile",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("routing_profile", "routingProfile", str),
        )


class ServiceProviderSIPAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderSIPAuthenticationPasswordRulesGetRequest()``.

    Contains the SIP authentication password rules for the service provider.

    Attributes:
        use_service_provider_settings: useServiceProviderSettings
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        endpoint_authentication_lockout_type: endpointAuthenticationLockoutType
        endpoint_temporary_lockout_threshold: endpointTemporaryLockoutThreshold
        endpoint_wait_algorithm: endpointWaitAlgorithm
        endpoint_lockout_fixed_minutes: endpointLockoutFixedMinutes
        endpoint_permanent_lockout_threshold: endpointPermanentLockoutThreshold
        trunk_group_temporary_lockout_threshold: trunkGroupTemporaryLockoutThreshold
        trunk_group_authentication_lockout_type: trunkGroupAuthenticationLockoutType
        trunk_group_wait_algorithm: trunkGroupWaitAlgorithm
        trunk_group_lockout_fixed_minutes: trunkGroupLockoutFixedMinutes
        trunk_group_permanent_lockout_threshold: trunkGroupPermanentLockoutThreshold
    """

    __slots__ = [
        "use_service_provider_settings",
        "disallow_authentication_name",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "send_permanent_lockout_notification",
        "permanent_lockout_notify_email_address",
        "endpoint_authentication_lockout_type",
        "endpoint_temporary_lockout_threshold",
        "endpoint_wait_algorithm",
        "endpoint_lockout_fixed_minutes",
        "endpoint_permanent_lockout_threshold",
        "trunk_group_temporary_lockout_threshold",
        "trunk_group_authentication_lockout_type",
        "trunk_group_wait_algorithm",
        "trunk_group_lockout_fixed_minutes",
        "trunk_group_permanent_lockout_threshold",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_service_provider_settings",
                "useServiceProviderSettings",
                bool,
                is_required=True,
            ),
            E(
                "disallow_authentication_name",
                "disallowAuthenticationName",
                bool,
                is_required=True,
            ),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
                is_required=True,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "endpoint_authentication_lockout_type",
                "endpointAuthenticationLockoutType",
                str,
                is_required=True,
            ),
            E(
                "endpoint_temporary_lockout_threshold",
                "endpointTemporaryLockoutThreshold",
                int,
                is_required=True,
            ),
            E("endpoint_wait_algorithm", "endpointWaitAlgorithm", str, is_required=True),
            E(
                "endpoint_lockout_fixed_minutes",
                "endpointLockoutFixedMinutes",
                str,
                is_required=True,
            ),
            E(
                "endpoint_permanent_lockout_threshold",
                "endpointPermanentLockoutThreshold",
                int,
                is_required=True,
            ),
            E(
                "trunk_group_temporary_lockout_threshold",
                "trunkGroupTemporaryLockoutThreshold",
                int,
                is_required=True,
            ),
            E(
                "trunk_group_authentication_lockout_type",
                "trunkGroupAuthenticationLockoutType",
                str,
                is_required=True,
            ),
            E(
                "trunk_group_wait_algorithm",
                "trunkGroupWaitAlgorithm",
                str,
                is_required=True,
            ),
            E(
                "trunk_group_lockout_fixed_minutes",
                "trunkGroupLockoutFixedMinutes",
                str,
                is_required=True,
            ),
            E(
                "trunk_group_permanent_lockout_threshold",
                "trunkGroupPermanentLockoutThreshold",
                int,
                is_required=True,
            ),
        )


class ServiceProviderScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``ServiceProviderScheduleGetEventListRequest()``.

    The response contains a list of events.

    Attributes:
        event_name: eventName
    """

    __slots__ = [
        "event_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("event_name", "eventName", str, is_array=True),
        )


class ServiceProviderServiceGetAuthorizationListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServiceGetAuthorizationListRequest()``.

    Contains two tables, one for the group services and one for the user services.  The
    Group Service table has column headings: "Service Name", "Authorized", "Assigned",
    "Limited", "Quantity", "Allocated", "Licensed", "Service Pack Allocation" The User
    Service table has column headings: "Service Name", "Authorized", "Assigned",
    "Limited", "Quantity", "Allocated", "Licensed", "Service Pack Allocation", "User
    Assignable", "Service Pack Assignable".

    Attributes:
        group_services_authorization_table: groupServicesAuthorizationTable
        user_services_authorization_table: userServicesAuthorizationTable
    """

    __slots__ = [
        "group_services_authorization_table",
        "user_services_authorization_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_services_authorization_table",
                "groupServicesAuthorizationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "user_services_authorization_table",
                "userServicesAuthorizationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderServiceGetUserAssignableListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServiceGetUserAssignableListRequest()``.


    Attributes:
        service_name: serviceName
    """

    __slots__ = [
        "service_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_name", "serviceName", str, is_array=True),
        )


class ServiceProviderServicePackGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetListRequest()``.


    Attributes:
        service_pack_name: servicePackName
    """

    __slots__ = [
        "service_pack_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_pack_name", "servicePackName", str, is_array=True),
        )


class ServiceProviderServicePackGetServiceUsageListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetServiceUsageListRequest()``.

    The column headings are "Service Pack Name", "Total Packs" and "Allocated to Groups"

    Attributes:
        service_usage_table: serviceUsageTable
    """

    __slots__ = [
        "service_usage_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_usage_table",
                "serviceUsageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderServicePackGetUtilizationListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetUtilizationListRequest()``.

    For each service pack, a table of groups utilizing the pack is returned.  The
    utilization table column headings are "Group", "Total Packs" and "Assigned".

    Attributes:
        service_pack_name: servicePackName
        service_utilization_table: serviceUtilizationTable
    """

    __slots__ = [
        "service_pack_name",
        "service_utilization_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_pack_name", "servicePackName", str, is_array=True),
            E(
                "service_utilization_table",
                "serviceUtilizationTable",
                list,
                is_complex=True,
                is_array=True,
                is_table=True,
            ),
        )


class ServiceProviderServicePackMigrationTaskGetAvailableGroupListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetAvailableGroupListRequest()``.

    The groupTable column headings are: "Group Id", "Group Name", "User Count".

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderServicePackMigrationTaskGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetListRequest()``.

    Contains a table with a row for each service pack migration task and column headings :
    "Start Timestamp Milliseconds", "Name", "Status", "Error Count", "Users Processed",
    "Users Total". The start timestamp column is the number of milliseconds since the
    standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT.

    Attributes:
        task_table: taskTable
    """

    __slots__ = [
        "task_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "task_table",
                "taskTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderServicePackMigrationTaskGetListResponse21(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetListRequest21()``.

    Contains a table with a row for each service pack migration task and column headings :
    "Start Timestamp Milliseconds", "Name", "Status", "Error Count", "Users Processed",
    "Users Total". The start timestamp column is the number of milliseconds since the
    standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT. The
    status column is the task status which can be Awaiting edit, Pending, Processing,
    Terminating, Terminated, Stopped by system, Completed, or Expired.

    Attributes:
        task_table: taskTable
    """

    __slots__ = [
        "task_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "task_table",
                "taskTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderServicePackMigrationTaskGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetRequest()``.

    The groupTable column headings are: "Migrate", "Group Id", "Group Name", "User Count".

    Replaced By: ``ServiceProviderServicePackMigrationTaskGetResponse14sp4()``

    Attributes:
        task_name: taskName
        start_timestamp: startTimestamp
        max_duration_hours: maxDurationHours
        send_report_email: sendReportEmail
        report_delivery_email_address: reportDeliveryEmailAddress
        abort_on_error: abortOnError
        abort_error_threshold: abortErrorThreshold
        report_all_users: reportAllUsers
        automatically_increment_service_quantity: automaticallyIncrementServiceQuantity
        error_count: errorCount
        status: status
        groups_processed: groupsProcessed
        groups_total: groupsTotal
        users_processed: usersProcessed
        users_total: usersTotal
        user_selection_type: userSelectionType
        report_file_path_name: reportFilePathName
        group_table: groupTable
        user_selection_service_pack_name: userSelectionServicePackName
        user_selection_service_name: userSelectionServiceName
        remove_service_pack_name: removeServicePackName
        remove_service_name: removeServiceName
        assign_service_pack_name: assignServicePackName
        assign_service_name: assignServiceName
    """

    __slots__ = [
        "task_name",
        "start_timestamp",
        "max_duration_hours",
        "send_report_email",
        "report_delivery_email_address",
        "abort_on_error",
        "abort_error_threshold",
        "report_all_users",
        "automatically_increment_service_quantity",
        "error_count",
        "status",
        "groups_processed",
        "groups_total",
        "users_processed",
        "users_total",
        "user_selection_type",
        "report_file_path_name",
        "group_table",
        "user_selection_service_pack_name",
        "user_selection_service_name",
        "remove_service_pack_name",
        "remove_service_name",
        "assign_service_pack_name",
        "assign_service_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("task_name", "taskName", str, is_required=True),
            E("start_timestamp", "startTimestamp", str),
            E("max_duration_hours", "maxDurationHours", int, is_required=True),
            E("send_report_email", "sendReportEmail", bool, is_required=True),
            E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
            E("abort_on_error", "abortOnError", bool, is_required=True),
            E("abort_error_threshold", "abortErrorThreshold", int),
            E("report_all_users", "reportAllUsers", bool, is_required=True),
            E(
                "automatically_increment_service_quantity",
                "automaticallyIncrementServiceQuantity",
                bool,
                is_required=True,
            ),
            E("error_count", "errorCount", int, is_required=True),
            E("status", "status", str, is_required=True),
            E("groups_processed", "groupsProcessed", int, is_required=True),
            E("groups_total", "groupsTotal", int, is_required=True),
            E("users_processed", "usersProcessed", int, is_required=True),
            E("users_total", "usersTotal", int, is_required=True),
            E("user_selection_type", "userSelectionType", str, is_required=True),
            E("report_file_path_name", "reportFilePathName", str, is_required=True),
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "user_selection_service_pack_name",
                "userSelectionServicePackName",
                str,
                is_array=True,
            ),
            E(
                "user_selection_service_name",
                "userSelectionServiceName",
                str,
                is_array=True,
            ),
            E("remove_service_pack_name", "removeServicePackName", str, is_array=True),
            E("remove_service_name", "removeServiceName", str, is_array=True),
            E("assign_service_pack_name", "assignServicePackName", str, is_array=True),
            E("assign_service_name", "assignServiceName", str, is_array=True),
        )


class ServiceProviderServicePackMigrationTaskGetResponse14sp4(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetRequest14sp4()``.

    The groupTable column headings are: "Group Id", "Group Name", "User Count".

    Attributes:
        task_name: taskName
        start_timestamp: startTimestamp
        max_duration_hours: maxDurationHours
        send_report_email: sendReportEmail
        report_delivery_email_address: reportDeliveryEmailAddress
        abort_on_error: abortOnError
        abort_error_threshold: abortErrorThreshold
        report_all_users: reportAllUsers
        automatically_increment_service_quantity: automaticallyIncrementServiceQuantity
        error_count: errorCount
        status: status
        groups_processed: groupsProcessed
        groups_total: groupsTotal
        users_processed: usersProcessed
        users_total: usersTotal
        user_selection_type: userSelectionType
        report_file_path_name: reportFilePathName
        migrate_all_groups: migrateAllGroups
        group_table: groupTable
        user_selection_service_pack_name: userSelectionServicePackName
        user_selection_service_name: userSelectionServiceName
        remove_service_pack_name: removeServicePackName
        remove_service_name: removeServiceName
        assign_service_pack_name: assignServicePackName
        assign_service_name: assignServiceName
    """

    __slots__ = [
        "task_name",
        "start_timestamp",
        "max_duration_hours",
        "send_report_email",
        "report_delivery_email_address",
        "abort_on_error",
        "abort_error_threshold",
        "report_all_users",
        "automatically_increment_service_quantity",
        "error_count",
        "status",
        "groups_processed",
        "groups_total",
        "users_processed",
        "users_total",
        "user_selection_type",
        "report_file_path_name",
        "migrate_all_groups",
        "group_table",
        "user_selection_service_pack_name",
        "user_selection_service_name",
        "remove_service_pack_name",
        "remove_service_name",
        "assign_service_pack_name",
        "assign_service_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("task_name", "taskName", str, is_required=True),
            E("start_timestamp", "startTimestamp", str),
            E("max_duration_hours", "maxDurationHours", int, is_required=True),
            E("send_report_email", "sendReportEmail", bool, is_required=True),
            E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
            E("abort_on_error", "abortOnError", bool, is_required=True),
            E("abort_error_threshold", "abortErrorThreshold", int),
            E("report_all_users", "reportAllUsers", bool, is_required=True),
            E(
                "automatically_increment_service_quantity",
                "automaticallyIncrementServiceQuantity",
                bool,
                is_required=True,
            ),
            E("error_count", "errorCount", int, is_required=True),
            E("status", "status", str, is_required=True),
            E("groups_processed", "groupsProcessed", int, is_required=True),
            E("groups_total", "groupsTotal", int, is_required=True),
            E("users_processed", "usersProcessed", int, is_required=True),
            E("users_total", "usersTotal", int, is_required=True),
            E("user_selection_type", "userSelectionType", str, is_required=True),
            E("report_file_path_name", "reportFilePathName", str, is_required=True),
            E("migrate_all_groups", "migrateAllGroups", bool),
            E("group_table", "groupTable", list, is_complex=True, is_table=True),
            E(
                "user_selection_service_pack_name",
                "userSelectionServicePackName",
                str,
                is_array=True,
            ),
            E(
                "user_selection_service_name",
                "userSelectionServiceName",
                str,
                is_array=True,
            ),
            E("remove_service_pack_name", "removeServicePackName", str, is_array=True),
            E("remove_service_name", "removeServiceName", str, is_array=True),
            E("assign_service_pack_name", "assignServicePackName", str, is_array=True),
            E("assign_service_name", "assignServiceName", str, is_array=True),
        )


class ServiceProviderServicePackMigrationTaskGetResponse21(OCIResponse):
    """
    Response to ``ServiceProviderServicePackMigrationTaskGetRequest21()``.

    The groupTable column headings are: "Group Id", "Group Name", and "User Count".

    Attributes:
        task_name: taskName
        start_timestamp: startTimestamp
        actual_start_timestamp: actualStartTimestamp
        expire_after_num_hours: expireAfterNumHours
        max_duration_hours: maxDurationHours
        send_report_email: sendReportEmail
        report_delivery_email_address: reportDeliveryEmailAddress
        abort_on_error: abortOnError
        abort_error_threshold: abortErrorThreshold
        report_all_users: reportAllUsers
        automatically_increment_service_quantity: automaticallyIncrementServiceQuantity
        error_count: errorCount
        status: status
        groups_processed: groupsProcessed
        groups_total: groupsTotal
        users_processed: usersProcessed
        users_total: usersTotal
        user_selection_type: userSelectionType
        report_file_path_name: reportFilePathName
        migrate_all_groups: migrateAllGroups
        group_table: groupTable
        user_selection_service_pack_name: userSelectionServicePackName
        user_selection_service_name: userSelectionServiceName
        remove_service_pack_name: removeServicePackName
        remove_service_name: removeServiceName
        assign_service_pack_name: assignServicePackName
        assign_service_name: assignServiceName
    """

    __slots__ = [
        "task_name",
        "start_timestamp",
        "actual_start_timestamp",
        "expire_after_num_hours",
        "max_duration_hours",
        "send_report_email",
        "report_delivery_email_address",
        "abort_on_error",
        "abort_error_threshold",
        "report_all_users",
        "automatically_increment_service_quantity",
        "error_count",
        "status",
        "groups_processed",
        "groups_total",
        "users_processed",
        "users_total",
        "user_selection_type",
        "report_file_path_name",
        "migrate_all_groups",
        "group_table",
        "user_selection_service_pack_name",
        "user_selection_service_name",
        "remove_service_pack_name",
        "remove_service_name",
        "assign_service_pack_name",
        "assign_service_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("task_name", "taskName", str, is_required=True),
            E("start_timestamp", "startTimestamp", str),
            E("actual_start_timestamp", "actualStartTimestamp", str),
            E("expire_after_num_hours", "expireAfterNumHours", int, is_required=True),
            E("max_duration_hours", "maxDurationHours", int, is_required=True),
            E("send_report_email", "sendReportEmail", bool, is_required=True),
            E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
            E("abort_on_error", "abortOnError", bool, is_required=True),
            E("abort_error_threshold", "abortErrorThreshold", int),
            E("report_all_users", "reportAllUsers", bool, is_required=True),
            E(
                "automatically_increment_service_quantity",
                "automaticallyIncrementServiceQuantity",
                bool,
                is_required=True,
            ),
            E("error_count", "errorCount", int, is_required=True),
            E("status", "status", str, is_required=True),
            E("groups_processed", "groupsProcessed", int, is_required=True),
            E("groups_total", "groupsTotal", int, is_required=True),
            E("users_processed", "usersProcessed", int, is_required=True),
            E("users_total", "usersTotal", int, is_required=True),
            E("user_selection_type", "userSelectionType", str, is_required=True),
            E("report_file_path_name", "reportFilePathName", str, is_required=True),
            E("migrate_all_groups", "migrateAllGroups", bool),
            E("group_table", "groupTable", list, is_complex=True, is_table=True),
            E(
                "user_selection_service_pack_name",
                "userSelectionServicePackName",
                str,
                is_array=True,
            ),
            E(
                "user_selection_service_name",
                "userSelectionServiceName",
                str,
                is_array=True,
            ),
            E("remove_service_pack_name", "removeServicePackName", str, is_array=True),
            E("remove_service_name", "removeServiceName", str, is_array=True),
            E("assign_service_pack_name", "assignServicePackName", str, is_array=True),
            E("assign_service_name", "assignServiceName", str, is_array=True),
        )


class ServiceProviderServicePhoneNumberLookupResponse(OCIResponse):
    """
    Response to the ``ServiceProviderServicePhoneNumberLookupRequest()``.

    The column headings for the userTable are: "Group Id", "User Id", "Last Name", "First
    Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension" and
    "Department".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderSessionAdmissionControlGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderSessionAdmissionControlGetRequest()``.

    The response contains the session admission control capacity allocated for the service
    provider.

    Attributes:
        restrict_aggregate_sessions: restrictAggregateSessions
        max_sessions: maxSessions
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        count_intra_service_provider_sessions: countIntraServiceProviderSessions
    """

    __slots__ = [
        "restrict_aggregate_sessions",
        "max_sessions",
        "max_user_originating_sessions",
        "max_user_terminating_sessions",
        "count_intra_service_provider_sessions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "restrict_aggregate_sessions",
                "restrictAggregateSessions",
                bool,
                is_required=True,
            ),
            E("max_sessions", "maxSessions", int),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E(
                "count_intra_service_provider_sessions",
                "countIntraServiceProviderSessions",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderSessionAdmissionControlWhiteListGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderSessionAdmissionControlWhiteListGetRequest()``.

    The response contains the White List information.

    Attributes:
        match_digit_pattern: matchDigitPattern
        enable_white_list: enableWhiteList
    """

    __slots__ = [
        "match_digit_pattern",
        "enable_white_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
            E("enable_white_list", "enableWhiteList", bool, is_required=True),
        )


class ServiceProviderVoiceMessagingGroupGetPasscodeRulesResponse(OCIResponse):
    """
    Response to ``ServiceProviderVoiceMessagingGroupGetPasscodeRulesRequest()``.

    Contains the service provider's voice portal passcode rules setting.

    Replaced By: ``ServiceProviderPortalPasscodeRulesGetResponse()``

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    __slots__ = [
        "disallow_repeated_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


class ServiceProviderVoiceMessagingGroupGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderVoiceMessagingGroupGetRequest()``.

    Contains the service provider's or enterprise's voice messaging settings.

    Attributes:
        delivery_from_address: deliveryFromAddress
        notification_from_address: notificationFromAddress
        voice_portal_lockout_from_address: voicePortalLockoutFromAddress
        use_system_default_delivery_from_address: useSystemDefaultDeliveryFromAddress
        use_system_default_notification_from_address:
            useSystemDefaultNotificationFromAddress
        use_system_default_voice_portal_lockout_from_address:
            useSystemDefaultVoicePortalLockoutFromAddress
    """

    __slots__ = [
        "delivery_from_address",
        "notification_from_address",
        "voice_portal_lockout_from_address",
        "use_system_default_delivery_from_address",
        "use_system_default_notification_from_address",
        "use_system_default_voice_portal_lockout_from_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("delivery_from_address", "deliveryFromAddress", str),
            E("notification_from_address", "notificationFromAddress", str),
            E("voice_portal_lockout_from_address", "voicePortalLockoutFromAddress", str),
            E(
                "use_system_default_delivery_from_address",
                "useSystemDefaultDeliveryFromAddress",
                bool,
                is_required=True,
            ),
            E(
                "use_system_default_notification_from_address",
                "useSystemDefaultNotificationFromAddress",
                bool,
                is_required=True,
            ),
            E(
                "use_system_default_voice_portal_lockout_from_address",
                "useSystemDefaultVoicePortalLockoutFromAddress",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse(OCIResponse):
    """
    Response to the ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest()``.

    Replaced By: ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse16()``

    Attributes:
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file_description: voicePortalGreetingFileDescription
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file_description: voiceMessagingGreetingFileDescription
    """

    __slots__ = [
        "voice_portal_greeting_selection",
        "voice_portal_greeting_file_description",
        "voice_messaging_greeting_selection",
        "voice_messaging_greeting_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "voice_portal_greeting_selection",
                "voicePortalGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_portal_greeting_file_description",
                "voicePortalGreetingFileDescription",
                str,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_messaging_greeting_file_description",
                "voiceMessagingGreetingFileDescription",
                str,
            ),
        )


class ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse16(OCIResponse):
    """
    Response to the
    ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest16()``.


    Attributes:
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file_description: voicePortalGreetingFileDescription
        voice_portal_greeting_media_file_type: voicePortalGreetingMediaFileType
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file_description: voiceMessagingGreetingFileDescription
        voice_messaging_greeting_media_file_type: voiceMessagingGreetingMediaFileType
    """

    __slots__ = [
        "voice_portal_greeting_selection",
        "voice_portal_greeting_file_description",
        "voice_portal_greeting_media_file_type",
        "voice_messaging_greeting_selection",
        "voice_messaging_greeting_file_description",
        "voice_messaging_greeting_media_file_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "voice_portal_greeting_selection",
                "voicePortalGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_portal_greeting_file_description",
                "voicePortalGreetingFileDescription",
                str,
            ),
            E(
                "voice_portal_greeting_media_file_type",
                "voicePortalGreetingMediaFileType",
                str,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_messaging_greeting_file_description",
                "voiceMessagingGreetingFileDescription",
                str,
            ),
            E(
                "voice_messaging_greeting_media_file_type",
                "voiceMessagingGreetingMediaFileType",
                str,
            ),
        )


class ServiceProviderVoiceMessagingGroupGetVoicePortalResponse(OCIResponse):
    """
    Response to ``ServiceProviderVoiceMessagingGroupGetVoicePortalRequest()``.


    Attributes:
        voice_portal_scope: voicePortalScope
    """

    __slots__ = [
        "voice_portal_scope",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("voice_portal_scope", "voicePortalScope", str, is_required=True),
        )


class ServiceProviderZoneCallingRestrictionsGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderZoneCallingRestrictionsGetRequest()``

    Attributes:
        enable_zone_calling_restrictions: enableZoneCallingRestrictions
        enable_origination_roaming_restrictions: enableOriginationRoamingRestrictions
        enable_emergency_origination_roaming_restrictions:
            enableEmergencyOriginationRoamingRestrictions
        enable_termination_roaming_restrictions: enableTerminationRoamingRestrictions
    """

    __slots__ = [
        "enable_zone_calling_restrictions",
        "enable_origination_roaming_restrictions",
        "enable_emergency_origination_roaming_restrictions",
        "enable_termination_roaming_restrictions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_zone_calling_restrictions",
                "enableZoneCallingRestrictions",
                bool,
                is_required=True,
            ),
            E(
                "enable_origination_roaming_restrictions",
                "enableOriginationRoamingRestrictions",
                bool,
                is_required=True,
            ),
            E(
                "enable_emergency_origination_roaming_restrictions",
                "enableEmergencyOriginationRoamingRestrictions",
                bool,
                is_required=True,
            ),
            E(
                "enable_termination_roaming_restrictions",
                "enableTerminationRoamingRestrictions",
                bool,
                is_required=True,
            ),
        )


class SystemASRParametersGetResponse(OCIResponse):
    """
    Response to ``SystemASRParametersGetRequest()``.

    Contains a list of system Application Server Registration parameters.

    Replaced By: ``SystemASRParametersGetResponse14sp5()``

    Attributes:
        max_transmissions: maxTransmissions
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        listening_port: listeningPort
    """

    __slots__ = [
        "max_transmissions",
        "retransmission_delay_milli_seconds",
        "listening_port",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_transmissions", "maxTransmissions", int, is_required=True),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
                is_required=True,
            ),
            E("listening_port", "listeningPort", int, is_required=True),
        )


class SystemASRParametersGetResponse14sp5(OCIResponse):
    """
    Response to ``SystemASRParametersGetRequest14sp5()``.

    Contains a list of system Application Server Registration parameters.

    Attributes:
        max_transmissions: maxTransmissions
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        listening_port: listeningPort
        source_address: sourceAddress
    """

    __slots__ = [
        "max_transmissions",
        "retransmission_delay_milli_seconds",
        "listening_port",
        "source_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_transmissions", "maxTransmissions", int, is_required=True),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
                is_required=True,
            ),
            E("listening_port", "listeningPort", int, is_required=True),
            E("source_address", "sourceAddress", str),
        )


class SystemASRParametersGetResponse14sp7(OCIResponse):
    """
    Response to ``SystemASRParametersGetRequest14sp7()``.

    Contains a list of system Application Server Registration parameters.

    Attributes:
        max_transmissions: maxTransmissions
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        listening_port: listeningPort
    """

    __slots__ = [
        "max_transmissions",
        "retransmission_delay_milli_seconds",
        "listening_port",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_transmissions", "maxTransmissions", int, is_required=True),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
                is_required=True,
            ),
            E("listening_port", "listeningPort", int, is_required=True),
        )


class SystemAccessDeviceCustomTagGetListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceCustomTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System
    on a per-device profile basis.  The column headings are: "Tag Name", "Tag Value"

    Attributes:
        device_custom_tags_table: deviceCustomTagsTable
    """

    __slots__ = [
        "device_custom_tags_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_custom_tags_table",
                "deviceCustomTagsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``SystemAccessDeviceFileGetListResponse14sp8()``

    Attributes:
        device_files_table: deviceFilesTable
    """

    __slots__ = [
        "device_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_files_table",
                "deviceFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccessDeviceFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device profile basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL", "Extended Capture". The following
    columns are only used in AS data mode: "Extended Capture"

    Attributes:
        device_files_table: deviceFilesTable
    """

    __slots__ = [
        "device_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_files_table",
                "deviceFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest()``.

    Replaced By: ``SystemAccessDeviceFileGetResponse14sp8()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
        )


class SystemAccessDeviceFileGetResponse14sp8(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest14sp8()``.

    Replaced by: ``SystemAccessDeviceFileGetResponse16sp1()``

    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
        )


class SystemAccessDeviceFileGetResponse16sp1(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest16sp1()``.


    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "access_url",
        "repository_url",
        "template_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
        )


class SystemAccessDeviceFileGetResponse20(OCIResponse):
    """
    Response to ``SystemAccessDeviceFileGetRequest20()``.


    Attributes:
        file_source: fileSource
        configuration_file_name: configurationFileName
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
        extended_capture_enabled: extendedCaptureEnabled
        extended_capture_url: extendedCaptureURL
    """

    __slots__ = [
        "file_source",
        "configuration_file_name",
        "access_url",
        "repository_url",
        "template_url",
        "extended_capture_enabled",
        "extended_capture_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
            E("extended_capture_enabled", "extendedCaptureEnabled", bool),
            E("extended_capture_url", "extendedCaptureURL", str),
        )


class SystemAccessDeviceGetAllResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetAllRequest()``.

    Contains a table of devices configured in the entire system.  The column headings are:
    "Service Provider Id", "Is Enterprise", "Group Id", "Device Name", "Device Type", "Net
    Address", "MAC Address", "Status".

    Attributes:
        access_device_table: accessDeviceTable
    """

    __slots__ = [
        "access_device_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_device_table",
                "accessDeviceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccessDeviceGetListResponse14(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetListRequest14()``.

    Contains a table of devices defined at the System-level.  The column headings are:
    "Device Name", "Device Type", "Available Ports", "Net Address" and "MAC Address",
    "Status", "Version".

    Attributes:
        access_device_table: accessDeviceTable
    """

    __slots__ = [
        "access_device_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_device_table",
                "accessDeviceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccessDeviceGetUserListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetUserListRequest()``.

    The column headings for the deviceUserTable are: "Line/Port", "Last Name", "First
    Name", "Phone Number", "Service Provider Id", "Group Id", "User Id", "User Type",
    "Endpoint Type", "Primary Line/Port", "Order", "Extension", "Department", "Email
    Address", "Private Identity". If the identity/device profile is an identity, the table
    will contain a row for each TEL-URI in the Phone Number column.  If the
    identity/device profile is a real device, rows for the alternate numbers are not
    included.  The User Type column contains one of the enumerated UserType values.  The
    Endpoint Type column contains one of the enumerated EndpointType values.  The Private
    Identity column is empty is AS mode.

    Attributes:
        device_user_table: deviceUserTable
    """

    __slots__ = [
        "device_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_user_table",
                "deviceUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccessDeviceMonitorGetDeviceTypeListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceMonitorGetDeviceTypeListRequest()``.


    Attributes:
        device_type: deviceType
    """

    __slots__ = [
        "device_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_array=True),
        )


class SystemAccessDeviceMonitorParametersGetResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceMonitorParametersGetListRequest()``.

    Contains a list of system Access Device Monitor parameters.

    Attributes:
        polling_interval_minutes: pollingIntervalMinutes
    """

    __slots__ = [
        "polling_interval_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "polling_interval_minutes",
                "pollingIntervalMinutes",
                int,
                is_required=True,
            ),
        )


class SystemAccessDeviceTypeGetEnhancedConfigurableListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceTypeGetEnhancedConfigurableListRequest()``.

    Contains a table with columns: "Access Device Type", "Enhanced Configuration Type",
    "Supports Reset". The "Enhanced Configuration Type" column contains one of the
    AccessDeviceEnhancedConfigurationType14 enumerated values.  The "Supports Reset"
    column is a boolean flag indicating the device can be remotely reset.

    Attributes:
        device_type_table: deviceTypeTable
    """

    __slots__ = [
        "device_type_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_type_table",
                "deviceTypeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccessDeviceTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceTypeGetListRequest()``.


    Attributes:
        device_type: deviceType
    """

    __slots__ = [
        "device_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True, is_array=True),
        )


class SystemAccountingGetChargingFunctionElementServerListResponse(OCIResponse):
    """
    Response to ``SystemAccountingGetChargingFunctionElementServerListRequest()``.

    The accounting charging function element Server table column headings are: "Address",
    "Extended Net Address", "Type", "Description".

    Attributes:
        charging_function_element_server_table: chargingFunctionElementServerTable
    """

    __slots__ = [
        "charging_function_element_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "charging_function_element_server_table",
                "chargingFunctionElementServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccountingGetRadiusServerListResponse(OCIResponse):
    """
    Response to ``SystemAccountingGetRadiusServerListRequest()``.

    The Radius Server table column headings are: "Net Address", "Port", "Description"

    Attributes:
        radius_server_table: radiusServerTable
    """

    __slots__ = [
        "radius_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "radius_server_table",
                "radiusServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAccountingInhibitedAttributeValuePairCodeGetListResponse(OCIResponse):
    """
    Response to ``SystemAccountingInhibitedAttributeValuePairCodeGetListRequest()``.

    Contains a 2 column table with column headings "Attribute Value Pair Code" and "Vendor
    Id".

    Attributes:
        inhibited_attribute_value_pair_code_table: inhibitedAttributeValuePairCodeTable
    """

    __slots__ = [
        "inhibited_attribute_value_pair_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "inhibited_attribute_value_pair_code_table",
                "inhibitedAttributeValuePairCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAdminGetListResponse(OCIResponse):
    """
    Response to ``SystemAdminGetListRequest()``.

    Contains a 6 column table with column headings "Administrator ID", "Last Name", "First
    Name", "Type", "Read Only", "Language".

    Attributes:
        system_admin_table: systemAdminTable
    """

    __slots__ = [
        "system_admin_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "system_admin_table",
                "systemAdminTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAdminGetResponse(OCIResponse):
    """
    Response to the ``SystemAdminGetRequest()``.

    The response contains the system or provisioning administrators profile information.

    Attributes:
        first_name: firstName
        last_name: lastName
        language: language
        admin_type: adminType
        read_only: readOnly
    """

    __slots__ = [
        "first_name",
        "last_name",
        "language",
        "admin_type",
        "read_only",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("language", "language", str, is_required=True),
            E("admin_type", "adminType", str, is_required=True),
            E("read_only", "readOnly", bool, is_required=True),
        )


class SystemAdviceOfChargeCostInformationSourceGetListResponse(OCIResponse):
    """
    Response to ``SystemAdviceOfChargeCostInformationSourceGetListRequest()``.

    Contains a table with column headings: "PeerIdentity", "Priority"

    Attributes:
        cost_information_source_table: costInformationSourceTable
    """

    __slots__ = [
        "cost_information_source_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "cost_information_source_table",
                "costInformationSourceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``SystemAdviceOfChargeGetRequest()``.

    Contains a list of system Advice of Charge parameters.

    Attributes:
        delay_between_notification_seconds: delayBetweenNotificationSeconds
        incoming_aoc_handling: incomingAocHandling
        cost_information_source: costInformationSource
    """

    __slots__ = [
        "delay_between_notification_seconds",
        "incoming_aoc_handling",
        "cost_information_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
                is_required=True,
            ),
            E("incoming_aoc_handling", "incomingAocHandling", str, is_required=True),
            E("cost_information_source", "costInformationSource", str),
        )


class SystemAdviceOfChargeGetResponse19sp1(OCIResponse):
    """
    Response to ``SystemAdviceOfChargeGetRequest()``.

    Contains a list of system Advice of Charge parameters.

    Attributes:
        delay_between_notification_seconds: delayBetweenNotificationSeconds
        incoming_aoc_handling: incomingAocHandling
        use_ocs_enquiry: useOCSEnquiry
        ocs_enquiry_type: OCSEnquiryType
    """

    __slots__ = [
        "delay_between_notification_seconds",
        "incoming_aoc_handling",
        "use_ocs_enquiry",
        "ocs_enquiry_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
                is_required=True,
            ),
            E("incoming_aoc_handling", "incomingAocHandling", str, is_required=True),
            E("use_ocs_enquiry", "useOCSEnquiry", bool, is_required=True),
            E("ocs_enquiry_type", "OCSEnquiryType", str, is_required=True),
        )


class SystemAliasGetListResponse(OCIResponse):
    """
    Response to ``SystemAliasGetListRequest()``.

    Contains the list of all network alias' for the Application Server.

    Attributes:
        alias_net_address: aliasNetAddress
    """

    __slots__ = [
        "alias_net_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("alias_net_address", "aliasNetAddress", str, is_array=True),
        )


class SystemAnonymousCallRejectionGetResponse(OCIResponse):
    """
    Response to the ``SystemAnonymousCallRejectionGetRequest()``.

    The response contains the anonymous call rejection system.".

    Attributes:
        pai_required: paiRequired
        screen_only_local_calls: screenOnlyLocalCalls
    """

    __slots__ = [
        "pai_required",
        "screen_only_local_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pai_required", "paiRequired", bool, is_required=True),
            E("screen_only_local_calls", "screenOnlyLocalCalls", bool, is_required=True),
        )


class SystemApplicationControllerGetListResponse(OCIResponse):
    """
    Response to the ``SystemApplicationControllerGetListRequest()``.

    Contains a table with column headings: "Name", "Subscriber Id", "Channel Set Id",
    "Status". The column values for "Status" can either be "ready" or "notReady".

    Attributes:
        application_controller_table: applicationControllerTable
    """

    __slots__ = [
        "application_controller_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "application_controller_table",
                "applicationControllerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemAttendantConsoleGetResponse(OCIResponse):
    """
    Response to ``SystemAttendantConsoleGetRequest()``.

    Contains a list of Attendant Console parameters.

    Attributes:
        max_monitored_users: maxMonitoredUsers
    """

    __slots__ = [
        "max_monitored_users",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_monitored_users", "maxMonitoredUsers", int, is_required=True),
        )


class SystemAuthenticationLockoutSettingsGetResponse(OCIResponse):
    """
    Response to ``SystemAuthenticationLockoutSettingsGetRequest()``.

    Contains the authentication lockout settings in the system.

    Attributes:
        counter_reset_interval_days: counterResetIntervalDays
        counter_reset_hour: counterResetHour
        counter_reset_minute: counterResetMinute
        emergency_sip_bypass_allowed: emergencySIPBypassAllowed
    """

    __slots__ = [
        "counter_reset_interval_days",
        "counter_reset_hour",
        "counter_reset_minute",
        "emergency_sip_bypass_allowed",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "counter_reset_interval_days",
                "counterResetIntervalDays",
                int,
                is_required=True,
            ),
            E("counter_reset_hour", "counterResetHour", int, is_required=True),
            E("counter_reset_minute", "counterResetMinute", int, is_required=True),
            E(
                "emergency_sip_bypass_allowed",
                "emergencySIPBypassAllowed",
                bool,
                is_required=True,
            ),
        )


class SystemAutomaticCallbackGetReleaseCauseListResponse(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetReleaseCauseListRequest()``.


    Attributes:
        release_cause: releaseCause
    """

    __slots__ = [
        "release_cause",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("release_cause", "releaseCause", str, is_array=True),
        )


class SystemAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest()``.

    Replaced By: ``SystemAutomaticCallbackGetResponse15()``

    Attributes:
        monitor_minutes: monitorMinutes
        wait_between_retry_originator_minutes: waitBetweenRetryOriginatorMinutes
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_callback_rings: maxCallbackRings
        max_retry_originator_minutes: maxRetryOriginatorMinutes
    """

    __slots__ = [
        "monitor_minutes",
        "wait_between_retry_originator_minutes",
        "max_monitors_per_originator",
        "max_callback_rings",
        "max_retry_originator_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("monitor_minutes", "monitorMinutes", int, is_required=True),
            E(
                "wait_between_retry_originator_minutes",
                "waitBetweenRetryOriginatorMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_monitors_per_originator",
                "maxMonitorsPerOriginator",
                int,
                is_required=True,
            ),
            E("max_callback_rings", "maxCallbackRings", int, is_required=True),
            E(
                "max_retry_originator_minutes",
                "maxRetryOriginatorMinutes",
                int,
                is_required=True,
            ),
        )


class SystemAutomaticCallbackGetResponse15(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest15()``.

    Replaced By: ``SystemAutomaticCallbackGetResponse15sp2()``

    Attributes:
        monitor_minutes: monitorMinutes
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_callback_rings: maxCallbackRings
        max_monitors_per_terminator: maxMonitorsPerTerminator
        terminator_idle_guard_seconds: terminatorIdleGuardSeconds
    """

    __slots__ = [
        "monitor_minutes",
        "max_monitors_per_originator",
        "max_callback_rings",
        "max_monitors_per_terminator",
        "terminator_idle_guard_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("monitor_minutes", "monitorMinutes", int, is_required=True),
            E(
                "max_monitors_per_originator",
                "maxMonitorsPerOriginator",
                int,
                is_required=True,
            ),
            E("max_callback_rings", "maxCallbackRings", int, is_required=True),
            E(
                "max_monitors_per_terminator",
                "maxMonitorsPerTerminator",
                int,
                is_required=True,
            ),
            E(
                "terminator_idle_guard_seconds",
                "terminatorIdleGuardSeconds",
                int,
                is_required=True,
            ),
        )


class SystemAutomaticCallbackGetResponse15sp2(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest15sp2()``.


    Attributes:
        monitor_minutes: monitorMinutes
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_callback_rings: maxCallbackRings
        max_monitors_per_terminator: maxMonitorsPerTerminator
        terminator_idle_guard_seconds: terminatorIdleGuardSeconds
        callback_method: callbackMethod
        polling_interval_seconds: pollingIntervalSeconds
    """

    __slots__ = [
        "monitor_minutes",
        "max_monitors_per_originator",
        "max_callback_rings",
        "max_monitors_per_terminator",
        "terminator_idle_guard_seconds",
        "callback_method",
        "polling_interval_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("monitor_minutes", "monitorMinutes", int, is_required=True),
            E(
                "max_monitors_per_originator",
                "maxMonitorsPerOriginator",
                int,
                is_required=True,
            ),
            E("max_callback_rings", "maxCallbackRings", int, is_required=True),
            E(
                "max_monitors_per_terminator",
                "maxMonitorsPerTerminator",
                int,
                is_required=True,
            ),
            E(
                "terminator_idle_guard_seconds",
                "terminatorIdleGuardSeconds",
                int,
                is_required=True,
            ),
            E("callback_method", "callbackMethod", str, is_required=True),
            E(
                "polling_interval_seconds",
                "pollingIntervalSeconds",
                int,
                is_required=True,
            ),
        )


class SystemAutomaticCallbackGetResponse17(OCIResponse):
    """
    Response to ``SystemAutomaticCallbackGetRequest17()``.


    Attributes:
        monitor_minutes: monitorMinutes
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_callback_rings: maxCallbackRings
        max_monitors_per_terminator: maxMonitorsPerTerminator
        terminator_idle_guard_seconds: terminatorIdleGuardSeconds
        callback_method: callbackMethod
        polling_interval_seconds: pollingIntervalSeconds
        activation_digit: activationDigit
    """

    __slots__ = [
        "monitor_minutes",
        "max_monitors_per_originator",
        "max_callback_rings",
        "max_monitors_per_terminator",
        "terminator_idle_guard_seconds",
        "callback_method",
        "polling_interval_seconds",
        "activation_digit",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("monitor_minutes", "monitorMinutes", int, is_required=True),
            E(
                "max_monitors_per_originator",
                "maxMonitorsPerOriginator",
                int,
                is_required=True,
            ),
            E("max_callback_rings", "maxCallbackRings", int, is_required=True),
            E(
                "max_monitors_per_terminator",
                "maxMonitorsPerTerminator",
                int,
                is_required=True,
            ),
            E(
                "terminator_idle_guard_seconds",
                "terminatorIdleGuardSeconds",
                int,
                is_required=True,
            ),
            E("callback_method", "callbackMethod", str, is_required=True),
            E(
                "polling_interval_seconds",
                "pollingIntervalSeconds",
                int,
                is_required=True,
            ),
            E("activation_digit", "activationDigit", int, is_required=True),
        )


class SystemBCCTGetOCIInterfaceAddressListResponse(OCIResponse):
    """
    Response to ``SystemBCCTGetOCIInterfaceAddressListRequest()``.


    Attributes:
        interface_net_address: interfaceNetAddress
    """

    __slots__ = [
        "interface_net_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("interface_net_address", "interfaceNetAddress", str, is_array=True),
        )


class SystemBroadCloudGetResponse(OCIResponse):
    """
    Response to the ``SystemBroadCloudGetRequest()``.

    The response contains the system interface attributes for Messaging Server.

    Attributes:
        provisioning_url: provisioningUrl
        provisioning_user_id: provisioningUserId
        enable_synchronization: enableSynchronization
    """

    __slots__ = [
        "provisioning_url",
        "provisioning_user_id",
        "enable_synchronization",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("provisioning_url", "provisioningUrl", str),
            E("provisioning_user_id", "provisioningUserId", str),
            E("enable_synchronization", "enableSynchronization", bool, is_required=True),
        )


class SystemBroadWorksMobileManagerGetResponse(OCIResponse):
    """
    Response to the ``SystemBroadWorksMobileManagerGetRequest()``

    Attributes:
        scf_api_net_address1: scfApiNetAddress1
        scf_api_net_address2: scfApiNetAddress2
        user_name: userName
        email_from_address: emailFromAddress
        scf_ims_only: scfIMSOnly
        signaling_ip_address: signalingIPAddress
        signaling_port: signalingPort
    """

    __slots__ = [
        "scf_api_net_address1",
        "scf_api_net_address2",
        "user_name",
        "email_from_address",
        "scf_ims_only",
        "signaling_ip_address",
        "signaling_port",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("scf_api_net_address1", "scfApiNetAddress1", str),
            E("scf_api_net_address2", "scfApiNetAddress2", str),
            E("user_name", "userName", str),
            E("email_from_address", "emailFromAddress", str),
            E("scf_ims_only", "scfIMSOnly", bool, is_required=True),
            E("signaling_ip_address", "signalingIPAddress", str),
            E("signaling_port", "signalingPort", int),
        )


class SystemBroadWorksMobilityGetIMRNListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityDnGetListRequest()``.


    Attributes:
        imrn_number: imrnNumber
    """

    __slots__ = [
        "imrn_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("imrn_number", "imrnNumber", str, is_array=True),
        )


class SystemBroadWorksMobilityGetMobileNetworkIMRNListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityGetMobileNetworkIMRNListRequest()``.


    Attributes:
        imrn_number: imrnNumber
    """

    __slots__ = [
        "imrn_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("imrn_number", "imrnNumber", str, is_array=True),
        )


class SystemBroadWorksMobilityGetResponse(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest()``.

    Replaced by: ``SystemBroadWorksMobilityGetResponse17sp4()``.

    Attributes:
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        imrn_timeout_millisecnds: imrnTimeoutMillisecnds
        scf_signaling_ip_address: scfSignalingIPAddress
        scf_signaling_port: scfSignalingPort
    """

    __slots__ = [
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "imrn_timeout_millisecnds",
        "scf_signaling_ip_address",
        "scf_signaling_port",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E(
                "imrn_timeout_millisecnds",
                "imrnTimeoutMillisecnds",
                int,
                is_required=True,
            ),
            E("scf_signaling_ip_address", "scfSignalingIPAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
        )


class SystemBroadWorksMobilityGetResponse17sp4(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest17sp4()``.


    Attributes:
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        imrn_timeout_millisecnds: imrnTimeoutMillisecnds
        scf_signaling_net_address: scfSignalingNetAddress
        scf_signaling_port: scfSignalingPort
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
    """

    __slots__ = [
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "imrn_timeout_millisecnds",
        "scf_signaling_net_address",
        "scf_signaling_port",
        "refresh_period_seconds",
        "max_consecutive_failures",
        "max_response_wait_time_milliseconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E(
                "imrn_timeout_millisecnds",
                "imrnTimeoutMillisecnds",
                int,
                is_required=True,
            ),
            E("scf_signaling_net_address", "scfSignalingNetAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
            E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
            E(
                "max_consecutive_failures",
                "maxConsecutiveFailures",
                int,
                is_required=True,
            ),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
                is_required=True,
            ),
        )


class SystemBroadWorksMobilityGetResponse19sp1(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest19sp1()``.

    Replaced by ``SystemBroadWorksMobilityGetResponse21()``

    Attributes:
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        imrn_timeout_millisecnds: imrnTimeoutMillisecnds
        scf_signaling_net_address: scfSignalingNetAddress
        scf_signaling_port: scfSignalingPort
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
        enable_announcement_suppression: enableAnnouncementSuppression
    """

    __slots__ = [
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "imrn_timeout_millisecnds",
        "scf_signaling_net_address",
        "scf_signaling_port",
        "refresh_period_seconds",
        "max_consecutive_failures",
        "max_response_wait_time_milliseconds",
        "enable_announcement_suppression",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E(
                "imrn_timeout_millisecnds",
                "imrnTimeoutMillisecnds",
                int,
                is_required=True,
            ),
            E("scf_signaling_net_address", "scfSignalingNetAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
            E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
            E(
                "max_consecutive_failures",
                "maxConsecutiveFailures",
                int,
                is_required=True,
            ),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "enable_announcement_suppression",
                "enableAnnouncementSuppression",
                bool,
                is_required=True,
            ),
        )


class SystemBroadWorksMobilityGetResponse21(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityGetRequest21()``.


    Attributes:
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        imrn_timeout_millisecnds: imrnTimeoutMillisecnds
    """

    __slots__ = [
        "enable_location_services",
        "enable_msrn_lookup",
        "enable_mobile_state_checking",
        "deny_call_originations",
        "deny_call_terminations",
        "imrn_timeout_millisecnds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_location_services",
                "enableLocationServices",
                bool,
                is_required=True,
            ),
            E("enable_msrn_lookup", "enableMSRNLookup", bool, is_required=True),
            E(
                "enable_mobile_state_checking",
                "enableMobileStateChecking",
                bool,
                is_required=True,
            ),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E(
                "imrn_timeout_millisecnds",
                "imrnTimeoutMillisecnds",
                int,
                is_required=True,
            ),
        )


class SystemBroadWorksMobilityMobileNetworkGetListResponse(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityMobileNetworkGetListRequest()``.

    Contains a table with column headings: "Name", "SCF Signaling Net Address", "SCF
    Signaling Port"

    Attributes:
        mobile_network_table: mobileNetworkTable
    """

    __slots__ = [
        "mobile_network_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "mobile_network_table",
                "mobileNetworkTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemBroadWorksMobilityMobileNetworkGetResponse(OCIResponse):
    """
    The response to a ``SystemBroadWorksMobilityMobileNetworkGetRequest()``.


    Attributes:
        scf_signaling_net_address: scfSignalingNetAddress
        scf_signaling_port: scfSignalingPort
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
        enable_announcement_suppression: enableAnnouncementSuppression
        service_access_code_list_name: serviceAccessCodeListName
    """

    __slots__ = [
        "scf_signaling_net_address",
        "scf_signaling_port",
        "refresh_period_seconds",
        "max_consecutive_failures",
        "max_response_wait_time_milliseconds",
        "enable_announcement_suppression",
        "service_access_code_list_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("scf_signaling_net_address", "scfSignalingNetAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
            E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
            E(
                "max_consecutive_failures",
                "maxConsecutiveFailures",
                int,
                is_required=True,
            ),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "enable_announcement_suppression",
                "enableAnnouncementSuppression",
                bool,
                is_required=True,
            ),
            E("service_access_code_list_name", "serviceAccessCodeListName", str),
        )


class SystemBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListResponse(OCIResponse):
    """
    Response to
    ``SystemBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListRequest()``.

    The response contains a table with columns: "Mobile Number", "Mobile Network",
    "Service Provider Id", "Is Enterprise", "Group Id", "User Id", "Last Name", "First
    Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number" and "Extension".

    Attributes:
        mobile_subscriber_directory_numbers_summary_table:
            mobileSubscriberDirectoryNumbersSummaryTable
    """

    __slots__ = [
        "mobile_subscriber_directory_numbers_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "mobile_subscriber_directory_numbers_summary_table",
                "mobileSubscriberDirectoryNumbersSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemBroadWorksMobilityServiceAccessCodeGetListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeGetListRequest()``.

    Contains a table with column headings: "Country Code", "Service Access Code",
    "Description". Replaced by SystemBroadWorksMobilityServiceAccessCodeGetListReponse21.

    Attributes:
        service_access_code_table: serviceAccessCodeTable
    """

    __slots__ = [
        "service_access_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_access_code_table",
                "serviceAccessCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemBroadWorksMobilityServiceAccessCodeGetListResponse21(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeGetListRequest21()``.

    Contains a table with column headings: "Country Code", "Service Access Code",
    "Description"

    Attributes:
        service_access_code_table: serviceAccessCodeTable
    """

    __slots__ = [
        "service_access_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_access_code_table",
                "serviceAccessCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemBroadWorksMobilityServiceAccessCodeListGetListResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeListGetListRequest()``.


    Attributes:
        name: name
    """

    __slots__ = [
        "name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_array=True),
        )


class SystemBroadWorksMobilityServiceAccessCodeListUsageGetResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksMobilityServiceAccessCodeListUsageGetRequest()``.


    Attributes:
        mobile_network_name: mobileNetworkName
    """

    __slots__ = [
        "mobile_network_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mobile_network_name", "mobileNetworkName", str, is_array=True),
        )


class SystemBroadWorksReceptionistEnterpriseGetResponse(OCIResponse):
    """
    Response to ``SystemBroadWorksReceptionistEnterpriseGetRequest()``.

    Contains a list of BroadWorks Receptionist - Enterprise parameters.

    Attributes:
        max_monitored_users: maxMonitoredUsers
    """

    __slots__ = [
        "max_monitored_users",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_monitored_users", "maxMonitoredUsers", int, is_required=True),
        )


class SystemBusyLampFieldGetResponse(OCIResponse):
    """
    Response to ``SystemBusyLampFieldGetRequest()``.


    Attributes:
        display_local_user_identity_last_name_first: displayLocalUserIdentityLastNameFirst
    """

    __slots__ = [
        "display_local_user_identity_last_name_first",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "display_local_user_identity_last_name_first",
                "displayLocalUserIdentityLastNameFirst",
                bool,
                is_required=True,
            ),
        )


class SystemBusyLampFieldGetResponse18(OCIResponse):
    """
    Response to ``SystemBusyLampFieldGetRequest18()``.

    The following elements are only used in AS data mode: forceUseOfTCP

    Attributes:
        display_local_user_identity_last_name_first: displayLocalUserIdentityLastNameFirst
        force_use_of_tcp: forceUseOfTCP
    """

    __slots__ = [
        "display_local_user_identity_last_name_first",
        "force_use_of_tcp",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "display_local_user_identity_last_name_first",
                "displayLocalUserIdentityLastNameFirst",
                bool,
                is_required=True,
            ),
            E("force_use_of_tcp", "forceUseOfTCP", bool, is_required=True),
        )


class SystemBwDiameterBaseDataGetResponse(OCIResponse):
    """
    Response to ``SystemBwDiameterBaseDataGetRequest()``.

    Contains a list of System Diameter base parameters.

    Attributes:
        xs_realm: xsRealm
        xs_listening_port: xsListeningPort
        ps_realm: psRealm
        ps_listening_port: psListeningPort
        ps_relay_through_xs: psRelayThroughXs
        xs_relay_listening_port: xsRelayListeningPort
        tc_timer_seconds: tcTimerSeconds
        tw_timer_seconds: twTimerSeconds
        request_timer_seconds: requestTimerSeconds
        busy_peer_detection_outstanding_txn_count: busyPeerDetectionOutstandingTxnCount
        busy_peer_restore_outstanding_txn_count: busyPeerRestoreOutstandingTxnCount
        dynamic_entry_inactivity_timer_hours: dynamicEntryInactivityTimerHours
    """

    __slots__ = [
        "xs_realm",
        "xs_listening_port",
        "ps_realm",
        "ps_listening_port",
        "ps_relay_through_xs",
        "xs_relay_listening_port",
        "tc_timer_seconds",
        "tw_timer_seconds",
        "request_timer_seconds",
        "busy_peer_detection_outstanding_txn_count",
        "busy_peer_restore_outstanding_txn_count",
        "dynamic_entry_inactivity_timer_hours",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("xs_realm", "xsRealm", str),
            E("xs_listening_port", "xsListeningPort", int, is_required=True),
            E("ps_realm", "psRealm", str),
            E("ps_listening_port", "psListeningPort", int, is_required=True),
            E("ps_relay_through_xs", "psRelayThroughXs", bool, is_required=True),
            E("xs_relay_listening_port", "xsRelayListeningPort", int, is_required=True),
            E("tc_timer_seconds", "tcTimerSeconds", int, is_required=True),
            E("tw_timer_seconds", "twTimerSeconds", int, is_required=True),
            E("request_timer_seconds", "requestTimerSeconds", int, is_required=True),
            E(
                "busy_peer_detection_outstanding_txn_count",
                "busyPeerDetectionOutstandingTxnCount",
                int,
                is_required=True,
            ),
            E(
                "busy_peer_restore_outstanding_txn_count",
                "busyPeerRestoreOutstandingTxnCount",
                int,
                is_required=True,
            ),
            E(
                "dynamic_entry_inactivity_timer_hours",
                "dynamicEntryInactivityTimerHours",
                int,
                is_required=True,
            ),
        )


class SystemBwDiameterBaseDataGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemBwDiameterBaseDataGetRequest17sp3()``.

    Contains a list of System Diameter base parameters.

    Attributes:
        xs_realm: xsRealm
        xs_listening_port: xsListeningPort
        ps_realm: psRealm
        ps_listening_port: psListeningPort
        ps_relay_through_xs: psRelayThroughXs
        xs_relay_listening_port: xsRelayListeningPort
        tc_timer_seconds: tcTimerSeconds
        tw_timer_seconds: twTimerSeconds
        request_timer_seconds: requestTimerSeconds
        busy_peer_detection_outstanding_txn_count: busyPeerDetectionOutstandingTxnCount
        busy_peer_restore_outstanding_txn_count: busyPeerRestoreOutstandingTxnCount
        dynamic_entry_inactivity_timer_hours: dynamicEntryInactivityTimerHours
        advertised_offline_billing_application: advertisedOfflineBillingApplication
        advertised_online_billing_application: advertisedOnlineBillingApplication
    """

    __slots__ = [
        "xs_realm",
        "xs_listening_port",
        "ps_realm",
        "ps_listening_port",
        "ps_relay_through_xs",
        "xs_relay_listening_port",
        "tc_timer_seconds",
        "tw_timer_seconds",
        "request_timer_seconds",
        "busy_peer_detection_outstanding_txn_count",
        "busy_peer_restore_outstanding_txn_count",
        "dynamic_entry_inactivity_timer_hours",
        "advertised_offline_billing_application",
        "advertised_online_billing_application",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("xs_realm", "xsRealm", str),
            E("xs_listening_port", "xsListeningPort", int, is_required=True),
            E("ps_realm", "psRealm", str),
            E("ps_listening_port", "psListeningPort", int, is_required=True),
            E("ps_relay_through_xs", "psRelayThroughXs", bool, is_required=True),
            E("xs_relay_listening_port", "xsRelayListeningPort", int, is_required=True),
            E("tc_timer_seconds", "tcTimerSeconds", int, is_required=True),
            E("tw_timer_seconds", "twTimerSeconds", int, is_required=True),
            E("request_timer_seconds", "requestTimerSeconds", int, is_required=True),
            E(
                "busy_peer_detection_outstanding_txn_count",
                "busyPeerDetectionOutstandingTxnCount",
                int,
                is_required=True,
            ),
            E(
                "busy_peer_restore_outstanding_txn_count",
                "busyPeerRestoreOutstandingTxnCount",
                int,
                is_required=True,
            ),
            E(
                "dynamic_entry_inactivity_timer_hours",
                "dynamicEntryInactivityTimerHours",
                int,
                is_required=True,
            ),
            E(
                "advertised_offline_billing_application",
                "advertisedOfflineBillingApplication",
                str,
                is_required=True,
            ),
            E(
                "advertised_online_billing_application",
                "advertisedOnlineBillingApplication",
                str,
                is_required=True,
            ),
        )


class SystemBwDiameterPeerGetListResponse(OCIResponse):
    """
    Contains a 5 column table with column headings 'Instance', 'Identity', 'IP Address',
    'Port', and 'Enabled'.

    One row is present for each peer.

    Attributes:
        peer_table: peerTable
    """

    __slots__ = [
        "peer_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "peer_table",
                "peerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemBwDiameterRoutingPeerGetListResponse(OCIResponse):
    """
    Contains a 6 column table with column headings 'Instance', 'Realm', 'ApplicationID',
    'Identity, 'Priority', and 'Weight'.

    One row is present for each Diameter Routing Peer.

    Attributes:
        routing_peer_table: routingPeerTable
    """

    __slots__ = [
        "routing_peer_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "routing_peer_table",
                "routingPeerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemBwDiameterRoutingRealmGetListResponse(OCIResponse):
    """
    Contains a 4 column table with column headings 'Instance', 'Realm', 'ApplicationID',
    and 'Default'.

    One row is present for each Diameter routing realm.

    Attributes:
        routing_realm_table: routingRealmTable
    """

    __slots__ = [
        "routing_realm_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "routing_realm_table",
                "routingRealmTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCAPGetACLListResponse14(OCIResponse):
    """
    Response to ``SystemCAPGetACLListRequest14()``.

    The table columns are: "Net Address" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCAPParametersGetResponse(OCIResponse):
    """
    Response to ``SystemCAPParametersGetRequest()``.

    Contains a list of system CAP parameters.

    Replaced By: ``SystemCAPParametersGetResponse14sp3()``

    Attributes:
        server_port: serverPort
        max_client_connections: maxClientConnections
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_minutes: connectionPingIntervalMinutes
        ccc2_server_port: CCC2ServerPort
        ccc2_max_client_connections: CCC2MaxClientConnections
    """

    __slots__ = [
        "server_port",
        "max_client_connections",
        "enable_connection_ping",
        "connection_ping_interval_minutes",
        "ccc2_server_port",
        "ccc2_max_client_connections",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int, is_required=True),
            E("max_client_connections", "maxClientConnections", int, is_required=True),
            E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
            E(
                "connection_ping_interval_minutes",
                "connectionPingIntervalMinutes",
                int,
                is_required=True,
            ),
            E("ccc2_server_port", "CCC2ServerPort", int, is_required=True),
            E(
                "ccc2_max_client_connections",
                "CCC2MaxClientConnections",
                int,
                is_required=True,
            ),
        )


class SystemCAPParametersGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemCAPParametersGetListRequest14sp3()``.

    Contains a list of system CAP parameters.  Replaced by
    ``SystemCAPParametersGetResponse19()``

    Attributes:
        server_port: serverPort
        max_client_connections: maxClientConnections
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_minutes: connectionPingIntervalMinutes
        ccc2_server_port: CCC2ServerPort
        ccc2_max_client_connections: CCC2MaxClientConnections
        cap_server_call_center_port: capServerCallCenterPort
        cap_server_call_center_max_client_connections:
            capServerCallCenterMaxClientConnections
    """

    __slots__ = [
        "server_port",
        "max_client_connections",
        "enable_connection_ping",
        "connection_ping_interval_minutes",
        "ccc2_server_port",
        "ccc2_max_client_connections",
        "cap_server_call_center_port",
        "cap_server_call_center_max_client_connections",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int, is_required=True),
            E("max_client_connections", "maxClientConnections", int, is_required=True),
            E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
            E(
                "connection_ping_interval_minutes",
                "connectionPingIntervalMinutes",
                int,
                is_required=True,
            ),
            E("ccc2_server_port", "CCC2ServerPort", int, is_required=True),
            E(
                "ccc2_max_client_connections",
                "CCC2MaxClientConnections",
                int,
                is_required=True,
            ),
            E(
                "cap_server_call_center_port",
                "capServerCallCenterPort",
                int,
                is_required=True,
            ),
            E(
                "cap_server_call_center_max_client_connections",
                "capServerCallCenterMaxClientConnections",
                int,
                is_required=True,
            ),
        )


class SystemCAPParametersGetResponse19(OCIResponse):
    """
    Response to ``SystemCAPParametersGetRequest19()``.

    Contains a list of system CAP parameters.

    Attributes:
        server_port: serverPort
        max_client_connections: maxClientConnections
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_minutes: connectionPingIntervalMinutes
        ccc2_server_port: CCC2ServerPort
        ccc2_max_client_connections: CCC2MaxClientConnections
    """

    __slots__ = [
        "server_port",
        "max_client_connections",
        "enable_connection_ping",
        "connection_ping_interval_minutes",
        "ccc2_server_port",
        "ccc2_max_client_connections",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int, is_required=True),
            E("max_client_connections", "maxClientConnections", int, is_required=True),
            E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
            E(
                "connection_ping_interval_minutes",
                "connectionPingIntervalMinutes",
                int,
                is_required=True,
            ),
            E("ccc2_server_port", "CCC2ServerPort", int, is_required=True),
            E(
                "ccc2_max_client_connections",
                "CCC2MaxClientConnections",
                int,
                is_required=True,
            ),
        )


class SystemCPEConfigGetFileServerListResponse(OCIResponse):
    """
    Response to ``SystemCPEConfigGetFileServerListRequest()``.

    The table columns are: "Device Type", "FTP Host Net Address", "FTP User Id",
    "Directory" and "Passive FTP".

    Replaced By: ``SystemCPEConfigGetFileServerListResponse14sp6()``

    Attributes:
        file_server_table: fileServerTable
    """

    __slots__ = [
        "file_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_server_table",
                "fileServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCPEConfigGetFileServerListResponse14sp6(OCIResponse):
    """
    Response to ``SystemCPEConfigGetFileServerListRequest14sp6()``.

    The table columns are: "Device Type", "File Repository Name", "Directory", "Extended
    File Repository Name". The following columns are only used in AS data mode: "Extended
    File Repository Name"

    Attributes:
        file_server_table: fileServerTable
    """

    __slots__ = [
        "file_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_server_table",
                "fileServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCPEConfigParametersGetResponse(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest()``.

    Contains a list of system CPE Config parameters.

    Replaced By: ``SystemCPEConfigParametersGetResponse14sp6()``

    Attributes:
        enable_ip_device_management: enableIPDeviceManagement
        ftp_connect_timeout_seconds: ftpConnectTimeoutSeconds
        ftp_file_transfer_timeout_seconds: ftpFileTransferTimeoutSeconds
    """

    __slots__ = [
        "enable_ip_device_management",
        "ftp_connect_timeout_seconds",
        "ftp_file_transfer_timeout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_ip_device_management",
                "enableIPDeviceManagement",
                bool,
                is_required=True,
            ),
            E(
                "ftp_connect_timeout_seconds",
                "ftpConnectTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "ftp_file_transfer_timeout_seconds",
                "ftpFileTransferTimeoutSeconds",
                int,
                is_required=True,
            ),
        )


class SystemCPEConfigParametersGetResponse14sp6(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest14sp6()``.

    Contains a list of system CPE Config parameters.

    Attributes:
        enable_ip_device_management: enableIPDeviceManagement
        ftp_connect_timeout_seconds: ftpConnectTimeoutSeconds
        ftp_file_transfer_timeout_seconds: ftpFileTransferTimeoutSeconds
        pause_between_file_rebuild_milliseconds: pauseBetweenFileRebuildMilliseconds
        max_busy_time_minutes: maxBusyTimeMinutes
        device_access_app_server_cluster_name: deviceAccessAppServerClusterName
        file_rebuild_immediate: fileRebuildImmediate
        file_rebuild_daily: fileRebuildDaily
        file_rebuild_hourly: fileRebuildHourly
    """

    __slots__ = [
        "enable_ip_device_management",
        "ftp_connect_timeout_seconds",
        "ftp_file_transfer_timeout_seconds",
        "pause_between_file_rebuild_milliseconds",
        "max_busy_time_minutes",
        "device_access_app_server_cluster_name",
        "file_rebuild_immediate",
        "file_rebuild_daily",
        "file_rebuild_hourly",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_ip_device_management",
                "enableIPDeviceManagement",
                bool,
                is_required=True,
            ),
            E(
                "ftp_connect_timeout_seconds",
                "ftpConnectTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "ftp_file_transfer_timeout_seconds",
                "ftpFileTransferTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "pause_between_file_rebuild_milliseconds",
                "pauseBetweenFileRebuildMilliseconds",
                int,
                is_required=True,
            ),
            E("max_busy_time_minutes", "maxBusyTimeMinutes", int, is_required=True),
            E(
                "device_access_app_server_cluster_name",
                "deviceAccessAppServerClusterName",
                str,
            ),
            E(
                "file_rebuild_immediate",
                "fileRebuildImmediate",
                str,
                is_complex=True,
            ),  # unknown
            E("file_rebuild_daily", "fileRebuildDaily", str, is_complex=True),  # unknown
            E(
                "file_rebuild_hourly",
                "fileRebuildHourly",
                str,
                is_complex=True,
            ),  # unknown
        )


class SystemCPEConfigParametersGetResponse20(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest20()``.

    Contains a list of system CPE Config parameters.  Replaced by:
    ``SystemCPEConfigParametersGetResponse21()``

    Attributes:
        enable_ip_device_management: enableIPDeviceManagement
        ftp_connect_timeout_seconds: ftpConnectTimeoutSeconds
        ftp_file_transfer_timeout_seconds: ftpFileTransferTimeoutSeconds
        pause_between_file_rebuild_milliseconds: pauseBetweenFileRebuildMilliseconds
        max_busy_time_minutes: maxBusyTimeMinutes
        device_access_app_server_cluster_name: deviceAccessAppServerClusterName
    """

    __slots__ = [
        "enable_ip_device_management",
        "ftp_connect_timeout_seconds",
        "ftp_file_transfer_timeout_seconds",
        "pause_between_file_rebuild_milliseconds",
        "max_busy_time_minutes",
        "device_access_app_server_cluster_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_ip_device_management",
                "enableIPDeviceManagement",
                bool,
                is_required=True,
            ),
            E(
                "ftp_connect_timeout_seconds",
                "ftpConnectTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "ftp_file_transfer_timeout_seconds",
                "ftpFileTransferTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "pause_between_file_rebuild_milliseconds",
                "pauseBetweenFileRebuildMilliseconds",
                int,
                is_required=True,
            ),
            E("max_busy_time_minutes", "maxBusyTimeMinutes", int, is_required=True),
            E(
                "device_access_app_server_cluster_name",
                "deviceAccessAppServerClusterName",
                str,
            ),
        )


class SystemCPEConfigParametersGetResponse21(OCIResponse):
    """
    Response to ``SystemCPEConfigParametersGetListRequest21()``.

    Contains a list of system CPE Config parameters.

    Attributes:
        enable_ip_device_management: enableIPDeviceManagement
        ftp_connect_timeout_seconds: ftpConnectTimeoutSeconds
        ftp_file_transfer_timeout_seconds: ftpFileTransferTimeoutSeconds
        pause_between_file_rebuild_milliseconds: pauseBetweenFileRebuildMilliseconds
        device_access_app_server_cluster_name: deviceAccessAppServerClusterName
        min_time_between_reset_milliseconds: minTimeBetweenResetMilliseconds
        always_push_files_on_rebuild: alwaysPushFilesOnRebuild
        max_file_operation_retry_attempts: maxFileOperationRetryAttempts
        enable_auto_rebuild_config: enableAutoRebuildConfig
        event_queue_size: eventQueueSize
        allow_device_credentials_retrieval: allowDeviceCredentialsRetrieval
    """

    __slots__ = [
        "enable_ip_device_management",
        "ftp_connect_timeout_seconds",
        "ftp_file_transfer_timeout_seconds",
        "pause_between_file_rebuild_milliseconds",
        "device_access_app_server_cluster_name",
        "min_time_between_reset_milliseconds",
        "always_push_files_on_rebuild",
        "max_file_operation_retry_attempts",
        "enable_auto_rebuild_config",
        "event_queue_size",
        "allow_device_credentials_retrieval",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_ip_device_management",
                "enableIPDeviceManagement",
                bool,
                is_required=True,
            ),
            E(
                "ftp_connect_timeout_seconds",
                "ftpConnectTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "ftp_file_transfer_timeout_seconds",
                "ftpFileTransferTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "pause_between_file_rebuild_milliseconds",
                "pauseBetweenFileRebuildMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "device_access_app_server_cluster_name",
                "deviceAccessAppServerClusterName",
                str,
            ),
            E(
                "min_time_between_reset_milliseconds",
                "minTimeBetweenResetMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "always_push_files_on_rebuild",
                "alwaysPushFilesOnRebuild",
                bool,
                is_required=True,
            ),
            E(
                "max_file_operation_retry_attempts",
                "maxFileOperationRetryAttempts",
                int,
                is_required=True,
            ),
            E(
                "enable_auto_rebuild_config",
                "enableAutoRebuildConfig",
                bool,
                is_required=True,
            ),
            E("event_queue_size", "eventQueueSize", int, is_required=True),
            E(
                "allow_device_credentials_retrieval",
                "allowDeviceCredentialsRetrieval",
                bool,
                is_required=True,
            ),
        )


class SystemCallCenterEnhancedReportingBrandingGetResponse(OCIResponse):
    """
    Response to the ``SystemCallCenterEnhancedReportingBrandingGetRequest()``.


    Attributes:
        branding_choice: brandingChoice
        custom_branding_file_description: customBrandingFileDescription
    """

    __slots__ = [
        "branding_choice",
        "custom_branding_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("branding_choice", "brandingChoice", str, is_required=True),
            E("custom_branding_file_description", "customBrandingFileDescription", str),
        )


class SystemCallCenterEnhancedReportingGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingGetRequest()``.


    Attributes:
        archive_reports: archiveReports
        report_application_url: reportApplicationURL
        repository_application_url: repositoryApplicationURL
    """

    __slots__ = [
        "archive_reports",
        "report_application_url",
        "repository_application_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("archive_reports", "archiveReports", bool, is_required=True),
            E("report_application_url", "reportApplicationURL", str),
            E("repository_application_url", "repositoryApplicationURL", str),
        )


class SystemCallCenterEnhancedReportingReportTemplateGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingReportTemplateGetListRequest()``.

    Contains a table with column headings: "Name", "Description", "Is Custom", "Type" and
    "Enabled"

    Attributes:
        report_template_table: reportTemplateTable
    """

    __slots__ = [
        "report_template_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "report_template_table",
                "reportTemplateTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallCenterEnhancedReportingReportTemplateGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingReportTemplateGetRequest()``.


    Attributes:
        description: description
        data_template: dataTemplate
        filter_number: filterNumber
        xslt_template_description: xsltTemplateDescription
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        call_completion_threshold_param: callCompletionThresholdParam
        short_duration_threshold_param: shortDurationThresholdParam
        service_level_threshold_param: serviceLevelThresholdParam
        service_level_inclusions_param: serviceLevelInclusionsParam
        service_level_objective_threshold_param: serviceLevelObjectiveThresholdParam
        abandoned_call_threshold_param: abandonedCallThresholdParam
        service_level_threshold_param_number: serviceLevelThresholdParamNumber
        abandoned_call_threshold_param_number: abandonedCallThresholdParamNumber
        filter_value: filterValue
    """

    __slots__ = [
        "description",
        "data_template",
        "filter_number",
        "xslt_template_description",
        "scope",
        "is_enabled",
        "is_realtime_report",
        "call_completion_threshold_param",
        "short_duration_threshold_param",
        "service_level_threshold_param",
        "service_level_inclusions_param",
        "service_level_objective_threshold_param",
        "abandoned_call_threshold_param",
        "service_level_threshold_param_number",
        "abandoned_call_threshold_param_number",
        "filter_value",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("data_template", "dataTemplate", str, is_required=True),
            E("filter_number", "filterNumber", int),
            E(
                "xslt_template_description",
                "xsltTemplateDescription",
                str,
                is_required=True,
            ),
            E("scope", "scope", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("call_completion_threshold_param", "callCompletionThresholdParam", str),
            E("short_duration_threshold_param", "shortDurationThresholdParam", str),
            E("service_level_threshold_param", "serviceLevelThresholdParam", str),
            E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
            E(
                "service_level_objective_threshold_param",
                "serviceLevelObjectiveThresholdParam",
                str,
            ),
            E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
            E(
                "service_level_threshold_param_number",
                "serviceLevelThresholdParamNumber",
                int,
            ),
            E(
                "abandoned_call_threshold_param_number",
                "abandonedCallThresholdParamNumber",
                int,
            ),
            E("filter_value", "filterValue", str, is_array=True),
        )


class SystemCallCenterEnhancedReportingScheduledReportGetActiveListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingScheduledReportGetActiveListRequest()``
    Contains a table with column headings : "Scheduled Report Name", "Description",
    "Service Provider Id", "Is Enterprise", "Group Id", "Created By", "Is Supervisor
    Report", "Report Template Name", "Report Template Level" and "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System", "Enterprise"
    and "Group". For the rows with "Is Enterprise" column value "true", the "Group Id"
    column will be empty.

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallCenterEnhancedReportingScheduledReportGetCompletedListResponse(OCIResponse):
    """
    Response to
    ``SystemCallCenterEnhancedReportingScheduledReportGetCompletedListRequest()`` Contains
    a table with column headings : "Scheduled Report Name", "Description", "Service
    Provider Id", "Is Enterprise", "Group Id", "Created By", "Is Supervisor Report",
    "Report Template Name", "Report Template Level" and "Recurring".

    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Recurring" are "None", "Daily", "Weekly", "Monthly" and
    "Yearly". The possible values for "Report Template Level" are "System", "Enterprise"
    and "Group". For the rows with "Is Enterprise" column value "true", the "Group Id"
    column will be empty.

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallCenterEnhancedReportingScheduledReportGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingScheduledReportGetListRequest()``.

    Contains a table with column headings : "Scheduled Report Name", "Description",
    "Service Provider Id", "Is Enterprise", "Group Id", "Created By", "Is Supervisor
    Report", "Status", "Report Template Name", "Report Template Level" and "Recurring".
    The "Created By" can be either "Administrator" or user id if created by supervisor.
    The possible values for "Status" are "Active", and "Completed". The possible values
    for "Recurring" are "None", "Daily", "Weekly", "Monthly" and "Yearly". The possible
    values for "Report Template Level" are "System", "Enterprise" and "Group". For the
    rows with "Is Enterprise" column value "true", the "Group Id" column will be empty.

    Attributes:
        scheduled_report_table: scheduledReportTable
    """

    __slots__ = [
        "scheduled_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_table",
                "scheduledReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse(OCIResponse):
    """
    Response to
    ``SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest()``.

    Contains a table with column headings: "Schedule Name", "Organization Type", "Service
    Provider Id", "Group Id", "Created By", "Created By Supervisor", and "Is Active". The
    "Organization Type" is either "Service Provider" or "Enterprise". The "Created By" can
    be either "Administrator" or user id if created by supervisor.  The possible values
    for "Created By Supervisor" are "true" and "false".

    Attributes:
        schedule_report_table: scheduleReportTable
    """

    __slots__ = [
        "schedule_report_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_report_table",
                "scheduleReportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallCenterEnhancedReportingScheduledTaskParametersGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingScheduledTaskParametersGetRequest()``

    Attributes:
        scheduled_report_search_interval_minutes: scheduledReportSearchIntervalMinutes
        maximum_scheduled_reports_per_interval: maximumScheduledReportsPerInterval
        delete_scheduled_report_days_after_completion:
            deleteScheduledReportDaysAfterCompletion
    """

    __slots__ = [
        "scheduled_report_search_interval_minutes",
        "maximum_scheduled_reports_per_interval",
        "delete_scheduled_report_days_after_completion",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_search_interval_minutes",
                "scheduledReportSearchIntervalMinutes",
                int,
                is_required=True,
            ),
            E(
                "maximum_scheduled_reports_per_interval",
                "maximumScheduledReportsPerInterval",
                int,
                is_required=True,
            ),
            E(
                "delete_scheduled_report_days_after_completion",
                "deleteScheduledReportDaysAfterCompletion",
                int,
                is_required=True,
            ),
        )


class SystemCallCenterGetResponse(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest()``.

    Replaced By: ``SystemCallCenterGetResponse14sp9()``

    Attributes:
        default_from_address: defaultFromAddress
    """

    __slots__ = [
        "default_from_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
        )


class SystemCallCenterGetResponse14sp9(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest14sp9()``.


    Attributes:
        default_from_address: defaultFromAddress
        statistics_sampling_period_minutes: statisticsSamplingPeriodMinutes
    """

    __slots__ = [
        "default_from_address",
        "statistics_sampling_period_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E(
                "statistics_sampling_period_minutes",
                "statisticsSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
        )


class SystemCallCenterGetResponse16(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest16()``.


    Attributes:
        default_from_address: defaultFromAddress
        statistics_sampling_period_minutes: statisticsSamplingPeriodMinutes
        default_enable_guard_timer: defaultEnableGuardTimer
        default_guard_timer_seconds: defaultGuardTimerSeconds
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
    """

    __slots__ = [
        "default_from_address",
        "statistics_sampling_period_minutes",
        "default_enable_guard_timer",
        "default_guard_timer_seconds",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E(
                "statistics_sampling_period_minutes",
                "statisticsSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "default_enable_guard_timer",
                "defaultEnableGuardTimer",
                bool,
                is_required=True,
            ),
            E(
                "default_guard_timer_seconds",
                "defaultGuardTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
                is_required=True,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
                is_required=True,
            ),
        )


class SystemCallCenterGetResponse17(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest17()``.

    Replaced by ``SystemCallCenterGetResponse17sp4()``.

    Attributes:
        default_from_address: defaultFromAddress
        statistics_sampling_period_minutes: statisticsSamplingPeriodMinutes
        default_enable_guard_timer: defaultEnableGuardTimer
        default_guard_timer_seconds: defaultGuardTimerSeconds
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        default_play_ring_when_offer_call: defaultPlayRingWhenOfferCall
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
        call_handling_sampling_period_minutes: callHandlingSamplingPeriodMinutes
        call_handling_minimum_sampling_size: callHandlingMinimumSamplingSize
        play_tone_to_agent_for_emergency_call: playToneToAgentForEmergencyCall
        emergency_call_clid_prefix: emergencyCallCLIDPrefix
    """

    __slots__ = [
        "default_from_address",
        "statistics_sampling_period_minutes",
        "default_enable_guard_timer",
        "default_guard_timer_seconds",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "default_play_ring_when_offer_call",
        "uniform_call_distribution_policy_scope",
        "call_handling_sampling_period_minutes",
        "call_handling_minimum_sampling_size",
        "play_tone_to_agent_for_emergency_call",
        "emergency_call_clid_prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E(
                "statistics_sampling_period_minutes",
                "statisticsSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "default_enable_guard_timer",
                "defaultEnableGuardTimer",
                bool,
                is_required=True,
            ),
            E(
                "default_guard_timer_seconds",
                "defaultGuardTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
                is_required=True,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
                is_required=True,
            ),
            E(
                "default_play_ring_when_offer_call",
                "defaultPlayRingWhenOfferCall",
                bool,
                is_required=True,
            ),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
                is_required=True,
            ),
            E(
                "call_handling_sampling_period_minutes",
                "callHandlingSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "call_handling_minimum_sampling_size",
                "callHandlingMinimumSamplingSize",
                int,
                is_required=True,
            ),
            E(
                "play_tone_to_agent_for_emergency_call",
                "playToneToAgentForEmergencyCall",
                bool,
                is_required=True,
            ),
            E(
                "emergency_call_clid_prefix",
                "emergencyCallCLIDPrefix",
                str,
                is_required=True,
            ),
        )


class SystemCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest17sp4()``.

    Replaced by: ``SystemCallCenterGetResponse19()``.

    Attributes:
        default_from_address: defaultFromAddress
        statistics_sampling_period_minutes: statisticsSamplingPeriodMinutes
        default_enable_guard_timer: defaultEnableGuardTimer
        default_guard_timer_seconds: defaultGuardTimerSeconds
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        default_play_ring_when_offer_call: defaultPlayRingWhenOfferCall
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
        call_handling_sampling_period_minutes: callHandlingSamplingPeriodMinutes
        call_handling_minimum_sampling_size: callHandlingMinimumSamplingSize
        play_tone_to_agent_for_emergency_call: playToneToAgentForEmergencyCall
        emergency_call_clid_prefix: emergencyCallCLIDPrefix
    """

    __slots__ = [
        "default_from_address",
        "statistics_sampling_period_minutes",
        "default_enable_guard_timer",
        "default_guard_timer_seconds",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "force_agent_unavailable_on_not_reachable",
        "default_play_ring_when_offer_call",
        "uniform_call_distribution_policy_scope",
        "call_handling_sampling_period_minutes",
        "call_handling_minimum_sampling_size",
        "play_tone_to_agent_for_emergency_call",
        "emergency_call_clid_prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E(
                "statistics_sampling_period_minutes",
                "statisticsSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "default_enable_guard_timer",
                "defaultEnableGuardTimer",
                bool,
                is_required=True,
            ),
            E(
                "default_guard_timer_seconds",
                "defaultGuardTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
                is_required=True,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "default_play_ring_when_offer_call",
                "defaultPlayRingWhenOfferCall",
                bool,
                is_required=True,
            ),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
                is_required=True,
            ),
            E(
                "call_handling_sampling_period_minutes",
                "callHandlingSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "call_handling_minimum_sampling_size",
                "callHandlingMinimumSamplingSize",
                int,
                is_required=True,
            ),
            E(
                "play_tone_to_agent_for_emergency_call",
                "playToneToAgentForEmergencyCall",
                bool,
                is_required=True,
            ),
            E(
                "emergency_call_clid_prefix",
                "emergencyCallCLIDPrefix",
                str,
                is_required=True,
            ),
        )


class SystemCallCenterGetResponse19(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest19()``.

    Replaced by ``SystemCallCenterGetRequest21()``.

    Attributes:
        default_from_address: defaultFromAddress
        statistics_sampling_period_minutes: statisticsSamplingPeriodMinutes
        default_enable_guard_timer: defaultEnableGuardTimer
        default_guard_timer_seconds: defaultGuardTimerSeconds
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        default_play_ring_when_offer_call: defaultPlayRingWhenOfferCall
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
        call_handling_sampling_period_minutes: callHandlingSamplingPeriodMinutes
        call_handling_minimum_sampling_size: callHandlingMinimumSamplingSize
        play_tone_to_agent_for_emergency_call: playToneToAgentForEmergencyCall
        emergency_call_clid_prefix: emergencyCallCLIDPrefix
        threshold_crossing_notification_email_guard_timer_seconds:
            thresholdCrossingNotificationEmailGuardTimerSeconds
    """

    __slots__ = [
        "default_from_address",
        "statistics_sampling_period_minutes",
        "default_enable_guard_timer",
        "default_guard_timer_seconds",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "force_agent_unavailable_on_not_reachable",
        "default_play_ring_when_offer_call",
        "uniform_call_distribution_policy_scope",
        "call_handling_sampling_period_minutes",
        "call_handling_minimum_sampling_size",
        "play_tone_to_agent_for_emergency_call",
        "emergency_call_clid_prefix",
        "threshold_crossing_notification_email_guard_timer_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E(
                "statistics_sampling_period_minutes",
                "statisticsSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "default_enable_guard_timer",
                "defaultEnableGuardTimer",
                bool,
                is_required=True,
            ),
            E(
                "default_guard_timer_seconds",
                "defaultGuardTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
                is_required=True,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "default_play_ring_when_offer_call",
                "defaultPlayRingWhenOfferCall",
                bool,
                is_required=True,
            ),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
                is_required=True,
            ),
            E(
                "call_handling_sampling_period_minutes",
                "callHandlingSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "call_handling_minimum_sampling_size",
                "callHandlingMinimumSamplingSize",
                int,
                is_required=True,
            ),
            E(
                "play_tone_to_agent_for_emergency_call",
                "playToneToAgentForEmergencyCall",
                bool,
                is_required=True,
            ),
            E(
                "emergency_call_clid_prefix",
                "emergencyCallCLIDPrefix",
                str,
                is_required=True,
            ),
            E(
                "threshold_crossing_notification_email_guard_timer_seconds",
                "thresholdCrossingNotificationEmailGuardTimerSeconds",
                int,
                is_required=True,
            ),
        )


class SystemCallCenterGetResponse21(OCIResponse):
    """
    Response to ``SystemCallCenterGetRequest21()``.


    Attributes:
        default_from_address: defaultFromAddress
        statistics_sampling_period_minutes: statisticsSamplingPeriodMinutes
        default_enable_guard_timer: defaultEnableGuardTimer
        default_guard_timer_seconds: defaultGuardTimerSeconds
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        default_play_ring_when_offer_call: defaultPlayRingWhenOfferCall
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
        call_handling_sampling_period_minutes: callHandlingSamplingPeriodMinutes
        call_handling_minimum_sampling_size: callHandlingMinimumSamplingSize
        play_tone_to_agent_for_emergency_call: playToneToAgentForEmergencyCall
        emergency_call_clid_prefix: emergencyCallCLIDPrefix
        threshold_crossing_notification_email_guard_timer_seconds:
            thresholdCrossingNotificationEmailGuardTimerSeconds
        allow_agent_device_initiated_forward: allowAgentDeviceInitiatedForward
    """

    __slots__ = [
        "default_from_address",
        "statistics_sampling_period_minutes",
        "default_enable_guard_timer",
        "default_guard_timer_seconds",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "force_agent_unavailable_on_not_reachable",
        "default_play_ring_when_offer_call",
        "uniform_call_distribution_policy_scope",
        "call_handling_sampling_period_minutes",
        "call_handling_minimum_sampling_size",
        "play_tone_to_agent_for_emergency_call",
        "emergency_call_clid_prefix",
        "threshold_crossing_notification_email_guard_timer_seconds",
        "allow_agent_device_initiated_forward",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E(
                "statistics_sampling_period_minutes",
                "statisticsSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "default_enable_guard_timer",
                "defaultEnableGuardTimer",
                bool,
                is_required=True,
            ),
            E(
                "default_guard_timer_seconds",
                "defaultGuardTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
                is_required=True,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
                is_required=True,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "default_play_ring_when_offer_call",
                "defaultPlayRingWhenOfferCall",
                bool,
                is_required=True,
            ),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
                is_required=True,
            ),
            E(
                "call_handling_sampling_period_minutes",
                "callHandlingSamplingPeriodMinutes",
                int,
                is_required=True,
            ),
            E(
                "call_handling_minimum_sampling_size",
                "callHandlingMinimumSamplingSize",
                int,
                is_required=True,
            ),
            E(
                "play_tone_to_agent_for_emergency_call",
                "playToneToAgentForEmergencyCall",
                bool,
                is_required=True,
            ),
            E(
                "emergency_call_clid_prefix",
                "emergencyCallCLIDPrefix",
                str,
                is_required=True,
            ),
            E(
                "threshold_crossing_notification_email_guard_timer_seconds",
                "thresholdCrossingNotificationEmailGuardTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "allow_agent_device_initiated_forward",
                "allowAgentDeviceInitiatedForward",
                bool,
                is_required=True,
            ),
        )


class SystemCallCenterReportingServerGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterReportingServerGetListRequest()``.

    The table columns are: "Name", "URL", "Net Address", and "Description".

    Attributes:
        reporting_server_table: reportingServerTable
    """

    __slots__ = [
        "reporting_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "reporting_server_table",
                "reportingServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallMeNowGetResponse(OCIResponse):
    """
    Response to ``SystemCallMeNowGetRequest()``.


    Attributes:
        passcode_length: passcodeLength
        passcode_timeout_seconds: passcodeTimeoutSeconds
    """

    __slots__ = [
        "passcode_length",
        "passcode_timeout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("passcode_length", "passcodeLength", int, is_required=True),
            E(
                "passcode_timeout_seconds",
                "passcodeTimeoutSeconds",
                int,
                is_required=True,
            ),
        )


class SystemCallNotifyGetResponse(OCIResponse):
    """
    Response to ``SystemCallNotifyGetRequest()``.


    Attributes:
        default_from_address: defaultFromAddress
        use_short_subject_line: useShortSubjectLine
        use_dn_in_mail_body: useDnInMailBody
    """

    __slots__ = [
        "default_from_address",
        "use_short_subject_line",
        "use_dn_in_mail_body",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
            E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
        )


class SystemCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "conference_uri",
        "max_conference_parties",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        )


class SystemCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14sp1()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse14sp4(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14sp4()``.

    Replaced By : ``SystemCallProcessingGetPolicyResponse15()``

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_external_calls_via_private_dialing_plan",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest14sp7()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_external_calls_via_private_dialing_plan",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse15(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest15()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse15sp2(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest15sp2()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest16()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest16sp2()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest17()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest17sp3()``.

    The following elements are only used in AS data mode: enableDialableCallerID

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest17sp4()``.

    The following elements are only used in AS data mode: enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse18sp1(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest18sp1()``.

    The following elements are only used in AS data mode: enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity enterpriseCallsCLIDPolicy
    enterpriseGroupCallsCLIDPolicy serviceProviderGroupCallsCLIDPolicy Replaced by:
    ``SystemCallProcessingGetPolicyResponse19sp1()``

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
        )


class SystemCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``SystemCallProcessingGetPolicyRequest19sp1()``.

    The following elements are only used in AS data mode: enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity enterpriseCallsCLIDPolicy
    enterpriseGroupCallsCLIDPolicy serviceProviderGroupCallsCLIDPolicy

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "network_usage_selection",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "enable_enterprise_extension_dialing",
        "conference_uri",
        "max_conference_parties",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileAutoAttendantProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileAutoAttendantProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileBroadWorksAnywhereProfileGetResponse(OCIResponse):
    """
    Response to
    ``SystemCallProcessingPolicyProfileBroadWorksAnywhereProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileCallCenterProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileCallCenterProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileCollaborateProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileCollaborateProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileFindMeFollowMeProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileFindMeFollowMeProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileFlexibleSeatingHostProfileGetResponse(OCIResponse):
    """
    Response to
    ``SystemCallProcessingPolicyProfileFlexibleSeatingHostProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "emergency_clid_policy",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileGetAssignedNCOSListResponse(OCIResponse):
    """
    Response to the ``SystemCallProcessingPolicyProfileGetAssignedNCOSListRequest()``.

    The response contains a table of all Network Classes of Service that contain the
    specific CAllP Policy Profile.  The column headings are "Name" and "Description".

    Attributes:
        network_class_of_service_table: networkClassOfServiceTable
    """

    __slots__ = [
        "network_class_of_service_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "network_class_of_service_table",
                "networkClassOfServiceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallProcessingPolicyProfileGetListResponse(OCIResponse):
    """
    Response to the ``SystemCallProcessingPolicyProfileGetListRequest()``.

    The response contains a table of all Call Processing Policy Profiles in the system.
    The column headings are "Name" and "Description".

    Attributes:
        call_processing_policy_profiles_table: callProcessingPolicyProfilesTable
    """

    __slots__ = [
        "call_processing_policy_profiles_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profiles_table",
                "callProcessingPolicyProfilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallProcessingPolicyProfileGetResponse(OCIResponse):
    """
    Response to a ``SystemCallProcessingPolicyProfileGetRequest()``.


    Attributes:
        description: description
        assigned_subscriber_type: assignedSubscriberType
    """

    __slots__ = [
        "description",
        "assigned_subscriber_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
        )


class SystemCallProcessingPolicyProfileGetResponse20(OCIResponse):
    """
    Response to a ``SystemCallProcessingPolicyProfileGetRequest20()``.


    Attributes:
        description: description
        assigned_subscriber_type: assignedSubscriberType
    """

    __slots__ = [
        "description",
        "assigned_subscriber_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
        )


class SystemCallProcessingPolicyProfileGetResponse21(OCIResponse):
    """
    Response to a ``SystemCallProcessingPolicyProfileGetRequest21()``.


    Attributes:
        description: description
        assigned_subscriber_type: assignedSubscriberType
    """

    __slots__ = [
        "description",
        "assigned_subscriber_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
        )


class SystemCallProcessingPolicyProfileGroupPagingProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileGroupPagingProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileHuntGroupProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileHuntGroupProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileInstantGroupCallProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileInstantGroupCallProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileMeetMeConferencingProfileGetResponse(OCIResponse):
    """
    Response to
    ``SystemCallProcessingPolicyProfileMeetMeConferencingProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileRoutePointProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileRoutePointProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileTrunkGroupPilotProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileTrunkGroupPilotProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_media_policy: useMediaPolicy
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_media_policy",
        "media_policy_selection",
        "supported_media_set_name",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_media_policy", "useMediaPolicy", bool, is_required=True),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileUserProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileUserProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_media_policy: useMediaPolicy
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_media_policy",
        "media_policy_selection",
        "supported_media_set_name",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_media_policy", "useMediaPolicy", bool, is_required=True),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileVoicePortalProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileVoicePortalProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
        )


class SystemCallProcessingPolicyProfileVoiceXMLProfileGetResponse(OCIResponse):
    """
    Response to ``SystemCallProcessingPolicyProfileVoiceXMLProfileGetRequest()``.


    Attributes:
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_clid_policy",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "enterprise_calls_clid_policy",
        "enterprise_group_calls_clid_policy",
        "service_provider_group_calls_clid_policy",
        "use_call_limits_policy",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "max_redirection_depth",
        "use_translation_routing_policy",
        "network_usage_selection",
        "enable_enterprise_extension_dialing",
        "enforce_group_calling_line_identity_restriction",
        "enforce_enterprise_calling_line_identity_restriction",
        "allow_enterprise_group_call_typing_for_private_dialing_plan",
        "allow_enterprise_group_call_typing_for_public_dialing_plan",
        "override_clid_restriction_for_private_call_category",
        "use_enterprise_clid_for_private_call_category",
        "use_incoming_clid_policy",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_clid_policy", "useCLIDPolicy", bool, is_required=True),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
            E(
                "enterprise_calls_clid_policy",
                "enterpriseCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
                is_required=True,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_translation_routing_policy",
                "useTranslationRoutingPolicy",
                bool,
                is_required=True,
            ),
            E("network_usage_selection", "networkUsageSelection", str, is_required=True),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
                is_required=True,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
                is_required=True,
            ),
            E(
                "use_incoming_clid_policy",
                "useIncomingCLIDPolicy",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class SystemCallRecordingGetPlatformListResponse(OCIResponse):
    """
    Response to ``SystemCallRecordingGetPlatformListRequest()``.

    Contains the default system Call Recording platform and a table with columns headings
    "Name", "Net Address", "Port", "Transport Type", "Media Stream", "Description",
    "Schema Version", "Support Video Rec". The system default recording platform also
    appears in the table with the other platforms.  The possible values for "Support Video
    Rec" can be either true or false.  Schema version values include: 1.0, 2.0, 3.0

    Attributes:
        system_default: systemDefault
        call_recording_platform_table: callRecordingPlatformTable
    """

    __slots__ = [
        "system_default",
        "call_recording_platform_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_default", "systemDefault", str),
            E(
                "call_recording_platform_table",
                "callRecordingPlatformTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallRecordingGetPlatformUsageResponse(OCIResponse):
    """
    Response to ``SystemCallRecordingGetPlatformUsageRequest()``.

    The response contains a table with columns headings "Service Provider Id", "Group Id".

    Attributes:
        group_table: groupTable
    """

    __slots__ = [
        "group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_table",
                "groupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallRecordingGetResponse(OCIResponse):
    """
    Response to ``SystemCallRecordingGetRequest()``.


    Attributes:
        continue_call_after_recording_failure: continueCallAfterRecordingFailure
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
        continue_call_after_video_recording_failure:
            continueCallAfterVideoRecordingFailure
    """

    __slots__ = [
        "continue_call_after_recording_failure",
        "refresh_period_seconds",
        "max_consecutive_failures",
        "max_response_wait_time_milliseconds",
        "continue_call_after_video_recording_failure",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "continue_call_after_recording_failure",
                "continueCallAfterRecordingFailure",
                bool,
                is_required=True,
            ),
            E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
            E(
                "max_consecutive_failures",
                "maxConsecutiveFailures",
                int,
                is_required=True,
            ),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "continue_call_after_video_recording_failure",
                "continueCallAfterVideoRecordingFailure",
                bool,
                is_required=True,
            ),
        )


class SystemCallReturnGetResponse(OCIResponse):
    """
    Response to ``SystemCallReturnGetRequest()``.


    Attributes:
        two_level_activation: twoLevelActivation
        provide_date: provideDate
        last_unanswered_call_only: lastUnansweredCallOnly
        confirmation_key: confirmationKey
        allow_restricted_number: allowRestrictedNumber
        delete_number_after_answered_call_return: deleteNumberAfterAnsweredCallReturn
    """

    __slots__ = [
        "two_level_activation",
        "provide_date",
        "last_unanswered_call_only",
        "confirmation_key",
        "allow_restricted_number",
        "delete_number_after_answered_call_return",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("two_level_activation", "twoLevelActivation", bool, is_required=True),
            E("provide_date", "provideDate", bool, is_required=True),
            E(
                "last_unanswered_call_only",
                "lastUnansweredCallOnly",
                bool,
                is_required=True,
            ),
            E("confirmation_key", "confirmationKey", str),
            E(
                "allow_restricted_number",
                "allowRestrictedNumber",
                bool,
                is_required=True,
            ),
            E(
                "delete_number_after_answered_call_return",
                "deleteNumberAfterAnsweredCallReturn",
                bool,
                is_required=True,
            ),
        )


class SystemCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemCallTypeGetListRequest()``.


    Attributes:
        call_type: callType
    """

    __slots__ = [
        "call_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_type", "callType", str, is_required=True, is_array=True),
        )


class SystemCallTypeGetMappingListResponse(OCIResponse):
    """
    Response to ``SystemCallTypeGetMappingListRequest()``.

    The table columns are: "Country Code", "Digit Map" and "Call Type".

    Attributes:
        call_type_mapping: callTypeMapping
    """

    __slots__ = [
        "call_type_mapping",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_type_mapping",
                "callTypeMapping",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallWaitingGetResponse(OCIResponse):
    """
    Response to ``SystemCallWaitingGetRequest()``.


    Attributes:
        play_distinctive_ringback: playDistinctiveRingback
    """

    __slots__ = [
        "play_distinctive_ringback",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "play_distinctive_ringback",
                "playDistinctiveRingback",
                bool,
                is_required=True,
            ),
        )


class SystemCallingNameRetrievalGetResponse14(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest14()``.


    Attributes:
        query_timer_milli_seconds: queryTimerMilliSeconds
        server_net_address: serverNetAddress
        server_port: serverPort
        server_transport_protocol: serverTransportProtocol
    """

    __slots__ = [
        "query_timer_milli_seconds",
        "server_net_address",
        "server_port",
        "server_transport_protocol",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "query_timer_milli_seconds",
                "queryTimerMilliSeconds",
                int,
                is_required=True,
            ),
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E(
                "server_transport_protocol",
                "serverTransportProtocol",
                str,
                is_required=True,
            ),
        )


class SystemCallingNameRetrievalGetResponse16sp1(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest16sp1()``.


    Attributes:
        trigger_cnam_queries_for_all_network_calls: triggerCNAMQueriesForAllNetworkCalls
        trigger_cnam_queries_for_group_and_enterprise_calls:
            triggerCNAMQueriesForGroupAndEnterpriseCalls
        query_protocol: queryProtocol
        query_timeout_milliseconds: queryTimeoutMilliseconds
        sip_external_database_net_address: sipExternalDatabaseNetAddress
        sip_external_database_port: sipExternalDatabasePort
        sip_external_database_transport: sipExternalDatabaseTransport
        soap_external_database_net_address: soapExternalDatabaseNetAddress
        soap_supports_dnssrv: soapSupportsDNSSRV
    """

    __slots__ = [
        "trigger_cnam_queries_for_all_network_calls",
        "trigger_cnam_queries_for_group_and_enterprise_calls",
        "query_protocol",
        "query_timeout_milliseconds",
        "sip_external_database_net_address",
        "sip_external_database_port",
        "sip_external_database_transport",
        "soap_external_database_net_address",
        "soap_supports_dnssrv",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trigger_cnam_queries_for_all_network_calls",
                "triggerCNAMQueriesForAllNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "trigger_cnam_queries_for_group_and_enterprise_calls",
                "triggerCNAMQueriesForGroupAndEnterpriseCalls",
                bool,
                is_required=True,
            ),
            E("query_protocol", "queryProtocol", str, is_required=True),
            E(
                "query_timeout_milliseconds",
                "queryTimeoutMilliseconds",
                int,
                is_required=True,
            ),
            E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
            E("sip_external_database_port", "sipExternalDatabasePort", int),
            E(
                "sip_external_database_transport",
                "sipExternalDatabaseTransport",
                str,
                is_required=True,
            ),
            E(
                "soap_external_database_net_address",
                "soapExternalDatabaseNetAddress",
                str,
            ),
            E("soap_supports_dnssrv", "soapSupportsDNSSRV", bool, is_required=True),
        )


class SystemCallingNameRetrievalGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest17sp4()``.


    Attributes:
        trigger_cnam_queries_for_all_network_calls: triggerCNAMQueriesForAllNetworkCalls
        trigger_cnam_queries_for_group_and_enterprise_calls:
            triggerCNAMQueriesForGroupAndEnterpriseCalls
        query_protocol: queryProtocol
        query_timeout_milliseconds: queryTimeoutMilliseconds
        sip_external_database_net_address: sipExternalDatabaseNetAddress
        sip_external_database_port: sipExternalDatabasePort
        sip_external_database_transport: sipExternalDatabaseTransport
        soap_external_database_net_address: soapExternalDatabaseNetAddress
        soap_supports_dnssrv: soapSupportsDNSSRV
        calling_name_source: callingNameSource
    """

    __slots__ = [
        "trigger_cnam_queries_for_all_network_calls",
        "trigger_cnam_queries_for_group_and_enterprise_calls",
        "query_protocol",
        "query_timeout_milliseconds",
        "sip_external_database_net_address",
        "sip_external_database_port",
        "sip_external_database_transport",
        "soap_external_database_net_address",
        "soap_supports_dnssrv",
        "calling_name_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trigger_cnam_queries_for_all_network_calls",
                "triggerCNAMQueriesForAllNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "trigger_cnam_queries_for_group_and_enterprise_calls",
                "triggerCNAMQueriesForGroupAndEnterpriseCalls",
                bool,
                is_required=True,
            ),
            E("query_protocol", "queryProtocol", str, is_required=True),
            E(
                "query_timeout_milliseconds",
                "queryTimeoutMilliseconds",
                int,
                is_required=True,
            ),
            E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
            E("sip_external_database_port", "sipExternalDatabasePort", int),
            E(
                "sip_external_database_transport",
                "sipExternalDatabaseTransport",
                str,
                is_required=True,
            ),
            E(
                "soap_external_database_net_address",
                "soapExternalDatabaseNetAddress",
                str,
            ),
            E("soap_supports_dnssrv", "soapSupportsDNSSRV", bool, is_required=True),
            E("calling_name_source", "callingNameSource", str, is_required=True),
        )


class SystemCallingNameRetrievalGetResponse20(OCIResponse):
    """
    Response to ``SystemCallingNameRetrievalGetRequest20()``.


    Attributes:
        trigger_cnam_queries_for_all_network_calls: triggerCNAMQueriesForAllNetworkCalls
        trigger_cnam_queries_for_group_and_enterprise_calls:
            triggerCNAMQueriesForGroupAndEnterpriseCalls
        query_protocol: queryProtocol
        query_timeout_milliseconds: queryTimeoutMilliseconds
        sip_external_database_net_address: sipExternalDatabaseNetAddress
        sip_external_database_port: sipExternalDatabasePort
        sip_external_database_transport: sipExternalDatabaseTransport
        soap_external_database_net_address: soapExternalDatabaseNetAddress
        calling_name_source: callingNameSource
        route_advance_timer: routeAdvanceTimer
        retry_failed_cnam_server_interval: retryFailedCNAMServerInterval
        ignore_restricted_presentation_indicator: ignoreRestrictedPresentationIndicator
        supports_dnssrv: supportsDNSSRV
    """

    __slots__ = [
        "trigger_cnam_queries_for_all_network_calls",
        "trigger_cnam_queries_for_group_and_enterprise_calls",
        "query_protocol",
        "query_timeout_milliseconds",
        "sip_external_database_net_address",
        "sip_external_database_port",
        "sip_external_database_transport",
        "soap_external_database_net_address",
        "calling_name_source",
        "route_advance_timer",
        "retry_failed_cnam_server_interval",
        "ignore_restricted_presentation_indicator",
        "supports_dnssrv",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trigger_cnam_queries_for_all_network_calls",
                "triggerCNAMQueriesForAllNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "trigger_cnam_queries_for_group_and_enterprise_calls",
                "triggerCNAMQueriesForGroupAndEnterpriseCalls",
                bool,
                is_required=True,
            ),
            E("query_protocol", "queryProtocol", str, is_required=True),
            E(
                "query_timeout_milliseconds",
                "queryTimeoutMilliseconds",
                int,
                is_required=True,
            ),
            E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
            E("sip_external_database_port", "sipExternalDatabasePort", int),
            E(
                "sip_external_database_transport",
                "sipExternalDatabaseTransport",
                str,
                is_required=True,
            ),
            E(
                "soap_external_database_net_address",
                "soapExternalDatabaseNetAddress",
                str,
            ),
            E("calling_name_source", "callingNameSource", str, is_required=True),
            E("route_advance_timer", "routeAdvanceTimer", int, is_required=True),
            E(
                "retry_failed_cnam_server_interval",
                "retryFailedCNAMServerInterval",
                int,
                is_required=True,
            ),
            E(
                "ignore_restricted_presentation_indicator",
                "ignoreRestrictedPresentationIndicator",
                bool,
                is_required=True,
            ),
            E("supports_dnssrv", "supportsDNSSRV", bool, is_required=True),
        )


class SystemCallingPartyCategoryGetListResponse(OCIResponse):
    """
    Response to ``SystemCallingPartyCategoryGetListRequest()``.

    Contains a table of Calling Party Category defined in system.  The column headings
    are: "Category Name", "User Category", "Collect Call", "Default" and "Web Display
    Key".

    Attributes:
        calling_party_category_table: callingPartyCategoryTable
    """

    __slots__ = [
        "calling_party_category_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "calling_party_category_table",
                "callingPartyCategoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCallingPartyCategoryGetResponse(OCIResponse):
    """
    Response to ``SystemCallingPartyCategoryGetRequest()``.

    Contains information of a Calling Party Category defined in system.

    Attributes:
        cpc_value: cpcValue
        isup_oli_value: isupOliValue
        gtd_oli_value: gtdOliValue
        user_category: userCategory
        pay_phone: payPhone
        operator: operator
        default: default
        collect_call: collectCall
        web_display_key: webDisplayKey
    """

    __slots__ = [
        "cpc_value",
        "isup_oli_value",
        "gtd_oli_value",
        "user_category",
        "pay_phone",
        "operator",
        "default",
        "collect_call",
        "web_display_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("cpc_value", "cpcValue", str),
            E("isup_oli_value", "isupOliValue", int),
            E("gtd_oli_value", "gtdOliValue", str),
            E("user_category", "userCategory", bool, is_required=True),
            E("pay_phone", "payPhone", bool, is_required=True),
            E("operator", "operator", bool, is_required=True),
            E("default", "default", bool, is_required=True),
            E("collect_call", "collectCall", bool, is_required=True),
            E("web_display_key", "webDisplayKey", str),
        )


class SystemClassmarkGetListResponse(OCIResponse):
    """
    Response to ``SystemClassmarkGetListRequest()``.

    Contains a table of with the column headings: "Class Mark", "Value" and "Web Display
    Key".

    Attributes:
        classmark_table: classmarkTable
    """

    __slots__ = [
        "classmark_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "classmark_table",
                "classmarkTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemClassmarkGetUtilizationListResponse(OCIResponse):
    """
    Response to ``SystemClassmarkGetUtilizationListRequest()``.

    Contains a table with the column headings: "User Id", "Group Id", "Service Provider
    Id", "Last Name", "First Name", and "Phone Number", "Extension", "Department", "Email
    Address".

    Attributes:
        classmark_user_table: classmarkUserTable
    """

    __slots__ = [
        "classmark_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "classmark_user_table",
                "classmarkUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemClientSessionParametersGetResponse(OCIResponse):
    """
    Response to ``SystemClientSessionParametersGetRequest()``.

    Contains a list of system Client Session (web and CLI) parameters.

    Attributes:
        enable_inactivity_timeout: enableInactivityTimeout
        inactivity_timeout_minutes: inactivityTimeoutMinutes
    """

    __slots__ = [
        "enable_inactivity_timeout",
        "inactivity_timeout_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_inactivity_timeout",
                "enableInactivityTimeout",
                bool,
                is_required=True,
            ),
            E(
                "inactivity_timeout_minutes",
                "inactivityTimeoutMinutes",
                int,
                is_required=True,
            ),
        )


class SystemCodecGetListResponse(OCIResponse):
    """
    Response to ``SystemCodecGetListRequest()``.


    Attributes:
        codec: codec
    """

    __slots__ = [
        "codec",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("codec", "codec", str, is_array=True),
        )


class SystemCommunicationBarringAlternateCallIndicatorGetListResponse(OCIResponse):
    """
    Response to a ``SystemCommunicationBarringAlternateCallIndicatorGetListRequest()``.

    Contains a table with one row per Communication Barring Alternate Call Indicator.  The
    table column headings are: "Alternate Call Indicator" and "Network Server Alternate
    Call Indicator".

    Attributes:
        alternate_call_indicator_table: alternateCallIndicatorTable
    """

    __slots__ = [
        "alternate_call_indicator_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator_table",
                "alternateCallIndicatorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringCallTypeGetListResponse(OCIResponse):
    """
    Response to a ``SystemCommunicationBarringCallTypeGetListRequest()``.

    Contains a table with one row per Communication Barring Call Type.  The table column
    headings are: "Call Type" and "Network Server Call Type".

    Attributes:
        call_type_table: callTypeTable
    """

    __slots__ = [
        "call_type_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_type_table",
                "callTypeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringCriteriaGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetListRequest()``.

    The response contains a table of all Communication Barring Criteria in the system.
    The column headings are "Name" and "Description".

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringCriteriaGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetRequest()``.

    The response contains the Communication Barring Criteria information.  Replaced by:
    ``SystemCommunicationBarringCriteriaGetResponse17()``

    Attributes:
        description: description
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_public_network: matchPublicNetwork
        match_private_network: matchPrivateNetwork
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
        match_inter_network: matchInterNetwork
        match_inter_hosting_ne: matchInterHostingNE
        match_inter_as: matchInterAS
        match_intra_as: matchIntraAS
        match_charge_calls: matchChargeCalls
        match_no_charge_calls: matchNoChargeCalls
        match_group_calls: matchGroupCalls
        match_enterprise_calls: matchEnterpriseCalls
        match_network_calls: matchNetworkCalls
        match_network_url_calls: matchNetworkURLCalls
        match_repair_calls: matchRepairCalls
        match_emergency_calls: matchEmergencyCalls
        match_internal_calls: matchInternalCalls
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
    """

    __slots__ = [
        "description",
        "match_call_type",
        "match_alternate_call_indicator",
        "match_public_network",
        "match_private_network",
        "match_local_category",
        "match_national_category",
        "match_interlata_category",
        "match_intralata_category",
        "match_international_category",
        "match_private_category",
        "match_emergency_category",
        "match_other_category",
        "match_inter_network",
        "match_inter_hosting_ne",
        "match_inter_as",
        "match_intra_as",
        "match_charge_calls",
        "match_no_charge_calls",
        "match_group_calls",
        "match_enterprise_calls",
        "match_network_calls",
        "match_network_url_calls",
        "match_repair_calls",
        "match_emergency_calls",
        "match_internal_calls",
        "time_schedule",
        "holiday_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E("match_public_network", "matchPublicNetwork", bool, is_required=True),
            E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
            E("match_inter_network", "matchInterNetwork", bool, is_required=True),
            E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
            E("match_inter_as", "matchInterAS", bool, is_required=True),
            E("match_intra_as", "matchIntraAS", bool, is_required=True),
            E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
            E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
            E("match_group_calls", "matchGroupCalls", bool, is_required=True),
            E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
            E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
            E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
            E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
            E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
            E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
        )


class SystemCommunicationBarringCriteriaGetResponse17(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetRequest17()``.

    The response contains the Communication Barring Criteria information.

    Attributes:
        description: description
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_virtual_on_net_call_type: matchVirtualOnNetCallType
        match_public_network: matchPublicNetwork
        match_private_network: matchPrivateNetwork
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
        match_inter_network: matchInterNetwork
        match_inter_hosting_ne: matchInterHostingNE
        match_inter_as: matchInterAS
        match_intra_as: matchIntraAS
        match_charge_calls: matchChargeCalls
        match_no_charge_calls: matchNoChargeCalls
        match_group_calls: matchGroupCalls
        match_enterprise_calls: matchEnterpriseCalls
        match_network_calls: matchNetworkCalls
        match_network_url_calls: matchNetworkURLCalls
        match_repair_calls: matchRepairCalls
        match_emergency_calls: matchEmergencyCalls
        match_internal_calls: matchInternalCalls
        match_location: matchLocation
        match_roaming: matchRoaming
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
    """

    __slots__ = [
        "description",
        "match_call_type",
        "match_alternate_call_indicator",
        "match_virtual_on_net_call_type",
        "match_public_network",
        "match_private_network",
        "match_local_category",
        "match_national_category",
        "match_interlata_category",
        "match_intralata_category",
        "match_international_category",
        "match_private_category",
        "match_emergency_category",
        "match_other_category",
        "match_inter_network",
        "match_inter_hosting_ne",
        "match_inter_as",
        "match_intra_as",
        "match_charge_calls",
        "match_no_charge_calls",
        "match_group_calls",
        "match_enterprise_calls",
        "match_network_calls",
        "match_network_url_calls",
        "match_repair_calls",
        "match_emergency_calls",
        "match_internal_calls",
        "match_location",
        "match_roaming",
        "time_schedule",
        "holiday_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E(
                "match_virtual_on_net_call_type",
                "matchVirtualOnNetCallType",
                str,
                is_array=True,
            ),
            E("match_public_network", "matchPublicNetwork", bool, is_required=True),
            E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
            E("match_inter_network", "matchInterNetwork", bool, is_required=True),
            E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
            E("match_inter_as", "matchInterAS", bool, is_required=True),
            E("match_intra_as", "matchIntraAS", bool, is_required=True),
            E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
            E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
            E("match_group_calls", "matchGroupCalls", bool, is_required=True),
            E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
            E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
            E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
            E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
            E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
            E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
            E("match_location", "matchLocation", str, is_required=True),
            E("match_roaming", "matchRoaming", str, is_required=True),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
        )


class SystemCommunicationBarringCriteriaGetResponse19sp1(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringCriteriaGetRequest19sp1()``.

    The response contains the Communication Barring Criteria information.

    Attributes:
        description: description
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_virtual_on_net_call_type: matchVirtualOnNetCallType
        match_public_network: matchPublicNetwork
        match_private_network: matchPrivateNetwork
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
        match_inter_network: matchInterNetwork
        match_inter_hosting_ne: matchInterHostingNE
        match_inter_as: matchInterAS
        match_intra_as: matchIntraAS
        match_charge_calls: matchChargeCalls
        match_no_charge_calls: matchNoChargeCalls
        match_group_calls: matchGroupCalls
        match_enterprise_calls: matchEnterpriseCalls
        match_network_calls: matchNetworkCalls
        match_network_url_calls: matchNetworkURLCalls
        match_repair_calls: matchRepairCalls
        match_emergency_calls: matchEmergencyCalls
        match_internal_calls: matchInternalCalls
        match_location: matchLocation
        match_roaming: matchRoaming
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        match_number_portability_status: matchNumberPortabilityStatus
    """

    __slots__ = [
        "description",
        "match_call_type",
        "match_alternate_call_indicator",
        "match_virtual_on_net_call_type",
        "match_public_network",
        "match_private_network",
        "match_local_category",
        "match_national_category",
        "match_interlata_category",
        "match_intralata_category",
        "match_international_category",
        "match_private_category",
        "match_emergency_category",
        "match_other_category",
        "match_inter_network",
        "match_inter_hosting_ne",
        "match_inter_as",
        "match_intra_as",
        "match_charge_calls",
        "match_no_charge_calls",
        "match_group_calls",
        "match_enterprise_calls",
        "match_network_calls",
        "match_network_url_calls",
        "match_repair_calls",
        "match_emergency_calls",
        "match_internal_calls",
        "match_location",
        "match_roaming",
        "time_schedule",
        "holiday_schedule",
        "match_number_portability_status",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E(
                "match_virtual_on_net_call_type",
                "matchVirtualOnNetCallType",
                str,
                is_array=True,
            ),
            E("match_public_network", "matchPublicNetwork", bool, is_required=True),
            E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
            E("match_inter_network", "matchInterNetwork", bool, is_required=True),
            E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
            E("match_inter_as", "matchInterAS", bool, is_required=True),
            E("match_intra_as", "matchIntraAS", bool, is_required=True),
            E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
            E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
            E("match_group_calls", "matchGroupCalls", bool, is_required=True),
            E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
            E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
            E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
            E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
            E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
            E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
            E("match_location", "matchLocation", str, is_required=True),
            E("match_roaming", "matchRoaming", str, is_required=True),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
            E(
                "match_number_portability_status",
                "matchNumberPortabilityStatus",
                str,
                is_array=True,
            ),
        )


class SystemCommunicationBarringDigitPatternCriteriaGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringDigitPatternCriteriaGetListRequest()``.

    The response contains a table of all Digit Pattern Criteria defined at the system
    level.  The column headings are "Name" and "Description"

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringDigitPatternCriteriaGetPatternListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringDigitPatternCriteriaGetPatternListRequest()``.

    The response contains the Digit Pattern Criteria information.

    Attributes:
        match_digit_pattern: matchDigitPattern
    """

    __slots__ = [
        "match_digit_pattern",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
        )


class SystemCommunicationBarringDigitPatternCriteriaGetResponse(OCIResponse):
    """
    The response to a ``SystemCommunicationBarringDigitPatternCriteriaGetRequest()``.


    Attributes:
        description: description
        digit_pattern: digitPattern
    """

    __slots__ = [
        "description",
        "digit_pattern",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("digit_pattern", "digitPattern", str, is_array=True),
        )


class SystemCommunicationBarringGetResponse(OCIResponse):
    """
    Response to ``SystemCommunicationBarringGetRequest()``.


    Attributes:
        direct_transfer_screening: directTransferScreening
    """

    __slots__ = [
        "direct_transfer_screening",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "direct_transfer_screening",
                "directTransferScreening",
                bool,
                is_required=True,
            ),
        )


class SystemCommunicationBarringIncomingCriteriaGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringIncomingCriteriaGetListRequest()``.

    The response contains a table of all Communication Barring Incoming Criteria in the
    system.  The column headings are "Name" and "Description".

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringIncomingCriteriaGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringIncomingCriteriaGetRequest()``.

    The response contains the Communication Barring Incoming Criteria information.

    Attributes:
        description: description
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        match_number_portability_status: matchNumberPortabilityStatus
    """

    __slots__ = [
        "description",
        "time_schedule",
        "holiday_schedule",
        "match_number_portability_status",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
            E(
                "match_number_portability_status",
                "matchNumberPortabilityStatus",
                str,
                is_array=True,
            ),
        )


class SystemCommunicationBarringProfileGetCriteriaUsageListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetCriteriaUsageListRequest()``.

    The response contains a table of system Communication Barring Profiles that use the
    specific Communication Barring Criteria.  The column headings are "Name" and
    "Description"

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest()``.

    The response contains a table of all Profiles that use the specific Digit Pattern
    Criteria.  The column headings are "Name" and "Description"

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringProfileGetIncomingCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringProfileGetIncomingCriteriaUsageListRequest()``.

    The response contains a table of system Communication Barring Profiles that use the
    specific Communication Barring Incoming Criteria.  The column headings are "Name" and
    "Description"

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringProfileGetListResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetListRequest()``.

    The response contains a table of all Communication Barring Profiles in the system.
    The column headings are "Name" and "Description"

    Attributes:
        profile_table: profileTable
    """

    __slots__ = [
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringServiceProviderGetCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringServiceProviderGetCriteriaUsageListRequest()``.

    The response contains a table of all Service Providers that use the specific
    Communication Barring criteria.  The column headings are "Service Provider Id",
    "Service Provider Name" and "Is Enterprise"

    Attributes:
        service_provider_table: serviceProviderTable
    """

    __slots__ = [
        "service_provider_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_table",
                "serviceProviderTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringServiceProviderGetIncomingCriteriaUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemCommunicationBarringServiceProviderGetIncomingCriteriaUsageListRequest()``.

    The response contains a table of all Service Providers that use the specific
    Communication Barring Incoming criteria.  The column headings are "Service Provider
    Id", "Service Provider Name" and "Is Enterprise"

    Attributes:
        service_provider_table: serviceProviderTable
    """

    __slots__ = [
        "service_provider_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_table",
                "serviceProviderTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCommunicationBarringUserControlGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringUserControlGetRequest()``.

    Contains the settings to whole system for Communication Barring User-Control

    Attributes:
        enable_lockout: enableLockout
        max_number_of_failed_attempts: maxNumberOfFailedAttempts
        lockout_minutes: lockoutMinutes
    """

    __slots__ = [
        "enable_lockout",
        "max_number_of_failed_attempts",
        "lockout_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_lockout", "enableLockout", bool, is_required=True),
            E(
                "max_number_of_failed_attempts",
                "maxNumberOfFailedAttempts",
                int,
                is_required=True,
            ),
            E("lockout_minutes", "lockoutMinutes", int, is_required=True),
        )


class SystemConfigurableFileSystemGetResponse(OCIResponse):
    """
    Response to ``SystemConfigurableFileSystemGetRequest()``.

    Contains the File System parameters.

    Attributes:
        media_directory: mediaDirectory
        protocol_file: protocolFile
        protocol_web_dav: protocolWebDAV
    """

    __slots__ = [
        "media_directory",
        "protocol_file",
        "protocol_web_dav",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_directory", "mediaDirectory", str, is_required=True),
            E("protocol_file", "protocolFile", str, is_complex=True),  # unknown
            E("protocol_web_dav", "protocolWebDAV", str, is_complex=True),  # unknown
        )


class SystemConfigurableTreatmentGetListResponse(OCIResponse):
    """
    Response to a ``SystemConfigurableTreatmentGetListRequest()``.

    Contains a table with one row per treatment.  The table columns are: "Treatment Id",
    "Description".

    Attributes:
        treatment_table: treatmentTable
    """

    __slots__ = [
        "treatment_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_table",
                "treatmentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemConfigurableTreatmentGetResponse(OCIResponse):
    """
    Response to the ``SystemConfigurableTreatmentGetRequest()``.

    The response contains the treatment configurable information.

    Replaced By: ``SystemConfigurableTreatmentGetResponse16()``

    Attributes:
        description: description
        charge_indicator: chargeIndicator
        access_sip_status_code: accessSIPStatusCode
        access_sip_status_message: accessSIPStatusMessage
        network_sip_status_code: networkSIPStatusCode
        network_sip_status_message: networkSIPStatusMessage
        q850_cause_value: q850CauseValue
        q850_text: q850Text
        access_treatment_audio_file: accessTreatmentAudioFile
        access_treatment_video_file: accessTreatmentVideoFile
        network_treatment_audio_file: networkTreatmentAudioFile
        network_treatment_video_file: networkTreatmentVideoFile
        cdr_termination_cause: cdrTerminationCause
        route_advance: routeAdvance
        internal_release_cause: internalReleaseCause
        access_send_reason_header: accessSendReasonHeader
        network_send_reason_header: networkSendReasonHeader
    """

    __slots__ = [
        "description",
        "charge_indicator",
        "access_sip_status_code",
        "access_sip_status_message",
        "network_sip_status_code",
        "network_sip_status_message",
        "q850_cause_value",
        "q850_text",
        "access_treatment_audio_file",
        "access_treatment_video_file",
        "network_treatment_audio_file",
        "network_treatment_video_file",
        "cdr_termination_cause",
        "route_advance",
        "internal_release_cause",
        "access_send_reason_header",
        "network_send_reason_header",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("charge_indicator", "chargeIndicator", str, is_required=True),
            E("access_sip_status_code", "accessSIPStatusCode", int),
            E("access_sip_status_message", "accessSIPStatusMessage", str),
            E("network_sip_status_code", "networkSIPStatusCode", int),
            E("network_sip_status_message", "networkSIPStatusMessage", str),
            E("q850_cause_value", "q850CauseValue", int),
            E("q850_text", "q850Text", str),
            E("access_treatment_audio_file", "accessTreatmentAudioFile", str),
            E("access_treatment_video_file", "accessTreatmentVideoFile", str),
            E("network_treatment_audio_file", "networkTreatmentAudioFile", str),
            E("network_treatment_video_file", "networkTreatmentVideoFile", str),
            E("cdr_termination_cause", "cdrTerminationCause", str),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("internal_release_cause", "internalReleaseCause", str),
            E(
                "access_send_reason_header",
                "accessSendReasonHeader",
                bool,
                is_required=True,
            ),
            E(
                "network_send_reason_header",
                "networkSendReasonHeader",
                bool,
                is_required=True,
            ),
        )


class SystemConfigurableTreatmentGetResponse16(OCIResponse):
    """
    Response to the ``SystemConfigurableTreatmentGetRequest16()``.

    The response contains the treatment configurable information.

    Attributes:
        description: description
        charge_indicator: chargeIndicator
        access_sip_status_code: accessSIPStatusCode
        access_sip_status_message: accessSIPStatusMessage
        network_sip_status_code: networkSIPStatusCode
        network_sip_status_message: networkSIPStatusMessage
        q850_cause_value: q850CauseValue
        q850_text: q850Text
        access_treatment_audio_file: accessTreatmentAudioFile
        access_treatment_video_file: accessTreatmentVideoFile
        network_treatment_audio_file: networkTreatmentAudioFile
        network_treatment_video_file: networkTreatmentVideoFile
        cdr_termination_cause: cdrTerminationCause
        route_advance: routeAdvance
        internal_release_cause: internalReleaseCause
        access_send_reason_header: accessSendReasonHeader
        network_send_reason_header: networkSendReasonHeader
    """

    __slots__ = [
        "description",
        "charge_indicator",
        "access_sip_status_code",
        "access_sip_status_message",
        "network_sip_status_code",
        "network_sip_status_message",
        "q850_cause_value",
        "q850_text",
        "access_treatment_audio_file",
        "access_treatment_video_file",
        "network_treatment_audio_file",
        "network_treatment_video_file",
        "cdr_termination_cause",
        "route_advance",
        "internal_release_cause",
        "access_send_reason_header",
        "network_send_reason_header",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("charge_indicator", "chargeIndicator", str, is_required=True),
            E("access_sip_status_code", "accessSIPStatusCode", int),
            E("access_sip_status_message", "accessSIPStatusMessage", str),
            E("network_sip_status_code", "networkSIPStatusCode", int),
            E("network_sip_status_message", "networkSIPStatusMessage", str),
            E("q850_cause_value", "q850CauseValue", int),
            E("q850_text", "q850Text", str),
            E("access_treatment_audio_file", "accessTreatmentAudioFile", str),
            E("access_treatment_video_file", "accessTreatmentVideoFile", str),
            E("network_treatment_audio_file", "networkTreatmentAudioFile", str),
            E("network_treatment_video_file", "networkTreatmentVideoFile", str),
            E("cdr_termination_cause", "cdrTerminationCause", str),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("internal_release_cause", "internalReleaseCause", str),
            E(
                "access_send_reason_header",
                "accessSendReasonHeader",
                bool,
                is_required=True,
            ),
            E(
                "network_send_reason_header",
                "networkSendReasonHeader",
                bool,
                is_required=True,
            ),
        )


class SystemConnectedLineIdentificationPresentationGetResponse(OCIResponse):
    """
    Response to ``SystemConnectedLineIdentificationPresentationGetRequest()``.


    Attributes:
        enforce_user_service_assignment: enforceUserServiceAssignment
    """

    __slots__ = [
        "enforce_user_service_assignment",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enforce_user_service_assignment",
                "enforceUserServiceAssignment",
                bool,
                is_required=True,
            ),
        )


class SystemCountryCodeGetListResponse(OCIResponse):
    """
    Response to a ``SystemCountryCodeGetListRequest()``.

    Contains the default country code and a table with one row per country code.  The
    table columns are "Country Code", "Country Name", "Off Hook Warning Seconds", "Ring
    Period Milliseconds", "National Prefix", "Use Prefix", "Maximum Call Waiting Tones",
    "Time Between Call Waiting Tones Milliseconds" and "Disable National Prefix for OffNet
    Calls".

    Attributes:
        default_country_code: defaultCountryCode
        country_code_table: countryCodeTable
    """

    __slots__ = [
        "default_country_code",
        "country_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_country_code", "defaultCountryCode", str, is_required=True),
            E(
                "country_code_table",
                "countryCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemCrInterfaceGetResponse(OCIResponse):
    """
    Response to the ``SystemCrInterfaceGetRequest()``.


    Attributes:
        cr_audit_enabled: crAuditEnabled
        cr_audit_interval_milliseconds: crAuditIntervalMilliseconds
        cr_audit_timeout_milliseconds: crAuditTimeoutMilliseconds
        cr_connection_enabled: crConnectionEnabled
        cr_connection_timeout_milliseconds: crConnectionTimeoutMilliseconds
    """

    __slots__ = [
        "cr_audit_enabled",
        "cr_audit_interval_milliseconds",
        "cr_audit_timeout_milliseconds",
        "cr_connection_enabled",
        "cr_connection_timeout_milliseconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("cr_audit_enabled", "crAuditEnabled", bool, is_required=True),
            E(
                "cr_audit_interval_milliseconds",
                "crAuditIntervalMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "cr_audit_timeout_milliseconds",
                "crAuditTimeoutMilliseconds",
                int,
                is_required=True,
            ),
            E("cr_connection_enabled", "crConnectionEnabled", bool, is_required=True),
            E(
                "cr_connection_timeout_milliseconds",
                "crConnectionTimeoutMilliseconds",
                int,
                is_required=True,
            ),
        )


class SystemCustomerOriginatedTraceGetResponse(OCIResponse):
    """
    Response to ``SystemCustomerOriginatedTraceGetRequest()``.


    Attributes:
        screen_malicious_callers: screenMaliciousCallers
    """

    __slots__ = [
        "screen_malicious_callers",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "screen_malicious_callers",
                "screenMaliciousCallers",
                bool,
                is_required=True,
            ),
        )


class SystemDTMFTransmissionGetResponse(OCIResponse):
    """
    Response to the ``SystemDTMFTransmissionGetRequest()``.


    Attributes:
        transmission_method: transmissionMethod
        signaling_content_type: signalingContentType
    """

    __slots__ = [
        "transmission_method",
        "signaling_content_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("transmission_method", "transmissionMethod", str, is_required=True),
            E("signaling_content_type", "signalingContentType", str),
        )


class SystemDeviceManagementAutoRebuildConfigGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementAutoRebuildConfigGetListRequest()``.

    Contains a table with column headings: "OCI Request Prefix", "Auto Rebuild Enabled".
    "OCI Request Prefix" is the prefix of the OCI request name.  It does not include the
    request's version '17.sp4, 18...' since the disabled flag applies to the whole series
    of requests, independent of the version.  "Auto Rebuild Enabled": 'True' if the
    request prefix triggers DM events automatically.  Otherwise, automatic DM events are
    not generated.

    Attributes:
        auto_rebuild_config_table: autoRebuildConfigTable
    """

    __slots__ = [
        "auto_rebuild_config_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "auto_rebuild_config_table",
                "autoRebuildConfigTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDeviceManagementEventGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementEventGetListRequest()``.

    Contains a table with column headings: "Event Id", "Status", "Action", "Level",
    "Type", "Additional Info", "Is Local", "Completion %", "Pushed/ Same Hash/ Not
    Pushed", "Login Id", "Start Time", "Process Time". "Event Id" is a unique identifer
    for the event.  "Status" can be: Pending, Queued, In Progress, Process On Other Host,
    Stale, Completed, Canceled.  "Action" can be: Delete, Download, Rebuild, Reset,
    Upload.  "Level" can be: Device, Device Type, Device Type Group, Group, User.  "Type"
    can be: Automatic, Manual.  "Additional Info" includes the affected device type,
    device or group.  It depends on the level of the event: Device Profile: "Device Name"
    "Service Provider Id" "Group Id" Device Type: "Device Type Name" Device Type Group:
    "Service Provider Id" "Group Id" "Device Type Name" Group: "Service Provider Id"
    "Group Id" User: "User Id" "Is Local" is set to "yes" if the event is processed on the
    server who received the request, "no" otherwise meaning that the event is processed on
    another server.  "Completion %" provides an estimate of the completion of the event.
    A percentage is given, the current number of completed expanded event, and the total
    number of expanded event.  "Pushed/ Same Hash/ Not Pushed" gives the total number of
    files that were pushed, not pushed because of same hash, and not pushed when
    processing the event.  "LoginId" is the user or admin id who triggered the event.
    "Start Time" is the date when the event was started.  The display shows the month,
    days, hours, and minutes (MM-dd hh:mm). "Process Time" is the time taken to process
    the event in hours, minutes, seconds, and milliseconds (hhhh:mm:ss.SSS). Each row
    represents an event sorted by priority of processing.  The first row in the table is
    an event that has an associated expanded event currently being processed or next in
    line to be processed.

    Attributes:
        event_table: eventTable
    """

    __slots__ = [
        "event_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "event_table",
                "eventTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDeviceManagementGetAccessDeviceCountForDeviceTypeResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementGetAccessDeviceCountForDeviceTypeRequest()``.


    Attributes:
        access_device_count: accessDeviceCount
    """

    __slots__ = [
        "access_device_count",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_device_count", "accessDeviceCount", int, is_required=True),
        )


class SystemDeviceManagementGetEventStatusSummaryCountResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementGetEventStatusSummaryCountRequest()``.

    The column headings are "Action, "Pending", "Queued Internally", and "Completed"

    Attributes:
        status_count_table: statusCountTable
    """

    __slots__ = [
        "status_count_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "status_count_table",
                "statusCountTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDeviceManagementTagGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementTagGetListRequest()``.

    Contains a table of custom configuration tags managed by the Device Management System.
    The column headings are: "Tag Name", "Tag Value".

    Attributes:
        tags_table: tagsTable
    """

    __slots__ = [
        "tags_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "tags_table",
                "tagsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDeviceManagementTagSetGetListResponse(OCIResponse):
    """
    Response to ``SystemDeviceManagementTagSetGetListRequest()``.

    The response includes an array of tag set names defined in the system.  The system
    default tag set name is not part of this response.

    Attributes:
        tag_set_name: tagSetName
    """

    __slots__ = [
        "tag_set_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("tag_set_name", "tagSetName", str, is_array=True),
        )


class SystemDeviceProfileAuthenticationLockoutGetResponse(OCIResponse):
    """
    Response to ``SystemDeviceProfileAuthenticationLockoutGetRequest()``.

    The column headings for the lockoutTable are: "Organization Id", "Organization Type",
    "Group Id", "Identity/Device Profile Name", " Identity/Device Profile Type", "Lockout
    Started", "Lockout Expires", "Lockout Count". Lockout times are shown in the system
    GMT time.  When a permanent lockout is shown, the "Lockout Expires" column is empty
    and the "Lockout Count" column contains the word Permanent.

    Attributes:
        lockout_table: lockoutTable
    """

    __slots__ = [
        "lockout_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "lockout_table",
                "lockoutTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDeviceProfileAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``SystemDeviceProfileAuthenticationPasswordRulesGetRequest()``.

    Contains the device profile authentication password rules for the system.

    Attributes:
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        device_profile_authentication_lockout_type: deviceProfileAuthenticationLockoutType
        device_profile_temporary_lockout_threshold: deviceProfileTemporaryLockoutThreshold
        device_profile_wait_algorithm: deviceProfileWaitAlgorithm
        device_profile_lockout_fixed_minutes: deviceProfileLockoutFixedMinutes
        device_profile_permanent_lockout_threshold: deviceProfilePermanentLockoutThreshold
    """

    __slots__ = [
        "disallow_authentication_name",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "send_permanent_lockout_notification",
        "permanent_lockout_notify_email_address",
        "device_profile_authentication_lockout_type",
        "device_profile_temporary_lockout_threshold",
        "device_profile_wait_algorithm",
        "device_profile_lockout_fixed_minutes",
        "device_profile_permanent_lockout_threshold",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_authentication_name",
                "disallowAuthenticationName",
                bool,
                is_required=True,
            ),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
                is_required=True,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "device_profile_authentication_lockout_type",
                "deviceProfileAuthenticationLockoutType",
                str,
                is_required=True,
            ),
            E(
                "device_profile_temporary_lockout_threshold",
                "deviceProfileTemporaryLockoutThreshold",
                int,
                is_required=True,
            ),
            E(
                "device_profile_wait_algorithm",
                "deviceProfileWaitAlgorithm",
                str,
                is_required=True,
            ),
            E(
                "device_profile_lockout_fixed_minutes",
                "deviceProfileLockoutFixedMinutes",
                str,
                is_required=True,
            ),
            E(
                "device_profile_permanent_lockout_threshold",
                "deviceProfilePermanentLockoutThreshold",
                int,
                is_required=True,
            ),
        )


class SystemDeviceTypeExportResponse(OCIResponse):
    """
    Response to ``SystemDeviceTypeExportRequest()``.


    Attributes:
        file: file
    """

    __slots__ = [
        "file",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file", "file", str, is_required=True),
        )


class SystemDeviceTypeGetAvailableListResponse(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest()``.


    Attributes:
        device_type: deviceType
        type_info: typeInfo
    """

    __slots__ = [
        "device_type",
        "type_info",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_array=True),
            E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
        )


class SystemDeviceTypeGetAvailableListResponse14sp1(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest14sp1()``.

    Replaced By: ``SystemDeviceTypeGetAvailableListResponse14sp3()``

    Attributes:
        device_type: deviceType
        type_info: typeInfo
    """

    __slots__ = [
        "device_type",
        "type_info",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_array=True),
            E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
        )


class SystemDeviceTypeGetAvailableListResponse14sp3(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest14sp3()``.


    Attributes:
        device_type: deviceType
        type_info: typeInfo
    """

    __slots__ = [
        "device_type",
        "type_info",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_array=True),
            E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
        )


class SystemDeviceTypeGetAvailableListResponse19(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetAvailableListRequest19()``.

    Note: element numberOfPorts is only used by devices types with static line ordering
    enabled

    Attributes:
        device_type: deviceType
        type_info: typeInfo
    """

    __slots__ = [
        "device_type",
        "type_info",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_array=True),
            E("type_info", "typeInfo", str, is_complex=True, is_array=True),  # unknown
        )


class SystemDialPlanPolicyGetAccessCodeListResponse(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetAccessCodeListRequest()``.

    Contains a table with column headings: "Access Code", "Enable Secondary Dial Tone",
    "Description"

    Attributes:
        access_code_table: accessCodeTable
    """

    __slots__ = [
        "access_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_code_table",
                "accessCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDialPlanPolicyGetAccessCodeResponse(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetAccessCodeRequest()``

    Attributes:
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    __slots__ = [
        "include_code_for_network_translations_and_routing",
        "include_code_for_screening_services",
        "enable_secondary_dial_tone",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
                is_required=True,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
                is_required=True,
            ),
            E(
                "enable_secondary_dial_tone",
                "enableSecondaryDialTone",
                bool,
                is_required=True,
            ),
            E("description", "description", str),
        )


class SystemDialPlanPolicyGetResponse(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetRequest()`` Replaced by:
    ``SystemDialPlanPolicyGetResponse17()``

    Attributes:
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "requires_access_code_for_public_calls",
        "allow_e164_public_calls",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
                is_required=True,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
            E("public_digit_map", "publicDigitMap", str, is_required=True),
            E("private_digit_map", "privateDigitMap", str),
        )


class SystemDialPlanPolicyGetResponse17(OCIResponse):
    """
    Response to ``SystemDialPlanPolicyGetRequest17()``

    Attributes:
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        prefer_e164_number_format_for_callback_services:
            preferE164NumberFormatForCallbackServices
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "requires_access_code_for_public_calls",
        "allow_e164_public_calls",
        "prefer_e164_number_format_for_callback_services",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
                is_required=True,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool, is_required=True),
            E(
                "prefer_e164_number_format_for_callback_services",
                "preferE164NumberFormatForCallbackServices",
                bool,
                is_required=True,
            ),
            E("public_digit_map", "publicDigitMap", str, is_required=True),
            E("private_digit_map", "privateDigitMap", str),
        )


class SystemDialableCallerIDCriteriaGetResponse(OCIResponse):
    """
    Response to the ``SystemDialableCallerIDCriteriaGetRequest()``.

    The response contains the Dialable Caller ID Criteria information.

    Attributes:
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    __slots__ = [
        "description",
        "prefix_digits",
        "match_call_type",
        "match_alternate_call_indicator",
        "match_local_category",
        "match_national_category",
        "match_interlata_category",
        "match_intralata_category",
        "match_international_category",
        "match_private_category",
        "match_emergency_category",
        "match_other_category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
        )


class SystemDialableCallerIDGetResponse(OCIResponse):
    """
    Response to the ``SystemDialableCallerIDGetRequest()``.

    The criteria table?s column headings are ?Active?, "Name", "Description", ?Prefix
    Digits?, and ?Priority?.

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDigitCollectionGetResponse13mp4(OCIResponse):
    """
    Response to ``SystemDigitCollectionGetRequest13mp4()``.


    Attributes:
        access_code: accessCode
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    __slots__ = [
        "access_code",
        "public_digit_map",
        "private_digit_map",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_code", "accessCode", str),
            E("public_digit_map", "publicDigitMap", str, is_required=True),
            E("private_digit_map", "privateDigitMap", str),
        )


class SystemDnGetSummaryListResponse(OCIResponse):
    """
    Response to ``SystemDnGetSummaryListRequest()``.

    The column headings are "Phone Numbers, "Service Provider Id" and "Is Enterprise"

    Attributes:
        dn_summary_table: dnSummaryTable
    """

    __slots__ = [
        "dn_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_summary_table",
                "dnSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDnGetUtilizationListResponse(OCIResponse):
    """
    Response to ``SystemDnUtilizationGetListRequest()``.

    The table columns are: "Service Provider Id", "Phone Numbers", "Assigned to Groups",
    "Percentage Assigned", "Is Enterprise" and "Activated on Groups".

    Attributes:
        dn_utilization_table: dnUtilizationTable
    """

    __slots__ = [
        "dn_utilization_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_utilization_table",
                "dnUtilizationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDnGetUtilizationResponse(OCIResponse):
    """
    Response to ``SystemDnGetUtilizationRequest()``.

    Replaced By: ``SystemDnGetUtilizationResponse14sp3()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        user_id: userId
        user_type: userType
        is_group_calling_line_id: isGroupCallingLineId
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "user_id",
        "user_type",
        "is_group_calling_line_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str),
            E("user_id", "userId", str),
            E("user_type", "userType", str),
            E(
                "is_group_calling_line_id",
                "isGroupCallingLineId",
                bool,
                is_required=True,
            ),
        )


class SystemDnGetUtilizationResponse14sp3(OCIResponse):
    """
    Response to ``SystemDnGetUtilizationRequest14sp3()``.

    The isActivated element is only included when the DN is assigned to a user.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        user_id: userId
        user_type: userType
        is_group_calling_line_id: isGroupCallingLineId
        is_activated: isActivated
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "user_id",
        "user_type",
        "is_group_calling_line_id",
        "is_activated",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str),
            E("user_id", "userId", str),
            E("user_type", "userType", str),
            E(
                "is_group_calling_line_id",
                "isGroupCallingLineId",
                bool,
                is_required=True,
            ),
            E("is_activated", "isActivated", bool),
        )


class SystemDomainGetAssignedServiceProviderListResponse(OCIResponse):
    """
    Response to ``SystemDomainGetAssignedServiceProviderListRequest()``.

    The table columns are: "Service Provider Id", "Service Provider Name" and "Is
    Enterprise".

    Attributes:
        service_provider_table: serviceProviderTable
    """

    __slots__ = [
        "service_provider_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_table",
                "serviceProviderTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemDomainGetListResponse(OCIResponse):
    """
    Contains a simple list of all system-level domain names.


    Attributes:
        system_default_domain: systemDefaultDomain
        domain: domain
    """

    __slots__ = [
        "system_default_domain",
        "domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_default_domain", "systemDefaultDomain", str, is_required=True),
            E("domain", "domain", str, is_array=True),
        )


class SystemDomainParametersGetResponse(OCIResponse):
    """
    Response to ``SystemDomainParametersGetRequest()``.

    Contains the system Domain parameters.

    Attributes:
        use_alias_for_domain: useAliasForDomain
        default_domain: defaultDomain
    """

    __slots__ = [
        "use_alias_for_domain",
        "default_domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_alias_for_domain", "useAliasForDomain", bool, is_required=True),
            E("default_domain", "defaultDomain", str, is_required=True),
        )


class SystemEmergencyZonesGetResponse(OCIResponse):
    """
    Response to ``SystemEmergencyZonesGetRequest()``.


    Attributes:
        default_from_address: defaultFromAddress
    """

    __slots__ = [
        "default_from_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
        )


class SystemEndpointGetListResponse(OCIResponse):
    """
    Response to ``SystemEndpointGetListRequest()``.

    The column headings for the endpointTable are: "Organization Id", "Organization Type",
    "Group Id", "Line/Port", "Last Name","First Name", "User Id", "User Type", "Phone
    Number", "Extension", "Device Type", "Device Name", "Net Address", "MAC Address",
    "Department", "Email Address". Possible values for User Type are ‘User’, ‘CCBasic’,
    ‘CCStandard’, ‘CCPremium’, ‘RP’, ‘MOH’, ‘MOHVideo’.

    Attributes:
        endpoint_table: endpointTable
    """

    __slots__ = [
        "endpoint_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "endpoint_table",
                "endpointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemEnhancedCallLogsGetResponse(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsGetRequest()``.


    Attributes:
        is_send_enabled: isSendEnabled
        server1_net_address: server1NetAddress
        server1_send_port: server1SendPort
        server1_retrieve_port: server1RetrievePort
        server2_net_address: server2NetAddress
        server2_send_port: server2SendPort
        server2_retrieve_port: server2RetrievePort
        shared_secret: sharedSecret
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        max_transmissions: maxTransmissions
        soap_timeout_seconds: soapTimeoutSeconds
    """

    __slots__ = [
        "is_send_enabled",
        "server1_net_address",
        "server1_send_port",
        "server1_retrieve_port",
        "server2_net_address",
        "server2_send_port",
        "server2_retrieve_port",
        "shared_secret",
        "retransmission_delay_milli_seconds",
        "max_transmissions",
        "soap_timeout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_send_enabled", "isSendEnabled", bool, is_required=True),
            E("server1_net_address", "server1NetAddress", str),
            E("server1_send_port", "server1SendPort", int, is_required=True),
            E("server1_retrieve_port", "server1RetrievePort", int, is_required=True),
            E("server2_net_address", "server2NetAddress", str),
            E("server2_send_port", "server2SendPort", int, is_required=True),
            E("server2_retrieve_port", "server2RetrievePort", int, is_required=True),
            E("shared_secret", "sharedSecret", str),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
                is_required=True,
            ),
            E("max_transmissions", "maxTransmissions", int, is_required=True),
            E("soap_timeout_seconds", "soapTimeoutSeconds", int, is_required=True),
        )


class SystemEnhancedCallLogsGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsGetRequest17sp4()``.

    The following elements are only used in AS data mode: isSendEnabled server1NetAddress
    server1SendPort server1RetrievePort server2NetAddress server2SendPort
    server2RetrievePort sharedSecret retransmissionDelayMilliSeconds maxTransmissions
    soapTimeoutSeconds useDBS Replaced by:``SystemEnhancedCallLogsGetResponse20sp1()``

    Attributes:
        is_send_enabled: isSendEnabled
        server1_net_address: server1NetAddress
        server1_send_port: server1SendPort
        server1_retrieve_port: server1RetrievePort
        server2_net_address: server2NetAddress
        server2_send_port: server2SendPort
        server2_retrieve_port: server2RetrievePort
        shared_secret: sharedSecret
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        max_transmissions: maxTransmissions
        soap_timeout_seconds: soapTimeoutSeconds
        use_dbs: useDBS
        max_non_paged_response_size: maxNonPagedResponseSize
    """

    __slots__ = [
        "is_send_enabled",
        "server1_net_address",
        "server1_send_port",
        "server1_retrieve_port",
        "server2_net_address",
        "server2_send_port",
        "server2_retrieve_port",
        "shared_secret",
        "retransmission_delay_milli_seconds",
        "max_transmissions",
        "soap_timeout_seconds",
        "use_dbs",
        "max_non_paged_response_size",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_send_enabled", "isSendEnabled", bool, is_required=True),
            E("server1_net_address", "server1NetAddress", str),
            E("server1_send_port", "server1SendPort", int, is_required=True),
            E("server1_retrieve_port", "server1RetrievePort", int, is_required=True),
            E("server2_net_address", "server2NetAddress", str),
            E("server2_send_port", "server2SendPort", int, is_required=True),
            E("server2_retrieve_port", "server2RetrievePort", int, is_required=True),
            E("shared_secret", "sharedSecret", str),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
                is_required=True,
            ),
            E("max_transmissions", "maxTransmissions", int, is_required=True),
            E("soap_timeout_seconds", "soapTimeoutSeconds", int, is_required=True),
            E("use_dbs", "useDBS", bool, is_required=True),
            E(
                "max_non_paged_response_size",
                "maxNonPagedResponseSize",
                int,
                is_required=True,
            ),
        )


class SystemEnhancedCallLogsGetResponse20sp1(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsGetRequest20sp1()``.

    The following elements are only used in AS data mode: isSendEnabled server1NetAddress
    server1SendPort server1RetrievePort server2NetAddress server2SendPort
    server2RetrievePort sharedSecret retransmissionDelayMilliSeconds maxTransmissions
    soapTimeoutSeconds useDBS eclQueryApplicationURL eclQueryDataRepositoryURL

    Attributes:
        is_send_enabled: isSendEnabled
        server1_net_address: server1NetAddress
        server1_send_port: server1SendPort
        server1_retrieve_port: server1RetrievePort
        server2_net_address: server2NetAddress
        server2_send_port: server2SendPort
        server2_retrieve_port: server2RetrievePort
        shared_secret: sharedSecret
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        max_transmissions: maxTransmissions
        soap_timeout_seconds: soapTimeoutSeconds
        use_dbs: useDBS
        max_non_paged_response_size: maxNonPagedResponseSize
        ecl_query_application_url: eclQueryApplicationURL
        ecl_query_data_repository_url: eclQueryDataRepositoryURL
    """

    __slots__ = [
        "is_send_enabled",
        "server1_net_address",
        "server1_send_port",
        "server1_retrieve_port",
        "server2_net_address",
        "server2_send_port",
        "server2_retrieve_port",
        "shared_secret",
        "retransmission_delay_milli_seconds",
        "max_transmissions",
        "soap_timeout_seconds",
        "use_dbs",
        "max_non_paged_response_size",
        "ecl_query_application_url",
        "ecl_query_data_repository_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_send_enabled", "isSendEnabled", bool, is_required=True),
            E("server1_net_address", "server1NetAddress", str),
            E("server1_send_port", "server1SendPort", int, is_required=True),
            E("server1_retrieve_port", "server1RetrievePort", int, is_required=True),
            E("server2_net_address", "server2NetAddress", str),
            E("server2_send_port", "server2SendPort", int, is_required=True),
            E("server2_retrieve_port", "server2RetrievePort", int, is_required=True),
            E("shared_secret", "sharedSecret", str),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
                is_required=True,
            ),
            E("max_transmissions", "maxTransmissions", int, is_required=True),
            E("soap_timeout_seconds", "soapTimeoutSeconds", int, is_required=True),
            E("use_dbs", "useDBS", bool, is_required=True),
            E(
                "max_non_paged_response_size",
                "maxNonPagedResponseSize",
                int,
                is_required=True,
            ),
            E("ecl_query_application_url", "eclQueryApplicationURL", str),
            E("ecl_query_data_repository_url", "eclQueryDataRepositoryURL", str),
        )


class SystemEnhancedCallLogsSchemaInstanceGetListResponse(OCIResponse):
    """
    Response to ``SystemEnhancedCallLogsSchemaInstanceGetListRequest()``.

    Contains a table with column headings: "Instance Name", "Actual Users", "Potential
    Users".

    Attributes:
        schema_instance_usage_table: schemaInstanceUsageTable
    """

    __slots__ = [
        "schema_instance_usage_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schema_instance_usage_table",
                "schemaInstanceUsageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemExecutiveGetResponse(OCIResponse):
    """
    Response to ``SystemExecutiveGetRequest()``.


    Attributes:
        treat_virtual_on_net_calls_as_internal: treatVirtualOnNetCallsAsInternal
    """

    __slots__ = [
        "treat_virtual_on_net_calls_as_internal",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treat_virtual_on_net_calls_as_internal",
                "treatVirtualOnNetCallsAsInternal",
                bool,
                is_required=True,
            ),
        )


class SystemExpensiveCallNotificationGetResponse(OCIResponse):
    """
    Response to ``SystemExpensiveCallNotificationGetRequest()``.


    Attributes:
        enable_post_announcement_delay_timer: enablePostAnnouncementDelayTimer
        post_announcement_delay_seconds: postAnnouncementDelaySeconds
    """

    __slots__ = [
        "enable_post_announcement_delay_timer",
        "post_announcement_delay_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_post_announcement_delay_timer",
                "enablePostAnnouncementDelayTimer",
                bool,
                is_required=True,
            ),
            E(
                "post_announcement_delay_seconds",
                "postAnnouncementDelaySeconds",
                int,
                is_required=True,
            ),
        )


class SystemExpensiveCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemExpensiveCallTypeGetListRequest()``.

    Replaced by: ``SystemExpensiveCallTypeGetListResponse16sp1()``

    Attributes:
        alternate_call_indicator: alternateCallIndicator
    """

    __slots__ = [
        "alternate_call_indicator",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("alternate_call_indicator", "alternateCallIndicator", str, is_array=True),
        )


class SystemExpensiveCallTypeGetListResponse16sp1(OCIResponse):
    """
    Response to ``SystemExpensiveCallTypeGetListRequest16sp1()``.

    The column headings are: "Alternate Call Indicator", "Treatment Audio File".

    Attributes:
        alternate_call_indicator_table: alternateCallIndicatorTable
    """

    __slots__ = [
        "alternate_call_indicator_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator_table",
                "alternateCallIndicatorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemExtensionLengthGetResponse(OCIResponse):
    """
    Response to ``SystemExtensionLengthGetRequest()``.


    Attributes:
        min_extension_length: minExtensionLength
        max_extension_length: maxExtensionLength
    """

    __slots__ = [
        "min_extension_length",
        "max_extension_length",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("min_extension_length", "minExtensionLength", int, is_required=True),
            E("max_extension_length", "maxExtensionLength", int, is_required=True),
        )


class SystemExternalAuthenticationGetACLListResponse(OCIResponse):
    """
    Response to ``SystemExternalAuthenticationGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemExternalEmergencyRoutingParametersGetResponse13mp13(OCIResponse):
    """
    Response to ``SystemExternalEmergencyRoutingParametersGetRequest13mp13()``.

    Contains a list of system External Emergency Routing parameters.

    Attributes:
        service_uri: serviceURI
        default_emergency_number: defaultEmergencyNumber
        is_active: isActive
        supports_dnssrv: supportsDNSSRV
        connection_timeout_seconds: connectionTimeoutSeconds
    """

    __slots__ = [
        "service_uri",
        "default_emergency_number",
        "is_active",
        "supports_dnssrv",
        "connection_timeout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_uri", "serviceURI", str),
            E("default_emergency_number", "defaultEmergencyNumber", str),
            E("is_active", "isActive", bool, is_required=True),
            E("supports_dnssrv", "supportsDNSSRV", bool, is_required=True),
            E(
                "connection_timeout_seconds",
                "connectionTimeoutSeconds",
                int,
                is_required=True,
            ),
        )


class SystemFileGetContentResponse(OCIResponse):
    """
    Response to a ``SystemFileGetContentRequest()``.

    The fileContent length returned is limited to 128KBytes.

    Attributes:
        file_content: fileContent
    """

    __slots__ = [
        "file_content",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_content", "fileContent", str, is_required=True),
        )


class SystemFileRepositoryDeviceGetListResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetListRequest()``.

    Contains a table with column headings : "Name","Protocol", "Root Directory" in a row
    for each file repository.

    Attributes:
        file_repository_table: fileRepositoryTable
    """

    __slots__ = [
        "file_repository_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_repository_table",
                "fileRepositoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemFileRepositoryDeviceUserGetListResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceUserGetListRequest()``.

    Contains a table with column headings : "User Name","Allow Get","Allow Delete","Allow
    Put" in a row for each file repository user.

    Attributes:
        file_repository_user_table: fileRepositoryUserTable
    """

    __slots__ = [
        "file_repository_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_repository_user_table",
                "fileRepositoryUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemFileRepositoryDeviceUserGetResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceUserGetRequest()``.


    Attributes:
        allow_put: allowPut
        allow_delete: allowDelete
        allow_get: allowGet
    """

    __slots__ = [
        "allow_put",
        "allow_delete",
        "allow_get",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_put", "allowPut", bool, is_required=True),
            E("allow_delete", "allowDelete", bool, is_required=True),
            E("allow_get", "allowGet", bool, is_required=True),
        )


class SystemGeographicRedundancyPeerSipConnectionMonitoringGetResponse(OCIResponse):
    """
    Response to ``SystemGeographicRedundancyPeerSipConnectionMonitoringGetRequest()``.

    Contains a list of Peer SIP Connection Monitoring system parameters.

    Attributes:
        enabled: enabled
        heartbeat_interval: heartbeatInterval
        heartbeat_timeout: heartbeatTimeout
    """

    __slots__ = [
        "enabled",
        "heartbeat_interval",
        "heartbeat_timeout",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enabled", "enabled", bool, is_required=True),
            E("heartbeat_interval", "heartbeatInterval", int, is_required=True),
            E("heartbeat_timeout", "heartbeatTimeout", int, is_required=True),
        )


class SystemGeographicRedundancyProxyGetResponse(OCIResponse):
    """
    Response to ``SystemGeographicRedundancyProxyGetRequest()``.

    Contains a list of Geographic Redundancy Proxy system parameters.

    Attributes:
        enabled: enabled
    """

    __slots__ = [
        "enabled",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enabled", "enabled", bool, is_required=True),
        )


class SystemGeographicRedundancyUnreachableFromPrimaryGetUserListResponse(OCIResponse):
    """
    Response to ``SystemGeographicRedundancyUnreachableFromPrimaryGetUserListRequest()``.

    The Unreachable From Primary User table column headings are: "User ID", "Lineport".

    Attributes:
        unreachable_from_primary_user_table: unreachableFromPrimaryUserTable
    """

    __slots__ = [
        "unreachable_from_primary_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "unreachable_from_primary_user_table",
                "unreachableFromPrimaryUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemGetRegistrationContactListResponse(OCIResponse):
    """
    Response to ``SystemGetRegistrationContactListRequest()``.

    The table columns are: "Service Provider Id", "Group Id", "User Id", "Line/Port",
    "Endpoint Type", "Order", "URI", "Expiration", "Contact", "Device Level", "Device
    Name", "Public Net Address", "Public Port", "Private Net Address", "Private Port",
    "User Agent".

    Attributes:
        registration_table: registrationTable
    """

    __slots__ = [
        "registration_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "registration_table",
                "registrationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemGroupNightForwardingGetResponse(OCIResponse):
    """
    Response to ``SystemGroupNightForwardingGetRequest()``.


    Attributes:
        night_forward_inter_group_calls_within_enterprise:
            nightForwardInterGroupCallsWithinEnterprise
    """

    __slots__ = [
        "night_forward_inter_group_calls_within_enterprise",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "night_forward_inter_group_calls_within_enterprise",
                "nightForwardInterGroupCallsWithinEnterprise",
                bool,
                is_required=True,
            ),
        )


class SystemHolidayScheduleGetListResponse(OCIResponse):
    """
    Response to the ``SystemHolidayScheduleGetListRequest()``.

    The response contains all the system holiday schedule names.

    Attributes:
        holiday_schedule_name: holidayScheduleName
    """

    __slots__ = [
        "holiday_schedule_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_array=True),
        )


class SystemHomeNetworkGetListResponse(OCIResponse):
    """
    Response to the ``SystemHomeNetworkGetListRequest()``.


    Attributes:
        msc_address: mscAddress
    """

    __slots__ = [
        "msc_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("msc_address", "mscAddress", str, is_array=True),
        )


class SystemHuntGroupGetResponse(OCIResponse):
    """
    Response to ``SystemHuntGroupGetRequest()``.

    Replaced by: ``SystemHuntGroupGetResponse17()``

    Attributes:
        anonymous_instead_of_private_clid: anonymousInsteadOfPrivateCLID
        remove_hunt_group_name_from_clid: removeHuntGroupNameFromCLID
    """

    __slots__ = [
        "anonymous_instead_of_private_clid",
        "remove_hunt_group_name_from_clid",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "anonymous_instead_of_private_clid",
                "anonymousInsteadOfPrivateCLID",
                bool,
                is_required=True,
            ),
            E(
                "remove_hunt_group_name_from_clid",
                "removeHuntGroupNameFromCLID",
                bool,
                is_required=True,
            ),
        )


class SystemHuntGroupGetResponse17(OCIResponse):
    """
    Response to ``SystemHuntGroupGetRequest()``.

    Replaced by ``SystemHuntGroupGetResponse21()``.

    Attributes:
        anonymous_instead_of_private_clid: anonymousInsteadOfPrivateCLID
        remove_hunt_group_name_from_clid: removeHuntGroupNameFromCLID
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
    """

    __slots__ = [
        "anonymous_instead_of_private_clid",
        "remove_hunt_group_name_from_clid",
        "uniform_call_distribution_policy_scope",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "anonymous_instead_of_private_clid",
                "anonymousInsteadOfPrivateCLID",
                bool,
                is_required=True,
            ),
            E(
                "remove_hunt_group_name_from_clid",
                "removeHuntGroupNameFromCLID",
                bool,
                is_required=True,
            ),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
                is_required=True,
            ),
        )


class SystemHuntGroupGetResponse21(OCIResponse):
    """
    Response to ``SystemHuntGroupGetRequest21()``.


    Attributes:
        remove_hunt_group_name_from_clid: removeHuntGroupNameFromCLID
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
        allow_agent_device_initiated_forward: allowAgentDeviceInitiatedForward
    """

    __slots__ = [
        "remove_hunt_group_name_from_clid",
        "uniform_call_distribution_policy_scope",
        "allow_agent_device_initiated_forward",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "remove_hunt_group_name_from_clid",
                "removeHuntGroupNameFromCLID",
                bool,
                is_required=True,
            ),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
                is_required=True,
            ),
            E(
                "allow_agent_device_initiated_forward",
                "allowAgentDeviceInitiatedForward",
                bool,
                is_required=True,
            ),
        )


class SystemInCallServiceActivationGetResponse(OCIResponse):
    """
    Response to ``SystemInCallServiceActivationGetRequest()``.

    Replaced by: ``SystemInCallServiceActivationGetResponse17()``

    Attributes:
        default_activation_digits: defaultActivationDigits
    """

    __slots__ = [
        "default_activation_digits",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "default_activation_digits",
                "defaultActivationDigits",
                str,
                is_required=True,
            ),
        )


class SystemInCallServiceActivationGetResponse17(OCIResponse):
    """
    Response to ``SystemInCallServiceActivationGetRequest17()``.


    Attributes:
        default_flash_activation_digits: defaultFlashActivationDigits
        default_call_transfer_activation_digits: defaultCallTransferActivationDigits
    """

    __slots__ = [
        "default_flash_activation_digits",
        "default_call_transfer_activation_digits",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "default_flash_activation_digits",
                "defaultFlashActivationDigits",
                str,
                is_required=True,
            ),
            E(
                "default_call_transfer_activation_digits",
                "defaultCallTransferActivationDigits",
                str,
                is_required=True,
            ),
        )


class SystemIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``SystemIntegratedIMPGetRequest()``.

    The response contains the system Integrated IMP service attributes.  Replaced by
    ``SystemIntegratedIMPGetResponse19()``.

    Attributes:
        service_domain: serviceDomain
        service_port: servicePort
        add_service_provider_in_imp_user_id: addServiceProviderInIMPUserId
    """

    __slots__ = [
        "service_domain",
        "service_port",
        "add_service_provider_in_imp_user_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_domain", "serviceDomain", str),
            E("service_port", "servicePort", int),
            E(
                "add_service_provider_in_imp_user_id",
                "addServiceProviderInIMPUserId",
                bool,
                is_required=True,
            ),
        )


class SystemIntegratedIMPGetResponse19(OCIResponse):
    """
    Response to the ``SystemIntegratedIMPGetRequest19()``.

    The response contains the system Integrated IMP service attributes.  The following
    elements are only used in AS data mode: boshURL

    Attributes:
        service_domain: serviceDomain
        service_port: servicePort
        add_service_provider_in_imp_user_id: addServiceProviderInIMPUserId
        bosh_url: boshURL
    """

    __slots__ = [
        "service_domain",
        "service_port",
        "add_service_provider_in_imp_user_id",
        "bosh_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_domain", "serviceDomain", str),
            E("service_port", "servicePort", int),
            E(
                "add_service_provider_in_imp_user_id",
                "addServiceProviderInIMPUserId",
                bool,
                is_required=True,
            ),
            E("bosh_url", "boshURL", str),
        )


class SystemIntegratedIMPGetResponse21(OCIResponse):
    """
    Response to the ``SystemIntegratedIMPGetRequest21()``.

    The response contains the system Integrated IMP service attributes.  The following
    elements are only used in AS data mode: boshURL

    Attributes:
        service_domain: serviceDomain
        service_port: servicePort
        add_service_provider_in_imp_user_id: addServiceProviderInIMPUserId
        bosh_url: boshURL
        allow_imp_password_retrieval: allowImpPasswordRetrieval
    """

    __slots__ = [
        "service_domain",
        "service_port",
        "add_service_provider_in_imp_user_id",
        "bosh_url",
        "allow_imp_password_retrieval",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_domain", "serviceDomain", str),
            E("service_port", "servicePort", int),
            E(
                "add_service_provider_in_imp_user_id",
                "addServiceProviderInIMPUserId",
                bool,
                is_required=True,
            ),
            E("bosh_url", "boshURL", str),
            E(
                "allow_imp_password_retrieval",
                "allowImpPasswordRetrieval",
                bool,
                is_required=True,
            ),
        )


class SystemIntelligentNetworkServiceControlGetResponse14(OCIResponse):
    """
    Response to ``SystemIntelligentNetworkServiceControlGetRequest14()``.


    Attributes:
        pre_answer_action_timeout_seconds: preAnswerActionTimeoutSeconds
        msg_reject_no_voice_mail: msgRejectNoVoiceMail
        msg_reject_voice_mail: msgRejectVoiceMail
        msg_pre_answer_wait: msgPreAnswerWait
        msg_busy: msgBusy
        msg_release: msgRelease
        msg_no_answer: msgNoAnswer
        msg_ocp_reject: msgOCPReject
        msg_forward_loop: msgForwardLoop
        msg_temporarily_unavailable: msgTemporarilyUnavailable
    """

    __slots__ = [
        "pre_answer_action_timeout_seconds",
        "msg_reject_no_voice_mail",
        "msg_reject_voice_mail",
        "msg_pre_answer_wait",
        "msg_busy",
        "msg_release",
        "msg_no_answer",
        "msg_ocp_reject",
        "msg_forward_loop",
        "msg_temporarily_unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "pre_answer_action_timeout_seconds",
                "preAnswerActionTimeoutSeconds",
                int,
                is_required=True,
            ),
            E("msg_reject_no_voice_mail", "msgRejectNoVoiceMail", str, is_required=True),
            E("msg_reject_voice_mail", "msgRejectVoiceMail", str, is_required=True),
            E("msg_pre_answer_wait", "msgPreAnswerWait", str, is_required=True),
            E("msg_busy", "msgBusy", str, is_required=True),
            E("msg_release", "msgRelease", str, is_required=True),
            E("msg_no_answer", "msgNoAnswer", str, is_required=True),
            E("msg_ocp_reject", "msgOCPReject", str, is_required=True),
            E("msg_forward_loop", "msgForwardLoop", str, is_required=True),
            E(
                "msg_temporarily_unavailable",
                "msgTemporarilyUnavailable",
                str,
                is_required=True,
            ),
        )


class SystemInterceptUserGetResponse(OCIResponse):
    """
    Response to the ``SystemInterceptUserGetRequest()``.


    Attributes:
        emergency_and_repair_intercept: emergencyAndRepairIntercept
    """

    __slots__ = [
        "emergency_and_repair_intercept",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "emergency_and_repair_intercept",
                "emergencyAndRepairIntercept",
                bool,
                is_required=True,
            ),
        )


class SystemInventoryReportGetResponse(OCIResponse):
    """
    Response to ``SystemInventoryReportGetRequest()``.


    Attributes:
        default_from_address: defaultFromAddress
    """

    __slots__ = [
        "default_from_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str, is_required=True),
        )


class SystemLDAPIntegrationGetDirectoryResponse(OCIResponse):
    """
    Response to ``SystemLDAPIntegrationGetDirectoryRequest()``.


    Attributes:
        server_net_address: serverNetAddress
        server_port: serverPort
        search_base: searchBase
        use_ssl: useSSL
        require_authentication: requireAuthentication
        authenticated_dn: authenticatedDN
        authenticated_password: authenticatedPassword
        is_sort_enabled: isSortEnabled
        is_paged_result_enabled: isPagedResultEnabled
        search_filter: searchFilter
        include_search_attribute_in_search_filter: includeSearchAttributeInSearchFilter
        column1_attribute_name: column1AttributeName
        column2_attribute_name: column2AttributeName
        column3_attribute_name: column3AttributeName
        column4_attribute_name: column4AttributeName
        column1_label: column1Label
        column2_label: column2Label
        column3_label: column3Label
        column4_label: column4Label
        search_column: searchColumn
    """

    __slots__ = [
        "server_net_address",
        "server_port",
        "search_base",
        "use_ssl",
        "require_authentication",
        "authenticated_dn",
        "authenticated_password",
        "is_sort_enabled",
        "is_paged_result_enabled",
        "search_filter",
        "include_search_attribute_in_search_filter",
        "column1_attribute_name",
        "column2_attribute_name",
        "column3_attribute_name",
        "column4_attribute_name",
        "column1_label",
        "column2_label",
        "column3_label",
        "column4_label",
        "search_column",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E("search_base", "searchBase", str),
            E("use_ssl", "useSSL", bool, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("authenticated_dn", "authenticatedDN", str),
            E("authenticated_password", "authenticatedPassword", str),
            E("is_sort_enabled", "isSortEnabled", bool, is_required=True),
            E("is_paged_result_enabled", "isPagedResultEnabled", bool, is_required=True),
            E("search_filter", "searchFilter", str),
            E(
                "include_search_attribute_in_search_filter",
                "includeSearchAttributeInSearchFilter",
                bool,
                is_required=True,
            ),
            E("column1_attribute_name", "column1AttributeName", str, is_required=True),
            E("column2_attribute_name", "column2AttributeName", str),
            E("column3_attribute_name", "column3AttributeName", str),
            E("column4_attribute_name", "column4AttributeName", str),
            E("column1_label", "column1Label", str),
            E("column2_label", "column2Label", str),
            E("column3_label", "column3Label", str),
            E("column4_label", "column4Label", str),
            E("search_column", "searchColumn", int, is_required=True),
        )


class SystemLanguageGetListResponse(OCIResponse):
    """
    Response to ``SystemLanguageGetListRequest()``.

    The language table column headings are: "Language", "Locale" and "Encoding".

    Attributes:
        default_language: defaultLanguage
        language_table: languageTable
    """

    __slots__ = [
        "default_language",
        "language_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_language", "defaultLanguage", str, is_required=True),
            E(
                "language_table",
                "languageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemLegacyAutomaticCallbackGetLineTypeListResponse(OCIResponse):
    """
    Response to ``SystemLegacyAutomaticCallbackGetLineTypeListRequest()``.

    Returns a 3 column table with column headings: "Line Type", "Match" and "No Match".
    The possible values for the "Match" and "No Match" columns are "Accept" and "Deny".

    Attributes:
        line_type_table: lineTypeTable
    """

    __slots__ = [
        "line_type_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "line_type_table",
                "lineTypeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemLegacyAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``SystemLegacyAutomaticCallbackGetRequest()``.


    Attributes:
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_monitors_per_terminator: maxMonitorsPerTerminator
        t2_minutes: t2Minutes
        t4_seconds: t4Seconds
        t5_seconds: t5Seconds
        t6_minutes: t6Minutes
        t7_minutes: t7Minutes
        t8_seconds: t8Seconds
        t_ring_seconds: tRingSeconds
        t10_o_minutes: t10OMinutes
        t10_t_minutes: t10TMinutes
    """

    __slots__ = [
        "max_monitors_per_originator",
        "max_monitors_per_terminator",
        "t2_minutes",
        "t4_seconds",
        "t5_seconds",
        "t6_minutes",
        "t7_minutes",
        "t8_seconds",
        "t_ring_seconds",
        "t10_o_minutes",
        "t10_t_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "max_monitors_per_originator",
                "maxMonitorsPerOriginator",
                int,
                is_required=True,
            ),
            E(
                "max_monitors_per_terminator",
                "maxMonitorsPerTerminator",
                int,
                is_required=True,
            ),
            E("t2_minutes", "t2Minutes", int, is_required=True),
            E("t4_seconds", "t4Seconds", int, is_required=True),
            E("t5_seconds", "t5Seconds", int, is_required=True),
            E("t6_minutes", "t6Minutes", int, is_required=True),
            E("t7_minutes", "t7Minutes", int, is_required=True),
            E("t8_seconds", "t8Seconds", int, is_required=True),
            E("t_ring_seconds", "tRingSeconds", int, is_required=True),
            E("t10_o_minutes", "t10OMinutes", int, is_required=True),
            E("t10_t_minutes", "t10TMinutes", int, is_required=True),
        )


class SystemLicensingGetResponse(OCIResponse):
    """
    Response to ``SystemLicensingGetRequest()``.

    The license table columns are: "Name", "Licensed", "Used", "Available" and "Expiration
    Date".

    Replaced By: ``SystemLicensingGetResponse14sp3()``

    Attributes:
        license_strictness: licenseStrictness
        group_userlimit: groupUserlimit
        expiration_date: expirationDate
        host_id: hostId
        license_name: licenseName
        license_table: licenseTable
    """

    __slots__ = [
        "license_strictness",
        "group_userlimit",
        "expiration_date",
        "host_id",
        "license_name",
        "license_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("license_strictness", "licenseStrictness", str, is_required=True),
            E("group_userlimit", "groupUserlimit", int, is_required=True),
            E("expiration_date", "expirationDate", str),
            E("host_id", "hostId", str, is_array=True),
            E("license_name", "licenseName", str, is_array=True),
            E(
                "license_table",
                "licenseTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemLicensingGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemLicensingGetRequest14sp3()``.

    The subscriber license table columns are: "Name", "Licensed", "Used" and "Available".
    The group service license table columns are: "Name", "Licensed", "Used" and
    "Available". The virtual service license table columns are: "Name", "Licensed", "Used"
    and "Available". The user service license table columns are: "Name", "Licensed",
    "Used", "Used By Hosted Users", "Used By Trunk Users", "Available" and "Expiration
    Date". The system param license table columns are: "Name", "Licensed", "Used",
    Available".

    Attributes:
        license_strictness: licenseStrictness
        group_userlimit: groupUserlimit
        expiration_date: expirationDate
        host_id: hostId
        license_name: licenseName
        number_of_trunk_users: numberOfTrunkUsers
        subscriber_license_table: subscriberLicenseTable
        group_service_license_table: groupServiceLicenseTable
        virtual_service_license_table: virtualServiceLicenseTable
        user_service_license_table: userServiceLicenseTable
        system_param_license_table: systemParamLicenseTable
    """

    __slots__ = [
        "license_strictness",
        "group_userlimit",
        "expiration_date",
        "host_id",
        "license_name",
        "number_of_trunk_users",
        "subscriber_license_table",
        "group_service_license_table",
        "virtual_service_license_table",
        "user_service_license_table",
        "system_param_license_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("license_strictness", "licenseStrictness", str, is_required=True),
            E("group_userlimit", "groupUserlimit", int, is_required=True),
            E("expiration_date", "expirationDate", str),
            E("host_id", "hostId", str, is_array=True),
            E("license_name", "licenseName", str, is_array=True),
            E("number_of_trunk_users", "numberOfTrunkUsers", int, is_required=True),
            E(
                "subscriber_license_table",
                "subscriberLicenseTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "group_service_license_table",
                "groupServiceLicenseTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "virtual_service_license_table",
                "virtualServiceLicenseTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "user_service_license_table",
                "userServiceLicenseTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "system_param_license_table",
                "systemParamLicenseTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemLicensingGetSystemLicenseListResponse(OCIResponse):
    """
    Response to ``SystemLicensingGetSystemLicenseListRequest()``.

    Replaced by ``SystemLicensingGetSystemLicenseListResponse21()``

    Attributes:
        license: license
    """

    __slots__ = [
        "license",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("license", "license", str, is_array=True),
        )


class SystemLicensingGetSystemLicenseListResponse21(OCIResponse):
    """
    Response to ``SystemLicensingGetSystemLicenseListRequest21()``.


    Attributes:
        license: license
    """

    __slots__ = [
        "license",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("license", "license", str, is_array=True),
        )


class SystemLocationBasedCallingRestrictionsGetResponse(OCIResponse):
    """
    Response to ``SystemLocationBasedCallingRestrictionsGetRequest()``.


    Attributes:
        physical_location_indicator: physicalLocationIndicator
        enforce_msc_validation: enforceMscValidation
        enable_office_zone_announcement: enableOfficeZoneAnnouncement
    """

    __slots__ = [
        "physical_location_indicator",
        "enforce_msc_validation",
        "enable_office_zone_announcement",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "physical_location_indicator",
                "physicalLocationIndicator",
                str,
                is_required=True,
            ),
            E("enforce_msc_validation", "enforceMscValidation", bool, is_required=True),
            E(
                "enable_office_zone_announcement",
                "enableOfficeZoneAnnouncement",
                bool,
                is_required=True,
            ),
        )


class SystemLocationBasedCallingRestrictionsGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemLocationBasedCallingRestrictionsGetRequest17sp3()``.


    Attributes:
        physical_location_indicator: physicalLocationIndicator
        enforce_msc_validation: enforceMscValidation
        enable_office_zone_announcement: enableOfficeZoneAnnouncement
        enhance_office_zone: enhanceOfficeZone
    """

    __slots__ = [
        "physical_location_indicator",
        "enforce_msc_validation",
        "enable_office_zone_announcement",
        "enhance_office_zone",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "physical_location_indicator",
                "physicalLocationIndicator",
                str,
                is_required=True,
            ),
            E("enforce_msc_validation", "enforceMscValidation", bool, is_required=True),
            E(
                "enable_office_zone_announcement",
                "enableOfficeZoneAnnouncement",
                bool,
                is_required=True,
            ),
            E("enhance_office_zone", "enhanceOfficeZone", bool, is_required=True),
        )


class SystemMGCPDeviceTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemMGCPDeviceTypeGetListRequest()``.

    Contains a table of identity/ device profile types configured in the system.  The
    column headings are: "Device Type", "Profile", "Is Obsolete".

    Attributes:
        device_type_table: deviceTypeTable
    """

    __slots__ = [
        "device_type_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_type_table",
                "deviceTypeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemMailParametersGetResponse(OCIResponse):
    """
    Response to ``SystemMailParametersGetListRequest()``.

    Contains a list of system Mail parameters.

    Attributes:
        primary_server_net_address: primaryServerNetAddress
        secondary_server_net_address: secondaryServerNetAddress
        default_from_address: defaultFromAddress
        default_subject: defaultSubject
        support_dnssrv_for_mail_server_access: supportDNSSRVForMailServerAccess
    """

    __slots__ = [
        "primary_server_net_address",
        "secondary_server_net_address",
        "default_from_address",
        "default_subject",
        "support_dnssrv_for_mail_server_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("primary_server_net_address", "primaryServerNetAddress", str),
            E("secondary_server_net_address", "secondaryServerNetAddress", str),
            E("default_from_address", "defaultFromAddress", str, is_required=True),
            E("default_subject", "defaultSubject", str),
            E(
                "support_dnssrv_for_mail_server_access",
                "supportDNSSRVForMailServerAccess",
                bool,
                is_required=True,
            ),
        )


class SystemMaliciousCallTraceGetResponse(OCIResponse):
    """
    Response to the ``SystemMaliciousCallTraceGetRequest()``.

    The response contains the Malicious Call Trace system parameters and the list of users
    that use the Malicious Call Trace feature.  The column headings are "Service Provider
    Id", "Group Id", "User Id", "Last Name", "First Name", "Phone Number", "Trace Type",
    "Status", "Hiragana Last Name" and "Hiragana First Name", "Extension", "Department",
    "Email Address".

    Attributes:
        play_mct_warning_announcement: playMCTWarningAnnouncement
        user_table: userTable
    """

    __slots__ = [
        "play_mct_warning_announcement",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "play_mct_warning_announcement",
                "playMCTWarningAnnouncement",
                bool,
                is_required=True,
            ),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemMaliciousCallTraceGetUserListResponse(OCIResponse):
    """
    Response to ``SystemMaliciousCallTraceGetUserListRequest()``.

    The column headings are "Service Provider Id", "Group Id", "User Id", "Last Name",
    "First Name", "Phone Number", "Trace Type", "Status", "Hiragana Last Name" and
    "Hiragana First Name".

    Replaced By: ``SystemMaliciousCallTraceGetResponse()``

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemMediaGetListResponse(OCIResponse):
    """
    Response to ``SystemMediaGetListRequest()``.

    The column headings are "Media Name", "Codec", "Media Type", "Bandwidth Enforcement
    Type" and "Bandwidth".

    Attributes:
        media_table: mediaTable
    """

    __slots__ = [
        "media_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_table",
                "mediaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemMediaServerGetListResponse(OCIResponse):
    """
    Response to ``SystemMediaServerGetListRequest()``.

    The Media Server table column headings are: "Net Address", "Port", "Transport",
    "Description".

    Attributes:
        media_server_table: mediaServerTable
    """

    __slots__ = [
        "media_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_server_table",
                "mediaServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemMediaServerParametersGetResponse(OCIResponse):
    """
    Response to ``SystemMediaServerParametersGetListRequest()``.

    Contains a list of system Media Server parameters.

    Attributes:
        media_server_response_timer_milliseconds: mediaServerResponseTimerMilliseconds
        media_server_selection_route_timer_milliseconds:
            mediaServerSelectionRouteTimerMilliseconds
        use_static_media_server_device: useStaticMediaServerDevice
    """

    __slots__ = [
        "media_server_response_timer_milliseconds",
        "media_server_selection_route_timer_milliseconds",
        "use_static_media_server_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_server_response_timer_milliseconds",
                "mediaServerResponseTimerMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "media_server_selection_route_timer_milliseconds",
                "mediaServerSelectionRouteTimerMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "use_static_media_server_device",
                "useStaticMediaServerDevice",
                bool,
                is_required=True,
            ),
        )


class SystemMediaSetGetListResponse(OCIResponse):
    """
    Response to ``SystemMediaSetGetRequest()``.


    Attributes:
        media_set_name: mediaSetName
    """

    __slots__ = [
        "media_set_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_set_name", "mediaSetName", str, is_array=True),
        )


class SystemMediaSetGetResponse(OCIResponse):
    """
    Response to ``SystemMediaSetGetRequest()``.

    Returns a list of media names in the set.

    Attributes:
        media_name: mediaName
    """

    __slots__ = [
        "media_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_name", "mediaName", str, is_required=True, is_array=True),
        )


class SystemMeetMeConferencingGetResponse(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest()``.


    Attributes:
        conference_id_length: conferenceIdLength
        moderator_pin_length: moderatorPinLength
        enable_conference_end_date_restriction: enableConferenceEndDateRestriction
        conference_end_date_restriction_months: conferenceEndDateRestrictionMonths
        delete_expired_conferences_after_hold_period:
            deleteExpiredConferencesAfterHoldPeriod
        expired_conference_hold_period_days: expiredConferenceHoldPeriodDays
        recording_web_app_url: recordingWebAppURL
    """

    __slots__ = [
        "conference_id_length",
        "moderator_pin_length",
        "enable_conference_end_date_restriction",
        "conference_end_date_restriction_months",
        "delete_expired_conferences_after_hold_period",
        "expired_conference_hold_period_days",
        "recording_web_app_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_id_length", "conferenceIdLength", int, is_required=True),
            E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
            E(
                "enable_conference_end_date_restriction",
                "enableConferenceEndDateRestriction",
                bool,
                is_required=True,
            ),
            E(
                "conference_end_date_restriction_months",
                "conferenceEndDateRestrictionMonths",
                int,
                is_required=True,
            ),
            E(
                "delete_expired_conferences_after_hold_period",
                "deleteExpiredConferencesAfterHoldPeriod",
                bool,
                is_required=True,
            ),
            E(
                "expired_conference_hold_period_days",
                "expiredConferenceHoldPeriodDays",
                int,
                is_required=True,
            ),
            E("recording_web_app_url", "recordingWebAppURL", str),
        )


class SystemMeetMeConferencingGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest17sp3()``.


    Attributes:
        conference_id_length: conferenceIdLength
        moderator_pin_length: moderatorPinLength
        enable_conference_end_date_restriction: enableConferenceEndDateRestriction
        conference_end_date_restriction_months: conferenceEndDateRestrictionMonths
        delete_expired_conferences_after_hold_period:
            deleteExpiredConferencesAfterHoldPeriod
        expired_conference_hold_period_days: expiredConferenceHoldPeriodDays
        recording_web_app_url: recordingWebAppURL
        recording_file_format: recordingFileFormat
    """

    __slots__ = [
        "conference_id_length",
        "moderator_pin_length",
        "enable_conference_end_date_restriction",
        "conference_end_date_restriction_months",
        "delete_expired_conferences_after_hold_period",
        "expired_conference_hold_period_days",
        "recording_web_app_url",
        "recording_file_format",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_id_length", "conferenceIdLength", int, is_required=True),
            E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
            E(
                "enable_conference_end_date_restriction",
                "enableConferenceEndDateRestriction",
                bool,
                is_required=True,
            ),
            E(
                "conference_end_date_restriction_months",
                "conferenceEndDateRestrictionMonths",
                int,
                is_required=True,
            ),
            E(
                "delete_expired_conferences_after_hold_period",
                "deleteExpiredConferencesAfterHoldPeriod",
                bool,
                is_required=True,
            ),
            E(
                "expired_conference_hold_period_days",
                "expiredConferenceHoldPeriodDays",
                int,
                is_required=True,
            ),
            E("recording_web_app_url", "recordingWebAppURL", str),
            E("recording_file_format", "recordingFileFormat", str, is_required=True),
        )


class SystemMigratedUsersGetListResponse(OCIResponse):
    """
    Response to ``SystemMigratedUsersGetListRequest()``.


    Attributes:
        user_id: userId
    """

    __slots__ = [
        "user_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_array=True),
        )


class SystemMultimediaPolicyGetResponse(OCIResponse):
    """
    Response to ``SystemMultimediaPolicyGetRequest()``

    Attributes:
        restrict_non_audio_video_media_types: restrictNonAudioVideoMediaTypes
    """

    __slots__ = [
        "restrict_non_audio_video_media_types",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "restrict_non_audio_video_media_types",
                "restrictNonAudioVideoMediaTypes",
                bool,
                is_required=True,
            ),
        )


class SystemMusicOnHoldGetResponse(OCIResponse):
    """
    Response to ``SystemMusicOnHoldGetRequest()``.


    Attributes:
        delay_milliseconds: delayMilliseconds
    """

    __slots__ = [
        "delay_milliseconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("delay_milliseconds", "delayMilliseconds", int, is_required=True),
        )


class SystemNetworkClassOfServiceGetAssignedServiceProviderListResponse(OCIResponse):
    """
    Response to the
    ``SystemNetworkClassOfServiceGetAssignedServiceProviderListRequest()``.

    The response contains a table of all Service Providers that have the given Network
    Class of Service assigned.  The column headings are "Service Provider Id", "Service
    Provider Name" and "Is Enterprise".

    Attributes:
        service_provider_table: serviceProviderTable
    """

    __slots__ = [
        "service_provider_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_table",
                "serviceProviderTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListRequest()``.

    The response contains a table of all Network Classes of Service that contain the
    specific Communication Barring Profile.  The column headings are "Name" and
    "Description"

    Attributes:
        network_class_of_service_table: networkClassOfServiceTable
    """

    __slots__ = [
        "network_class_of_service_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "network_class_of_service_table",
                "networkClassOfServiceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemNetworkClassOfServiceGetListResponse(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetListRequest()``.

    The response contains a table of all Network Classes of Service in the system.  The
    column headings are "Name" and "Description"

    Attributes:
        network_class_of_service_table: networkClassOfServiceTable
    """

    __slots__ = [
        "network_class_of_service_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "network_class_of_service_table",
                "networkClassOfServiceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemNetworkDeviceMonitorParametersGetResponse(OCIResponse):
    """
    Response to ``SystemNetworkDeviceMonitorParametersGetListRequest()``.

    Contains a list of system Network Device Polling parameters.

    Attributes:
        polling_interval_minutes: pollingIntervalMinutes
        failed_polling_interval_minutes: failedPollingIntervalMinutes
    """

    __slots__ = [
        "polling_interval_minutes",
        "failed_polling_interval_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "polling_interval_minutes",
                "pollingIntervalMinutes",
                int,
                is_required=True,
            ),
            E(
                "failed_polling_interval_minutes",
                "failedPollingIntervalMinutes",
                int,
                is_required=True,
            ),
        )


class SystemNetworkProgressionGetResponse(OCIResponse):
    """
    Response to ``SystemNetworkProgressionGetRequest()``.


    Attributes:
        is_active: isActive
        wait_period_seconds: waitPeriodSeconds
    """

    __slots__ = [
        "is_active",
        "wait_period_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("wait_period_seconds", "waitPeriodSeconds", int, is_required=True),
        )


class SystemNetworkRoutingServerGetListResponse(OCIResponse):
    """
    Response to ``SystemNetworkRoutingServerGetListRequest()``.

    The routing Network Server table column headings are: "Net Address", "Port",
    "Transport", "Poll", "OpState", "Description".

    Attributes:
        network_routing_server_table: networkRoutingServerTable
    """

    __slots__ = [
        "network_routing_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "network_routing_server_table",
                "networkRoutingServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemNetworkServerSyncParametersGetResponse(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetListRequest()``.

    Contains a list of system Network Server Sync parameters.

    Attributes:
        enable_sync: enableSync
    """

    __slots__ = [
        "enable_sync",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_sync", "enableSync", bool, is_required=True),
        )


class SystemNetworkServerSyncParametersGetResponse14sp2(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetRequest14sp2()``.

    Contains a list of system Network Server Sync parameters.

    Replaced By: ``SystemNetworkServerSyncParametersGetResponse16()``

    Attributes:
        enable_sync: enableSync
        sync_line_ports: syncLinePorts
    """

    __slots__ = [
        "enable_sync",
        "sync_line_ports",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_sync", "enableSync", bool, is_required=True),
            E("sync_line_ports", "syncLinePorts", bool, is_required=True),
        )


class SystemNetworkServerSyncParametersGetResponse16(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetRequest16()``.

    Contains a list of system Network Server Sync parameters.

    Replaced By: ``SystemNetworkServerSyncParametersGetResponse17sp4()``

    Attributes:
        enable_sync: enableSync
        sync_line_ports: syncLinePorts
        sync_device_management_info: syncDeviceManagementInfo
    """

    __slots__ = [
        "enable_sync",
        "sync_line_ports",
        "sync_device_management_info",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_sync", "enableSync", bool, is_required=True),
            E("sync_line_ports", "syncLinePorts", bool, is_required=True),
            E(
                "sync_device_management_info",
                "syncDeviceManagementInfo",
                bool,
                is_required=True,
            ),
        )


class SystemNetworkServerSyncParametersGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemNetworkServerSyncParametersGetRequest17sp4()``.

    Contains a list of system Network Server Sync parameters.  The following elements are
    only used in AS data mode: syncTrunkGroups

    Attributes:
        enable_sync: enableSync
        sync_line_ports: syncLinePorts
        sync_device_management_info: syncDeviceManagementInfo
        sync_trunk_groups: syncTrunkGroups
    """

    __slots__ = [
        "enable_sync",
        "sync_line_ports",
        "sync_device_management_info",
        "sync_trunk_groups",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_sync", "enableSync", bool, is_required=True),
            E("sync_line_ports", "syncLinePorts", bool, is_required=True),
            E(
                "sync_device_management_info",
                "syncDeviceManagementInfo",
                bool,
                is_required=True,
            ),
            E("sync_trunk_groups", "syncTrunkGroups", bool, is_required=True),
        )


class SystemNetworkSynchingServerGetListResponse(OCIResponse):
    """
    Response to ``SystemNetworkSynchingServerGetListRequest()``.

    The Network Server table column headings are: "Net Address", "Port", "Description".

    Attributes:
        preferred_network_server_net_address: preferredNetworkServerNetAddress
        network_synching_server_table: networkSynchingServerTable
    """

    __slots__ = [
        "preferred_network_server_net_address",
        "network_synching_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "preferred_network_server_net_address",
                "preferredNetworkServerNetAddress",
                str,
            ),
            E(
                "network_synching_server_table",
                "networkSynchingServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemNumberActivationGetResponse(OCIResponse):
    """
    Response to ``SystemNumberActivationGetRequest()``.

    Contains the system number activation setting.

    Attributes:
        use_number_activation: useNumberActivation
    """

    __slots__ = [
        "use_number_activation",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_number_activation", "useNumberActivation", bool, is_required=True),
        )


class SystemNumberActivationGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemNumberActivationGetRequest18sp1()``.

    Contains the system number activation setting.

    Attributes:
        number_activation_mode: numberActivationMode
    """

    __slots__ = [
        "number_activation_mode",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("number_activation_mode", "numberActivationMode", str, is_required=True),
        )


class SystemNumberActivationGetResponse21(OCIResponse):
    """
    Response to ``SystemNumberActivationGetRequest21()``.

    Contains the system number activation and enterprise trunk number range activation
    setting.

    Attributes:
        number_activation_mode: numberActivationMode
        enable_enterprise_trunk_number_range_activation:
            enableEnterpriseTrunkNumberRangeActivation
    """

    __slots__ = [
        "number_activation_mode",
        "enable_enterprise_trunk_number_range_activation",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("number_activation_mode", "numberActivationMode", str, is_required=True),
            E(
                "enable_enterprise_trunk_number_range_activation",
                "enableEnterpriseTrunkNumberRangeActivation",
                bool,
                is_required=True,
            ),
        )


class SystemNumberPortabilityQueryDigitPatternGetListResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryDigitPatternGetListRequest()``.

    Contains a table with column headings: "Digit Pattern", "Status".

    Attributes:
        status_digit_pattern_table: statusDigitPatternTable
    """

    __slots__ = [
        "status_digit_pattern_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "status_digit_pattern_table",
                "statusDigitPatternTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemNumberPortabilityQueryDigitPatternGetResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryDigitPatternGetRequest()``.


    Attributes:
        status: status
    """

    __slots__ = [
        "status",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status", "status", str, is_required=True),
        )


class SystemNumberPortabilityQueryGetResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryGetRequest()``.

    Returns system Number Portability Query Parameters.

    Attributes:
        continue_call_as_dialed_on_timeout_or_error: continueCallAsDialedOnTimeoutOrError
        number_portability_name_lookup_timeout_milliseconds:
            numberPortabilityNameLookupTimeoutMilliseconds
    """

    __slots__ = [
        "continue_call_as_dialed_on_timeout_or_error",
        "number_portability_name_lookup_timeout_milliseconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "continue_call_as_dialed_on_timeout_or_error",
                "continueCallAsDialedOnTimeoutOrError",
                bool,
                is_required=True,
            ),
            E(
                "number_portability_name_lookup_timeout_milliseconds",
                "numberPortabilityNameLookupTimeoutMilliseconds",
                int,
                is_required=True,
            ),
        )


class SystemNumberPortabilityQueryStatusGetListResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryStatusGetListRequest()``.

    Contains a table with column headings: "Status and Treatment File Name".

    Attributes:
        status_table: statusTable
    """

    __slots__ = [
        "status_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "status_table",
                "statusTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemNumberPortabilityQueryStatusGetResponse(OCIResponse):
    """
    Response to the ``SystemNumberPortabilityQueryStatusGetRequest()``.


    Attributes:
        treatment_file_name: treatmentFileName
    """

    __slots__ = [
        "treatment_file_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("treatment_file_name", "treatmentFileName", str),
        )


class SystemOCICallControlApplicationGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCICallControlApplicationGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOCICallControlApplicationGetListResponse(OCIResponse):
    """
    Response to ``SystemOCICallControlApplicationGetListRequest()``.

    The table columns are: "Application Id", "Enabled System Wide", "Description"
    "Notification Timeout Seconds" and "Max Event Channels Per Set".

    Attributes:
        app_table: appTable
    """

    __slots__ = [
        "app_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "app_table",
                "appTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOCICallControlGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCICallControlGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOCIGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCIGetACLListRequest()``.

    Returns a 2 coulmn table with column headings: "Net Address" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOCIReportingGetACLListResponse(OCIResponse):
    """
    Response to ``SystemOCIReportingACLListGetRequest()``.

    Contains a table with one row per access control list entry.  The table columns are
    "Net Address", "Description" and "Restrict Messages".

    Attributes:
        oci_reporting_acl_table: ociReportingACLTable
    """

    __slots__ = [
        "oci_reporting_acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "oci_reporting_acl_table",
                "ociReportingACLTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOCIReportingGetMessageNameListResponse(OCIResponse):
    """
    Response to ``SystemOCIReportingGetMessageNameListRequest()``.


    Attributes:
        message_name_starts_with: messageNameStartsWith
    """

    __slots__ = [
        "message_name_starts_with",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("message_name_starts_with", "messageNameStartsWith", str, is_array=True),
        )


class SystemOCIReportingParametersGetResponse(OCIResponse):
    """
    Response to ``SystemOCIReportingParametersGetListRequest()``.

    Contains a list of system OCI Reporting parameters.

    Attributes:
        server_port: serverPort
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_seconds: connectionPingIntervalSeconds
        alter_passwords: alterPasswords
    """

    __slots__ = [
        "server_port",
        "enable_connection_ping",
        "connection_ping_interval_seconds",
        "alter_passwords",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int, is_required=True),
            E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
            E(
                "connection_ping_interval_seconds",
                "connectionPingIntervalSeconds",
                int,
                is_required=True,
            ),
            E("alter_passwords", "alterPasswords", bool, is_required=True),
        )


class SystemOCIReportingParametersGetResponse14sp1(OCIResponse):
    """
    Response to ``SystemOCIReportingParametersGetRequest14sp1()``.

    Contains a list of system OCI Reporting parameters.

    Attributes:
        server_port: serverPort
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_seconds: connectionPingIntervalSeconds
        alter_passwords: alterPasswords
        enable_public_identity_reporting: enablePublicIdentityReporting
    """

    __slots__ = [
        "server_port",
        "enable_connection_ping",
        "connection_ping_interval_seconds",
        "alter_passwords",
        "enable_public_identity_reporting",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int, is_required=True),
            E("enable_connection_ping", "enableConnectionPing", bool, is_required=True),
            E(
                "connection_ping_interval_seconds",
                "connectionPingIntervalSeconds",
                int,
                is_required=True,
            ),
            E("alter_passwords", "alterPasswords", bool, is_required=True),
            E(
                "enable_public_identity_reporting",
                "enablePublicIdentityReporting",
                bool,
                is_required=True,
            ),
        )


class SystemOfficeZoneGetAssignedServiceProviderListResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetAssignedServiceProviderListRequest()``.

    The response contains a table of all Service Providers that have the given Office Zone
    assigned.  The column headings are "Service Provider Id", "Service Provider Name" and
    "Is Enterprise".

    Attributes:
        service_provider_table: serviceProviderTable
    """

    __slots__ = [
        "service_provider_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_provider_table",
                "serviceProviderTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOfficeZoneGetListResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetListRequest()``.

    The response contains a table of all Office Zones in the system.  The column headings
    are "Name" and "Description"

    Attributes:
        office_zone_table: officeZoneTable
    """

    __slots__ = [
        "office_zone_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "office_zone_table",
                "officeZoneTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOfficeZoneGetResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetRequest()``.

    The response contains the Office Zone information.

    Attributes:
        description: description
        zone_name: zoneName
        primary_zone_name: primaryZoneName
    """

    __slots__ = [
        "description",
        "zone_name",
        "primary_zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("zone_name", "zoneName", str, is_required=True, is_array=True),
            E("primary_zone_name", "primaryZoneName", str, is_required=True),
        )


class SystemOfficeZoneGetZoneUsageListResponse(OCIResponse):
    """
    Response to the ``SystemOfficeZoneGetZoneUsageListRequest()``.

    The response contains a table of all Office Zones that contain the specific Zone.  The
    column headings are "Name" and "Description"

    Attributes:
        office_zone_table: officeZoneTable
    """

    __slots__ = [
        "office_zone_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "office_zone_table",
                "officeZoneTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOutgoingCallingPlanCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanCallTypeGetListRequest()``.


    Attributes:
        call_type: callType
    """

    __slots__ = [
        "call_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_type", "callType", str, is_required=True, is_array=True),
        )


class SystemOutgoingCallingPlanCallTypeGetMappingListResponse(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanCallTypeGetMappingListRequest()``.

    The table columns are: "Country Code", "Digit Map" and "Call Type".

    Attributes:
        call_type_mapping: callTypeMapping
    """

    __slots__ = [
        "call_type_mapping",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_type_mapping",
                "callTypeMapping",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemOutgoingCallingPlanGetResponse(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanGetRequest()``.


    Attributes:
        direct_transfer_screening: directTransferScreening
    """

    __slots__ = [
        "direct_transfer_screening",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "direct_transfer_screening",
                "directTransferScreening",
                bool,
                is_required=True,
            ),
        )


class SystemOutgoingCallingPlanGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemOutgoingCallingPlanGetRequest17sp3()``.


    Attributes:
        direct_transfer_screening: directTransferScreening
        enable_enhanced_toll_call_typing: enableEnhancedTollCallTyping
    """

    __slots__ = [
        "direct_transfer_screening",
        "enable_enhanced_toll_call_typing",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "direct_transfer_screening",
                "directTransferScreening",
                bool,
                is_required=True,
            ),
            E(
                "enable_enhanced_toll_call_typing",
                "enableEnhancedTollCallTyping",
                bool,
                is_required=True,
            ),
        )


class SystemPasswordRulesGetResponse13mp2(OCIResponse):
    """
    Response to ``SystemPasswordRulesGetRequest13mp2()``.

    Contains the password rules for System administrator, Provisioning Administrator,
    and/or Service Provider Administrator, Group Administrator, Department Administrator,
    user.

    Replaced By : ``SystemPasswordRulesGetResponse16()``

    Attributes:
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
    """

    __slots__ = [
        "rules_apply_to",
        "allow_web_add_external_authentication_users",
        "disallow_user_id",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "max_failed_login_attempts",
        "password_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "disallow_rules_modification",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("rules_apply_to", "rulesApplyTo", str, is_required=True),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
                is_required=True,
            ),
            E("disallow_user_id", "disallowUserId", bool, is_required=True),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "max_failed_login_attempts",
                "maxFailedLoginAttempts",
                int,
                is_required=True,
            ),
            E("password_expires_days", "passwordExpiresDays", int, is_required=True),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E(
                "disallow_rules_modification",
                "disallowRulesModification",
                bool,
                is_required=True,
            ),
        )


class SystemPasswordRulesGetResponse16(OCIResponse):
    """
    Response to ``SystemPasswordRulesGetRequest16()``.

    Contains the password rules for System administrator, Provisioning Administrator,
    and/or Service Provider Administrator, Group Administrator, Department Administrator,
    user.

    Attributes:
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
        disallow_previous_passwords: disallowPreviousPasswords
        number_of_previous_passwords: numberOfPreviousPasswords
    """

    __slots__ = [
        "rules_apply_to",
        "allow_web_add_external_authentication_users",
        "disallow_user_id",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "max_failed_login_attempts",
        "password_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "disallow_rules_modification",
        "disallow_previous_passwords",
        "number_of_previous_passwords",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("rules_apply_to", "rulesApplyTo", str, is_required=True),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
                is_required=True,
            ),
            E("disallow_user_id", "disallowUserId", bool, is_required=True),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "max_failed_login_attempts",
                "maxFailedLoginAttempts",
                int,
                is_required=True,
            ),
            E("password_expires_days", "passwordExpiresDays", int, is_required=True),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E(
                "disallow_rules_modification",
                "disallowRulesModification",
                bool,
                is_required=True,
            ),
            E(
                "disallow_previous_passwords",
                "disallowPreviousPasswords",
                bool,
                is_required=True,
            ),
            E(
                "number_of_previous_passwords",
                "numberOfPreviousPasswords",
                int,
                is_required=True,
            ),
        )


class SystemPerformanceMeasurementReportingGetFileServerListResponse(OCIResponse):
    """
    Response to ``SystemPerformanceMeasurementReportingGetFileServerListRequest()``.

    The table columns are: "FTP Host Net Address", "FTP User Id", "Passive FTP".

    Attributes:
        file_server_table: fileServerTable
    """

    __slots__ = [
        "file_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "file_server_table",
                "fileServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemPerformanceMeasurementReportingGetResponse(OCIResponse):
    """
    Response to ``SystemPerformanceMeasurementReportingGetRequest()``.


    Attributes:
        is_active: isActive
        reporting_interval: reportingInterval
        reset_measurements_after_each_report: resetMeasurementsAfterEachReport
        report_enterprise: reportEnterprise
        report_service_provider: reportServiceProvider
        report_device: reportDevice
    """

    __slots__ = [
        "is_active",
        "reporting_interval",
        "reset_measurements_after_each_report",
        "report_enterprise",
        "report_service_provider",
        "report_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("reporting_interval", "reportingInterval", int, is_required=True),
            E(
                "reset_measurements_after_each_report",
                "resetMeasurementsAfterEachReport",
                bool,
                is_required=True,
            ),
            E("report_enterprise", "reportEnterprise", bool, is_required=True),
            E(
                "report_service_provider",
                "reportServiceProvider",
                bool,
                is_required=True,
            ),
            E("report_device", "reportDevice", bool, is_required=True),
        )


class SystemPersonalAssistantGetResponse(OCIResponse):
    """
    Response to the ``SystemPersonalAssistantGetRequest()``.

    Returns system Personal Assistant Parameters.

    Attributes:
        transfer_to_attendant_key: transferToAttendantKey
        transfer_to_voice_messaging_key: transferToVoiceMessagingKey
    """

    __slots__ = [
        "transfer_to_attendant_key",
        "transfer_to_voice_messaging_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "transfer_to_attendant_key",
                "transferToAttendantKey",
                str,
                is_required=True,
            ),
            E(
                "transfer_to_voice_messaging_key",
                "transferToVoiceMessagingKey",
                str,
                is_required=True,
            ),
        )


class SystemPhysicalLocationGetResponse(OCIResponse):
    """
    Response to ``SystemPhysicalLocationGetRequest()``.

    Contains a list of system Physical Location parameters.

    Attributes:
        always_allow_emergency_calls: alwaysAllowEmergencyCalls
    """

    __slots__ = [
        "always_allow_emergency_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "always_allow_emergency_calls",
                "alwaysAllowEmergencyCalls",
                bool,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse14(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest14()``.

    Contains the default policy settings for the system.

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_service_access: groupAdminServiceAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_service_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_web_branding_access",
        "enterprise_admin_network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse14sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest14sp1()``.

    Contains the default policy settings for the system.

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_web_branding_access",
        "enterprise_admin_network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse14sp4(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest14sp4()``.

    Contains the default policy settings for the system.

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_web_branding_access",
        "enterprise_admin_network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse16sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest16sp1()``.

    Contains the default policy settings for the system.

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_session_admission_control_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_web_branding_access",
        "enterprise_admin_network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse16sp2(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest16sp2()``.

    Contains the default policy settings for the system.

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_dialable_caller_id_access: groupAdminDialableCallerIDAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        group_admin_number_activation_access: groupAdminNumberActivationAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
        service_provider_admin_dialable_caller_id_access:
            serviceProviderAdminDialableCallerIDAccess
        enterprise_admin_number_activation_access: enterpriseAdminNumberActivationAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_department_admin_phone_number_extension_access",
        "group_department_admin_calling_line_id_number_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_calling_line_id_number_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_session_admission_control_access",
        "group_admin_dialable_caller_id_access",
        "group_admin_office_zone_access",
        "group_admin_number_activation_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_calling_line_id_number_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_web_branding_access",
        "service_provider_admin_office_zone_access",
        "enterprise_admin_network_policy_access",
        "service_provider_admin_dialable_caller_id_access",
        "enterprise_admin_number_activation_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_dialable_caller_id_access",
                "groupAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_office_zone_access",
                "groupAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_number_activation_access",
                "groupAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_dialable_caller_id_access",
                "serviceProviderAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_number_activation_access",
                "enterpriseAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse17(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest17()``.

    Contains the default policy settings for the system.

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_department_admin_phone_number_extension_access",
        "group_department_admin_calling_line_id_number_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_calling_line_id_number_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_session_admission_control_access",
        "group_admin_office_zone_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_calling_line_id_number_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_web_branding_access",
        "service_provider_admin_office_zone_access",
        "enterprise_admin_network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_office_zone_access",
                "groupAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse17sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest17sp1()``.

    Contains the default policy settings for the system.  The following elements are only
    used in HSS data mode: serviceProviderAdminCommunicationBarringAccess

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        service_provider_admin_communication_barring_access:
            serviceProviderAdminCommunicationBarringAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_department_admin_phone_number_extension_access",
        "group_department_admin_calling_line_id_number_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_calling_line_id_number_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_session_admission_control_access",
        "group_admin_office_zone_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_calling_line_id_number_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_web_branding_access",
        "service_provider_admin_office_zone_access",
        "service_provider_admin_communication_barring_access",
        "enterprise_admin_network_policy_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_office_zone_access",
                "groupAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_communication_barring_access",
                "serviceProviderAdminCommunicationBarringAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse17sp3(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest17sp3()``.

    Contains the default policy settings for the system.

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        group_admin_dialable_caller_id_access: groupAdminDialableCallerIDAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
        service_provider_admin_dialable_caller_id_access:
            serviceProviderAdminDialableCallerIDAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_department_admin_phone_number_extension_access",
        "group_department_admin_calling_line_id_number_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_calling_line_id_number_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_session_admission_control_access",
        "group_admin_office_zone_access",
        "group_admin_dialable_caller_id_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_calling_line_id_number_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_web_branding_access",
        "service_provider_admin_office_zone_access",
        "enterprise_admin_network_policy_access",
        "service_provider_admin_dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_office_zone_access",
                "groupAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_dialable_caller_id_access",
                "groupAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_dialable_caller_id_access",
                "serviceProviderAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse18(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest18()``.

    Contains the default policy settings for the system.  The following elements are only
    used in AS data mode: GroupAdminDialableCallerIDAccess
    ServiceProviderAdminDialableCallerIDAccess The following elements are only used in HSS
    data mode: serviceProviderAdminCommunicationBarringAccess

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        group_admin_number_activation_access: groupAdminNumberActivationAccess
        group_admin_dialable_caller_id_access: groupAdminDialableCallerIDAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        service_provider_admin_communication_barring_access:
            serviceProviderAdminCommunicationBarringAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
        enterprise_admin_number_activation_access: enterpriseAdminNumberActivationAccess
        service_provider_admin_dialable_caller_id_access:
            serviceProviderAdminDialableCallerIDAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_department_admin_phone_number_extension_access",
        "group_department_admin_calling_line_id_number_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_calling_line_id_number_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_session_admission_control_access",
        "group_admin_office_zone_access",
        "group_admin_number_activation_access",
        "group_admin_dialable_caller_id_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_calling_line_id_number_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_web_branding_access",
        "service_provider_admin_office_zone_access",
        "service_provider_admin_communication_barring_access",
        "enterprise_admin_network_policy_access",
        "enterprise_admin_number_activation_access",
        "service_provider_admin_dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_office_zone_access",
                "groupAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_number_activation_access",
                "groupAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_dialable_caller_id_access",
                "groupAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_communication_barring_access",
                "serviceProviderAdminCommunicationBarringAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_number_activation_access",
                "enterpriseAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_dialable_caller_id_access",
                "serviceProviderAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse19sp1(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest19sp1()``.

    Contains the default policy settings for the system.  The following elements are only
    used in AS data mode: GroupAdminDialableCallerIDAccess
    ServiceProviderAdminDialableCallerIDAccess
    GroupAdminCommunicationBarringUserProfileAccess (This element is only used for groups
    in an Enterprise) The following elements are only used in HSS data mode:
    serviceProviderAdminCommunicationBarringAccess

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        group_admin_number_activation_access: groupAdminNumberActivationAccess
        group_admin_dialable_caller_id_access: groupAdminDialableCallerIDAccess
        group_admin_communication_barring_user_profile_access:
            groupAdminCommunicationBarringUserProfileAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        service_provider_admin_communication_barring_access:
            serviceProviderAdminCommunicationBarringAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
        enterprise_admin_number_activation_access: enterpriseAdminNumberActivationAccess
        service_provider_admin_dialable_caller_id_access:
            serviceProviderAdminDialableCallerIDAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_department_admin_phone_number_extension_access",
        "group_department_admin_calling_line_id_number_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_calling_line_id_number_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_session_admission_control_access",
        "group_admin_office_zone_access",
        "group_admin_number_activation_access",
        "group_admin_dialable_caller_id_access",
        "group_admin_communication_barring_user_profile_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_calling_line_id_number_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_web_branding_access",
        "service_provider_admin_office_zone_access",
        "service_provider_admin_communication_barring_access",
        "enterprise_admin_network_policy_access",
        "enterprise_admin_number_activation_access",
        "service_provider_admin_dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_office_zone_access",
                "groupAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_number_activation_access",
                "groupAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_dialable_caller_id_access",
                "groupAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_communication_barring_user_profile_access",
                "groupAdminCommunicationBarringUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_communication_barring_access",
                "serviceProviderAdminCommunicationBarringAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_number_activation_access",
                "enterpriseAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_dialable_caller_id_access",
                "serviceProviderAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class SystemPolicyGetDefaultResponse20(OCIResponse):
    """
    Response to ``SystemPolicyGetDefaultRequest20()``.

    Contains the default policy settings for the system.  The following elements are only
    used in AS data mode: GroupAdminDialableCallerIDAccess
    ServiceProviderAdminDialableCallerIDAccess
    GroupAdminCommunicationBarringUserProfileAccess (This element is only used for groups
    in an Enterprise) GroupAdminVerifyTranslationAndRoutingAccess
    ServiceProviderAdminVerifyTranslationAndRoutingAccess The following elements are only
    used in HSS data mode: serviceProviderAdminCommunicationBarringAccess

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_user_auto_attendant_name_dialing_access:
            groupUserAutoAttendantNameDialingAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_verify_translation_and_routing_access:
            groupAdminVerifyTranslationAndRoutingAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        group_admin_number_activation_access: groupAdminNumberActivationAccess
        group_admin_dialable_caller_id_access: groupAdminDialableCallerIDAccess
        group_admin_communication_barring_user_profile_access:
            groupAdminCommunicationBarringUserProfileAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: serviceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_verify_translation_and_routing_access:
            serviceProviderAdminVerifyTranslationAndRoutingAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        service_provider_admin_communication_barring_access:
            serviceProviderAdminCommunicationBarringAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
        enterprise_admin_number_activation_access: enterpriseAdminNumberActivationAccess
        service_provider_admin_dialable_caller_id_access:
            serviceProviderAdminDialableCallerIDAccess
    """

    __slots__ = [
        "group_calling_plan_access",
        "group_extension_access",
        "group_ldap_integration_access",
        "group_voice_messaging_access",
        "group_department_admin_user_access",
        "group_department_admin_trunk_group_access",
        "group_department_admin_phone_number_extension_access",
        "group_department_admin_calling_line_id_number_access",
        "group_user_authentication_access",
        "group_user_group_directory_access",
        "group_user_profile_access",
        "group_user_enhanced_call_logs_access",
        "group_user_auto_attendant_name_dialing_access",
        "group_admin_profile_access",
        "group_admin_user_access",
        "group_admin_admin_access",
        "group_admin_department_access",
        "group_admin_access_device_access",
        "group_admin_enhanced_service_instance_access",
        "group_admin_feature_access_code_access",
        "group_admin_phone_number_extension_access",
        "group_admin_calling_line_id_number_access",
        "group_admin_service_access",
        "group_admin_trunk_group_access",
        "group_admin_verify_translation_and_routing_access",
        "group_admin_session_admission_control_access",
        "group_admin_office_zone_access",
        "group_admin_number_activation_access",
        "group_admin_dialable_caller_id_access",
        "group_admin_communication_barring_user_profile_access",
        "service_provider_admin_profile_access",
        "service_provider_admin_group_access",
        "service_provider_admin_user_access",
        "service_provider_admin_admin_access",
        "service_provider_admin_department_access",
        "service_provider_admin_access_device_access",
        "service_provider_admin_phone_number_extension_access",
        "service_provider_admin_calling_line_id_number_access",
        "service_provider_admin_service_access",
        "service_provider_admin_service_pack_access",
        "service_provider_admin_session_admission_control_access",
        "service_provider_admin_verify_translation_and_routing_access",
        "service_provider_admin_web_branding_access",
        "service_provider_admin_office_zone_access",
        "service_provider_admin_communication_barring_access",
        "enterprise_admin_network_policy_access",
        "enterprise_admin_number_activation_access",
        "service_provider_admin_dialable_caller_id_access",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_calling_plan_access",
                "groupCallingPlanAccess",
                str,
                is_required=True,
            ),
            E("group_extension_access", "groupExtensionAccess", str, is_required=True),
            E(
                "group_ldap_integration_access",
                "groupLDAPIntegrationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_voice_messaging_access",
                "groupVoiceMessagingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_authentication_access",
                "groupUserAuthenticationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_group_directory_access",
                "groupUserGroupDirectoryAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_profile_access",
                "groupUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
                is_required=True,
            ),
            E(
                "group_user_auto_attendant_name_dialing_access",
                "groupUserAutoAttendantNameDialingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_profile_access",
                "groupAdminProfileAccess",
                str,
                is_required=True,
            ),
            E("group_admin_user_access", "groupAdminUserAccess", str, is_required=True),
            E(
                "group_admin_admin_access",
                "groupAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_department_access",
                "groupAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_access_device_access",
                "groupAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_service_access",
                "groupAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_trunk_group_access",
                "groupAdminTrunkGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_verify_translation_and_routing_access",
                "groupAdminVerifyTranslationAndRoutingAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_office_zone_access",
                "groupAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_number_activation_access",
                "groupAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_dialable_caller_id_access",
                "groupAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
            E(
                "group_admin_communication_barring_user_profile_access",
                "groupAdminCommunicationBarringUserProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_department_access",
                "serviceProviderAdminDepartmentAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_verify_translation_and_routing_access",
                "serviceProviderAdminVerifyTranslationAndRoutingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_communication_barring_access",
                "serviceProviderAdminCommunicationBarringAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
                is_required=True,
            ),
            E(
                "enterprise_admin_number_activation_access",
                "enterpriseAdminNumberActivationAccess",
                str,
                is_required=True,
            ),
            E(
                "service_provider_admin_dialable_caller_id_access",
                "serviceProviderAdminDialableCallerIDAccess",
                str,
                is_required=True,
            ),
        )


class SystemPortalAPIGetACLListResponse(OCIResponse):
    """
    Response to ``SystemPortalAPIGetACLListRequest()``.

    Returns a table with column headings: "Net Address" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemPortalPasscodeRulesGetResponse(OCIResponse):
    """
    Response to ``SystemPortalPasscodeRulesGetRequest()``.

    Contains the system passcode rules setting.

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        default_password: defaultPassword
    """

    __slots__ = [
        "disallow_repeated_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "default_password",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("default_password", "defaultPassword", str, is_required=True),
        )


class SystemPortalPasscodeRulesGetResponse19(OCIResponse):
    """
    Response to ``SystemPortalPasscodeRulesGetRequest()``.

    Contains the system passcode rules setting.  The following elements are only used in
    AS data mode: numberOfRepeatedDigits disallowRepeatedPatterns
    disallowContiguousSequences numberOfAscendingDigits numberOfDescendingDigits
    numberOfPreviousPasscodes

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        number_of_repeated_digits: numberOfRepeatedDigits
        disallow_repeated_patterns: disallowRepeatedPatterns
        disallow_contiguous_sequences: disallowContiguousSequences
        number_of_ascending_digits: numberOfAscendingDigits
        number_of_descending_digits: numberOfDescendingDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        number_of_previous_passcodes: numberOfPreviousPasscodes
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        default_password: defaultPassword
    """

    __slots__ = [
        "disallow_repeated_digits",
        "number_of_repeated_digits",
        "disallow_repeated_patterns",
        "disallow_contiguous_sequences",
        "number_of_ascending_digits",
        "number_of_descending_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "number_of_previous_passcodes",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "default_password",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E(
                "number_of_repeated_digits",
                "numberOfRepeatedDigits",
                int,
                is_required=True,
            ),
            E(
                "disallow_repeated_patterns",
                "disallowRepeatedPatterns",
                bool,
                is_required=True,
            ),
            E(
                "disallow_contiguous_sequences",
                "disallowContiguousSequences",
                bool,
                is_required=True,
            ),
            E(
                "number_of_ascending_digits",
                "numberOfAscendingDigits",
                int,
                is_required=True,
            ),
            E(
                "number_of_descending_digits",
                "numberOfDescendingDigits",
                int,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "number_of_previous_passcodes",
                "numberOfPreviousPasscodes",
                int,
                is_required=True,
            ),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("default_password", "defaultPassword", str, is_required=True),
        )


class SystemPreferredCarrierGetGroupListResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetGroupListRequest()``.

    Contains a table with one row per group.  The table columns are: "Group Id", "Group
    Name", "Organization Id", "Organization Type". The "Organization Id" column is
    populated with either a service provider Id or an enterprise Id.  The "Organization
    Type" column is populated with one of the enumerated strings defined in the
    OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.

    Attributes:
        groups_using_carrier_table: groupsUsingCarrierTable
    """

    __slots__ = [
        "groups_using_carrier_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "groups_using_carrier_table",
                "groupsUsingCarrierTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemPreferredCarrierGetListResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetListRequest()``.

    Contains a table with one row per carrier.  The table columns are: "Carrier", "Country
    Code", "CIC", "Is Intra-Lata", "Is Inter-Lata", "Is International". The value in the
    "Is Intra-Lata", "Is Inter-Lata", and "Is International" columns is one of "true" or
    "false".

    Attributes:
        system_carrier_table: systemCarrierTable
    """

    __slots__ = [
        "system_carrier_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "system_carrier_table",
                "systemCarrierTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemPreferredCarrierGetResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetRequest()``.

    Contains the attributes of a carrier.

    Attributes:
        cic: cic
        country_code: countryCode
        is_intra_lata: isIntraLata
        is_inter_lata: isInterLata
        is_international: isInternational
    """

    __slots__ = [
        "cic",
        "country_code",
        "is_intra_lata",
        "is_inter_lata",
        "is_international",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("cic", "cic", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
            E("is_intra_lata", "isIntraLata", bool, is_required=True),
            E("is_inter_lata", "isInterLata", bool, is_required=True),
            E("is_international", "isInternational", bool, is_required=True),
        )


class SystemPreferredCarrierGetUserListResponse(OCIResponse):
    """
    Response to a ``SystemPreferredCarrierGetUserListRequest()``.

    Contains a table with one row per user.  The table columns are: "User Id", "Service
    Provider Id", "Group Id", "Last Name", "First Name", "Phone Number", "Email Address",
    "Hiragana Last Name", and "Hiragana First Name", "Extension", "Department".

    Attributes:
        users_using_carrier_table: usersUsingCarrierTable
    """

    __slots__ = [
        "users_using_carrier_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "users_using_carrier_table",
                "usersUsingCarrierTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemProvisioningValidationGetResponse(OCIResponse):
    """
    Response to the ``SystemProvisioningValidationGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class SystemProvisioningValidationGetResponse14sp2(OCIResponse):
    """
    Response to the ``SystemProvisioningValidationGetRequest14sp2()``.


    Attributes:
        is_active: isActive
        is_network_server_query_active: isNetworkServerQueryActive
        timeout_seconds: timeoutSeconds
    """

    __slots__ = [
        "is_active",
        "is_network_server_query_active",
        "timeout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "is_network_server_query_active",
                "isNetworkServerQueryActive",
                bool,
                is_required=True,
            ),
            E("timeout_seconds", "timeoutSeconds", int, is_required=True),
        )


class SystemRedundancyParametersGetResponse(OCIResponse):
    """
    Replaced By ``SystemRedundancyParametersGetResponse16sp2()`` Response to
    ``SystemRedundancyParametersGetRequest()``.

    Contains a list of system Redundancy parameters.

    Attributes:
        roll_back_timer_minutes: rollBackTimerMinutes
    """

    __slots__ = [
        "roll_back_timer_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("roll_back_timer_minutes", "rollBackTimerMinutes", int, is_required=True),
        )


class SystemRedundancyParametersGetResponse16sp2(OCIResponse):
    """
    Response to ``SystemRedundancyParametersGetRequest16sp2()``.

    Contains a list of system Redundancy parameters.

    Attributes:
        roll_back_timer_minutes: rollBackTimerMinutes
        send_sip_option_message_upon_migration: sendSipOptionMessageUponMigration
    """

    __slots__ = [
        "roll_back_timer_minutes",
        "send_sip_option_message_upon_migration",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("roll_back_timer_minutes", "rollBackTimerMinutes", int, is_required=True),
            E(
                "send_sip_option_message_upon_migration",
                "sendSipOptionMessageUponMigration",
                bool,
                is_required=True,
            ),
        )


class SystemRoamingNetworkGetListResponse(OCIResponse):
    """
    Response to the ``SystemRoamingNetworkGetListRequest()``.

    Contains a table with columns: "MSC Address", "Network Translation Index".

    Attributes:
        roaming_network_table: roamingNetworkTable
    """

    __slots__ = [
        "roaming_network_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "roaming_network_table",
                "roamingNetworkTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse(OCIResponse):
    """
    Response to ``SystemRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest()``.

    The column headings are "Number Range Start", "Number Range End", "Service Provider
    Id", "Is Enterprise", "User Id", "Enterprise Trunk" and "Is Active".

    Attributes:
        number_range_summary_table: numberRangeSummaryTable
    """

    __slots__ = [
        "number_range_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "number_range_summary_table",
                "numberRangeSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemRoutePointExternalSystemApplicationControllerGetResponse(OCIResponse):
    """
    Response to the ``SystemRoutePointExternalSystemApplicationControllerGetRequest()``.


    Attributes:
        application_controller: applicationController
    """

    __slots__ = [
        "application_controller",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_controller", "applicationController", str, is_array=True),
        )


class SystemRoutePointExternalSystemGetListResponse(OCIResponse):
    """
    Response to the ``SystemRoutePointExternalSystemGetListRequest()``.

    Contains a table with column headings: "External System", "Description".

    Attributes:
        external_system_table: externalSystemTable
    """

    __slots__ = [
        "external_system_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "external_system_table",
                "externalSystemTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemRoutePointExternalSystemGetRoutePointListResponse(OCIResponse):
    """
    Response to the ``SystemRoutePointExternalSystemGetRoutePointListRequest()``.


    Attributes:
        service_user_id: serviceUserId
    """

    __slots__ = [
        "service_user_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_array=True),
        )


class SystemRoutingGetResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetRequest()``.


    Attributes:
        is_route_round_robin: isRouteRoundRobin
        route_timer_seconds: routeTimerSeconds
        dns_resolved_address_selection_policy: dnsResolvedAddressSelectionPolicy
        stateful_expiration_minutes: statefulExpirationMinutes
        max_addresses_per_hostname: maxAddressesPerHostname
        max_addresses_during_setup: maxAddressesDuringSetup
    """

    __slots__ = [
        "is_route_round_robin",
        "route_timer_seconds",
        "dns_resolved_address_selection_policy",
        "stateful_expiration_minutes",
        "max_addresses_per_hostname",
        "max_addresses_during_setup",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_route_round_robin", "isRouteRoundRobin", bool, is_required=True),
            E("route_timer_seconds", "routeTimerSeconds", int, is_required=True),
            E(
                "dns_resolved_address_selection_policy",
                "dnsResolvedAddressSelectionPolicy",
                str,
                is_required=True,
            ),
            E(
                "stateful_expiration_minutes",
                "statefulExpirationMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_addresses_per_hostname",
                "maxAddressesPerHostname",
                int,
                is_required=True,
            ),
            E(
                "max_addresses_during_setup",
                "maxAddressesDuringSetup",
                int,
                is_required=True,
            ),
        )


class SystemRoutingGetRouteDeviceListResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetRouteDeviceListRequest()``.

    The column headings are "Net Address", "Port", "Transport" and "Description".

    Attributes:
        route_device_table: routeDeviceTable
    """

    __slots__ = [
        "route_device_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "route_device_table",
                "routeDeviceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemRoutingGetRouteListResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetRouteListRequest()``.


    Attributes:
        route_name: routeName
    """

    __slots__ = [
        "route_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_name", "routeName", str, is_array=True),
        )


class SystemRoutingGetTranslationListResponse(OCIResponse):
    """
    Response to ``SystemRoutingGetTranslationListRequest()``.

    The column headings are "Routing Digits" and "Route".

    Attributes:
        routing_table: routingTable
    """

    __slots__ = [
        "routing_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "routing_table",
                "routingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemRoutingProfileGetListResponse(OCIResponse):
    """
    Response to ``SystemRoutingProfileGetListRequest()``.

    Returns a list of routing profiles defined in the system.

    Attributes:
        routing_profile: routingProfile
    """

    __slots__ = [
        "routing_profile",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("routing_profile", "routingProfile", str, is_required=True, is_array=True),
        )


class SystemSIPAuthenticationEndpointLockoutGetResponse(OCIResponse):
    """
    Response to ``SystemSIPAuthenticationEndpointLockoutGetRequest()``.

    The column headings for the lockoutTable are: "Organization Id", "Organization Type",
    "Group Id", "Line/Port", "User ID", "First Name", "Last Name", "Lockout Started",
    "Lockout Expires", "Lockout Count". Lockout times are shown in the system GMT time.
    When a permanent lockout is shown, the "Lockout Expires" column is empty and the
    "Lockout Count" column contains the word Permanent.

    Attributes:
        lockout_table: lockoutTable
    """

    __slots__ = [
        "lockout_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "lockout_table",
                "lockoutTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPAuthenticationPasswordRulesGetResponse(OCIResponse):
    """
    Response to ``SystemSIPAuthenticationPasswordRulesGetRequest()``.

    Contains the SIP authentication password rules for the system.

    Attributes:
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        endpoint_authentication_lockout_type: endpointAuthenticationLockoutType
        endpoint_temporary_lockout_threshold: endpointTemporaryLockoutThreshold
        endpoint_wait_algorithm: endpointWaitAlgorithm
        endpoint_lockout_fixed_minutes: endpointLockoutFixedMinutes
        endpoint_permanent_lockout_threshold: endpointPermanentLockoutThreshold
        trunk_group_authentication_lockout_type: trunkGroupAuthenticationLockoutType
        trunk_group_temporary_lockout_threshold: trunkGroupTemporaryLockoutThreshold
        trunk_group_wait_algorithm: trunkGroupWaitAlgorithm
        trunk_group_lockout_fixed_minutes: trunkGroupLockoutFixedMinutes
        trunk_group_permanent_lockout_threshold: trunkGroupPermanentLockoutThreshold
    """

    __slots__ = [
        "disallow_authentication_name",
        "disallow_old_password",
        "disallow_reversed_old_password",
        "restrict_min_digits",
        "min_digits",
        "restrict_min_upper_case_letters",
        "min_upper_case_letters",
        "restrict_min_lower_case_letters",
        "min_lower_case_letters",
        "restrict_min_non_alphanumeric_characters",
        "min_non_alphanumeric_characters",
        "min_length",
        "send_permanent_lockout_notification",
        "permanent_lockout_notify_email_address",
        "endpoint_authentication_lockout_type",
        "endpoint_temporary_lockout_threshold",
        "endpoint_wait_algorithm",
        "endpoint_lockout_fixed_minutes",
        "endpoint_permanent_lockout_threshold",
        "trunk_group_authentication_lockout_type",
        "trunk_group_temporary_lockout_threshold",
        "trunk_group_wait_algorithm",
        "trunk_group_lockout_fixed_minutes",
        "trunk_group_permanent_lockout_threshold",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_authentication_name",
                "disallowAuthenticationName",
                bool,
                is_required=True,
            ),
            E("disallow_old_password", "disallowOldPassword", bool, is_required=True),
            E(
                "disallow_reversed_old_password",
                "disallowReversedOldPassword",
                bool,
                is_required=True,
            ),
            E("restrict_min_digits", "restrictMinDigits", bool, is_required=True),
            E("min_digits", "minDigits", int, is_required=True),
            E(
                "restrict_min_upper_case_letters",
                "restrictMinUpperCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_upper_case_letters", "minUpperCaseLetters", int, is_required=True),
            E(
                "restrict_min_lower_case_letters",
                "restrictMinLowerCaseLetters",
                bool,
                is_required=True,
            ),
            E("min_lower_case_letters", "minLowerCaseLetters", int, is_required=True),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
                is_required=True,
            ),
            E(
                "min_non_alphanumeric_characters",
                "minNonAlphanumericCharacters",
                int,
                is_required=True,
            ),
            E("min_length", "minLength", int, is_required=True),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
                is_required=True,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "endpoint_authentication_lockout_type",
                "endpointAuthenticationLockoutType",
                str,
                is_required=True,
            ),
            E(
                "endpoint_temporary_lockout_threshold",
                "endpointTemporaryLockoutThreshold",
                int,
                is_required=True,
            ),
            E("endpoint_wait_algorithm", "endpointWaitAlgorithm", str, is_required=True),
            E(
                "endpoint_lockout_fixed_minutes",
                "endpointLockoutFixedMinutes",
                str,
                is_required=True,
            ),
            E(
                "endpoint_permanent_lockout_threshold",
                "endpointPermanentLockoutThreshold",
                int,
                is_required=True,
            ),
            E(
                "trunk_group_authentication_lockout_type",
                "trunkGroupAuthenticationLockoutType",
                str,
                is_required=True,
            ),
            E(
                "trunk_group_temporary_lockout_threshold",
                "trunkGroupTemporaryLockoutThreshold",
                int,
                is_required=True,
            ),
            E(
                "trunk_group_wait_algorithm",
                "trunkGroupWaitAlgorithm",
                str,
                is_required=True,
            ),
            E(
                "trunk_group_lockout_fixed_minutes",
                "trunkGroupLockoutFixedMinutes",
                str,
                is_required=True,
            ),
            E(
                "trunk_group_permanent_lockout_threshold",
                "trunkGroupPermanentLockoutThreshold",
                int,
                is_required=True,
            ),
        )


class SystemSIPAuthenticationTrunkGroupLockoutGetResponse(OCIResponse):
    """
    Response to ``SystemSIPAuthenticationTrunkGroupLockoutGetRequest()``.

    The column headings for the lockoutTable are: "Organization Id", "Organization Type",
    "Group Id", "Trunk Group Name", "Lockout Started", "Lockout Expires", "Lockout Count".
    Lockout times are shown in the system GMT time.  When a permanent lockout is shown,
    the "Lockout Expires" column is empty and the "Lockout Count" column contains the word
    Permanent.

    Attributes:
        lockout_table: lockoutTable
    """

    __slots__ = [
        "lockout_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "lockout_table",
                "lockoutTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPDeviceTypeFileGetListResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetListRequest()``.

    Contains a table of device files managed by the Device Management System on a per-
    device type basis.  The column headings are: "File Type", "File Format", "Is
    Authenticated".

    Replaced By: ``SystemSIPDeviceTypeFileGetListResponse14sp8()``

    Attributes:
        device_type_files_table: deviceTypeFilesTable
    """

    __slots__ = [
        "device_type_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_type_files_table",
                "deviceTypeFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPDeviceTypeFileGetListResponse14sp8(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetListRequest14sp8()``.

    Contains a table of device files managed by the Device Management System on a per-
    device type basis.  The column headings are: "File Format", "Is Authenticated",
    "Access URL", "Repository URL", "Template URL".

    Attributes:
        device_type_files_table: deviceTypeFilesTable
    """

    __slots__ = [
        "device_type_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_type_files_table",
                "deviceTypeFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPDeviceTypeFileGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest()``.

    Replaced By: ``SystemSIPDeviceTypeFileGetResponse14sp8()``

    Attributes:
        file_format: fileFormat
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        allow_file_customization: allowFileCustomization
        file_source: fileSource
        configuration_file_name: configurationFileName
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
    """

    __slots__ = [
        "file_format",
        "remote_file_format",
        "file_category",
        "allow_file_customization",
        "file_source",
        "configuration_file_name",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_format", "fileFormat", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E(
                "allow_file_customization",
                "allowFileCustomization",
                bool,
                is_required=True,
            ),
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        )


class SystemSIPDeviceTypeFileGetResponse14sp8(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest14sp8()``.


    Attributes:
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        allow_file_customization: allowFileCustomization
        file_source: fileSource
        configuration_file_name: configurationFileName
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
    """

    __slots__ = [
        "remote_file_format",
        "file_category",
        "allow_file_customization",
        "file_source",
        "configuration_file_name",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E(
                "allow_file_customization",
                "allowFileCustomization",
                bool,
                is_required=True,
            ),
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        )


class SystemSIPDeviceTypeFileGetResponse16sp1(OCIResponse):
    """
    Replaced By ``SystemSIPDeviceTypeFileGetResponse18()``.

    Response to ``SystemSIPDeviceTypeFileGetRequest16sp1()``.

    Attributes:
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        configuration_file_name: configurationFileName
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
    """

    __slots__ = [
        "remote_file_format",
        "file_category",
        "file_customization",
        "file_source",
        "configuration_file_name",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "access_url",
        "repository_url",
        "template_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
        )


class SystemSIPDeviceTypeFileGetResponse18(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest18()``.

    Take note: 1. accessUrl may have undefined content.  When it is the case, undefined
    content is put between []. It may also be set to "Error Access FQDN Not Provisioned"
    when the access FQDN is not set, or "Error Access Context Name Not Provisioned" when
    the context name is not set.  2. repositoryUrl may be set to
    "DEVICE_CONFIGURATION_FILE_REPOSITORY_MISSING", if there is no file repository
    defined.

    Attributes:
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        configuration_file_name: configurationFileName
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
        allow_http: allowHttp
        allow_https: allowHttps
        allow_tftp: allowTftp
        enable_caching: enableCaching
    """

    __slots__ = [
        "remote_file_format",
        "file_category",
        "file_customization",
        "file_source",
        "configuration_file_name",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "access_url",
        "repository_url",
        "template_url",
        "allow_http",
        "allow_https",
        "allow_tftp",
        "enable_caching",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
            E("allow_http", "allowHttp", bool, is_required=True),
            E("allow_https", "allowHttps", bool, is_required=True),
            E("allow_tftp", "allowTftp", bool, is_required=True),
            E("enable_caching", "enableCaching", bool, is_required=True),
        )


class SystemSIPDeviceTypeFileGetResponse19(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest19()``.

    Take note: 1. accessUrl may have undefined content.  When it is the case, undefined
    content is put between []. It may also be set to "Error Access FQDN Not Provisioned"
    when the access FQDN is not set, or "Error Access Context Name Not Provisioned" when
    the context name is not set.  2. repositoryUrl may be set to
    "DEVICE_CONFIGURATION_FILE_REPOSITORY_MISSING", if there is no file repository
    defined.

    Attributes:
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        configuration_file_name: configurationFileName
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
        allow_http: allowHttp
        allow_https: allowHttps
        allow_tftp: allowTftp
        enable_caching: enableCaching
        allow_upload_from_device: allowUploadFromDevice
    """

    __slots__ = [
        "remote_file_format",
        "file_category",
        "file_customization",
        "file_source",
        "configuration_file_name",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "access_url",
        "repository_url",
        "template_url",
        "allow_http",
        "allow_https",
        "allow_tftp",
        "enable_caching",
        "allow_upload_from_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
            E("allow_http", "allowHttp", bool, is_required=True),
            E("allow_https", "allowHttps", bool, is_required=True),
            E("allow_tftp", "allowTftp", bool, is_required=True),
            E("enable_caching", "enableCaching", bool, is_required=True),
            E(
                "allow_upload_from_device",
                "allowUploadFromDevice",
                bool,
                is_required=True,
            ),
        )


class SystemSIPDeviceTypeFileGetResponse20(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeFileGetRequest20()``.

    Take note: 1. accessUrl may have undefined content.  When it is the case, undefined
    content is put between []. It may also be set to "Error Access FQDN Not Provisioned"
    when the access FQDN is not set, or "Error Access Context Name Not Provisioned" when
    the context name is not set.  2. repositoryUrl may be set to
    "DEVICE_CONFIGURATION_FILE_REPOSITORY_MISSING", if there is no file repository
    defined.

    Attributes:
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        configuration_file_name: configurationFileName
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        access_url: accessUrl
        repository_url: repositoryUrl
        template_url: templateUrl
        allow_http: allowHttp
        allow_https: allowHttps
        allow_tftp: allowTftp
        enable_caching: enableCaching
        allow_upload_from_device: allowUploadFromDevice
        default_extended_file_capture_mode: defaultExtendedFileCaptureMode
    """

    __slots__ = [
        "remote_file_format",
        "file_category",
        "file_customization",
        "file_source",
        "configuration_file_name",
        "use_http_digest_authentication",
        "mac_based_file_authentication",
        "user_name_password_file_authentication",
        "mac_in_non_request_uri",
        "mac_format_in_non_request_uri",
        "access_url",
        "repository_url",
        "template_url",
        "allow_http",
        "allow_https",
        "allow_tftp",
        "enable_caching",
        "allow_upload_from_device",
        "default_extended_file_capture_mode",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("configuration_file_name", "configurationFileName", str),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("access_url", "accessUrl", str, is_required=True),
            E("repository_url", "repositoryUrl", str),
            E("template_url", "templateUrl", str),
            E("allow_http", "allowHttp", bool, is_required=True),
            E("allow_https", "allowHttps", bool, is_required=True),
            E("allow_tftp", "allowTftp", bool, is_required=True),
            E("enable_caching", "enableCaching", bool, is_required=True),
            E(
                "allow_upload_from_device",
                "allowUploadFromDevice",
                bool,
                is_required=True,
            ),
            E(
                "default_extended_file_capture_mode",
                "defaultExtendedFileCaptureMode",
                bool,
            ),
        )


class SystemSIPDeviceTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetListRequest()``.

    Contains a table of identity/ device profile types configured in the system.  The
    column headings are: "Device Type", "Profile", "Is Obsolete".

    Attributes:
        device_type_table: deviceTypeTable
    """

    __slots__ = [
        "device_type_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_type_table",
                "deviceTypeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPDeviceTypeLanguageMappingGetListResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeLanguageMappingGetListRequest()``.

    Contains a table of device type languages mapped to equivalent BroadWorks languages.
    The column headings are: "BroadWorks Language", "Device Language".

    Attributes:
        device_type_languages_table: deviceTypeLanguagesTable
    """

    __slots__ = [
        "device_type_languages_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_type_languages_table",
                "deviceTypeLanguagesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPDeviceTypeServiceGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeServiceGetRequest()``.

    Contains the list of device type services integrated to BroadWorks.

    Attributes:
        supports_polycom_phone_services: supportsPolycomPhoneServices
    """

    __slots__ = [
        "supports_polycom_phone_services",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "supports_polycom_phone_services",
                "supportsPolycomPhoneServices",
                bool,
                is_required=True,
            ),
        )


class SystemSIPDiversionReasonGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDiversionReasonGetRequest()``.

    Contains a table containing a list of diversion reasons and associated cause values.
    The column headings are: "Diversion Reaon", "Cause Value".

    Attributes:
        diversion_reason_table: diversionReasonTable
    """

    __slots__ = [
        "diversion_reason_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "diversion_reason_table",
                "diversionReasonTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPGetACLListResponse(OCIResponse):
    """
    Response to ``SystemSIPGetACLListRequest()``.

    The table columns are: "Net Address", "Transport" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSIPGetContentTypeListResponse(OCIResponse):
    """
    Response to ``SystemSIPGetContentTypeListRequest()``.

    Returns a 2 column table with column headings: "Content Type" and "Supported
    Interface".

    Attributes:
        content_type_table: contentTypeTable
    """

    __slots__ = [
        "content_type_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "content_type_table",
                "contentTypeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSMDIGetACLListResponse(OCIResponse):
    """
    Response to ``SystemSMDIGetACLListRequest()``.

    The table columns are: "Net Address" and "Description".

    Attributes:
        acl_table: aclTable
    """

    __slots__ = [
        "acl_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "acl_table",
                "aclTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSMDIMessageDeskGetServerListResponse(OCIResponse):
    """
    Response to ``SystemMediaServerGetListRequest()``.

    The SMDI Server table column headings are: "Device Name", "Net Address", "Port" and
    "Description".

    Attributes:
        smdi_server_table: smdiServerTable
    """

    __slots__ = [
        "smdi_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "smdi_server_table",
                "smdiServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSMDIMessageDeskGetServerRouteListResponse(OCIResponse):
    """
    Response to ``SystemSMDIMessageDeskGetServerRouteListRequest()``.

    The SMDI Server route table column headings are: "Destination" and "SMDI Servers".

    Attributes:
        smdi_server_route_table: smdiServerRouteTable
    """

    __slots__ = [
        "smdi_server_route_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "smdi_server_route_table",
                "smdiServerRouteTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSMDIParametersGetResponse(OCIResponse):
    """
    Response to ``SystemSMDIParametersGetListRequest()``.

    Contains a list of system SMDI parameters.

    Attributes:
        enable_smdi: enableSMDI
        listening_port: listeningPort
        max_connections: maxConnections
    """

    __slots__ = [
        "enable_smdi",
        "listening_port",
        "max_connections",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_smdi", "enableSMDI", bool, is_required=True),
            E("listening_port", "listeningPort", int, is_required=True),
            E("max_connections", "maxConnections", int, is_required=True),
        )


class SystemSMPPGetResponse(OCIResponse):
    """
    Response to ``SystemSMPPGetRequest()``.


    Attributes:
        primary_smpp_server_net_address: primarySMPPServerNetAddress
        primary_smpp_port: primarySMPPPort
        secondary_smpp_server_net_address: secondarySMPPServerNetAddress
        secondary_smpp_port: secondarySMPPPort
        system_id: systemId
        password: password
        version: version
    """

    __slots__ = [
        "primary_smpp_server_net_address",
        "primary_smpp_port",
        "secondary_smpp_server_net_address",
        "secondary_smpp_port",
        "system_id",
        "password",
        "version",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("primary_smpp_server_net_address", "primarySMPPServerNetAddress", str),
            E("primary_smpp_port", "primarySMPPPort", int, is_required=True),
            E("secondary_smpp_server_net_address", "secondarySMPPServerNetAddress", str),
            E("secondary_smpp_port", "secondarySMPPPort", int, is_required=True),
            E("system_id", "systemId", str),
            E("password", "password", str),
            E("version", "version", str, is_required=True),
        )


class SystemSMPPGetResponse14sp5(OCIResponse):
    """
    Response to ``SystemSMPPGetRequest14sp5()``.

    Replaced by: ``SystemSMPPGetResponse21()``

    Attributes:
        primary_smpp_server_net_address: primarySMPPServerNetAddress
        primary_smpp_port: primarySMPPPort
        secondary_smpp_server_net_address: secondarySMPPServerNetAddress
        secondary_smpp_port: secondarySMPPPort
        system_id: systemId
        password: password
        version: version
        system_type: systemType
    """

    __slots__ = [
        "primary_smpp_server_net_address",
        "primary_smpp_port",
        "secondary_smpp_server_net_address",
        "secondary_smpp_port",
        "system_id",
        "password",
        "version",
        "system_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("primary_smpp_server_net_address", "primarySMPPServerNetAddress", str),
            E("primary_smpp_port", "primarySMPPPort", int, is_required=True),
            E("secondary_smpp_server_net_address", "secondarySMPPServerNetAddress", str),
            E("secondary_smpp_port", "secondarySMPPPort", int, is_required=True),
            E("system_id", "systemId", str),
            E("password", "password", str),
            E("version", "version", str, is_required=True),
            E("system_type", "systemType", str),
        )


class SystemSMPPGetResponse21(OCIResponse):
    """
    Response to ``SystemSMPPGetRequest21()``.


    Attributes:
        primary_smpp_server_net_address: primarySMPPServerNetAddress
        primary_smpp_port: primarySMPPPort
        secondary_smpp_server_net_address: secondarySMPPServerNetAddress
        secondary_smpp_port: secondarySMPPPort
        system_id: systemId
        password: password
        version: version
        system_type: systemType
        enable_mwi_customized_message: enableMWICustomizedMessage
        support_message_payload: supportMessagePayload
        max_short_message_length: maxShortMessageLength
        use_gsm_mwi_ucs2_encoding: useGsmMwiUcs2Encoding
    """

    __slots__ = [
        "primary_smpp_server_net_address",
        "primary_smpp_port",
        "secondary_smpp_server_net_address",
        "secondary_smpp_port",
        "system_id",
        "password",
        "version",
        "system_type",
        "enable_mwi_customized_message",
        "support_message_payload",
        "max_short_message_length",
        "use_gsm_mwi_ucs2_encoding",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("primary_smpp_server_net_address", "primarySMPPServerNetAddress", str),
            E("primary_smpp_port", "primarySMPPPort", int, is_required=True),
            E("secondary_smpp_server_net_address", "secondarySMPPServerNetAddress", str),
            E("secondary_smpp_port", "secondarySMPPPort", int, is_required=True),
            E("system_id", "systemId", str),
            E("password", "password", str),
            E("version", "version", str, is_required=True),
            E("system_type", "systemType", str),
            E(
                "enable_mwi_customized_message",
                "enableMWICustomizedMessage",
                bool,
                is_required=True,
            ),
            E(
                "support_message_payload",
                "supportMessagePayload",
                bool,
                is_required=True,
            ),
            E(
                "max_short_message_length",
                "maxShortMessageLength",
                int,
                is_required=True,
            ),
            E(
                "use_gsm_mwi_ucs2_encoding",
                "useGsmMwiUcs2Encoding",
                bool,
                is_required=True,
            ),
        )


class SystemScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``SystemScheduleGetEventListRequest()``.

    The response contains a list of events.

    Attributes:
        event_name: eventName
    """

    __slots__ = [
        "event_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("event_name", "eventName", str, is_array=True),
        )


class SystemScheduleGetListResponse(OCIResponse):
    """
    Response to ``SystemScheduleGetListRequest()``.

    The response contains a list of system schedules.

    Attributes:
        schedule_name: scheduleName
        schedule_type: scheduleType
    """

    __slots__ = [
        "schedule_name",
        "schedule_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_name", "scheduleName", str, is_array=True),
            E("schedule_type", "scheduleType", str, is_array=True),
        )


class SystemSecurityClassificationGetClassificationResponse(OCIResponse):
    """
    Response to the ``SystemSecurityClassificationGetClassificationRequest()``.


    Attributes:
        audio_announcement_file_description: audioAnnouncementFileDescription
        audio_announcement_file_type: audioAnnouncementFileType
    """

    __slots__ = [
        "audio_announcement_file_description",
        "audio_announcement_file_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "audio_announcement_file_description",
                "audioAnnouncementFileDescription",
                str,
                is_required=True,
            ),
            E(
                "audio_announcement_file_type",
                "audioAnnouncementFileType",
                str,
                is_required=True,
            ),
        )


class SystemSecurityClassificationGetClassificationTrunkGroupUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemSecurityClassificationGetClassificationTrunkGroupUsageListRequest()``.

    Contains a table with column headings: "Trunk Group Name","Group ID","Organization ID"
    and "Organization Type"

    Attributes:
        usage_table: usageTable
    """

    __slots__ = [
        "usage_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "usage_table",
                "usageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSecurityClassificationGetClassificationUserUsageListResponse(OCIResponse):
    """
    Response to the
    ``SystemSecurityClassificationGetClassificationUserUsageListRequest()``.

    Contains a table with column headings: "User ID", "Last Name", "First Name", "Phone
    Number", "Extension", "Service Provider Id", "Group Id".

    Attributes:
        usage_table: usageTable
    """

    __slots__ = [
        "usage_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "usage_table",
                "usageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSecurityClassificationGetResponse(OCIResponse):
    """
    Response to the ``SystemSecurityClassificationGetRequest()``.

    Contains a table with column headings: "Name", "Priority".

    Attributes:
        meet_me_annc_threshold: meetMeAnncThreshold
        security_classification_table: SecurityClassificationTable
    """

    __slots__ = [
        "meet_me_annc_threshold",
        "security_classification_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("meet_me_annc_threshold", "meetMeAnncThreshold", int, is_required=True),
            E(
                "security_classification_table",
                "SecurityClassificationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSecurityClassificationGetResponse21(OCIResponse):
    """
    Response to the ``SystemSecurityClassificationGetRequest21()``.

    Contains a table with column headings: "Name", "Priority".

    Attributes:
        meet_me_annc_threshold: meetMeAnncThreshold
        play_trunk_user_security_classification_announcement:
            playTrunkUserSecurityClassificationAnnouncement
        security_classification_table: SecurityClassificationTable
    """

    __slots__ = [
        "meet_me_annc_threshold",
        "play_trunk_user_security_classification_announcement",
        "security_classification_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("meet_me_annc_threshold", "meetMeAnncThreshold", int, is_required=True),
            E(
                "play_trunk_user_security_classification_announcement",
                "playTrunkUserSecurityClassificationAnnouncement",
                bool,
                is_required=True,
            ),
            E(
                "security_classification_table",
                "SecurityClassificationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSelectiveServicesGetResponse(OCIResponse):
    """
    Response to ``SystemSelectiveServicesGetRequest()``.


    Attributes:
        schedule_combination: scheduleCombination
    """

    __slots__ = [
        "schedule_combination",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_combination", "scheduleCombination", str, is_required=True),
        )


class SystemSelectiveServicesGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemSelectiveServicesGetRequest18sp1()``.


    Attributes:
        schedule_combination: scheduleCombination
        screen_private_number: screenPrivateNumber
    """

    __slots__ = [
        "schedule_combination",
        "screen_private_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_combination", "scheduleCombination", str, is_required=True),
            E("screen_private_number", "screenPrivateNumber", bool, is_required=True),
        )


class SystemServerAddressesGetResponse(OCIResponse):
    """
    Response to ``SystemServerAddressesGetRequest()``.

    Contains a list of system Server Addresses.  See also: ``PrimaryInfoGetResponse()``
    ``PublicClusterGetFullyQualifiedDomainNameResponse()`` ``ServingInfoGetResponse()``

    Attributes:
        web_server_cluster_public_fqdn: webServerClusterPublicFQDN
        application_server_cluster_primary_public_fqdn:
            applicationServerClusterPrimaryPublicFQDN
        application_server_cluster_secondary_public_fqdn:
            applicationServerClusterSecondaryPublicFQDN
        application_server_cluster_primary_private_fqdn:
            applicationServerClusterPrimaryPrivateFQDN
        application_server_cluster_secondary_private_fqdn:
            applicationServerClusterSecondaryPrivateFQDN
    """

    __slots__ = [
        "web_server_cluster_public_fqdn",
        "application_server_cluster_primary_public_fqdn",
        "application_server_cluster_secondary_public_fqdn",
        "application_server_cluster_primary_private_fqdn",
        "application_server_cluster_secondary_private_fqdn",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("web_server_cluster_public_fqdn", "webServerClusterPublicFQDN", str),
            E(
                "application_server_cluster_primary_public_fqdn",
                "applicationServerClusterPrimaryPublicFQDN",
                str,
            ),
            E(
                "application_server_cluster_secondary_public_fqdn",
                "applicationServerClusterSecondaryPublicFQDN",
                str,
            ),
            E(
                "application_server_cluster_primary_private_fqdn",
                "applicationServerClusterPrimaryPrivateFQDN",
                str,
            ),
            E(
                "application_server_cluster_secondary_private_fqdn",
                "applicationServerClusterSecondaryPrivateFQDN",
                str,
            ),
        )


class SystemServiceActivationAccessCodeGetResponse(OCIResponse):
    """
    Response to ``SystemServiceActivationAccessCodeGetRequest()``.

    Contains Service Activation Access Code system parameters.

    Attributes:
        is_active: isActive
        terminating_access_code: terminatingAccessCode
        redirecting_access_code: redirectingAccessCode
        click_to_dial_access_code: clickToDialAccessCode
    """

    __slots__ = [
        "is_active",
        "terminating_access_code",
        "redirecting_access_code",
        "click_to_dial_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("terminating_access_code", "terminatingAccessCode", str),
            E("redirecting_access_code", "redirectingAccessCode", str),
            E("click_to_dial_access_code", "clickToDialAccessCode", str),
        )


class SystemServiceCodeGetListResponse(OCIResponse):
    """
    Response to ``SystemServiceCodeGetListRequest()``.

    Contains a table of defined service codes The column headings are: "Service Code", and
    "Description".

    Attributes:
        service_code_table: serviceCodeTable
    """

    __slots__ = [
        "service_code_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_code_table",
                "serviceCodeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemServiceControlParametersGetResponse(OCIResponse):
    """
    Response to ``SystemServiceControlParametersGetListRequest()``.

    Contains a list of system Service Control parameters.

    Attributes:
        server_port: serverPort
        max_client_connections: maxClientConnections
    """

    __slots__ = [
        "server_port",
        "max_client_connections",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int, is_required=True),
            E("max_client_connections", "maxClientConnections", int, is_required=True),
        )


class SystemServicePackMigrationGetResponse(OCIResponse):
    """
    Response to the ``SystemServicePackMigrationGetRequest()``.

    The response contains the Service Pack Migration system level settings.

    Attributes:
        max_simultaneous_migration_tasks: maxSimultaneousMigrationTasks
    """

    __slots__ = [
        "max_simultaneous_migration_tasks",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "max_simultaneous_migration_tasks",
                "maxSimultaneousMigrationTasks",
                int,
                is_required=True,
            ),
        )


class SystemServicePhoneNumberLookupResponse(OCIResponse):
    """
    Response to the ``SystemServicePhoneNumberLookupRequest()``.

    The column headings for the userTable are: "Service Provider Id", "Is Enterprise",
    "Group Id", "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number" and "Extension".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSessionAdmissionControlGetResponse(OCIResponse):
    """
    Response to the ``SystemSessionAdmissionControlGetRequest()``.

    The response contains the session admission control settings for the system.

    Attributes:
        count_long_connections_to_media_server: countLongConnectionsToMediaServer
        sac_handling_for_mo_h: sacHandlingForMoH
        block_vm_deposit_due_to_sac_limits: blockVMDepositDueToSACLimits
    """

    __slots__ = [
        "count_long_connections_to_media_server",
        "sac_handling_for_mo_h",
        "block_vm_deposit_due_to_sac_limits",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "count_long_connections_to_media_server",
                "countLongConnectionsToMediaServer",
                bool,
                is_required=True,
            ),
            E("sac_handling_for_mo_h", "sacHandlingForMoH", str, is_required=True),
            E(
                "block_vm_deposit_due_to_sac_limits",
                "blockVMDepositDueToSACLimits",
                bool,
                is_required=True,
            ),
        )


class SystemSessionAuditGetResponse(OCIResponse):
    """
    Response to ``SystemSessionAuditGetRequest()``.

    Replaced By: ``SystemSessionAuditGetResponse14sp3()``

    Attributes:
        is_active: isActive
        interval_seconds: intervalSeconds
        timeout_period_seconds: timeoutPeriodSeconds
    """

    __slots__ = [
        "is_active",
        "interval_seconds",
        "timeout_period_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("interval_seconds", "intervalSeconds", int, is_required=True),
            E("timeout_period_seconds", "timeoutPeriodSeconds", int, is_required=True),
        )


class SystemSessionAuditGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemSessionAuditGetRequest14sp3()``.


    Attributes:
        is_audit_active: isAuditActive
        audit_interval_seconds: auditIntervalSeconds
        audit_timeout_seconds: auditTimeoutSeconds
        release_call_on_audit_failure: releaseCallOnAuditFailure
        is_sip_refresh_allowed_on_audit: isSIPRefreshAllowedOnAudit
        allow_update_for_sip_refresh: allowUpdateForSIPRefresh
        is_sip_session_timer_active: isSIPSessionTimerActive
        sip_session_expires_minimum_seconds: sipSessionExpiresMinimumSeconds
        enforce_sip_session_expires_maximum: enforceSIPSessionExpiresMaximum
        sip_session_expires_maximum_seconds: sipSessionExpiresMaximumSeconds
        sip_session_expires_timer_seconds: sipSessionExpiresTimerSeconds
        always_use_session_timer_when_supported: alwaysUseSessionTimerWhenSupported
        preferred_session_timer_refresher: preferredSessionTimerRefresher
    """

    __slots__ = [
        "is_audit_active",
        "audit_interval_seconds",
        "audit_timeout_seconds",
        "release_call_on_audit_failure",
        "is_sip_refresh_allowed_on_audit",
        "allow_update_for_sip_refresh",
        "is_sip_session_timer_active",
        "sip_session_expires_minimum_seconds",
        "enforce_sip_session_expires_maximum",
        "sip_session_expires_maximum_seconds",
        "sip_session_expires_timer_seconds",
        "always_use_session_timer_when_supported",
        "preferred_session_timer_refresher",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_audit_active", "isAuditActive", bool, is_required=True),
            E("audit_interval_seconds", "auditIntervalSeconds", int, is_required=True),
            E("audit_timeout_seconds", "auditTimeoutSeconds", int, is_required=True),
            E(
                "release_call_on_audit_failure",
                "releaseCallOnAuditFailure",
                bool,
                is_required=True,
            ),
            E(
                "is_sip_refresh_allowed_on_audit",
                "isSIPRefreshAllowedOnAudit",
                bool,
                is_required=True,
            ),
            E(
                "allow_update_for_sip_refresh",
                "allowUpdateForSIPRefresh",
                bool,
                is_required=True,
            ),
            E(
                "is_sip_session_timer_active",
                "isSIPSessionTimerActive",
                bool,
                is_required=True,
            ),
            E(
                "sip_session_expires_minimum_seconds",
                "sipSessionExpiresMinimumSeconds",
                int,
                is_required=True,
            ),
            E(
                "enforce_sip_session_expires_maximum",
                "enforceSIPSessionExpiresMaximum",
                bool,
                is_required=True,
            ),
            E(
                "sip_session_expires_maximum_seconds",
                "sipSessionExpiresMaximumSeconds",
                int,
                is_required=True,
            ),
            E(
                "sip_session_expires_timer_seconds",
                "sipSessionExpiresTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "always_use_session_timer_when_supported",
                "alwaysUseSessionTimerWhenSupported",
                bool,
                is_required=True,
            ),
            E(
                "preferred_session_timer_refresher",
                "preferredSessionTimerRefresher",
                str,
                is_required=True,
            ),
        )


class SystemSessionAuditGetResponse17sp3(OCIResponse):
    """
    Response to ``SystemSessionAuditGetRequest17sp3()``.


    Attributes:
        is_audit_active: isAuditActive
        audit_interval_seconds: auditIntervalSeconds
        audit_timeout_seconds: auditTimeoutSeconds
        release_call_on_audit_failure: releaseCallOnAuditFailure
        is_sip_refresh_allowed_on_audit: isSIPRefreshAllowedOnAudit
        allow_update_for_sip_refresh: allowUpdateForSIPRefresh
        is_sip_session_timer_active: isSIPSessionTimerActive
        sip_session_expires_minimum_seconds: sipSessionExpiresMinimumSeconds
        enforce_sip_session_expires_maximum: enforceSIPSessionExpiresMaximum
        sip_session_expires_maximum_seconds: sipSessionExpiresMaximumSeconds
        sip_session_expires_timer_seconds: sipSessionExpiresTimerSeconds
        always_use_session_timer_when_supported: alwaysUseSessionTimerWhenSupported
        preferred_session_timer_refresher: preferredSessionTimerRefresher
        enable_emergency_call_alarm_timer: enableEmergencyCallAlarmTimer
        emergency_call_alarm_minutes: emergencyCallAlarmMinutes
        enable_emergency_call_cleanup_timer: enableEmergencyCallCleanupTimer
        emergency_call_cleanup_minutes: emergencyCallCleanupMinutes
    """

    __slots__ = [
        "is_audit_active",
        "audit_interval_seconds",
        "audit_timeout_seconds",
        "release_call_on_audit_failure",
        "is_sip_refresh_allowed_on_audit",
        "allow_update_for_sip_refresh",
        "is_sip_session_timer_active",
        "sip_session_expires_minimum_seconds",
        "enforce_sip_session_expires_maximum",
        "sip_session_expires_maximum_seconds",
        "sip_session_expires_timer_seconds",
        "always_use_session_timer_when_supported",
        "preferred_session_timer_refresher",
        "enable_emergency_call_alarm_timer",
        "emergency_call_alarm_minutes",
        "enable_emergency_call_cleanup_timer",
        "emergency_call_cleanup_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_audit_active", "isAuditActive", bool, is_required=True),
            E("audit_interval_seconds", "auditIntervalSeconds", int, is_required=True),
            E("audit_timeout_seconds", "auditTimeoutSeconds", int, is_required=True),
            E(
                "release_call_on_audit_failure",
                "releaseCallOnAuditFailure",
                bool,
                is_required=True,
            ),
            E(
                "is_sip_refresh_allowed_on_audit",
                "isSIPRefreshAllowedOnAudit",
                bool,
                is_required=True,
            ),
            E(
                "allow_update_for_sip_refresh",
                "allowUpdateForSIPRefresh",
                bool,
                is_required=True,
            ),
            E(
                "is_sip_session_timer_active",
                "isSIPSessionTimerActive",
                bool,
                is_required=True,
            ),
            E(
                "sip_session_expires_minimum_seconds",
                "sipSessionExpiresMinimumSeconds",
                int,
                is_required=True,
            ),
            E(
                "enforce_sip_session_expires_maximum",
                "enforceSIPSessionExpiresMaximum",
                bool,
                is_required=True,
            ),
            E(
                "sip_session_expires_maximum_seconds",
                "sipSessionExpiresMaximumSeconds",
                int,
                is_required=True,
            ),
            E(
                "sip_session_expires_timer_seconds",
                "sipSessionExpiresTimerSeconds",
                int,
                is_required=True,
            ),
            E(
                "always_use_session_timer_when_supported",
                "alwaysUseSessionTimerWhenSupported",
                bool,
                is_required=True,
            ),
            E(
                "preferred_session_timer_refresher",
                "preferredSessionTimerRefresher",
                str,
                is_required=True,
            ),
            E(
                "enable_emergency_call_alarm_timer",
                "enableEmergencyCallAlarmTimer",
                bool,
                is_required=True,
            ),
            E(
                "emergency_call_alarm_minutes",
                "emergencyCallAlarmMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_emergency_call_cleanup_timer",
                "enableEmergencyCallCleanupTimer",
                bool,
                is_required=True,
            ),
            E(
                "emergency_call_cleanup_minutes",
                "emergencyCallCleanupMinutes",
                int,
                is_required=True,
            ),
        )


class SystemShInterfaceParametersGetResponse(OCIResponse):
    """
    Response to ``SystemShInterfaceParametersGetRequest()``.

    Contains the Sh Interface system parameters.

    Attributes:
        hss_realm: hssRealm
        request_timeout_seconds: requestTimeoutSeconds
        public_identity_refresh_delay_seconds: publicIdentityRefreshDelaySeconds
    """

    __slots__ = [
        "hss_realm",
        "request_timeout_seconds",
        "public_identity_refresh_delay_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("hss_realm", "hssRealm", str),
            E("request_timeout_seconds", "requestTimeoutSeconds", int, is_required=True),
            E(
                "public_identity_refresh_delay_seconds",
                "publicIdentityRefreshDelaySeconds",
                int,
                is_required=True,
            ),
        )


class SystemShInterfaceParametersGetResponse17(OCIResponse):
    """
    Response to ``SystemShInterfaceParametersGetRequest()``.

    Contains the Sh Interface system parameters.

    Attributes:
        hss_realm: hssRealm
        public_identity_refresh_delay_seconds: publicIdentityRefreshDelaySeconds
    """

    __slots__ = [
        "hss_realm",
        "public_identity_refresh_delay_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("hss_realm", "hssRealm", str),
            E(
                "public_identity_refresh_delay_seconds",
                "publicIdentityRefreshDelaySeconds",
                int,
                is_required=True,
            ),
        )


class SystemShInterfaceRefreshTaskGetResponse(OCIResponse):
    """
    Response to ``SystemShInterfaceRefreshTaskGetRequest()``.

    Provides the status of the system refresh task.  If isRunning is false,
    numberPublicIdentityRefreshStarted and numberPublicIdentities are omitted.  If
    isRunning is true, numberPublicIdentities indicates the total number of public
    identities in the system that will be refreshed by the system refresh task;
    numberPublicIdentityRefreshesStarted indicates the total number of public identities
    for which a refresh has been started.

    Attributes:
        is_running: isRunning
        number_public_identity_refreshes_started: numberPublicIdentityRefreshesStarted
        number_public_identities: numberPublicIdentities
    """

    __slots__ = [
        "is_running",
        "number_public_identity_refreshes_started",
        "number_public_identities",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_running", "isRunning", bool, is_required=True),
            E(
                "number_public_identity_refreshes_started",
                "numberPublicIdentityRefreshesStarted",
                int,
            ),
            E("number_public_identities", "numberPublicIdentities", int),
        )


class SystemSoftwareVersionGetResponse(OCIResponse):
    """
    Response to the ``SystemSoftwareVersionGetRequest()``.


    Attributes:
        version: version
    """

    __slots__ = [
        "version",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("version", "version", str, is_required=True),
        )


class SystemSpeedDial100GetResponse(OCIResponse):
    """
    Response to the ``SystemSpeedDial100GetRequest()``.


    Attributes:
        prefix: prefix
    """

    __slots__ = [
        "prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix", "prefix", str, is_required=True),
        )


class SystemSpeedDial100GetResponse17sp1(OCIResponse):
    """
    Response to the ``SystemSpeedDial100GetRequest17sp1()``.


    Attributes:
        prefix: prefix
    """

    __slots__ = [
        "prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix", "prefix", str),
        )


class SystemStateOrProvinceGetListResponse(OCIResponse):
    """
    Contains a 2 column table with column headings 'Key' and 'Display Name' and a row for
    each state or province.


    Attributes:
        state_or_province_table: stateOrProvinceTable
    """

    __slots__ = [
        "state_or_province_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "state_or_province_table",
                "stateOrProvinceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest()``.

    Replaced By: ``SystemSubscriberGetCallProcessingParametersResponse14sp3()``

    Attributes:
        user_calling_line_id_selection: userCallingLineIdSelection
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
    """

    __slots__ = [
        "user_calling_line_id_selection",
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_calling_line_id_selection",
                "userCallingLineIdSelection",
                str,
                is_required=True,
            ),
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
        )


class SystemSubscriberGetCallProcessingParametersResponse14sp3(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest14sp3()``.


    Attributes:
        user_calling_line_id_selection: userCallingLineIdSelection
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
    """

    __slots__ = [
        "user_calling_line_id_selection",
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_calling_line_id_selection",
                "userCallingLineIdSelection",
                str,
                is_required=True,
            ),
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse14sp7(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest14sp7()``.


    Attributes:
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
    """

    __slots__ = [
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse15(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest15()``.


    Attributes:
        user_calling_line_id_selection: userCallingLineIdSelection
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
    """

    __slots__ = [
        "user_calling_line_id_selection",
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "max_no_answer_number_of_rings",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_calling_line_id_selection",
                "userCallingLineIdSelection",
                str,
                is_required=True,
            ),
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
            E(
                "max_no_answer_number_of_rings",
                "maxNoAnswerNumberOfRings",
                int,
                is_required=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse15sp2(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest15sp2()``.

    Replaced by: ``SystemSubscriberGetCallProcessingParametersResponse17()``

    Attributes:
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
    """

    __slots__ = [
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "max_no_answer_number_of_rings",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
            E(
                "max_no_answer_number_of_rings",
                "maxNoAnswerNumberOfRings",
                int,
                is_required=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse17(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest17()``.


    Attributes:
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
        incoming_call_to_user_alias_mode: incomingCallToUserAliasMode
    """

    __slots__ = [
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "max_no_answer_number_of_rings",
        "incoming_call_to_user_alias_mode",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
            E(
                "max_no_answer_number_of_rings",
                "maxNoAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "incoming_call_to_user_alias_mode",
                "incomingCallToUserAliasMode",
                str,
                is_required=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse17sp3(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest17sp3()``.


    Attributes:
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
        incoming_call_to_user_alias_mode: incomingCallToUserAliasMode
        bypass_termination_loop_detection: bypassTerminationLoopDetection
    """

    __slots__ = [
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "max_no_answer_number_of_rings",
        "incoming_call_to_user_alias_mode",
        "bypass_termination_loop_detection",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
            E(
                "max_no_answer_number_of_rings",
                "maxNoAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "incoming_call_to_user_alias_mode",
                "incomingCallToUserAliasMode",
                str,
                is_required=True,
            ),
            E(
                "bypass_termination_loop_detection",
                "bypassTerminationLoopDetection",
                bool,
                is_required=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse17sp4(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest17sp4()``.


    Attributes:
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
        incoming_call_to_user_alias_mode: incomingCallToUserAliasMode
        bypass_termination_loop_detection: bypassTerminationLoopDetection
        honor_clid_blocking_for_emergency_calls: honorCLIDBlockingForEmergencyCalls
    """

    __slots__ = [
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "max_no_answer_number_of_rings",
        "incoming_call_to_user_alias_mode",
        "bypass_termination_loop_detection",
        "honor_clid_blocking_for_emergency_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
            E(
                "max_no_answer_number_of_rings",
                "maxNoAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "incoming_call_to_user_alias_mode",
                "incomingCallToUserAliasMode",
                str,
                is_required=True,
            ),
            E(
                "bypass_termination_loop_detection",
                "bypassTerminationLoopDetection",
                bool,
                is_required=True,
            ),
            E(
                "honor_clid_blocking_for_emergency_calls",
                "honorCLIDBlockingForEmergencyCalls",
                bool,
                is_required=True,
            ),
        )


class SystemSubscriberGetCallProcessingParametersResponse18sp1(OCIResponse):
    """
    Response to the ``SystemSubscriberGetCallProcessingParametersRequest18sp1()``.


    Attributes:
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
        incoming_call_to_user_alias_mode: incomingCallToUserAliasMode
        bypass_termination_loop_detection: bypassTerminationLoopDetection
        honor_clid_blocking_for_emergency_calls: honorCLIDBlockingForEmergencyCalls
        use_unicode_identity_name: useUnicodeIdentityName
    """

    __slots__ = [
        "is_extended_calling_line_id_active",
        "is_ring_time_out_active",
        "ring_timeout_seconds",
        "allow_emergency_remote_office_originations",
        "max_no_answer_number_of_rings",
        "incoming_call_to_user_alias_mode",
        "bypass_termination_loop_detection",
        "honor_clid_blocking_for_emergency_calls",
        "use_unicode_identity_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
                is_required=True,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool, is_required=True),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int, is_required=True),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
                is_required=True,
            ),
            E(
                "max_no_answer_number_of_rings",
                "maxNoAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "incoming_call_to_user_alias_mode",
                "incomingCallToUserAliasMode",
                str,
                is_required=True,
            ),
            E(
                "bypass_termination_loop_detection",
                "bypassTerminationLoopDetection",
                bool,
                is_required=True,
            ),
            E(
                "honor_clid_blocking_for_emergency_calls",
                "honorCLIDBlockingForEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "use_unicode_identity_name",
                "useUnicodeIdentityName",
                bool,
                is_required=True,
            ),
        )


class SystemSubscriberGetLoginParametersResponse(OCIResponse):
    """
    Response to the ``SystemSubscriberGetLoginParametersRequest()``.


    Attributes:
        max_failed_login_attempts: maxFailedLoginAttempts
        min_login_id_length: minLoginIdLength
    """

    __slots__ = [
        "max_failed_login_attempts",
        "min_login_id_length",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "max_failed_login_attempts",
                "maxFailedLoginAttempts",
                int,
                is_required=True,
            ),
            E("min_login_id_length", "minLoginIdLength", int, is_required=True),
        )


class SystemSubscriberGetProvisioningParametersResponse(OCIResponse):
    """
    Response to the ``SystemSubscriberGetProvisioningParametersRequest()``.


    Attributes:
        configurable_clid_normalization: configurableCLIDNormalization
    """

    __slots__ = [
        "configurable_clid_normalization",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "configurable_clid_normalization",
                "configurableCLIDNormalization",
                bool,
                is_required=True,
            ),
        )


class SystemSystemServiceCallProcessingPoliciesGetResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceCallProcessingPoliciesGetRequest()``.


    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
    """

    __slots__ = [
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
        )


class SystemSystemServiceDnGetAvailableListResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceDnGetAvailableListRequest()``.

    Contains a list of available DNs not yet assigned to any instance of system service.

    Attributes:
        available_dn: availableDn
    """

    __slots__ = [
        "available_dn",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("available_dn", "availableDn", str, is_array=True),
        )


class SystemSystemServiceDnGetSummaryListResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceDnGetSummaryListRequest()``.

    The column headings are "Phone Numbers" and "Assigned". The possible values for
    "Assigned" are true, false.

    Attributes:
        dn_summary_table: dnSummaryTable
    """

    __slots__ = [
        "dn_summary_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_summary_table",
                "dnSummaryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSystemServiceDnGetUsageListResponse(OCIResponse):
    """
    Response to ``SystemSystemServiceDnGetUsageListRequest()``.

    The table columns are: "Phone Number", "Id", "Name", and "System Service". The
    possible values for "System Service" is "System Voice Portal".

    Attributes:
        dn_utilization_table: dnUtilizationTable
    """

    __slots__ = [
        "dn_utilization_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_utilization_table",
                "dnUtilizationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSystemVoicePortalGetListResponse(OCIResponse):
    """
    Response to ``SystemSystemVoicePortalGetListRequest()``.

    The column headings are "Default", "System Voice Portal Id", "Name", "Network Voice
    Portal Number", "System Voice Portal Number" and "Language". The possible values for
    "Default" are true, false.

    Attributes:
        system_voice_portals_table: systemVoicePortalsTable
    """

    __slots__ = [
        "system_voice_portals_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "system_voice_portals_table",
                "systemVoicePortalsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemSystemVoicePortalGetResponse(OCIResponse):
    """
    Response to ``SystemSystemVoicePortalGetRequest()``.


    Attributes:
        name: name
        calling_line_id_name: callingLineIdName
        language: language
        time_zone: timeZone
        phone_number: phoneNumber
        public_user_identity: publicUserIdentity
        network_voice_portal_number: networkVoicePortalNumber
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        is_default: isDefault
        use_voice_portal_default_greeting: useVoicePortalDefaultGreeting
        voice_portal_greeting_file_description: voicePortalGreetingFileDescription
        voice_portal_greeting_media_file_type: voicePortalGreetingMediaFileType
        use_voice_messaging_default_greeting: useVoiceMessagingDefaultGreeting
        voice_messaging_greeting_file_description: voiceMessagingGreetingFileDescription
        voice_messaging_greeting_media_file_type: voiceMessagingGreetingMediaFileType
    """

    __slots__ = [
        "name",
        "calling_line_id_name",
        "language",
        "time_zone",
        "phone_number",
        "public_user_identity",
        "network_voice_portal_number",
        "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
        "use_voice_portal_wizard",
        "is_default",
        "use_voice_portal_default_greeting",
        "voice_portal_greeting_file_description",
        "voice_portal_greeting_media_file_type",
        "use_voice_messaging_default_greeting",
        "voice_messaging_greeting_file_description",
        "voice_messaging_greeting_media_file_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("calling_line_id_name", "callingLineIdName", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("phone_number", "phoneNumber", str),
            E("public_user_identity", "publicUserIdentity", str),
            E("network_voice_portal_number", "networkVoicePortalNumber", str),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
                is_required=True,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
            E("is_default", "isDefault", bool, is_required=True),
            E(
                "use_voice_portal_default_greeting",
                "useVoicePortalDefaultGreeting",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_greeting_file_description",
                "voicePortalGreetingFileDescription",
                str,
            ),
            E(
                "voice_portal_greeting_media_file_type",
                "voicePortalGreetingMediaFileType",
                str,
            ),
            E(
                "use_voice_messaging_default_greeting",
                "useVoiceMessagingDefaultGreeting",
                bool,
                is_required=True,
            ),
            E(
                "voice_messaging_greeting_file_description",
                "voiceMessagingGreetingFileDescription",
                str,
            ),
            E(
                "voice_messaging_greeting_media_file_type",
                "voiceMessagingGreetingMediaFileType",
                str,
            ),
        )


class SystemThirdPartyIMPGetResponse(OCIResponse):
    """
    Response to the ``SystemThirdPartyIMPGetRequest()``.

    The response contains the system Third-Party IMP service attributes.  Replaced by
    ``SystemThirdPartyIMPGetResponse()``.

    Attributes:
        service_net_address: serviceNetAddress
        service_port: servicePort
    """

    __slots__ = [
        "service_net_address",
        "service_port",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_net_address", "serviceNetAddress", str),
            E("service_port", "servicePort", int),
        )


class SystemThirdPartyIMPGetResponse19(OCIResponse):
    """
    Response to the ``SystemThirdPartyIMPGetRequest19()``.

    The response contains the system Third-Party IMP service attributes.  The following
    elements are only used in AS data mode: boshURL

    Attributes:
        service_net_address: serviceNetAddress
        service_port: servicePort
        bosh_url: boshURL
    """

    __slots__ = [
        "service_net_address",
        "service_port",
        "bosh_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_net_address", "serviceNetAddress", str),
            E("service_port", "servicePort", int),
            E("bosh_url", "boshURL", str),
        )


class SystemThirdPartyVoiceMailSupportGetDnListResponse(OCIResponse):
    """
    Response to ``SystemThirdPartyVoiceMailSupportGetDnListRequest()``.

    Contains a table with a row for each ThirdPartyVoiceMailSupport User DN and column
    headings: "Phone Number", "Description"

    Attributes:
        third_party_voice_mail_support_table: thirdPartyVoiceMailSupportTable
    """

    __slots__ = [
        "third_party_voice_mail_support_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "third_party_voice_mail_support_table",
                "thirdPartyVoiceMailSupportTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemThirdPartyVoiceMailSupportGetResponse(OCIResponse):
    """
    Response to ``SystemThirdPartyVoiceMailSupportGetRequest()``.


    Attributes:
        override_alt_caller_id_for_vm_retrieval: overrideAltCallerIdForVMRetrieval
    """

    __slots__ = [
        "override_alt_caller_id_for_vm_retrieval",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "override_alt_caller_id_for_vm_retrieval",
                "overrideAltCallerIdForVMRetrieval",
                bool,
                is_required=True,
            ),
        )


class SystemThirdPartyVoiceMailSupportGetResponse17sp4(OCIResponse):
    """
    Response to ``SystemThirdPartyVoiceMailSupportGetRequest17sp4()``.


    Attributes:
        override_alt_caller_id_for_vm_retrieval: overrideAltCallerIdForVMRetrieval
        strip_diversion_on_vm_destination_retrieval:
            stripDiversionOnVMDestinationRetrieval
    """

    __slots__ = [
        "override_alt_caller_id_for_vm_retrieval",
        "strip_diversion_on_vm_destination_retrieval",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "override_alt_caller_id_for_vm_retrieval",
                "overrideAltCallerIdForVMRetrieval",
                bool,
                is_required=True,
            ),
            E(
                "strip_diversion_on_vm_destination_retrieval",
                "stripDiversionOnVMDestinationRetrieval",
                bool,
                is_required=True,
            ),
        )


class SystemTimeScheduleGetListResponse(OCIResponse):
    """
    Response to the ``SystemTimeScheduleGetListRequest()``.

    The response contains all the system time schedule names.

    Attributes:
        time_schedule: timeSchedule
    """

    __slots__ = [
        "time_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", str, is_array=True),
        )


class SystemTimeZoneGetListResponse(OCIResponse):
    """
    Response to ``SystemTimeZoneGetListRequest()``.

    Contains a 2 column table with column headings 'Key' and 'Display Name' and a row for
    each time zone.  Replaced by ``SystemTimeZoneGetListResponse20()``

    Attributes:
        time_zone_table: timeZoneTable
    """

    __slots__ = [
        "time_zone_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "time_zone_table",
                "timeZoneTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTimeZoneGetListResponse20(OCIResponse):
    """
    Response to ``SystemTimeZoneGetListRequest20()``.

    Contains the configured time zone of the server processing the request and contains a
    2 column table with column headings 'Key' and 'Display Name' and a row for each time
    zone.

    Attributes:
        server_time_zone: serverTimeZone
        time_zone_table: timeZoneTable
    """

    __slots__ = [
        "server_time_zone",
        "time_zone_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_time_zone", "serverTimeZone", str, is_required=True),
            E(
                "time_zone_table",
                "timeZoneTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTreatmentMappingAccessSIPStatusGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingAccessSIPStatusGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "SIP Status Code",
    "Treatment Id".

    Attributes:
        treatment_mapping_table: treatmentMappingTable
    """

    __slots__ = [
        "treatment_mapping_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_mapping_table",
                "treatmentMappingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTreatmentMappingCallBlockingServiceGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingCallBlockingServiceGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "Service",
    "Treatment Id".

    Attributes:
        treatment_mapping_table: treatmentMappingTable
    """

    __slots__ = [
        "treatment_mapping_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_mapping_table",
                "treatmentMappingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTreatmentMappingCallBlockingServiceGetListResponse19sp1(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingCallBlockingServiceGetListRequest19sp1()``.

    Contains a table with one row per mapping.  The table columns are: "Service",
    "Treatment Id".

    Attributes:
        treatment_mapping_table: treatmentMappingTable
    """

    __slots__ = [
        "treatment_mapping_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_mapping_table",
                "treatmentMappingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTreatmentMappingInternalReleaseCauseGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingInternalReleaseCauseGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "Internal Release
    Cause", "Treatment Id".

    Attributes:
        treatment_mapping_table: treatmentMappingTable
    """

    __slots__ = [
        "treatment_mapping_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_mapping_table",
                "treatmentMappingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTreatmentMappingNetworkSIPStatusGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingNetworkSIPStatusGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "SIP Status Code",
    "Treatment Id".

    Attributes:
        treatment_mapping_table: treatmentMappingTable
    """

    __slots__ = [
        "treatment_mapping_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_mapping_table",
                "treatmentMappingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTreatmentMappingNetworkServerTreatmentGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingNetworkServerTreatmentGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "NS Treatment",
    "Treatment Id".

    Attributes:
        treatment_mapping_table: treatmentMappingTable
    """

    __slots__ = [
        "treatment_mapping_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_mapping_table",
                "treatmentMappingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTreatmentMappingQ850CauseGetListResponse(OCIResponse):
    """
    Response to a ``SystemTreatmentMappingQ850CauseGetListRequest()``.

    Contains a table with one row per mapping.  The table columns are: "Q850 Cause Value",
    "Treatment Id".

    Attributes:
        treatment_mapping_table: treatmentMappingTable
    """

    __slots__ = [
        "treatment_mapping_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treatment_mapping_table",
                "treatmentMappingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTrunkGroupGetResponse(OCIResponse):
    """
    Response to ``SystemTrunkGroupGetRequest()``.

    Replaced by ``SystemTrunkGroupGetResponse19sp1()``.

    Attributes:
        enforce_clid_service_assignment_for_pilot_user:
            enforceCLIDServiceAssignmentForPilotUser
        terminate_unreachable_trigger_detection_on_receipt_of18x:
            terminateUnreachableTriggerDetectionOnReceiptOf18x
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        enforce_out_of_dialog_pbx_redirection_policies:
            enforceOutOfDialogPBXRedirectionPolicies
        unscreened_redirection_handling: unscreenedRedirectionHandling
        enable_holdover_of_highwater_call_counts: enableHoldoverOfHighwaterCallCounts
        holdover_period: holdoverPeriod
        time_zone_offset_minutes: timeZoneOffsetMinutes
    """

    __slots__ = [
        "enforce_clid_service_assignment_for_pilot_user",
        "terminate_unreachable_trigger_detection_on_receipt_of18x",
        "pilot_user_calling_line_asserted_identity_policy",
        "enforce_out_of_dialog_pbx_redirection_policies",
        "unscreened_redirection_handling",
        "enable_holdover_of_highwater_call_counts",
        "holdover_period",
        "time_zone_offset_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enforce_clid_service_assignment_for_pilot_user",
                "enforceCLIDServiceAssignmentForPilotUser",
                bool,
                is_required=True,
            ),
            E(
                "terminate_unreachable_trigger_detection_on_receipt_of18x",
                "terminateUnreachableTriggerDetectionOnReceiptOf18x",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "enforce_out_of_dialog_pbx_redirection_policies",
                "enforceOutOfDialogPBXRedirectionPolicies",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_redirection_handling",
                "unscreenedRedirectionHandling",
                str,
                is_required=True,
            ),
            E(
                "enable_holdover_of_highwater_call_counts",
                "enableHoldoverOfHighwaterCallCounts",
                bool,
                is_required=True,
            ),
            E("holdover_period", "holdoverPeriod", int, is_required=True),
            E(
                "time_zone_offset_minutes",
                "timeZoneOffsetMinutes",
                int,
                is_required=True,
            ),
        )


class SystemTrunkGroupGetResponse19sp1(OCIResponse):
    """
    Response to ``SystemTrunkGroupGetRequest19sp1()``.


    Attributes:
        enforce_clid_service_assignment_for_pilot_user:
            enforceCLIDServiceAssignmentForPilotUser
        terminate_unreachable_trigger_detection_on_receipt_of18x:
            terminateUnreachableTriggerDetectionOnReceiptOf18x
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        enforce_out_of_dialog_pbx_redirection_policies:
            enforceOutOfDialogPBXRedirectionPolicies
        unscreened_redirection_handling: unscreenedRedirectionHandling
        enable_holdover_of_highwater_call_counts: enableHoldoverOfHighwaterCallCounts
        holdover_period: holdoverPeriod
        time_zone_offset_minutes: timeZoneOffsetMinutes
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
    """

    __slots__ = [
        "enforce_clid_service_assignment_for_pilot_user",
        "terminate_unreachable_trigger_detection_on_receipt_of18x",
        "pilot_user_calling_line_asserted_identity_policy",
        "enforce_out_of_dialog_pbx_redirection_policies",
        "unscreened_redirection_handling",
        "enable_holdover_of_highwater_call_counts",
        "holdover_period",
        "time_zone_offset_minutes",
        "clid_source_for_screened_calls_policy",
        "user_lookup_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enforce_clid_service_assignment_for_pilot_user",
                "enforceCLIDServiceAssignmentForPilotUser",
                bool,
                is_required=True,
            ),
            E(
                "terminate_unreachable_trigger_detection_on_receipt_of18x",
                "terminateUnreachableTriggerDetectionOnReceiptOf18x",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "enforce_out_of_dialog_pbx_redirection_policies",
                "enforceOutOfDialogPBXRedirectionPolicies",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_redirection_handling",
                "unscreenedRedirectionHandling",
                str,
                is_required=True,
            ),
            E(
                "enable_holdover_of_highwater_call_counts",
                "enableHoldoverOfHighwaterCallCounts",
                bool,
                is_required=True,
            ),
            E("holdover_period", "holdoverPeriod", int, is_required=True),
            E(
                "time_zone_offset_minutes",
                "timeZoneOffsetMinutes",
                int,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
        )


class SystemTrunkGroupGetResponse21(OCIResponse):
    """
    Response to ``SystemTrunkGroupGetRequest21()``.

    Following attributes are only used in IMS mode: implicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy

    Attributes:
        enforce_clid_service_assignment_for_pilot_user:
            enforceCLIDServiceAssignmentForPilotUser
        terminate_unreachable_trigger_detection_on_receipt_of18x:
            terminateUnreachableTriggerDetectionOnReceiptOf18x
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        enforce_out_of_dialog_pbx_redirection_policies:
            enforceOutOfDialogPBXRedirectionPolicies
        unscreened_redirection_handling: unscreenedRedirectionHandling
        enable_holdover_of_highwater_call_counts: enableHoldoverOfHighwaterCallCounts
        holdover_period: holdoverPeriod
        time_zone_offset_minutes: timeZoneOffsetMinutes
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        out_of_dialog_pbx_redirection_clid_mapping: outOfDialogPBXRedirectionCLIDMapping
        enforce_out_of_dialog_pbx_redirection_trunk_group_capacity:
            enforceOutOfDialogPBXRedirectionTrunkGroupCapacity
        implicit_registration_set_support_policy: implicitRegistrationSetSupportPolicy
        sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            sipIdentityForPilotAndProxyTrunkModesPolicy
        support_connected_identity_policy: supportConnectedIdentityPolicy
    """

    __slots__ = [
        "enforce_clid_service_assignment_for_pilot_user",
        "terminate_unreachable_trigger_detection_on_receipt_of18x",
        "pilot_user_calling_line_asserted_identity_policy",
        "enforce_out_of_dialog_pbx_redirection_policies",
        "unscreened_redirection_handling",
        "enable_holdover_of_highwater_call_counts",
        "holdover_period",
        "time_zone_offset_minutes",
        "clid_source_for_screened_calls_policy",
        "user_lookup_policy",
        "out_of_dialog_pbx_redirection_clid_mapping",
        "enforce_out_of_dialog_pbx_redirection_trunk_group_capacity",
        "implicit_registration_set_support_policy",
        "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
        "support_connected_identity_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enforce_clid_service_assignment_for_pilot_user",
                "enforceCLIDServiceAssignmentForPilotUser",
                bool,
                is_required=True,
            ),
            E(
                "terminate_unreachable_trigger_detection_on_receipt_of18x",
                "terminateUnreachableTriggerDetectionOnReceiptOf18x",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "enforce_out_of_dialog_pbx_redirection_policies",
                "enforceOutOfDialogPBXRedirectionPolicies",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_redirection_handling",
                "unscreenedRedirectionHandling",
                str,
                is_required=True,
            ),
            E(
                "enable_holdover_of_highwater_call_counts",
                "enableHoldoverOfHighwaterCallCounts",
                bool,
                is_required=True,
            ),
            E("holdover_period", "holdoverPeriod", int, is_required=True),
            E(
                "time_zone_offset_minutes",
                "timeZoneOffsetMinutes",
                int,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
            E(
                "out_of_dialog_pbx_redirection_clid_mapping",
                "outOfDialogPBXRedirectionCLIDMapping",
                str,
                is_required=True,
            ),
            E(
                "enforce_out_of_dialog_pbx_redirection_trunk_group_capacity",
                "enforceOutOfDialogPBXRedirectionTrunkGroupCapacity",
                bool,
                is_required=True,
            ),
            E(
                "implicit_registration_set_support_policy",
                "implicitRegistrationSetSupportPolicy",
                str,
                is_required=True,
            ),
            E(
                "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "sipIdentityForPilotAndProxyTrunkModesPolicy",
                str,
                is_required=True,
            ),
            E(
                "support_connected_identity_policy",
                "supportConnectedIdentityPolicy",
                str,
                is_required=True,
            ),
        )


class SystemTrunkGroupOptionsMessageResponseStatusCodeGetListResponse(OCIResponse):
    """
    Response to the ``SystemTrunkGroupOptionsMessageResponseStatusCodeGetListRequest()``.

    The response contains of the list of system level successful SIP OPTIONS message
    respoonse status codes.

    Attributes:
        status_code: statusCode
    """

    __slots__ = [
        "status_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status_code", "statusCode", str, is_array=True),
        )


class SystemTrunkGroupUserCreationTaskGetListResponse(OCIResponse):
    """
    Response to ``SystemTrunkGroupUserCreationTaskGetListRequest()``.

    Contains a table with a row for each user creation task and column headings : "Service
    User Id", "Group Id", "Organization Id", "Organization Type", "Name", "Status", "Users
    Created", "Total Users To Create", "Error Count". The "Organization Id" column is
    populated with either a service provider Id or an enterprise Id.  The "Organization
    Type" column is populated with one of the enumerated strings defined in the
    OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.

    Attributes:
        task_table: taskTable
    """

    __slots__ = [
        "task_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "task_table",
                "taskTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTrunkGroupUserCreationTaskGetListResponse14sp4(OCIResponse):
    """
    Response to ``SystemTrunkGroupUserCreationTaskGetListRequest14sp4()``.

    Contains a table with a row for each user creation task and column headings : "Trunk
    Group Name", "Group Id", "Organization Id", "Organization Type", "Name", "Status",
    "Users Created", "Total Users To Create", "Error Count". The "Organization Id" column
    is populated with either a service provider Id or an enterprise Id.  The "Organization
    Type" column is populated with one of the enumerated strings defined in the
    OrganizationType OCI data type.  Please see OCISchemaDataTypes.xsd for details on
    OrganizationType.

    Attributes:
        task_table: taskTable
    """

    __slots__ = [
        "task_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "task_table",
                "taskTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemTwoStageDialingGetDnListResponse(OCIResponse):
    """
    Response to ``SystemTwoStageDialingGetDnListRequest()``.

    The Two Stage Dialing DN List table column headings are: "Phone Number",
    "Description".

    Attributes:
        phone_number_table: phoneNumberTable
    """

    __slots__ = [
        "phone_number_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "phone_number_table",
                "phoneNumberTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemVerifyTranslationAndRoutingResponse(OCIResponse):
    """
    Represents a Verify Translation and Routing Test Call Result.


    Attributes:
        result: Result
    """

    __slots__ = [
        "result",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("result", "Result", str, is_required=True),
        )


class SystemVideoServerGetListResponse(OCIResponse):
    """
    Response to ``SystemVideoServerGetListRequest()``.

    The Video Server table column headings are: "Net Address", "Port", "Transport",
    "Description". Transport types: udp, tcp, unspecified

    Attributes:
        video_server_table: videoServerTable
    """

    __slots__ = [
        "video_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "video_server_table",
                "videoServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemVideoServerParametersGetResponse(OCIResponse):
    """
    Response to ``SystemVideoServerParametersGetRequest()``.

    Contains a list of system video server parameters.

    Attributes:
        video_server_response_timer_milliseconds: videoServerResponseTimerMilliseconds
        video_server_selection_route_timer_milliseconds:
            videoServerSelectionRouteTimerMilliseconds
        use_static_video_server_device: useStaticVideoServerDevice
    """

    __slots__ = [
        "video_server_response_timer_milliseconds",
        "video_server_selection_route_timer_milliseconds",
        "use_static_video_server_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "video_server_response_timer_milliseconds",
                "videoServerResponseTimerMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "video_server_selection_route_timer_milliseconds",
                "videoServerSelectionRouteTimerMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "use_static_video_server_device",
                "useStaticVideoServerDevice",
                bool,
                is_required=True,
            ),
        )


class SystemVirtualOnNetCallTypeGetListResponse(OCIResponse):
    """
    Response to ``SystemVirtualOnNetCallTypeGetListRequest()``.

    Contains a table with column headings: "Virtual On-Net Call Type Name", "Virtual On-
    Net Call Type CDR Value" in a row for each Virtual On-Net Call Type.

    Attributes:
        virtual_on_net_call_type_table: virtualOnNetCallTypeTable
    """

    __slots__ = [
        "virtual_on_net_call_type_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "virtual_on_net_call_type_table",
                "virtualOnNetCallTypeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemVoiceMessageSummaryUpdateGetResponse(OCIResponse):
    """
    Response to ``SystemVoiceMessageSummaryUpdateGetRequest()``.


    Attributes:
        send_saved_and_urgent_mwi_on_notification: sendSavedAndUrgentMWIOnNotification
        send_message_summary_update_on_register: sendMessageSummaryUpdateOnRegister
        min_time_between_mwi_on_register: minTimeBetweenMWIOnRegister
    """

    __slots__ = [
        "send_saved_and_urgent_mwi_on_notification",
        "send_message_summary_update_on_register",
        "min_time_between_mwi_on_register",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "send_saved_and_urgent_mwi_on_notification",
                "sendSavedAndUrgentMWIOnNotification",
                bool,
                is_required=True,
            ),
            E(
                "send_message_summary_update_on_register",
                "sendMessageSummaryUpdateOnRegister",
                bool,
                is_required=True,
            ),
            E(
                "min_time_between_mwi_on_register",
                "minTimeBetweenMWIOnRegister",
                int,
                is_required=True,
            ),
        )


class SystemVoiceMessagingGroupGetPasscodeRulesResponse14(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetPasscodeRulesRequest14()``.

    Contains the system voice portal passcode rules setting.

    Replaced By: ``SystemPortalPasscodeRulesGetResponse()``

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        default_password: defaultPassword
    """

    __slots__ = [
        "disallow_repeated_digits",
        "disallow_user_number",
        "disallow_reversed_user_number",
        "disallow_old_passcode",
        "disallow_reversed_old_passcode",
        "min_code_length",
        "max_code_length",
        "disable_login_after_max_failed_login_attempts",
        "max_failed_login_attempts",
        "expire_password",
        "passcode_expires_days",
        "send_login_disabled_notify_email",
        "login_disabled_notify_email_address",
        "default_password",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disallow_repeated_digits",
                "disallowRepeatedDigits",
                bool,
                is_required=True,
            ),
            E("disallow_user_number", "disallowUserNumber", bool, is_required=True),
            E(
                "disallow_reversed_user_number",
                "disallowReversedUserNumber",
                bool,
                is_required=True,
            ),
            E("disallow_old_passcode", "disallowOldPasscode", bool, is_required=True),
            E(
                "disallow_reversed_old_passcode",
                "disallowReversedOldPasscode",
                bool,
                is_required=True,
            ),
            E("min_code_length", "minCodeLength", int, is_required=True),
            E("max_code_length", "maxCodeLength", int, is_required=True),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
                is_required=True,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool, is_required=True),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E(
                "send_login_disabled_notify_email",
                "sendLoginDisabledNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("default_password", "defaultPassword", str, is_required=True),
        )


class SystemVoiceMessagingGroupGetResponse14(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest14()``.


    Attributes:
        real_delete_for_imap: realDeleteForImap
        use_dn_in_mail_body: useDnInMailBody
        use_short_subject_line: useShortSubjectLine
        max_greeting_length_minutes: maxGreetingLengthMinutes
        max_message_length_minutes: maxMessageLengthMinutes
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        default_delivery_from_address: defaultDeliveryFromAddress
        default_notification_from_address: defaultNotificationFromAddress
        default_voice_portal_lockout_from_address: defaultVoicePortalLockoutFromAddress
        use_outgoing_mwi_on_smdi: useOutgoingMWIOnSMDI
        mwi_delay_in_seconds: mwiDelayInSeconds
        voice_portal_scope: voicePortalScope
        enterprise_voice_portal_licensed: enterpriseVoicePortalLicensed
        network_wide_messaging: networkWideMessaging
        use_external_routing: useExternalRouting
        default_external_routing_address: defaultExternalRoutingAddress
    """

    __slots__ = [
        "real_delete_for_imap",
        "use_dn_in_mail_body",
        "use_short_subject_line",
        "max_greeting_length_minutes",
        "max_message_length_minutes",
        "max_mailbox_length_minutes",
        "does_message_age",
        "hold_period_days",
        "mail_server_net_address",
        "mail_server_protocol",
        "default_delivery_from_address",
        "default_notification_from_address",
        "default_voice_portal_lockout_from_address",
        "use_outgoing_mwi_on_smdi",
        "mwi_delay_in_seconds",
        "voice_portal_scope",
        "enterprise_voice_portal_licensed",
        "network_wide_messaging",
        "use_external_routing",
        "default_external_routing_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
            E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
            E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
            E(
                "max_greeting_length_minutes",
                "maxGreetingLengthMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_message_length_minutes",
                "maxMessageLengthMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_mailbox_length_minutes",
                "maxMailboxLengthMinutes",
                int,
                is_required=True,
            ),
            E("does_message_age", "doesMessageAge", bool, is_required=True),
            E("hold_period_days", "holdPeriodDays", int, is_required=True),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
            E(
                "default_delivery_from_address",
                "defaultDeliveryFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_notification_from_address",
                "defaultNotificationFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_voice_portal_lockout_from_address",
                "defaultVoicePortalLockoutFromAddress",
                str,
                is_required=True,
            ),
            E(
                "use_outgoing_mwi_on_smdi",
                "useOutgoingMWIOnSMDI",
                bool,
                is_required=True,
            ),
            E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
            E("voice_portal_scope", "voicePortalScope", str, is_required=True),
            E(
                "enterprise_voice_portal_licensed",
                "enterpriseVoicePortalLicensed",
                bool,
                is_required=True,
            ),
            E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("default_external_routing_address", "defaultExternalRoutingAddress", str),
        )


class SystemVoiceMessagingGroupGetResponse16(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest16()``.


    Attributes:
        real_delete_for_imap: realDeleteForImap
        use_dn_in_mail_body: useDnInMailBody
        use_short_subject_line: useShortSubjectLine
        max_message_length_minutes: maxMessageLengthMinutes
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        default_delivery_from_address: defaultDeliveryFromAddress
        default_notification_from_address: defaultNotificationFromAddress
        default_voice_portal_lockout_from_address: defaultVoicePortalLockoutFromAddress
        use_outgoing_mwi_on_smdi: useOutgoingMWIOnSMDI
        mwi_delay_in_seconds: mwiDelayInSeconds
        voice_portal_scope: voicePortalScope
        enterprise_voice_portal_licensed: enterpriseVoicePortalLicensed
        network_wide_messaging: networkWideMessaging
        use_external_routing: useExternalRouting
        default_external_routing_address: defaultExternalRoutingAddress
    """

    __slots__ = [
        "real_delete_for_imap",
        "use_dn_in_mail_body",
        "use_short_subject_line",
        "max_message_length_minutes",
        "max_mailbox_length_minutes",
        "does_message_age",
        "hold_period_days",
        "mail_server_net_address",
        "mail_server_protocol",
        "default_delivery_from_address",
        "default_notification_from_address",
        "default_voice_portal_lockout_from_address",
        "use_outgoing_mwi_on_smdi",
        "mwi_delay_in_seconds",
        "voice_portal_scope",
        "enterprise_voice_portal_licensed",
        "network_wide_messaging",
        "use_external_routing",
        "default_external_routing_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
            E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
            E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
            E(
                "max_message_length_minutes",
                "maxMessageLengthMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_mailbox_length_minutes",
                "maxMailboxLengthMinutes",
                int,
                is_required=True,
            ),
            E("does_message_age", "doesMessageAge", bool, is_required=True),
            E("hold_period_days", "holdPeriodDays", int, is_required=True),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
            E(
                "default_delivery_from_address",
                "defaultDeliveryFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_notification_from_address",
                "defaultNotificationFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_voice_portal_lockout_from_address",
                "defaultVoicePortalLockoutFromAddress",
                str,
                is_required=True,
            ),
            E(
                "use_outgoing_mwi_on_smdi",
                "useOutgoingMWIOnSMDI",
                bool,
                is_required=True,
            ),
            E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
            E("voice_portal_scope", "voicePortalScope", str, is_required=True),
            E(
                "enterprise_voice_portal_licensed",
                "enterpriseVoicePortalLicensed",
                bool,
                is_required=True,
            ),
            E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("default_external_routing_address", "defaultExternalRoutingAddress", str),
        )


class SystemVoiceMessagingGroupGetResponse16sp2(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest16sp2()``.

    The following elements are only used in AS data mode: realDeleteForImap
    useDnInMailBody useShortSubjectLine maxMessageLengthMinutes maxMailboxLengthMinutes
    doesMessageAge holdPeriodDays mailServerNetAddress mailServerProtocol
    defaultDeliveryFromAddress defaultNotificationFromAddress useOutgoingMWIOnSMDI
    mwiDelayInSeconds voicePortalScope enterpriseVoicePortalLicensed networkWideMessaging
    useExternalRouting defaultExternalRoutingAddress vmOnlySystem

    Attributes:
        real_delete_for_imap: realDeleteForImap
        use_dn_in_mail_body: useDnInMailBody
        use_short_subject_line: useShortSubjectLine
        max_message_length_minutes: maxMessageLengthMinutes
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        default_delivery_from_address: defaultDeliveryFromAddress
        default_notification_from_address: defaultNotificationFromAddress
        default_voice_portal_lockout_from_address: defaultVoicePortalLockoutFromAddress
        use_outgoing_mwi_on_smdi: useOutgoingMWIOnSMDI
        mwi_delay_in_seconds: mwiDelayInSeconds
        voice_portal_scope: voicePortalScope
        enterprise_voice_portal_licensed: enterpriseVoicePortalLicensed
        network_wide_messaging: networkWideMessaging
        use_external_routing: useExternalRouting
        default_external_routing_address: defaultExternalRoutingAddress
        vm_only_system: vmOnlySystem
    """

    __slots__ = [
        "real_delete_for_imap",
        "use_dn_in_mail_body",
        "use_short_subject_line",
        "max_message_length_minutes",
        "max_mailbox_length_minutes",
        "does_message_age",
        "hold_period_days",
        "mail_server_net_address",
        "mail_server_protocol",
        "default_delivery_from_address",
        "default_notification_from_address",
        "default_voice_portal_lockout_from_address",
        "use_outgoing_mwi_on_smdi",
        "mwi_delay_in_seconds",
        "voice_portal_scope",
        "enterprise_voice_portal_licensed",
        "network_wide_messaging",
        "use_external_routing",
        "default_external_routing_address",
        "vm_only_system",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
            E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
            E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
            E(
                "max_message_length_minutes",
                "maxMessageLengthMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_mailbox_length_minutes",
                "maxMailboxLengthMinutes",
                int,
                is_required=True,
            ),
            E("does_message_age", "doesMessageAge", bool, is_required=True),
            E("hold_period_days", "holdPeriodDays", int, is_required=True),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
            E(
                "default_delivery_from_address",
                "defaultDeliveryFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_notification_from_address",
                "defaultNotificationFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_voice_portal_lockout_from_address",
                "defaultVoicePortalLockoutFromAddress",
                str,
                is_required=True,
            ),
            E(
                "use_outgoing_mwi_on_smdi",
                "useOutgoingMWIOnSMDI",
                bool,
                is_required=True,
            ),
            E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
            E("voice_portal_scope", "voicePortalScope", str, is_required=True),
            E(
                "enterprise_voice_portal_licensed",
                "enterpriseVoicePortalLicensed",
                bool,
                is_required=True,
            ),
            E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("default_external_routing_address", "defaultExternalRoutingAddress", str),
            E("vm_only_system", "vmOnlySystem", bool, is_required=True),
        )


class SystemVoiceMessagingGroupGetResponse20(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest20()``.

    The following elements are only used in AS data mode: realDeleteForImap
    useDnInMailBody useShortSubjectLine maxMessageLengthMinutes maxMailboxLengthMinutes
    doesMessageAge holdPeriodDays mailServerNetAddress mailServerProtocol
    defaultDeliveryFromAddress defaultNotificationFromAddress useOutgoingMWIOnSMDI
    mwiDelayInSeconds voicePortalScope enterpriseVoicePortalLicensed networkWideMessaging
    useExternalRouting defaultExternalRoutingAddress vmOnlySystem
    clientInitiatedMailServerSessionTimeoutMinutes Replaced by:
    ``SystemVoiceMessagingGroupGetResponse21()``

    Attributes:
        real_delete_for_imap: realDeleteForImap
        use_dn_in_mail_body: useDnInMailBody
        use_short_subject_line: useShortSubjectLine
        max_message_length_minutes: maxMessageLengthMinutes
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        default_delivery_from_address: defaultDeliveryFromAddress
        default_notification_from_address: defaultNotificationFromAddress
        default_voice_portal_lockout_from_address: defaultVoicePortalLockoutFromAddress
        use_outgoing_mwi_on_smdi: useOutgoingMWIOnSMDI
        mwi_delay_in_seconds: mwiDelayInSeconds
        voice_portal_scope: voicePortalScope
        enterprise_voice_portal_licensed: enterpriseVoicePortalLicensed
        network_wide_messaging: networkWideMessaging
        use_external_routing: useExternalRouting
        default_external_routing_address: defaultExternalRoutingAddress
        vm_only_system: vmOnlySystem
        client_initiated_mail_server_session_timeout_minutes:
            clientInitiatedMailServerSessionTimeoutMinutes
    """

    __slots__ = [
        "real_delete_for_imap",
        "use_dn_in_mail_body",
        "use_short_subject_line",
        "max_message_length_minutes",
        "max_mailbox_length_minutes",
        "does_message_age",
        "hold_period_days",
        "mail_server_net_address",
        "mail_server_protocol",
        "default_delivery_from_address",
        "default_notification_from_address",
        "default_voice_portal_lockout_from_address",
        "use_outgoing_mwi_on_smdi",
        "mwi_delay_in_seconds",
        "voice_portal_scope",
        "enterprise_voice_portal_licensed",
        "network_wide_messaging",
        "use_external_routing",
        "default_external_routing_address",
        "vm_only_system",
        "client_initiated_mail_server_session_timeout_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
            E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
            E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
            E(
                "max_message_length_minutes",
                "maxMessageLengthMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_mailbox_length_minutes",
                "maxMailboxLengthMinutes",
                int,
                is_required=True,
            ),
            E("does_message_age", "doesMessageAge", bool, is_required=True),
            E("hold_period_days", "holdPeriodDays", int, is_required=True),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
            E(
                "default_delivery_from_address",
                "defaultDeliveryFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_notification_from_address",
                "defaultNotificationFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_voice_portal_lockout_from_address",
                "defaultVoicePortalLockoutFromAddress",
                str,
                is_required=True,
            ),
            E(
                "use_outgoing_mwi_on_smdi",
                "useOutgoingMWIOnSMDI",
                bool,
                is_required=True,
            ),
            E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
            E("voice_portal_scope", "voicePortalScope", str, is_required=True),
            E(
                "enterprise_voice_portal_licensed",
                "enterpriseVoicePortalLicensed",
                bool,
                is_required=True,
            ),
            E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("default_external_routing_address", "defaultExternalRoutingAddress", str),
            E("vm_only_system", "vmOnlySystem", bool, is_required=True),
            E(
                "client_initiated_mail_server_session_timeout_minutes",
                "clientInitiatedMailServerSessionTimeoutMinutes",
                int,
                is_required=True,
            ),
        )


class SystemVoiceMessagingGroupGetResponse21(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetRequest21()``.

    The following elements are only used in AS data mode: realDeleteForImap
    useDnInMailBody useShortSubjectLine maxMessageLengthMinutes maxMailboxLengthMinutes
    doesMessageAge holdPeriodDays mailServerNetAddress mailServerProtocol
    defaultDeliveryFromAddress defaultNotificationFromAddress useOutgoingMWIOnSMDI
    mwiDelayInSeconds voicePortalScope enterpriseVoicePortalLicensed networkWideMessaging
    useExternalRouting defaultExternalRoutingAddress vmOnlySystem
    clientInitiatedMailServerSessionTimeoutMinutes recordingAudioFileFormat

    Attributes:
        real_delete_for_imap: realDeleteForImap
        use_dn_in_mail_body: useDnInMailBody
        use_short_subject_line: useShortSubjectLine
        max_message_length_minutes: maxMessageLengthMinutes
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        default_delivery_from_address: defaultDeliveryFromAddress
        default_notification_from_address: defaultNotificationFromAddress
        default_voice_portal_lockout_from_address: defaultVoicePortalLockoutFromAddress
        use_outgoing_mwi_on_smdi: useOutgoingMWIOnSMDI
        mwi_delay_in_seconds: mwiDelayInSeconds
        voice_portal_scope: voicePortalScope
        enterprise_voice_portal_licensed: enterpriseVoicePortalLicensed
        network_wide_messaging: networkWideMessaging
        use_external_routing: useExternalRouting
        default_external_routing_address: defaultExternalRoutingAddress
        vm_only_system: vmOnlySystem
        client_initiated_mail_server_session_timeout_minutes:
            clientInitiatedMailServerSessionTimeoutMinutes
        recording_audio_file_format: recordingAudioFileFormat
    """

    __slots__ = [
        "real_delete_for_imap",
        "use_dn_in_mail_body",
        "use_short_subject_line",
        "max_message_length_minutes",
        "max_mailbox_length_minutes",
        "does_message_age",
        "hold_period_days",
        "mail_server_net_address",
        "mail_server_protocol",
        "default_delivery_from_address",
        "default_notification_from_address",
        "default_voice_portal_lockout_from_address",
        "use_outgoing_mwi_on_smdi",
        "mwi_delay_in_seconds",
        "voice_portal_scope",
        "enterprise_voice_portal_licensed",
        "network_wide_messaging",
        "use_external_routing",
        "default_external_routing_address",
        "vm_only_system",
        "client_initiated_mail_server_session_timeout_minutes",
        "recording_audio_file_format",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("real_delete_for_imap", "realDeleteForImap", bool, is_required=True),
            E("use_dn_in_mail_body", "useDnInMailBody", bool, is_required=True),
            E("use_short_subject_line", "useShortSubjectLine", bool, is_required=True),
            E(
                "max_message_length_minutes",
                "maxMessageLengthMinutes",
                int,
                is_required=True,
            ),
            E(
                "max_mailbox_length_minutes",
                "maxMailboxLengthMinutes",
                int,
                is_required=True,
            ),
            E("does_message_age", "doesMessageAge", bool, is_required=True),
            E("hold_period_days", "holdPeriodDays", int, is_required=True),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str, is_required=True),
            E(
                "default_delivery_from_address",
                "defaultDeliveryFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_notification_from_address",
                "defaultNotificationFromAddress",
                str,
                is_required=True,
            ),
            E(
                "default_voice_portal_lockout_from_address",
                "defaultVoicePortalLockoutFromAddress",
                str,
                is_required=True,
            ),
            E(
                "use_outgoing_mwi_on_smdi",
                "useOutgoingMWIOnSMDI",
                bool,
                is_required=True,
            ),
            E("mwi_delay_in_seconds", "mwiDelayInSeconds", int, is_required=True),
            E("voice_portal_scope", "voicePortalScope", str, is_required=True),
            E(
                "enterprise_voice_portal_licensed",
                "enterpriseVoicePortalLicensed",
                bool,
                is_required=True,
            ),
            E("network_wide_messaging", "networkWideMessaging", bool, is_required=True),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("default_external_routing_address", "defaultExternalRoutingAddress", str),
            E("vm_only_system", "vmOnlySystem", bool, is_required=True),
            E(
                "client_initiated_mail_server_session_timeout_minutes",
                "clientInitiatedMailServerSessionTimeoutMinutes",
                int,
                is_required=True,
            ),
            E(
                "recording_audio_file_format",
                "recordingAudioFileFormat",
                str,
                is_required=True,
            ),
        )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse14(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest14()``.


    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
    """

    __slots__ = [
        "use_voice_portal_customization",
        "voice_portal_main_menu_keys",
        "voice_messaging_menu_keys",
        "change_busy_or_no_answer_greeting_menu_keys",
        "record_new_greeting_or_personalized_name_menu_keys",
        "delete_all_messages_menu_keys",
        "comm_pilot_express_profile_menu_keys",
        "personalized_name_menu_keys",
        "call_forwarding_options_menu_keys",
        "change_call_forwarding_destination_menu_keys",
        "voice_portal_calling_menu_keys",
        "hoteling_menu_keys",
        "passcode_menu_keys",
        "play_messages_menu_keys",
        "play_message_menu_keys",
        "additional_message_options_menu_keys",
        "forward_or_compose_message_menu_keys",
        "reply_message_menu_keys",
        "send_to_distribution_list_menu_keys",
        "select_distribution_list_menu_keys",
        "review_selected_distribution_list_menu_keys",
        "send_message_to_selected_distribution_list_menu_keys",
        "send_to_all_group_members_menu_keys",
        "send_to_person_menu_keys",
        "change_current_introduction_or_message_or_reply_menu_keys",
        "voice_portal_login_menu_keys",
        "fax_messaging_menu_keys",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_voice_portal_customization",
                "useVoicePortalCustomization",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "hoteling_menu_keys",
                "hotelingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "passcode_menu_keys",
                "passcodeMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
        )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse18(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest18()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19()``

    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
    """

    __slots__ = [
        "use_voice_portal_customization",
        "voice_portal_main_menu_keys",
        "voice_messaging_menu_keys",
        "play_greeting_menu_keys",
        "change_busy_or_no_answer_greeting_menu_keys",
        "record_new_greeting_or_personalized_name_menu_keys",
        "delete_all_messages_menu_keys",
        "comm_pilot_express_profile_menu_keys",
        "personalized_name_menu_keys",
        "call_forwarding_options_menu_keys",
        "change_call_forwarding_destination_menu_keys",
        "voice_portal_calling_menu_keys",
        "hoteling_menu_keys",
        "passcode_menu_keys",
        "play_messages_menu_keys",
        "play_message_menu_keys",
        "additional_message_options_menu_keys",
        "forward_or_compose_message_menu_keys",
        "reply_message_menu_keys",
        "send_to_distribution_list_menu_keys",
        "select_distribution_list_menu_keys",
        "review_selected_distribution_list_menu_keys",
        "send_message_to_selected_distribution_list_menu_keys",
        "send_to_all_group_members_menu_keys",
        "send_to_person_menu_keys",
        "change_current_introduction_or_message_or_reply_menu_keys",
        "voice_portal_login_menu_keys",
        "fax_messaging_menu_keys",
        "message_deposit_menu_keys",
        "disable_message_deposit_menu_keys",
        "greeting_only_forwarding_destination_menu_keys",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_voice_portal_customization",
                "useVoicePortalCustomization",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "hoteling_menu_keys",
                "hotelingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "passcode_menu_keys",
                "passcodeMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
        )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse18sp1(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest18sp1()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19sp1()``

    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        change_extended_away_greeting_menu_keys: changeExtendedAwayGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
    """

    __slots__ = [
        "use_voice_portal_customization",
        "voice_portal_main_menu_keys",
        "voice_messaging_menu_keys",
        "play_greeting_menu_keys",
        "change_busy_or_no_answer_greeting_menu_keys",
        "change_extended_away_greeting_menu_keys",
        "record_new_greeting_or_personalized_name_menu_keys",
        "delete_all_messages_menu_keys",
        "comm_pilot_express_profile_menu_keys",
        "personalized_name_menu_keys",
        "call_forwarding_options_menu_keys",
        "change_call_forwarding_destination_menu_keys",
        "voice_portal_calling_menu_keys",
        "hoteling_menu_keys",
        "passcode_menu_keys",
        "play_messages_menu_keys",
        "play_message_menu_keys",
        "additional_message_options_menu_keys",
        "forward_or_compose_message_menu_keys",
        "reply_message_menu_keys",
        "send_to_distribution_list_menu_keys",
        "select_distribution_list_menu_keys",
        "review_selected_distribution_list_menu_keys",
        "send_message_to_selected_distribution_list_menu_keys",
        "send_to_all_group_members_menu_keys",
        "send_to_person_menu_keys",
        "change_current_introduction_or_message_or_reply_menu_keys",
        "voice_portal_login_menu_keys",
        "fax_messaging_menu_keys",
        "message_deposit_menu_keys",
        "disable_message_deposit_menu_keys",
        "greeting_only_forwarding_destination_menu_keys",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_voice_portal_customization",
                "useVoicePortalCustomization",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_extended_away_greeting_menu_keys",
                "changeExtendedAwayGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "hoteling_menu_keys",
                "hotelingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "passcode_menu_keys",
                "passcodeMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
        )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse19(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest19()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19sp1()``

    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        greetings_menu_keys: greetingsMenuKeys
        conference_greeting_menu_keys: conferenceGreetingMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
    """

    __slots__ = [
        "use_voice_portal_customization",
        "voice_portal_main_menu_keys",
        "greetings_menu_keys",
        "conference_greeting_menu_keys",
        "voice_messaging_menu_keys",
        "play_greeting_menu_keys",
        "change_busy_or_no_answer_greeting_menu_keys",
        "record_new_greeting_or_personalized_name_menu_keys",
        "delete_all_messages_menu_keys",
        "comm_pilot_express_profile_menu_keys",
        "personalized_name_menu_keys",
        "call_forwarding_options_menu_keys",
        "change_call_forwarding_destination_menu_keys",
        "voice_portal_calling_menu_keys",
        "hoteling_menu_keys",
        "passcode_menu_keys",
        "play_messages_menu_keys",
        "play_message_menu_keys",
        "additional_message_options_menu_keys",
        "forward_or_compose_message_menu_keys",
        "reply_message_menu_keys",
        "send_to_distribution_list_menu_keys",
        "select_distribution_list_menu_keys",
        "review_selected_distribution_list_menu_keys",
        "send_message_to_selected_distribution_list_menu_keys",
        "send_to_all_group_members_menu_keys",
        "send_to_person_menu_keys",
        "change_current_introduction_or_message_or_reply_menu_keys",
        "voice_portal_login_menu_keys",
        "fax_messaging_menu_keys",
        "message_deposit_menu_keys",
        "disable_message_deposit_menu_keys",
        "greeting_only_forwarding_destination_menu_keys",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_voice_portal_customization",
                "useVoicePortalCustomization",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greetings_menu_keys",
                "greetingsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "conference_greeting_menu_keys",
                "conferenceGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "hoteling_menu_keys",
                "hotelingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "passcode_menu_keys",
                "passcodeMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
        )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse19sp1(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest19sp1()``.

    Replaced by ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse20()``

    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        greetings_menu_keys: greetingsMenuKeys
        conference_greeting_menu_keys: conferenceGreetingMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        change_extended_away_greeting_menu_keys: changeExtendedAwayGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
    """

    __slots__ = [
        "use_voice_portal_customization",
        "voice_portal_main_menu_keys",
        "greetings_menu_keys",
        "conference_greeting_menu_keys",
        "voice_messaging_menu_keys",
        "play_greeting_menu_keys",
        "change_busy_or_no_answer_greeting_menu_keys",
        "change_extended_away_greeting_menu_keys",
        "record_new_greeting_or_personalized_name_menu_keys",
        "delete_all_messages_menu_keys",
        "comm_pilot_express_profile_menu_keys",
        "personalized_name_menu_keys",
        "call_forwarding_options_menu_keys",
        "change_call_forwarding_destination_menu_keys",
        "voice_portal_calling_menu_keys",
        "hoteling_menu_keys",
        "passcode_menu_keys",
        "play_messages_menu_keys",
        "play_message_menu_keys",
        "additional_message_options_menu_keys",
        "forward_or_compose_message_menu_keys",
        "reply_message_menu_keys",
        "send_to_distribution_list_menu_keys",
        "select_distribution_list_menu_keys",
        "review_selected_distribution_list_menu_keys",
        "send_message_to_selected_distribution_list_menu_keys",
        "send_to_all_group_members_menu_keys",
        "send_to_person_menu_keys",
        "change_current_introduction_or_message_or_reply_menu_keys",
        "voice_portal_login_menu_keys",
        "fax_messaging_menu_keys",
        "message_deposit_menu_keys",
        "disable_message_deposit_menu_keys",
        "greeting_only_forwarding_destination_menu_keys",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_voice_portal_customization",
                "useVoicePortalCustomization",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greetings_menu_keys",
                "greetingsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "conference_greeting_menu_keys",
                "conferenceGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_extended_away_greeting_menu_keys",
                "changeExtendedAwayGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "hoteling_menu_keys",
                "hotelingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "passcode_menu_keys",
                "passcodeMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
        )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse20(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest20()``.


    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        announcement_menu_keys: announcementMenuKeys
        announcement_recording_menu_keys: announcementRecordingMenuKeys
        greetings_menu_keys: greetingsMenuKeys
        conference_greeting_menu_keys: conferenceGreetingMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        change_extended_away_greeting_menu_keys: changeExtendedAwayGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
    """

    __slots__ = [
        "use_voice_portal_customization",
        "voice_portal_main_menu_keys",
        "announcement_menu_keys",
        "announcement_recording_menu_keys",
        "greetings_menu_keys",
        "conference_greeting_menu_keys",
        "voice_messaging_menu_keys",
        "play_greeting_menu_keys",
        "change_busy_or_no_answer_greeting_menu_keys",
        "change_extended_away_greeting_menu_keys",
        "record_new_greeting_or_personalized_name_menu_keys",
        "delete_all_messages_menu_keys",
        "comm_pilot_express_profile_menu_keys",
        "personalized_name_menu_keys",
        "call_forwarding_options_menu_keys",
        "change_call_forwarding_destination_menu_keys",
        "voice_portal_calling_menu_keys",
        "hoteling_menu_keys",
        "passcode_menu_keys",
        "play_messages_menu_keys",
        "play_message_menu_keys",
        "additional_message_options_menu_keys",
        "forward_or_compose_message_menu_keys",
        "reply_message_menu_keys",
        "send_to_distribution_list_menu_keys",
        "select_distribution_list_menu_keys",
        "review_selected_distribution_list_menu_keys",
        "send_message_to_selected_distribution_list_menu_keys",
        "send_to_all_group_members_menu_keys",
        "send_to_person_menu_keys",
        "change_current_introduction_or_message_or_reply_menu_keys",
        "voice_portal_login_menu_keys",
        "fax_messaging_menu_keys",
        "message_deposit_menu_keys",
        "disable_message_deposit_menu_keys",
        "greeting_only_forwarding_destination_menu_keys",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_voice_portal_customization",
                "useVoicePortalCustomization",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "announcement_menu_keys",
                "announcementMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "announcement_recording_menu_keys",
                "announcementRecordingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greetings_menu_keys",
                "greetingsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "conference_greeting_menu_keys",
                "conferenceGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_extended_away_greeting_menu_keys",
                "changeExtendedAwayGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "hoteling_menu_keys",
                "hotelingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "passcode_menu_keys",
                "passcodeMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
        )


class SystemVoiceMessagingGroupGetVoicePortalMenusResponse21(OCIResponse):
    """
    Response to ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest21()``.


    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        announcement_menu_keys: announcementMenuKeys
        announcement_recording_menu_keys: announcementRecordingMenuKeys
        greetings_menu_keys: greetingsMenuKeys
        conference_greeting_menu_keys: conferenceGreetingMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        change_extended_away_greeting_menu_keys: changeExtendedAwayGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
        personal_assistant_menu_keys: personalAssistantMenuKeys
    """

    __slots__ = [
        "use_voice_portal_customization",
        "voice_portal_main_menu_keys",
        "announcement_menu_keys",
        "announcement_recording_menu_keys",
        "greetings_menu_keys",
        "conference_greeting_menu_keys",
        "voice_messaging_menu_keys",
        "play_greeting_menu_keys",
        "change_busy_or_no_answer_greeting_menu_keys",
        "change_extended_away_greeting_menu_keys",
        "record_new_greeting_or_personalized_name_menu_keys",
        "delete_all_messages_menu_keys",
        "comm_pilot_express_profile_menu_keys",
        "personalized_name_menu_keys",
        "call_forwarding_options_menu_keys",
        "change_call_forwarding_destination_menu_keys",
        "voice_portal_calling_menu_keys",
        "hoteling_menu_keys",
        "passcode_menu_keys",
        "play_messages_menu_keys",
        "play_message_menu_keys",
        "additional_message_options_menu_keys",
        "forward_or_compose_message_menu_keys",
        "reply_message_menu_keys",
        "send_to_distribution_list_menu_keys",
        "select_distribution_list_menu_keys",
        "review_selected_distribution_list_menu_keys",
        "send_message_to_selected_distribution_list_menu_keys",
        "send_to_all_group_members_menu_keys",
        "send_to_person_menu_keys",
        "change_current_introduction_or_message_or_reply_menu_keys",
        "voice_portal_login_menu_keys",
        "fax_messaging_menu_keys",
        "message_deposit_menu_keys",
        "disable_message_deposit_menu_keys",
        "greeting_only_forwarding_destination_menu_keys",
        "personal_assistant_menu_keys",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_voice_portal_customization",
                "useVoicePortalCustomization",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "announcement_menu_keys",
                "announcementMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "announcement_recording_menu_keys",
                "announcementRecordingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greetings_menu_keys",
                "greetingsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "conference_greeting_menu_keys",
                "conferenceGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_extended_away_greeting_menu_keys",
                "changeExtendedAwayGreetingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "hoteling_menu_keys",
                "hotelingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "passcode_menu_keys",
                "passcodeMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
            E(
                "personal_assistant_menu_keys",
                "personalAssistantMenuKeys",
                str,
                is_complex=True,
                is_required=True,
            ),  # unknown
        )


class SystemZoneCallingRestrictionsZoneGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneCallingRestrictionsZoneGetListRequest()``.

    Contains a table of all the zones in the system.  The column headings are "Zone Name"
    , "Physical Location". Replaced by: ``SystemZoneGetListResponse()``

    Attributes:
        zone_table: zoneTable
    """

    __slots__ = [
        "zone_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "zone_table",
                "zoneTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class SystemZoneCallingZonePhysicalLocationGetResponse(OCIResponse):
    """
    Response to ``SystemZoneCallingZonePhysicalLocationGetRequest()``.


    Attributes:
        physical_location: physicalLocation
    """

    __slots__ = [
        "physical_location",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("physical_location", "physicalLocation", str),
        )


class SystemZoneGetListResponse(OCIResponse):
    """
    Response to the ``SystemZoneGetListRequest()``.


    Attributes:
        zone_name: zoneName
    """

    __slots__ = [
        "zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_array=True),
        )


class SystemZoneLocationBasedPhysicalLocationGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneLocationBasedPhysicalLocationGetListRequest()``.


    Attributes:
        physical_location: physicalLocation
    """

    __slots__ = [
        "physical_location",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("physical_location", "physicalLocation", str, is_array=True),
        )


class TutorialFlagGetResponse(OCIResponse):
    """
    Response to the ``TutorialFlagGetRequest()``.


    Attributes:
        enable_tutorial: enableTutorial
    """

    __slots__ = [
        "enable_tutorial",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_tutorial", "enableTutorial", bool, is_required=True),
        )


class UserAccessDeviceFileGetListResponse(OCIResponse):
    """
    Response to ``UserAccessDeviceFileGetListRequest()``.

    Contains a table of user modifiable Device Management files.  The column headings are:
    "File Format", "Template URL".

    Attributes:
        device_files_table: deviceFilesTable
    """

    __slots__ = [
        "device_files_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_files_table",
                "deviceFilesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserAccessDeviceFileGetResponse(OCIResponse):
    """
    Response to ``UserAccessDeviceFileGetRequest()``.


    Attributes:
        template_url: templateUrl
    """

    __slots__ = [
        "template_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("template_url", "templateUrl", str),
        )


class UserAccessDeviceTagsGetResponse(OCIResponse):
    """
    Response to ``UserAccessDeviceTagsGetRequest()``.

    The response contains a table with columns: "Tag Name", and "Tag Value".

    Attributes:
        device_tags_table: deviceTagsTable
    """

    __slots__ = [
        "device_tags_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_tags_table",
                "deviceTagsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserAdviceOfChargeGetResponse(OCIResponse):
    """
    Response to ``UserAdviceOfChargeGetRequest()``.


    Attributes:
        is_active: isActive
        aoc_type: aocType
    """

    __slots__ = [
        "is_active",
        "aoc_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("aoc_type", "aocType", str, is_required=True),
        )


class UserAnnouncementFileGetAvailableListResponse(OCIResponse):
    """
    Response to ``UserAnnouncementFileGetAvailableListRequest()``.

    The response contains a table with columns: "Name", "Media Type", "File Size" and
    "Repository Type". The "Name" column contains the name of the announcement file.  The
    "Media Type" column contains the media type of the announcement file with the possible
    values: WMA - Windows Media Audio file WAV - A WAV file 3GP - A 3GP file MOV - A MOV
    file using a H.263 or H.264 codec.  The "File Size" is in Kilobytes.  The "Repository
    Type" column contains the type of repository for the announcement file such as "User"
    or "Group" The "File Size" column contains the file size in kB of the announcement
    file.

    Attributes:
        announcement_table: announcementTable
    """

    __slots__ = [
        "announcement_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_table",
                "announcementTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserAnnouncementFileGetListResponse(OCIResponse):
    """
    Response to ``UserAnnouncementFileGetListRequest()``.

    When requested, the response contains a table with columns: "Name", "Media Type",
    "File Size". The "Name" column contains the name of the announcement file.  The "Media
    Type" column contains the media type of the announcement file with the possible
    values: WMA - Windows Media Audio file WAV - A WAV file 3GP - A 3GP file MOV - A MOV
    file using a H.263 or H.264 codec.  The "File Size" column contains the file size in
    kB of the announcement file.

    The response also contains the current total file size (KB) for the user across all
    media types and the maximum total file size (MB) allowed for the user.

    Attributes:
        announcement_table: announcementTable
        total_file_size: totalFileSize
        max_file_size: maxFileSize
    """

    __slots__ = [
        "announcement_table",
        "total_file_size",
        "max_file_size",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_table",
                "announcementTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("total_file_size", "totalFileSize", int, is_required=True),
            E("max_file_size", "maxFileSize", int, is_required=True),
        )


class UserAnnouncementFileGetResponse(OCIResponse):
    """
    Response to ``UserAnnouncementFileGetRequest()``.

    The response contains the file size (KB), uploaded timestamp, description and usage
    for an announcement file in the user announcement repository.  The usage table has
    columns "Service Name", "Criteria Name" The "Service Name"" values correspond to
    string values of the UserService data types.  With the exception of the string "Voice
    Portal" which is returned when the announcement is being used by Voice Portal
    Personalized Name.  For Call Center and Route Point users the "Instance Name" column
    contains the instance id and when the announcement is being used by a DNIS, "Intance
    Name" column contans the instance id and the DNIS id.  For Auto Attendants with
    submenus and the announcement is used by a submenu the "Instance Name" column will
    contain the submenu name

    Attributes:
        description: description
        filesize: filesize
        last_uploaded: lastUploaded
        usage_table: usageTable
    """

    __slots__ = [
        "description",
        "filesize",
        "last_uploaded",
        "usage_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str, is_required=True),
            E("filesize", "filesize", int, is_required=True),
            E("last_uploaded", "lastUploaded", str, is_required=True),
            E(
                "usage_table",
                "usageTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserAnonymousCallRejectionGetResponse(OCIResponse):
    """
    Response to ``UserAnonymousCallRejectionGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserAttendantConsoleGetAvailableUserListResponse(OCIResponse):
    """
    Response to ``UserAttendantConsoleGetAvailableUserListRequest()``.

    Returns a 10 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserAttendantConsoleGetResponse(OCIResponse):
    """
    Response to ``UserAttendantConsoleGetRequest()``.


    Attributes:
        launch_on_login: launchOnLogin
        allow_user_config_call_details: allowUserConfigCallDetails
        allow_user_view_call_details: allowUserViewCallDetails
        display_column: displayColumn
    """

    __slots__ = [
        "launch_on_login",
        "allow_user_config_call_details",
        "allow_user_view_call_details",
        "display_column",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("launch_on_login", "launchOnLogin", bool, is_required=True),
            E(
                "allow_user_config_call_details",
                "allowUserConfigCallDetails",
                bool,
                is_required=True,
            ),
            E(
                "allow_user_view_call_details",
                "allowUserViewCallDetails",
                bool,
                is_required=True,
            ),
            E("display_column", "displayColumn", str, is_array=True),
        )


class UserAttendantConsoleGetResponse14sp2(OCIResponse):
    """
    Response to ``UserAttendantConsoleGetRequest14sp2()``.

    Returns a 9 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".

    Attributes:
        launch_on_login: launchOnLogin
        allow_user_config_call_details: allowUserConfigCallDetails
        allow_user_view_call_details: allowUserViewCallDetails
        display_column: displayColumn
        monitored_user_table: monitoredUserTable
    """

    __slots__ = [
        "launch_on_login",
        "allow_user_config_call_details",
        "allow_user_view_call_details",
        "display_column",
        "monitored_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("launch_on_login", "launchOnLogin", bool, is_required=True),
            E(
                "allow_user_config_call_details",
                "allowUserConfigCallDetails",
                bool,
                is_required=True,
            ),
            E(
                "allow_user_view_call_details",
                "allowUserViewCallDetails",
                bool,
                is_required=True,
            ),
            E("display_column", "displayColumn", str, is_array=True),
            E(
                "monitored_user_table",
                "monitoredUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserAuthenticationGetResponse(OCIResponse):
    """
    Response to the ``UserAuthenticationGetRequest()``.


    Attributes:
        user_name: userName
    """

    __slots__ = [
        "user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_name", "userName", str),
        )


class UserAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``UserAutomaticCallbackGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserAutomaticHoldRetrieveGetResponse(OCIResponse):
    """
    Response to ``UserAutomaticHoldRetrieveGetRequest()``.


    Attributes:
        is_active: isActive
        recall_timer_seconds: recallTimerSeconds
    """

    __slots__ = [
        "is_active",
        "recall_timer_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("recall_timer_seconds", "recallTimerSeconds", int, is_required=True),
        )


class UserBargeInExemptGetResponse(OCIResponse):
    """
    Response to ``UserBargeInExemptGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserBroadWorksAnywhereGetAvailablePortalListResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetAvailablePortalListRequest()``.

    Contains a table with column headings: "Portal Name", "Phone Number", "Extension",
    "Language".

    Attributes:
        portal_table: portalTable
    """

    __slots__ = [
        "portal_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "portal_table",
                "portalTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksAnywhereGetPhoneNumberResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetPhoneNumberRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a caombination of them separated by comma: -
    The value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no exension is available a blank space is provided
    instead.

    Attributes:
        description: description
        outbound_alternate_number: outboundAlternateNumber
        is_active: isActive
        broadworks_call_control: broadworksCallControl
        use_diversion_inhibitor: useDiversionInhibitor
        answer_confirmation_required: answerConfirmationRequired
        criteria_table: criteriaTable
    """

    __slots__ = [
        "description",
        "outbound_alternate_number",
        "is_active",
        "broadworks_call_control",
        "use_diversion_inhibitor",
        "answer_confirmation_required",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("outbound_alternate_number", "outboundAlternateNumber", str),
            E("is_active", "isActive", bool, is_required=True),
            E(
                "broadworks_call_control",
                "broadworksCallControl",
                bool,
                is_required=True,
            ),
            E(
                "use_diversion_inhibitor",
                "useDiversionInhibitor",
                bool,
                is_required=True,
            ),
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksAnywhereGetResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetRequest()``.

    The phoneNumberTable contains columns: "Phone Number", "Description" Replaced by:
    ``UserBroadWorksAnywhereGetResponse16sp2()``

    Attributes:
        alert_all_locations_for_click_to_dial_calls: alertAllLocationsForClickToDialCalls
        phone_number_table: phoneNumberTable
    """

    __slots__ = [
        "alert_all_locations_for_click_to_dial_calls",
        "phone_number_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alert_all_locations_for_click_to_dial_calls",
                "alertAllLocationsForClickToDialCalls",
                bool,
                is_required=True,
            ),
            E(
                "phone_number_table",
                "phoneNumberTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksAnywhereGetResponse16sp2(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetRequest16sp2()``.

    The phoneNumberTable contains columns: "Phone Number", "Description"

    Attributes:
        alert_all_locations_for_click_to_dial_calls: alertAllLocationsForClickToDialCalls
        alert_all_locations_for_group_paging_calls: alertAllLocationsForGroupPagingCalls
        phone_number_table: phoneNumberTable
    """

    __slots__ = [
        "alert_all_locations_for_click_to_dial_calls",
        "alert_all_locations_for_group_paging_calls",
        "phone_number_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alert_all_locations_for_click_to_dial_calls",
                "alertAllLocationsForClickToDialCalls",
                bool,
                is_required=True,
            ),
            E(
                "alert_all_locations_for_group_paging_calls",
                "alertAllLocationsForGroupPagingCalls",
                bool,
                is_required=True,
            ),
            E(
                "phone_number_table",
                "phoneNumberTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksCommunicatorGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksCommunicatorGetRequest()``.


    Attributes:
        configuration_server_url: configurationServerURL
    """

    __slots__ = [
        "configuration_server_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("configuration_server_url", "configurationServerURL", str),
        )


class UserBroadWorksMobilityGetResponse(OCIResponse):
    """
    Response to a ``UserBroadWorksMobilityGetRequest()``.


    Attributes:
        is_active: isActive
        phones_to_ring: phonesToRing
        mobile_phone_number: mobilePhoneNumber
        alert_click_to_dial_calls: alertClickToDialCalls
        alert_group_paging_calls: alertGroupPagingCalls
        enable_diversion_inhibitor: enableDiversionInhibitor
        require_answer_confirmation: requireAnswerConfirmation
        broadworks_call_control: broadworksCallControl
        use_setting_level: useSettingLevel
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
    """

    __slots__ = [
        "is_active",
        "phones_to_ring",
        "mobile_phone_number",
        "alert_click_to_dial_calls",
        "alert_group_paging_calls",
        "enable_diversion_inhibitor",
        "require_answer_confirmation",
        "broadworks_call_control",
        "use_setting_level",
        "deny_call_originations",
        "deny_call_terminations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("phones_to_ring", "phonesToRing", str, is_required=True),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E(
                "alert_click_to_dial_calls",
                "alertClickToDialCalls",
                bool,
                is_required=True,
            ),
            E(
                "alert_group_paging_calls",
                "alertGroupPagingCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_diversion_inhibitor",
                "enableDiversionInhibitor",
                bool,
                is_required=True,
            ),
            E(
                "require_answer_confirmation",
                "requireAnswerConfirmation",
                bool,
                is_required=True,
            ),
            E(
                "broadworks_call_control",
                "broadworksCallControl",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
        )


class UserBroadWorksReceptionistEnterpriseGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksReceptionistEnterpriseGetAvailableUserListRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksReceptionistEnterpriseGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksReceptionistEnterpriseGetRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".

    Attributes:
        monitored_user_table: monitoredUserTable
    """

    __slots__ = [
        "monitored_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "monitored_user_table",
                "monitoredUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksReceptionistOfficeGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksReceptionistOfficeGetAvailableUserListRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksReceptionistOfficeGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksReceptionistOfficeGetRequest()``.

    Returns a 11 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".

    Attributes:
        monitored_user_table: monitoredUserTable
    """

    __slots__ = [
        "monitored_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "monitored_user_table",
                "monitoredUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksReceptionistSmallBusinessGetAvailableUserListResponse(OCIResponse):
    """
    Response to the
    ``UserBroadWorksReceptionistSmallBusinessGetAvailableUserListRequest()``.

    Returns a 11 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBroadWorksReceptionistSmallBusinessGetResponse(OCIResponse):
    """
    Response to ``UserBroadWorksReceptionistSmallBusinessGetRequest()``.

    Returns a 12 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Group Id", "Phone Number", "Extension",
    "Mobile", "Email Address", "Department", "IMP Id".

    Attributes:
        monitored_user_table: monitoredUserTable
    """

    __slots__ = [
        "monitored_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "monitored_user_table",
                "monitoredUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBusyLampFieldGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``BusyLampFieldGetAvailableUserListRequest()``.

    Returns a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBusyLampFieldGetResponse(OCIResponse):
    """
    Replaced By ``UserBusyLampFieldGetResponse16sp2()`` Response to
    ``UserBusyLampFieldGetRequest()``.

    The table has column headings: "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name".

    Attributes:
        list_uri: listURI
        monitored_user_table: monitoredUserTable
    """

    __slots__ = [
        "list_uri",
        "monitored_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("list_uri", "listURI", str),
            E(
                "monitored_user_table",
                "monitoredUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserBusyLampFieldGetResponse16sp2(OCIResponse):
    """
    Response to ``UserBusyLampFieldGetRequest16sp2()``.

    The table has column headings: "User Id", "Last Name", "First Name", "Hiragana Last
    Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id".

    Attributes:
        list_uri: listURI
        enable_call_park_notification: enableCallParkNotification
        monitored_user_table: monitoredUserTable
    """

    __slots__ = [
        "list_uri",
        "enable_call_park_notification",
        "monitored_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("list_uri", "listURI", str),
            E(
                "enable_call_park_notification",
                "enableCallParkNotification",
                bool,
                is_required=True,
            ),
            E(
                "monitored_user_table",
                "monitoredUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterAgentDetailsGetResponse(OCIResponse):
    """
    Response to the ``UserCallCenterAgentDetailsGetRequest()``.

    Contains the detail information for a Call Center Agent.

    Attributes:
        is_call_center_basic_assigned: isCallCenterBasicAssigned
        is_call_center_standard_assigned: isCallCenterStandardAssigned
        is_call_center_premium_assigned: isCallCenterPremiumAssigned
    """

    __slots__ = [
        "is_call_center_basic_assigned",
        "is_call_center_standard_assigned",
        "is_call_center_premium_assigned",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_call_center_basic_assigned",
                "isCallCenterBasicAssigned",
                bool,
                is_required=True,
            ),
            E(
                "is_call_center_standard_assigned",
                "isCallCenterStandardAssigned",
                bool,
                is_required=True,
            ),
            E(
                "is_call_center_premium_assigned",
                "isCallCenterPremiumAssigned",
                bool,
                is_required=True,
            ),
        )


class UserCallCenterAgentSignOutResponse(OCIResponse):
    """
    Response to the ``UserCallCenterAgentSignOutRequest()``.

    It contains a list of call centers for which the agent is the last signed-in agent.
    Contains a table with column headings: "Service User Id" and "Call Center Name".

    Attributes:
        call_center_table: callCenterTable
    """

    __slots__ = [
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterCallDispositionCodeGetAvailableListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterCallDispositionCodeGetAvailableListRequest()``.

    This list may include Group/Enterprise level codes in addition to the Call Center
    level codes, depending on the call center disposition codes settings.  Only active
    codes are included in the list.  Contains a table with column headings: "Code",
    "Description" and "Level". Level column can be any of the values in the data type
    CallDispositionCodeLevel.

    Attributes:
        disposition_codes_table: dispositionCodesTable
    """

    __slots__ = [
        "disposition_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disposition_codes_table",
                "dispositionCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterEnhancedReportingReportTemplateParamInfoGetResponse(OCIResponse):
    """
    Response to ``UserCallCenterEnhancedReportingReportTemplateParamInfoGetRequest()``.


    Attributes:
        is_realtime_report: isRealtimeReport
        require_agent_param: requireAgentParam
        require_call_center_param: requireCallCenterParam
        require_call_center_dnis_param: requireCallCenterDnisParam
        require_sampling_period_param: requireSamplingPeriodParam
        call_completion_threshold_param: callCompletionThresholdParam
        short_duration_threshold_param: shortDurationThresholdParam
        service_level_threshold_param: serviceLevelThresholdParam
        service_level_inclusions_param: serviceLevelInclusionsParam
        service_level_objective_threshold_param: serviceLevelObjectiveThresholdParam
        abandoned_call_threshold_param: abandonedCallThresholdParam
        service_level_threshold_param_number: serviceLevelThresholdParamNumber
        abandoned_call_threshold_param_number: abandonedCallThresholdParamNumber
    """

    __slots__ = [
        "is_realtime_report",
        "require_agent_param",
        "require_call_center_param",
        "require_call_center_dnis_param",
        "require_sampling_period_param",
        "call_completion_threshold_param",
        "short_duration_threshold_param",
        "service_level_threshold_param",
        "service_level_inclusions_param",
        "service_level_objective_threshold_param",
        "abandoned_call_threshold_param",
        "service_level_threshold_param_number",
        "abandoned_call_threshold_param_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_realtime_report", "isRealtimeReport", bool, is_required=True),
            E("require_agent_param", "requireAgentParam", bool, is_required=True),
            E(
                "require_call_center_param",
                "requireCallCenterParam",
                bool,
                is_required=True,
            ),
            E(
                "require_call_center_dnis_param",
                "requireCallCenterDnisParam",
                bool,
                is_required=True,
            ),
            E(
                "require_sampling_period_param",
                "requireSamplingPeriodParam",
                bool,
                is_required=True,
            ),
            E("call_completion_threshold_param", "callCompletionThresholdParam", str),
            E("short_duration_threshold_param", "shortDurationThresholdParam", str),
            E("service_level_threshold_param", "serviceLevelThresholdParam", str),
            E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
            E(
                "service_level_objective_threshold_param",
                "serviceLevelObjectiveThresholdParam",
                str,
            ),
            E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
            E(
                "service_level_threshold_param_number",
                "serviceLevelThresholdParamNumber",
                int,
            ),
            E(
                "abandoned_call_threshold_param_number",
                "abandonedCallThresholdParamNumber",
                int,
            ),
        )


class UserCallCenterGetAgentSupervisorListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetAgentSupervisorListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id", "Location Code".

    Attributes:
        supervisor_table: supervisorTable
    """

    __slots__ = [
        "supervisor_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "supervisor_table",
                "supervisorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterGetAvailableCallCenterListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetAvailableCallCenterListRequest()``.

    Contains a table with column heading: "Service User Id".

    Attributes:
        call_center_table: callCenterTable
    """

    __slots__ = [
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterGetListResponse(OCIResponse):
    """
    Response to the ``UserCallCentersLoginGetListRequest()``.

    Indicates whether the agent is current available (logged in) to each call center in
    the list.  Contains a table with column headings: "Service User Id", "Phone Number",
    "Extension", "Available", "Logoff Allowed". ***** NOTE: Prior to release 14sp1, the
    AppServer had a bug that caused it to emit column heading "Service User ID" with *****
    the ID capitalized.  Beginning in release 14sp1, the appserver is compliant with the
    schema and emits a ***** the column heading "Service User Id".

    Replaced By: ``UserCallCenterGetResponse()``

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterGetResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest()``.

    Contains the user's ACD state Indicates whether the agent is current available (logged
    in) to each call center in the list.  Contains a table with column headings: "Service
    User Id", "Phone Number", "Extension", "Available", "Logoff Allowed".

    Attributes:
        agent_acd_state: agentACDState
        user_table: userTable
    """

    __slots__ = [
        "agent_acd_state",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_acd_state", "agentACDState", str),
            E("user_table", "userTable", list, is_complex=True, is_table=True),
        )


class UserCallCenterGetResponse16(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest16()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", and "Priority".

    Attributes:
        agent_acd_state: agentACDState
        use_default_guard_timer: useDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_unavailable_on_personal_calls: forceUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        call_center_table: callCenterTable
    """

    __slots__ = [
        "agent_acd_state",
        "use_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_acd_state", "agentACDState", str),
            E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_unavailable_on_personal_calls",
                "forceUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterGetSupervisedAgentListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetSupervisedAgentListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "IMP Id", "Location Code".

    Attributes:
        agent_user_table: agentUserTable
    """

    __slots__ = [
        "agent_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterGetSupervisorCallCenterListResponse(OCIResponse):
    """
    Response to the ``UserCallCenterGetSupervisorCallCenterListRequest()``.

    Contains a table with column headings: "Service User Id", "Phone Number", "Extension",
    "Type" and "Priority".

    Attributes:
        call_center_table: callCenterTable
    """

    __slots__ = [
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterMonitoringGetResponse(OCIResponse):
    """
    Response to ``UserCallCenterMonitoringGetRequest()``.


    Attributes:
        play_tone_to_agent_for_silent_monitoring: playToneToAgentForSilentMonitoring
    """

    __slots__ = [
        "play_tone_to_agent_for_silent_monitoring",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "play_tone_to_agent_for_silent_monitoring",
                "playToneToAgentForSilentMonitoring",
                bool,
                is_required=True,
            ),
        )


class UserCallForwardingAlwaysGetResponse(OCIResponse):
    """
    Response to ``UserCallForwardingAlwaysGetRequest()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        is_ring_splash_active: isRingSplashActive
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "is_ring_splash_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("is_ring_splash_active", "isRingSplashActive", bool, is_required=True),
        )


class UserCallForwardingBusyGetResponse(OCIResponse):
    """
    Response to ``UserCallForwardingBusyGetRequest()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
        )


class UserCallForwardingNoAnswerGetResponse13mp16(OCIResponse):
    """
    Response to ``UserCallForwardingNoAnswerGetRequest13mp16()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        number_of_rings: numberOfRings
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "number_of_rings",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("number_of_rings", "numberOfRings", int, is_required=True),
        )


class UserCallForwardingNotReachableGetResponse(OCIResponse):
    """
    Response to ``UserCallForwardingNotReachableGetRequest()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
        )


class UserCallForwardingSelectiveGetResponse(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From" and "Forward To".

    Attributes:
        default_forward_to_phone_number: defaultForwardToPhoneNumber
        play_ring_reminder: playRingReminder
        criteria_table: criteriaTable
    """

    __slots__ = [
        "default_forward_to_phone_number",
        "play_ring_reminder",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_forward_to_phone_number", "defaultForwardToPhoneNumber", str),
            E("play_ring_reminder", "playRingReminder", bool, is_required=True),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallForwardingSelectiveGetResponse16(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetRequest16()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Forward To", "Blacklisted", "Holiday Schedule", "Calls To
    Type", "Calls To Number" and "Calls To Extension". The possible values for the "Calls
    To Type" column are the following or a combination of them separated by comma: -
    Primary - Alternate X (where x is a number between 1 and 10) - Mobility The possible
    values for the "Calls To Number" column are the following or a combination of them
    separated by comma: - The value of the phone number for the corresponding Calls To
    Type, when the number is available.  i.e.  Alternate 1 may have extension, but no
    number.  - When no number is available a blank space is provided instead.  The
    possible values for the "Calls To Extension" column are the following or a combination
    of them separated by comma: - The value of the extension for the corresponding Calls
    To Type, when the extension is available.  i.e.  Primary may have number, but no
    extension.  - For Mobility Calls To Type, this is always blank.  - When no extension
    is available a blank space is provided instead.

    Attributes:
        is_active: isActive
        default_forward_to_phone_number: defaultForwardToPhoneNumber
        play_ring_reminder: playRingReminder
        criteria_table: criteriaTable
    """

    __slots__ = [
        "is_active",
        "default_forward_to_phone_number",
        "play_ring_reminder",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("default_forward_to_phone_number", "defaultForwardToPhoneNumber", str),
            E("play_ring_reminder", "playRingReminder", bool, is_required=True),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallMeNowGetResponse(OCIResponse):
    """
    Response to the ``UserCallMeNowGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Call To", "Reject Call" and "Holiday Schedule".

    Attributes:
        is_active: isActive
        answer_confirmation: answerConfirmation
        criteria_table: criteriaTable
    """

    __slots__ = [
        "is_active",
        "answer_confirmation",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("answer_confirmation", "answerConfirmation", str, is_required=True),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallNotifyGetResponse(OCIResponse):
    """
    Response to the ``UserCallNotifyGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted" ,"Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.

    Attributes:
        call_notify_email_address: callNotifyEmailAddress
        criteria_table: criteriaTable
    """

    __slots__ = [
        "call_notify_email_address",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_notify_email_address", "callNotifyEmailAddress", str),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallParkGetResponse(OCIResponse):
    """
    Response to the ``UserCallParkGetRequest()``.

    Identifies which Call Park group the user belongs to and the list of users in the
    group.  Contains a table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name". The users are in the table in the order
    they will try to be parked on.

    Attributes:
        name: name
        user_table: userTable
    """

    __slots__ = [
        "name",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallPickupGetResponse(OCIResponse):
    """
    Response to the ``UserCallPickupGetRequest()``.

    Identifies which Call Pickup group the user belongs to and the list of users in the
    group.  Contains a table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Department", "Phone Number",
    "Extension", "Email Address".

    Attributes:
        name: name
        user_table: userTable
    """

    __slots__ = [
        "name",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallPoliciesGetResponse(OCIResponse):
    """
    Response to ``UserCallPoliciesGetRequest()``.


    Attributes:
        redirected_calls_colp_privacy: redirectedCallsCOLPPrivacy
    """

    __slots__ = [
        "redirected_calls_colp_privacy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "redirected_calls_colp_privacy",
                "redirectedCallsCOLPPrivacy",
                str,
                is_required=True,
            ),
        )


class UserCallPoliciesGetResponse17(OCIResponse):
    """
    Response to ``UserCallPoliciesGetRequest17()``.

    Replaced by: ``UserCallPoliciesGetResponse19sp1()``

    Attributes:
        redirected_calls_colp_privacy: redirectedCallsCOLPPrivacy
        call_being_forwarded_response_call_type: callBeingForwardedResponseCallType
    """

    __slots__ = [
        "redirected_calls_colp_privacy",
        "call_being_forwarded_response_call_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "redirected_calls_colp_privacy",
                "redirectedCallsCOLPPrivacy",
                str,
                is_required=True,
            ),
            E(
                "call_being_forwarded_response_call_type",
                "callBeingForwardedResponseCallType",
                str,
                is_required=True,
            ),
        )


class UserCallPoliciesGetResponse19sp1(OCIResponse):
    """
    Response to ``UserCallPoliciesGetRequest19sp1()``.


    Attributes:
        redirected_calls_colp_privacy: redirectedCallsCOLPPrivacy
        call_being_forwarded_response_call_type: callBeingForwardedResponseCallType
        calling_line_identity_for_redirected_calls: callingLineIdentityForRedirectedCalls
    """

    __slots__ = [
        "redirected_calls_colp_privacy",
        "call_being_forwarded_response_call_type",
        "calling_line_identity_for_redirected_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "redirected_calls_colp_privacy",
                "redirectedCallsCOLPPrivacy",
                str,
                is_required=True,
            ),
            E(
                "call_being_forwarded_response_call_type",
                "callBeingForwardedResponseCallType",
                str,
                is_required=True,
            ),
            E(
                "calling_line_identity_for_redirected_calls",
                "callingLineIdentityForRedirectedCalls",
                str,
                is_required=True,
            ),
        )


class UserCallProcessingGetPolicyResponse14(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest14()``.


    Attributes:
        use_user_setting: useUserSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
    """

    __slots__ = [
        "use_user_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_setting", "useUserSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
        )


class UserCallProcessingGetPolicyResponse14sp1(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest14sp1()``.

    Replaced By: ``UserCallProcessingGetPolicyResponse14sp7()``

    Attributes:
        use_user_setting: useUserSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    __slots__ = [
        "use_user_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_setting", "useUserSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
        )


class UserCallProcessingGetPolicyResponse14sp7(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest14sp7()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations)

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
        )


class UserCallProcessingGetPolicyResponse16(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest16()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations)

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
        )


class UserCallProcessingGetPolicyResponse16sp2(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest16sp2()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useUserDCLIDSetting controls the Dialable Caller ID settings (enableDialableCallerID)
    Replaced by: ``UserCallProcessingGetPolicyResponse17sp4()``

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_user_dclid_setting: useUserDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_user_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class UserCallProcessingGetPolicyResponse17(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest17()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations)

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
        )


class UserCallProcessingGetPolicyResponse17sp3(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest17sp3()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useUserDCLIDSetting controls the Dialable Caller ID settings (enableDialableCallerID)
    The following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID Replaced by: UserCallProcessingGetPolicyResponse17Sp4

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_user_dclid_setting: useUserDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_user_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
        )


class UserCallProcessingGetPolicyResponse17sp4(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest17sp4()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity) The useUserMediaSetting attribute
    controls the Media settings (medisPolicySelection, supportedMediaSetName) The
    useUserCallLimitsSetting attribute controls the Call Limits setting
    (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useUserDCLIDSetting controls the Dialable Caller ID settings (enableDialableCallerID)
    The following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity Replaced by:
    ``UserCallProcessingGetPolicyResponse18()``

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_user_dclid_setting: useUserDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_user_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
        )


class UserCallProcessingGetPolicyResponse18(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest18()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity, allowDepartmentCLIDNameOverride) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride Replaced by:
    ``UserCallProcessingGetPolicyResponse19sp1()``

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_user_dclid_setting: useUserDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_user_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
        )


class UserCallProcessingGetPolicyResponse19sp1(OCIResponse):
    """
    Response to ``UserCallProcessingGetPolicyRequest19sp1()``.

    The useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity, allowDepartmentCLIDNameOverride) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride

    Attributes:
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_user_dclid_setting: useUserDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
    """

    __slots__ = [
        "use_user_clid_setting",
        "use_user_media_setting",
        "use_user_call_limits_setting",
        "use_user_dclid_setting",
        "use_max_simultaneous_calls",
        "max_simultaneous_calls",
        "use_max_simultaneous_video_calls",
        "max_simultaneous_video_calls",
        "use_max_call_time_for_answered_calls",
        "max_call_time_for_answered_calls_minutes",
        "use_max_call_time_for_unanswered_calls",
        "max_call_time_for_unanswered_calls_minutes",
        "media_policy_selection",
        "supported_media_set_name",
        "use_max_concurrent_redirected_calls",
        "max_concurrent_redirected_calls",
        "use_max_find_me_follow_me_depth",
        "max_find_me_follow_me_depth",
        "max_redirection_depth",
        "use_max_concurrent_find_me_follow_me_invocations",
        "max_concurrent_find_me_follow_me_invocations",
        "clid_policy",
        "emergency_clid_policy",
        "allow_alternate_numbers_for_redirecting_identity",
        "use_group_name",
        "block_calling_name_for_external_calls",
        "enable_dialable_caller_id",
        "allow_configurable_clid_for_redirecting_identity",
        "allow_department_clid_name_override",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_user_clid_setting", "useUserCLIDSetting", bool, is_required=True),
            E("use_user_media_setting", "useUserMediaSetting", bool, is_required=True),
            E(
                "use_user_call_limits_setting",
                "useUserCallLimitsSetting",
                bool,
                is_required=True,
            ),
            E("use_user_dclid_setting", "useUserDCLIDSetting", bool, is_required=True),
            E(
                "use_max_simultaneous_calls",
                "useMaxSimultaneousCalls",
                bool,
                is_required=True,
            ),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int, is_required=True),
            E(
                "use_max_simultaneous_video_calls",
                "useMaxSimultaneousVideoCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_simultaneous_video_calls",
                "maxSimultaneousVideoCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
                is_required=True,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
                is_required=True,
            ),
            E("media_policy_selection", "mediaPolicySelection", str, is_required=True),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_redirected_calls",
                "maxConcurrentRedirectedCalls",
                int,
                is_required=True,
            ),
            E(
                "use_max_find_me_follow_me_depth",
                "useMaxFindMeFollowMeDepth",
                bool,
                is_required=True,
            ),
            E(
                "max_find_me_follow_me_depth",
                "maxFindMeFollowMeDepth",
                int,
                is_required=True,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int, is_required=True),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
                is_required=True,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
                is_required=True,
            ),
            E("clid_policy", "clidPolicy", str, is_required=True),
            E("emergency_clid_policy", "emergencyClidPolicy", str, is_required=True),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E("use_group_name", "useGroupName", bool, is_required=True),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_dialable_caller_id",
                "enableDialableCallerID",
                bool,
                is_required=True,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
                is_required=True,
            ),
        )


class UserCallRecordingGetResponse(OCIResponse):
    """
    Response to the ``UserCallRecordingGetRequest()``.

    The response contains the user's Call Recording option information.

    Attributes:
        recording_option: recordingOption
    """

    __slots__ = [
        "recording_option",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("recording_option", "recordingOption", str, is_required=True),
        )


class UserCallRecordingGetResponse20(OCIResponse):
    """
    Response to the ``UserCallRecordingGetRequest20()``.

    The response contains the user's Call Recording option information.  The following
    parameters are not returned for service instance: - pauseResumeNotification -
    enableCallRecordingAnnouncement - enableRecordCallRepeatWarningTone -
    recordCallRepeatWarningToneTimerSeconds The enableVoiceMailRecording parameter is only
    returned if the Voice Messaging User service is assigned to the user.  This applies to
    both users and service instances.

    Attributes:
        recording_option: recordingOption
        pause_resume_notification: pauseResumeNotification
        enable_call_recording_announcement: enableCallRecordingAnnouncement
        enable_record_call_repeat_warning_tone: enableRecordCallRepeatWarningTone
        record_call_repeat_warning_tone_timer_seconds:
            recordCallRepeatWarningToneTimerSeconds
        enable_voice_mail_recording: enableVoiceMailRecording
    """

    __slots__ = [
        "recording_option",
        "pause_resume_notification",
        "enable_call_recording_announcement",
        "enable_record_call_repeat_warning_tone",
        "record_call_repeat_warning_tone_timer_seconds",
        "enable_voice_mail_recording",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("recording_option", "recordingOption", str, is_required=True),
            E("pause_resume_notification", "pauseResumeNotification", str),
            E(
                "enable_call_recording_announcement",
                "enableCallRecordingAnnouncement",
                bool,
            ),
            E(
                "enable_record_call_repeat_warning_tone",
                "enableRecordCallRepeatWarningTone",
                bool,
            ),
            E(
                "record_call_repeat_warning_tone_timer_seconds",
                "recordCallRepeatWarningToneTimerSeconds",
                int,
            ),
            E("enable_voice_mail_recording", "enableVoiceMailRecording", bool),
        )


class UserCallTransferGetResponse(OCIResponse):
    """
    Response to ``UserCallTransferGetRequest()``.


    Attributes:
        is_recall_active: isRecallActive
        recall_number_of_rings: recallNumberOfRings
        use_diversion_inhibitor_for_blind_transfer: useDiversionInhibitorForBlindTransfer
        use_diversion_inhibitor_for_consultative_calls:
            useDiversionInhibitorForConsultativeCalls
    """

    __slots__ = [
        "is_recall_active",
        "recall_number_of_rings",
        "use_diversion_inhibitor_for_blind_transfer",
        "use_diversion_inhibitor_for_consultative_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_recall_active", "isRecallActive", bool, is_required=True),
            E("recall_number_of_rings", "recallNumberOfRings", int, is_required=True),
            E(
                "use_diversion_inhibitor_for_blind_transfer",
                "useDiversionInhibitorForBlindTransfer",
                bool,
                is_required=True,
            ),
            E(
                "use_diversion_inhibitor_for_consultative_calls",
                "useDiversionInhibitorForConsultativeCalls",
                bool,
                is_required=True,
            ),
        )


class UserCallTransferGetResponse14sp4(OCIResponse):
    """
    Response to ``UserCallTransferGetRequest14sp4()``.


    Attributes:
        is_recall_active: isRecallActive
        recall_number_of_rings: recallNumberOfRings
        use_diversion_inhibitor_for_blind_transfer: useDiversionInhibitorForBlindTransfer
        use_diversion_inhibitor_for_consultative_calls:
            useDiversionInhibitorForConsultativeCalls
        enable_busy_camp_on: enableBusyCampOn
        busy_camp_on_seconds: busyCampOnSeconds
    """

    __slots__ = [
        "is_recall_active",
        "recall_number_of_rings",
        "use_diversion_inhibitor_for_blind_transfer",
        "use_diversion_inhibitor_for_consultative_calls",
        "enable_busy_camp_on",
        "busy_camp_on_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_recall_active", "isRecallActive", bool, is_required=True),
            E("recall_number_of_rings", "recallNumberOfRings", int, is_required=True),
            E(
                "use_diversion_inhibitor_for_blind_transfer",
                "useDiversionInhibitorForBlindTransfer",
                bool,
                is_required=True,
            ),
            E(
                "use_diversion_inhibitor_for_consultative_calls",
                "useDiversionInhibitorForConsultativeCalls",
                bool,
                is_required=True,
            ),
            E("enable_busy_camp_on", "enableBusyCampOn", bool, is_required=True),
            E("busy_camp_on_seconds", "busyCampOnSeconds", int, is_required=True),
        )


class UserCallWaitingGetResponse(OCIResponse):
    """
    Response to ``UserCallWaitingGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserCallWaitingGetResponse17sp4(OCIResponse):
    """
    Response to ``UserCallWaitingGetRequest17sp4()``.

    The following elements are only used in AS data mode: disableCallingLineIdDelivery

    Attributes:
        is_active: isActive
        disable_calling_line_id_delivery: disableCallingLineIdDelivery
    """

    __slots__ = [
        "is_active",
        "disable_calling_line_id_delivery",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "disable_calling_line_id_delivery",
                "disableCallingLineIdDelivery",
                bool,
                is_required=True,
            ),
        )


class UserCallingLineIDBlockingOverrideGetResponse(OCIResponse):
    """
    Response to ``UserCallingLineIDBlockingOverrideGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserCallingLineIDDeliveryBlockingGetResponse(OCIResponse):
    """
    Response to ``UserCallingLineIDDeliveryBlockingGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserCallingNameDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserCallingNameDeliveryGetRequest()``.


    Attributes:
        is_active_for_external_calls: isActiveForExternalCalls
        is_active_for_internal_calls: isActiveForInternalCalls
    """

    __slots__ = [
        "is_active_for_external_calls",
        "is_active_for_internal_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_active_for_external_calls",
                "isActiveForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "is_active_for_internal_calls",
                "isActiveForInternalCalls",
                bool,
                is_required=True,
            ),
        )


class UserCallingNameRetrievalGetResponse(OCIResponse):
    """
    Response to ``UserCallingNameRetrievalGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserCallingNumberDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserCallingNumberDeliveryGetRequest()``.


    Attributes:
        is_active_for_external_calls: isActiveForExternalCalls
        is_active_for_internal_calls: isActiveForInternalCalls
    """

    __slots__ = [
        "is_active_for_external_calls",
        "is_active_for_internal_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_active_for_external_calls",
                "isActiveForExternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "is_active_for_internal_calls",
                "isActiveForInternalCalls",
                bool,
                is_required=True,
            ),
        )


class UserCallingPartyCategoryGetResponse(OCIResponse):
    """
    Response to ``UserCallingPartyCategoryGetRequest()``.


    Attributes:
        category: category
    """

    __slots__ = [
        "category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("category", "category", str, is_required=True),
        )


class UserCallingPartyCategoryGetResponse16(OCIResponse):
    """
    Response to ``UserCallingPartyCategoryGetRequest16()``.


    Attributes:
        category: category
    """

    __slots__ = [
        "category",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("category", "category", str, is_required=True),
        )


class UserChargeNumberGetResponse(OCIResponse):
    """
    Response to ``UserChargeNumberGetRequest()``.


    Attributes:
        phone_number: phoneNumber
    """

    __slots__ = [
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str),
        )


class UserChargeNumberGetResponse14sp9(OCIResponse):
    """
    Response to ``UserChargeNumberGetRequest14sp9()``.


    Attributes:
        phone_number: phoneNumber
        use_charge_number_for_enhanced_translations:
            useChargeNumberForEnhancedTranslations
        send_charge_number_to_network: sendChargeNumberToNetwork
    """

    __slots__ = [
        "phone_number",
        "use_charge_number_for_enhanced_translations",
        "send_charge_number_to_network",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str),
            E(
                "use_charge_number_for_enhanced_translations",
                "useChargeNumberForEnhancedTranslations",
                bool,
                is_required=True,
            ),
            E(
                "send_charge_number_to_network",
                "sendChargeNumberToNetwork",
                bool,
                is_required=True,
            ),
        )


class UserClassmarkGetResponse(OCIResponse):
    """
    Response to ``UserClassmarkGetRequest()``.

    Contains the Class Mark data

    Attributes:
        classmark: classmark
    """

    __slots__ = [
        "classmark",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("classmark", "classmark", str),
        )


class UserCollaborateInstantRoomAddResponse(OCIResponse):
    """
    Response to ``UserCollaborateInstantRoomAddRequest()``.


    Attributes:
        room_id: roomId
    """

    __slots__ = [
        "room_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("room_id", "roomId", str, is_required=True),
        )


class UserCollaborateInstantRoomGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateInstantRoomGetRequest()``.


    Attributes:
        room_name: roomName
        instant_room_start_time: instantRoomStartTime
        instant_room_end_time: instantRoomEndTime
    """

    __slots__ = [
        "room_name",
        "instant_room_start_time",
        "instant_room_end_time",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("room_name", "roomName", str),
            E("instant_room_start_time", "instantRoomStartTime", str, is_required=True),
            E("instant_room_end_time", "instantRoomEndTime", str, is_required=True),
        )


class UserCollaborateInstantRoomParametersGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateInstantRoomParametersGetRequest()``.


    Attributes:
        attendee_notification: attendeeNotification
        end_collaborate_room_session_on_owner_exit: endCollaborateRoomSessionOnOwnerExit
        owner_required: ownerRequired
    """

    __slots__ = [
        "attendee_notification",
        "end_collaborate_room_session_on_owner_exit",
        "owner_required",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "end_collaborate_room_session_on_owner_exit",
                "endCollaborateRoomSessionOnOwnerExit",
                bool,
                is_required=True,
            ),
            E("owner_required", "ownerRequired", bool, is_required=True),
        )


class UserCollaborateMyRoomGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateMyRoomGetRequest()``.


    Attributes:
        room_id: roomId
        room_name: roomName
        attendee_notification: attendeeNotification
        end_collaborate_room_session_on_owner_exit: endCollaborateRoomSessionOnOwnerExit
        owner_required: ownerRequired
    """

    __slots__ = [
        "room_id",
        "room_name",
        "attendee_notification",
        "end_collaborate_room_session_on_owner_exit",
        "owner_required",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("room_id", "roomId", str, is_required=True),
            E("room_name", "roomName", str, is_required=True),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "end_collaborate_room_session_on_owner_exit",
                "endCollaborateRoomSessionOnOwnerExit",
                bool,
                is_required=True,
            ),
            E("owner_required", "ownerRequired", bool, is_required=True),
        )


class UserCollaborateProjectRoomAddResponse(OCIResponse):
    """
    Response to ``UserCollaborateProjectRoomAddRequest()``.


    Attributes:
        room_id: roomId
    """

    __slots__ = [
        "room_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("room_id", "roomId", str, is_required=True),
        )


class UserCollaborateRoomIDRegenerateResponse(OCIResponse):
    """
    Response to ``UserCollaborateRoomIDRegenerateRequest()``.


    Attributes:
        room_id: roomId
    """

    __slots__ = [
        "room_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("room_id", "roomId", str, is_required=True),
        )


class UserCollaborateRoomListGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateRoomListGetRequest()``.

    Contains a table with column headings : "Room Type", "Name", "Room Id", in a row for
    each collaborate room instance.  Possible values for Room Type column are MyRoom,
    Project Room and Instant Room.

    Attributes:
        room_instance_table: roomInstanceTable
    """

    __slots__ = [
        "room_instance_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "room_instance_table",
                "roomInstanceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCommPilotCallManagerGetResponse(OCIResponse):
    """
    Response to ``UserCommPilotCallManagerGetRequest()``.


    Attributes:
        launch_on_login: launchOnLogin
    """

    __slots__ = [
        "launch_on_login",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("launch_on_login", "launchOnLogin", bool, is_required=True),
        )


class UserCommunicationBarringGetResponse(OCIResponse):
    """
    Response to ``UserCommunicationBarringGetRequest()``.

    This command only applies to users in an Enterprise.

    Attributes:
        use_group_setting: useGroupSetting
        profile_name: profileName
    """

    __slots__ = [
        "use_group_setting",
        "profile_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_group_setting", "useGroupSetting", bool, is_required=True),
            E("profile_name", "profileName", str),
        )


class UserCommunicationBarringUserControlGetResponse(OCIResponse):
    """
    Response to the ``UserCommunicationBarringUserControlGetRequest()``.

    Identifies the profiles available to the user and which one if any is active as well
    as the lockout status.  Contains a table with column headings: "Name", "Code",
    "Activated" and "Primary".

    Attributes:
        lockout_status: lockoutStatus
        profile_table: profileTable
    """

    __slots__ = [
        "lockout_status",
        "profile_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("lockout_status", "lockoutStatus", bool, is_required=True),
            E(
                "profile_table",
                "profileTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserConnectedLineIdentificationRestrictionGetResponse(OCIResponse):
    """
    Response to ``UserConnectedLineIdentificationRestrictionGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserCustomRingbackUserGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserDevicePoliciesGetResponse(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.

    Attributes:
        line_mode: lineMode
        enable_device_feature_synchronization: enableDeviceFeatureSynchronization
    """

    __slots__ = [
        "line_mode",
        "enable_device_feature_synchronization",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("line_mode", "lineMode", str, is_required=True),
            E(
                "enable_device_feature_synchronization",
                "enableDeviceFeatureSynchronization",
                bool,
                is_required=True,
            ),
        )


class UserDevicePoliciesGetResponse19sp1(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest19sp1()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.

    Attributes:
        line_mode: lineMode
        enable_device_feature_synchronization: enableDeviceFeatureSynchronization
        enable_dnd: enableDnd
        enable_call_forwarding_always: enableCallForwardingAlways
        enable_call_forwarding_busy: enableCallForwardingBusy
        enable_call_forwarding_no_answer: enableCallForwardingNoAnswer
        enable_acd: enableAcd
        enable_executive: enableExecutive
        enable_executive_assistant: enableExecutiveAssistant
    """

    __slots__ = [
        "line_mode",
        "enable_device_feature_synchronization",
        "enable_dnd",
        "enable_call_forwarding_always",
        "enable_call_forwarding_busy",
        "enable_call_forwarding_no_answer",
        "enable_acd",
        "enable_executive",
        "enable_executive_assistant",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("line_mode", "lineMode", str, is_required=True),
            E(
                "enable_device_feature_synchronization",
                "enableDeviceFeatureSynchronization",
                bool,
                is_required=True,
            ),
            E("enable_dnd", "enableDnd", bool, is_required=True),
            E(
                "enable_call_forwarding_always",
                "enableCallForwardingAlways",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_forwarding_busy",
                "enableCallForwardingBusy",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_forwarding_no_answer",
                "enableCallForwardingNoAnswer",
                bool,
                is_required=True,
            ),
            E("enable_acd", "enableAcd", bool, is_required=True),
            E("enable_executive", "enableExecutive", bool, is_required=True),
            E(
                "enable_executive_assistant",
                "enableExecutiveAssistant",
                bool,
                is_required=True,
            ),
        )


class UserDevicePoliciesGetResponse20(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest201()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.

    Attributes:
        line_mode: lineMode
        enable_device_feature_synchronization: enableDeviceFeatureSynchronization
        enable_dnd: enableDnd
        enable_call_forwarding_always: enableCallForwardingAlways
        enable_call_forwarding_busy: enableCallForwardingBusy
        enable_call_forwarding_no_answer: enableCallForwardingNoAnswer
        enable_acd: enableAcd
        enable_executive: enableExecutive
        enable_executive_assistant: enableExecutiveAssistant
        enable_security_classification: enableSecurityClassification
        enable_call_recording: enableCallRecording
    """

    __slots__ = [
        "line_mode",
        "enable_device_feature_synchronization",
        "enable_dnd",
        "enable_call_forwarding_always",
        "enable_call_forwarding_busy",
        "enable_call_forwarding_no_answer",
        "enable_acd",
        "enable_executive",
        "enable_executive_assistant",
        "enable_security_classification",
        "enable_call_recording",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("line_mode", "lineMode", str, is_required=True),
            E(
                "enable_device_feature_synchronization",
                "enableDeviceFeatureSynchronization",
                bool,
                is_required=True,
            ),
            E("enable_dnd", "enableDnd", bool, is_required=True),
            E(
                "enable_call_forwarding_always",
                "enableCallForwardingAlways",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_forwarding_busy",
                "enableCallForwardingBusy",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_forwarding_no_answer",
                "enableCallForwardingNoAnswer",
                bool,
                is_required=True,
            ),
            E("enable_acd", "enableAcd", bool, is_required=True),
            E("enable_executive", "enableExecutive", bool, is_required=True),
            E(
                "enable_executive_assistant",
                "enableExecutiveAssistant",
                bool,
                is_required=True,
            ),
            E(
                "enable_security_classification",
                "enableSecurityClassification",
                bool,
                is_required=True,
            ),
            E("enable_call_recording", "enableCallRecording", bool, is_required=True),
        )


class UserDevicePoliciesGetResponse21(OCIResponse):
    """
    Response to ``UserDevicePoliciesGetRequest21()``.

    enableDeviceFeatureSynchronization is ignored by the application server in Multiple
    User Shared mode.

    Attributes:
        line_mode: lineMode
        enable_device_feature_synchronization: enableDeviceFeatureSynchronization
        enable_dnd: enableDnd
        enable_call_forwarding_always: enableCallForwardingAlways
        enable_call_forwarding_busy: enableCallForwardingBusy
        enable_call_forwarding_no_answer: enableCallForwardingNoAnswer
        enable_acd: enableAcd
        enable_executive: enableExecutive
        enable_executive_assistant: enableExecutiveAssistant
        enable_security_classification: enableSecurityClassification
        enable_call_recording: enableCallRecording
        enable_call_decline: enableCallDecline
    """

    __slots__ = [
        "line_mode",
        "enable_device_feature_synchronization",
        "enable_dnd",
        "enable_call_forwarding_always",
        "enable_call_forwarding_busy",
        "enable_call_forwarding_no_answer",
        "enable_acd",
        "enable_executive",
        "enable_executive_assistant",
        "enable_security_classification",
        "enable_call_recording",
        "enable_call_decline",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("line_mode", "lineMode", str, is_required=True),
            E(
                "enable_device_feature_synchronization",
                "enableDeviceFeatureSynchronization",
                bool,
                is_required=True,
            ),
            E("enable_dnd", "enableDnd", bool, is_required=True),
            E(
                "enable_call_forwarding_always",
                "enableCallForwardingAlways",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_forwarding_busy",
                "enableCallForwardingBusy",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_forwarding_no_answer",
                "enableCallForwardingNoAnswer",
                bool,
                is_required=True,
            ),
            E("enable_acd", "enableAcd", bool, is_required=True),
            E("enable_executive", "enableExecutive", bool, is_required=True),
            E(
                "enable_executive_assistant",
                "enableExecutiveAssistant",
                bool,
                is_required=True,
            ),
            E(
                "enable_security_classification",
                "enableSecurityClassification",
                bool,
                is_required=True,
            ),
            E("enable_call_recording", "enableCallRecording", bool, is_required=True),
            E("enable_call_decline", "enableCallDecline", bool, is_required=True),
        )


class UserDirectedCallPickupWithBargeInGetResponse(OCIResponse):
    """
    Response to ``UserDirectedCallPickupWithBargeInGetRequest()``.


    Attributes:
        enable_barge_in_warning_tone: enableBargeInWarningTone
    """

    __slots__ = [
        "enable_barge_in_warning_tone",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_barge_in_warning_tone",
                "enableBargeInWarningTone",
                bool,
                is_required=True,
            ),
        )


class UserDirectedCallPickupWithBargeInGetResponse14sp7(OCIResponse):
    """
    Response to ``UserDirectedCallPickupWithBargeInGetRequest14sp7()``.


    Attributes:
        enable_barge_in_warning_tone: enableBargeInWarningTone
        enable_automatic_target_selection: enableAutomaticTargetSelection
    """

    __slots__ = [
        "enable_barge_in_warning_tone",
        "enable_automatic_target_selection",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_barge_in_warning_tone",
                "enableBargeInWarningTone",
                bool,
                is_required=True,
            ),
            E(
                "enable_automatic_target_selection",
                "enableAutomaticTargetSelection",
                bool,
                is_required=True,
            ),
        )


class UserDnGetActivationListResponse(OCIResponse):
    """
    Response to ``UserDnGetActivationListRequest()``.

    The response contains a table with columns: "Phone Number", and "Activated". The
    "Phone Number" column contains a single DN. The "Activated" column indicates if the
    phone number is activated or not.

    Attributes:
        dn_table: dnTable
    """

    __slots__ = [
        "dn_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "dn_table",
                "dnTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserDoNotDisturbGetResponse(OCIResponse):
    """
    Response to ``UserDoNotDisturbGetRequest()``.


    Attributes:
        is_active: isActive
        ring_splash: ringSplash
    """

    __slots__ = [
        "is_active",
        "ring_splash",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("ring_splash", "ringSplash", bool, is_required=True),
        )


class UserDualModeVCCGetResponse(OCIResponse):
    """
    Response to ``UserDualModeVCCGetRequest()``

    Attributes:
        subscriber_user_name: subscriberUserName
    """

    __slots__ = [
        "subscriber_user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("subscriber_user_name", "subscriberUserName", str),
        )


class UserEnhancedCallLogsGetListResponse17sp4(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest17sp4()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest17sp4()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of MixedCallLogsEntry will be returned
    if the call logs are stored on CDS A list of ExtendedMixedCallLogsEntry will be
    returned if the call logs are stored on DBS The logs are sorted by date/time of the
    call.  Replaced by UserEnhancedCallLogsGetListResponse17sp4V2. Originally deprecated
    in release 20.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        legacy_entry: legacyEntry
        extended_entry: extendedEntry
    """

    __slots__ = [
        "total_number_of_rows",
        "legacy_entry",
        "extended_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E("legacy_entry", "legacyEntry", str, is_complex=True),  # unknown
            E("extended_entry", "extendedEntry", str, is_complex=True),  # unknown
        )


class UserEnhancedCallLogsGetListResponse20(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest20()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest20()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of MixedCallLogsEntry will be returned
    if the call logs are stored on CDS A list of ExtendedMixedCallLogsEntry20 will be
    returned if the call logs are stored on DBS The logs are sorted by date/time of the
    call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        legacy_entry: legacyEntry
        extended_entry: extendedEntry
    """

    __slots__ = [
        "total_number_of_rows",
        "legacy_entry",
        "extended_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E("legacy_entry", "legacyEntry", str, is_complex=True),  # unknown
            E("extended_entry", "extendedEntry", str, is_complex=True),  # unknown
        )


class UserEnhancedCallLogsGetListResponse21(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest21()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest21()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of MixedCallLogsEntry will be returned
    if the call logs are stored on CDS A list of ExtendedMixedCallLogsEntry21 will be
    returned if the call logs are stored on DBS The logs are sorted by date/time of the
    call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        legacy_entry: legacyEntry
        extended_entry: extendedEntry
    """

    __slots__ = [
        "total_number_of_rows",
        "legacy_entry",
        "extended_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E("legacy_entry", "legacyEntry", str, is_complex=True),  # unknown
            E("extended_entry", "extendedEntry", str, is_complex=True),  # unknown
        )


class UserEnterpriseCommonPhoneListGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserEnterpriseCommonPhoneListGetPagedSortedListRequest()``.

    The response contains the enterprise's common phone list.  The response contains a
    table with column headings: "Name" and "Phone Number".

    Attributes:
        total_number_of_rows: totalNumberOfRows
        enterprise_common_phone_list_table: enterpriseCommonPhoneListTable
    """

    __slots__ = [
        "total_number_of_rows",
        "enterprise_common_phone_list_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "enterprise_common_phone_list_table",
                "enterpriseCommonPhoneListTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserExecutiveAssistantGetResponse(OCIResponse):
    """
    Response to the ``UserExecutiveAssistantGetRequest()``.

    Contains the executive assistant setting and a table of executives this assistant has
    been assigned to.  The criteria table's column headings are: "User Id", "Last Name",
    "First Name", ", "Hiragana Last Name", "Hiragana First Name", "Phone Number",
    "Extension", "Department", "Email Address", "Assistant Opt-in Status" and "Executive
    Allow Opt-in". The possible values for "Assistant Opt-in Status" and "Executive Allow
    Opt-in" columns are "true" and "false".

    Attributes:
        enable_divert: enableDivert
        divert_to_phone_number: divertToPhoneNumber
        executive_table: executiveTable
    """

    __slots__ = [
        "enable_divert",
        "divert_to_phone_number",
        "executive_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_divert", "enableDivert", bool, is_required=True),
            E("divert_to_phone_number", "divertToPhoneNumber", str),
            E(
                "executive_table",
                "executiveTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserExecutiveGetAssistantResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetAssistantsRequest()``.

    Contains the assistant setting and a table of assigned assistants.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department", "Email Address" and "Opt-in".
    The possible values for "Opt-in" column are "true" and "false".

    Attributes:
        allow_opt_in_out: allowOptInOut
        assistant_user_table: assistantUserTable
    """

    __slots__ = [
        "allow_opt_in_out",
        "assistant_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_opt_in_out", "allowOptInOut", bool, is_required=True),
            E(
                "assistant_user_table",
                "assistantUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserExecutiveGetAvailableAssistantListResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetAvailableAssistantListResponse()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department" and
    "Email Address".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserExecutiveGetFilteringResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetFilteringRequest()``.

    Contains the filtering setting and a table of filtering criteria.  The criteria
    table's column headings are: "Is Active", "Criteria Name", "Time Schedule", "Calls
    From", "Filter", "Holiday Schedule", "Calls To Type", "Calls To Number" and "Calls To
    Extension". The "Filter" column can contain "true" or "false". The possible values for
    the "Calls To Type" column are the following or a combination of them separated by
    comma: - Primary - Alternate X (where x is a number between 1 and 10) - Mobility The
    possible values for the "Calls To Number" column are the following or a combination of
    them separated by comma: - The value of the phone number for the corresponding Calls
    To Type, when the number is available.  i.e.  Alternate 1 may have extension, but no
    number.  - When no number is available a blank space is provided instead.  The
    possible values for the "Calls To Extension" column are the following or a combination
    of them separated by comma: - The value of the extension for the corresponding Calls
    To Type, when the extension is available.  i.e.  Primary may have number, but no
    extension.  - For Mobility Calls To Type, this is always blank.  - When no extension
    is available a blank space is provided instead.

    Attributes:
        enable_filtering: enableFiltering
        filtering_mode: filteringMode
        simple_filter_type: simpleFilterType
        criteria_table: criteriaTable
    """

    __slots__ = [
        "enable_filtering",
        "filtering_mode",
        "simple_filter_type",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_filtering", "enableFiltering", bool, is_required=True),
            E("filtering_mode", "filteringMode", str, is_required=True),
            E("simple_filter_type", "simpleFilterType", str, is_required=True),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserExecutiveGetScreeningAlertingResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetScreeningAlertingRequest()``.

    Contains the screening and alerting settings for an executive.

    Attributes:
        enable_screening: enableScreening
        screening_alert_type: screeningAlertType
        alert_broad_works_mobility_location: alertBroadWorksMobilityLocation
        alert_broad_works_anywhere_locations: alertBroadWorksAnywhereLocations
        alert_shared_call_appearance_locations: alertSharedCallAppearanceLocations
        alerting_mode: alertingMode
        alerting_calling_line_id_name_mode: alertingCallingLineIdNameMode
        alerting_custom_calling_line_id_name: alertingCustomCallingLineIdName
        unicode_alerting_custom_calling_line_id_name:
            unicodeAlertingCustomCallingLineIdName
        alerting_calling_line_id_phone_number_mode: alertingCallingLineIdPhoneNumberMode
        alerting_custom_calling_line_id_phone_number:
            alertingCustomCallingLineIdPhoneNumber
        call_push_recall_number_of_rings: callPushRecallNumberOfRings
        next_assistant_number_of_rings: nextAssistantNumberOfRings
        enable_rollover: enableRollover
        rollover_wait_time_seconds: rolloverWaitTimeSeconds
        rollover_action: rolloverAction
        rollover_forward_to_phone_number: rolloverForwardToPhoneNumber
    """

    __slots__ = [
        "enable_screening",
        "screening_alert_type",
        "alert_broad_works_mobility_location",
        "alert_broad_works_anywhere_locations",
        "alert_shared_call_appearance_locations",
        "alerting_mode",
        "alerting_calling_line_id_name_mode",
        "alerting_custom_calling_line_id_name",
        "unicode_alerting_custom_calling_line_id_name",
        "alerting_calling_line_id_phone_number_mode",
        "alerting_custom_calling_line_id_phone_number",
        "call_push_recall_number_of_rings",
        "next_assistant_number_of_rings",
        "enable_rollover",
        "rollover_wait_time_seconds",
        "rollover_action",
        "rollover_forward_to_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_screening", "enableScreening", bool, is_required=True),
            E("screening_alert_type", "screeningAlertType", str, is_required=True),
            E(
                "alert_broad_works_mobility_location",
                "alertBroadWorksMobilityLocation",
                bool,
                is_required=True,
            ),
            E(
                "alert_broad_works_anywhere_locations",
                "alertBroadWorksAnywhereLocations",
                bool,
                is_required=True,
            ),
            E(
                "alert_shared_call_appearance_locations",
                "alertSharedCallAppearanceLocations",
                bool,
                is_required=True,
            ),
            E("alerting_mode", "alertingMode", str, is_required=True),
            E(
                "alerting_calling_line_id_name_mode",
                "alertingCallingLineIdNameMode",
                str,
                is_required=True,
            ),
            E(
                "alerting_custom_calling_line_id_name",
                "alertingCustomCallingLineIdName",
                str,
            ),
            E(
                "unicode_alerting_custom_calling_line_id_name",
                "unicodeAlertingCustomCallingLineIdName",
                str,
            ),
            E(
                "alerting_calling_line_id_phone_number_mode",
                "alertingCallingLineIdPhoneNumberMode",
                str,
                is_required=True,
            ),
            E(
                "alerting_custom_calling_line_id_phone_number",
                "alertingCustomCallingLineIdPhoneNumber",
                str,
            ),
            E(
                "call_push_recall_number_of_rings",
                "callPushRecallNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "next_assistant_number_of_rings",
                "nextAssistantNumberOfRings",
                int,
                is_required=True,
            ),
            E("enable_rollover", "enableRollover", bool, is_required=True),
            E("rollover_wait_time_seconds", "rolloverWaitTimeSeconds", int),
            E("rollover_action", "rolloverAction", str, is_required=True),
            E("rollover_forward_to_phone_number", "rolloverForwardToPhoneNumber", str),
        )


class UserExternalCallingLineIDDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserExternalCallingLineIDDeliveryGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserExternalCustomRingbackGetResponse(OCIResponse):
    """
    Response to ``UserExternalCustomRingbackGetRequest()``.


    Attributes:
        is_active: isActive
        use_setting_level: useSettingLevel
        sip_request_uri: sipRequestURI
    """

    __slots__ = [
        "is_active",
        "use_setting_level",
        "sip_request_uri",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("sip_request_uri", "sipRequestURI", str),
        )


class UserFaxMessagingGetResponse(OCIResponse):
    """
    Response to ``UserFaxMessagingGetRequest()``.


    Attributes:
        is_active: isActive
        phone_number: phoneNumber
        extension: extension
    """

    __slots__ = [
        "is_active",
        "phone_number",
        "extension",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
        )


class UserFaxMessagingGetResponse17(OCIResponse):
    """
    Response to ``UserFaxMessagingGetRequest17()``.


    Attributes:
        is_active: isActive
        phone_number: phoneNumber
        extension: extension
    """

    __slots__ = [
        "is_active",
        "phone_number",
        "extension",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
        )


class UserFaxMessagingGetResponse17sp1(OCIResponse):
    """
    Response to ``UserFaxMessagingGetRequest17sp1()``.


    Attributes:
        is_active: isActive
        phone_number: phoneNumber
        extension: extension
        alias: alias
    """

    __slots__ = [
        "is_active",
        "phone_number",
        "extension",
        "alias",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("alias", "alias", str, is_array=True),
        )


class UserFlexibleSeatingGuestGetAvailableHostListResponse(OCIResponse):
    """
    Response to the ``UserFlexibleSeatingGuestGetAvailableHostListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Association Limit Hours", "Enable Association Limit",

    Attributes:
        host_user_table: hostUserTable
    """

    __slots__ = [
        "host_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "host_user_table",
                "hostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGetListInGroupResponse(OCIResponse):
    """
    Response to ``UserGetListInGroupRequest()``.

    Contains a table with column headings : "User Id", "Last Name", "First Name",
    "Department", "Phone Number", "Phone Number Activated", "Email Address", "Hiragana
    Last Name", "Hiragana First Name", "In Trunk Group", "Extension" in a row for each
    user.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGetListInServiceProviderResponse(OCIResponse):
    """
    Response to ``UserGetListInServiceProviderRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Last Name", "First
    Name", "Department", "Phone Number", "Phone Number Activated", "Email Address",
    "Hiragana Last Name", "Hiragana First Name", "In Trunk Group", "Extension" in a row
    for each user.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGetListInSystemResponse(OCIResponse):
    """
    Response to ``UserGetListInSystemRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Service Provider Id"
    "Last Name", "First Name", "Department", "Phone Number", "Phone Number Activated",
    "Email Address", "Hiragana Last Name", "Hiragana First Name", "In Trunk Group",
    "Extension" in a row for each user.

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGetLoginInfoResponse(OCIResponse):
    """
    Response to ``UserGetLoginInfoRequest()`` If a phoneNumber is returned, it will be the
    primay DN of the user

    Attributes:
        login_type: loginType
        locale: locale
        encoding: encoding
        group_id: groupId
        service_provider_id: serviceProviderId
        is_enterprise: isEnterprise
        password_expires_days: passwordExpiresDays
        last_name: lastName
        first_name: firstName
        user_id: userId
        phone_number: phoneNumber
    """

    __slots__ = [
        "login_type",
        "locale",
        "encoding",
        "group_id",
        "service_provider_id",
        "is_enterprise",
        "password_expires_days",
        "last_name",
        "first_name",
        "user_id",
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("login_type", "loginType", str, is_required=True),
            E("locale", "locale", str, is_required=True),
            E("encoding", "encoding", str, is_required=True),
            E("group_id", "groupId", str),
            E("service_provider_id", "serviceProviderId", str),
            E("is_enterprise", "isEnterprise", bool, is_required=True),
            E("password_expires_days", "passwordExpiresDays", int),
            E("last_name", "lastName", str),
            E("first_name", "firstName", str),
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str),
        )


class UserGetRegistrationListResponse(OCIResponse):
    """
    Response to ``UserGetRegistrationListRequest()``.

    The registrationTable table column headings are: "Device Level", "Device Name",
    "Order", "URI", "Expiration", "Line/Port", "Endpoint Type"", "Public Net Address",
    "Public Port", "Private Net Address", "Private Port", "User Agent", "Lockout Started",
    "Lockout Expires", "Lockout Count". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.  The "Line/Port" column in IMS mode can be any
    Public User Identity which can be either a SIPURI or a TELURI. The expiration column
    will be empty when the registration is static.  The Endpoint Type column contains one
    of the enumerated EndpointType values.  The Endpoint Type is empty when the
    registration is against a TELURI. The table is sorted by: telURI (after SIPURI),
    Line/Port, static (after dynamic), order.  Lockout times are shown in GMT offset.
    When a permanent lockout is shown, the "Lockout Expires" column is empty and the
    "Lockout Count" column contains the word Permanent.

    Attributes:
        registration_table: registrationTable
    """

    __slots__ = [
        "registration_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "registration_table",
                "registrationTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGetServiceInstanceListInServiceProviderResponse(OCIResponse):
    """
    Response to ``UserGetServiceInstanceListInServiceProviderRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Service Type", "Name",
    "Phone Number", "Extension", "Department" in a row for each Service Instance.
    Possible values for Service Type column are ServiceType enums.

    Attributes:
        service_instance_table: serviceInstanceTable
    """

    __slots__ = [
        "service_instance_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_table",
                "serviceInstanceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGetServiceInstanceListInSystemResponse(OCIResponse):
    """
    Response to ``UserGetServiceInstanceListInSystemRequest()``.

    Contains a table with column headings : "User Id", "Group Id", "Serive Provider Id",
    "Service Type", "Name", "Phone Number", "Extension" in a row for each Service
    Instance.  Possible values for Service Type column are ServiceType enums.

    Attributes:
        service_instance_table: serviceInstanceTable
    """

    __slots__ = [
        "service_instance_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_table",
                "serviceInstanceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGroupCommonPhoneListGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserGroupCommonPhoneListGetPagedSortedListRequest()``.

    The response contains the group's common phone list.  The response contains a table
    with column headings: "Name" and "Phone Number".

    Attributes:
        total_number_of_rows: totalNumberOfRows
        group_common_phone_list_table: groupCommonPhoneListTable
    """

    __slots__ = [
        "total_number_of_rows",
        "group_common_phone_list_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "group_common_phone_list_table",
                "groupCommonPhoneListTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGroupCustomContactDirectoryGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserGroupCustomContactDirectoryGetPagedSortedListRequest()``.

    Returns the number of entries that would be returned if the response Was not page size
    restricted.

    The response contains all the contacts in the group's given custom contact directory.
    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Virtual On-Net Phone Number", "Group Id", "Is
    Virtual On-Net User", "Department", "Phone Number", "Extension", "Mobile", "Email
    Address", "Yahoo Id", "Title", "IMP Id". If the entry represents a Virtual On-Net user
    then "User Id" is blank, the "Virtual On-Net Phone Number" contains the phone Number
    of the Virtual On-Net user, the "Group Id" contains the Virtual On-Net user's group
    and the "Is Virtual On-Net User" contains true.  If the entry represents a BroadWorks
    user then the "User Id" contains his BroadWorks userId, the "Virtual On-Net Phone
    Number" and "Group Id" fields are field is blank and the "Is Virtual On-Net User"
    contains false.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        user_table: userTable
    """

    __slots__ = [
        "total_number_of_rows",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserGroupPagingGetListResponse(OCIResponse):
    """
    Response to the ``UserGroupPagingGetListRequest()``.

    The groupPagingTable contains columns: "Name", "Phone Number", "Extension" and "Is
    Active" The column value for "Is Active" can either be true, or false.

    Attributes:
        paging_group_table: pagingGroupTable
    """

    __slots__ = [
        "paging_group_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "paging_group_table",
                "pagingGroupTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserHolidayScheduleGetListResponse(OCIResponse):
    """
    Response to the ``UserHolidayScheduleGetListRequest()``.

    The response contains all the user's personal and user's group holiday schedule names.

    Attributes:
        holiday_schedule_table: holidayScheduleTable
    """

    __slots__ = [
        "holiday_schedule_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "holiday_schedule_table",
                "holidayScheduleTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserHotelingGuestGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserHotelingGuestGetAvailableUserListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Association Limit Hours", "Enable Association
    Limit", "Phone Number", "Extension", "Department", "Email Address".

    Attributes:
        host_user_table: hostUserTable
    """

    __slots__ = [
        "host_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "host_user_table",
                "hostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserHotelingGuestGetResponse14(OCIResponse):
    """
    Response to ``UserHotelingGuestGetRequest14()``.

    Replaced By: ``UserSharedCallAppearanceAddEndpointRequest14sp2()``

    Attributes:
        is_active: isActive
        association_limit_hours: associationLimitHours
        host_user_id: hostUserId
        host_last_name: hostLastName
        host_first_name: hostFirstName
        host_association_date_time: hostAssociationDateTime
    """

    __slots__ = [
        "is_active",
        "association_limit_hours",
        "host_user_id",
        "host_last_name",
        "host_first_name",
        "host_association_date_time",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("host_user_id", "hostUserId", str),
            E("host_last_name", "hostLastName", str),
            E("host_first_name", "hostFirstName", str),
            E("host_association_date_time", "hostAssociationDateTime", str),
        )


class UserHotelingGuestGetResponse14sp2(OCIResponse):
    """
    Response to ``UserHotelingGuestGetRequest14()``.

    Replaced by: ``UserHotelingGuestGetResponse14sp4()``

    Attributes:
        is_active: isActive
        association_limit_hours: associationLimitHours
        host_user_id: hostUserId
        host_last_name: hostLastName
        host_first_name: hostFirstName
        host_association_date_time: hostAssociationDateTime
        host_association_limit_hours: hostAssociationLimitHours
    """

    __slots__ = [
        "is_active",
        "association_limit_hours",
        "host_user_id",
        "host_last_name",
        "host_first_name",
        "host_association_date_time",
        "host_association_limit_hours",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("host_user_id", "hostUserId", str),
            E("host_last_name", "hostLastName", str),
            E("host_first_name", "hostFirstName", str),
            E("host_association_date_time", "hostAssociationDateTime", str),
            E("host_association_limit_hours", "hostAssociationLimitHours", int),
        )


class UserHotelingGuestGetResponse14sp4(OCIResponse):
    """
    Response to ``UserHotelingGuestGetRequest14sp4()``

    Attributes:
        is_active: isActive
        enable_association_limit: enableAssociationLimit
        association_limit_hours: associationLimitHours
        host_user_id: hostUserId
        host_last_name: hostLastName
        host_first_name: hostFirstName
        host_association_date_time: hostAssociationDateTime
        host_enforces_association_limit: hostEnforcesAssociationLimit
        host_association_limit_hours: hostAssociationLimitHours
    """

    __slots__ = [
        "is_active",
        "enable_association_limit",
        "association_limit_hours",
        "host_user_id",
        "host_last_name",
        "host_first_name",
        "host_association_date_time",
        "host_enforces_association_limit",
        "host_association_limit_hours",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "enable_association_limit",
                "enableAssociationLimit",
                bool,
                is_required=True,
            ),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("host_user_id", "hostUserId", str),
            E("host_last_name", "hostLastName", str),
            E("host_first_name", "hostFirstName", str),
            E("host_association_date_time", "hostAssociationDateTime", str),
            E("host_enforces_association_limit", "hostEnforcesAssociationLimit", bool),
            E("host_association_limit_hours", "hostAssociationLimitHours", int),
        )


class UserHotelingHostGetResponse14(OCIResponse):
    """
    Response to ``UserHotelingHostGetRequest14()``.

    Replaced by: ``UserHotelingHostGetResponse14sp4()``

    Attributes:
        is_active: isActive
        association_limit_hours: associationLimitHours
        access_level: accessLevel
        guest_last_name: guestLastName
        guest_first_name: guestFirstName
        guest_phone_number: guestPhoneNumber
        guest_extension: guestExtension
        guest_location_dialing_code: guestLocationDialingCode
        guest_association_date_time: guestAssociationDateTime
    """

    __slots__ = [
        "is_active",
        "association_limit_hours",
        "access_level",
        "guest_last_name",
        "guest_first_name",
        "guest_phone_number",
        "guest_extension",
        "guest_location_dialing_code",
        "guest_association_date_time",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("access_level", "accessLevel", str, is_required=True),
            E("guest_last_name", "guestLastName", str),
            E("guest_first_name", "guestFirstName", str),
            E("guest_phone_number", "guestPhoneNumber", str),
            E("guest_extension", "guestExtension", str),
            E("guest_location_dialing_code", "guestLocationDialingCode", str),
            E("guest_association_date_time", "guestAssociationDateTime", str),
        )


class UserHotelingHostGetResponse14sp4(OCIResponse):
    """
    Response to ``UserHotelingHostGetRequest14sp4()``.


    Attributes:
        is_active: isActive
        enforce_association_limit: enforceAssociationLimit
        association_limit_hours: associationLimitHours
        access_level: accessLevel
        guest_last_name: guestLastName
        guest_first_name: guestFirstName
        guest_phone_number: guestPhoneNumber
        guest_extension: guestExtension
        guest_location_dialing_code: guestLocationDialingCode
        guest_association_date_time: guestAssociationDateTime
    """

    __slots__ = [
        "is_active",
        "enforce_association_limit",
        "association_limit_hours",
        "access_level",
        "guest_last_name",
        "guest_first_name",
        "guest_phone_number",
        "guest_extension",
        "guest_location_dialing_code",
        "guest_association_date_time",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "enforce_association_limit",
                "enforceAssociationLimit",
                bool,
                is_required=True,
            ),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("access_level", "accessLevel", str, is_required=True),
            E("guest_last_name", "guestLastName", str),
            E("guest_first_name", "guestFirstName", str),
            E("guest_phone_number", "guestPhoneNumber", str),
            E("guest_extension", "guestExtension", str),
            E("guest_location_dialing_code", "guestLocationDialingCode", str),
            E("guest_association_date_time", "guestAssociationDateTime", str),
        )


class UserHotelingHostGetResponse17(OCIResponse):
    """
    Response to ``UserHotelingHostGetRequest17()``.


    Attributes:
        is_active: isActive
        enforce_association_limit: enforceAssociationLimit
        association_limit_hours: associationLimitHours
        access_level: accessLevel
        guest_last_name: guestLastName
        guest_first_name: guestFirstName
        guest_phone_number: guestPhoneNumber
        guest_extension: guestExtension
        guest_location_dialing_code: guestLocationDialingCode
        guest_association_date_time: guestAssociationDateTime
    """

    __slots__ = [
        "is_active",
        "enforce_association_limit",
        "association_limit_hours",
        "access_level",
        "guest_last_name",
        "guest_first_name",
        "guest_phone_number",
        "guest_extension",
        "guest_location_dialing_code",
        "guest_association_date_time",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "enforce_association_limit",
                "enforceAssociationLimit",
                bool,
                is_required=True,
            ),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("access_level", "accessLevel", str, is_required=True),
            E("guest_last_name", "guestLastName", str),
            E("guest_first_name", "guestFirstName", str),
            E("guest_phone_number", "guestPhoneNumber", str),
            E("guest_extension", "guestExtension", str),
            E("guest_location_dialing_code", "guestLocationDialingCode", str),
            E("guest_association_date_time", "guestAssociationDateTime", str),
        )


class UserINIntegrationGetResponse(OCIResponse):
    """
    Response to ``UserINIntegrationGetRequest()``

    Attributes:
        originating_service_key: originatingServiceKey
        terminating_service_key: terminatingServiceKey
    """

    __slots__ = [
        "originating_service_key",
        "terminating_service_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("originating_service_key", "originatingServiceKey", int),
            E("terminating_service_key", "terminatingServiceKey", int),
        )


class UserInCallServiceActivationGetResponse(OCIResponse):
    """
    Response to ``UserInCallServiceActivationGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserIntegratedIMPGetResponse(OCIResponse):
    """
    Response to the ``UserIntegratedIMPGetRequest()``.

    The response contains the Integrated IMP specific service attributes for the user.

    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserIntelligentNetworkServiceControlGetResponse(OCIResponse):
    """
    Response to ``UserIntelligentNetworkServiceControlGetRequest()``.


    Attributes:
        pre_answer_actions_enabled: preAnswerActionsEnabled
    """

    __slots__ = [
        "pre_answer_actions_enabled",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "pre_answer_actions_enabled",
                "preAnswerActionsEnabled",
                bool,
                is_required=True,
            ),
        )


class UserInterceptUserGetResponse(OCIResponse):
    """
    Response to the ``UserInterceptUserGetRequest()``.

    Replaced By: ``UserInterceptUserGetResponse16()``

    Attributes:
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file_description: audioFileDescription
        video_file_description: videoFileDescription
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
    """

    __slots__ = [
        "is_active",
        "announcement_selection",
        "audio_file_description",
        "video_file_description",
        "play_new_phone_number",
        "new_phone_number",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("video_file_description", "videoFileDescription", str),
            E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
            E("new_phone_number", "newPhoneNumber", str),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
        )


class UserInterceptUserGetResponse16(OCIResponse):
    """
    Response to the ``UserInterceptUserGetRequest16()``.

    Replaced By: ``UserInterceptUserGetResponse16sp1()``

    Attributes:
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
    """

    __slots__ = [
        "is_active",
        "announcement_selection",
        "audio_file_description",
        "audio_media_type",
        "video_file_description",
        "video_media_type",
        "play_new_phone_number",
        "new_phone_number",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
            E("new_phone_number", "newPhoneNumber", str),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
        )


class UserInterceptUserGetResponse16sp1(OCIResponse):
    """
    Response to the ``UserInterceptUserGetRequest16sp1()``.


    Attributes:
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
        reroute_outbound_calls: rerouteOutboundCalls
        outbound_reroute_phone_number: outboundReroutePhoneNumber
        allow_outbound_local_calls: allowOutboundLocalCalls
        inbound_call_mode: inboundCallMode
        alternate_blocking_announcement: alternateBlockingAnnouncement
        route_to_voice_mail: routeToVoiceMail
    """

    __slots__ = [
        "is_active",
        "announcement_selection",
        "audio_file_description",
        "audio_media_type",
        "video_file_description",
        "video_media_type",
        "play_new_phone_number",
        "new_phone_number",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "reroute_outbound_calls",
        "outbound_reroute_phone_number",
        "allow_outbound_local_calls",
        "inbound_call_mode",
        "alternate_blocking_announcement",
        "route_to_voice_mail",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("play_new_phone_number", "playNewPhoneNumber", bool, is_required=True),
            E("new_phone_number", "newPhoneNumber", str),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("reroute_outbound_calls", "rerouteOutboundCalls", bool, is_required=True),
            E("outbound_reroute_phone_number", "outboundReroutePhoneNumber", str),
            E(
                "allow_outbound_local_calls",
                "allowOutboundLocalCalls",
                bool,
                is_required=True,
            ),
            E("inbound_call_mode", "inboundCallMode", str, is_required=True),
            E(
                "alternate_blocking_announcement",
                "alternateBlockingAnnouncement",
                bool,
                is_required=True,
            ),
            E("route_to_voice_mail", "routeToVoiceMail", bool, is_required=True),
        )


class UserInternalCallingLineIDDeliveryGetResponse(OCIResponse):
    """
    Response to ``UserInternalCallingLineIDDeliveryGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserLDAPIntegrationGetDirectoryListResponse(OCIResponse):
    """
    Response to ``UserLDAPIntegrationGetDirectoryListRequest()``.

    The table is a 4 column table.  The column headings are defined by the group's LDAP
    settings.

    Attributes:
        ldap_entry_table: ldapEntryTable
        search_label: searchLabel
        has_more_entries: hasMoreEntries
        last_page_number: lastPageNumber
    """

    __slots__ = [
        "ldap_entry_table",
        "search_label",
        "has_more_entries",
        "last_page_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "ldap_entry_table",
                "ldapEntryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E("search_label", "searchLabel", str, is_required=True),
            E("has_more_entries", "hasMoreEntries", bool, is_required=True),
            E("last_page_number", "lastPageNumber", int),
        )


class UserLegacyAutomaticCallbackGetResponse(OCIResponse):
    """
    Response to ``UserLegacyAutomaticCallbackGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserLinePortGetListResponse(OCIResponse):
    """
    Response to ``UserLinePortGetListRequest()``.

    Contains a table of line ports configured for a user The column headings are: "Line
    Port", "Line Port Type", "In Trunk Group", "Contact", "Contact2", "Contact3",
    "Contact4", "Contact5", " Authentication Mode ", and "Auto-Config Soft Client".

    Attributes:
        line_port_table: linePortTable
    """

    __slots__ = [
        "line_port_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "line_port_table",
                "linePortTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserMWIDeliveryToMobileEndpointGetResponse(OCIResponse):
    """
    Response to ``UserMWIDeliveryToMobileEndpointGetRequest()``.


    Attributes:
        is_active: isActive
        mobile_phone_number: mobilePhoneNumber
    """

    __slots__ = [
        "is_active",
        "mobile_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("mobile_phone_number", "mobilePhoneNumber", str),
        )


class UserMeetMeConferencingAddConferenceResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingAddConferenceRequest()``.


    Attributes:
        conference_id: conferenceId
        moderator_pin: moderatorPin
    """

    __slots__ = [
        "conference_id",
        "moderator_pin",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_id", "conferenceId", str, is_required=True),
            E("moderator_pin", "moderatorPin", str, is_required=True),
        )


class UserMeetMeConferencingAddConferenceResponse19(OCIResponse):
    """
    Response to ``UserMeetMeConferencingAddConferenceRequest19()``.

    Contains the information of a conference.

    Attributes:
        conference_id: conferenceId
        moderator_pin: moderatorPin
        security_pin: securityPin
    """

    __slots__ = [
        "conference_id",
        "moderator_pin",
        "security_pin",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_id", "conferenceId", str, is_required=True),
            E("moderator_pin", "moderatorPin", str, is_required=True),
            E("security_pin", "securityPin", str),
        )


class UserMeetMeConferencingGetAvailableDelegateListResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetAvailableDelegateListRequest()``.

    Contains all hosts assigned on a bridge.  The table has column headings: "User Id",
    "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone
    Number", "Extension", "Department" and "Email Address".

    Attributes:
        conference_delegate_user_table: conferenceDelegateUserTable
    """

    __slots__ = [
        "conference_delegate_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "conference_delegate_user_table",
                "conferenceDelegateUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserMeetMeConferencingGetBridgeListResponse(OCIResponse):
    """
    Response to the ``UserMeetMeConferencingGetBridgeListRequest()``.

    Contains a table with column headings: "Bridge Id", "Name", "Phone Number",
    "Extension", "Ports", and "Is Active" The column values for "Is Active" can either be
    true, or false.

    Attributes:
        conference_bridge_table: conferenceBridgeTable
    """

    __slots__ = [
        "conference_bridge_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "conference_bridge_table",
                "conferenceBridgeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserMeetMeConferencingGetConferenceDelegateListResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceDelegateListRequest()``.

    Contains a table with table heading:"User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name","Phone Number", "Extension", "Department" and "Email
    Address".

    Attributes:
        conference_delegate_user_table: conferenceDelegateUserTable
    """

    __slots__ = [
        "conference_delegate_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "conference_delegate_user_table",
                "conferenceDelegateUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserMeetMeConferencingGetConferenceGreetingResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceGreetingRequest()``.

    Contains the information of a conference custom greeting.

    Attributes:
        play_entrance_greeting: playEntranceGreeting
        entrance_greeting_audio_file: entranceGreetingAudioFile
        entrance_greeting_media_type: entranceGreetingMediaType
    """

    __slots__ = [
        "play_entrance_greeting",
        "entrance_greeting_audio_file",
        "entrance_greeting_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_greeting", "playEntranceGreeting", bool, is_required=True),
            E("entrance_greeting_audio_file", "entranceGreetingAudioFile", str),
            E("entrance_greeting_media_type", "entranceGreetingMediaType", str),
        )


class UserMeetMeConferencingGetConferenceListResponse(OCIResponse):
    """
    Response to the ``UserMeetMeConferencingGetConferenceListRequest()``.

    Contains a table with column headings: "Bridge Id", "Conference Id", "Title", "Bridge
    Name", "Status", "Type", "Start Time", "Last Name", "First Name" and "Host Id". The
    column values for "Status" can be Active, Inactive, or Expired.  The column values for
    "Type" can be Reservationless, One Time, Recurring Daily, Recurring Weekly, Recurring
    Monthly, or Recurring Yearly.  Start Time is in the format "yyyy-MM-
    dd'T'HH:mm:ss:SSSZ". Example: 2010-10-01T09:30:00:000-0400.

    Attributes:
        conference_table: conferenceTable
    """

    __slots__ = [
        "conference_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "conference_table",
                "conferenceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserMeetMeConferencingGetConferenceRecordingListResponse(OCIResponse):
    """
    Response to the ``UserMeetMeConferencingGetConferenceRecordingListRequest()``.

    Contains a table with column headings: "Bridge Id", "Conference Id", "Conference
    Title", "Bridge Name", "Start Time", "File Size", and "URL". Start Time is in the
    format "yyyy-MM-dd'T'HH:mm:ss:SSSZ". Example: 2010-10-01T09:30:00:000-0400.

    Attributes:
        conference_recording_table: conferenceRecordingTable
    """

    __slots__ = [
        "conference_recording_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "conference_recording_table",
                "conferenceRecordingTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserMusicOnHoldGetResponse(OCIResponse):
    """
    Response to ``UserMusicOnHoldGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserNetworkConferencingGetResponse(OCIResponse):
    """
    Response to ``UserNetworkConferencingGetRequest()``.


    Attributes:
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
    """

    __slots__ = [
        "conference_uri",
        "max_conference_parties",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int, is_required=True),
        )


class UserNumberPortabilityAnnouncementGetResponse(OCIResponse):
    """
    Response to the ``UserNumberPortabilityAnnouncementGetRequest()``.

    The response contains the user Number Portability attributes.

    Attributes:
        enable: enable
    """

    __slots__ = [
        "enable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable", "enable", bool, is_required=True),
        )


class UserOCICallControlApplicationGetListResponse(OCIResponse):
    """
    Response to ``UserOCICallControlApplicationGetListRequest()``.


    Attributes:
        application_id: applicationId
    """

    __slots__ = [
        "application_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_array=True),
        )


class UserOutgoingCallingPlanAuthorizationCodeGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanAuthorizationCodeGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
    """

    __slots__ = [
        "use_custom_settings",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
        )


class UserOutgoingCallingPlanSustainedAuthorizationCodeGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanAuthorizationCodeGetRequest()``.


    Attributes:
        code: code
    """

    __slots__ = [
        "code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("code", "code", str),
        )


class UserOutlookIntegrationGetResponse(OCIResponse):
    """
    Response to ``UserOutlookIntegrationGetRequest()``.


    Attributes:
        is_active: isActive
        contact_retrieval_selection: contactRetrievalSelection
    """

    __slots__ = [
        "is_active",
        "contact_retrieval_selection",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "contact_retrieval_selection",
                "contactRetrievalSelection",
                str,
                is_required=True,
            ),
        )


class UserPasswordInfoGetResponse(OCIResponse):
    """
    Response to ``UserPasswordInfoGetRequest()``.


    Attributes:
        is_login_disabled: isLoginDisabled
        expiration_days: expirationDays
        does_not_expire: doesNotExpire
    """

    __slots__ = [
        "is_login_disabled",
        "expiration_days",
        "does_not_expire",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_login_disabled", "isLoginDisabled", bool, is_required=True),
            E("expiration_days", "expirationDays", int),
            E("does_not_expire", "doesNotExpire", bool),
        )


class UserPersonalAssistantExclusionNumberGetListResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantExclusionNumberGetListRequest()``.

    Contains a table with column headings: "Number", "Description".

    Attributes:
        exclusion_number_table: exclusionNumberTable
    """

    __slots__ = [
        "exclusion_number_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "exclusion_number_table",
                "exclusionNumberTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPersonalAssistantExclusionNumberGetResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantExclusionNumberGetRequest()``

    Attributes:
        description: description
    """

    __slots__ = [
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
        )


class UserPersonalAssistantGetResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantGetRequest()``.

    The response contains the user Personal Assistant information".

    Attributes:
        presence: presence
        enable_transfer_to_attendant: enableTransferToAttendant
        attendant_number: attendantNumber
        enable_ring_splash: enableRingSplash
        enable_expiration_time: enableExpirationTime
        expiration_time: expirationTime
    """

    __slots__ = [
        "presence",
        "enable_transfer_to_attendant",
        "attendant_number",
        "enable_ring_splash",
        "enable_expiration_time",
        "expiration_time",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("presence", "presence", str, is_required=True),
            E(
                "enable_transfer_to_attendant",
                "enableTransferToAttendant",
                bool,
                is_required=True,
            ),
            E("attendant_number", "attendantNumber", str),
            E("enable_ring_splash", "enableRingSplash", bool, is_required=True),
            E("enable_expiration_time", "enableExpirationTime", bool, is_required=True),
            E("expiration_time", "expirationTime", str),
        )


class UserPersonalPhoneListGetPagedSortedListResponse(OCIResponse):
    """
    Response to the ``UserPersonalPhoneListGetPagedSortedListRequest()``.

    The response contains a user's personal phone list.  The response contains a table
    with column headings: "Name" and "Phone Number".

    Attributes:
        total_number_of_rows: totalNumberOfRows
        personal_phone_list_table: personalPhoneListTable
    """

    __slots__ = [
        "total_number_of_rows",
        "personal_phone_list_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "personal_phone_list_table",
                "personalPhoneListTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPhoneDirectoryGetListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetListRequest()``.

    The "My Room Room Id" and "My Room Bridge Id" are only populated for users assigned
    the "Collaborate-Audio" service.  Contains a table with a row for each phone number
    and column headings : "Name", "Number", "Extension", "Mobile", "Email Address",
    "Department", "First Name", "Last Name", "User Id", "Title", "IMP Id", "My Room Room
    Id", "My Room Bridge Id".

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPhoneDirectoryGetPagedListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetPagedListRequest21()``.

    Returns the number of entries that would be returned if the response Was not page size
    restricted.  The "My Room Room Id" and "My Room Bridge Id" are only populated for
    users assigned the "Collaborate-Audio" service.  Contains a table with a row for each
    user and column headings: "User Id", "First Name", "Last Name", "First Name Unicode",
    "Last Name Unicode", "Hiragana First Name", "Hiragana Last Name", "Title", "Phone
    Number", "Extension", "Mobile", "Pager", "Email Address", "Yahoo Id", "Department",
    "Group Id", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country", "IMP Id", "Location Code", "My Room Room Id", "My Room Bridge Id".

    The response entries are sorted by "Last Name Unicode" first and "First Name unicode"
    secondarily.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        directory_table: directoryTable
    """

    __slots__ = [
        "total_number_of_rows",
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPhoneDirectoryGetPagedSortedListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetPagedSortedListRequest()``.

    Returns the number of entries that would be returned if the response Was not page size
    restricted.  The "My Room Room Id" and "My Room Bridge Id" are only populated for
    users assigned the "Collaborate-Audio" service.  Contains a table with a row for each
    user and column headings: "User Id", "CLID First Name", "CLID Last Name", "First
    Name", "Last Name", "Hiragana First Name", "Hiragana Last Name", "Title", "Phone
    Number", "Extension", "Mobile", "Pager", "Email Address", "Yahoo Id", "Department",
    "Group Id", "Location", "Address Line 1", "Address Line 2", "City", "State", "Zip",
    "Country", "IMP Id", "Location Code", "My Room Room Id", "My Room Bridge Id".

    Attributes:
        total_number_of_rows: totalNumberOfRows
        directory_table: directoryTable
    """

    __slots__ = [
        "total_number_of_rows",
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPhoneDirectoryGetSearchedListResponse(OCIResponse):
    """
    Response to ``UserPhoneDirectoryGetSearchedListRequest()``.

    The "My Room Room Id" and "My Room Bridge Id" are only populated for users assigned
    the "Collaborate-Audio" service.  Contains a table with a row for each phone number
    and column headings : "Name", "Number", "Extension", "Mobile", "Email Address",
    "Department", "Hiragana Name", "Group Id", "Yahoo Id", "User Id", "IMP Id", "First
    Name", "Last Name", "My Room Room Id", "My Room Bridge Id".

    Attributes:
        directory_table: directoryTable
    """

    __slots__ = [
        "directory_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "directory_table",
                "directoryTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPhysicalLocationGetResponse(OCIResponse):
    """
    Response to ``UserPhysicalLocationGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserPolycomPhoneServicesGetPrimaryEndpointListResponse(OCIResponse):
    """
    Response to ``UserPolycomPhoneServicesGetPrimaryEndpointListRequest()``.

    The column headings for the deviceUserTable are: "Device Level", "Device Name",
    "Line/Port", "Private Identity". The Private Identity column is empty is AS mode.

    Attributes:
        device_user_table: deviceUserTable
    """

    __slots__ = [
        "device_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "device_user_table",
                "deviceUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPolycomPhoneServicesGetResponse(OCIResponse):
    """
    Response to ``UserPolycomPhoneServicesGetRequest()``.


    Attributes:
        integrate_phone_directory_with_broad_works: integratePhoneDirectoryWithBroadWorks
        include_user_personal_phone_list_in_directory:
            includeUserPersonalPhoneListInDirectory
        include_group_custom_contact_directory_in_directory:
            includeGroupCustomContactDirectoryInDirectory
        group_custom_contact_directory: groupCustomContactDirectory
    """

    __slots__ = [
        "integrate_phone_directory_with_broad_works",
        "include_user_personal_phone_list_in_directory",
        "include_group_custom_contact_directory_in_directory",
        "group_custom_contact_directory",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "integrate_phone_directory_with_broad_works",
                "integratePhoneDirectoryWithBroadWorks",
                bool,
                is_required=True,
            ),
            E(
                "include_user_personal_phone_list_in_directory",
                "includeUserPersonalPhoneListInDirectory",
                bool,
                is_required=True,
            ),
            E(
                "include_group_custom_contact_directory_in_directory",
                "includeGroupCustomContactDirectoryInDirectory",
                bool,
                is_required=True,
            ),
            E("group_custom_contact_directory", "groupCustomContactDirectory", str),
        )


class UserPortalPasscodeGetInfoResponse(OCIResponse):
    """
    Response to ``UserPortalPasscodeGetInfoRequest()``.


    Attributes:
        is_login_disabled: isLoginDisabled
        expiration_days: expirationDays
        does_not_expire: doesNotExpire
        passcode: passcode
    """

    __slots__ = [
        "is_login_disabled",
        "expiration_days",
        "does_not_expire",
        "passcode",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_login_disabled", "isLoginDisabled", bool, is_required=True),
            E("expiration_days", "expirationDays", int),
            E("does_not_expire", "doesNotExpire", bool),
            E("passcode", "passcode", str, is_required=True),
        )


class UserPreAlertingAnnouncementGetResponse(OCIResponse):
    """
    Response to a ``UserPreAlertingAnnouncementGetRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Blacklisted",
    and "Calls From".

    Attributes:
        is_active: isActive
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        video_file_url: videoFileUrl
        criteria_table: criteriaTable
    """

    __slots__ = [
        "is_active",
        "audio_selection",
        "audio_file_description",
        "audio_media_type",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_media_type",
        "video_file_url",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("video_file_url", "videoFileUrl", str),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPrepaidGetResponse(OCIResponse):
    """
    Response to ``UserPrepaidGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserPrimaryEndpointAdvancedSettingGetResponse(OCIResponse):
    """
    Response to the ``UserPrimaryEndpointAdvancedSettingGetRequest()``.


    Attributes:
        allow_origination: allowOrigination
        allow_termination: allowTermination
    """

    __slots__ = [
        "allow_origination",
        "allow_termination",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_origination", "allowOrigination", bool, is_required=True),
            E("allow_termination", "allowTermination", bool, is_required=True),
        )


class UserPriorityAlertGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPrivacyGetAvailableMonitorsUserListResponse(OCIResponse):
    """
    Response to the ``UserPrivacyGetAvailableMonitorsUserListRequest()``.

    Returns a 10 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".

    Attributes:
        available_monitors_table: availableMonitorsTable
    """

    __slots__ = [
        "available_monitors_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_monitors_table",
                "availableMonitorsTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPrivacyGetResponse(OCIResponse):
    """
    Response to ``UserPrivacyGetRequest()``.


    Attributes:
        enable_directory_privacy: enableDirectoryPrivacy
    """

    __slots__ = [
        "enable_directory_privacy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_directory_privacy",
                "enableDirectoryPrivacy",
                bool,
                is_required=True,
            ),
        )


class UserPrivacyGetResponse13mp17(OCIResponse):
    """
    Response to ``UserPrivacyGetRequest13mp17()``.

    The permittedMonitorUserIdTable contains the members of the enterprise or group
    allowed to monitor the phone status of the user specified in the request.  Members of
    this table are allowed to monitor the user even if enablePhoneStatusPrivacy is set to
    true.  The table contains column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".

    Attributes:
        enable_directory_privacy: enableDirectoryPrivacy
        enable_auto_attendant_extension_dialing_privacy:
            enableAutoAttendantExtensionDialingPrivacy
        enable_auto_attendant_name_dialing_privacy: enableAutoAttendantNameDialingPrivacy
        enable_phone_status_privacy: enablePhoneStatusPrivacy
        permitted_monitor_user_id_table: permittedMonitorUserIdTable
    """

    __slots__ = [
        "enable_directory_privacy",
        "enable_auto_attendant_extension_dialing_privacy",
        "enable_auto_attendant_name_dialing_privacy",
        "enable_phone_status_privacy",
        "permitted_monitor_user_id_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_directory_privacy",
                "enableDirectoryPrivacy",
                bool,
                is_required=True,
            ),
            E(
                "enable_auto_attendant_extension_dialing_privacy",
                "enableAutoAttendantExtensionDialingPrivacy",
                bool,
                is_required=True,
            ),
            E(
                "enable_auto_attendant_name_dialing_privacy",
                "enableAutoAttendantNameDialingPrivacy",
                bool,
                is_required=True,
            ),
            E(
                "enable_phone_status_privacy",
                "enablePhoneStatusPrivacy",
                bool,
                is_required=True,
            ),
            E(
                "permitted_monitor_user_id_table",
                "permittedMonitorUserIdTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPushToTalkGetAvailableUserListResponse(OCIResponse):
    """
    Response to the ``UserPushToTalkGetAvailableUserListRequest()``.

    Returns a 10 column table with column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address", "IMP Id".

    Attributes:
        user_table: userTable
    """

    __slots__ = [
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPushToTalkGetResponse(OCIResponse):
    """
    Response to ``UserPushToTalkGetRequest()``.

    It returns the service settings and a 9 column selected user table with the following
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Phone Number", "Extension", "Department", "Email Address", "IMP Id".

    Attributes:
        allow_auto_answer: allowAutoAnswer
        outgoing_connection_selection: outgoingConnectionSelection
        access_list_selection: accessListSelection
        selected_user_table: selectedUserTable
    """

    __slots__ = [
        "allow_auto_answer",
        "outgoing_connection_selection",
        "access_list_selection",
        "selected_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_auto_answer", "allowAutoAnswer", bool, is_required=True),
            E(
                "outgoing_connection_selection",
                "outgoingConnectionSelection",
                str,
                is_required=True,
            ),
            E("access_list_selection", "accessListSelection", str, is_required=True),
            E(
                "selected_user_table",
                "selectedUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserRemoteOfficeGetResponse(OCIResponse):
    """
    Response to ``UserRemoteOfficeGetRequest()``.


    Attributes:
        is_active: isActive
        remote_office_phone_number: remoteOfficePhoneNumber
    """

    __slots__ = [
        "is_active",
        "remote_office_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("remote_office_phone_number", "remoteOfficePhoneNumber", str),
        )


class UserRouteListGetResponse(OCIResponse):
    """
    Response to ``UserRouteListGetRequest()``.

    Contains the route list setting and a list of assigned number ranges.  The column
    headings for assignedNumberRangeTable are "Number Range Start", "Number Range End" and
    "Is Active".

    Attributes:
        treat_originations_and_pbx_redirections_as_screened:
            treatOriginationsAndPBXRedirectionsAsScreened
        use_route_list_identity_for_non_emergency_calls:
            useRouteListIdentityForNonEmergencyCalls
        use_route_list_identity_for_emergency_calls: useRouteListIdentityForEmergencyCalls
        assigned_number_range_table: assignedNumberRangeTable
    """

    __slots__ = [
        "treat_originations_and_pbx_redirections_as_screened",
        "use_route_list_identity_for_non_emergency_calls",
        "use_route_list_identity_for_emergency_calls",
        "assigned_number_range_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treat_originations_and_pbx_redirections_as_screened",
                "treatOriginationsAndPBXRedirectionsAsScreened",
                bool,
                is_required=True,
            ),
            E(
                "use_route_list_identity_for_non_emergency_calls",
                "useRouteListIdentityForNonEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "use_route_list_identity_for_emergency_calls",
                "useRouteListIdentityForEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "assigned_number_range_table",
                "assignedNumberRangeTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserRoutePointCallDispositionCodeGetAvailableListResponse(OCIResponse):
    """
    Response to the ``UserRoutePointCallDispositionCodeGetAvailableListRequest()``.

    This list may include Group/Enterprise level codes in addition to the Route Point
    level codes, depending on the call center disposition codes settings.  Only active
    codes are included in the list.  Contains a table with column headings: "Code",
    "Description" and "Level". Level column can be any of the values in the data type
    CallDispositionCodeLevel.

    Attributes:
        disposition_codes_table: dispositionCodesTable
    """

    __slots__ = [
        "disposition_codes_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "disposition_codes_table",
                "dispositionCodesTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserRoutePointSupervisorGetListResponse(OCIResponse):
    """
    Response to the ``UserRoutePointSupervisorGetListRequest()``.

    Contains a table with column headings: "User Id", "Last Name", "First Name", "Hiragana
    Last Name", "Hiragana First Name", "Phone Number", "Extension", "Department", "Email
    Address", "Location Code".

    Attributes:
        supervisor_table: supervisorTable
    """

    __slots__ = [
        "supervisor_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "supervisor_table",
                "supervisorTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSMDIMessageDeskGetResponse(OCIResponse):
    """
    Response to the ``UserSMDIMessageDeskGetRequest()``.


    Attributes:
        is_active: isActive
        message_desk_number: messageDeskNumber
    """

    __slots__ = [
        "is_active",
        "message_desk_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("message_desk_number", "messageDeskNumber", str),
        )


class UserSMDIMessageDeskGetServerListResponse(OCIResponse):
    """
    Response to the ``UserSMDIMessageDeskGetServerListRequest()``.

    The SMDI Server table column headings are: "Device Name", "Net Address", "Port".

    Attributes:
        smdi_server_table: smdiServerTable
    """

    __slots__ = [
        "smdi_server_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "smdi_server_table",
                "smdiServerTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserScheduleGetEventListResponse(OCIResponse):
    """
    Response to ``UserScheduleGetEventListRequest()``.

    The response contains a list of events.

    Attributes:
        event_name: eventName
    """

    __slots__ = [
        "event_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("event_name", "eventName", str, is_array=True),
        )


class UserScheduleGetListResponse(OCIResponse):
    """
    Response to ``UserScheduleGetListRequest()``.

    The response contains a list of system schedules.

    Attributes:
        schedule_name: scheduleName
        schedule_type: scheduleType
        schedule_level: scheduleLevel
    """

    __slots__ = [
        "schedule_name",
        "schedule_type",
        "schedule_level",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_name", "scheduleName", str, is_array=True),
            E("schedule_type", "scheduleType", str, is_array=True),
            E("schedule_level", "scheduleLevel", str, is_array=True),
        )


class UserSecurityClassificationGetResponse(OCIResponse):
    """
    Response to the ``UserSecurityClassificationGetRequest()``.


    Attributes:
        security_classification: securityClassification
    """

    __slots__ = [
        "security_classification",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("security_classification", "securityClassification", str),
        )


class UserSelectiveCallAcceptanceGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSelectiveCallRejectionGetCriteriaListResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaListRequest()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted", "Holiday Schedule", "Calls To Type", "Calls To
    Number" and "Calls To Extension". The possible values for the "Calls To Type" column
    are the following or a combination of them separated by comma: - Primary - Alternate X
    (where x is a number between 1 and 10) - Mobility The possible values for the "Calls
    To Number" column are the following or a combination of them separated by comma: - The
    value of the phone number for the corresponding Calls To Type, when the number is
    available.  i.e.  Alternate 1 may have extension, but no number.  - When no number is
    available a blank space is provided instead.  The possible values for the "Calls To
    Extension" column are the following or a combination of them separated by comma: - The
    value of the extension for the corresponding Calls To Type, when the extension is
    available.  i.e.  Primary may have number, but no extension.  - For Mobility Calls To
    Type, this is always blank.  - When no extension is available a blank space is
    provided instead.

    Attributes:
        criteria_table: criteriaTable
    """

    __slots__ = [
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSeriesCompletionGetResponse(OCIResponse):
    """
    Response to the ``UserSeriesCompletionGetRequest()``.

    Identifies which Series Completion group the user belongs to and the list of users in
    the group.  Contains a table with column headings: "User Id", "Last Name", "First
    Name", "Hiragana Last Name", "Hiragana First Name", "Department", "Phone Number",
    "Extension", "Email Address".

    Attributes:
        name: name
        user_table: userTable
    """

    __slots__ = [
        "name",
        "user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str),
            E(
                "user_table",
                "userTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserServiceGetAssignmentListResponse(OCIResponse):
    """
    Response to ``UserServiceGetAssignmentListRequest()``.

    Contains two tables, one for the service packs, and one for the user services.  The
    user table has the column headings: "Service Name", "Assigned", The service pack
    table's column headings are: "Service Pack Name", "Assigned", "Description". The
    "Assigned" column has either a true or false value

    Attributes:
        service_packs_assignment_table: servicePacksAssignmentTable
        user_services_assignment_table: userServicesAssignmentTable
    """

    __slots__ = [
        "service_packs_assignment_table",
        "user_services_assignment_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_packs_assignment_table",
                "servicePacksAssignmentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "user_services_assignment_table",
                "userServicesAssignmentTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserServiceIsAssignedResponse(OCIResponse):
    """
    Returns true if the UserService or service pack is assigned, otherwise false.


    Attributes:
        is_assigned: isAssigned
    """

    __slots__ = [
        "is_assigned",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_assigned", "isAssigned", bool, is_required=True),
        )


class UserServiceScriptsUserGetLogResponse(OCIResponse):
    """
    Response to ``UserServiceScriptsUserGetLogRequest()``.


    Attributes:
        log_content: logContent
    """

    __slots__ = [
        "log_content",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("log_content", "logContent", str),
        )


class UserServiceScriptsUserGetResponse(OCIResponse):
    """
    Response to ``UserServiceScriptsUserGetRequest()``.


    Attributes:
        is_active: isActive
        script_name: scriptName
        script_content: scriptContent
    """

    __slots__ = [
        "is_active",
        "script_name",
        "script_content",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("script_name", "scriptName", str),
            E("script_content", "scriptContent", str),
        )


class UserShInterfaceGetPublicIdDataResponse(OCIResponse):
    """
    Response to the ``UserShInterfaceGetPublicIdDataRequest()``.

    The response contains the Sh non-transparent data for the specified Public User
    Identity.  The data also includes a userId, userType, and endpointType.

    Attributes:
        user_id: userId
        user_type: userType
        endpoint_type: endpointType
        scscf_name: SCSCFName
        ims_user_state: IMSUserState
    """

    __slots__ = [
        "user_id",
        "user_type",
        "endpoint_type",
        "scscf_name",
        "ims_user_state",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("user_type", "userType", str, is_required=True),
            E("endpoint_type", "endpointType", str, is_required=True),
            E("scscf_name", "SCSCFName", str),
            E("ims_user_state", "IMSUserState", str, is_required=True),
        )


class UserSharedCallAppearanceGetEndpointResponse(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetEndpointRequest()``.


    Attributes:
        is_active: isActive
        allow_origination: allowOrigination
        allow_termination: allowTermination
    """

    __slots__ = [
        "is_active",
        "allow_origination",
        "allow_termination",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("allow_origination", "allowOrigination", bool, is_required=True),
            E("allow_termination", "allowTermination", bool, is_required=True),
        )


class UserSharedCallAppearanceGetResponse14(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetRequest14()``.

    The endpointTable contains columns: "Device Level", "Device Name", "Device Type",
    "Line/Port", "SIP Contact". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.

    Replaced By: ``UserSharedCallAppearanceGetResponse14sp2()``

    Attributes:
        alert_all_appearances_for_click_to_dial_calls:
            alertAllAppearancesForClickToDialCalls
        max_appearances: maxAppearances
        enable_multiple_call_arrangement: enableMultipleCallArrangement
        multiple_call_arrangement_is_active: multipleCallArrangementIsActive
        endpoint_table: endpointTable
        allow_bridging_between_locations: allowBridgingBetweenLocations
        bridge_warning_tone: bridgeWarningTone
    """

    __slots__ = [
        "alert_all_appearances_for_click_to_dial_calls",
        "max_appearances",
        "enable_multiple_call_arrangement",
        "multiple_call_arrangement_is_active",
        "endpoint_table",
        "allow_bridging_between_locations",
        "bridge_warning_tone",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alert_all_appearances_for_click_to_dial_calls",
                "alertAllAppearancesForClickToDialCalls",
                bool,
                is_required=True,
            ),
            E("max_appearances", "maxAppearances", int, is_required=True),
            E(
                "enable_multiple_call_arrangement",
                "enableMultipleCallArrangement",
                bool,
                is_required=True,
            ),
            E(
                "multiple_call_arrangement_is_active",
                "multipleCallArrangementIsActive",
                bool,
                is_required=True,
            ),
            E(
                "endpoint_table",
                "endpointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_bridging_between_locations",
                "allowBridgingBetweenLocations",
                bool,
                is_required=True,
            ),
            E("bridge_warning_tone", "bridgeWarningTone", str, is_required=True),
        )


class UserSharedCallAppearanceGetResponse14sp2(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetRequest14sp2()``.

    The endpointTable contains columns: "Device Level", "Device Name", "Device Type",
    "Line/Port", "SIP Contact". The "Device Level" column contains one of the
    AccessDeviceLevel enumerated constants.

    Attributes:
        alert_all_appearances_for_click_to_dial_calls:
            alertAllAppearancesForClickToDialCalls
        max_appearances: maxAppearances
        allow_sca_call_retrieve: allowSCACallRetrieve
        enable_multiple_call_arrangement: enableMultipleCallArrangement
        multiple_call_arrangement_is_active: multipleCallArrangementIsActive
        endpoint_table: endpointTable
        allow_bridging_between_locations: allowBridgingBetweenLocations
        bridge_warning_tone: bridgeWarningTone
    """

    __slots__ = [
        "alert_all_appearances_for_click_to_dial_calls",
        "max_appearances",
        "allow_sca_call_retrieve",
        "enable_multiple_call_arrangement",
        "multiple_call_arrangement_is_active",
        "endpoint_table",
        "allow_bridging_between_locations",
        "bridge_warning_tone",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alert_all_appearances_for_click_to_dial_calls",
                "alertAllAppearancesForClickToDialCalls",
                bool,
                is_required=True,
            ),
            E("max_appearances", "maxAppearances", int, is_required=True),
            E("allow_sca_call_retrieve", "allowSCACallRetrieve", bool, is_required=True),
            E(
                "enable_multiple_call_arrangement",
                "enableMultipleCallArrangement",
                bool,
                is_required=True,
            ),
            E(
                "multiple_call_arrangement_is_active",
                "multipleCallArrangementIsActive",
                bool,
                is_required=True,
            ),
            E(
                "endpoint_table",
                "endpointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_bridging_between_locations",
                "allowBridgingBetweenLocations",
                bool,
                is_required=True,
            ),
            E("bridge_warning_tone", "bridgeWarningTone", str, is_required=True),
        )


class UserSharedCallAppearanceGetResponse16sp2(OCIResponse):
    """
    Response to the ``UserSharedCallAppearanceGetRequest16sp2()``.

    The endpointTable contains columns: "Device Level", "Device Name", "Device Type",
    "Line/Port", "SIP Contact", "Port Number", "Device Support Visual Device Management".
    The "Device Level" column contains one of the AccessDeviceLevel enumerated constants.
    Port numbers are only used by devices with static line ordering.  The following
    elements are only used in AS data mode: enableCallParkNotification

    Attributes:
        alert_all_appearances_for_click_to_dial_calls:
            alertAllAppearancesForClickToDialCalls
        alert_all_appearances_for_group_paging_calls:
            alertAllAppearancesForGroupPagingCalls
        max_appearances: maxAppearances
        allow_sca_call_retrieve: allowSCACallRetrieve
        enable_multiple_call_arrangement: enableMultipleCallArrangement
        multiple_call_arrangement_is_active: multipleCallArrangementIsActive
        endpoint_table: endpointTable
        allow_bridging_between_locations: allowBridgingBetweenLocations
        bridge_warning_tone: bridgeWarningTone
        enable_call_park_notification: enableCallParkNotification
    """

    __slots__ = [
        "alert_all_appearances_for_click_to_dial_calls",
        "alert_all_appearances_for_group_paging_calls",
        "max_appearances",
        "allow_sca_call_retrieve",
        "enable_multiple_call_arrangement",
        "multiple_call_arrangement_is_active",
        "endpoint_table",
        "allow_bridging_between_locations",
        "bridge_warning_tone",
        "enable_call_park_notification",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alert_all_appearances_for_click_to_dial_calls",
                "alertAllAppearancesForClickToDialCalls",
                bool,
                is_required=True,
            ),
            E(
                "alert_all_appearances_for_group_paging_calls",
                "alertAllAppearancesForGroupPagingCalls",
                bool,
                is_required=True,
            ),
            E("max_appearances", "maxAppearances", int, is_required=True),
            E("allow_sca_call_retrieve", "allowSCACallRetrieve", bool, is_required=True),
            E(
                "enable_multiple_call_arrangement",
                "enableMultipleCallArrangement",
                bool,
                is_required=True,
            ),
            E(
                "multiple_call_arrangement_is_active",
                "multipleCallArrangementIsActive",
                bool,
                is_required=True,
            ),
            E(
                "endpoint_table",
                "endpointTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_bridging_between_locations",
                "allowBridgingBetweenLocations",
                bool,
                is_required=True,
            ),
            E("bridge_warning_tone", "bridgeWarningTone", str, is_required=True),
            E(
                "enable_call_park_notification",
                "enableCallParkNotification",
                bool,
                is_required=True,
            ),
        )


class UserSimultaneousRingFamilyGetPhoneNumberResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetPhoneNumberRequest()``.


    Attributes:
        answer_confirmation_required: answerConfirmationRequired
    """

    __slots__ = [
        "answer_confirmation_required",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
        )


class UserSimultaneousRingFamilyGetResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetRequest()``.

    Replaced By: ``UserSimultaneousRingFamilyGetResponse14sp4()``

    Attributes:
        is_active: isActive
        incoming_calls: incomingCalls
        sim_ring_phone_number: simRingPhoneNumber
    """

    __slots__ = [
        "is_active",
        "incoming_calls",
        "sim_ring_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("incoming_calls", "incomingCalls", str, is_required=True),
            E("sim_ring_phone_number", "simRingPhoneNumber", str, is_array=True),
        )


class UserSimultaneousRingFamilyGetResponse14sp4(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetRequest14sp4()``.

    Contains a table with column headings: "Phone Number", "Answer Confirmation Required".

    Attributes:
        is_active: isActive
        incoming_calls: incomingCalls
        phone_number_table: phoneNumberTable
    """

    __slots__ = [
        "is_active",
        "incoming_calls",
        "phone_number_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("incoming_calls", "incomingCalls", str, is_required=True),
            E(
                "phone_number_table",
                "phoneNumberTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSimultaneousRingPersonalGetPhoneNumberResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetPhoneNumberRequest()``.


    Attributes:
        answer_confirmation_required: answerConfirmationRequired
    """

    __slots__ = [
        "answer_confirmation_required",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
        )


class UserSimultaneousRingPersonalGetResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetRequest()``.

    Replaced By: ``UserSimultaneousRingPersonalGetResponse14sp4()``

    Attributes:
        is_active: isActive
        incoming_calls: incomingCalls
        sim_ring_phone_number: simRingPhoneNumber
    """

    __slots__ = [
        "is_active",
        "incoming_calls",
        "sim_ring_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("incoming_calls", "incomingCalls", str, is_required=True),
            E("sim_ring_phone_number", "simRingPhoneNumber", str, is_array=True),
        )


class UserSimultaneousRingPersonalGetResponse14sp4(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetRequest14sp4()``.

    Contains a table with column headings: "Phone Number", "Answer Confirmation Required".

    Attributes:
        is_active: isActive
        incoming_calls: incomingCalls
        phone_number_table: phoneNumberTable
    """

    __slots__ = [
        "is_active",
        "incoming_calls",
        "phone_number_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("incoming_calls", "incomingCalls", str, is_required=True),
            E(
                "phone_number_table",
                "phoneNumberTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSingleSignOnCreateDeviceTokenResponse(OCIResponse):
    """
    Response to ``UserSingleSignOnCreateDeviceTokenRequest()``.


    Attributes:
        device_token: deviceToken
    """

    __slots__ = [
        "device_token",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_token", "deviceToken", str, is_required=True),
        )


class UserSpeedDial100GetResponse(OCIResponse):
    """
    Response to the ``UserSpeedDial100GetRequest()``.


    Attributes:
        phone_number: phoneNumber
        description: description
    """

    __slots__ = [
        "phone_number",
        "description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
            E("description", "description", str),
        )


class UserThirdPartyVoiceMailSupportGetResponse13mp16(OCIResponse):
    """
    Response to ``UserThirdPartyVoiceMailSupportGetRequest13mp16()``.

    Replaced by: ``UserThirdPartyVoiceMailSupportGetResponse17()``

    Attributes:
        is_active: isActive
        busy_redirect_to_voice_mail: busyRedirectToVoiceMail
        no_answer_redirect_to_voice_mail: noAnswerRedirectToVoiceMail
        server_selection: serverSelection
        user_server: userServer
        mailbox_id_type: mailboxIdType
        mailbox_url: mailboxURL
        no_answer_number_of_rings: noAnswerNumberOfRings
        always_redirect_to_voice_mail: alwaysRedirectToVoiceMail
    """

    __slots__ = [
        "is_active",
        "busy_redirect_to_voice_mail",
        "no_answer_redirect_to_voice_mail",
        "server_selection",
        "user_server",
        "mailbox_id_type",
        "mailbox_url",
        "no_answer_number_of_rings",
        "always_redirect_to_voice_mail",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "busy_redirect_to_voice_mail",
                "busyRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "no_answer_redirect_to_voice_mail",
                "noAnswerRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E("server_selection", "serverSelection", str, is_required=True),
            E("user_server", "userServer", str),
            E("mailbox_id_type", "mailboxIdType", str, is_required=True),
            E("mailbox_url", "mailboxURL", str),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "always_redirect_to_voice_mail",
                "alwaysRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
        )


class UserThirdPartyVoiceMailSupportGetResponse17(OCIResponse):
    """
    Response to ``UserThirdPartyVoiceMailSupportGetRequest17()``.


    Attributes:
        is_active: isActive
        busy_redirect_to_voice_mail: busyRedirectToVoiceMail
        no_answer_redirect_to_voice_mail: noAnswerRedirectToVoiceMail
        server_selection: serverSelection
        user_server: userServer
        mailbox_id_type: mailboxIdType
        mailbox_url: mailboxURL
        no_answer_number_of_rings: noAnswerNumberOfRings
        always_redirect_to_voice_mail: alwaysRedirectToVoiceMail
        out_of_primary_zone_redirect_to_voice_mail: outOfPrimaryZoneRedirectToVoiceMail
    """

    __slots__ = [
        "is_active",
        "busy_redirect_to_voice_mail",
        "no_answer_redirect_to_voice_mail",
        "server_selection",
        "user_server",
        "mailbox_id_type",
        "mailbox_url",
        "no_answer_number_of_rings",
        "always_redirect_to_voice_mail",
        "out_of_primary_zone_redirect_to_voice_mail",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "busy_redirect_to_voice_mail",
                "busyRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "no_answer_redirect_to_voice_mail",
                "noAnswerRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E("server_selection", "serverSelection", str, is_required=True),
            E("user_server", "userServer", str),
            E("mailbox_id_type", "mailboxIdType", str, is_required=True),
            E("mailbox_url", "mailboxURL", str),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "always_redirect_to_voice_mail",
                "alwaysRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "out_of_primary_zone_redirect_to_voice_mail",
                "outOfPrimaryZoneRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
        )


class UserTimeScheduleGetListResponse(OCIResponse):
    """
    Response to the ``UserTimeScheduleGetListRequest()``.

    The column headings are "Time Schedule" and "Type".

    The response contains user's personal and user's group's schedule names.

    Attributes:
        time_schedule_table: timeScheduleTable
    """

    __slots__ = [
        "time_schedule_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "time_schedule_table",
                "timeScheduleTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserVoiceMessagingUserGetAdvancedVoiceManagementResponse(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetAdvancedVoiceManagementRequest()``.

    Replaced By: ``UserVoiceMessagingUserGetAdvancedVoiceManagementResponse14sp3()``

    Attributes:
        mail_server_selection: mailServerSelection
        group_mail_server_email_address: groupMailServerEmailAddress
        group_mail_server_user_id: groupMailServerUserId
        group_mail_server_password: groupMailServerPassword
        use_group_default_mail_server_full_mailbox_limit:
            useGroupDefaultMailServerFullMailboxLimit
        group_mail_server_full_mailbox_limit: groupMailServerFullMailboxLimit
        personal_mail_server_net_address: personalMailServerNetAddress
        personal_mail_server_protocol: personalMailServerProtocol
        personal_mail_server_real_delete_for_imap: personalMailServerRealDeleteForImap
        personal_mail_server_email_address: personalMailServerEmailAddress
        personal_mail_server_user_id: personalMailServerUserId
        personal_mail_server_password: personalMailServerPassword
    """

    __slots__ = [
        "mail_server_selection",
        "group_mail_server_email_address",
        "group_mail_server_user_id",
        "group_mail_server_password",
        "use_group_default_mail_server_full_mailbox_limit",
        "group_mail_server_full_mailbox_limit",
        "personal_mail_server_net_address",
        "personal_mail_server_protocol",
        "personal_mail_server_real_delete_for_imap",
        "personal_mail_server_email_address",
        "personal_mail_server_user_id",
        "personal_mail_server_password",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mail_server_selection", "mailServerSelection", str, is_required=True),
            E("group_mail_server_email_address", "groupMailServerEmailAddress", str),
            E("group_mail_server_user_id", "groupMailServerUserId", str),
            E("group_mail_server_password", "groupMailServerPassword", str),
            E(
                "use_group_default_mail_server_full_mailbox_limit",
                "useGroupDefaultMailServerFullMailboxLimit",
                bool,
            ),
            E(
                "group_mail_server_full_mailbox_limit",
                "groupMailServerFullMailboxLimit",
                int,
            ),
            E("personal_mail_server_net_address", "personalMailServerNetAddress", str),
            E(
                "personal_mail_server_protocol",
                "personalMailServerProtocol",
                str,
                is_required=True,
            ),
            E(
                "personal_mail_server_real_delete_for_imap",
                "personalMailServerRealDeleteForImap",
                bool,
                is_required=True,
            ),
            E(
                "personal_mail_server_email_address",
                "personalMailServerEmailAddress",
                str,
            ),
            E("personal_mail_server_user_id", "personalMailServerUserId", str),
            E("personal_mail_server_password", "personalMailServerPassword", str),
        )


class UserVoiceMessagingUserGetAdvancedVoiceManagementResponse14sp3(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetAdvancedVoiceManagementRequest14sp3()``.


    Attributes:
        mail_server_selection: mailServerSelection
        group_mail_server_email_address: groupMailServerEmailAddress
        group_mail_server_user_id: groupMailServerUserId
        use_group_default_mail_server_full_mailbox_limit:
            useGroupDefaultMailServerFullMailboxLimit
        group_mail_server_full_mailbox_limit: groupMailServerFullMailboxLimit
        personal_mail_server_net_address: personalMailServerNetAddress
        personal_mail_server_protocol: personalMailServerProtocol
        personal_mail_server_real_delete_for_imap: personalMailServerRealDeleteForImap
        personal_mail_server_email_address: personalMailServerEmailAddress
        personal_mail_server_user_id: personalMailServerUserId
    """

    __slots__ = [
        "mail_server_selection",
        "group_mail_server_email_address",
        "group_mail_server_user_id",
        "use_group_default_mail_server_full_mailbox_limit",
        "group_mail_server_full_mailbox_limit",
        "personal_mail_server_net_address",
        "personal_mail_server_protocol",
        "personal_mail_server_real_delete_for_imap",
        "personal_mail_server_email_address",
        "personal_mail_server_user_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mail_server_selection", "mailServerSelection", str, is_required=True),
            E("group_mail_server_email_address", "groupMailServerEmailAddress", str),
            E("group_mail_server_user_id", "groupMailServerUserId", str),
            E(
                "use_group_default_mail_server_full_mailbox_limit",
                "useGroupDefaultMailServerFullMailboxLimit",
                bool,
            ),
            E(
                "group_mail_server_full_mailbox_limit",
                "groupMailServerFullMailboxLimit",
                int,
            ),
            E("personal_mail_server_net_address", "personalMailServerNetAddress", str),
            E(
                "personal_mail_server_protocol",
                "personalMailServerProtocol",
                str,
                is_required=True,
            ),
            E(
                "personal_mail_server_real_delete_for_imap",
                "personalMailServerRealDeleteForImap",
                bool,
                is_required=True,
            ),
            E(
                "personal_mail_server_email_address",
                "personalMailServerEmailAddress",
                str,
            ),
            E("personal_mail_server_user_id", "personalMailServerUserId", str),
        )


class UserVoiceMessagingUserGetAliasListResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetAliasListRequest()``.


    Attributes:
        phone_number: phoneNumber
    """

    __slots__ = [
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_array=True),
        )


class UserVoiceMessagingUserGetDistributionListResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetDistributionListRequest()``.


    Attributes:
        description: description
        phone_number: phoneNumber
    """

    __slots__ = [
        "description",
        "phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("phone_number", "phoneNumber", str, is_array=True),
        )


class UserVoiceMessagingUserGetOutgoingSMDIMWIResponse(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetOutgoingSMDIMWIRequest()``.


    Attributes:
        is_active: isActive
        outgoing_smdimwi_phone_number: outgoingSMDIMWIPhoneNumber
    """

    __slots__ = [
        "is_active",
        "outgoing_smdimwi_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "outgoing_smdimwi_phone_number",
                "outgoingSMDIMWIPhoneNumber",
                str,
                is_array=True,
            ),
        )


class UserVoiceMessagingUserGetVoiceManagementResponse13mp8(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetVoiceManagementRequest13mp8()``.

    Replaced by: ``UserVoiceMessagingUserGetVoiceManagementResponse17()``

    Attributes:
        is_active: isActive
        processing: processing
        voice_message_delivery_email_address: voiceMessageDeliveryEmailAddress
        use_phone_message_waiting_indicator: usePhoneMessageWaitingIndicator
        send_voice_message_notify_email: sendVoiceMessageNotifyEmail
        voice_message_notify_email_address: voiceMessageNotifyEmailAddress
        send_carbon_copy_voice_message: sendCarbonCopyVoiceMessage
        voice_message_carbon_copy_email_address: voiceMessageCarbonCopyEmailAddress
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
        always_redirect_to_voice_mail: alwaysRedirectToVoiceMail
        busy_redirect_to_voice_mail: busyRedirectToVoiceMail
        no_answer_redirect_to_voice_mail: noAnswerRedirectToVoiceMail
    """

    __slots__ = [
        "is_active",
        "processing",
        "voice_message_delivery_email_address",
        "use_phone_message_waiting_indicator",
        "send_voice_message_notify_email",
        "voice_message_notify_email_address",
        "send_carbon_copy_voice_message",
        "voice_message_carbon_copy_email_address",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "always_redirect_to_voice_mail",
        "busy_redirect_to_voice_mail",
        "no_answer_redirect_to_voice_mail",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("processing", "processing", str, is_required=True),
            E(
                "voice_message_delivery_email_address",
                "voiceMessageDeliveryEmailAddress",
                str,
            ),
            E(
                "use_phone_message_waiting_indicator",
                "usePhoneMessageWaitingIndicator",
                bool,
                is_required=True,
            ),
            E(
                "send_voice_message_notify_email",
                "sendVoiceMessageNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "voice_message_notify_email_address",
                "voiceMessageNotifyEmailAddress",
                str,
            ),
            E(
                "send_carbon_copy_voice_message",
                "sendCarbonCopyVoiceMessage",
                bool,
                is_required=True,
            ),
            E(
                "voice_message_carbon_copy_email_address",
                "voiceMessageCarbonCopyEmailAddress",
                str,
            ),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "always_redirect_to_voice_mail",
                "alwaysRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "busy_redirect_to_voice_mail",
                "busyRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "no_answer_redirect_to_voice_mail",
                "noAnswerRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
        )


class UserVoiceMessagingUserGetVoiceManagementResponse17(OCIResponse):
    """
    Response to the ``UserVoiceMessagingUserGetVoiceManagementRequest17()``.


    Attributes:
        is_active: isActive
        processing: processing
        voice_message_delivery_email_address: voiceMessageDeliveryEmailAddress
        use_phone_message_waiting_indicator: usePhoneMessageWaitingIndicator
        send_voice_message_notify_email: sendVoiceMessageNotifyEmail
        voice_message_notify_email_address: voiceMessageNotifyEmailAddress
        send_carbon_copy_voice_message: sendCarbonCopyVoiceMessage
        voice_message_carbon_copy_email_address: voiceMessageCarbonCopyEmailAddress
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
        always_redirect_to_voice_mail: alwaysRedirectToVoiceMail
        busy_redirect_to_voice_mail: busyRedirectToVoiceMail
        no_answer_redirect_to_voice_mail: noAnswerRedirectToVoiceMail
        out_of_primary_zone_redirect_to_voice_mail: outOfPrimaryZoneRedirectToVoiceMail
    """

    __slots__ = [
        "is_active",
        "processing",
        "voice_message_delivery_email_address",
        "use_phone_message_waiting_indicator",
        "send_voice_message_notify_email",
        "voice_message_notify_email_address",
        "send_carbon_copy_voice_message",
        "voice_message_carbon_copy_email_address",
        "transfer_on_zero_to_phone_number",
        "transfer_phone_number",
        "always_redirect_to_voice_mail",
        "busy_redirect_to_voice_mail",
        "no_answer_redirect_to_voice_mail",
        "out_of_primary_zone_redirect_to_voice_mail",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("processing", "processing", str, is_required=True),
            E(
                "voice_message_delivery_email_address",
                "voiceMessageDeliveryEmailAddress",
                str,
            ),
            E(
                "use_phone_message_waiting_indicator",
                "usePhoneMessageWaitingIndicator",
                bool,
                is_required=True,
            ),
            E(
                "send_voice_message_notify_email",
                "sendVoiceMessageNotifyEmail",
                bool,
                is_required=True,
            ),
            E(
                "voice_message_notify_email_address",
                "voiceMessageNotifyEmailAddress",
                str,
            ),
            E(
                "send_carbon_copy_voice_message",
                "sendCarbonCopyVoiceMessage",
                bool,
                is_required=True,
            ),
            E(
                "voice_message_carbon_copy_email_address",
                "voiceMessageCarbonCopyEmailAddress",
                str,
            ),
            E(
                "transfer_on_zero_to_phone_number",
                "transferOnZeroToPhoneNumber",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "always_redirect_to_voice_mail",
                "alwaysRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "busy_redirect_to_voice_mail",
                "busyRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "no_answer_redirect_to_voice_mail",
                "noAnswerRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
            E(
                "out_of_primary_zone_redirect_to_voice_mail",
                "outOfPrimaryZoneRedirectToVoiceMail",
                bool,
                is_required=True,
            ),
        )


class UserVoiceMessagingUserGetVoicePortalPasswordInfoResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalPasswordInfoRequest()``.

    Replaced By: ``UserPortalPasscodeGetInfoResponse()``

    Attributes:
        is_login_disabled: isLoginDisabled
        expiration_days: expirationDays
        does_not_expire: doesNotExpire
        password: password
    """

    __slots__ = [
        "is_login_disabled",
        "expiration_days",
        "does_not_expire",
        "password",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_login_disabled", "isLoginDisabled", bool, is_required=True),
            E("expiration_days", "expirationDays", int),
            E("does_not_expire", "doesNotExpire", bool),
            E("password", "password", str, is_required=True),
        )


class UserVoiceMessagingUserGetVoicePortalResponse(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalRequest()``.

    Replaced By: ``UserVoiceMessagingUserGetVoicePortalResponse16()``

    Attributes:
        use_personalized_name: usePersonalizedName
        voice_portal_auto_login: voicePortalAutoLogin
        personalized_name_audio_file_description: personalizedNameAudioFileDescription
    """

    __slots__ = [
        "use_personalized_name",
        "voice_portal_auto_login",
        "personalized_name_audio_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_personalized_name", "usePersonalizedName", bool, is_required=True),
            E("voice_portal_auto_login", "voicePortalAutoLogin", bool, is_required=True),
            E(
                "personalized_name_audio_file_description",
                "personalizedNameAudioFileDescription",
                str,
            ),
        )


class UserVoiceMessagingUserGetVoicePortalResponse16(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalRequest16()``.


    Attributes:
        use_personalized_name: usePersonalizedName
        voice_portal_auto_login: voicePortalAutoLogin
        personalized_name_audio_file_description: personalizedNameAudioFileDescription
        personalized_name_media_type: personalizedNameMediaType
    """

    __slots__ = [
        "use_personalized_name",
        "voice_portal_auto_login",
        "personalized_name_audio_file_description",
        "personalized_name_media_type",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_personalized_name", "usePersonalizedName", bool, is_required=True),
            E("voice_portal_auto_login", "voicePortalAutoLogin", bool, is_required=True),
            E(
                "personalized_name_audio_file_description",
                "personalizedNameAudioFileDescription",
                str,
            ),
            E("personalized_name_media_type", "personalizedNameMediaType", str),
        )


class UserVoicePortalCallingGetResponse(OCIResponse):
    """
    Response to ``UserVoicePortalCallingGetRequest()``.


    Attributes:
        is_active: isActive
    """

    __slots__ = [
        "is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
        )


class UserZoneCallingRestrictionsGetResponse(OCIResponse):
    """
    Gets the home zone for a user Response to a
    ``UserZoneCallingRestrictionsGetRequest()``

    Attributes:
        home_zone_name: homeZoneName
    """

    __slots__ = [
        "home_zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("home_zone_name", "homeZoneName", str),
        )


class EnterpriseCommonPhoneListGetListResponse(OCIResponse):
    """
    Response to the ``EnterpriseCommonPhoneListGetListRequest()``.

    The response contains the enterprise's common phone list.

    Attributes:
        entry: entry
    """

    __slots__ = [
        "entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("entry", "entry", OCI.PhoneListEntry, is_complex=True, is_array=True),
        )


class EnterpriseDepartmentGetAvailableParentListResponse(OCIResponse):
    """
    Response to ``EnterpriseDepartmentGetAvailableParentListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.

    Attributes:
        department_key: departmentKey
        full_path_name: fullPathName
    """

    __slots__ = [
        "department_key",
        "full_path_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_key",
                "departmentKey",
                OCI.DepartmentKey,
                is_complex=True,
                is_array=True,
            ),
            E("full_path_name", "fullPathName", str, is_array=True),
        )


class EnterpriseDepartmentGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseDepartmentGetListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.

    Attributes:
        department_key: departmentKey
        full_path_name: fullPathName
    """

    __slots__ = [
        "department_key",
        "full_path_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_key",
                "departmentKey",
                OCI.DepartmentKey,
                is_complex=True,
                is_array=True,
            ),
            E("full_path_name", "fullPathName", str, is_array=True),
        )


class EnterpriseEnhancedCallLogsGetListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry will
    be returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The result is sorted by date/time of the call.  Replaced by
    ``EnterpriseEnhancedCallLogsGetListResponse17sp4()``. Originally deprecated in release
    20.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseEnhancedCallLogsGetListResponse17sp4(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest17sp4()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest17sp4()``, if a
    call log type was specified in the request.  - the total number of retrievable logs,
    if no call log type was specified in the request.  A list of
    ExtendedMixedCallLogsEntry17sp4 will be returned if the call logs are stored on DBS.
    Otherwise, an error response will be returned.  The result is sorted by date/time of
    the call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry17sp4,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseEnhancedCallLogsGetListResponse20(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest20()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest20()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry20
    will be returned if the call logs are stored on DBS. Otherwise, an error response will
    be returned.  The result is sorted by date/time of the call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry20,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseEnhancedCallLogsGetListResponse21(OCIResponse):
    """
    Response to ``EnterpriseEnhancedCallLogsGetListRequest21()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``EnterpriseEnhancedCallLogsGetListRequest21()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry21
    will be returned if the call logs are stored on DBS. Otherwise, an error response will
    be returned.  The result is sorted by date/time of the call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry21,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListResponse(OCIResponse):
    """
    Response to ``EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListRequest()``.


    Attributes:
        trunk_group: trunkGroup
    """

    __slots__ = [
        "trunk_group",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group",
                "trunkGroup",
                OCI.EnterpriseTrunkTrunkGroupKey,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseVoiceVPNGetDefaultResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetDefaultResponse()``.


    Attributes:
        policy_selection: policySelection
        digit_manipulation_operation: digitManipulationOperation
        route_group_id: routeGroupId
        treatment: treatment
    """

    __slots__ = [
        "policy_selection",
        "digit_manipulation_operation",
        "route_group_id",
        "treatment",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "policy_selection",
                "policySelection",
                str,
                is_required=True,
                is_array=True,
            ),
            E(
                "digit_manipulation_operation",
                "digitManipulationOperation",
                str,
                is_required=True,
                is_array=True,
            ),
            E("route_group_id", "routeGroupId", str, is_array=True),
            E(
                "treatment",
                "treatment",
                OCI.EnterpriseVoiceVPNTreatmentEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseVoiceVPNGetPolicyResponse(OCIResponse):
    """
    Response to ``EnterpriseVoiceVPNGetPolicyRequest()``.


    Attributes:
        min_extension_length: minExtensionLength
        max_extension_length: maxExtensionLength
        description: description
        route_group_id: routeGroupId
        policy_selection: policySelection
        digit_manipulation: digitManipulation
        treatment_id: treatmentId
    """

    __slots__ = [
        "min_extension_length",
        "max_extension_length",
        "description",
        "route_group_id",
        "policy_selection",
        "digit_manipulation",
        "treatment_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("min_extension_length", "minExtensionLength", int, is_required=True),
            E("max_extension_length", "maxExtensionLength", int, is_required=True),
            E("description", "description", str),
            E("route_group_id", "routeGroupId", str),
            E("policy_selection", "policySelection", str, is_required=True),
            E(
                "digit_manipulation",
                "digitManipulation",
                OCI.EnterpriseVoiceVPNDigitManipulation,
                is_complex=True,
                is_array=True,
            ),
            E("treatment_id", "treatmentId", str),
        )


class GroupAccessDeviceGetResponse14(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest14()``.

    Replaced By: ``GroupAccessDeviceGetResponse14sp3()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        configuration_mode: configurationMode
        configuration_file_name: configurationFileName
        physical_location: physicalLocation
        transport_protocol: transportProtocol
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "configuration_mode",
        "configuration_file_name",
        "physical_location",
        "transport_protocol",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("configuration_mode", "configurationMode", str),
            E("configuration_file_name", "configurationFileName", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
        )


class GroupAccessDeviceGetResponse14sp3(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest14sp3()``.

    Replaced By: ``GroupAccessDeviceGetResponse14sp6()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        configuration_mode: configurationMode
        configuration_file_name: configurationFileName
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "configuration_mode",
        "configuration_file_name",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("configuration_mode", "configurationMode", str),
            E("configuration_file_name", "configurationFileName", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
        )


class GroupAccessDeviceGetResponse14sp6(OCIResponse):
    """
    Response to: ``GroupAccessDeviceGetRequest14sp6()`` Replaced by:
    ``GroupAccessDeviceGetResponse16()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        configuration_mode: configurationMode
        configuration_file_name: configurationFileName
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "configuration_mode",
        "configuration_file_name",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("configuration_mode", "configurationMode", str),
            E("configuration_file_name", "configurationFileName", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
        )


class GroupAccessDeviceGetResponse16(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest16()``.


    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        configuration_mode: configurationMode
        configuration_file_name: configurationFileName
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "configuration_mode",
        "configuration_file_name",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("configuration_mode", "configurationMode", str),
            E("configuration_file_name", "configurationFileName", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
        )


class GroupAccessDeviceGetResponse18sp1(OCIResponse):
    """
    Response to ``GroupAccessDeviceGetRequest18sp1()``.


    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        configuration_mode: configurationMode
        configuration_file_name: configurationFileName
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
        version: version
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "configuration_mode",
        "configuration_file_name",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "version",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("configuration_mode", "configurationMode", str),
            E("configuration_file_name", "configurationFileName", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
            E("version", "version", str),
        )


class GroupAccountAuthorizationCodesGetListResponse(OCIResponse):
    """
    Response to ``GroupAccountAuthorizationCodesGetListRequest()``.


    Attributes:
        code_entry: codeEntry
    """

    __slots__ = [
        "code_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "code_entry",
                "codeEntry",
                OCI.AccountAuthorizationCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupCallCenterComfortMessageBypassGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterComfortMessageBypassGetRequest17()``.


    Attributes:
        is_active: isActive
        call_waiting_age_threshold_seconds: callWaitingAgeThresholdSeconds
        play_announcement_after_ringing: playAnnouncementAfterRinging
        ring_time_before_playing_announcement_seconds:
            ringTimeBeforePlayingAnnouncementSeconds
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "is_active",
        "call_waiting_age_threshold_seconds",
        "play_announcement_after_ringing",
        "ring_time_before_playing_announcement_seconds",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "call_waiting_age_threshold_seconds",
                "callWaitingAgeThresholdSeconds",
                int,
                is_required=True,
            ),
            E(
                "play_announcement_after_ringing",
                "playAnnouncementAfterRinging",
                bool,
                is_required=True,
            ),
            E(
                "ring_time_before_playing_announcement_seconds",
                "ringTimeBeforePlayingAnnouncementSeconds",
                int,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterForcedForwardingGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterForcedForwardingGetRequest17()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        allow_enable_via_fac: allowEnableViaFAC
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "allow_enable_via_fac",
        "play_announcement_before_forwarding",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("allow_enable_via_fac", "allowEnableViaFAC", bool, is_required=True),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterGetAnnouncementResponse14sp6(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest14sp6()``.


    Attributes:
        entrance_message_selection: entranceMessageSelection
        entrance_message_audio_file_description: entranceMessageAudioFileDescription
        entrance_message_video_file_description: entranceMessageVideoFileDescription
        periodic_comfort_message_selection: periodicComfortMessageSelection
        periodic_comfort_message_audio_file_description:
            periodicComfortMessageAudioFileDescription
        periodic_comfort_message_video_file_description:
            periodicComfortMessageVideoFileDescription
        on_hold_source: onHoldSource
        on_hold_use_alternate_source_for_internal_calls:
            onHoldUseAlternateSourceForInternalCalls
        on_hold_internal_source: onHoldInternalSource
    """

    __slots__ = [
        "entrance_message_selection",
        "entrance_message_audio_file_description",
        "entrance_message_video_file_description",
        "periodic_comfort_message_selection",
        "periodic_comfort_message_audio_file_description",
        "periodic_comfort_message_video_file_description",
        "on_hold_source",
        "on_hold_use_alternate_source_for_internal_calls",
        "on_hold_internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "entrance_message_selection",
                "entranceMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_file_description",
                "entranceMessageAudioFileDescription",
                str,
            ),
            E(
                "entrance_message_video_file_description",
                "entranceMessageVideoFileDescription",
                str,
            ),
            E(
                "periodic_comfort_message_selection",
                "periodicComfortMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_file_description",
                "periodicComfortMessageAudioFileDescription",
                str,
            ),
            E(
                "periodic_comfort_message_video_file_description",
                "periodicComfortMessageVideoFileDescription",
                str,
            ),
            E(
                "on_hold_source",
                "onHoldSource",
                OCI.CallCenterMusicOnHoldSourceRead,
                is_complex=True,
                is_required=True,
            ),
            E(
                "on_hold_use_alternate_source_for_internal_calls",
                "onHoldUseAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "on_hold_internal_source",
                "onHoldInternalSource",
                OCI.CallCenterMusicOnHoldSourceRead,
                is_complex=True,
            ),
        )


class GroupCallCenterHolidayServiceGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest17()``.


    Attributes:
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "action",
        "holiday_schedule",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("holiday_schedule", "holidaySchedule", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterHolidayServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest17sp1()``.


    Attributes:
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "action",
        "holiday_schedule",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterNightServiceGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest17()``.


    Attributes:
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_audio_media_type_list: manualAudioMediaTypeList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
        manual_video_media_type_list: manualVideoMediaTypeList
    """

    __slots__ = [
        "action",
        "business_hours",
        "force_night_service",
        "allow_manual_override_via_fac",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "manual_announcement_mode",
        "manual_audio_message_selection",
        "manual_audio_url_list",
        "manual_audio_file_list",
        "manual_audio_media_type_list",
        "manual_video_message_selection",
        "manual_video_url_list",
        "manual_video_file_list",
        "manual_video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("business_hours", "businessHours", str),
            E("force_night_service", "forceNightService", bool, is_required=True),
            E(
                "allow_manual_override_via_fac",
                "allowManualOverrideViaFAC",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_announcement_mode",
                "manualAnnouncementMode",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_message_selection",
                "manualAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_audio_media_type_list",
                "manualAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_video_message_selection",
                "manualVideoMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_video_media_type_list",
                "manualVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterNightServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest17sp1()``.


    Attributes:
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_audio_media_type_list: manualAudioMediaTypeList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
        manual_video_media_type_list: manualVideoMediaTypeList
    """

    __slots__ = [
        "action",
        "business_hours",
        "force_night_service",
        "allow_manual_override_via_fac",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "manual_announcement_mode",
        "manual_audio_message_selection",
        "manual_audio_url_list",
        "manual_audio_file_list",
        "manual_audio_media_type_list",
        "manual_video_message_selection",
        "manual_video_url_list",
        "manual_video_file_list",
        "manual_video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool, is_required=True),
            E(
                "allow_manual_override_via_fac",
                "allowManualOverrideViaFAC",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_announcement_mode",
                "manualAnnouncementMode",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_message_selection",
                "manualAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_audio_media_type_list",
                "manualAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_video_message_selection",
                "manualVideoMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_video_media_type_list",
                "manualVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterOverflowGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterOverflowGetRequest17()`` .


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "overflow_after_timeout",
        "timeout_seconds",
        "play_announcement_before_overflow_processing",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
            E("timeout_seconds", "timeoutSeconds", int, is_required=True),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterQueueCallDispositionCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterQueueCallDispositionCodeSettingsGetRequest()``.


    Attributes:
        enable_call_disposition_codes: enableCallDispositionCodes
        include_organization_codes: includeOrganizationCodes
        force_use_of_call_disposition_codes: forceUseOfCallDispositionCodes
        default_call_disposition_code: defaultCallDispositionCode
    """

    __slots__ = [
        "enable_call_disposition_codes",
        "include_organization_codes",
        "force_use_of_call_disposition_codes",
        "default_call_disposition_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_call_disposition_codes",
                "enableCallDispositionCodes",
                bool,
                is_required=True,
            ),
            E(
                "include_organization_codes",
                "includeOrganizationCodes",
                bool,
                is_required=True,
            ),
            E(
                "force_use_of_call_disposition_codes",
                "forceUseOfCallDispositionCodes",
                bool,
                is_required=True,
            ),
            E(
                "default_call_disposition_code",
                "defaultCallDispositionCode",
                OCI.CallDispositionCodeWithLevel,
                is_complex=True,
            ),
        )


class GroupCallCenterStrandedCallGetResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallGetRequest17()``.


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCallCenterStrandedCallUnavailableGetResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallUnavailableGetRequest()``.


    Attributes:
        condition_policy_on_number_of_agents_with_specified_unavailable_code:
            conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode
        number_of_agents_with_specified_unavailable_code:
            numberOfAgentsWithSpecifiedUnavailableCode
        agents_unavailable_code: agentsUnavailableCode
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "condition_policy_on_number_of_agents_with_specified_unavailable_code",
        "number_of_agents_with_specified_unavailable_code",
        "agents_unavailable_code",
        "action",
        "transfer_phone_number",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "condition_policy_on_number_of_agents_with_specified_unavailable_code",
                "conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode",
                bool,
                is_required=True,
            ),
            E(
                "number_of_agents_with_specified_unavailable_code",
                "numberOfAgentsWithSpecifiedUnavailableCode",
                int,
            ),
            E("agents_unavailable_code", "agentsUnavailableCode", str),
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupCommonPhoneListGetListResponse(OCIResponse):
    """
    Response to the ``GroupCommonPhoneListGetListRequest()``.

    The response contains the group's common phone list.

    Attributes:
        entry: entry
    """

    __slots__ = [
        "entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("entry", "entry", OCI.PhoneListEntry, is_complex=True, is_array=True),
        )


class GroupCommunicationBarringAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``GroupCommunicationBarringAuthorizationCodeGetListRequest()``.

    Contains a list of Communication Barring Authorization Codes assigned to the group.

    Attributes:
        code: code
    """

    __slots__ = [
        "code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "code",
                "code",
                OCI.CommunicationBarringAuthorizationCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupCustomRingbackGroupGetResponse20(OCIResponse):
    """
    Response to the ``GroupCustomRingbackGroupGetRequest20()``.


    Attributes:
        is_active: isActive
        audio_selection: audioSelection
        audio_file: audioFile
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file: videoFile
        video_file_url: videoFileUrl
    """

    __slots__ = [
        "is_active",
        "audio_selection",
        "audio_file",
        "audio_file_url",
        "video_selection",
        "video_file",
        "video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.AnnouncementFileKey, is_complex=True),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file", "videoFile", OCI.AnnouncementFileKey, is_complex=True),
            E("video_file_url", "videoFileUrl", str),
        )


class GroupDepartmentAdminGetResponse(OCIResponse):
    """
    Response to the ``GroupDepartmentAdminGetRequest()``.

    The response contains the group department administrators profile information.

    Attributes:
        department_key: departmentKey
        department_full_path: departmentFullPath
        first_name: firstName
        last_name: lastName
        language: language
    """

    __slots__ = [
        "department_key",
        "department_full_path",
        "first_name",
        "last_name",
        "language",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_key",
                "departmentKey",
                OCI.GroupDepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E("department_full_path", "departmentFullPath", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("language", "language", str, is_required=True),
        )


class GroupDepartmentGetAvailableParentListResponse(OCIResponse):
    """
    Response to ``GroupDepartmentGetAvailableParentListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.

    Attributes:
        department_key: departmentKey
        full_path_name: fullPathName
    """

    __slots__ = [
        "department_key",
        "full_path_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_key",
                "departmentKey",
                OCI.DepartmentKey,
                is_complex=True,
                is_array=True,
            ),
            E("full_path_name", "fullPathName", str, is_array=True),
        )


class GroupDepartmentGetListResponse(OCIResponse):
    """
    Response to ``GroupDepartmentGetListRequest()``.

    The response includes two parallel arrays of department keys and department display
    names.  Replaced by: ``GroupDepartmentGetListResponse18()``

    Attributes:
        department_key: departmentKey
        full_path_name: fullPathName
    """

    __slots__ = [
        "department_key",
        "full_path_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_key",
                "departmentKey",
                OCI.DepartmentKey,
                is_complex=True,
                is_array=True,
            ),
            E("full_path_name", "fullPathName", str, is_array=True),
        )


class GroupDepartmentGetResponse(OCIResponse):
    """
    Response to ``GroupDepartmentGetRequest()``.

    The following elements are only used in AS data mode: callingLineIdName
    caliingLineIdPhoneNumber

    Attributes:
        parent_department_key: parentDepartmentKey
        calling_line_id_name: callingLineIdName
        calling_line_id_phone_number: callingLineIdPhoneNumber
    """

    __slots__ = [
        "parent_department_key",
        "calling_line_id_name",
        "calling_line_id_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "parent_department_key",
                "parentDepartmentKey",
                OCI.DepartmentKey,
                is_complex=True,
            ),
            E("calling_line_id_name", "callingLineIdName", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        )


class GroupEmergencyZonesGetHomeZoneListResponse(OCIResponse):
    """
    Response to ``GroupEmergencyZonesGetHomeZoneListRequest()``.


    Attributes:
        home_zone_ip_address: homeZoneIpAddress
        home_zone_ip_address_range: homeZoneIpAddressRange
    """

    __slots__ = [
        "home_zone_ip_address",
        "home_zone_ip_address_range",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("home_zone_ip_address", "homeZoneIpAddress", str, is_array=True),
            E(
                "home_zone_ip_address_range",
                "homeZoneIpAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupEnhancedCallLogsGetListResponse(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of ExtendedMixedCallLogsEntry will be
    returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The logs are sorted by date/time of the call.  Replaced by
    ``GroupEnhancedCallLogsGetListResponse17sp4()``. Originally deprecated in release 20.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupEnhancedCallLogsGetListResponse17sp4(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest17sp4()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest17sp4()``, if a call
    log type was specified in the request.  - the total number of retrievable logs, if no
    call log type was specified in the request.  A list of ExtendedMixedCallLogsEntry17sp4
    will be returned if the call logs are stored on DBS. Otherwise, an error response will
    be returned.  The logs are sorted by date/time of the call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry17sp4,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupEnhancedCallLogsGetListResponse20(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest20()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest20()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of ExtendedMixedCallLogsEntry20 will be
    returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The logs are sorted by date/time of the call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry20,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupEnhancedCallLogsGetListResponse21(OCIResponse):
    """
    Response to ``GroupEnhancedCallLogsGetListRequest21()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``GroupEnhancedCallLogsGetListRequest21()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  A list of ExtendedMixedCallLogsEntry21 will be
    returned if the call logs are stored on DBS. Otherwise, an error response will be
    returned.  The logs are sorted by date/time of the call.

    Attributes:
        total_number_of_rows: totalNumberOfRows
        extended_call_log: extendedCallLog
    """

    __slots__ = [
        "total_number_of_rows",
        "extended_call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "extended_call_log",
                "extendedCallLog",
                OCI.ExtendedMixedCallLogsEntry21,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetListRequest()``.

    Replaced by: ``GroupFeatureAccessCodeGetResponse()``

    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupFeatureAccessCodeGetResponse(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetRequest()``.


    Attributes:
        use_feature_access_code_level: useFeatureAccessCodeLevel
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "use_feature_access_code_level",
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_feature_access_code_level",
                "useFeatureAccessCodeLevel",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupFeatureAccessCodeGetResponse20(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    Replaced by : ``GroupFeatureAccessCodeGetResponse21()``

    Attributes:
        use_feature_access_code_level: useFeatureAccessCodeLevel
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "use_feature_access_code_level",
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_feature_access_code_level",
                "useFeatureAccessCodeLevel",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupFeatureAccessCodeGetResponse21(OCIResponse):
    """
    Response to the ``GroupFeatureAccessCodeGetRequest21()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".

    Attributes:
        use_feature_access_code_level: useFeatureAccessCodeLevel
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "use_feature_access_code_level",
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "use_feature_access_code_level",
                "useFeatureAccessCodeLevel",
                str,
                is_required=True,
            ),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeReadEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaResponse(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaRequest()``.

    Contains the alerting group selective criteria information.  Replaced by:
    ``GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaResponse21(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaRequest21()``.

    Contains the alerting group selective criteria information.

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupGetResponse(OCIResponse):
    """
    Response to the ``GroupGetRequest()``.

    The response contains the group's profile information.

    Replaced By: ``GroupGetResponse14sp7()``

    Attributes:
        default_domain: defaultDomain
        user_limit: userLimit
        user_count: userCount
        group_name: groupName
        calling_line_id_name: callingLineIdName
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        location_dialing_code: locationDialingCode
        contact: contact
        address: address
    """

    __slots__ = [
        "default_domain",
        "user_limit",
        "user_count",
        "group_name",
        "calling_line_id_name",
        "time_zone",
        "time_zone_display_name",
        "location_dialing_code",
        "contact",
        "address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_domain", "defaultDomain", str, is_required=True),
            E("user_limit", "userLimit", int, is_required=True),
            E("user_count", "userCount", int, is_required=True),
            E("group_name", "groupName", str),
            E("calling_line_id_name", "callingLineIdName", str),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("location_dialing_code", "locationDialingCode", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


class GroupGetResponse14sp7(OCIResponse):
    """
    Response to the ``GroupGetRequest14sp7()``.

    The response contains the group's profile information.

    Attributes:
        default_domain: defaultDomain
        user_limit: userLimit
        user_count: userCount
        group_name: groupName
        calling_line_id_name: callingLineIdName
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_display_phone_number: callingLineIdDisplayPhoneNumber
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        location_dialing_code: locationDialingCode
        contact: contact
        address: address
    """

    __slots__ = [
        "default_domain",
        "user_limit",
        "user_count",
        "group_name",
        "calling_line_id_name",
        "calling_line_id_phone_number",
        "calling_line_id_display_phone_number",
        "time_zone",
        "time_zone_display_name",
        "location_dialing_code",
        "contact",
        "address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_domain", "defaultDomain", str, is_required=True),
            E("user_limit", "userLimit", int, is_required=True),
            E("user_count", "userCount", int, is_required=True),
            E("group_name", "groupName", str),
            E("calling_line_id_name", "callingLineIdName", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E(
                "calling_line_id_display_phone_number",
                "callingLineIdDisplayPhoneNumber",
                str,
            ),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("location_dialing_code", "locationDialingCode", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


class GroupGroupNightForwardingGetResponse(OCIResponse):
    """
    Response to ``GroupGroupNightForwardingGetRequest()``.


    Attributes:
        night_forwarding: nightForwarding
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        forward_to_phone_number: forwardToPhoneNumber
    """

    __slots__ = [
        "night_forwarding",
        "business_hours",
        "holiday_schedule",
        "forward_to_phone_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("night_forwarding", "nightForwarding", str, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
        )


class GroupHolidayScheduleGetResponse(OCIResponse):
    """
    Response to the ``GroupHolidayScheduleGetRequest()``.

    The response contains the group's holiday schedule information.

    Attributes:
        holiday_schedule_name: holidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    __slots__ = [
        "holiday_schedule_name",
        "holiday01",
        "holiday02",
        "holiday03",
        "holiday04",
        "holiday05",
        "holiday06",
        "holiday07",
        "holiday08",
        "holiday09",
        "holiday10",
        "holiday11",
        "holiday12",
        "holiday13",
        "holiday14",
        "holiday15",
        "holiday16",
        "holiday17",
        "holiday18",
        "holiday19",
        "holiday20",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


class GroupMeetMeConferencingGetResponse(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetRequest()``.


    Attributes:
        available_ports: availablePorts
        allocated_ports: allocatedPorts
    """

    __slots__ = [
        "available_ports",
        "allocated_ports",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_ports",
                "availablePorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupMusicOnHoldGetDepartmentListResponse(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetDepartmentListRequest()``.


    Attributes:
        has_department: hasDepartment
        department: department
        department_full_path: departmentFullPath
    """

    __slots__ = [
        "has_department",
        "department",
        "department_full_path",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("has_department", "hasDepartment", bool, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_array=True,
            ),
            E("department_full_path", "departmentFullPath", str, is_array=True),
        )


class GroupMusicOnHoldGetInstanceResponse14sp6(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest14sp6()``.

    Replaced By: ``GroupMusicOnHoldGetInstanceResponse16()``

    Attributes:
        service_user_id: serviceUserId
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "service_user_id",
        "is_active_during_call_hold",
        "is_active_during_call_park",
        "is_active_during_busy_camp_on",
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceRead,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceRead,
                is_complex=True,
            ),
        )


class GroupMusicOnHoldGetInstanceResponse16(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest16()``.


    Attributes:
        service_user_id: serviceUserId
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "service_user_id",
        "is_active_during_call_hold",
        "is_active_during_call_park",
        "is_active_during_busy_camp_on",
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceRead16,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceRead16,
                is_complex=True,
            ),
        )


class GroupMusicOnHoldGetInstanceResponse19(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest19()``.


    Attributes:
        service_user_id: serviceUserId
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "service_user_id",
        "is_active_during_call_hold",
        "is_active_during_call_park",
        "is_active_during_busy_camp_on",
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceRead19,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceRead19,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupMusicOnHoldGetInstanceResponse20(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest20()``.


    Attributes:
        service_user_id: serviceUserId
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "service_user_id",
        "is_active_during_call_hold",
        "is_active_during_call_park",
        "is_active_during_busy_camp_on",
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceRead20,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceRead20,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupMusicOnHoldGetInstanceResponse21(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest21()``.


    Attributes:
        service_user_id: serviceUserId
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "service_user_id",
        "is_active_during_call_hold",
        "is_active_during_call_park",
        "is_active_during_busy_camp_on",
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceRead21,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceRead21,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListRequest()``.


    Attributes:
        code_entry: codeEntry
    """

    __slots__ = [
        "code_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "code_entry",
                "codeEntry",
                OCI.OutgoingCallingPlanAuthorizationCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupPreAlertingAnnouncementGetResponse20(OCIResponse):
    """
    Response to a ``GroupPreAlertingAnnouncementGetResponse20()``.


    Attributes:
        announcement_interruption: announcementInterruption
        interruption_digit_sequence: interruptionDigitSequence
        audio_selection: audioSelection
        audio_file: audioFile
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file: videoFile
        video_file_url: videoFileUrl
    """

    __slots__ = [
        "announcement_interruption",
        "interruption_digit_sequence",
        "audio_selection",
        "audio_file",
        "audio_file_url",
        "video_selection",
        "video_file",
        "video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "announcement_interruption",
                "announcementInterruption",
                str,
                is_required=True,
            ),
            E("interruption_digit_sequence", "interruptionDigitSequence", str),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.AnnouncementFileKey, is_complex=True),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file", "videoFile", OCI.AnnouncementFileKey, is_complex=True),
            E("video_file_url", "videoFileUrl", str),
        )


class GroupPreferredCarrierGroupGetResponse(OCIResponse):
    """
    Response to a ``GroupPreferredCarrierGroupGetRequest()``.


    Attributes:
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    __slots__ = [
        "intra_lata_carrier",
        "inter_lata_carrier",
        "international_carrier",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "intra_lata_carrier",
                "intraLataCarrier",
                OCI.GroupPreferredCarrierName,
                is_complex=True,
                is_required=True,
            ),
            E(
                "inter_lata_carrier",
                "interLataCarrier",
                OCI.GroupPreferredCarrierName,
                is_complex=True,
                is_required=True,
            ),
            E(
                "international_carrier",
                "internationalCarrier",
                OCI.GroupPreferredCarrierName,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupRoutePointForcedForwardingGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointForcedForwardingGetRequest()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "play_announcement_before_forwarding",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupRoutePointHolidayServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointHolidayServiceGetRequest()``.


    Attributes:
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "action",
        "holiday_schedule",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("holiday_schedule", "holidaySchedule", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupRoutePointHolidayServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupRoutePointHolidayServiceGetRequest17sp1()``.


    Attributes:
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "action",
        "holiday_schedule",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupRoutePointNightServiceGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointNightServiceGetRequest()``.


    Attributes:
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_audio_media_type_list: manualAudioMediaTypeList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
        manual_video_media_type_list: manualVideoMediaTypeList
    """

    __slots__ = [
        "action",
        "business_hours",
        "force_night_service",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "manual_announcement_mode",
        "manual_audio_message_selection",
        "manual_audio_url_list",
        "manual_audio_file_list",
        "manual_audio_media_type_list",
        "manual_video_message_selection",
        "manual_video_url_list",
        "manual_video_file_list",
        "manual_video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("business_hours", "businessHours", str),
            E("force_night_service", "forceNightService", bool, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_announcement_mode",
                "manualAnnouncementMode",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_message_selection",
                "manualAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_audio_media_type_list",
                "manualAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_video_message_selection",
                "manualVideoMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_video_media_type_list",
                "manualVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupRoutePointNightServiceGetResponse17sp1(OCIResponse):
    """
    Response to the ``GroupRoutePointNightServiceGetRequest17sp1()``.


    Attributes:
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_audio_media_type_list: manualAudioMediaTypeList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
        manual_video_media_type_list: manualVideoMediaTypeList
    """

    __slots__ = [
        "action",
        "business_hours",
        "force_night_service",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "manual_announcement_mode",
        "manual_audio_message_selection",
        "manual_audio_url_list",
        "manual_audio_file_list",
        "manual_audio_media_type_list",
        "manual_video_message_selection",
        "manual_video_url_list",
        "manual_video_file_list",
        "manual_video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_announcement_mode",
                "manualAnnouncementMode",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_message_selection",
                "manualAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_audio_media_type_list",
                "manualAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "manual_video_message_selection",
                "manualVideoMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "manual_video_media_type_list",
                "manualVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupRoutePointOverflowGetResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointOverflowGetRequest()`` .


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        audio_media_type_list: audioMediaTypeList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        video_media_type_list: videoMediaTypeList
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "overflow_after_timeout",
        "timeout_seconds",
        "play_announcement_before_overflow_processing",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "audio_media_type_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "video_media_type_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
            E("timeout_seconds", "timeoutSeconds", int, is_required=True),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "audio_media_type_list",
                "audioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "video_media_type_list",
                "videoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
        )


class GroupRoutePointQueueCallDispositionCodeSettingsGetResponse(OCIResponse):
    """
    Response to ``GroupRoutePointQueueCallDispositionCodeSettingsGetRequest()``.


    Attributes:
        enable_call_disposition_codes: enableCallDispositionCodes
        include_organization_codes: includeOrganizationCodes
        force_use_of_call_disposition_codes: forceUseOfCallDispositionCodes
        default_call_disposition_code: defaultCallDispositionCode
    """

    __slots__ = [
        "enable_call_disposition_codes",
        "include_organization_codes",
        "force_use_of_call_disposition_codes",
        "default_call_disposition_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_call_disposition_codes",
                "enableCallDispositionCodes",
                bool,
                is_required=True,
            ),
            E(
                "include_organization_codes",
                "includeOrganizationCodes",
                bool,
                is_required=True,
            ),
            E(
                "force_use_of_call_disposition_codes",
                "forceUseOfCallDispositionCodes",
                bool,
                is_required=True,
            ),
            E(
                "default_call_disposition_code",
                "defaultCallDispositionCode",
                OCI.CallDispositionCodeWithLevel,
                is_complex=True,
            ),
        )


class GroupScheduleGetEventResponse(OCIResponse):
    """
    Response to ``GroupScheduleGetEventRequest()``.

    The response contains the event of the group schedule.

    Attributes:
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    __slots__ = [
        "start_date",
        "all_day_event",
        "start_time",
        "end_time",
        "end_date",
        "recurrence",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


class GroupSessionAdmissionControlGetAvailableDeviceListResponse(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGetAvailableDeviceListRequest()``.

    Contains a table of devices can be assigned to session admission control group in the
    group.

    Attributes:
        access_device: accessDevice
    """

    __slots__ = [
        "access_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupSessionAdmissionControlGroupGetResponse(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGroupGetRequest()``.

    Returns the profile information for the session admission control group.

    Attributes:
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        default_group: defaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
    """

    __slots__ = [
        "max_session",
        "max_user_originating_sessions",
        "max_user_terminating_sessions",
        "reserved_session",
        "reserved_user_originating_sessions",
        "reserved_user_terminating_sessions",
        "default_group",
        "count_intra_sac_group_sessions",
        "devices",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("default_group", "defaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E("devices", "devices", OCI.AccessDevice, is_complex=True, is_array=True),
        )


class GroupSessionAdmissionControlGroupGetResponse19sp1(OCIResponse):
    """
    Response to ``GroupSessionAdmissionControlGroupGetRequest19sp1()``.

    Returns the profile information for the session admission control group.

    Attributes:
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        default_group: defaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
        block_emergency_and_repair_calls_due_to_sac_limits:
            blockEmergencyAndRepairCallsDueToSACLimits
    """

    __slots__ = [
        "max_session",
        "max_user_originating_sessions",
        "max_user_terminating_sessions",
        "reserved_session",
        "reserved_user_originating_sessions",
        "reserved_user_terminating_sessions",
        "default_group",
        "count_intra_sac_group_sessions",
        "devices",
        "block_emergency_and_repair_calls_due_to_sac_limits",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("default_group", "defaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E("devices", "devices", OCI.AccessDevice, is_complex=True, is_array=True),
            E(
                "block_emergency_and_repair_calls_due_to_sac_limits",
                "blockEmergencyAndRepairCallsDueToSACLimits",
                bool,
                is_required=True,
            ),
        )


class GroupTimeScheduleGetResponse(OCIResponse):
    """
    Response to the ``GroupTimeScheduleGetRequest()``.

    The response contains the group's time schedule information.

    Attributes:
        time_schedule_name: timeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    __slots__ = [
        "time_schedule_name",
        "time_interval01",
        "time_interval02",
        "time_interval03",
        "time_interval04",
        "time_interval05",
        "time_interval06",
        "time_interval07",
        "time_interval08",
        "time_interval09",
        "time_interval10",
        "time_interval11",
        "time_interval12",
        "time_interval13",
        "time_interval14",
        "time_interval15",
        "time_interval16",
        "time_interval17",
        "time_interval18",
        "time_interval19",
        "time_interval20",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


class GroupTrunkGroupGetInstanceResponse14sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp4()``.

    Returns the profile information for the Trunk Group.

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "unreachable_destination_trap_initial_calls",
        "unreachable_destination_trap_offset_calls",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        )


class GroupTrunkGroupGetInstanceResponse14sp5(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp5()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "unreachable_destination_trap_initial_calls",
        "unreachable_destination_trap_offset_calls",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse14sp9(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp9()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        use_pilot_user_calling_line_identity: usePilotUserCallingLineIdentity
        use_pilot_user_charge_number: usePilotUserChargeNumber
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "unreachable_destination_trap_initial_calls",
        "unreachable_destination_trap_offset_calls",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "use_pilot_user_calling_line_identity",
        "use_pilot_user_charge_number",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "use_pilot_user_calling_line_identity",
                "usePilotUserCallingLineIdentity",
                bool,
                is_required=True,
            ),
            E(
                "use_pilot_user_charge_number",
                "usePilotUserChargeNumber",
                bool,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse15(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest15()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse15sp2(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest15sp2()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest17()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        )


class GroupTrunkGroupGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest17sp3()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name".

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        trunk_group_state: trunkGroupState
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "prefix_enabled",
        "prefix",
        "stateful_rerouting_enabled",
        "send_continuous_options_message",
        "continuous_options_sending_interval_seconds",
        "failure_options_sending_interval_seconds",
        "failure_threshold_counter",
        "success_threshold_counter",
        "invite_failure_threshold_counter",
        "invite_failure_threshold_window_seconds",
        "trunk_group_state",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E("trunk_group_state", "trunkGroupState", str, is_required=True),
        )


class GroupTrunkGroupGetInstanceResponse17sp4(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest17sp4()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        trunk_group_state: trunkGroupState
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "allow_termination_to_trunk_group_identity",
        "allow_termination_to_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "include_trunk_group_identity_for_network_calls",
        "include_otg_identity_for_network_calls",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "prefix_enabled",
        "prefix",
        "stateful_rerouting_enabled",
        "send_continuous_options_message",
        "continuous_options_sending_interval_seconds",
        "failure_options_sending_interval_seconds",
        "failure_threshold_counter",
        "success_threshold_counter",
        "invite_failure_threshold_counter",
        "invite_failure_threshold_window_seconds",
        "trunk_group_state",
        "pilot_user_calling_line_asserted_identity_policy",
        "use_system_calling_line_asserted_identity_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E("trunk_group_state", "trunkGroupState", str, is_required=True),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest19()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by ``GroupTrunkGroupGetInstanceResponse19sp1()``.

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        trunk_group_state: trunkGroupState
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        total_active_incoming_calls: totalActiveIncomingCalls
        total_active_outgoing_calls: totalActiveOutgoingCalls
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "allow_termination_to_trunk_group_identity",
        "allow_termination_to_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "include_trunk_group_identity_for_network_calls",
        "include_otg_identity_for_network_calls",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "prefix_enabled",
        "prefix",
        "stateful_rerouting_enabled",
        "send_continuous_options_message",
        "continuous_options_sending_interval_seconds",
        "failure_options_sending_interval_seconds",
        "failure_threshold_counter",
        "success_threshold_counter",
        "invite_failure_threshold_counter",
        "invite_failure_threshold_window_seconds",
        "trunk_group_state",
        "pilot_user_calling_line_asserted_identity_policy",
        "use_system_calling_line_asserted_identity_policy",
        "total_active_incoming_calls",
        "total_active_outgoing_calls",
        "pilot_user_call_optimization_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E("trunk_group_state", "trunkGroupState", str, is_required=True),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "total_active_incoming_calls",
                "totalActiveIncomingCalls",
                int,
                is_required=True,
            ),
            E(
                "total_active_outgoing_calls",
                "totalActiveOutgoingCalls",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse19V2(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest19V2()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by GroupTrunkGroupGetInstanceResponse19sp1V2.

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        trunk_group_state: trunkGroupState
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        total_active_incoming_calls: totalActiveIncomingCalls
        total_active_outgoing_calls: totalActiveOutgoingCalls
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "allow_termination_to_trunk_group_identity",
        "allow_termination_to_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "include_trunk_group_identity_for_network_calls",
        "include_otg_identity_for_network_calls",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "prefix_enabled",
        "prefix",
        "stateful_rerouting_enabled",
        "send_continuous_options_message",
        "continuous_options_sending_interval_seconds",
        "failure_options_sending_interval_seconds",
        "failure_threshold_counter",
        "success_threshold_counter",
        "invite_failure_threshold_counter",
        "invite_failure_threshold_window_seconds",
        "trunk_group_state",
        "pilot_user_calling_line_asserted_identity_policy",
        "use_system_calling_line_asserted_identity_policy",
        "total_active_incoming_calls",
        "total_active_outgoing_calls",
        "pilot_user_call_optimization_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E("trunk_group_state", "trunkGroupState", str, is_required=True),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "total_active_incoming_calls",
                "totalActiveIncomingCalls",
                int,
                is_required=True,
            ),
            E(
                "total_active_outgoing_calls",
                "totalActiveOutgoingCalls",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest19sp1()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by GroupTrunkGroupGetInstanceResponse19sp1V2.

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        trunk_group_state: trunkGroupState
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        total_active_incoming_calls: totalActiveIncomingCalls
        total_active_outgoing_calls: totalActiveOutgoingCalls
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "allow_termination_to_trunk_group_identity",
        "allow_termination_to_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "include_trunk_group_identity_for_network_calls",
        "include_otg_identity_for_network_calls",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_for_external_calls_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "prefix_enabled",
        "prefix",
        "stateful_rerouting_enabled",
        "send_continuous_options_message",
        "continuous_options_sending_interval_seconds",
        "failure_options_sending_interval_seconds",
        "failure_threshold_counter",
        "success_threshold_counter",
        "invite_failure_threshold_counter",
        "invite_failure_threshold_window_seconds",
        "trunk_group_state",
        "pilot_user_calling_line_asserted_identity_policy",
        "use_system_calling_line_asserted_identity_policy",
        "total_active_incoming_calls",
        "total_active_outgoing_calls",
        "pilot_user_call_optimization_policy",
        "clid_source_for_screened_calls_policy",
        "use_system_clid_source_for_screened_calls_policy",
        "user_lookup_policy",
        "use_system_user_lookup_policy",
        "pilot_user_calling_line_identity_for_emergency_calls_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E("trunk_group_state", "trunkGroupState", str, is_required=True),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "total_active_incoming_calls",
                "totalActiveIncomingCalls",
                int,
                is_required=True,
            ),
            E(
                "total_active_outgoing_calls",
                "totalActiveOutgoingCalls",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
            E(
                "use_system_user_lookup_policy",
                "useSystemUserLookupPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
                is_required=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse20sp1(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest20sp1()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Replaced by: ``GroupTrunkGroupGetInstanceResponse21()``

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        trunk_group_state: trunkGroupState
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        total_active_incoming_calls: totalActiveIncomingCalls
        total_active_outgoing_calls: totalActiveOutgoingCalls
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "allow_termination_to_trunk_group_identity",
        "allow_termination_to_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "include_trunk_group_identity_for_network_calls",
        "include_otg_identity_for_network_calls",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_for_external_calls_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "prefix_enabled",
        "prefix",
        "stateful_rerouting_enabled",
        "send_continuous_options_message",
        "continuous_options_sending_interval_seconds",
        "failure_options_sending_interval_seconds",
        "failure_threshold_counter",
        "success_threshold_counter",
        "invite_failure_threshold_counter",
        "invite_failure_threshold_window_seconds",
        "trunk_group_state",
        "pilot_user_calling_line_asserted_identity_policy",
        "use_system_calling_line_asserted_identity_policy",
        "total_active_incoming_calls",
        "total_active_outgoing_calls",
        "pilot_user_call_optimization_policy",
        "clid_source_for_screened_calls_policy",
        "use_system_clid_source_for_screened_calls_policy",
        "user_lookup_policy",
        "use_system_user_lookup_policy",
        "pilot_user_calling_line_identity_for_emergency_calls_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E("trunk_group_state", "trunkGroupState", str, is_required=True),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "total_active_incoming_calls",
                "totalActiveIncomingCalls",
                int,
                is_required=True,
            ),
            E(
                "total_active_outgoing_calls",
                "totalActiveOutgoingCalls",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
            E(
                "use_system_user_lookup_policy",
                "useSystemUserLookupPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
                is_required=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse21(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest21()``.

    Returns the profile information for the Trunk Group.  Contains a hosted user table
    with column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name",
    "Hiragana First Name", "Phone Number", "Extension", "Department", "Email Address".
    Following attributes are only used in IMS mode: implicitRegistrationSetSupportPolicy
    useSystemImplicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy
    useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy

    Attributes:
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        hosted_user_table: hostedUserTable
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        trunk_group_state: trunkGroupState
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        total_active_incoming_calls: totalActiveIncomingCalls
        total_active_outgoing_calls: totalActiveOutgoingCalls
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
        implicit_registration_set_support_policy: implicitRegistrationSetSupportPolicy
        use_system_implicit_registration_set_support_policy:
            useSystemImplicitRegistrationSetSupportPolicy
        sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            sipIdentityForPilotAndProxyTrunkModesPolicy
        use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy
        use_system_support_connected_identity_policy:
            useSystemSupportConnectedIdentityPolicy
        support_connected_identity_policy: supportConnectedIdentityPolicy
        use_system_options_message_response_status_codes:
            useSystemOptionsMessageResponseStatusCodes
        options_message_response_status_code: optionsMessageResponseStatusCode
    """

    __slots__ = [
        "pilot_user_id",
        "department",
        "access_device",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_key",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_key",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "hosted_user_table",
        "trunk_group_identity",
        "otg_dtg_identity",
        "allow_termination_to_trunk_group_identity",
        "allow_termination_to_dtg_identity",
        "include_trunk_group_identity",
        "include_dtg_identity",
        "include_trunk_group_identity_for_network_calls",
        "include_otg_identity_for_network_calls",
        "enable_network_address_identity",
        "allow_unscreened_calls",
        "allow_unscreened_emergency_calls",
        "pilot_user_calling_line_identity_for_external_calls_policy",
        "pilot_user_charge_number_policy",
        "call_forwarding_always_action",
        "call_forwarding_always_forward_address",
        "call_forwarding_always_reroute_trunk_group_key",
        "peering_domain",
        "route_to_peering_domain",
        "prefix_enabled",
        "prefix",
        "stateful_rerouting_enabled",
        "send_continuous_options_message",
        "continuous_options_sending_interval_seconds",
        "failure_options_sending_interval_seconds",
        "failure_threshold_counter",
        "success_threshold_counter",
        "invite_failure_threshold_counter",
        "invite_failure_threshold_window_seconds",
        "trunk_group_state",
        "pilot_user_calling_line_asserted_identity_policy",
        "use_system_calling_line_asserted_identity_policy",
        "total_active_incoming_calls",
        "total_active_outgoing_calls",
        "pilot_user_call_optimization_policy",
        "clid_source_for_screened_calls_policy",
        "use_system_clid_source_for_screened_calls_policy",
        "user_lookup_policy",
        "use_system_user_lookup_policy",
        "pilot_user_calling_line_identity_for_emergency_calls_policy",
        "implicit_registration_set_support_policy",
        "use_system_implicit_registration_set_support_policy",
        "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
        "use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy",
        "use_system_support_connected_identity_policy",
        "support_connected_identity_policy",
        "use_system_options_message_response_status_codes",
        "options_message_response_status_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E(
                "hosted_user_table",
                "hostedUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E("trunk_group_state", "trunkGroupState", str, is_required=True),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "total_active_incoming_calls",
                "totalActiveIncomingCalls",
                int,
                is_required=True,
            ),
            E(
                "total_active_outgoing_calls",
                "totalActiveOutgoingCalls",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
            E(
                "use_system_user_lookup_policy",
                "useSystemUserLookupPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "implicit_registration_set_support_policy",
                "implicitRegistrationSetSupportPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_implicit_registration_set_support_policy",
                "useSystemImplicitRegistrationSetSupportPolicy",
                bool,
                is_required=True,
            ),
            E(
                "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "sipIdentityForPilotAndProxyTrunkModesPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy",
                bool,
                is_required=True,
            ),
            E(
                "use_system_support_connected_identity_policy",
                "useSystemSupportConnectedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "support_connected_identity_policy",
                "supportConnectedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_options_message_response_status_codes",
                "useSystemOptionsMessageResponseStatusCodes",
                bool,
                is_required=True,
            ),
            E(
                "options_message_response_status_code",
                "optionsMessageResponseStatusCode",
                str,
                is_array=True,
            ),
        )


class GroupTrunkGroupGetResponse(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetRequest()``.

    The response contains the maximum permissible active trunk group calls for the group.

    Attributes:
        max_active_calls: maxActiveCalls
        max_available_active_calls: maxAvailableActiveCalls
    """

    __slots__ = [
        "max_active_calls",
        "max_available_active_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "max_active_calls",
                "maxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "max_available_active_calls",
                "maxAvailableActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupTrunkGroupGetResponse14sp1(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetRequest14sp1()``.

    The response contains the maximum and bursting maximum permissible active trunk group
    calls for the group.

    Attributes:
        max_active_calls: maxActiveCalls
        max_available_active_calls: maxAvailableActiveCalls
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_available_active_calls: burstingMaxAvailableActiveCalls
    """

    __slots__ = [
        "max_active_calls",
        "max_available_active_calls",
        "bursting_max_active_calls",
        "bursting_max_available_active_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "max_active_calls",
                "maxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "max_available_active_calls",
                "maxAvailableActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "bursting_max_active_calls",
                "burstingMaxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "bursting_max_available_active_calls",
                "burstingMaxAvailableActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupTrunkGroupGetResponse14sp9(OCIResponse):
    """
    Response to the ``GroupTrunkGroupGetRequest14sp9()``.

    The response contains the maximum and bursting maximum permissible active trunk group
    calls for the group.

    Attributes:
        max_active_calls: maxActiveCalls
        max_available_active_calls: maxAvailableActiveCalls
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_available_active_calls: burstingMaxAvailableActiveCalls
    """

    __slots__ = [
        "max_active_calls",
        "max_available_active_calls",
        "bursting_max_active_calls",
        "bursting_max_available_active_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E(
                "max_available_active_calls",
                "maxAvailableActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "bursting_max_active_calls",
                "burstingMaxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "bursting_max_available_active_calls",
                "burstingMaxAvailableActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupVoiceMessagingGroupGetVoicePortalBrandingResponse20(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalBrandingRequest20()``.


    Attributes:
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file: voicePortalGreetingFile
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    __slots__ = [
        "voice_portal_greeting_selection",
        "voice_portal_greeting_file",
        "voice_messaging_greeting_selection",
        "voice_messaging_greeting_file",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "voice_portal_greeting_selection",
                "voicePortalGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.AnnouncementFileKey,
                is_complex=True,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
                is_required=True,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.AnnouncementFileKey,
                is_complex=True,
            ),
        )


class ServiceProviderAccessDeviceGetResponse14(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest14()``.

    Replaced By: ``ServiceProviderAccessDeviceGetResponse14sp3()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
        )


class ServiceProviderAccessDeviceGetResponse14sp3(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest14sp3()``.

    Replaced By: ``ServiceProviderAccessDeviceGetRequest14sp6()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
        )


class ServiceProviderAccessDeviceGetResponse14sp6(OCIResponse):
    """
    Response to: ``ServiceProviderAccessDeviceGetRequest14sp6()`` Replaced by:
    ``ServiceProviderAccessDeviceGetRequest16()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
        )


class ServiceProviderAccessDeviceGetResponse16(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest16()``.


    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
        )


class ServiceProviderAccessDeviceGetResponse18sp1(OCIResponse):
    """
    Response to ``ServiceProviderAccessDeviceGetRequest18sp1()``.


    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
        version: version
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "version",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
            E("version", "version", str),
        )


class ServiceProviderCommunicationBarringProfileGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetRequest()``.

    The response contains the Communication Barring Profile information.  The incoming,
    originating and redirecting rules are returned in ascending priority order.

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        is_default: isDefault
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_default_call_timeout",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_default_call_timeout",
        "redirecting_rule",
        "incoming_default_action",
        "incoming_default_call_timeout",
        "incoming_rule",
        "is_default",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E("is_default", "isDefault", bool, is_required=True),
        )


class ServiceProviderCommunicationBarringProfileGetResponse17sp3(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetRequest17sp3()``.

    The response contains the Communication Barring Profile information.  The incoming,
    originating, redirecting and call me now rules are returned in ascending priority
    order.  The following elements are only used in AS data mode: callMeNowDefaultAction
    callMeNowDefaultCallTimeout callMeNowRule

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        is_default: isDefault
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_default_call_timeout",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_default_call_timeout",
        "redirecting_rule",
        "call_me_now_default_action",
        "call_me_now_default_call_timeout",
        "call_me_now_rule",
        "incoming_default_action",
        "incoming_default_call_timeout",
        "incoming_rule",
        "is_default",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E("is_default", "isDefault", bool, is_required=True),
        )


class ServiceProviderCommunicationBarringProfileGetResponse19sp1(OCIResponse):
    """
    Response to the ``ServiceProviderCommunicationBarringProfileGetRequest19sp1()``.

    The response contains the Communication Barring Profile information.  The incoming,
    originating, redirecting and call me now rules are returned in ascending priority
    order.  The following elements are only used in AS data mode: callMeNowDefaultAction
    callMeNowDefaultCallTimeout callMeNowRule applyToAttendedCallTransfers

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        is_default: isDefault
        apply_to_attended_call_transfers: applyToAttendedCallTransfers
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_default_call_timeout",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_default_call_timeout",
        "redirecting_rule",
        "call_me_now_default_action",
        "call_me_now_default_call_timeout",
        "call_me_now_rule",
        "incoming_default_action",
        "incoming_default_call_timeout",
        "incoming_rule",
        "is_default",
        "apply_to_attended_call_transfers",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E("is_default", "isDefault", bool, is_required=True),
            E(
                "apply_to_attended_call_transfers",
                "applyToAttendedCallTransfers",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``ServiceProviderFeatureAccessCodeGetListRequest()``.


    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class ServiceProviderFeatureAccessCodeGetListResponse20(OCIResponse):
    """
    Response to the ``ServiceProviderFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    Replaced by: ``ServiceProviderFeatureAccessCodeGetListResponse21()``

    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class ServiceProviderFeatureAccessCodeGetListResponse21(OCIResponse):
    """
    Response to the ``ServiceProviderFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".

    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeReadEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class ServiceProviderGetResponse13mp2(OCIResponse):
    """
    Response to the ``ServiceProviderGetRequest13mp2()``.

    The response contains the service provider or enterprise's profile information.
    Replaced by: ``ServiceProviderGetResponse17sp1()``

    Attributes:
        is_enterprise: isEnterprise
        use_custom_routing_profile: useCustomRoutingProfile
        default_domain: defaultDomain
        service_provider_name: serviceProviderName
        support_email: supportEmail
        contact: contact
        address: address
    """

    __slots__ = [
        "is_enterprise",
        "use_custom_routing_profile",
        "default_domain",
        "service_provider_name",
        "support_email",
        "contact",
        "address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_enterprise", "isEnterprise", bool),
            E("use_custom_routing_profile", "useCustomRoutingProfile", bool),
            E("default_domain", "defaultDomain", str, is_required=True),
            E("service_provider_name", "serviceProviderName", str),
            E("support_email", "supportEmail", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


class ServiceProviderGetResponse17sp1(OCIResponse):
    """
    Response to the ``ServiceProviderGetRequest17sp1()``.

    The response contains the service provider or enterprise's profile information.

    Attributes:
        is_enterprise: isEnterprise
        use_custom_routing_profile: useCustomRoutingProfile
        default_domain: defaultDomain
        service_provider_name: serviceProviderName
        support_email: supportEmail
        contact: contact
        address: address
        use_service_provider_languages: useServiceProviderLanguages
    """

    __slots__ = [
        "is_enterprise",
        "use_custom_routing_profile",
        "default_domain",
        "service_provider_name",
        "support_email",
        "contact",
        "address",
        "use_service_provider_languages",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_enterprise", "isEnterprise", bool),
            E("use_custom_routing_profile", "useCustomRoutingProfile", bool),
            E("default_domain", "defaultDomain", str, is_required=True),
            E("service_provider_name", "serviceProviderName", str),
            E("support_email", "supportEmail", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E(
                "use_service_provider_languages",
                "useServiceProviderLanguages",
                bool,
                is_required=True,
            ),
        )


class ServiceProviderMeetMeConferencingGetResponse(OCIResponse):
    """
    Response to ``ServiceProviderMeetMeConferencingGetRequest()``.


    Attributes:
        allocated_ports: allocatedPorts
    """

    __slots__ = [
        "allocated_ports",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
        )


class ServiceProviderScheduleGetEventResponse(OCIResponse):
    """
    Response to ``ServiceProviderScheduleGetEventRequest()``.

    The response contains the event of the service provider schedule.

    Attributes:
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    __slots__ = [
        "start_date",
        "all_day_event",
        "start_time",
        "end_time",
        "end_date",
        "recurrence",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


class ServiceProviderScheduleGetListResponse(OCIResponse):
    """
    Response to ``ServiceProviderScheduleGetListRequest()``.

    The response contains a list of service provider schedules.

    Attributes:
        schedule_key: scheduleKey
    """

    __slots__ = [
        "schedule_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_array=True,
            ),
        )


class ServiceProviderServicePackGetDetailListResponse(OCIResponse):
    """
    Response to ``ServiceProviderServicePackGetDetailListRequest()``.

    It contains the service pack details and the list of services in a table format.  The
    column headings are "Service", "Authorized" "Allocated" and "Available".

    Attributes:
        service_pack_name: servicePackName
        service_pack_description: servicePackDescription
        is_available_for_use: isAvailableForUse
        service_pack_quantity: servicePackQuantity
        assigned_quantity: assignedQuantity
        allowed_quantity: allowedQuantity
        user_service_table: userServiceTable
    """

    __slots__ = [
        "service_pack_name",
        "service_pack_description",
        "is_available_for_use",
        "service_pack_quantity",
        "assigned_quantity",
        "allowed_quantity",
        "user_service_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_pack_name", "servicePackName", str, is_required=True),
            E("service_pack_description", "servicePackDescription", str),
            E("is_available_for_use", "isAvailableForUse", bool, is_required=True),
            E(
                "service_pack_quantity",
                "servicePackQuantity",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "assigned_quantity",
                "assignedQuantity",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allowed_quantity",
                "allowedQuantity",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "user_service_table",
                "userServiceTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class ServiceProviderTrunkGroupGetResponse(OCIResponse):
    """
    Response to the ``ServiceProviderTrunkGroupGetRequest()``.

    The response contains the maximum permissible active trunk group calls for the service
    provider.

    Attributes:
        max_active_calls: maxActiveCalls
    """

    __slots__ = [
        "max_active_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "max_active_calls",
                "maxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
        )


class ServiceProviderTrunkGroupGetResponse14sp1(OCIResponse):
    """
    Response to the ``ServiceProviderTrunkGroupGetRequest14sp1()``.

    The response contains the maximum and bursting maximum permissible active trunk group
    calls for the service provider.

    Attributes:
        max_active_calls: maxActiveCalls
        bursting_max_active_calls: burstingMaxActiveCalls
    """

    __slots__ = [
        "max_active_calls",
        "bursting_max_active_calls",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "max_active_calls",
                "maxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "bursting_max_active_calls",
                "burstingMaxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
                is_required=True,
            ),
        )


class SystemAccessDeviceGetResponse(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest()``.

    Replaced By: ``SystemAccessDeviceGetResponse14sp3()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
        )


class SystemAccessDeviceGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest14sp3()``

    Replaced By: ``SystemAccessDeviceGetResponse14sp6()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
        )


class SystemAccessDeviceGetResponse14sp6(OCIResponse):
    """
    Response to: ``SystemAccessDeviceGetRequest14sp6()`` Replaced by:
    ``SystemAccessDeviceGetRequest16()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
        )


class SystemAccessDeviceGetResponse16(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest16()``

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
        )


class SystemAccessDeviceGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemAccessDeviceGetRequest18sp1()`` The following elements are only
    used in AS data mode: version

    Attributes:
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        number_of_ports: numberOfPorts
        number_of_assigned_ports: numberOfAssignedPorts
        status: status
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        user_name: userName
        version: version
    """

    __slots__ = [
        "device_type",
        "protocol",
        "net_address",
        "port",
        "outbound_proxy_server_net_address",
        "stun_server_net_address",
        "mac_address",
        "serial_number",
        "description",
        "number_of_ports",
        "number_of_assigned_ports",
        "status",
        "physical_location",
        "transport_protocol",
        "mobility_manager_provisioning_url",
        "mobility_manager_provisioning_user_name",
        "mobility_manager_default_originating_service_key",
        "mobility_manager_default_terminating_service_key",
        "use_custom_user_name_password",
        "user_name",
        "version",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_of_assigned_ports",
                "numberOfAssignedPorts",
                int,
                is_required=True,
            ),
            E("status", "status", str, is_required=True),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E("user_name", "userName", str),
            E("version", "version", str),
        )


class SystemCallCenterEnhancedReportingDataTemplateGetListResponse(OCIResponse):
    """
    Response to ``SystemCallCenterEnhancedReportingDataTemplateGetListRequest()``.


    Attributes:
        info: info
    """

    __slots__ = [
        "info",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "info",
                "info",
                OCI.CallCenterReportDataTemplateInfo,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemCollaborateGetResponse(OCIResponse):
    """
    Response to ``SystemCollaborateGetRequest()``.


    Attributes:
        collaborate_room_id_length: collaborateRoomIdLength
        instant_room_idle_timeout_seconds: instantRoomIdleTimeoutSeconds
        collaborate_room_maximum_duration_minutes: collaborateRoomMaximumDurationMinutes
        support_outdial: supportOutdial
        max_collaborate_room_participants: maxCollaborateRoomParticipants
        collaborate_active_talker_refresh_interval_seconds:
            collaborateActiveTalkerRefreshIntervalSeconds
        terminate_collaborate_after_grace_period: terminateCollaborateAfterGracePeriod
        collaborate_grace_period: collaborateGracePeriod
        enable_active_collaborate_notification: enableActiveCollaborateNotification
        collaborate_from_address: collaborateFromAddress
    """

    __slots__ = [
        "collaborate_room_id_length",
        "instant_room_idle_timeout_seconds",
        "collaborate_room_maximum_duration_minutes",
        "support_outdial",
        "max_collaborate_room_participants",
        "collaborate_active_talker_refresh_interval_seconds",
        "terminate_collaborate_after_grace_period",
        "collaborate_grace_period",
        "enable_active_collaborate_notification",
        "collaborate_from_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "collaborate_room_id_length",
                "collaborateRoomIdLength",
                int,
                is_required=True,
            ),
            E(
                "instant_room_idle_timeout_seconds",
                "instantRoomIdleTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "collaborate_room_maximum_duration_minutes",
                "collaborateRoomMaximumDurationMinutes",
                int,
                is_required=True,
            ),
            E("support_outdial", "supportOutdial", bool, is_required=True),
            E(
                "max_collaborate_room_participants",
                "maxCollaborateRoomParticipants",
                int,
                is_required=True,
            ),
            E(
                "collaborate_active_talker_refresh_interval_seconds",
                "collaborateActiveTalkerRefreshIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "terminate_collaborate_after_grace_period",
                "terminateCollaborateAfterGracePeriod",
                bool,
                is_required=True,
            ),
            E(
                "collaborate_grace_period",
                "collaborateGracePeriod",
                OCI.CollaborateGracePeriodDuration,
                is_complex=True,
                is_required=True,
            ),
            E(
                "enable_active_collaborate_notification",
                "enableActiveCollaborateNotification",
                bool,
                is_required=True,
            ),
            E("collaborate_from_address", "collaborateFromAddress", str),
        )


class SystemCommunicationBarringProfileGetResponse(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest()``.

    The response contains the Communication Barring Profile information.  Replaced by:
    ``SystemCommunicationBarringProfileGetResponse16()``

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_rule: redirectingRule
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_rule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule15sp2,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule15sp2,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemCommunicationBarringProfileGetResponse16(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest16()``.

    The response contains the Communication Barring Profile information.

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_default_call_timeout",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_default_call_timeout",
        "redirecting_rule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemCommunicationBarringProfileGetResponse17sp1(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest17sp1()``.

    The response contains the Communication Barring Profile information.  The incoming
    rules are returned in ascending priority order.  The following elements are only used
    in HSS data mode: incomingDefaultAction incomingDefaultCallTimeout incomingRule

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_default_call_timeout",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_default_call_timeout",
        "redirecting_rule",
        "incoming_default_action",
        "incoming_default_call_timeout",
        "incoming_rule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemCommunicationBarringProfileGetResponse17sp3(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest17sp3()``.

    The response contains the Communication Barring Profile information.  The incoming
    rules are returned in ascending priority order.  The following elements are only used
    in AS data mode: callMeNowDefaultAction callMeNowDefaultCallTimeout callMeNowRule

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_default_call_timeout",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_default_call_timeout",
        "redirecting_rule",
        "incoming_default_action",
        "incoming_default_call_timeout",
        "incoming_rule",
        "call_me_now_default_action",
        "call_me_now_default_call_timeout",
        "call_me_now_rule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.CommunicationBarringCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemCommunicationBarringProfileGetResponse19sp1(OCIResponse):
    """
    Response to the ``SystemCommunicationBarringProfileGetRequest19sp1()``.

    The response contains the Communication Barring Profile information.  The incoming
    rules are returned in ascending priority order.  The following elements are only used
    in AS data mode: callMeNowDefaultAction callMeNowDefaultCallTimeout callMeNowRule
    applyToAttendedCallTransfers

    Attributes:
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        apply_to_attended_call_transfers: applyToAttendedCallTransfers
    """

    __slots__ = [
        "description",
        "originating_default_action",
        "originating_default_treatment_id",
        "originating_default_transfer_number",
        "originating_default_call_timeout",
        "originating_rule",
        "redirecting_default_action",
        "redirecting_default_call_timeout",
        "redirecting_rule",
        "incoming_default_action",
        "incoming_default_call_timeout",
        "incoming_rule",
        "call_me_now_default_action",
        "call_me_now_default_call_timeout",
        "call_me_now_rule",
        "apply_to_attended_call_transfers",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.CommunicationBarringCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "apply_to_attended_call_transfers",
                "applyToAttendedCallTransfers",
                bool,
                is_required=True,
            ),
        )


class SystemDeviceTypeGetResponse(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest()``.

    Replaced By: ``SystemDeviceTypeGetResponse14sp3()``

    Attributes:
        is_obsolete: isObsolete
        profile: profile
        web_based_config_url: webBasedConfigURL
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        is_ip_address_optional: isIpAddressOptional
        use_domain: useDomain
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "web_based_config_url",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "is_ip_address_optional",
        "use_domain",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
            E("use_domain", "useDomain", bool, is_required=True),
        )


class SystemDeviceTypeGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest14sp3()``.

    Replaced By: ``SystemDeviceTypeGetResponse14sp6()``

    Attributes:
        is_obsolete: isObsolete
        profile: profile
        web_based_config_url: webBasedConfigURL
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        is_ip_address_optional: isIpAddressOptional
        use_domain: useDomain
        is_mobility_manager_device: isMobilityManagerDevice
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "web_based_config_url",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "is_ip_address_optional",
        "use_domain",
        "is_mobility_manager_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
            E("use_domain", "useDomain", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
        )


class SystemFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``SystemFeatureAccessCodeGetListRequest()``.


    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemFeatureAccessCodeGetListResponse20(OCIResponse):
    """
    Response to the ``SystemFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".
    Replaced by: ``SystemFeatureAccessCodeGetListResponse21()``

    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemFeatureAccessCodeGetListResponse21(OCIResponse):
    """
    Response to the ``SystemFeatureAccessCodeGetListRequest21()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording - Start".

    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeReadEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemFileRepositoryDeviceGetResponse(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetRequest()``.


    Attributes:
        root_directory: rootDirectory
        port: port
        protocol_web_dav: protocolWebDAV
        protocol_ftp: protocolFTP
    """

    __slots__ = [
        "root_directory",
        "port",
        "protocol_web_dav",
        "protocol_ftp",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("root_directory", "rootDirectory", str),
            E("port", "port", int),
            E(
                "protocol_web_dav",
                "protocolWebDAV",
                OCI.FileRepositoryProtocolWebDAV,
                is_complex=True,
            ),
            E(
                "protocol_ftp",
                "protocolFTP",
                OCI.FileRepositoryProtocolFTP,
                is_complex=True,
            ),
        )


class SystemFileRepositoryDeviceGetResponse16(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetRequest16()``.


    Attributes:
        root_directory: rootDirectory
        port: port
        protocol_web_dav: protocolWebDAV
        protocol_ftp: protocolFTP
    """

    __slots__ = [
        "root_directory",
        "port",
        "protocol_web_dav",
        "protocol_ftp",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("root_directory", "rootDirectory", str),
            E("port", "port", int),
            E(
                "protocol_web_dav",
                "protocolWebDAV",
                OCI.FileRepositoryProtocolWebDAV,
                is_complex=True,
            ),
            E(
                "protocol_ftp",
                "protocolFTP",
                OCI.FileRepositoryProtocolFTP16,
                is_complex=True,
            ),
        )


class SystemFileRepositoryDeviceGetResponse20(OCIResponse):
    """
    Response to ``SystemFileRepositoryDeviceGetRequest20()``.


    Attributes:
        root_directory: rootDirectory
        port: port
        protocol_web_dav: protocolWebDAV
        protocol_ftp: protocolFTP
    """

    __slots__ = [
        "root_directory",
        "port",
        "protocol_web_dav",
        "protocol_ftp",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("root_directory", "rootDirectory", str),
            E("port", "port", int),
            E(
                "protocol_web_dav",
                "protocolWebDAV",
                OCI.FileRepositoryProtocolWebDAV20,
                is_complex=True,
            ),
            E(
                "protocol_ftp",
                "protocolFTP",
                OCI.FileRepositoryProtocolFTP16,
                is_complex=True,
            ),
        )


class SystemHolidayScheduleGetResponse(OCIResponse):
    """
    Response to the ``SystemHolidayScheduleGetRequest()``.

    The response contains the system holiday schedule information.

    Attributes:
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    __slots__ = [
        "holiday01",
        "holiday02",
        "holiday03",
        "holiday04",
        "holiday05",
        "holiday06",
        "holiday07",
        "holiday08",
        "holiday09",
        "holiday10",
        "holiday11",
        "holiday12",
        "holiday13",
        "holiday14",
        "holiday15",
        "holiday16",
        "holiday17",
        "holiday18",
        "holiday19",
        "holiday20",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


class SystemInterceptUserGetDnListResponse(OCIResponse):
    """
    Response to ``SystemInterceptUserGetDnListRequest()``.

    The Intercept User DN List.

    Attributes:
        intercept_user_list: interceptUserList
    """

    __slots__ = [
        "intercept_user_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "intercept_user_list",
                "interceptUserList",
                OCI.InterceptDNListEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemMGCPDeviceTypeGetResponse(OCIResponse):
    """
    Response to ``SystemMGCPDeviceTypeGetRequest()``.


    Attributes:
        is_obsolete: isObsolete
        profile: profile
        number_of_ports: numberOfPorts
        protocol_choice: protocolChoice
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "number_of_ports",
        "protocol_choice",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
        )


class SystemMeetMeConferencingGetResponse18(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest18()``.


    Attributes:
        conference_id_length: conferenceIdLength
        moderator_pin_length: moderatorPinLength
        enable_conference_end_date_restriction: enableConferenceEndDateRestriction
        conference_end_date_restriction_months: conferenceEndDateRestrictionMonths
        delete_expired_conferences_after_hold_period:
            deleteExpiredConferencesAfterHoldPeriod
        expired_conference_hold_period_days: expiredConferenceHoldPeriodDays
        recording_web_app_url: recordingWebAppURL
        recording_file_format: recordingFileFormat
        terminate_after_grace_period: terminateAfterGracePeriod
        conference_grace_period_minutes: conferenceGracePeriodMinutes
        conference_participant_early_entry_minutes: conferenceParticipantEarlyEntryMinutes
        enable_conference_expiry_notification: enableConferenceExpiryNotification
        enable_active_conference_notification: enableActiveConferenceNotification
        conference_from_address: conferenceFromAddress
    """

    __slots__ = [
        "conference_id_length",
        "moderator_pin_length",
        "enable_conference_end_date_restriction",
        "conference_end_date_restriction_months",
        "delete_expired_conferences_after_hold_period",
        "expired_conference_hold_period_days",
        "recording_web_app_url",
        "recording_file_format",
        "terminate_after_grace_period",
        "conference_grace_period_minutes",
        "conference_participant_early_entry_minutes",
        "enable_conference_expiry_notification",
        "enable_active_conference_notification",
        "conference_from_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_id_length", "conferenceIdLength", int, is_required=True),
            E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
            E(
                "enable_conference_end_date_restriction",
                "enableConferenceEndDateRestriction",
                bool,
                is_required=True,
            ),
            E(
                "conference_end_date_restriction_months",
                "conferenceEndDateRestrictionMonths",
                int,
                is_required=True,
            ),
            E(
                "delete_expired_conferences_after_hold_period",
                "deleteExpiredConferencesAfterHoldPeriod",
                bool,
                is_required=True,
            ),
            E(
                "expired_conference_hold_period_days",
                "expiredConferenceHoldPeriodDays",
                int,
                is_required=True,
            ),
            E("recording_web_app_url", "recordingWebAppURL", str),
            E("recording_file_format", "recordingFileFormat", str, is_required=True),
            E(
                "terminate_after_grace_period",
                "terminateAfterGracePeriod",
                bool,
                is_required=True,
            ),
            E(
                "conference_grace_period_minutes",
                "conferenceGracePeriodMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
            E(
                "conference_participant_early_entry_minutes",
                "conferenceParticipantEarlyEntryMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_conference_expiry_notification",
                "enableConferenceExpiryNotification",
                bool,
                is_required=True,
            ),
            E(
                "enable_active_conference_notification",
                "enableActiveConferenceNotification",
                bool,
                is_required=True,
            ),
            E("conference_from_address", "conferenceFromAddress", str, is_required=True),
        )


class SystemMeetMeConferencingGetResponse19(OCIResponse):
    """
    Response to ``SystemMeetMeConferencingGetRequest19()``.


    Attributes:
        conference_id_length: conferenceIdLength
        moderator_pin_length: moderatorPinLength
        enable_conference_end_date_restriction: enableConferenceEndDateRestriction
        conference_end_date_restriction_months: conferenceEndDateRestrictionMonths
        delete_expired_conferences_after_hold_period:
            deleteExpiredConferencesAfterHoldPeriod
        expired_conference_hold_period_days: expiredConferenceHoldPeriodDays
        recording_web_app_url: recordingWebAppURL
        recording_file_format: recordingFileFormat
        terminate_after_grace_period: terminateAfterGracePeriod
        conference_grace_period_minutes: conferenceGracePeriodMinutes
        conference_participant_early_entry_minutes: conferenceParticipantEarlyEntryMinutes
        enable_conference_expiry_notification: enableConferenceExpiryNotification
        enable_active_conference_notification: enableActiveConferenceNotification
        conference_from_address: conferenceFromAddress
        conference_active_talker_refresh_interval_seconds:
            conferenceActiveTalkerRefreshIntervalSeconds
    """

    __slots__ = [
        "conference_id_length",
        "moderator_pin_length",
        "enable_conference_end_date_restriction",
        "conference_end_date_restriction_months",
        "delete_expired_conferences_after_hold_period",
        "expired_conference_hold_period_days",
        "recording_web_app_url",
        "recording_file_format",
        "terminate_after_grace_period",
        "conference_grace_period_minutes",
        "conference_participant_early_entry_minutes",
        "enable_conference_expiry_notification",
        "enable_active_conference_notification",
        "conference_from_address",
        "conference_active_talker_refresh_interval_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_id_length", "conferenceIdLength", int, is_required=True),
            E("moderator_pin_length", "moderatorPinLength", int, is_required=True),
            E(
                "enable_conference_end_date_restriction",
                "enableConferenceEndDateRestriction",
                bool,
                is_required=True,
            ),
            E(
                "conference_end_date_restriction_months",
                "conferenceEndDateRestrictionMonths",
                int,
                is_required=True,
            ),
            E(
                "delete_expired_conferences_after_hold_period",
                "deleteExpiredConferencesAfterHoldPeriod",
                bool,
                is_required=True,
            ),
            E(
                "expired_conference_hold_period_days",
                "expiredConferenceHoldPeriodDays",
                int,
                is_required=True,
            ),
            E("recording_web_app_url", "recordingWebAppURL", str),
            E("recording_file_format", "recordingFileFormat", str, is_required=True),
            E(
                "terminate_after_grace_period",
                "terminateAfterGracePeriod",
                bool,
                is_required=True,
            ),
            E(
                "conference_grace_period_minutes",
                "conferenceGracePeriodMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
            E(
                "conference_participant_early_entry_minutes",
                "conferenceParticipantEarlyEntryMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_conference_expiry_notification",
                "enableConferenceExpiryNotification",
                bool,
                is_required=True,
            ),
            E(
                "enable_active_conference_notification",
                "enableActiveConferenceNotification",
                bool,
                is_required=True,
            ),
            E("conference_from_address", "conferenceFromAddress", str, is_required=True),
            E(
                "conference_active_talker_refresh_interval_seconds",
                "conferenceActiveTalkerRefreshIntervalSeconds",
                int,
                is_required=True,
            ),
        )


class SystemNetworkClassOfServiceGetResponse(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetRequest()``.

    The response contains the Network Class of Service information.  Replaced by:
    ``SystemNetworkClassOfServiceGetResponse17()``

    Attributes:
        description: description
        communication_barring_profile0: communicationBarringProfile0
        communication_barring_profile1: communicationBarringProfile1
        communication_barring_profile2: communicationBarringProfile2
        communication_barring_profile3: communicationBarringProfile3
        communication_barring_profile4: communicationBarringProfile4
        communication_barring_profile5: communicationBarringProfile5
        communication_barring_profile6: communicationBarringProfile6
        communication_barring_profile7: communicationBarringProfile7
        communication_barring_profile8: communicationBarringProfile8
        communication_barring_profile9: communicationBarringProfile9
    """

    __slots__ = [
        "description",
        "communication_barring_profile0",
        "communication_barring_profile1",
        "communication_barring_profile2",
        "communication_barring_profile3",
        "communication_barring_profile4",
        "communication_barring_profile5",
        "communication_barring_profile6",
        "communication_barring_profile7",
        "communication_barring_profile8",
        "communication_barring_profile9",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "communication_barring_profile0",
                "communicationBarringProfile0",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile1",
                "communicationBarringProfile1",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile2",
                "communicationBarringProfile2",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile3",
                "communicationBarringProfile3",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile4",
                "communicationBarringProfile4",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile5",
                "communicationBarringProfile5",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile6",
                "communicationBarringProfile6",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile7",
                "communicationBarringProfile7",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile8",
                "communicationBarringProfile8",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile9",
                "communicationBarringProfile9",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
        )


class SystemNetworkClassOfServiceGetResponse17(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetRequest17()``.

    The response contains the Network Class of Service information.  Replaced by
    ``SystemNetworkClassOfServiceGetResponse19sp1()``

    Attributes:
        description: description
        communication_barring_profile0: communicationBarringProfile0
        communication_barring_profile1: communicationBarringProfile1
        communication_barring_profile2: communicationBarringProfile2
        communication_barring_profile3: communicationBarringProfile3
        communication_barring_profile4: communicationBarringProfile4
        communication_barring_profile5: communicationBarringProfile5
        communication_barring_profile6: communicationBarringProfile6
        communication_barring_profile7: communicationBarringProfile7
        communication_barring_profile8: communicationBarringProfile8
        communication_barring_profile9: communicationBarringProfile9
        network_translation_index: networkTranslationIndex
    """

    __slots__ = [
        "description",
        "communication_barring_profile0",
        "communication_barring_profile1",
        "communication_barring_profile2",
        "communication_barring_profile3",
        "communication_barring_profile4",
        "communication_barring_profile5",
        "communication_barring_profile6",
        "communication_barring_profile7",
        "communication_barring_profile8",
        "communication_barring_profile9",
        "network_translation_index",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "communication_barring_profile0",
                "communicationBarringProfile0",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile1",
                "communicationBarringProfile1",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile2",
                "communicationBarringProfile2",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile3",
                "communicationBarringProfile3",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile4",
                "communicationBarringProfile4",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile5",
                "communicationBarringProfile5",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile6",
                "communicationBarringProfile6",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile7",
                "communicationBarringProfile7",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile8",
                "communicationBarringProfile8",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile9",
                "communicationBarringProfile9",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E("network_translation_index", "networkTranslationIndex", str),
        )


class SystemNetworkClassOfServiceGetResponse19sp1(OCIResponse):
    """
    Response to the ``SystemNetworkClassOfServiceGetRequest19sp1()``.

    The response contains the Network Class of Service information.

    Attributes:
        description: description
        communication_barring_profile0: communicationBarringProfile0
        communication_barring_profile1: communicationBarringProfile1
        communication_barring_profile2: communicationBarringProfile2
        communication_barring_profile3: communicationBarringProfile3
        communication_barring_profile4: communicationBarringProfile4
        communication_barring_profile5: communicationBarringProfile5
        communication_barring_profile6: communicationBarringProfile6
        communication_barring_profile7: communicationBarringProfile7
        communication_barring_profile8: communicationBarringProfile8
        communication_barring_profile9: communicationBarringProfile9
        network_translation_index: networkTranslationIndex
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    __slots__ = [
        "description",
        "communication_barring_profile0",
        "communication_barring_profile1",
        "communication_barring_profile2",
        "communication_barring_profile3",
        "communication_barring_profile4",
        "communication_barring_profile5",
        "communication_barring_profile6",
        "communication_barring_profile7",
        "communication_barring_profile8",
        "communication_barring_profile9",
        "network_translation_index",
        "call_processing_policy_profile_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "communication_barring_profile0",
                "communicationBarringProfile0",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile1",
                "communicationBarringProfile1",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile2",
                "communicationBarringProfile2",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile3",
                "communicationBarringProfile3",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile4",
                "communicationBarringProfile4",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile5",
                "communicationBarringProfile5",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile6",
                "communicationBarringProfile6",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile7",
                "communicationBarringProfile7",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile8",
                "communicationBarringProfile8",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile9",
                "communicationBarringProfile9",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E("network_translation_index", "networkTranslationIndex", str),
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
            ),
        )


class SystemSIPDeviceTypeGetResponse(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest()``.


    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        authentication_override: authenticationOverride
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_music_on_hold_device",
        "authentication_override",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E(
                "authentication_override",
                "authenticationOverride",
                bool,
                is_required=True,
            ),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
        )


class SystemSIPDeviceTypeGetResponse14sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp1()``.


    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        authentication_override: authenticationOverride
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_music_on_hold_device",
        "authentication_override",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E(
                "authentication_override",
                "authenticationOverride",
                bool,
                is_required=True,
            ),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
        )


class SystemSIPDeviceTypeGetResponse14sp2(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp2()``.

    Replaced By: ``SystemSIPDeviceTypeGetResponse14sp3()``

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
        )


class SystemSIPDeviceTypeGetResponse14sp3(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp3()``.

    Replaced by: ``SystemSIPDeviceTypeGetResponse14sp6()``

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        supports_broad_works_info_for_call_waiting: supportsBroadWorksINFOForCallWaiting
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "tdm_overlay",
        "supports_broad_works_info_for_call_waiting",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E("tdm_overlay", "tdmOverlay", bool, is_required=True),
            E(
                "supports_broad_works_info_for_call_waiting",
                "supportsBroadWorksINFOForCallWaiting",
                bool,
                is_required=True,
            ),
        )


class SystemScheduleGetEventResponse(OCIResponse):
    """
    Response to ``SystemScheduleGetEventRequest()``.

    The response contains the event of the system schedulable.

    Attributes:
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    __slots__ = [
        "start_date",
        "all_day_event",
        "start_time",
        "end_time",
        "end_date",
        "recurrence",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


class SystemTimeScheduleGetResponse(OCIResponse):
    """
    Response to the ``SystemTimeScheduleGetRequest()``.

    The response contains the system time schedule's information.

    Attributes:
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    __slots__ = [
        "time_interval01",
        "time_interval02",
        "time_interval03",
        "time_interval04",
        "time_interval05",
        "time_interval06",
        "time_interval07",
        "time_interval08",
        "time_interval09",
        "time_interval10",
        "time_interval11",
        "time_interval12",
        "time_interval13",
        "time_interval14",
        "time_interval15",
        "time_interval16",
        "time_interval17",
        "time_interval18",
        "time_interval19",
        "time_interval20",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


class SystemZoneCallingRestrictionsNetAddressGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneCallingRestrictionsNetAddressGetListRequest()``.

    Replaced by: ``SystemZoneNetAddressGetListResponse()``

    Attributes:
        net_address: netAddress
        net_address_range: netAddressRange
    """

    __slots__ = [
        "net_address",
        "net_address_range",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_array=True),
            E(
                "net_address_range",
                "netAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


class SystemZoneNetAddressGetListResponse(OCIResponse):
    """
    Response to ``SystemZoneNetAddressGetListRequest()``.


    Attributes:
        net_address: netAddress
        net_address_range: netAddressRange
    """

    __slots__ = [
        "net_address",
        "net_address_range",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_array=True),
            E(
                "net_address_range",
                "netAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


class UserAlternateNumbersGetResponse(OCIResponse):
    """
    Response to ``UserAlternateNumbersGetRequest()``.


    Attributes:
        distinctive_ring: distinctiveRing
        alternate_entry01: alternateEntry01
        alternate_entry02: alternateEntry02
        alternate_entry03: alternateEntry03
        alternate_entry04: alternateEntry04
        alternate_entry05: alternateEntry05
        alternate_entry06: alternateEntry06
        alternate_entry07: alternateEntry07
        alternate_entry08: alternateEntry08
        alternate_entry09: alternateEntry09
        alternate_entry10: alternateEntry10
    """

    __slots__ = [
        "distinctive_ring",
        "alternate_entry01",
        "alternate_entry02",
        "alternate_entry03",
        "alternate_entry04",
        "alternate_entry05",
        "alternate_entry06",
        "alternate_entry07",
        "alternate_entry08",
        "alternate_entry09",
        "alternate_entry10",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("distinctive_ring", "distinctiveRing", bool, is_required=True),
            E(
                "alternate_entry01",
                "alternateEntry01",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry02",
                "alternateEntry02",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry03",
                "alternateEntry03",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry04",
                "alternateEntry04",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry05",
                "alternateEntry05",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry06",
                "alternateEntry06",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry07",
                "alternateEntry07",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry08",
                "alternateEntry08",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry09",
                "alternateEntry09",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
            E(
                "alternate_entry10",
                "alternateEntry10",
                OCI.AlternateNumberEntry,
                is_complex=True,
            ),
        )


class UserAlternateNumbersGetResponse17(OCIResponse):
    """
    Response to ``UserAlternateNumbersGetRequest17()``.

    Replaced by: ``UserAlternateNumbersGetResponse21()``

    Attributes:
        distinctive_ring: distinctiveRing
        alternate_entry01: alternateEntry01
        alternate_entry02: alternateEntry02
        alternate_entry03: alternateEntry03
        alternate_entry04: alternateEntry04
        alternate_entry05: alternateEntry05
        alternate_entry06: alternateEntry06
        alternate_entry07: alternateEntry07
        alternate_entry08: alternateEntry08
        alternate_entry09: alternateEntry09
        alternate_entry10: alternateEntry10
    """

    __slots__ = [
        "distinctive_ring",
        "alternate_entry01",
        "alternate_entry02",
        "alternate_entry03",
        "alternate_entry04",
        "alternate_entry05",
        "alternate_entry06",
        "alternate_entry07",
        "alternate_entry08",
        "alternate_entry09",
        "alternate_entry10",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("distinctive_ring", "distinctiveRing", bool, is_required=True),
            E(
                "alternate_entry01",
                "alternateEntry01",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry02",
                "alternateEntry02",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry03",
                "alternateEntry03",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry04",
                "alternateEntry04",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry05",
                "alternateEntry05",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry06",
                "alternateEntry06",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry07",
                "alternateEntry07",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry08",
                "alternateEntry08",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry09",
                "alternateEntry09",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
            E(
                "alternate_entry10",
                "alternateEntry10",
                OCI.AlternateNumberEntry17,
                is_complex=True,
            ),
        )


class UserAlternateNumbersGetResponse21(OCIResponse):
    """
    Response to ``UserAlternateNumbersGetRequest21()``.


    Attributes:
        distinctive_ring: distinctiveRing
        alternate_entry01: alternateEntry01
        alternate_entry02: alternateEntry02
        alternate_entry03: alternateEntry03
        alternate_entry04: alternateEntry04
        alternate_entry05: alternateEntry05
        alternate_entry06: alternateEntry06
        alternate_entry07: alternateEntry07
        alternate_entry08: alternateEntry08
        alternate_entry09: alternateEntry09
        alternate_entry10: alternateEntry10
    """

    __slots__ = [
        "distinctive_ring",
        "alternate_entry01",
        "alternate_entry02",
        "alternate_entry03",
        "alternate_entry04",
        "alternate_entry05",
        "alternate_entry06",
        "alternate_entry07",
        "alternate_entry08",
        "alternate_entry09",
        "alternate_entry10",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("distinctive_ring", "distinctiveRing", bool, is_required=True),
            E(
                "alternate_entry01",
                "alternateEntry01",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry02",
                "alternateEntry02",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry03",
                "alternateEntry03",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry04",
                "alternateEntry04",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry05",
                "alternateEntry05",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry06",
                "alternateEntry06",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry07",
                "alternateEntry07",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry08",
                "alternateEntry08",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry09",
                "alternateEntry09",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry10",
                "alternateEntry10",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
        )


class UserAssignedServicesGetListResponse(OCIResponse):
    """
    Response to ``UserAssignedServicesGetListRequest()``.

    A user can have both user services and group services because of music on hold.

    Attributes:
        group_service_entry: groupServiceEntry
        user_service_entry: userServiceEntry
    """

    __slots__ = [
        "group_service_entry",
        "user_service_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_service_entry",
                "groupServiceEntry",
                OCI.AssignedGroupServicesEntry,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_service_entry",
                "userServiceEntry",
                OCI.AssignedUserServicesEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserBasicCallLogsGetListResponse(OCIResponse):
    """
    Response to ``UserBasicCallLogsGetListRequest()``.

    Replaced By: ``UserBasicCallLogsGetListResponse14sp4()``

    Attributes:
        placed: placed
        received: received
        missed: missed
    """

    __slots__ = [
        "placed",
        "received",
        "missed",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "placed",
                "placed",
                OCI.BasicCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
            E(
                "received",
                "received",
                OCI.BasicCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
            E(
                "missed",
                "missed",
                OCI.BasicCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserBasicCallLogsGetListResponse14sp4(OCIResponse):
    """
    Response to ``UserBasicCallLogsGetListRequest14sp4()``.


    Attributes:
        placed: placed
        received: received
        missed: missed
    """

    __slots__ = [
        "placed",
        "received",
        "missed",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("placed", "placed", OCI.CallLogsEntry, is_complex=True, is_array=True),
            E("received", "received", OCI.CallLogsEntry, is_complex=True, is_array=True),
            E("missed", "missed", OCI.CallLogsEntry, is_complex=True, is_array=True),
        )


class UserBroadWorksAnywhereGetSelectiveCriteriaResponse(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetSelectiveCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserBroadWorksAnywhereGetSelectiveCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetSelectiveCriteriaRequest16()``.

    Replaced by: ``UserBroadWorksAnywhereGetSelectiveCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserBroadWorksAnywhereGetSelectiveCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserBroadWorksAnywhereGetSelectiveCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserBroadWorksMobilityGetResponse21(OCIResponse):
    """
    Response to a ``UserBroadWorksMobilityGetRequest21()``.


    Attributes:
        is_active: isActive
        use_mobile_identity_call_anchoring: useMobileIdentityCallAnchoring
        prevent_calls_to_own_mobiles: preventCallsToOwnMobiles
        mobile_identity: mobileIdentity
        profile_identity_devices_to_ring: profileIdentityDevicesToRing
        profile_identity_include_shared_call_appearance:
            profileIdentityIncludeSharedCallAppearance
        profile_identity_include_broadworks_anywhere:
            profileIdentityIncludeBroadworksAnywhere
        profile_identity_include_executive_assistant:
            profileIdentityIncludeExecutiveAssistant
        profile_identity_mobile_number_alerted: profileIdentityMobileNumberAlerted
    """

    __slots__ = [
        "is_active",
        "use_mobile_identity_call_anchoring",
        "prevent_calls_to_own_mobiles",
        "mobile_identity",
        "profile_identity_devices_to_ring",
        "profile_identity_include_shared_call_appearance",
        "profile_identity_include_broadworks_anywhere",
        "profile_identity_include_executive_assistant",
        "profile_identity_mobile_number_alerted",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "use_mobile_identity_call_anchoring",
                "useMobileIdentityCallAnchoring",
                bool,
                is_required=True,
            ),
            E(
                "prevent_calls_to_own_mobiles",
                "preventCallsToOwnMobiles",
                bool,
                is_required=True,
            ),
            E(
                "mobile_identity",
                "mobileIdentity",
                OCI.BroadWorksMobilityUserMobileIdentityEntry,
                is_complex=True,
                is_array=True,
            ),
            E(
                "profile_identity_devices_to_ring",
                "profileIdentityDevicesToRing",
                str,
                is_required=True,
            ),
            E(
                "profile_identity_include_shared_call_appearance",
                "profileIdentityIncludeSharedCallAppearance",
                bool,
                is_required=True,
            ),
            E(
                "profile_identity_include_broadworks_anywhere",
                "profileIdentityIncludeBroadworksAnywhere",
                bool,
                is_required=True,
            ),
            E(
                "profile_identity_include_executive_assistant",
                "profileIdentityIncludeExecutiveAssistant",
                bool,
                is_required=True,
            ),
            E(
                "profile_identity_mobile_number_alerted",
                "profileIdentityMobileNumberAlerted",
                str,
                is_array=True,
            ),
        )


class UserCallCenterGetAvailableDNISListResponse(OCIResponse):
    """
    Response to ``UserCallCenterGetAvailableDNISListRequest()``.

    Contains a list of available DNIS for agent to select.

    Attributes:
        available_dnis: availableDNIS
    """

    __slots__ = [
        "available_dnis",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "available_dnis",
                "availableDNIS",
                OCI.DNISKey,
                is_complex=True,
                is_array=True,
            ),
        )


class UserCallCenterGetResponse17(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest17()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", and "Priority". Replaced by ``UserCallCenterGetResponse17sp4()``.

    Attributes:
        agent_acd_state: agentACDState
        agent_unavailable_code: agentUnavailableCode
        use_default_guard_timer: useDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_unavailable_on_personal_calls: forceUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        make_outgoing_calls_as_call_center: makeOutgoingCallsAsCallCenter
        outgoing_call_dnis: outgoingCallDNIS
        call_center_table: callCenterTable
    """

    __slots__ = [
        "agent_acd_state",
        "agent_unavailable_code",
        "use_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "make_outgoing_calls_as_call_center",
        "outgoing_call_dnis",
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_acd_state", "agentACDState", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_unavailable_on_personal_calls",
                "forceUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "make_outgoing_calls_as_call_center",
                "makeOutgoingCallsAsCallCenter",
                bool,
            ),
            E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterGetResponse17sp4(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest17sp4()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", and "Priority". Replaced by ``UserCallCenterGetResponse19()``

    Attributes:
        agent_acd_state: agentACDState
        agent_unavailable_code: agentUnavailableCode
        use_default_guard_timer: useDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        make_outgoing_calls_as_call_center: makeOutgoingCallsAsCallCenter
        outgoing_call_dnis: outgoingCallDNIS
        call_center_table: callCenterTable
    """

    __slots__ = [
        "agent_acd_state",
        "agent_unavailable_code",
        "use_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "force_agent_unavailable_on_not_reachable",
        "make_outgoing_calls_as_call_center",
        "outgoing_call_dnis",
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_acd_state", "agentACDState", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
            E(
                "make_outgoing_calls_as_call_center",
                "makeOutgoingCallsAsCallCenter",
                bool,
            ),
            E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallCenterGetResponse19(OCIResponse):
    """
    Response to the ``UserCallCenterGetRequest19()``.

    Contains the user's call center settings.  Indicates whether the agent is current
    available (logged in) to each call center in the list.  Contains a table with column
    headings: "Service User Id", "Phone Number", "Extension", "Available", "Logoff
    Allowed", "Type", "Priority","Routing Policy" and "Skill Level". The valid "Routing
    Type" values are "Priority Based" and "Skill Based". This column is only populated for
    Premium Call Centers.  The valid "Skill Level" values are of from 1-20. This column is
    only populated for Premium Skill Based Call Centers.

    Attributes:
        agent_acd_state: agentACDState
        agent_threshold_profile_name: agentThresholdProfileName
        agent_unavailable_code: agentUnavailableCode
        use_default_guard_timer: useDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        make_outgoing_calls_as_call_center: makeOutgoingCallsAsCallCenter
        outgoing_call_dnis: outgoingCallDNIS
        call_center_table: callCenterTable
    """

    __slots__ = [
        "agent_acd_state",
        "agent_threshold_profile_name",
        "agent_unavailable_code",
        "use_default_guard_timer",
        "enable_guard_timer",
        "guard_timer_seconds",
        "use_system_default_unavailable_settings",
        "force_agent_unavailable_on_dnd_activation",
        "force_agent_unavailable_on_personal_calls",
        "force_agent_unavailable_on_bounced_call_limit",
        "number_consecutive_bounced_calls_to_force_agent_unavailable",
        "force_agent_unavailable_on_not_reachable",
        "make_outgoing_calls_as_call_center",
        "outgoing_call_dnis",
        "call_center_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_acd_state", "agentACDState", str),
            E("agent_threshold_profile_name", "agentThresholdProfileName", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("use_default_guard_timer", "useDefaultGuardTimer", bool, is_required=True),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
            E(
                "make_outgoing_calls_as_call_center",
                "makeOutgoingCallsAsCallCenter",
                bool,
            ),
            E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
            E(
                "call_center_table",
                "callCenterTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserCallForwardingSelectiveGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        forward_to_number_selection: forwardToNumberSelection
        forward_to_phone_number: forwardToPhoneNumber
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "forward_to_number_selection",
        "forward_to_phone_number",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "forward_to_number_selection",
                "forwardToNumberSelection",
                str,
                is_required=True,
            ),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserCallForwardingSelectiveGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetCriteriaRequest16()``.

    Replaced by: ``UserCallForwardingSelectiveGetCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        forward_to_number_selection: forwardToNumberSelection
        forward_to_phone_number: forwardToPhoneNumber
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "forward_to_number_selection",
        "forward_to_phone_number",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E(
                "forward_to_number_selection",
                "forwardToNumberSelection",
                str,
                is_required=True,
            ),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserCallForwardingSelectiveGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserCallForwardingSelectiveGetCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        forward_to_number_selection: forwardToNumberSelection
        forward_to_phone_number: forwardToPhoneNumber
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "forward_to_number_selection",
        "forward_to_phone_number",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E(
                "forward_to_number_selection",
                "forwardToNumberSelection",
                str,
                is_required=True,
            ),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserCallMeNowGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCallMeNowGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        reject_call: rejectCall
        to_dn_criteria: toDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "reject_call",
        "to_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("reject_call", "rejectCall", bool, is_required=True),
            E(
                "to_dn_criteria",
                "toDnCriteria",
                OCI.CallMeNowToDnCriteria,
                is_complex=True,
                is_required=True,
            ),
        )


class UserCallNotifyGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCallNotifyGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserCallNotifyGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserCallNotifyGetCriteriaRequest16()``.

    Replaced by: ``UserCallNotifyGetCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserCallNotifyGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserCallNotifyGetCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserCallToNumberGetAvailableListResponse(OCIResponse):
    """
    Response to the ``UserCallToNumberGetAvailableListRequest()``.

    Contains a list of the user available Call to Numbers".

    Attributes:
        call_to_number: callToNumber
    """

    __slots__ = [
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserCollaborateBridgeGetResponse(OCIResponse):
    """
    The system-level collaborate supportOutdial setting is returned in the response when
    the system-level collaborate supportOutdial setting is disabled.

    Response to ``UserCollaborateBridgeGetRequest()``.

    Attributes:
        bridge_id: bridgeId
        bridge_name: bridgeName
        phone_number: phoneNumber
        extension: extension
        alternate_number_entry: alternateNumberEntry
        support_out_dial: supportOutDial
        max_collaborate_room_participants: maxCollaborateRoomParticipants
    """

    __slots__ = [
        "bridge_id",
        "bridge_name",
        "phone_number",
        "extension",
        "alternate_number_entry",
        "support_out_dial",
        "max_collaborate_room_participants",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("bridge_id", "bridgeId", str, is_required=True),
            E("bridge_name", "bridgeName", str, is_required=True),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E(
                "alternate_number_entry",
                "alternateNumberEntry",
                OCI.AlternateNumberEntry21,
                is_complex=True,
                is_array=True,
            ),
            E("support_out_dial", "supportOutDial", bool, is_required=True),
            E(
                "max_collaborate_room_participants",
                "maxCollaborateRoomParticipants",
                int,
                is_required=True,
            ),
        )


class UserCollaborateProjectRoomGetResponse(OCIResponse):
    """
    Response to ``UserCollaborateProjectRoomGetRequest()``.


    Attributes:
        room_name: roomName
        attendee_notification: attendeeNotification
        end_collaborate_room_session_on_owner_exit: endCollaborateRoomSessionOnOwnerExit
        owner_required: ownerRequired
        room_schedule: roomSchedule
    """

    __slots__ = [
        "room_name",
        "attendee_notification",
        "end_collaborate_room_session_on_owner_exit",
        "owner_required",
        "room_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("room_name", "roomName", str, is_required=True),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "end_collaborate_room_session_on_owner_exit",
                "endCollaborateRoomSessionOnOwnerExit",
                bool,
                is_required=True,
            ),
            E("owner_required", "ownerRequired", bool, is_required=True),
            E(
                "room_schedule",
                "roomSchedule",
                OCI.CollaborateRoomSchedule,
                is_complex=True,
                is_required=True,
            ),
        )


class UserCommunicationBarringAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``UserCommunicationBarringAuthorizationCodeGetListRequest()``.

    Contains a list of Communication Barring Authorization Codes assigned to the user.

    Attributes:
        code: code
    """

    __slots__ = [
        "code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "code",
                "code",
                OCI.CommunicationBarringAuthorizationCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserCustomRingbackUserGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_file_url: videoFileUrl
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "audio_selection",
        "audio_file_description",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_file_url", "videoFileUrl", str),
        )


class UserCustomRingbackUserGetCriteriaResponse15sp2(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest15sp2()``.

    Replaced By: ``UserCustomRingbackUserAddCriteriaResponse16()``

    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_file_url: videoFileUrl
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file_description: callWaitingAudioFileDescription
        call_waiting_audio_file_url: callWaitingAudioFileUrl
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file_description: callWaitingVideoFileDescription
        call_waiting_video_file_url: callWaitingVideoFileUrl
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "audio_selection",
        "audio_file_description",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_file_url",
        "call_waiting_audio_selection",
        "call_waiting_audio_file_description",
        "call_waiting_audio_file_url",
        "call_waiting_video_selection",
        "call_waiting_video_file_description",
        "call_waiting_video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_file_url", "videoFileUrl", str),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file_description",
                "callWaitingAudioFileDescription",
                str,
            ),
            E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file_description",
                "callWaitingVideoFileDescription",
                str,
            ),
            E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
        )


class UserCustomRingbackUserGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest16()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        video_file_url: videoFileUrl
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file_description: callWaitingAudioFileDescription
        call_waiting_audio_media_type: callWaitingAudioMediaType
        call_waiting_audio_file_url: callWaitingAudioFileUrl
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file_description: callWaitingVideoFileDescription
        call_waiting_video_media_type: callWaitingVideoMediaType
        call_waiting_video_file_url: callWaitingVideoFileUrl
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "audio_selection",
        "audio_file_description",
        "audio_media_type",
        "audio_file_url",
        "video_selection",
        "video_file_description",
        "video_media_type",
        "video_file_url",
        "call_waiting_audio_selection",
        "call_waiting_audio_file_description",
        "call_waiting_audio_media_type",
        "call_waiting_audio_file_url",
        "call_waiting_video_selection",
        "call_waiting_video_file_description",
        "call_waiting_video_media_type",
        "call_waiting_video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E("video_file_url", "videoFileUrl", str),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file_description",
                "callWaitingAudioFileDescription",
                str,
            ),
            E("call_waiting_audio_media_type", "callWaitingAudioMediaType", str),
            E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file_description",
                "callWaitingVideoFileDescription",
                str,
            ),
            E("call_waiting_video_media_type", "callWaitingVideoMediaType", str),
            E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
        )


class UserCustomRingbackUserGetCriteriaResponse20(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest20()``.

    Replaced by: ``UserCustomRingbackUserGetCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file: audioFile
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file: videoFile
        video_file_url: videoFileUrl
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_audio_file_url: callWaitingAudioFileUrl
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
        call_waiting_video_file_url: callWaitingVideoFileUrl
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "audio_selection",
        "audio_file",
        "audio_file_url",
        "video_selection",
        "video_file",
        "video_file_url",
        "call_waiting_audio_selection",
        "call_waiting_audio_file",
        "call_waiting_audio_file_url",
        "call_waiting_video_selection",
        "call_waiting_video_file",
        "call_waiting_video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("video_file_url", "videoFileUrl", str),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
        )


class UserCustomRingbackUserGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserCustomRingbackUserGetCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
        audio_selection: audioSelection
        audio_file: audioFile
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file: videoFile
        video_file_url: videoFileUrl
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_audio_file_url: callWaitingAudioFileUrl
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
        call_waiting_video_file_url: callWaitingVideoFileUrl
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "call_to_number",
        "audio_selection",
        "audio_file",
        "audio_file_url",
        "video_selection",
        "video_file",
        "video_file_url",
        "call_waiting_audio_selection",
        "call_waiting_audio_file",
        "call_waiting_audio_file_url",
        "call_waiting_video_selection",
        "call_waiting_video_file",
        "call_waiting_video_file_url",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("video_file_url", "videoFileUrl", str),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E("call_waiting_audio_file_url", "callWaitingAudioFileUrl", str),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E("call_waiting_video_file_url", "callWaitingVideoFileUrl", str),
        )


class UserEnhancedCallLogsGetListResponse(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest()``.

    Replaced By: ``UserEnhancedCallLogsGetListResponse14sp4()``

    Attributes:
        placed: placed
        received: received
        missed: missed
    """

    __slots__ = [
        "placed",
        "received",
        "missed",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "placed",
                "placed",
                OCI.EnhancedCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
            E(
                "received",
                "received",
                OCI.EnhancedCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
            E(
                "missed",
                "missed",
                OCI.EnhancedCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserEnhancedCallLogsGetListResponse14sp4(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest14sp4()``.

    Replaced by: ``UserEnhancedCallLogsGetListResponse16()``

    Attributes:
        placed: placed
        received: received
        missed: missed
    """

    __slots__ = [
        "placed",
        "received",
        "missed",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("placed", "placed", OCI.CallLogsEntry, is_complex=True, is_array=True),
            E("received", "received", OCI.CallLogsEntry, is_complex=True, is_array=True),
            E("missed", "missed", OCI.CallLogsEntry, is_complex=True, is_array=True),
        )


class UserEnhancedCallLogsGetListResponse16(OCIResponse):
    """
    Response to ``UserEnhancedCallLogsGetListRequest16()``.

    Total numbers of rows is: - the total number of retrievable logs of the call log type
    that was specified in the ``UserEnhancedCallLogsGetListRequest16()``, if a call log
    type was specified in the request.  - the total number of retrievable logs, if no call
    log type was specified in the request.  Replaced by
    ``UserEnhancedCallLogsGetListResponse17sp4()``

    Attributes:
        total_number_of_rows: totalNumberOfRows
        call_log: callLog
    """

    __slots__ = [
        "total_number_of_rows",
        "call_log",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("total_number_of_rows", "totalNumberOfRows", int, is_required=True),
            E(
                "call_log",
                "callLog",
                OCI.MixedCallLogsEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserExecutiveGetFilteringSelectiveCriteriaResponse(OCIResponse):
    """
    Response to the ``UserExecutiveGetFilteringSelectiveCriteriaRequest()``.

    Replaced by: ``UserExecutiveGetFilteringSelectiveCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        filter: filter
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "filter",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("filter", "filter", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.ExecutiveCallFilteringCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserExecutiveGetFilteringSelectiveCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserExecutiveGetFilteringSelectiveCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        filter: filter
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "filter",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("filter", "filter", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.ExecutiveCallFilteringCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserFeatureAccessCodeGetListResponse(OCIResponse):
    """
    Response to the ``UserFeatureAccessCodeGetListRequest()``.


    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserFeatureAccessCodeGetListResponse20(OCIResponse):
    """
    Response to the ``UserFeatureAccessCodeGetListRequest20()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording Start".
    Replaced by: ``UserFeatureAccessCodeGetListResponse21()``

    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserFeatureAccessCodeGetListResponse21(OCIResponse):
    """
    Response to the ``UserFeatureAccessCodeGetListRequest21()``.

    In release 20 the "Call Recording" FAC name is changed to "Call Recording Start".

    Attributes:
        feature_access_code: featureAccessCode
    """

    __slots__ = [
        "feature_access_code",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeReadEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserGroupNightForwardingGetResponse(OCIResponse):
    """
    Response to ``UserGroupNightForwardingGetRequest()``.

    businessHours and holidaySchedule are returned in the response only when
    groupNightForwarding is ‘Auto On’.

    Attributes:
        night_forwarding: nightForwarding
        group_night_forwarding: groupNightForwarding
        business_hours: businessHours
        holiday_schedule: holidaySchedule
    """

    __slots__ = [
        "night_forwarding",
        "group_night_forwarding",
        "business_hours",
        "holiday_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("night_forwarding", "nightForwarding", str, is_required=True),
            E("group_night_forwarding", "groupNightForwarding", str, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
        )


class UserHolidayScheduleGetResponse(OCIResponse):
    """
    Response to the ``UserHolidayScheduleGetRequest()``.

    The response contains the user?s holiday schedule information.

    Attributes:
        holiday_schedule_name: holidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    __slots__ = [
        "holiday_schedule_name",
        "holiday01",
        "holiday02",
        "holiday03",
        "holiday04",
        "holiday05",
        "holiday06",
        "holiday07",
        "holiday08",
        "holiday09",
        "holiday10",
        "holiday11",
        "holiday12",
        "holiday13",
        "holiday14",
        "holiday15",
        "holiday16",
        "holiday17",
        "holiday18",
        "holiday19",
        "holiday20",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


class UserLDAPIntegrationGetDirectoryEntryResponse(OCIResponse):
    """
    Response to ``UserLDAPIntegrationGetDirectoryEntryRequest()``.


    Attributes:
        data: data
    """

    __slots__ = [
        "data",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("data", "data", OCI.LDAPEntryField, is_complex=True, is_array=True),
        )


class UserMaliciousCallTraceGetResponse(OCIResponse):
    """
    Response to ``UserMaliciousCallTraceGetRequest()``.


    Attributes:
        is_active: isActive
        trace_type_selection: traceTypeSelection
        trace_for_time_period: traceForTimePeriod
        trace_time_period: traceTimePeriod
    """

    __slots__ = [
        "is_active",
        "trace_type_selection",
        "trace_for_time_period",
        "trace_time_period",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("trace_type_selection", "traceTypeSelection", str, is_required=True),
            E("trace_for_time_period", "traceForTimePeriod", bool, is_required=True),
            E(
                "trace_time_period",
                "traceTimePeriod",
                OCI.MaliciousCallTraceTimePeriod,
                is_complex=True,
            ),
        )


class UserMeetMeConferencingGetConferenceGreetingResponse20(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceGreetingRequest20()``.

    Contains the information of a conference custom greeting.

    Attributes:
        play_entrance_greeting: playEntranceGreeting
        entrance_greeting_file: entranceGreetingFile
    """

    __slots__ = [
        "play_entrance_greeting",
        "entrance_greeting_file",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_greeting", "playEntranceGreeting", bool, is_required=True),
            E(
                "entrance_greeting_file",
                "entranceGreetingFile",
                OCI.AnnouncementFileKey,
                is_complex=True,
            ),
        )


class UserMeetMeConferencingGetConferenceResponse(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceRequest()``.

    Contains the information of a conference.

    Attributes:
        title: title
        estimated_participants: estimatedParticipants
        restrict_participants: restrictParticipants
        max_participants: maxParticipants
        account_code: accountCode
        mute_all_attendees_on_entry: muteAllAttendeesOnEntry
        end_conference_on_moderator_exit: endConferenceOnModeratorExit
        moderator_required: moderatorRequired
        attendee_notification: attendeeNotification
        conference_schedule: conferenceSchedule
        moderator_pin: moderatorPin
    """

    __slots__ = [
        "title",
        "estimated_participants",
        "restrict_participants",
        "max_participants",
        "account_code",
        "mute_all_attendees_on_entry",
        "end_conference_on_moderator_exit",
        "moderator_required",
        "attendee_notification",
        "conference_schedule",
        "moderator_pin",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("title", "title", str, is_required=True),
            E("estimated_participants", "estimatedParticipants", int),
            E("restrict_participants", "restrictParticipants", bool),
            E("max_participants", "maxParticipants", int),
            E("account_code", "accountCode", str),
            E(
                "mute_all_attendees_on_entry",
                "muteAllAttendeesOnEntry",
                bool,
                is_required=True,
            ),
            E(
                "end_conference_on_moderator_exit",
                "endConferenceOnModeratorExit",
                bool,
                is_required=True,
            ),
            E("moderator_required", "moderatorRequired", bool, is_required=True),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "conference_schedule",
                "conferenceSchedule",
                OCI.MeetMeConferencingConferenceSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("moderator_pin", "moderatorPin", str, is_required=True),
        )


class UserMeetMeConferencingGetConferenceResponse19(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceRequest19()``.

    Contains the information of a conference.

    Attributes:
        title: title
        estimated_participants: estimatedParticipants
        restrict_participants: restrictParticipants
        max_participants: maxParticipants
        account_code: accountCode
        mute_all_attendees_on_entry: muteAllAttendeesOnEntry
        end_conference_on_moderator_exit: endConferenceOnModeratorExit
        moderator_required: moderatorRequired
        require_security_pin: requireSecurityPin
        security_pin: securityPin
        allow_unique_identifier: allowUniqueIdentifier
        attendee_notification: attendeeNotification
        conference_schedule: conferenceSchedule
        moderator_pin: moderatorPin
    """

    __slots__ = [
        "title",
        "estimated_participants",
        "restrict_participants",
        "max_participants",
        "account_code",
        "mute_all_attendees_on_entry",
        "end_conference_on_moderator_exit",
        "moderator_required",
        "require_security_pin",
        "security_pin",
        "allow_unique_identifier",
        "attendee_notification",
        "conference_schedule",
        "moderator_pin",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("title", "title", str, is_required=True),
            E("estimated_participants", "estimatedParticipants", int),
            E("restrict_participants", "restrictParticipants", bool),
            E("max_participants", "maxParticipants", int),
            E("account_code", "accountCode", str),
            E(
                "mute_all_attendees_on_entry",
                "muteAllAttendeesOnEntry",
                bool,
                is_required=True,
            ),
            E(
                "end_conference_on_moderator_exit",
                "endConferenceOnModeratorExit",
                bool,
                is_required=True,
            ),
            E("moderator_required", "moderatorRequired", bool, is_required=True),
            E("require_security_pin", "requireSecurityPin", bool, is_required=True),
            E("security_pin", "securityPin", str),
            E(
                "allow_unique_identifier",
                "allowUniqueIdentifier",
                bool,
                is_required=True,
            ),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "conference_schedule",
                "conferenceSchedule",
                OCI.MeetMeConferencingConferenceSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("moderator_pin", "moderatorPin", str, is_required=True),
        )


class UserMeetMeConferencingGetConferenceResponse20(OCIResponse):
    """
    Response to ``UserMeetMeConferencingGetConferenceRequest20()``.

    Contains the information of a conference.

    Attributes:
        title: title
        estimated_participants: estimatedParticipants
        restrict_participants: restrictParticipants
        max_participants: maxParticipants
        account_code: accountCode
        mute_all_attendees_on_entry: muteAllAttendeesOnEntry
        end_conference_on_moderator_exit: endConferenceOnModeratorExit
        moderator_required: moderatorRequired
        require_security_pin: requireSecurityPin
        security_pin: securityPin
        allow_unique_identifier: allowUniqueIdentifier
        attendee_notification: attendeeNotification
        conference_schedule: conferenceSchedule
        moderator_pin: moderatorPin
        host_time_zone: hostTimeZone
    """

    __slots__ = [
        "title",
        "estimated_participants",
        "restrict_participants",
        "max_participants",
        "account_code",
        "mute_all_attendees_on_entry",
        "end_conference_on_moderator_exit",
        "moderator_required",
        "require_security_pin",
        "security_pin",
        "allow_unique_identifier",
        "attendee_notification",
        "conference_schedule",
        "moderator_pin",
        "host_time_zone",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("title", "title", str, is_required=True),
            E("estimated_participants", "estimatedParticipants", int),
            E("restrict_participants", "restrictParticipants", bool),
            E("max_participants", "maxParticipants", int),
            E("account_code", "accountCode", str),
            E(
                "mute_all_attendees_on_entry",
                "muteAllAttendeesOnEntry",
                bool,
                is_required=True,
            ),
            E(
                "end_conference_on_moderator_exit",
                "endConferenceOnModeratorExit",
                bool,
                is_required=True,
            ),
            E("moderator_required", "moderatorRequired", bool, is_required=True),
            E("require_security_pin", "requireSecurityPin", bool, is_required=True),
            E("security_pin", "securityPin", str),
            E(
                "allow_unique_identifier",
                "allowUniqueIdentifier",
                bool,
                is_required=True,
            ),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "conference_schedule",
                "conferenceSchedule",
                OCI.MeetMeConferencingConferenceSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("moderator_pin", "moderatorPin", str, is_required=True),
            E("host_time_zone", "hostTimeZone", str, is_required=True),
        )


class UserMusicOnHoldUserGetResponse(OCIResponse):
    """
    Response to ``UserMusicOnHoldUserGetRequest()``.

    Replaced By: ``UserMusicOnHoldUserGetResponse16()``

    Attributes:
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldUserSourceRead,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldUserSourceRead,
                is_complex=True,
            ),
        )


class UserMusicOnHoldUserGetResponse16(OCIResponse):
    """
    Response to ``UserMusicOnHoldUserGetRequest16()``.


    Attributes:
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldUserSourceRead16,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldUserSourceRead16,
                is_complex=True,
            ),
        )


class UserMusicOnHoldUserGetResponse20(OCIResponse):
    """
    Response to ``UserMusicOnHoldUserGetRequest20()``.


    Attributes:
        enable_video: enableVideo
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    __slots__ = [
        "enable_video",
        "source",
        "use_alternate_source_for_internal_calls",
        "internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "source",
                "source",
                OCI.MusicOnHoldUserSourceRead20,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldUserSourceRead20,
                is_complex=True,
            ),
        )


class UserOutgoingCallingPlanAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanAuthorizationCodeGetListRequest()``.


    Attributes:
        code_entry: codeEntry
    """

    __slots__ = [
        "code_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "code_entry",
                "codeEntry",
                OCI.OutgoingCallingPlanAuthorizationCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserOutgoingCallingPlanCallMeNowGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanCallMeNowGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanCallMeNowPermissions,
                is_complex=True,
                is_required=True,
            ),
        )


class UserOutgoingCallingPlanOriginatingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanOriginatingGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanOriginatingPermissions,
                is_complex=True,
                is_required=True,
            ),
        )


class UserOutgoingCallingPlanRedirectedGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanRedirectedGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanRedirectedPermissions,
                is_complex=True,
                is_required=True,
            ),
        )


class UserOutgoingCallingPlanRedirectingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanRedirectingGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanRedirectingPermissions,
                is_complex=True,
                is_required=True,
            ),
        )


class UserOutgoingCallingPlanTransferNumbersGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanTransferNumbersGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_numbers: userNumbers
    """

    __slots__ = [
        "use_custom_settings",
        "user_numbers",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_numbers",
                "userNumbers",
                OCI.OutgoingCallingPlanTransferNumbers,
                is_complex=True,
                is_required=True,
            ),
        )


class UserPersonalAssistantCallToNumberGetListResponse(OCIResponse):
    """
    Response to the ``UserPersonalAssistantCallToNumberGetListRequest()``.

    Contains a list of assigned Call to Numbers".

    Attributes:
        call_to_number: callToNumber
    """

    __slots__ = [
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserPersonalPhoneListGetListResponse(OCIResponse):
    """
    Response to the ``UserPersonalPhoneListGetListRequest()``.

    The response contains a user's personal phone list.

    Attributes:
        entry: entry
    """

    __slots__ = [
        "entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("entry", "entry", OCI.PhoneListEntry, is_complex=True, is_array=True),
        )


class UserPreAlertingAnnouncementGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserPreAlertingAnnouncementGetCriteriaRequest()``.

    Replaced by: ``UserPreAlertingAnnouncementGetCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserPreAlertingAnnouncementGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserPreAlertingAnnouncementGetCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserPreAlertingAnnouncementGetResponse20(OCIResponse):
    """
    Response to a ``UserPreAlertingAnnouncementGetRequest20()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Blacklisted",
    "Calls From", "Calls To Type", "Calls To Number" and "Calls To Extension". The
    possible values for the "Calls To Type" column are the following or a combination of
    them separated by comma: - Primary - Alternate X (where x is a number between 1 and
    10) - Mobility The possible values for the "Calls To Number" column are the following
    or a combination of them separated by comma: - The value of the phone number for the
    corresponding Calls To Type, when the number is available.  i.e.  Alternate 1 may have
    extension, but no number.  - When no number is available a blank space is provided
    instead.  The possible values for the "Calls To Extension" column are the following or
    a combination of them separated by comma: - The value of the extension for the
    corresponding Calls To Type, when the extension is available.  i.e.  Primary may have
    number, but no extension.  - For Mobility Calls To Type, this is always blank.  - When
    no extension is available a blank space is provided instead.

    Attributes:
        is_active: isActive
        audio_selection: audioSelection
        audio_file: audioFile
        audio_file_url: audioFileUrl
        video_selection: videoSelection
        video_file: videoFile
        video_file_url: videoFileUrl
        criteria_table: criteriaTable
    """

    __slots__ = [
        "is_active",
        "audio_selection",
        "audio_file",
        "audio_file_url",
        "video_selection",
        "video_file",
        "video_file_url",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("audio_file_url", "audioFileUrl", str),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("video_file_url", "videoFileUrl", str),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserPreferredCarrierUserGetResponse(OCIResponse):
    """
    Response to a ``UserPreferredCarrierUserGetRequest()``.


    Attributes:
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    __slots__ = [
        "intra_lata_carrier",
        "inter_lata_carrier",
        "international_carrier",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "intra_lata_carrier",
                "intraLataCarrier",
                OCI.UserPreferredCarrierName,
                is_complex=True,
                is_required=True,
            ),
            E(
                "inter_lata_carrier",
                "interLataCarrier",
                OCI.UserPreferredCarrierName,
                is_complex=True,
                is_required=True,
            ),
            E(
                "international_carrier",
                "internationalCarrier",
                OCI.UserPreferredCarrierName,
                is_complex=True,
                is_required=True,
            ),
        )


class UserPriorityAlertGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.PriorityAlertCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserPriorityAlertGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaRequest16()``.

    Replaced by: ``UserPriorityAlertGetCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.PriorityAlertCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserPriorityAlertGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserPriorityAlertGetCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.PriorityAlertCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserScheduleGetEventResponse(OCIResponse):
    """
    Response to ``UserScheduleGetEventRequest()``.

    The response contains the event of the user schedule.

    Attributes:
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    __slots__ = [
        "start_date",
        "all_day_event",
        "start_time",
        "end_time",
        "end_date",
        "recurrence",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


class UserSelectiveCallAcceptanceGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserSelectiveCallAcceptanceGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaRequest16()``.

    Replaced by: ``UserSelectiveCallAcceptanceGetCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserSelectiveCallAcceptanceGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserSelectiveCallAcceptanceGetCriteriaRequest21()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserSelectiveCallRejectionGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserSelectiveCallRejectionGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest16()``.

    Replaced by: ``UserSelectiveCallRejectionGetCriteriaResponse16sp1()``

    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        blacklisted: blacklisted
        holiday_schedule: holidaySchedule
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "blacklisted",
        "holiday_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.SelectiveCallRejectionCriteriaCallType,
                is_complex=True,
                is_required=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
        )


class UserSelectiveCallRejectionGetCriteriaResponse16sp1(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest16sp1()``.

    Private Phone Numbers are omitted from the fromDnCriteria.  Replaced by:
    ``UserSelectiveCallRejectionGetCriteriaResponse21()``

    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        blacklisted: blacklisted
        holiday_schedule: holidaySchedule
        private: private
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "blacklisted",
        "holiday_schedule",
        "private",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.SelectiveCallRejectionCriteriaCallType,
                is_complex=True,
                is_required=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("private", "private", bool, is_required=True),
        )


class UserSelectiveCallRejectionGetCriteriaResponse21(OCIResponse):
    """
    Response to the ``UserSelectiveCallRejectionGetCriteriaRequest21()``.

    Private Phone Numbers are omitted from the fromDnCriteria.

    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        blacklisted: blacklisted
        holiday_schedule: holidaySchedule
        private: private
        call_to_number: callToNumber
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "blacklisted",
        "holiday_schedule",
        "private",
        "call_to_number",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.SelectiveCallRejectionCriteriaCallType,
                is_complex=True,
                is_required=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("private", "private", bool, is_required=True),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


class UserSequentialRingGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSequentialRingGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserSequentialRingGetCriteriaResponse16(OCIResponse):
    """
    Response to the ``UserSequentialRingGetCriteriaRequest16()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserSequentialRingGetResponse13mp16(OCIResponse):
    """
    Response to the ``UserSequentialRingGetRequest13mp16()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule" and "Calls From".

    Replaced By: ``UserSequentialRingGetResponse14sp4()``

    Attributes:
        ring_base_location_first: ringBaseLocationFirst
        base_location_number_of_rings: baseLocationNumberOfRings
        continue_if_base_location_is_busy: continueIfBaseLocationIsBusy
        caller_may_stop_search: callerMayStopSearch
        location01: Location01
        location02: Location02
        location03: Location03
        location04: Location04
        location05: Location05
        criteria_table: criteriaTable
    """

    __slots__ = [
        "ring_base_location_first",
        "base_location_number_of_rings",
        "continue_if_base_location_is_busy",
        "caller_may_stop_search",
        "location01",
        "location02",
        "location03",
        "location04",
        "location05",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "ring_base_location_first",
                "ringBaseLocationFirst",
                bool,
                is_required=True,
            ),
            E(
                "base_location_number_of_rings",
                "baseLocationNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "continue_if_base_location_is_busy",
                "continueIfBaseLocationIsBusy",
                bool,
                is_required=True,
            ),
            E("caller_may_stop_search", "callerMayStopSearch", bool, is_required=True),
            E(
                "location01",
                "Location01",
                OCI.SequentialRingLocation,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location02",
                "Location02",
                OCI.SequentialRingLocation,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location03",
                "Location03",
                OCI.SequentialRingLocation,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location04",
                "Location04",
                OCI.SequentialRingLocation,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location05",
                "Location05",
                OCI.SequentialRingLocation,
                is_complex=True,
                is_required=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSequentialRingGetResponse14sp4(OCIResponse):
    """
    Response to the ``UserSequentialRingGetRequest14sp4()``.

    The criteria table's column headings are: "Is Active", "Criteria Name", "Time
    Schedule", "Calls From", "Blacklisted" and "Holiday Schedule".

    Attributes:
        ring_base_location_first: ringBaseLocationFirst
        base_location_number_of_rings: baseLocationNumberOfRings
        continue_if_base_location_is_busy: continueIfBaseLocationIsBusy
        caller_may_stop_search: callerMayStopSearch
        location01: Location01
        location02: Location02
        location03: Location03
        location04: Location04
        location05: Location05
        criteria_table: criteriaTable
    """

    __slots__ = [
        "ring_base_location_first",
        "base_location_number_of_rings",
        "continue_if_base_location_is_busy",
        "caller_may_stop_search",
        "location01",
        "location02",
        "location03",
        "location04",
        "location05",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "ring_base_location_first",
                "ringBaseLocationFirst",
                bool,
                is_required=True,
            ),
            E(
                "base_location_number_of_rings",
                "baseLocationNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "continue_if_base_location_is_busy",
                "continueIfBaseLocationIsBusy",
                bool,
                is_required=True,
            ),
            E("caller_may_stop_search", "callerMayStopSearch", bool, is_required=True),
            E(
                "location01",
                "Location01",
                OCI.SequentialRingLocation14sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location02",
                "Location02",
                OCI.SequentialRingLocation14sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location03",
                "Location03",
                OCI.SequentialRingLocation14sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location04",
                "Location04",
                OCI.SequentialRingLocation14sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "location05",
                "Location05",
                OCI.SequentialRingLocation14sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSimultaneousRingFamilyGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserSimultaneousRingFamilyGetResponse17(OCIResponse):
    """
    Response to the ``UserSimultaneousRingFamilyGetRequest17()``.

    Contains a criteria table wich column heading: "Is Active", "Criteria Name", "Time
    Schedule", "Holiday Schedule", "Calls From" and "Blacklisted".

    Attributes:
        is_active: isActive
        do_not_ring_if_on_call: doNotRingIfOnCall
        simultaneous_ring_number: simultaneousRingNumber
        criteria_table: criteriaTable
    """

    __slots__ = [
        "is_active",
        "do_not_ring_if_on_call",
        "simultaneous_ring_number",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("do_not_ring_if_on_call", "doNotRingIfOnCall", bool, is_required=True),
            E(
                "simultaneous_ring_number",
                "simultaneousRingNumber",
                OCI.SimultaneousRingNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSimultaneousRingPersonalGetCriteriaResponse(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetCriteriaRequest()``.


    Attributes:
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    __slots__ = [
        "time_schedule",
        "holiday_schedule",
        "blacklisted",
        "from_dn_criteria",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


class UserSimultaneousRingPersonalGetResponse17(OCIResponse):
    """
    Response to the ``UserSimultaneousRingPersonalGetRequest17()``.

    Contains a criteria table with column heading: "Is Active", "Criteria Name", "Time
    Schedule", "Holiday Schedule", "Calls From" and "Blacklisted".

    Attributes:
        is_active: isActive
        do_not_ring_if_on_call: doNotRingIfOnCall
        simultaneous_ring_number: simultaneousRingNumber
        criteria_table: criteriaTable
    """

    __slots__ = [
        "is_active",
        "do_not_ring_if_on_call",
        "simultaneous_ring_number",
        "criteria_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("do_not_ring_if_on_call", "doNotRingIfOnCall", bool, is_required=True),
            E(
                "simultaneous_ring_number",
                "simultaneousRingNumber",
                OCI.SimultaneousRingNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "criteria_table",
                "criteriaTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class UserSpeedDial100GetListResponse(OCIResponse):
    """
    Response to the ``UserSpeedDial100GetListRequest()``.


    Attributes:
        prefix: prefix
        speed_dial_entry: speedDialEntry
    """

    __slots__ = [
        "prefix",
        "speed_dial_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix", "prefix", str, is_required=True),
            E(
                "speed_dial_entry",
                "speedDialEntry",
                OCI.SpeedDial100Entry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserSpeedDial100GetListResponse17sp1(OCIResponse):
    """
    Response to the ``UserSpeedDial100GetListRequest17sp1()``.


    Attributes:
        prefix: prefix
        speed_dial_entry: speedDialEntry
    """

    __slots__ = [
        "prefix",
        "speed_dial_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix", "prefix", str),
            E(
                "speed_dial_entry",
                "speedDialEntry",
                OCI.SpeedDial100Entry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserSpeedDial8GetListResponse(OCIResponse):
    """
    Response to the ``UserSpeedDial8GetListRequest()``.


    Attributes:
        speed_dial_entry: speedDialEntry
    """

    __slots__ = [
        "speed_dial_entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "speed_dial_entry",
                "speedDialEntry",
                OCI.SpeedDial8Entry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


class UserTimeScheduleGetResponse(OCIResponse):
    """
    Response to the ``UserTimeScheduleGetRequest()``.

    The response contains the requested time schedule information.

    Attributes:
        time_schedule_name: timeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    __slots__ = [
        "time_schedule_name",
        "time_interval01",
        "time_interval02",
        "time_interval03",
        "time_interval04",
        "time_interval05",
        "time_interval06",
        "time_interval07",
        "time_interval08",
        "time_interval09",
        "time_interval10",
        "time_interval11",
        "time_interval12",
        "time_interval13",
        "time_interval14",
        "time_interval15",
        "time_interval16",
        "time_interval17",
        "time_interval18",
        "time_interval19",
        "time_interval20",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


class UserVoiceMessagingUserGetGreetingResponse13mp16(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest13mp16()``.

    Contains the greeting configuration for a user's voice messaging.

    Replaced By: ``UserVoiceMessagingUserGetGreetingResponse16()``

    Attributes:
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_video_file: busyPersonalVideoFile
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        no_answer_number_of_rings: noAnswerNumberOfRings
    """

    __slots__ = [
        "busy_announcement_selection",
        "busy_personal_audio_file",
        "busy_personal_video_file",
        "no_answer_announcement_selection",
        "no_answer_personal_audio_file",
        "no_answer_personal_video_file",
        "no_answer_alternate_greeting01",
        "no_answer_alternate_greeting02",
        "no_answer_alternate_greeting03",
        "no_answer_number_of_rings",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "busy_announcement_selection",
                "busyAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("busy_personal_audio_file", "busyPersonalAudioFile", str),
            E("busy_personal_video_file", "busyPersonalVideoFile", str),
            E(
                "no_answer_announcement_selection",
                "noAnswerAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
            E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead,
                is_complex=True,
            ),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
        )


class UserVoiceMessagingUserGetGreetingResponse16(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest16()``.

    Contains the greeting configuration for a user's voice messaging.

    Attributes:
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_audio_media_type: busyPersonalAudioMediaType
        busy_personal_video_file: busyPersonalVideoFile
        busy_personal_video_media_type: busyPersonalVideoMediaType
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_audio_media_type: noAnswerPersonalAudioMediaType
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        no_answer_personal_video_media_type: noAnswerPersonalVideoMediaType
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        no_answer_number_of_rings: noAnswerNumberOfRings
    """

    __slots__ = [
        "busy_announcement_selection",
        "busy_personal_audio_file",
        "busy_personal_audio_media_type",
        "busy_personal_video_file",
        "busy_personal_video_media_type",
        "no_answer_announcement_selection",
        "no_answer_personal_audio_file",
        "no_answer_personal_audio_media_type",
        "no_answer_personal_video_file",
        "no_answer_personal_video_media_type",
        "no_answer_alternate_greeting01",
        "no_answer_alternate_greeting02",
        "no_answer_alternate_greeting03",
        "no_answer_number_of_rings",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "busy_announcement_selection",
                "busyAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("busy_personal_audio_file", "busyPersonalAudioFile", str),
            E("busy_personal_audio_media_type", "busyPersonalAudioMediaType", str),
            E("busy_personal_video_file", "busyPersonalVideoFile", str),
            E("busy_personal_video_media_type", "busyPersonalVideoMediaType", str),
            E(
                "no_answer_announcement_selection",
                "noAnswerAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
            E(
                "no_answer_personal_audio_media_type",
                "noAnswerPersonalAudioMediaType",
                str,
            ),
            E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
            E(
                "no_answer_personal_video_media_type",
                "noAnswerPersonalVideoMediaType",
                str,
            ),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
        )


class UserVoiceMessagingUserGetGreetingResponse18(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest18()``.

    Contains the greeting configuration for a user's voice messaging.  The following
    elements are only used in AS data mode: disableMessageDeposit
    disableMessageDepositAction greetingOnlyForwardDestination Replaced by
    ``UserVoiceMessagingUserGetGreetingResponse18sp1()``

    Attributes:
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_audio_media_type: busyPersonalAudioMediaType
        busy_personal_video_file: busyPersonalVideoFile
        busy_personal_video_media_type: busyPersonalVideoMediaType
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_audio_media_type: noAnswerPersonalAudioMediaType
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        no_answer_personal_video_media_type: noAnswerPersonalVideoMediaType
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        no_answer_number_of_rings: noAnswerNumberOfRings
        disable_message_deposit: disableMessageDeposit
        disable_message_deposit_action: disableMessageDepositAction
        greeting_only_forward_destination: greetingOnlyForwardDestination
    """

    __slots__ = [
        "busy_announcement_selection",
        "busy_personal_audio_file",
        "busy_personal_audio_media_type",
        "busy_personal_video_file",
        "busy_personal_video_media_type",
        "no_answer_announcement_selection",
        "no_answer_personal_audio_file",
        "no_answer_personal_audio_media_type",
        "no_answer_personal_video_file",
        "no_answer_personal_video_media_type",
        "no_answer_alternate_greeting01",
        "no_answer_alternate_greeting02",
        "no_answer_alternate_greeting03",
        "no_answer_number_of_rings",
        "disable_message_deposit",
        "disable_message_deposit_action",
        "greeting_only_forward_destination",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "busy_announcement_selection",
                "busyAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("busy_personal_audio_file", "busyPersonalAudioFile", str),
            E("busy_personal_audio_media_type", "busyPersonalAudioMediaType", str),
            E("busy_personal_video_file", "busyPersonalVideoFile", str),
            E("busy_personal_video_media_type", "busyPersonalVideoMediaType", str),
            E(
                "no_answer_announcement_selection",
                "noAnswerAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
            E(
                "no_answer_personal_audio_media_type",
                "noAnswerPersonalAudioMediaType",
                str,
            ),
            E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
            E(
                "no_answer_personal_video_media_type",
                "noAnswerPersonalVideoMediaType",
                str,
            ),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "disable_message_deposit",
                "disableMessageDeposit",
                bool,
                is_required=True,
            ),
            E(
                "disable_message_deposit_action",
                "disableMessageDepositAction",
                str,
                is_required=True,
            ),
            E(
                "greeting_only_forward_destination",
                "greetingOnlyForwardDestination",
                str,
            ),
        )


class UserVoiceMessagingUserGetGreetingResponse18sp1(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest18sp1()``.

    Contains the greeting configuration for a user's voice messaging.  The following
    elements are only used in AS data mode: disableMessageDeposit
    disableMessageDepositAction greetingOnlyForwardDestination extendedAwayEnabled
    extendedAwayDisableMessageDeposit extendedAwayAudioFile extendedAwayAudioMediaType
    extendedAwayVideoFile extendedAwayVideoMediaTyp Replaced by
    ``UserVoiceMessagingUserGetGreetingResponse20()``

    Attributes:
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_audio_media_type: busyPersonalAudioMediaType
        busy_personal_video_file: busyPersonalVideoFile
        busy_personal_video_media_type: busyPersonalVideoMediaType
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_audio_media_type: noAnswerPersonalAudioMediaType
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        no_answer_personal_video_media_type: noAnswerPersonalVideoMediaType
        extended_away_enabled: extendedAwayEnabled
        extended_away_disable_message_deposit: extendedAwayDisableMessageDeposit
        extended_away_audio_file: extendedAwayAudioFile
        extended_away_audio_media_type: extendedAwayAudioMediaType
        extended_away_video_file: extendedAwayVideoFile
        extended_away_video_media_type: extendedAwayVideoMediaType
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        no_answer_number_of_rings: noAnswerNumberOfRings
        disable_message_deposit: disableMessageDeposit
        disable_message_deposit_action: disableMessageDepositAction
        greeting_only_forward_destination: greetingOnlyForwardDestination
    """

    __slots__ = [
        "busy_announcement_selection",
        "busy_personal_audio_file",
        "busy_personal_audio_media_type",
        "busy_personal_video_file",
        "busy_personal_video_media_type",
        "no_answer_announcement_selection",
        "no_answer_personal_audio_file",
        "no_answer_personal_audio_media_type",
        "no_answer_personal_video_file",
        "no_answer_personal_video_media_type",
        "extended_away_enabled",
        "extended_away_disable_message_deposit",
        "extended_away_audio_file",
        "extended_away_audio_media_type",
        "extended_away_video_file",
        "extended_away_video_media_type",
        "no_answer_alternate_greeting01",
        "no_answer_alternate_greeting02",
        "no_answer_alternate_greeting03",
        "no_answer_number_of_rings",
        "disable_message_deposit",
        "disable_message_deposit_action",
        "greeting_only_forward_destination",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "busy_announcement_selection",
                "busyAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("busy_personal_audio_file", "busyPersonalAudioFile", str),
            E("busy_personal_audio_media_type", "busyPersonalAudioMediaType", str),
            E("busy_personal_video_file", "busyPersonalVideoFile", str),
            E("busy_personal_video_media_type", "busyPersonalVideoMediaType", str),
            E(
                "no_answer_announcement_selection",
                "noAnswerAnnouncementSelection",
                str,
                is_required=True,
            ),
            E("no_answer_personal_audio_file", "noAnswerPersonalAudioFile", str),
            E(
                "no_answer_personal_audio_media_type",
                "noAnswerPersonalAudioMediaType",
                str,
            ),
            E("no_answer_personal_video_file", "noAnswerPersonalVideoFile", str),
            E(
                "no_answer_personal_video_media_type",
                "noAnswerPersonalVideoMediaType",
                str,
            ),
            E("extended_away_enabled", "extendedAwayEnabled", bool, is_required=True),
            E(
                "extended_away_disable_message_deposit",
                "extendedAwayDisableMessageDeposit",
                bool,
                is_required=True,
            ),
            E("extended_away_audio_file", "extendedAwayAudioFile", str),
            E("extended_away_audio_media_type", "extendedAwayAudioMediaType", str),
            E("extended_away_video_file", "extendedAwayVideoFile", str),
            E("extended_away_video_media_type", "extendedAwayVideoMediaType", str),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead16,
                is_complex=True,
            ),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "disable_message_deposit",
                "disableMessageDeposit",
                bool,
                is_required=True,
            ),
            E(
                "disable_message_deposit_action",
                "disableMessageDepositAction",
                str,
                is_required=True,
            ),
            E(
                "greeting_only_forward_destination",
                "greetingOnlyForwardDestination",
                str,
            ),
        )


class UserVoiceMessagingUserGetVoicePortalResponse20(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetVoicePortalRequest20()``.


    Attributes:
        use_personalized_name: usePersonalizedName
        voice_portal_auto_login: voicePortalAutoLogin
        personalized_name_audio_file: personalizedNameAudioFile
    """

    __slots__ = [
        "use_personalized_name",
        "voice_portal_auto_login",
        "personalized_name_audio_file",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_personalized_name", "usePersonalizedName", bool, is_required=True),
            E("voice_portal_auto_login", "voicePortalAutoLogin", bool, is_required=True),
            E(
                "personalized_name_audio_file",
                "personalizedNameAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
        )


class EnterpriseSessionAdmissionControlGetAvailableDeviceListResponse(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGetAvailableDeviceListRequest()``.

    Contains a table of devices can be assigned to session admission control group in the
    enterprise.

    Attributes:
        access_device: accessDevice
    """

    __slots__ = [
        "access_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_device",
                "accessDevice",
                OCI.EnterpriseAccessDevice,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseSessionAdmissionControlGroupGetResponse(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGroupGetRequest()``.

    Returns the profile information for the session admission control group.

    Attributes:
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        default_group: defaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
    """

    __slots__ = [
        "max_session",
        "max_user_originating_sessions",
        "max_user_terminating_sessions",
        "reserved_session",
        "reserved_user_originating_sessions",
        "reserved_user_terminating_sessions",
        "default_group",
        "count_intra_sac_group_sessions",
        "devices",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("default_group", "defaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E(
                "devices",
                "devices",
                OCI.EnterpriseAccessDevice,
                is_complex=True,
                is_array=True,
            ),
        )


class EnterpriseSessionAdmissionControlGroupGetResponse19sp1(OCIResponse):
    """
    Response to ``EnterpriseSessionAdmissionControlGroupGetRequest19sp1()``.

    Returns the profile information for the session admission control group.

    Attributes:
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        default_group: defaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
        block_emergency_and_repair_calls_due_to_sac_limits:
            blockEmergencyAndRepairCallsDueToSACLimits
    """

    __slots__ = [
        "max_session",
        "max_user_originating_sessions",
        "max_user_terminating_sessions",
        "reserved_session",
        "reserved_user_originating_sessions",
        "reserved_user_terminating_sessions",
        "default_group",
        "count_intra_sac_group_sessions",
        "devices",
        "block_emergency_and_repair_calls_due_to_sac_limits",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("default_group", "defaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E(
                "devices",
                "devices",
                OCI.EnterpriseAccessDevice,
                is_complex=True,
                is_array=True,
            ),
            E(
                "block_emergency_and_repair_calls_due_to_sac_limits",
                "blockEmergencyAndRepairCallsDueToSACLimits",
                bool,
                is_required=True,
            ),
        )


class GroupAutoAttendantSubmenuGetResponse(OCIResponse):
    """
    Response to ``GroupAutoAttendantSubmenuGetRequest()``.

    Contains AutoAttendant submenu information.

    Attributes:
        announcement_selection: announcementSelection
        audio_file_description: audioFileDescription
        audio_media_type: audioMediaType
        video_file_description: videoFileDescription
        video_media_type: videoMediaType
        enable_level_extension_dialing: enableLevelExtensionDialing
        key_configuration: keyConfiguration
    """

    __slots__ = [
        "announcement_selection",
        "audio_file_description",
        "audio_media_type",
        "video_file_description",
        "video_media_type",
        "enable_level_extension_dialing",
        "key_configuration",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("audio_media_type", "audioMediaType", str),
            E("video_file_description", "videoFileDescription", str),
            E("video_media_type", "videoMediaType", str),
            E(
                "enable_level_extension_dialing",
                "enableLevelExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "key_configuration",
                "keyConfiguration",
                OCI.AutoAttendantKeyReadConfiguration19,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupBroadWorksAnywhereGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupBroadWorksAnywhereGetInstanceRequest()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        broad_works_anywhere_scope: broadWorksAnywhereScope
        prompt_for_clid: promptForCLID
        silent_prompt_mode: silentPromptMode
        prompt_for_passcode: promptForPasscode
    """

    __slots__ = [
        "service_instance_profile",
        "broad_works_anywhere_scope",
        "prompt_for_clid",
        "silent_prompt_mode",
        "prompt_for_passcode",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "broad_works_anywhere_scope",
                "broadWorksAnywhereScope",
                str,
                is_required=True,
            ),
            E("prompt_for_clid", "promptForCLID", str, is_required=True),
            E("silent_prompt_mode", "silentPromptMode", bool, is_required=True),
            E("prompt_for_passcode", "promptForPasscode", bool, is_required=True),
        )


class GroupBroadWorksAnywhereGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupBroadWorksAnywhereGetInstanceRequest17()``.

    Contains the service profile information.  Replaced by:
    ``GroupBroadWorksAnywhereGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        broad_works_anywhere_scope: broadWorksAnywhereScope
        prompt_for_clid: promptForCLID
        silent_prompt_mode: silentPromptMode
        prompt_for_passcode: promptForPasscode
    """

    __slots__ = [
        "service_instance_profile",
        "broad_works_anywhere_scope",
        "prompt_for_clid",
        "silent_prompt_mode",
        "prompt_for_passcode",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E(
                "broad_works_anywhere_scope",
                "broadWorksAnywhereScope",
                str,
                is_required=True,
            ),
            E("prompt_for_clid", "promptForCLID", str, is_required=True),
            E("silent_prompt_mode", "silentPromptMode", bool, is_required=True),
            E("prompt_for_passcode", "promptForPasscode", bool, is_required=True),
        )


class GroupBroadWorksAnywhereGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupBroadWorksAnywhereGetInstanceRequest19sp1()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        broad_works_anywhere_scope: broadWorksAnywhereScope
        prompt_for_clid: promptForCLID
        silent_prompt_mode: silentPromptMode
        prompt_for_passcode: promptForPasscode
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "broad_works_anywhere_scope",
        "prompt_for_clid",
        "silent_prompt_mode",
        "prompt_for_passcode",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E(
                "broad_works_anywhere_scope",
                "broadWorksAnywhereScope",
                str,
                is_required=True,
            ),
            E("prompt_for_clid", "promptForCLID", str, is_required=True),
            E("silent_prompt_mode", "silentPromptMode", bool, is_required=True),
            E("prompt_for_passcode", "promptForPasscode", bool, is_required=True),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupCallCenterComfortMessageBypassGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterComfortMessageBypassGetRequest20()``.


    Attributes:
        is_active: isActive
        call_waiting_age_threshold_seconds: callWaitingAgeThresholdSeconds
        play_announcement_after_ringing: playAnnouncementAfterRinging
        ring_time_before_playing_announcement_seconds:
            ringTimeBeforePlayingAnnouncementSeconds
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "is_active",
        "call_waiting_age_threshold_seconds",
        "play_announcement_after_ringing",
        "ring_time_before_playing_announcement_seconds",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "call_waiting_age_threshold_seconds",
                "callWaitingAgeThresholdSeconds",
                int,
                is_required=True,
            ),
            E(
                "play_announcement_after_ringing",
                "playAnnouncementAfterRinging",
                bool,
                is_required=True,
            ),
            E(
                "ring_time_before_playing_announcement_seconds",
                "ringTimeBeforePlayingAnnouncementSeconds",
                int,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupCallCenterForcedForwardingGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterForcedForwardingGetRequest20()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        allow_enable_via_fac: allowEnableViaFAC
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "allow_enable_via_fac",
        "play_announcement_before_forwarding",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("allow_enable_via_fac", "allowEnableViaFAC", bool, is_required=True),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupCallCenterGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest14()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".

    Replaced By: ``GroupCallCenterGetInstanceResponse14sp3()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        enable_video: enableVideo
        queue_length: queueLength
        allow_agent_logoff: allowAgentLogoff
        play_music_on_hold: playMusicOnHold
        play_comfort_message: playComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "enable_video",
        "queue_length",
        "allow_agent_logoff",
        "play_music_on_hold",
        "play_comfort_message",
        "time_between_comfort_messages_seconds",
        "enable_guard_timer",
        "guard_timer_seconds",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
            E("play_comfort_message", "playComfortMessage", bool, is_required=True),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
        )


class GroupCallCenterGetInstanceResponse14sp3(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest14sp3()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".

    Replaced By: ``GroupCallCenterGetInstanceResponse14sp9()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        enable_video: enableVideo
        queue_length: queueLength
        allow_agent_logoff: allowAgentLogoff
        play_music_on_hold: playMusicOnHold
        play_comfort_message: playComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        enable_call_queue_when_no_agents_available: enableCallQueueWhenNoAgentsAvailable
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "enable_video",
        "queue_length",
        "allow_agent_logoff",
        "play_music_on_hold",
        "play_comfort_message",
        "time_between_comfort_messages_seconds",
        "enable_guard_timer",
        "guard_timer_seconds",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "enable_call_queue_when_no_agents_available",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
            E("play_comfort_message", "playComfortMessage", bool, is_required=True),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "allow_calls_to_agents_in_wrap_up",
                "allowCallsToAgentsInWrapUp",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_queue_when_no_agents_available",
                "enableCallQueueWhenNoAgentsAvailable",
                bool,
                is_required=True,
            ),
        )


class GroupCallCenterGetInstanceResponse14sp9(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest14sp9()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        enable_video: enableVideo
        queue_length: queueLength
        allow_agent_logoff: allowAgentLogoff
        play_music_on_hold: playMusicOnHold
        play_comfort_message: playComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        enable_call_queue_when_no_agents_available: enableCallQueueWhenNoAgentsAvailable
        statistics_source: statisticsSource
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "enable_video",
        "queue_length",
        "allow_agent_logoff",
        "play_music_on_hold",
        "play_comfort_message",
        "time_between_comfort_messages_seconds",
        "enable_guard_timer",
        "guard_timer_seconds",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "enable_call_queue_when_no_agents_available",
        "statistics_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
            E("play_comfort_message", "playComfortMessage", bool, is_required=True),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "allow_calls_to_agents_in_wrap_up",
                "allowCallsToAgentsInWrapUp",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_queue_when_no_agents_available",
                "enableCallQueueWhenNoAgentsAvailable",
                bool,
                is_required=True,
            ),
            E("statistics_source", "statisticsSource", str, is_required=True),
        )


class GroupCallCenterGetInstanceResponse16(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest16()``.


    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "policy",
        "enable_video",
        "queue_length",
        "reporting_server_name",
        "allow_caller_to_dial_escape_digit",
        "escape_digit",
        "reset_call_statistics_upon_entry_in_queue",
        "allow_agent_logoff",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "play_ringing_when_offering_call",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


class GroupCallCenterGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest17()``.


    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "policy",
        "enable_video",
        "queue_length",
        "reporting_server_name",
        "allow_caller_to_dial_escape_digit",
        "escape_digit",
        "reset_call_statistics_upon_entry_in_queue",
        "allow_agent_logoff",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "enable_automatic_state_change_for_agents",
        "agent_state_after_call",
        "agent_unavailable_code",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "play_ringing_when_offering_call",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


class GroupCallCenterGetInstanceResponse17sp1(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest17sp1()``.


    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "policy",
        "enable_video",
        "queue_length",
        "enable_reporting",
        "reporting_server_name",
        "allow_caller_to_dial_escape_digit",
        "escape_digit",
        "reset_call_statistics_upon_entry_in_queue",
        "allow_agent_logoff",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "enable_automatic_state_change_for_agents",
        "agent_state_after_call",
        "agent_unavailable_code",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "play_ringing_when_offering_call",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("enable_reporting", "enableReporting", bool),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


class GroupCallCenterGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest17sp3()``.

    Replaced by ``GroupCallCenterGetInstanceResponse19()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "policy",
        "enable_video",
        "queue_length",
        "enable_reporting",
        "reporting_server_name",
        "allow_caller_to_dial_escape_digit",
        "escape_digit",
        "reset_call_statistics_upon_entry_in_queue",
        "allow_agent_logoff",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "enable_automatic_state_change_for_agents",
        "agent_state_after_call",
        "agent_unavailable_code",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "play_ringing_when_offering_call",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("enable_reporting", "enableReporting", bool),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
                is_required=True,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


class GroupCallCenterGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest19()``.

    Replaced by: Response to ``GroupCallCenterGetInstanceRequest19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        routing_type: routingType
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        call_center_queue_thresholds_is_active: callCenterQueueThresholdsIsActive
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "routing_type",
        "policy",
        "enable_video",
        "queue_length",
        "enable_reporting",
        "allow_caller_to_dial_escape_digit",
        "escape_digit",
        "reset_call_statistics_upon_entry_in_queue",
        "allow_agent_logoff",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "enable_automatic_state_change_for_agents",
        "agent_state_after_call",
        "agent_unavailable_code",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "play_ringing_when_offering_call",
        "call_center_queue_thresholds_is_active",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("routing_type", "routingType", str),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("enable_reporting", "enableReporting", bool),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
                is_required=True,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
            E(
                "call_center_queue_thresholds_is_active",
                "callCenterQueueThresholdsIsActive",
                bool,
            ),
        )


class GroupCallCenterGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupCallCenterGetInstanceRequest19sp1()``.


    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        routing_type: routingType
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        call_center_queue_thresholds_is_active: callCenterQueueThresholdsIsActive
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "routing_type",
        "policy",
        "enable_video",
        "queue_length",
        "enable_reporting",
        "allow_caller_to_dial_escape_digit",
        "escape_digit",
        "reset_call_statistics_upon_entry_in_queue",
        "allow_agent_logoff",
        "allow_call_waiting_for_agents",
        "allow_calls_to_agents_in_wrap_up",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "enable_automatic_state_change_for_agents",
        "agent_state_after_call",
        "agent_unavailable_code",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "play_ringing_when_offering_call",
        "call_center_queue_thresholds_is_active",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("routing_type", "routingType", str),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("enable_reporting", "enableReporting", bool),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
                is_required=True,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
            E(
                "call_center_queue_thresholds_is_active",
                "callCenterQueueThresholdsIsActive",
                bool,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupCallCenterGetInstanceStatisticsResponse13mp8(OCIResponse):
    """
    Contains Call Center statistics.

    Replaced By: ``GroupCallCenterGetInstanceStatisticsResponse14sp9()``

    Attributes:
        number_of_calls_queued_now: numberOfCallsQueuedNow
        generate_daily_report: generateDailyReport
        collection_period_minutes: collectionPeriodMinutes
        reporting_email_address1: reportingEmailAddress1
        reporting_email_address2: reportingEmailAddress2
        queue_statistics_yesterday: queueStatisticsYesterday
        queue_statistics_today: queueStatisticsToday
        agent_statistics: agentStatistics
    """

    __slots__ = [
        "number_of_calls_queued_now",
        "generate_daily_report",
        "collection_period_minutes",
        "reporting_email_address1",
        "reporting_email_address2",
        "queue_statistics_yesterday",
        "queue_statistics_today",
        "agent_statistics",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "number_of_calls_queued_now",
                "numberOfCallsQueuedNow",
                int,
                is_required=True,
            ),
            E("generate_daily_report", "generateDailyReport", bool, is_required=True),
            E(
                "collection_period_minutes",
                "collectionPeriodMinutes",
                int,
                is_required=True,
            ),
            E("reporting_email_address1", "reportingEmailAddress1", str),
            E("reporting_email_address2", "reportingEmailAddress2", str),
            E(
                "queue_statistics_yesterday",
                "queueStatisticsYesterday",
                OCI.CallCenterQueueStatistics13mp8,
                is_complex=True,
                is_required=True,
            ),
            E(
                "queue_statistics_today",
                "queueStatisticsToday",
                OCI.CallCenterQueueStatistics13mp8,
                is_complex=True,
                is_required=True,
            ),
            E(
                "agent_statistics",
                "agentStatistics",
                OCI.CallCenterAgentStatistics13mp8,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupCallCenterGetInstanceStatisticsResponse14sp9(OCIResponse):
    """
    Contains Call Center statistics.


    Attributes:
        statistics_range: statisticsRange
        queue_statistics: queueStatistics
        agent_statistics: agentStatistics
    """

    __slots__ = [
        "statistics_range",
        "queue_statistics",
        "agent_statistics",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "statistics_range",
                "statisticsRange",
                OCI.CallCenterStatisticsRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "queue_statistics",
                "queueStatistics",
                OCI.CallCenterQueueStatistics14sp9,
                is_complex=True,
                is_required=True,
            ),
            E(
                "agent_statistics",
                "agentStatistics",
                OCI.CallCenterAgentStatistics14sp9,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupCallCenterHolidayServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterHolidayServiceGetRequest20()``.


    Attributes:
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "action",
        "holiday_schedule",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupCallCenterNightServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterNightServiceGetRequest20()``.


    Attributes:
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    __slots__ = [
        "action",
        "business_hours",
        "force_night_service",
        "allow_manual_override_via_fac",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "manual_announcement_mode",
        "manual_audio_message_selection",
        "manual_audio_url_list",
        "manual_audio_file_list",
        "manual_video_message_selection",
        "manual_video_url_list",
        "manual_video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool, is_required=True),
            E(
                "allow_manual_override_via_fac",
                "allowManualOverrideViaFAC",
                bool,
                is_required=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "manual_announcement_mode",
                "manualAnnouncementMode",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_message_selection",
                "manualAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "manual_video_message_selection",
                "manualVideoMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupCallCenterOverflowGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterOverflowGetRequest20()``.


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "overflow_after_timeout",
        "timeout_seconds",
        "play_announcement_before_overflow_processing",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
            E("timeout_seconds", "timeoutSeconds", int, is_required=True),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupCallCenterStrandedCallGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallGetRequest20()``.


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupCallCenterStrandedCallUnavailableGetResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterStrandedCallUnavailableGetRequest20()``.


    Attributes:
        condition_policy_on_number_of_agents_with_specified_unavailable_code:
            conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode
        number_of_agents_with_specified_unavailable_code:
            numberOfAgentsWithSpecifiedUnavailableCode
        agents_unavailable_code: agentsUnavailableCode
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "condition_policy_on_number_of_agents_with_specified_unavailable_code",
        "number_of_agents_with_specified_unavailable_code",
        "agents_unavailable_code",
        "action",
        "transfer_phone_number",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "condition_policy_on_number_of_agents_with_specified_unavailable_code",
                "conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode",
                bool,
                is_required=True,
            ),
            E(
                "number_of_agents_with_specified_unavailable_code",
                "numberOfAgentsWithSpecifiedUnavailableCode",
                int,
            ),
            E("agents_unavailable_code", "agentsUnavailableCode", str),
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupCollaborateBridgeGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupCollaborateBridgeGetInstanceRequest()``.

    The system-level collaborate supportOutdial setting is returned in the response when
    the system-level collaborate supportOutdial setting is disabled.  Contains the service
    profile information and a table of assigned owners.  The table has column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    Phone Number", "Extension", "Department", "Email Address". Collaborate bridge maximum
    participant’s choices unlimited or a quantified number of participants.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        maximum_bridge_participants: maximumBridgeParticipants
        network_class_of_service: networkClassOfService
        is_default: isDefault
        max_collaborate_room_participants: maxCollaborateRoomParticipants
        support_outdial: supportOutdial
        collaborate_owner_user_table: collaborateOwnerUserTable
    """

    __slots__ = [
        "service_instance_profile",
        "maximum_bridge_participants",
        "network_class_of_service",
        "is_default",
        "max_collaborate_room_participants",
        "support_outdial",
        "collaborate_owner_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E(
                "maximum_bridge_participants",
                "maximumBridgeParticipants",
                OCI.CollaborateBridgeMaximumParticipants,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E("is_default", "isDefault", bool, is_required=True),
            E(
                "max_collaborate_room_participants",
                "maxCollaborateRoomParticipants",
                int,
                is_required=True,
            ),
            E("support_outdial", "supportOutdial", bool, is_required=True),
            E(
                "collaborate_owner_user_table",
                "collaborateOwnerUserTable",
                list,
                is_complex=True,
                is_table=True,
            ),
        )


class GroupFindMeFollowMeGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetInstanceRequest()``.

    Contains the service profile information.  Replaced by:
    ``GroupFindMeFollowMeGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17sp4,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupFindMeFollowMeGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupFindMeFollowMeGetInstanceRequest19sp1()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupFlexibleSeatingHostGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupFlexibleSeatingHostGetInstanceRequest()``.

    Contains the service profile and access device information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        default_alias: defaultAlias
        access_device_endpoint: accessDeviceEndpoint
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "default_alias",
        "access_device_endpoint",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("default_alias", "defaultAlias", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointRead20,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupGroupPagingGetInstanceResponse(OCIResponse):
    """
    Replaced By ``GroupGroupPagingGetInstanceResponse17sp3()`` Response to
    ``GroupGroupPagingGetInstanceRequest()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        confirmation_tone_timeout_seconds: confirmationToneTimeoutSeconds
        deliver_originator_clid_instead: deliverOriginatorCLIDInstead
        originator_clid_prefix: originatorCLIDPrefix
    """

    __slots__ = [
        "service_instance_profile",
        "confirmation_tone_timeout_seconds",
        "deliver_originator_clid_instead",
        "originator_clid_prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "confirmation_tone_timeout_seconds",
                "confirmationToneTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "deliver_originator_clid_instead",
                "deliverOriginatorCLIDInstead",
                bool,
                is_required=True,
            ),
            E("originator_clid_prefix", "originatorCLIDPrefix", str),
        )


class GroupGroupPagingGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupGroupPagingGetInstanceRequest17sp3()``.

    Contains the service profile information.  Replaced by:
    ``GroupGroupPagingGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        confirmation_tone_timeout_seconds: confirmationToneTimeoutSeconds
        deliver_originator_clid_instead: deliverOriginatorCLIDInstead
        originator_clid_prefix: originatorCLIDPrefix
    """

    __slots__ = [
        "service_instance_profile",
        "confirmation_tone_timeout_seconds",
        "deliver_originator_clid_instead",
        "originator_clid_prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E(
                "confirmation_tone_timeout_seconds",
                "confirmationToneTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "deliver_originator_clid_instead",
                "deliverOriginatorCLIDInstead",
                bool,
                is_required=True,
            ),
            E("originator_clid_prefix", "originatorCLIDPrefix", str),
        )


class GroupGroupPagingGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupGroupPagingGetInstanceRequest19sp1()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        confirmation_tone_timeout_seconds: confirmationToneTimeoutSeconds
        deliver_originator_clid_instead: deliverOriginatorCLIDInstead
        originator_clid_prefix: originatorCLIDPrefix
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "confirmation_tone_timeout_seconds",
        "deliver_originator_clid_instead",
        "originator_clid_prefix",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E(
                "confirmation_tone_timeout_seconds",
                "confirmationToneTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "deliver_originator_clid_instead",
                "deliverOriginatorCLIDInstead",
                bool,
                is_required=True,
            ),
            E("originator_clid_prefix", "originatorCLIDPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupHuntGroupGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest14()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
        )


class GroupHuntGroupGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest17()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
        )


class GroupHuntGroupGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest17sp3()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight". The following elements are only used in AS data mode:
    useSystemHuntGroupCLIDSetting includeHuntGroupNameInCLID

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "use_system_hunt_group_clid_setting",
        "include_hunt_group_name_in_clid",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
        )


class GroupHuntGroupGetInstanceResponse17sp4(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest17sp4()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "use_system_hunt_group_clid_setting",
        "include_hunt_group_name_in_clid",
        "enable_not_reachable_forwarding",
        "not_reachable_forward_to_phone_number",
        "make_busy_when_not_reachable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
            E(
                "enable_not_reachable_forwarding",
                "enableNotReachableForwarding",
                bool,
                is_required=True,
            ),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E(
                "make_busy_when_not_reachable",
                "makeBusyWhenNotReachable",
                bool,
                is_required=True,
            ),
        )


class GroupHuntGroupGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest19()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID The following elements are only used in HSS data mode:
    allowMembersToControlGroupBusy enableGroupBusy Replaced by:
    ``GroupHuntGroupGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
        allow_members_to_control_group_busy: allowMembersToControlGroupBusy
        enable_group_busy: enableGroupBusy
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "use_system_hunt_group_clid_setting",
        "include_hunt_group_name_in_clid",
        "enable_not_reachable_forwarding",
        "not_reachable_forward_to_phone_number",
        "make_busy_when_not_reachable",
        "allow_members_to_control_group_busy",
        "enable_group_busy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
            E(
                "enable_not_reachable_forwarding",
                "enableNotReachableForwarding",
                bool,
                is_required=True,
            ),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E(
                "make_busy_when_not_reachable",
                "makeBusyWhenNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "allow_members_to_control_group_busy",
                "allowMembersToControlGroupBusy",
                bool,
                is_required=True,
            ),
            E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
        )


class GroupHuntGroupGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest19sp1()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID The following elements are only used in HSS data mode:
    allowMembersToControlGroupBusy enableGroupBusy Replaced by:
    ``GroupHuntGroupGetInstanceResponse20()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
        allow_members_to_control_group_busy: allowMembersToControlGroupBusy
        enable_group_busy: enableGroupBusy
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "use_system_hunt_group_clid_setting",
        "include_hunt_group_name_in_clid",
        "enable_not_reachable_forwarding",
        "not_reachable_forward_to_phone_number",
        "make_busy_when_not_reachable",
        "allow_members_to_control_group_busy",
        "enable_group_busy",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
            E(
                "enable_not_reachable_forwarding",
                "enableNotReachableForwarding",
                bool,
                is_required=True,
            ),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E(
                "make_busy_when_not_reachable",
                "makeBusyWhenNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "allow_members_to_control_group_busy",
                "allowMembersToControlGroupBusy",
                bool,
                is_required=True,
            ),
            E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupHuntGroupGetInstanceResponse20(OCIResponse):
    """
    Response to ``GroupHuntGroupGetInstanceRequest20()``.

    Contains the service profile information and a table of assigned users.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", "Weight", "Phone Number", "Extension", "Department", "Email Address". The
    following elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID

    Attributes:
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_table: agentUserTable
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
        allow_members_to_control_group_busy: allowMembersToControlGroupBusy
        enable_group_busy: enableGroupBusy
        apply_group_busy_when_terminating_to_agent: applyGroupBusyWhenTerminatingToAgent
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "policy",
        "hunt_after_no_answer",
        "no_answer_number_of_rings",
        "forward_after_timeout",
        "forward_timeout_seconds",
        "forward_to_phone_number",
        "agent_user_table",
        "allow_call_waiting_for_agents",
        "use_system_hunt_group_clid_setting",
        "include_hunt_group_name_in_clid",
        "enable_not_reachable_forwarding",
        "not_reachable_forward_to_phone_number",
        "make_busy_when_not_reachable",
        "allow_members_to_control_group_busy",
        "enable_group_busy",
        "apply_group_busy_when_terminating_to_agent",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_table",
                "agentUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
            E(
                "enable_not_reachable_forwarding",
                "enableNotReachableForwarding",
                bool,
                is_required=True,
            ),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E(
                "make_busy_when_not_reachable",
                "makeBusyWhenNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "allow_members_to_control_group_busy",
                "allowMembersToControlGroupBusy",
                bool,
                is_required=True,
            ),
            E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
            E(
                "apply_group_busy_when_terminating_to_agent",
                "applyGroupBusyWhenTerminatingToAgent",
                bool,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupIncomingCallingPlanGetListResponse(OCIResponse):
    """
    Response to ``GroupIncomingCallingPlanGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.IncomingCallingPlanPermissions,
                is_complex=True,
                is_required=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.IncomingCallingPlanDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupInstantGroupCallGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupInstantGroupCallGetInstanceRequest14()``.

    Contains the service profile information and a list of phone numbers.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        destination_phone_number: destinationPhoneNumber
        is_answer_timeout_enabled: isAnswerTimeoutEnabled
        answer_timeout_minutes: answerTimeoutMinutes
    """

    __slots__ = [
        "service_instance_profile",
        "destination_phone_number",
        "is_answer_timeout_enabled",
        "answer_timeout_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("destination_phone_number", "destinationPhoneNumber", str, is_array=True),
            E(
                "is_answer_timeout_enabled",
                "isAnswerTimeoutEnabled",
                bool,
                is_required=True,
            ),
            E("answer_timeout_minutes", "answerTimeoutMinutes", int),
        )


class GroupInstantGroupCallGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupInstantGroupCallGetInstanceRequest17()``.

    Contains the service profile information and a list of phone numbers.  Replaced by:
    ``GroupInstantGroupCallGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        destination_phone_number: destinationPhoneNumber
        is_answer_timeout_enabled: isAnswerTimeoutEnabled
        answer_timeout_minutes: answerTimeoutMinutes
    """

    __slots__ = [
        "service_instance_profile",
        "destination_phone_number",
        "is_answer_timeout_enabled",
        "answer_timeout_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("destination_phone_number", "destinationPhoneNumber", str, is_array=True),
            E(
                "is_answer_timeout_enabled",
                "isAnswerTimeoutEnabled",
                bool,
                is_required=True,
            ),
            E("answer_timeout_minutes", "answerTimeoutMinutes", int),
        )


class GroupInstantGroupCallGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupInstantGroupCallGetInstanceRequest19sp1()``.

    Contains the service profile information and a list of phone numbers.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        destination_phone_number: destinationPhoneNumber
        is_answer_timeout_enabled: isAnswerTimeoutEnabled
        answer_timeout_minutes: answerTimeoutMinutes
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "destination_phone_number",
        "is_answer_timeout_enabled",
        "answer_timeout_minutes",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("destination_phone_number", "destinationPhoneNumber", str, is_array=True),
            E(
                "is_answer_timeout_enabled",
                "isAnswerTimeoutEnabled",
                bool,
                is_required=True,
            ),
            E("answer_timeout_minutes", "answerTimeoutMinutes", int),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupMWIDeliveryToMobileEndpointCustomTemplateGetResponse(OCIResponse):
    """
    Response to the ``GroupMWIDeliveryToMobileEndpointCustomTemplateGetRequest()``.


    Attributes:
        is_enabled: isEnabled
        template_body: templateBody
    """

    __slots__ = [
        "is_enabled",
        "template_body",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_enabled", "isEnabled", bool, is_required=True),
            E(
                "template_body",
                "templateBody",
                OCI.MWIDeliveryToMobileEndpointTemplateBody,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupMeetMeConferencingGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", and
    "Hiragana First Name".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_table: conferenceHostUserTable
    """

    __slots__ = [
        "service_instance_profile",
        "allocated_ports",
        "network_class_of_service",
        "allow_individual_out_dial",
        "operator_number",
        "conference_host_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E(
                "conference_host_user_table",
                "conferenceHostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupMeetMeConferencingGetInstanceResponse17sp3(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest17sp3()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", and
    "Hiragana First Name".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_table: conferenceHostUserTable
    """

    __slots__ = [
        "service_instance_profile",
        "allocated_ports",
        "network_class_of_service",
        "allow_individual_out_dial",
        "operator_number",
        "conference_host_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E(
                "conference_host_user_table",
                "conferenceHostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupMeetMeConferencingGetInstanceResponse17sp4(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest17sp4()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", and
    "Hiragana First Name".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_table: conferenceHostUserTable
    """

    __slots__ = [
        "service_instance_profile",
        "allocated_ports",
        "network_class_of_service",
        "allow_individual_out_dial",
        "operator_number",
        "conference_host_user_table",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E(
                "conference_host_user_table",
                "conferenceHostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
        )


class GroupMeetMeConferencingGetInstanceResponse18(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest18()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", Phone Number", "Extension", "Department", "Email Address".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_table: conferenceHostUserTable
        play_warning_prompt: playWarningPrompt
        conference_end_warning_prompt_minutes: conferenceEndWarningPromptMinutes
        enable_max_conference_duration: enableMaxConferenceDuration
        max_conference_duration_minutes: maxConferenceDurationMinutes
    """

    __slots__ = [
        "service_instance_profile",
        "allocated_ports",
        "network_class_of_service",
        "allow_individual_out_dial",
        "operator_number",
        "conference_host_user_table",
        "play_warning_prompt",
        "conference_end_warning_prompt_minutes",
        "enable_max_conference_duration",
        "max_conference_duration_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E(
                "conference_host_user_table",
                "conferenceHostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
            E(
                "conference_end_warning_prompt_minutes",
                "conferenceEndWarningPromptMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_max_conference_duration",
                "enableMaxConferenceDuration",
                bool,
                is_required=True,
            ),
            E(
                "max_conference_duration_minutes",
                "maxConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupMeetMeConferencingGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest19()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", Phone Number", "Extension", "Department", "Email Address". Replaced by:
    ``GroupMeetMeConferencingGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        security_pin_length: securityPinLength
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_table: conferenceHostUserTable
        play_warning_prompt: playWarningPrompt
        conference_end_warning_prompt_minutes: conferenceEndWarningPromptMinutes
        enable_max_conference_duration: enableMaxConferenceDuration
        max_conference_duration_minutes: maxConferenceDurationMinutes
        max_scheduled_conference_duration_minutes: maxScheduledConferenceDurationMinutes
    """

    __slots__ = [
        "service_instance_profile",
        "allocated_ports",
        "network_class_of_service",
        "security_pin_length",
        "allow_individual_out_dial",
        "operator_number",
        "conference_host_user_table",
        "play_warning_prompt",
        "conference_end_warning_prompt_minutes",
        "enable_max_conference_duration",
        "max_conference_duration_minutes",
        "max_scheduled_conference_duration_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17sp4,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E("security_pin_length", "securityPinLength", int, is_required=True),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E(
                "conference_host_user_table",
                "conferenceHostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
            E(
                "conference_end_warning_prompt_minutes",
                "conferenceEndWarningPromptMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_max_conference_duration",
                "enableMaxConferenceDuration",
                bool,
                is_required=True,
            ),
            E(
                "max_conference_duration_minutes",
                "maxConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
            E(
                "max_scheduled_conference_duration_minutes",
                "maxScheduledConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupMeetMeConferencingGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupMeetMeConferencingGetInstanceRequest19sp1()``.

    Contains the service profile information and a table of assigned hosts.  The table has
    column headings: "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana
    First Name", Phone Number", "Extension", "Department", "Email Address".

    Attributes:
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        security_pin_length: securityPinLength
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_table: conferenceHostUserTable
        play_warning_prompt: playWarningPrompt
        conference_end_warning_prompt_minutes: conferenceEndWarningPromptMinutes
        enable_max_conference_duration: enableMaxConferenceDuration
        max_conference_duration_minutes: maxConferenceDurationMinutes
        max_scheduled_conference_duration_minutes: maxScheduledConferenceDurationMinutes
    """

    __slots__ = [
        "service_instance_profile",
        "allocated_ports",
        "network_class_of_service",
        "security_pin_length",
        "allow_individual_out_dial",
        "operator_number",
        "conference_host_user_table",
        "play_warning_prompt",
        "conference_end_warning_prompt_minutes",
        "enable_max_conference_duration",
        "max_conference_duration_minutes",
        "max_scheduled_conference_duration_minutes",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E("security_pin_length", "securityPinLength", int, is_required=True),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E(
                "conference_host_user_table",
                "conferenceHostUserTable",
                list,
                is_complex=True,
                is_required=True,
                is_table=True,
            ),
            E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
            E(
                "conference_end_warning_prompt_minutes",
                "conferenceEndWarningPromptMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_max_conference_duration",
                "enableMaxConferenceDuration",
                bool,
                is_required=True,
            ),
            E(
                "max_conference_duration_minutes",
                "maxConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
            E(
                "max_scheduled_conference_duration_minutes",
                "maxScheduledConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupMusicOnHoldGetInstanceResponse14(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest14()``.


    Attributes:
        service_user_id: serviceUserId
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        message_selection: messageSelection
        access_device_endpoint: accessDeviceEndpoint
        enable_video: enableVideo
        audio_file_description: audioFileDescription
        video_file_description: videoFileDescription
    """

    __slots__ = [
        "service_user_id",
        "is_active_during_call_hold",
        "is_active_during_call_park",
        "message_selection",
        "access_device_endpoint",
        "enable_video",
        "audio_file_description",
        "video_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E("message_selection", "messageSelection", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("video_file_description", "videoFileDescription", str),
        )


class GroupMusicOnHoldGetInstanceResponse14sp4(OCIResponse):
    """
    Response to the ``GroupMusicOnHoldGetInstanceRequest14sp4()``.


    Attributes:
        service_user_id: serviceUserId
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        message_selection: messageSelection
        access_device_endpoint: accessDeviceEndpoint
        enable_video: enableVideo
        audio_file_description: audioFileDescription
        video_file_description: videoFileDescription
    """

    __slots__ = [
        "service_user_id",
        "is_active_during_call_hold",
        "is_active_during_call_park",
        "is_active_during_busy_camp_on",
        "message_selection",
        "access_device_endpoint",
        "enable_video",
        "audio_file_description",
        "video_file_description",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E("message_selection", "messageSelection", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("audio_file_description", "audioFileDescription", str),
            E("video_file_description", "videoFileDescription", str),
        )


class GroupOutgoingCallingPlanAuthorizationCodeGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanAuthorizationCodeGetListRequest()``.


    Attributes:
        group_code_list: groupCodeList
        department_code_list: departmentCodeList
    """

    __slots__ = [
        "group_code_list",
        "department_code_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_code_list",
                "groupCodeList",
                OCI.OutgoingCallingPlanGroupAuthorizationCodes,
                is_complex=True,
                is_required=True,
            ),
            E(
                "department_code_list",
                "departmentCodeList",
                OCI.OutgoingCallingPlanDepartmentAuthorizationCodes,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanCallMeNowGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanCallMeNowGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanCallMeNowPermissions,
                is_complex=True,
                is_required=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanCallMeNowDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanOriginatingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanOriginatingGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanOriginatingPermissions,
                is_complex=True,
                is_required=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanOriginatingDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanRedirectedGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanRedirectedGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanRedirectedPermissions,
                is_complex=True,
                is_required=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanRedirectedDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanRedirectingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanRedirectingGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanRedirectingPermissions,
                is_complex=True,
                is_required=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanRedirectingDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanTransferNumbersGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanTransferNumbersGetListRequest()``.


    Attributes:
        group_numbers: groupNumbers
        department_numbers: departmentNumbers
    """

    __slots__ = [
        "group_numbers",
        "department_numbers",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_numbers",
                "groupNumbers",
                OCI.OutgoingCallingPlanTransferNumbers,
                is_complex=True,
                is_required=True,
            ),
            E(
                "department_numbers",
                "departmentNumbers",
                OCI.OutgoingCallingPlanDepartmentTransferNumbers,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupRoutePointForcedForwardingGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointForcedForwardingGetRequest20()``.


    Attributes:
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "is_active",
        "forward_to_phone_number",
        "play_announcement_before_forwarding",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupRoutePointGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupRoutePointGetInstanceRequest()``.

    Replaced by: ``GroupRoutePointGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        queue_length: queueLength
        no_answer_timeout_rings: noAnswerTimeoutRings
        enable_video: enableVideo
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
    """

    __slots__ = [
        "service_instance_profile",
        "network_class_of_service",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "queue_length",
        "no_answer_timeout_rings",
        "enable_video",
        "play_ringing_when_offering_call",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "enable_automatic_state_change_for_agents",
        "agent_state_after_call",
        "agent_unavailable_code",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E("queue_length", "queueLength", int, is_required=True),
            E("no_answer_timeout_rings", "noAnswerTimeoutRings", int, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
            E(
                "override_agent_wrap_up_time",
                "overrideAgentWrapUpTime",
                bool,
                is_required=True,
            ),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
                is_required=True,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str, is_required=True),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool, is_required=True),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        )


class GroupRoutePointGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupRoutePointGetInstanceRequest19sp1()``.


    Attributes:
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        queue_length: queueLength
        no_answer_timeout_rings: noAnswerTimeoutRings
        enable_video: enableVideo
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
    """

    __slots__ = [
        "service_instance_profile",
        "network_class_of_service",
        "external_preferred_audio_codec",
        "internal_preferred_audio_codec",
        "queue_length",
        "no_answer_timeout_rings",
        "enable_video",
        "play_ringing_when_offering_call",
        "override_agent_wrap_up_time",
        "wrap_up_seconds",
        "enable_automatic_state_change_for_agents",
        "agent_state_after_call",
        "agent_unavailable_code",
        "force_delivery_of_calls",
        "force_delivery_wait_time_seconds",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E("queue_length", "queueLength", int, is_required=True),
            E("no_answer_timeout_rings", "noAnswerTimeoutRings", int, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
            E(
                "override_agent_wrap_up_time",
                "overrideAgentWrapUpTime",
                bool,
                is_required=True,
            ),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
                is_required=True,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str, is_required=True),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool, is_required=True),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        )


class GroupRoutePointHolidayServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointHolidayServiceGetRequest20()``.


    Attributes:
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "action",
        "holiday_schedule",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupRoutePointNightServiceGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointNightServiceGetRequest20()``.


    Attributes:
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    __slots__ = [
        "action",
        "business_hours",
        "force_night_service",
        "transfer_phone_number",
        "play_announcement_before_action",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "manual_announcement_mode",
        "manual_audio_message_selection",
        "manual_audio_url_list",
        "manual_audio_file_list",
        "manual_video_message_selection",
        "manual_video_url_list",
        "manual_video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "play_announcement_before_action",
                "playAnnouncementBeforeAction",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str, is_required=True),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "manual_announcement_mode",
                "manualAnnouncementMode",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_message_selection",
                "manualAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "manual_video_message_selection",
                "manualVideoMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupRoutePointOverflowGetResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointOverflowGetRequest20()``.


    Attributes:
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    __slots__ = [
        "action",
        "transfer_phone_number",
        "overflow_after_timeout",
        "timeout_seconds",
        "play_announcement_before_overflow_processing",
        "audio_message_selection",
        "audio_url_list",
        "audio_file_list",
        "video_message_selection",
        "video_url_list",
        "video_file_list",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("action", "action", str, is_required=True),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool, is_required=True),
            E("timeout_seconds", "timeoutSeconds", int, is_required=True),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
                is_required=True,
            ),
            E("audio_message_selection", "audioMessageSelection", str, is_required=True),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
        )


class GroupScheduleGetListResponse17sp1(OCIResponse):
    """
    Response to ``GroupScheduleGetListRequest17sp1()``.

    The response contains a list of group schedules.  If the group belongs to an
    enterprise, it also contains the schedules for the enterprise.

    Attributes:
        schedule_global_key: scheduleGlobalKey
    """

    __slots__ = [
        "schedule_global_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_global_key",
                "scheduleGlobalKey",
                OCI.ScheduleGlobalKey,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupShInterfaceGetUserListResponse(OCIResponse):
    """
    Response to the ``GroupShInterfaceGetUserListRequest()``.

    The response contains the Sh Non Transparent data and associated Public User Identity
    information for every Public User Identity in the group.

    Attributes:
        entry: entry
    """

    __slots__ = [
        "entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "entry",
                "entry",
                OCI.ShInterfaceUserListEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupTrunkGroupGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest()``.

    The publicUserIdentity in the ServiceInstanceReadProfile is not used for trunk groups.
    Returns the profile information for the Trunk Group.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        access_device_endpoint: accessDeviceEndpoint
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
    """

    __slots__ = [
        "service_instance_profile",
        "access_device_endpoint",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "require_authentication",
        "sip_authentication_user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        )


class GroupTrunkGroupGetInstanceResponse14sp1(OCIResponse):
    """
    Response to ``GroupTrunkGroupGetInstanceRequest14sp1()``.

    The publicUserIdentity in the ServiceInstanceReadProfile is not used for trunk groups.
    Returns the profile information for the Trunk Group.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        access_device_endpoint: accessDeviceEndpoint
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_id: capacityExceededRerouteTrunkGroupId
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_id:
            unreachableDestinationRerouteTrunkGroupId
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
    """

    __slots__ = [
        "service_instance_profile",
        "access_device_endpoint",
        "max_active_calls",
        "max_incoming_calls",
        "max_outgoing_calls",
        "enable_bursting",
        "bursting_max_active_calls",
        "bursting_max_incoming_calls",
        "bursting_max_outgoing_calls",
        "capacity_exceeded_action",
        "capacity_exceeded_forward_address",
        "capacity_exceeded_reroute_trunk_group_id",
        "capacity_exceeded_trap_initial_calls",
        "capacity_exceeded_trap_offset_calls",
        "unreachable_destination_action",
        "unreachable_destination_forward_address",
        "unreachable_destination_reroute_trunk_group_id",
        "unreachable_destination_trap_initial_calls",
        "unreachable_destination_trap_offset_calls",
        "invitation_timeout",
        "require_authentication",
        "sip_authentication_user_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_id",
                "capacityExceededRerouteTrunkGroupId",
                str,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_id",
                "unreachableDestinationRerouteTrunkGroupId",
                str,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
        )


class GroupVoiceMessagingGroupGetVoicePortalResponse14(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest14()``.

    Replaced by ``GroupVoiceMessagingGroupGetVoicePortalResponse15()``

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        is_active: isActive
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        voice_portal_external_routing_scope: voicePortalExternalRoutingScope
        use_external_routing: useExternalRouting
        external_routing_address: externalRoutingAddress
    """

    __slots__ = [
        "service_user_id",
        "service_instance_profile",
        "is_active",
        "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
        "use_voice_portal_wizard",
        "voice_portal_external_routing_scope",
        "use_external_routing",
        "external_routing_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("is_active", "isActive", bool, is_required=True),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
                is_required=True,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
            E(
                "voice_portal_external_routing_scope",
                "voicePortalExternalRoutingScope",
                str,
                is_required=True,
            ),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("external_routing_address", "externalRoutingAddress", str),
        )


class GroupVoiceMessagingGroupGetVoicePortalResponse15(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest15()``.


    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        is_active: isActive
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        voice_portal_external_routing_scope: voicePortalExternalRoutingScope
        use_external_routing: useExternalRouting
        external_routing_address: externalRoutingAddress
        home_zone_name: homeZoneName
    """

    __slots__ = [
        "service_user_id",
        "service_instance_profile",
        "is_active",
        "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
        "use_voice_portal_wizard",
        "voice_portal_external_routing_scope",
        "use_external_routing",
        "external_routing_address",
        "home_zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("is_active", "isActive", bool, is_required=True),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
                is_required=True,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
            E(
                "voice_portal_external_routing_scope",
                "voicePortalExternalRoutingScope",
                str,
                is_required=True,
            ),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("external_routing_address", "externalRoutingAddress", str),
            E("home_zone_name", "homeZoneName", str),
        )


class GroupVoiceMessagingGroupGetVoicePortalResponse17(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest17()``.


    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        is_active: isActive
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        voice_portal_external_routing_scope: voicePortalExternalRoutingScope
        use_external_routing: useExternalRouting
        external_routing_address: externalRoutingAddress
        home_zone_name: homeZoneName
    """

    __slots__ = [
        "service_user_id",
        "service_instance_profile",
        "is_active",
        "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
        "use_voice_portal_wizard",
        "voice_portal_external_routing_scope",
        "use_external_routing",
        "external_routing_address",
        "home_zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("is_active", "isActive", bool, is_required=True),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
                is_required=True,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
            E(
                "voice_portal_external_routing_scope",
                "voicePortalExternalRoutingScope",
                str,
                is_required=True,
            ),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("external_routing_address", "externalRoutingAddress", str),
            E("home_zone_name", "homeZoneName", str),
        )


class GroupVoiceMessagingGroupGetVoicePortalResponse17sp4(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest17sp4()``.

    The following elements are only used in HSS data mode: enableExtendedScope Replaced
    by: ``GroupVoiceMessagingGroupGetVoicePortalResponse19sp1()``

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        is_active: isActive
        enable_extended_scope: enableExtendedScope
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        voice_portal_external_routing_scope: voicePortalExternalRoutingScope
        use_external_routing: useExternalRouting
        external_routing_address: externalRoutingAddress
        home_zone_name: homeZoneName
    """

    __slots__ = [
        "service_user_id",
        "service_instance_profile",
        "is_active",
        "enable_extended_scope",
        "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
        "use_voice_portal_wizard",
        "voice_portal_external_routing_scope",
        "use_external_routing",
        "external_routing_address",
        "home_zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("is_active", "isActive", bool, is_required=True),
            E("enable_extended_scope", "enableExtendedScope", bool, is_required=True),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
                is_required=True,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
            E(
                "voice_portal_external_routing_scope",
                "voicePortalExternalRoutingScope",
                str,
                is_required=True,
            ),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("external_routing_address", "externalRoutingAddress", str),
            E("home_zone_name", "homeZoneName", str),
        )


class GroupVoiceMessagingGroupGetVoicePortalResponse19sp1(OCIResponse):
    """
    Response to the ``GroupVoiceMessagingGroupGetVoicePortalRequest19sp1()``.

    The following elements are only used in HSS data mode: enableExtendedScope

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        is_active: isActive
        enable_extended_scope: enableExtendedScope
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        voice_portal_external_routing_scope: voicePortalExternalRoutingScope
        use_external_routing: useExternalRouting
        external_routing_address: externalRoutingAddress
        home_zone_name: homeZoneName
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_user_id",
        "service_instance_profile",
        "is_active",
        "enable_extended_scope",
        "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
        "use_voice_portal_wizard",
        "voice_portal_external_routing_scope",
        "use_external_routing",
        "external_routing_address",
        "home_zone_name",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("is_active", "isActive", bool, is_required=True),
            E("enable_extended_scope", "enableExtendedScope", bool, is_required=True),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
                is_required=True,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
            E(
                "voice_portal_external_routing_scope",
                "voicePortalExternalRoutingScope",
                str,
                is_required=True,
            ),
            E("use_external_routing", "useExternalRouting", bool, is_required=True),
            E("external_routing_address", "externalRoutingAddress", str),
            E("home_zone_name", "homeZoneName", str),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupVoiceXmlGetInstanceResponse(OCIResponse):
    """
    Response to ``GroupVoiceXmlGetInstanceRequest()``.

    Contains the service profile information and possibly access device information.
    Replaced by: ``GroupVoiceXmlGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        access_device_endpoint: accessDeviceEndpoint
    """

    __slots__ = [
        "service_instance_profile",
        "network_class_of_service",
        "access_device_endpoint",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17sp4,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointWithPortNumberRead,
                is_complex=True,
            ),
        )


class GroupVoiceXmlGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupVoiceXmlGetInstanceRequest19sp1()``.

    Contains the service profile information and possibly access device information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        access_device_endpoint: accessDeviceEndpoint
    """

    __slots__ = [
        "service_instance_profile",
        "network_class_of_service",
        "access_device_endpoint",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointWithPortNumberRead,
                is_complex=True,
            ),
        )


class ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateGetResponse(OCIResponse):
    """
    Response to the
    ``ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateGetRequest()``.


    Attributes:
        is_enabled: isEnabled
        template_body: templateBody
    """

    __slots__ = [
        "is_enabled",
        "template_body",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_enabled", "isEnabled", bool, is_required=True),
            E(
                "template_body",
                "templateBody",
                OCI.MWIDeliveryToMobileEndpointTemplateBody,
                is_complex=True,
                is_required=True,
            ),
        )


class SystemDeviceTypeGetResponse14sp6(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest14sp6()``.

    Replaced by: ``SystemDeviceTypeGetResponse16()``

    Attributes:
        is_obsolete: isObsolete
        profile: profile
        web_based_config_url: webBasedConfigURL
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        is_ip_address_optional: isIpAddressOptional
        use_domain: useDomain
        is_mobility_manager_device: isMobilityManagerDevice
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "web_based_config_url",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "is_ip_address_optional",
        "use_domain",
        "is_mobility_manager_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
            E("use_domain", "useDomain", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
        )


class SystemDeviceTypeGetResponse16(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest16()``.

    Replaced by: ``SystemDeviceTypeGetResponse16sp1()``

    Attributes:
        is_obsolete: isObsolete
        profile: profile
        web_based_config_url: webBasedConfigURL
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        is_ip_address_optional: isIpAddressOptional
        use_domain: useDomain
        is_mobility_manager_device: isMobilityManagerDevice
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "web_based_config_url",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "is_ip_address_optional",
        "use_domain",
        "is_mobility_manager_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
            E("use_domain", "useDomain", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
        )


class SystemDeviceTypeGetResponse16sp1(OCIResponse):
    """
    Replaced By SystemSIPDeviceTypeGetReponse18.

    Response to ``SystemDeviceTypeGetRequest16sp1()``.

    Attributes:
        is_obsolete: isObsolete
        profile: profile
        web_based_config_url: webBasedConfigURL
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        is_ip_address_optional: isIpAddressOptional
        use_domain: useDomain
        is_mobility_manager_device: isMobilityManagerDevice
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "web_based_config_url",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "is_ip_address_optional",
        "use_domain",
        "is_mobility_manager_device",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
            E("use_domain", "useDomain", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
        )


class SystemDeviceTypeGetResponse18(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest18()``.


    Attributes:
        is_obsolete: isObsolete
        profile: profile
        web_based_config_url: webBasedConfigURL
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        is_ip_address_optional: isIpAddressOptional
        use_domain: useDomain
        is_mobility_manager_device: isMobilityManagerDevice
        device_type_configuration_option: deviceTypeConfigurationOption
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "web_based_config_url",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "is_ip_address_optional",
        "use_domain",
        "is_mobility_manager_device",
        "device_type_configuration_option",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
            E("use_domain", "useDomain", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("device_type_configuration_option", "deviceTypeConfigurationOption", str),
        )


class SystemDeviceTypeGetResponse19(OCIResponse):
    """
    Response to ``SystemDeviceTypeGetRequest19()``.


    Attributes:
        is_obsolete: isObsolete
        profile: profile
        web_based_config_url: webBasedConfigURL
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        is_ip_address_optional: isIpAddressOptional
        use_domain: useDomain
        is_mobility_manager_device: isMobilityManagerDevice
        device_type_configuration_option: deviceTypeConfigurationOption
        static_line_ordering: staticLineOrdering
    """

    __slots__ = [
        "is_obsolete",
        "profile",
        "web_based_config_url",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "is_ip_address_optional",
        "use_domain",
        "is_mobility_manager_device",
        "device_type_configuration_option",
        "static_line_ordering",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("is_ip_address_optional", "isIpAddressOptional", bool, is_required=True),
            E("use_domain", "useDomain", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("device_type_configuration_option", "deviceTypeConfigurationOption", str),
            E("static_line_ordering", "staticLineOrdering", bool),
        )


class SystemSIPDeviceTypeGetResponse14sp6(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest14sp6()``.

    Replaced by: ``SystemSIPDeviceTypeGetResponse14sp6()``

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        supports_broad_works_info_for_call_waiting: supportsBroadWorksINFOForCallWaiting
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "tdm_overlay",
        "supports_broad_works_info_for_call_waiting",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E("tdm_overlay", "tdmOverlay", bool, is_required=True),
            E(
                "supports_broad_works_info_for_call_waiting",
                "supportsBroadWorksINFOForCallWaiting",
                bool,
                is_required=True,
            ),
        )


class SystemSIPDeviceTypeGetResponse15(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest15()``.

    Replaced By : ``SystemSIPDeviceTypeAddResponse16()``

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "tdm_overlay",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E("tdm_overlay", "tdmOverlay", bool, is_required=True),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
        )


class SystemSIPDeviceTypeGetResponse16(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest16()``.

    Replaced by: ``SystemSIPDeviceTypeGetResponse16sp1()``

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
        )


class SystemSIPDeviceTypeGetResponse16sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest16sp1()``.


    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "use_business_trunking_contact",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
        )


class SystemSIPDeviceTypeGetResponse17(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest17()``.


    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        )


class SystemSIPDeviceTypeGetResponse17sp4(OCIResponse):
    """
    Replaced By ``SystemSIPDeviceTypeGetResponse18()``.

    Response to ``SystemSIPDeviceTypeGetRequest17sp4()``.

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "support_identity_in_update_and_re_invite",
        "unscreened_presentation_identity_policy",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
        )


class SystemSIPDeviceTypeGetResponse18(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest18()``.

    The following elements are only used in HSS data mode: enable3G4GContinuity Replaced
    by: ``SystemSIPDeviceTypeGetResponse19()``

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "rfc3264_hold",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "support_identity_in_update_and_re_invite",
        "unscreened_presentation_identity_policy",
        "enable3_g4_g_continuity",
        "support_emergency_disconnect_control",
        "device_type_configuration_option",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
        )


class SystemSIPDeviceTypeGetResponse18sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest18sp1()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod The
    following elements are only used in HSS data mode: enable3G4GContinuity The following
    element values are only applicable in AS data mode: holdNormalization=useRfc3264Hold

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "hold_normalization",
        "hold_announcement_method",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "support_identity_in_update_and_re_invite",
        "unscreened_presentation_identity_policy",
        "enable3_g4_g_continuity",
        "support_emergency_disconnect_control",
        "device_type_configuration_option",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
        )


class SystemSIPDeviceTypeGetResponse19(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest19()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 The following elements are only used in HSS data mode:
    enable3G4GContinuity The following element values are only applicable in AS data mode:
    holdNormalization=useRfc3264Hold Replaced by: SystemSIPDeviceTypeGetResponse19sSp1

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "hold_normalization",
        "hold_announcement_method",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "support_identity_in_update_and_re_invite",
        "unscreened_presentation_identity_policy",
        "enable3_g4_g_continuity",
        "support_emergency_disconnect_control",
        "device_type_configuration_option",
        "support_rfc3398",
        "static_line_ordering",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
        )


class SystemSIPDeviceTypeGetResponse19sp1(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest19sp1()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 bypassMediaTreatment The following elements are only used in HSS data
    mode: enable3G4GContinuity The following element values are only applicable in AS data
    mode: holdNormalization=useRfc3264Hold Replaced by:
    ``SystemSIPDeviceTypeGetResponse20()``

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
        bypass_media_treatment: bypassMediaTreatment
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "hold_normalization",
        "hold_announcement_method",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "support_identity_in_update_and_re_invite",
        "unscreened_presentation_identity_policy",
        "enable3_g4_g_continuity",
        "support_emergency_disconnect_control",
        "device_type_configuration_option",
        "support_rfc3398",
        "static_line_ordering",
        "bypass_media_treatment",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
            E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
        )


class SystemSIPDeviceTypeGetResponse20(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest20()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 supportClientSessionInfo supportCallInfoConferenceSubscriptionURI
    supportRemotePartyInfo The following elements are only used in HSS data mode:
    enable3G4GContinuity The following element values are only applicable in AS data mode:
    holdNormalization=useRfc3264Hold

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
        support_client_session_info: supportClientSessionInfo
        support_call_info_conference_subscription_uri:
            supportCallInfoConferenceSubscriptionURI
        support_remote_party_info: supportRemotePartyInfo
        support_visual_device_management: supportVisualDeviceManagement
        bypass_media_treatment: bypassMediaTreatment
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "hold_normalization",
        "hold_announcement_method",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "support_identity_in_update_and_re_invite",
        "unscreened_presentation_identity_policy",
        "enable3_g4_g_continuity",
        "support_emergency_disconnect_control",
        "device_type_configuration_option",
        "support_rfc3398",
        "static_line_ordering",
        "support_client_session_info",
        "support_call_info_conference_subscription_uri",
        "support_remote_party_info",
        "support_visual_device_management",
        "bypass_media_treatment",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
            E(
                "support_client_session_info",
                "supportClientSessionInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_call_info_conference_subscription_uri",
                "supportCallInfoConferenceSubscriptionURI",
                bool,
                is_required=True,
            ),
            E(
                "support_remote_party_info",
                "supportRemotePartyInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_visual_device_management",
                "supportVisualDeviceManagement",
                bool,
                is_required=True,
            ),
            E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
        )


class SystemSIPDeviceTypeGetResponse21(OCIResponse):
    """
    Response to ``SystemSIPDeviceTypeGetRequest21()``.

    The following elements are only used in AS data mode: holdAnnouncementMethod
    supportRFC3398 supportClientSessionInfo supportCallInfoConferenceSubscriptionURI
    supportRemotePartyInfo The following elements are only used in HSS data mode:
    enhancedForICS – value false is returned in AS data mode enable3G4GContinuity - value
    false is returned in AS data mode publishesOwnPresence - value false is returned in AS
    data mode The following element values are only applicable in AS data mode:
    holdNormalization=useRfc3264Hold The following elements are only used in AS data mode:
    supportCauseParameter – value false is returned in HSS data mode

    Attributes:
        is_obsolete: isObsolete
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        protocol_choice: protocolChoice
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enhanced_for_ics: enhancedForICS
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
        support_client_session_info: supportClientSessionInfo
        support_call_info_conference_subscription_uri:
            supportCallInfoConferenceSubscriptionURI
        support_remote_party_info: supportRemotePartyInfo
        support_visual_device_management: supportVisualDeviceManagement
        bypass_media_treatment: bypassMediaTreatment
        supports3_g4_g_continuity: supports3G4GContinuity
        publishes_own_presence: publishesOwnPresence
        support_cause_parameter: supportCauseParameter
    """

    __slots__ = [
        "is_obsolete",
        "number_of_ports",
        "profile",
        "registration_capable",
        "is_conference_device",
        "is_mobility_manager_device",
        "is_music_on_hold_device",
        "hold_normalization",
        "hold_announcement_method",
        "is_trusted",
        "e164_capable",
        "route_advance",
        "forwarding_override",
        "wireless_integration",
        "web_based_config_url",
        "is_video_capable",
        "pbx_integration",
        "static_registration_capable",
        "cpe_device_options",
        "protocol_choice",
        "early_media_support",
        "authenticate_refer",
        "auto_config_soft_client",
        "authentication_mode",
        "requires_broad_works_digit_collection",
        "requires_broad_works_call_waiting_tone",
        "requires_mwi_subscription",
        "use_history_info_header_on_access_side",
        "advice_of_charge_capable",
        "reset_event",
        "support_call_center_mime_type",
        "trunk_mode",
        "add_p_called_party_id",
        "support_identity_in_update_and_re_invite",
        "unscreened_presentation_identity_policy",
        "enhanced_for_ics",
        "support_emergency_disconnect_control",
        "device_type_configuration_option",
        "support_rfc3398",
        "static_line_ordering",
        "support_client_session_info",
        "support_call_info_conference_subscription_uri",
        "support_remote_party_info",
        "support_visual_device_management",
        "bypass_media_treatment",
        "supports3_g4_g_continuity",
        "publishes_own_presence",
        "support_cause_parameter",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_obsolete", "isObsolete", bool, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptionsRead16sp1,
                is_complex=True,
            ),
            E("protocol_choice", "protocolChoice", str, is_required=True, is_array=True),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enhanced_for_ics", "enhancedForICS", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
            E(
                "support_client_session_info",
                "supportClientSessionInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_call_info_conference_subscription_uri",
                "supportCallInfoConferenceSubscriptionURI",
                bool,
                is_required=True,
            ),
            E(
                "support_remote_party_info",
                "supportRemotePartyInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_visual_device_management",
                "supportVisualDeviceManagement",
                bool,
                is_required=True,
            ),
            E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
            E(
                "supports3_g4_g_continuity",
                "supports3G4GContinuity",
                bool,
                is_required=True,
            ),
            E("publishes_own_presence", "publishesOwnPresence", bool, is_required=True),
            E(
                "support_cause_parameter",
                "supportCauseParameter",
                bool,
                is_required=True,
            ),
        )


class UserBroadWorksMobilityMobileIdentityGetResponse(OCIResponse):
    """
    Response to a ``UserBroadWorksMobilityMobileIdentityGetRequest()``.


    Attributes:
        description: description
        is_primary: isPrimary
        enable_alerting: enableAlerting
        alert_agent_calls: alertAgentCalls
        alert_click_to_dial_calls: alertClickToDialCalls
        alert_group_paging_calls: alertGroupPagingCalls
        use_mobility_calling_line_id: useMobilityCallingLineID
        enable_diversion_inhibitor: enableDiversionInhibitor
        require_answer_confirmation: requireAnswerConfirmation
        broadworks_call_control: broadworksCallControl
        use_setting_level: useSettingLevel
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        devices_to_ring: devicesToRing
        include_shared_call_appearance: includeSharedCallAppearance
        include_broadworks_anywhere: includeBroadworksAnywhere
        include_executive_assistant: includeExecutiveAssistant
        mobile_number_alerted: mobileNumberAlerted
        enable_call_anchoring: enableCallAnchoring
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
    """

    __slots__ = [
        "description",
        "is_primary",
        "enable_alerting",
        "alert_agent_calls",
        "alert_click_to_dial_calls",
        "alert_group_paging_calls",
        "use_mobility_calling_line_id",
        "enable_diversion_inhibitor",
        "require_answer_confirmation",
        "broadworks_call_control",
        "use_setting_level",
        "deny_call_originations",
        "deny_call_terminations",
        "devices_to_ring",
        "include_shared_call_appearance",
        "include_broadworks_anywhere",
        "include_executive_assistant",
        "mobile_number_alerted",
        "enable_call_anchoring",
        "time_schedule",
        "holiday_schedule",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E("is_primary", "isPrimary", bool, is_required=True),
            E("enable_alerting", "enableAlerting", bool, is_required=True),
            E("alert_agent_calls", "alertAgentCalls", bool, is_required=True),
            E(
                "alert_click_to_dial_calls",
                "alertClickToDialCalls",
                bool,
                is_required=True,
            ),
            E(
                "alert_group_paging_calls",
                "alertGroupPagingCalls",
                bool,
                is_required=True,
            ),
            E(
                "use_mobility_calling_line_id",
                "useMobilityCallingLineID",
                bool,
                is_required=True,
            ),
            E(
                "enable_diversion_inhibitor",
                "enableDiversionInhibitor",
                bool,
                is_required=True,
            ),
            E(
                "require_answer_confirmation",
                "requireAnswerConfirmation",
                bool,
                is_required=True,
            ),
            E(
                "broadworks_call_control",
                "broadworksCallControl",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E("devices_to_ring", "devicesToRing", str, is_required=True),
            E(
                "include_shared_call_appearance",
                "includeSharedCallAppearance",
                bool,
                is_required=True,
            ),
            E(
                "include_broadworks_anywhere",
                "includeBroadworksAnywhere",
                bool,
                is_required=True,
            ),
            E(
                "include_executive_assistant",
                "includeExecutiveAssistant",
                bool,
                is_required=True,
            ),
            E("mobile_number_alerted", "mobileNumberAlerted", str, is_array=True),
            E("enable_call_anchoring", "enableCallAnchoring", bool, is_required=True),
            E("time_schedule", "timeSchedule", OCI.ScheduleGlobalKey, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.ScheduleGlobalKey,
                is_complex=True,
            ),
        )


class UserCommPilotExpressGetResponse(OCIResponse):
    """
    Response to the ``UserCommPilotExpressGetRequest()``.


    Attributes:
        profile: profile
        available_in_office: availableInOffice
        available_out_of_office: availableOutOfOffice
        busy: busy
        unavailable: unavailable
    """

    __slots__ = [
        "profile",
        "available_in_office",
        "available_out_of_office",
        "busy",
        "unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile", "profile", str),
            E(
                "available_in_office",
                "availableInOffice",
                OCI.CommPilotExpressAvailableInOffice,
                is_complex=True,
                is_required=True,
            ),
            E(
                "available_out_of_office",
                "availableOutOfOffice",
                OCI.CommPilotExpressAvailableOutOfOffice,
                is_complex=True,
                is_required=True,
            ),
            E(
                "busy",
                "busy",
                OCI.CommPilotExpressBusy,
                is_complex=True,
                is_required=True,
            ),
            E(
                "unavailable",
                "unavailable",
                OCI.CommPilotExpressUnavailable,
                is_complex=True,
                is_required=True,
            ),
        )


class UserFlexibleSeatingGuestGetResponse(OCIResponse):
    """
    Response to ``UserFlexibleSeatingGuestGetRequest()``.


    Attributes:
        is_active: isActive
        enable_association_limit: enableAssociationLimit
        association_limit_hours: associationLimitHours
        unlock_phone_pin_code: unlockPhonePINCode
        access_device_endpoint: accessDeviceEndpoint
        host_user_id: hostUserId
        host_last_name: hostLastName
        host_first_name: hostFirstName
        host_association_date_time: hostAssociationDateTime
        host_enforces_association_limit: hostEnforcesAssociationLimit
        host_association_limit_hours: hostAssociationLimitHours
    """

    __slots__ = [
        "is_active",
        "enable_association_limit",
        "association_limit_hours",
        "unlock_phone_pin_code",
        "access_device_endpoint",
        "host_user_id",
        "host_last_name",
        "host_first_name",
        "host_association_date_time",
        "host_enforces_association_limit",
        "host_association_limit_hours",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "enable_association_limit",
                "enableAssociationLimit",
                bool,
                is_required=True,
            ),
            E("association_limit_hours", "associationLimitHours", int, is_required=True),
            E("unlock_phone_pin_code", "unlockPhonePINCode", str),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointRead20,
                is_complex=True,
            ),
            E("host_user_id", "hostUserId", str),
            E("host_last_name", "hostLastName", str),
            E("host_first_name", "hostFirstName", str),
            E("host_association_date_time", "hostAssociationDateTime", str),
            E("host_enforces_association_limit", "hostEnforcesAssociationLimit", bool),
            E("host_association_limit_hours", "hostAssociationLimitHours", int),
        )


class UserGetResponse14(OCIResponse):
    """
    Response to ``UserGetRequest14()``.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.  The
    value is returned exactly the same as being stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_group_device_endpoint: trunkGroupDeviceEndpoint
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_group_device_endpoint",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E(
                "trunk_group_device_endpoint",
                "trunkGroupDeviceEndpoint",
                OCI.TrunkGroupDeviceEndpointRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


class UserGetResponse14sp4(OCIResponse):
    """
    Response to ``UserGetRequest14sp4()``.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.  The
    value is returned exactly the same as being stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_group_device_endpoint: trunkGroupDeviceEndpoint
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_group_device_endpoint",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E(
                "trunk_group_device_endpoint",
                "trunkGroupDeviceEndpoint",
                OCI.TrunkGroupDeviceEndpointRead14sp4,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str),
            E("national_prefix", "nationalPrefix", str),
        )


class UserGetResponse14sp9(OCIResponse):
    """
    Response to ``UserGetRequest14sp9()``.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.  The
    value is returned exactly the same as being stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str),
            E("national_prefix", "nationalPrefix", str),
        )


class UserGetResponse15sp2(OCIResponse):
    """
    Response to ``UserGetRequest15sp2()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The callingLineIdPhoneNumber is no longer
    being formatted for display purpose.  The value is returned exactly the same as being
    stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
        )


class UserGetResponse17(OCIResponse):
    """
    Replaced By ``UserGetResponse17sp4()`` Response to ``UserGetRequest17()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The callingLineIdPhoneNumber is no longer
    being formatted for display purpose.  The value is returned exactly the same as being
    stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "office_zone_name",
        "primary_zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
        )


class UserGetResponse17sp3(OCIResponse):
    """
    Replaced By ``UserGetRequest18()`` Response to ``UserGetRequest17sp3()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The callingLineIdPhoneNumber is no longer
    being formatted for display purpose.  The value is returned exactly the same as being
    stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
        imp_id: impId
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "office_zone_name",
        "primary_zone_name",
        "imp_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
            E("imp_id", "impId", str),
        )


class UserGetResponse17sp4(OCIResponse):
    """
    Replaced By ``UserGetResponse18()`` Response to ``UserGetRequest17sp4()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "office_zone_name",
        "primary_zone_name",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointRead,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingMultipleContactRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str, is_required=True),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
        )


class UserGetResponse18(OCIResponse):
    """
    Response to ``UserGetRequest18()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
        imp_id: impId
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "office_zone_name",
        "primary_zone_name",
        "imp_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointRead,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingMultipleContactRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str, is_required=True),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
            E("imp_id", "impId", str),
        )


class UserGetResponse19(OCIResponse):
    """
    Response to ``UserGetRequest19()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
        imp_id: impId
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "office_zone_name",
        "primary_zone_name",
        "imp_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointRead19,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingMultipleContactRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str, is_required=True),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
            E("imp_id", "impId", str),
        )


class UserGetResponse20(OCIResponse):
    """
    Response to ``UserGetRequest20()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The country code (countryCode) included is the
    user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        name_dialing_name: nameDialingName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
        imp_id: impId
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "name_dialing_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "office_zone_name",
        "primary_zone_name",
        "imp_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E(
                "name_dialing_name",
                "nameDialingName",
                OCI.NameDialingName,
                is_complex=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointRead20,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingMultipleContactRead,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str, is_required=True),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
            E("imp_id", "impId", str),
        )


class UserGetResponse21(OCIResponse):
    """
    Response to ``UserGetRequest21()``.

    It is possible that the TrunkAddressingRead element is present with nothing populated
    in it which means the user is a trunk user.  The following data elements are only used
    in AS data mode: contact[2]-contact[5] The following data elements are only used in
    IMS data mode: alternateTrunkIdentityDomain The country code (countryCode) included is
    the user's phone number country code when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the user's Group does not have an
    associated country code.  The nationalPrefix in this response is the one associated to
    the included countryCode.  The callingLineIdPhoneNumber is no longer being formatted
    for display purpose.  The value is returned exactly the same as being stored.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        name_dialing_name: nameDialingName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        department: department
        department_full_path: departmentFullPath
        language: language
        time_zone: timeZone
        time_zone_display_name: timeZoneDisplayName
        default_alias: defaultAlias
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        country_code: countryCode
        national_prefix: nationalPrefix
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
        imp_id: impId
    """

    __slots__ = [
        "service_provider_id",
        "group_id",
        "last_name",
        "first_name",
        "calling_line_id_last_name",
        "calling_line_id_first_name",
        "name_dialing_name",
        "hiragana_last_name",
        "hiragana_first_name",
        "phone_number",
        "extension",
        "calling_line_id_phone_number",
        "department",
        "department_full_path",
        "language",
        "time_zone",
        "time_zone_display_name",
        "default_alias",
        "alias",
        "access_device_endpoint",
        "trunk_addressing",
        "title",
        "pager_phone_number",
        "mobile_phone_number",
        "email_address",
        "yahoo_id",
        "address_location",
        "address",
        "country_code",
        "national_prefix",
        "network_class_of_service",
        "office_zone_name",
        "primary_zone_name",
        "imp_id",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E(
                "name_dialing_name",
                "nameDialingName",
                OCI.NameDialingName,
                is_complex=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("department_full_path", "departmentFullPath", str),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("time_zone_display_name", "timeZoneDisplayName", str, is_required=True),
            E("default_alias", "defaultAlias", str, is_required=True),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleIdentityAndContactEndpointRead,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingMultipleContactRead21,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("country_code", "countryCode", str, is_required=True),
            E("national_prefix", "nationalPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
            E("imp_id", "impId", str),
        )


class UserIncomingCallingPlanGetResponse(OCIResponse):
    """
    Response to ``UserIncomingCallingPlanGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.IncomingCallingPlanPermissions,
                is_complex=True,
                is_required=True,
            ),
        )


class UserOutgoingCallingPlanDigitPlanCallMeNowGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanDigitPlanCallMeNowGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
        )


class UserOutgoingCallingPlanDigitPlanOriginatingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanDigitPlanOriginatingGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
        )


class UserOutgoingCallingPlanDigitPlanRedirectingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanDigitPlanRedirectingGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
        )


class UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
        )


class UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
        )


class UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetResponse(OCIResponse):
    """
    Response to ``UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetRequest()``.


    Attributes:
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    __slots__ = [
        "use_custom_settings",
        "user_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_custom_settings", "useCustomSettings", bool, is_required=True),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
        )


class UserScheduleGetEventDetailListResponse(OCIResponse):
    """
    Response to ``UserScheduleGetEventRequest()``.

    The response contains collection of event details of a requested schedule.

    Attributes:
        schedule_events: scheduleEvents
    """

    __slots__ = [
        "schedule_events",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_events",
                "scheduleEvents",
                OCI.ScheduleEvents,
                is_complex=True,
                is_array=True,
            ),
        )


class UserScheduleGetListResponse17sp1(OCIResponse):
    """
    Response to ``UserScheduleGetListRequest17sp1()``.

    The response contains a list of schedules viewable by the user.  It contains the
    schedules defined for the user and the group the user belongs to.  If the user belongs
    to an enterprise, the list also contains the schedules defined for the enterprise.

    Attributes:
        schedule_global_key: scheduleGlobalKey
    """

    __slots__ = [
        "schedule_global_key",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_global_key",
                "scheduleGlobalKey",
                OCI.ScheduleGlobalKey,
                is_complex=True,
                is_array=True,
            ),
        )


class UserShInterfaceGetUserIdDataResponse(OCIResponse):
    """
    Response to the ``UserShInterfaceGetUserIdDataRequest()``.

    The response contains the Sh non-transparent data for the specified userId.  The data
    also includes a userType, publicUserIdentity and endpointType.

    Attributes:
        entry: entry
    """

    __slots__ = [
        "entry",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "entry",
                "entry",
                OCI.ShInterfaceUserIdDataEntry,
                is_complex=True,
                is_array=True,
            ),
        )


class UserVideoAddOnGetResponse14(OCIResponse):
    """
    Response to the ``UserVideoAddOnGetRequest14()``.


    Attributes:
        is_active: isActive
        max_originating_call_delay_seconds: maxOriginatingCallDelaySeconds
        access_device_endpoint: accessDeviceEndpoint
    """

    __slots__ = [
        "is_active",
        "max_originating_call_delay_seconds",
        "access_device_endpoint",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "max_originating_call_delay_seconds",
                "maxOriginatingCallDelaySeconds",
                int,
                is_required=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointRead14,
                is_complex=True,
            ),
        )


class UserVideoAddOnGetResponse19(OCIResponse):
    """
    Response to the ``UserVideoAddOnGetRequest19()``.


    Attributes:
        is_active: isActive
        max_originating_call_delay_seconds: maxOriginatingCallDelaySeconds
        access_device_endpoint: accessDeviceEndpoint
    """

    __slots__ = [
        "is_active",
        "max_originating_call_delay_seconds",
        "access_device_endpoint",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool, is_required=True),
            E(
                "max_originating_call_delay_seconds",
                "maxOriginatingCallDelaySeconds",
                int,
                is_required=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointWithPortNumberRead,
                is_complex=True,
            ),
        )


class UserVoiceMessagingUserGetGreetingResponse20(OCIResponse):
    """
    Response to ``UserVoiceMessagingUserGetGreetingRequest18sp1()``.

    Contains the greeting configuration for a user's voice messaging.  The following
    elements are only used in AS data mode: disableMessageDeposit
    disableMessageDepositAction greetingOnlyForwardDestination extendedAwayEnabled
    extendedAwayDisableMessageDeposit extendedAwayAudioFile extendedAwayAudioMediaType
    extendedAwayVideoFile extendedAwayVideoMediaTyp

    Attributes:
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_video_file: busyPersonalVideoFile
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        extended_away_enabled: extendedAwayEnabled
        extended_away_disable_message_deposit: extendedAwayDisableMessageDeposit
        extended_away_audio_file: extendedAwayAudioFile
        extended_away_video_file: extendedAwayVideoFile
        no_answer_number_of_rings: noAnswerNumberOfRings
        disable_message_deposit: disableMessageDeposit
        disable_message_deposit_action: disableMessageDepositAction
        greeting_only_forward_destination: greetingOnlyForwardDestination
    """

    __slots__ = [
        "busy_announcement_selection",
        "busy_personal_audio_file",
        "busy_personal_video_file",
        "no_answer_announcement_selection",
        "no_answer_personal_audio_file",
        "no_answer_personal_video_file",
        "no_answer_alternate_greeting01",
        "no_answer_alternate_greeting02",
        "no_answer_alternate_greeting03",
        "extended_away_enabled",
        "extended_away_disable_message_deposit",
        "extended_away_audio_file",
        "extended_away_video_file",
        "no_answer_number_of_rings",
        "disable_message_deposit",
        "disable_message_deposit_action",
        "greeting_only_forward_destination",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "busy_announcement_selection",
                "busyAnnouncementSelection",
                str,
                is_required=True,
            ),
            E(
                "busy_personal_audio_file",
                "busyPersonalAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "busy_personal_video_file",
                "busyPersonalVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "no_answer_announcement_selection",
                "noAnswerAnnouncementSelection",
                str,
                is_required=True,
            ),
            E(
                "no_answer_personal_audio_file",
                "noAnswerPersonalAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "no_answer_personal_video_file",
                "noAnswerPersonalVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead20,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead20,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingRead20,
                is_complex=True,
            ),
            E("extended_away_enabled", "extendedAwayEnabled", bool, is_required=True),
            E(
                "extended_away_disable_message_deposit",
                "extendedAwayDisableMessageDeposit",
                bool,
                is_required=True,
            ),
            E(
                "extended_away_audio_file",
                "extendedAwayAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "extended_away_video_file",
                "extendedAwayVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E(
                "disable_message_deposit",
                "disableMessageDeposit",
                bool,
                is_required=True,
            ),
            E(
                "disable_message_deposit_action",
                "disableMessageDepositAction",
                str,
                is_required=True,
            ),
            E(
                "greeting_only_forward_destination",
                "greetingOnlyForwardDestination",
                str,
            ),
        )


class EnterpriseCallCenterEnhancedReportingScheduledReportGetResponse(OCIResponse):
    """
    Response to ``EnterpriseCallCenterEnhancedReportingScheduledReportGetRequest()``.


    Attributes:
        description: description
        report_template: reportTemplate
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    __slots__ = [
        "description",
        "report_template",
        "schedule",
        "sampling_period",
        "start_day_of_week",
        "report_time_zone",
        "report_date_format",
        "report_time_format",
        "report_interval",
        "report_format",
        "agent",
        "call_center",
        "dnis",
        "call_completion_threshold_seconds",
        "short_duration_threshold_seconds",
        "service_level_threshold_seconds",
        "service_level_inclusions",
        "service_level_objective_percentage",
        "abandoned_call_threshold_seconds",
        "email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "report_template",
                "reportTemplate",
                OCI.CallCenterReportTemplateKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "schedule",
                "schedule",
                OCI.CallCenterReportSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str, is_required=True),
            E("report_date_format", "reportDateFormat", str, is_required=True),
            E("report_time_format", "reportTimeFormat", str, is_required=True),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
                is_required=True,
            ),
            E("report_format", "reportFormat", str, is_required=True),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelectionAdminRead,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelectionRead,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelectionRead,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                int,
                is_array=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusions,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                int,
                is_array=True,
            ),
            E("email_address", "emailAddress", str, is_required=True, is_array=True),
        )


class GroupAutoAttendantGetInstanceResponse19(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest19()``.

    Contains the service profile information.  The following elements are only used in AS
    data mode: type, use AutoAttendantType.BASIC in HSS mode.  holidayMenu.  The following
    elementsare only valid for Standard Auto Attendants: holidayMenu Replaced by:
    ``GroupAutoAttendantGetInstanceResponse19sp1()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
        holiday_menu: holidayMenu
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "enable_video",
        "business_hours",
        "holiday_schedule",
        "extension_dialing_scope",
        "name_dialing_scope",
        "name_dialing_entries",
        "business_hours_menu",
        "after_hours_menu",
        "holiday_menu",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantReadMenu19,
                is_complex=True,
                is_required=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantReadMenu19,
                is_complex=True,
                is_required=True,
            ),
            E(
                "holiday_menu",
                "holidayMenu",
                OCI.AutoAttendantReadMenu19,
                is_complex=True,
            ),
        )


class GroupAutoAttendantGetInstanceResponse19sp1(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest19sp1()``.

    Contains the service profile information.  The following elements are only used in AS
    data mode: type, use AutoAttendantType.BASIC in HSS mode.  holidayMenu.  The following
    elementsare only valid for Standard Auto Attendants: holidayMenu Replaced by:
    ``GroupAutoAttendantGetInstanceResponse20()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
        holiday_menu: holidayMenu
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "enable_video",
        "business_hours",
        "holiday_schedule",
        "extension_dialing_scope",
        "name_dialing_scope",
        "name_dialing_entries",
        "business_hours_menu",
        "after_hours_menu",
        "holiday_menu",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantReadMenu19,
                is_complex=True,
                is_required=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantReadMenu19,
                is_complex=True,
                is_required=True,
            ),
            E(
                "holiday_menu",
                "holidayMenu",
                OCI.AutoAttendantReadMenu19,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


class GroupAutoAttendantSubmenuGetResponse20(OCIResponse):
    """
    Response to ``GroupAutoAttendantSubmenuGetRequest20()``.

    Contains AutoAttendant submenu information.

    Attributes:
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        enable_level_extension_dialing: enableLevelExtensionDialing
        key_configuration: keyConfiguration
    """

    __slots__ = [
        "announcement_selection",
        "audio_file",
        "video_file",
        "enable_level_extension_dialing",
        "key_configuration",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E(
                "enable_level_extension_dialing",
                "enableLevelExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "key_configuration",
                "keyConfiguration",
                OCI.AutoAttendantKeyReadConfiguration20,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupCallCenterEnhancedReportingScheduledReportGetResponse(OCIResponse):
    """
    Response to ``GroupCallCenterEnhancedReportingScheduledReportGetRequest()``.


    Attributes:
        description: description
        report_template: reportTemplate
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    __slots__ = [
        "description",
        "report_template",
        "schedule",
        "sampling_period",
        "start_day_of_week",
        "report_time_zone",
        "report_date_format",
        "report_time_format",
        "report_interval",
        "report_format",
        "agent",
        "call_center",
        "dnis",
        "call_completion_threshold_seconds",
        "short_duration_threshold_seconds",
        "service_level_threshold_seconds",
        "service_level_inclusions",
        "service_level_objective_percentage",
        "abandoned_call_threshold_seconds",
        "email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "report_template",
                "reportTemplate",
                OCI.CallCenterReportTemplateKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "schedule",
                "schedule",
                OCI.CallCenterReportSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str, is_required=True),
            E("report_date_format", "reportDateFormat", str, is_required=True),
            E("report_time_format", "reportTimeFormat", str, is_required=True),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
                is_required=True,
            ),
            E("report_format", "reportFormat", str, is_required=True),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelectionAdminRead,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelectionRead,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelectionRead,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                int,
                is_array=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusions,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                int,
                is_array=True,
            ),
            E("email_address", "emailAddress", str, is_required=True, is_array=True),
        )


class GroupCallCenterGetAnnouncementResponse16(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest16()``.


    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_audio_file_url: entranceAudioFileUrl
        entrance_message_audio_file_description: entranceMessageAudioFileDescription
        entrance_audio_file_media_type: entranceAudioFileMediaType
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_video_file_url: entranceVideoFileUrl
        entrance_message_video_file_description: entranceMessageVideoFileDescription
        entrance_video_file_media_type: entranceVideoFileMediaType
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_audio_file_url: periodicComfortAudioFileUrl
        periodic_comfort_message_audio_file_description:
            periodicComfortMessageAudioFileDescription
        periodic_comfort_audio_file_media_type: periodicComfortAudioFileMediaType
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_video_file_url: periodicComfortVideoFileUrl
        periodic_comfort_message_video_file_description:
            periodicComfortMessageVideoFileDescription
        periodic_comfort_video_file_media_type: periodicComfortVideoFileMediaType
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_audio_file_url",
        "entrance_message_audio_file_description",
        "entrance_audio_file_media_type",
        "entrance_video_message_selection",
        "entrance_video_file_url",
        "entrance_message_video_file_description",
        "entrance_video_file_media_type",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_audio_file_url",
        "periodic_comfort_message_audio_file_description",
        "periodic_comfort_audio_file_media_type",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_video_file_url",
        "periodic_comfort_message_video_file_description",
        "periodic_comfort_video_file_media_type",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "media_on_hold_use_alternate_source_for_internal_calls",
        "media_on_hold_internal_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E("entrance_audio_file_url", "entranceAudioFileUrl", str),
            E(
                "entrance_message_audio_file_description",
                "entranceMessageAudioFileDescription",
                str,
            ),
            E("entrance_audio_file_media_type", "entranceAudioFileMediaType", str),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E("entrance_video_file_url", "entranceVideoFileUrl", str),
            E(
                "entrance_message_video_file_description",
                "entranceMessageVideoFileDescription",
                str,
            ),
            E("entrance_video_file_media_type", "entranceVideoFileMediaType", str),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E("periodic_comfort_audio_file_url", "periodicComfortAudioFileUrl", str),
            E(
                "periodic_comfort_message_audio_file_description",
                "periodicComfortMessageAudioFileDescription",
                str,
            ),
            E(
                "periodic_comfort_audio_file_media_type",
                "periodicComfortAudioFileMediaType",
                str,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E("periodic_comfort_video_file_url", "periodicComfortVideoFileUrl", str),
            E(
                "periodic_comfort_message_video_file_description",
                "periodicComfortMessageVideoFileDescription",
                str,
            ),
            E(
                "periodic_comfort_video_file_media_type",
                "periodicComfortVideoFileMediaType",
                str,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead16,
                is_complex=True,
                is_required=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceRead16,
                is_complex=True,
            ),
        )


class GroupCallCenterGetAnnouncementResponse17(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest17()``.

    Replaced by ``GroupCallCenterGetAnnouncementResponse17sp4()``

    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_message_audio_media_type_list: entranceMessageAudioMediaTypeList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        entrance_message_video_media_type_list: entranceMessageVideoMediaTypeList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_message_audio_media_type_list:
            periodicComfortMessageAudioMediaTypeList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        periodic_comfort_message_video_media_type_list:
            periodicComfortMessageVideoMediaTypeList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_message_audio_media_type_list: whisperMessageAudioMediaTypeList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        whisper_message_video_media_type_list: whisperMessageVideoMediaTypeList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_message_audio_media_type_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "entrance_message_video_media_type_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_message_audio_media_type_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "periodic_comfort_message_video_media_type_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "media_on_hold_use_alternate_source_for_internal_calls",
        "media_on_hold_internal_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_message_audio_media_type_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "whisper_message_video_media_type_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_media_type_list",
                "entranceMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_media_type_list",
                "entranceMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_media_type_list",
                "periodicComfortMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_media_type_list",
                "periodicComfortMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
                is_required=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_media_type_list",
                "whisperMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_media_type_list",
                "whisperMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupCallCenterGetAnnouncementResponse17sp4(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest17sp4()``.


    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_message_audio_media_type_list: entranceMessageAudioMediaTypeList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        entrance_message_video_media_type_list: entranceMessageVideoMediaTypeList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_message_audio_media_type_list:
            periodicComfortMessageAudioMediaTypeList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        periodic_comfort_message_video_media_type_list:
            periodicComfortMessageVideoMediaTypeList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_message_audio_media_type_list: whisperMessageAudioMediaTypeList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        whisper_message_video_media_type_list: whisperMessageVideoMediaTypeList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_message_audio_media_type_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "entrance_message_video_media_type_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_message_audio_media_type_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "periodic_comfort_message_video_media_type_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "media_on_hold_use_alternate_source_for_internal_calls",
        "media_on_hold_internal_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_message_audio_media_type_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "whisper_message_video_media_type_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_media_type_list",
                "entranceMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_media_type_list",
                "entranceMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_media_type_list",
                "periodicComfortMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_media_type_list",
                "periodicComfortMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
                is_required=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_media_type_list",
                "whisperMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_media_type_list",
                "whisperMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead17sp4,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupCallCenterGetAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest19()``.


    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_message_audio_media_type_list: entranceMessageAudioMediaTypeList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        entrance_message_video_media_type_list: entranceMessageVideoMediaTypeList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_message_audio_media_type_list:
            periodicComfortMessageAudioMediaTypeList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        periodic_comfort_message_video_media_type_list:
            periodicComfortMessageVideoMediaTypeList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_message_audio_media_type_list: whisperMessageAudioMediaTypeList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        whisper_message_video_media_type_list: whisperMessageVideoMediaTypeList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_message_audio_media_type_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "entrance_message_video_media_type_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_message_audio_media_type_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "periodic_comfort_message_video_media_type_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "media_on_hold_use_alternate_source_for_internal_calls",
        "media_on_hold_internal_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_message_audio_media_type_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "whisper_message_video_media_type_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_media_type_list",
                "entranceMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_media_type_list",
                "entranceMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_media_type_list",
                "periodicComfortMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_media_type_list",
                "periodicComfortMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead19,
                is_complex=True,
                is_required=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceRead19,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_media_type_list",
                "whisperMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_media_type_list",
                "whisperMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead17sp4,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupCallCenterGetAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterGetAnnouncementRequest20()``.


    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "media_on_hold_use_alternate_source_for_internal_calls",
        "media_on_hold_internal_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead20,
                is_complex=True,
                is_required=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceRead20,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead17sp4,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupCallCenterGetDNISAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementResponse()``.

    Replaced by ``GroupCallCenterGetDNISAnnouncementResponse17sp4()``

    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_message_audio_media_type_list: entranceMessageAudioMediaTypeList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        entrance_message_video_media_type_list: entranceMessageVideoMediaTypeList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_message_audio_media_type_list:
            periodicComfortMessageAudioMediaTypeList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        periodic_comfort_message_video_media_type_list:
            periodicComfortMessageVideoMediaTypeList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_message_audio_media_type_list: whisperMessageAudioMediaTypeList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        whisper_message_video_media_type_list: whisperMessageVideoMediaTypeList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_message_audio_media_type_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "entrance_message_video_media_type_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_message_audio_media_type_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "periodic_comfort_message_video_media_type_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_message_audio_media_type_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "whisper_message_video_media_type_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_media_type_list",
                "entranceMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_media_type_list",
                "entranceMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_media_type_list",
                "periodicComfortMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_media_type_list",
                "periodicComfortMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
                is_required=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
            E(
                "whisper_audio_message_selection",
                "whisperAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_media_type_list",
                "whisperMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_media_type_list",
                "whisperMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupCallCenterGetDNISAnnouncementResponse17sp4(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementResponse17sp4()``.


    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_message_audio_media_type_list: entranceMessageAudioMediaTypeList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        entrance_message_video_media_type_list: entranceMessageVideoMediaTypeList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_message_audio_media_type_list:
            periodicComfortMessageAudioMediaTypeList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        periodic_comfort_message_video_media_type_list:
            periodicComfortMessageVideoMediaTypeList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_message_audio_media_type_list: whisperMessageAudioMediaTypeList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        whisper_message_video_media_type_list: whisperMessageVideoMediaTypeList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_message_audio_media_type_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "entrance_message_video_media_type_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_message_audio_media_type_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "periodic_comfort_message_video_media_type_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_message_audio_media_type_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "whisper_message_video_media_type_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_media_type_list",
                "entranceMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_media_type_list",
                "entranceMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_media_type_list",
                "periodicComfortMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_media_type_list",
                "periodicComfortMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
                is_required=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
            E(
                "whisper_audio_message_selection",
                "whisperAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_media_type_list",
                "whisperMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_media_type_list",
                "whisperMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead17sp4,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupCallCenterGetDNISAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementRequest19()``.


    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_message_audio_media_type_list: entranceMessageAudioMediaTypeList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        entrance_message_video_media_type_list: entranceMessageVideoMediaTypeList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_message_audio_media_type_list:
            periodicComfortMessageAudioMediaTypeList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        periodic_comfort_message_video_media_type_list:
            periodicComfortMessageVideoMediaTypeList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_message_audio_media_type_list: whisperMessageAudioMediaTypeList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        whisper_message_video_media_type_list: whisperMessageVideoMediaTypeList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_message_audio_media_type_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "entrance_message_video_media_type_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_message_audio_media_type_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "periodic_comfort_message_video_media_type_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_message_audio_media_type_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "whisper_message_video_media_type_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_media_type_list",
                "entranceMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_media_type_list",
                "entranceMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_media_type_list",
                "periodicComfortMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_media_type_list",
                "periodicComfortMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead19,
                is_complex=True,
                is_required=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
            E(
                "whisper_audio_message_selection",
                "whisperAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_media_type_list",
                "whisperMessageAudioMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementDescriptionList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_media_type_list",
                "whisperMessageVideoMediaTypeList",
                OCI.CallCenterAnnouncementMediaFileTypeList,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead17sp4,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupCallCenterGetDNISAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupCallCenterGetDNISAnnouncementRequest20()``.


    Attributes:
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        estimated_wait_message_options_read: estimatedWaitMessageOptionsRead
    """

    __slots__ = [
        "play_entrance_message",
        "mandatory_entrance_message",
        "entrance_audio_message_selection",
        "entrance_message_audio_url_list",
        "entrance_message_audio_file_list",
        "entrance_video_message_selection",
        "entrance_message_video_url_list",
        "entrance_message_video_file_list",
        "play_periodic_comfort_message",
        "time_between_comfort_messages_seconds",
        "periodic_comfort_audio_message_selection",
        "periodic_comfort_message_audio_url_list",
        "periodic_comfort_message_audio_file_list",
        "periodic_comfort_video_message_selection",
        "periodic_comfort_message_video_url_list",
        "periodic_comfort_message_video_file_list",
        "enable_media_on_hold_for_queued_calls",
        "media_on_hold_source",
        "play_whisper_message",
        "whisper_audio_message_selection",
        "whisper_message_audio_url_list",
        "whisper_message_audio_file_list",
        "whisper_video_message_selection",
        "whisper_message_video_url_list",
        "whisper_message_video_file_list",
        "estimated_wait_message_options_read",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_entrance_message", "playEntranceMessage", bool, is_required=True),
            E(
                "mandatory_entrance_message",
                "mandatoryEntranceMessage",
                bool,
                is_required=True,
            ),
            E(
                "entrance_audio_message_selection",
                "entranceAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "play_periodic_comfort_message",
                "playPeriodicComfortMessage",
                bool,
                is_required=True,
            ),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
                is_required=True,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead20,
                is_complex=True,
                is_required=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool, is_required=True),
            E(
                "whisper_audio_message_selection",
                "whisperAudioMessageSelection",
                str,
                is_required=True,
            ),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLList,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListRead20,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_read",
                "estimatedWaitMessageOptionsRead",
                OCI.EstimatedWaitMessageOptionsRead17sp4,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupOutgoingCallingPlanDigitPlanCallMeNowGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDigitPlanCallMeNowGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanDigitPatternCallMeNowDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanDigitPlanOriginatingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDigitPlanOriginatingGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanDigitPatternOriginatingDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanDigitPlanRedirectingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanDigitPlanRedirectingGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanDigitPatternRedirectingDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListResponse(OCIResponse):
    """
    Response to ``GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListRequest()``.


    Attributes:
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    __slots__ = [
        "group_permissions",
        "department_permissions",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingDepartmentPermissions,
                is_complex=True,
                is_array=True,
            ),
        )


class GroupRoutePointGetAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetAnnouncementRequest()``.


    Attributes:
        media_on_hold_source: mediaOnHoldSource
    """

    __slots__ = [
        "media_on_hold_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupRoutePointGetAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupRoutePointGetAnnouncementRequest19()``.


    Attributes:
        media_on_hold_source: mediaOnHoldSource
    """

    __slots__ = [
        "media_on_hold_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead19,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupRoutePointGetAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointGetAnnouncementRequest20()``.


    Attributes:
        media_on_hold_source: mediaOnHoldSource
    """

    __slots__ = [
        "media_on_hold_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead20,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupRoutePointGetDNISAnnouncementResponse(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAnnouncementRequest()``.


    Attributes:
        media_on_hold_source: mediaOnHoldSource
    """

    __slots__ = [
        "media_on_hold_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead17,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupRoutePointGetDNISAnnouncementResponse19(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAnnouncementRequest19()``.


    Attributes:
        media_on_hold_source: mediaOnHoldSource
    """

    __slots__ = [
        "media_on_hold_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead19,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupRoutePointGetDNISAnnouncementResponse20(OCIResponse):
    """
    Response to the ``GroupRoutePointGetDNISAnnouncementRequest20()``.


    Attributes:
        media_on_hold_source: mediaOnHoldSource
    """

    __slots__ = [
        "media_on_hold_source",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceRead20,
                is_complex=True,
                is_required=True,
            ),
        )


class UserCallCenterEnhancedReportingScheduledReportGetResponse(OCIResponse):
    """
    Response to ``UserCallCenterEnhancedReportingScheduledReportGetRequest()``.


    Attributes:
        description: description
        report_template: reportTemplate
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    __slots__ = [
        "description",
        "report_template",
        "schedule",
        "sampling_period",
        "start_day_of_week",
        "report_time_zone",
        "report_date_format",
        "report_time_format",
        "report_interval",
        "report_format",
        "agent",
        "call_center",
        "dnis",
        "call_completion_threshold_seconds",
        "short_duration_threshold_seconds",
        "service_level_threshold_seconds",
        "service_level_inclusions",
        "service_level_objective_percentage",
        "abandoned_call_threshold_seconds",
        "email_address",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("description", "description", str),
            E(
                "report_template",
                "reportTemplate",
                OCI.CallCenterReportTemplateKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "schedule",
                "schedule",
                OCI.CallCenterReportSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str, is_required=True),
            E("report_date_format", "reportDateFormat", str, is_required=True),
            E("report_time_format", "reportTimeFormat", str, is_required=True),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
                is_required=True,
            ),
            E("report_format", "reportFormat", str, is_required=True),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelectionRead,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelection,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelection,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                int,
                is_array=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusions,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                int,
                is_array=True,
            ),
            E("email_address", "emailAddress", str, is_required=True, is_array=True),
        )


class GroupAutoAttendantGetInstanceResponse14(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest14()``.

    Contains the service profile information.

    Replaced By: ``GroupAutoAttendantGetInstanceResponse16()``

    Attributes:
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule_name: holidayScheduleName
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    __slots__ = [
        "service_instance_profile",
        "enable_video",
        "business_hours",
        "holiday_schedule_name",
        "extension_dialing_scope",
        "name_dialing_scope",
        "name_dialing_entries",
        "business_hours_menu",
        "after_hours_menu",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", str),
            E("holiday_schedule_name", "holidayScheduleName", str),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantReadMenu,
                is_complex=True,
                is_required=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantReadMenu,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupAutoAttendantGetInstanceResponse16(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest16()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule_name: holidayScheduleName
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    __slots__ = [
        "service_instance_profile",
        "enable_video",
        "business_hours",
        "holiday_schedule_name",
        "extension_dialing_scope",
        "name_dialing_scope",
        "name_dialing_entries",
        "business_hours_menu",
        "after_hours_menu",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile,
                is_complex=True,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", str),
            E("holiday_schedule_name", "holidayScheduleName", str),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantReadMenu16,
                is_complex=True,
                is_required=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantReadMenu16,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupAutoAttendantGetInstanceResponse17(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest17()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule_name: holidayScheduleName
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    __slots__ = [
        "service_instance_profile",
        "enable_video",
        "business_hours",
        "holiday_schedule_name",
        "extension_dialing_scope",
        "name_dialing_scope",
        "name_dialing_entries",
        "business_hours_menu",
        "after_hours_menu",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", str),
            E("holiday_schedule_name", "holidayScheduleName", str),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantReadMenu16,
                is_complex=True,
                is_required=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantReadMenu16,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupAutoAttendantGetInstanceResponse17sp1(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest17sp1()``.

    Contains the service profile information.

    Attributes:
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    __slots__ = [
        "service_instance_profile",
        "enable_video",
        "business_hours",
        "holiday_schedule",
        "extension_dialing_scope",
        "name_dialing_scope",
        "name_dialing_entries",
        "business_hours_menu",
        "after_hours_menu",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile17,
                is_complex=True,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantReadMenu16,
                is_complex=True,
                is_required=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantReadMenu16,
                is_complex=True,
                is_required=True,
            ),
        )


class GroupAutoAttendantGetInstanceResponse20(OCIResponse):
    """
    Response to ``GroupAutoAttendantGetInstanceRequest20()``.

    Contains the service profile information.  The following elements are only used in AS
    data mode: type, use AutoAttendantType.BASIC in HSS mode.  holidayMenu.  The following
    elements are only valid for Standard Auto Attendants: holidayMenu

    Attributes:
        service_instance_profile: serviceInstanceProfile
        type: type
        first_digit_timeout_seconds: firstDigitTimeoutSeconds
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
        holiday_menu: holidayMenu
        network_class_of_service: networkClassOfService
    """

    __slots__ = [
        "service_instance_profile",
        "type",
        "first_digit_timeout_seconds",
        "enable_video",
        "business_hours",
        "holiday_schedule",
        "extension_dialing_scope",
        "name_dialing_scope",
        "name_dialing_entries",
        "business_hours_menu",
        "after_hours_menu",
        "holiday_menu",
        "network_class_of_service",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceReadProfile19sp1,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E(
                "first_digit_timeout_seconds",
                "firstDigitTimeoutSeconds",
                int,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantReadMenu20,
                is_complex=True,
                is_required=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantReadMenu20,
                is_complex=True,
                is_required=True,
            ),
            E(
                "holiday_menu",
                "holidayMenu",
                OCI.AutoAttendantReadMenu20,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


class UserCommPilotExpressSRGetResponse13mp16(OCIResponse):
    """
    Response to the ``UserCommPilotExpressSRGetRequest13mp16()``.


    Attributes:
        profile: profile
        available_in_office: availableInOffice
        available_out_of_office: availableOutOfOffice
        busy: busy
        unavailable: unavailable
    """

    __slots__ = [
        "profile",
        "available_in_office",
        "available_out_of_office",
        "busy",
        "unavailable",
        "session_id",
        "_frozen",
    ]

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile", "profile", str),
            E(
                "available_in_office",
                "availableInOffice",
                OCI.CommPilotExpressSRAvailableInOffice,
                is_complex=True,
                is_required=True,
            ),
            E(
                "available_out_of_office",
                "availableOutOfOffice",
                OCI.CommPilotExpressSRAvailableOutOfOffice,
                is_complex=True,
                is_required=True,
            ),
            E(
                "busy",
                "busy",
                OCI.CommPilotExpressSRBusy,
                is_complex=True,
                is_required=True,
            ),
            E(
                "unavailable",
                "unavailable",
                OCI.CommPilotExpressSRUnavailable,
                is_complex=True,
                is_required=True,
            ),
        )


# fmt: on
# end
