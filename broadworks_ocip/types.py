# Broadworks Type
# Autogenerated from the Broadworks XML Schemas.
# Do not edit as changes will be overwritten.
# Generated on 2020-06-14T20:07:46.945203
from classforge import Field

from broadworks_ocip.base import ElementInfo
from broadworks_ocip.base import OCIType


class AccessDevice(OCIType):
    """
    Uniquely identifies an Identity/device profile created anywhere in the system.
    """

    ELEMENTS = (
        ElementInfo("device_level", "deviceLevel", str, False, True, False),
        ElementInfo("device_name", "deviceName", str, False, True, False),
    )
    device_level = Field(type=str, required=True)
    device_name = Field(type=str, required=True)


class AccessDeviceKey(OCIType):
    """
    Key to uniquely identify a system, service provider, or group device.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, False, False,
        ),
        ElementInfo("group_id", "groupId", str, False, False, False),
        ElementInfo("device_name", "deviceName", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=False)
    group_id = Field(type=str, required=False)
    device_name = Field(type=str, required=True)


class AccessDeviceReorderEndpointIdentity(OCIType):
    """
    Access device end point identity in the context of a reorder command.
    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity
    """

    ELEMENTS = (
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
    )
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)


class AccessDeviceTypeRename(OCIType):
    """
    Pair of DeviceManagementTagSetName
    """

    ELEMENTS = (
        ElementInfo(
            "original_device_type_name",
            "originalDeviceTypeName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "new_device_type_name", "newDeviceTypeName", str, False, True, False,
        ),
    )
    original_device_type_name = Field(type=str, required=True)
    new_device_type_name = Field(type=str, required=True)


class AccountAuthorizationCodeEntry(OCIType):
    """
    Account/Authorization Code.
    """

    ELEMENTS = (
        ElementInfo("code", "code", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    code = Field(type=str, required=True)
    description = Field(type=str, required=False)


class ActivatableDN(OCIType):
    """
    Activatable directory Number in E164 Format.
    """

    ELEMENTS = (
        ElementInfo("dn", "DN", str, False, True, False),
        ElementInfo("activate", "activate", bool, False, False, False),
    )
    dn = Field(type=str, required=True)
    activate = Field(type=bool, required=False)


class ActivatableDNRange(OCIType):
    """
    Activatable directory number range. The minimum and maximum values are inclusive.
    """

    ELEMENTS = (
        ElementInfo("min_phone_number", "minPhoneNumber", str, False, True, False),
        ElementInfo("max_phone_number", "maxPhoneNumber", str, False, True, False),
        ElementInfo("activate", "activate", bool, False, False, False),
    )
    min_phone_number = Field(type=str, required=True)
    max_phone_number = Field(type=str, required=True)
    activate = Field(type=bool, required=False)


class AdditionalMessageOptionsMenuKeysModifyEntry(OCIType):
    """
    The voice portal additional message options modify entry.
    """

    ELEMENTS = (
        ElementInfo("save_message", "saveMessage", str, False, False, False),
        ElementInfo("delete_message", "deleteMessage", str, False, False, False),
        ElementInfo("play_envelope", "playEnvelope", str, False, False, False),
        ElementInfo("callback_caller", "callbackCaller", str, False, False, False),
        ElementInfo("compose_message", "composeMessage", str, False, False, False),
        ElementInfo("reply_message", "replyMessage", str, False, False, False),
        ElementInfo("forward_message", "forwardMessage", str, False, False, False),
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    save_message = Field(type=str, required=False)
    delete_message = Field(type=str, required=False)
    play_envelope = Field(type=str, required=False)
    callback_caller = Field(type=str, required=False)
    compose_message = Field(type=str, required=False)
    reply_message = Field(type=str, required=False)
    forward_message = Field(type=str, required=False)
    personalized_name = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class AdditionalMessageOptionsMenuKeysReadEntry(OCIType):
    """
    The voice portal additional message options menu keys.
    """

    ELEMENTS = (
        ElementInfo("save_message", "saveMessage", str, False, False, False),
        ElementInfo("delete_message", "deleteMessage", str, False, False, False),
        ElementInfo("play_envelope", "playEnvelope", str, False, False, False),
        ElementInfo("callback_caller", "callbackCaller", str, False, False, False),
        ElementInfo("compose_message", "composeMessage", str, False, False, False),
        ElementInfo("reply_message", "replyMessage", str, False, False, False),
        ElementInfo("forward_message", "forwardMessage", str, False, False, False),
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    save_message = Field(type=str, required=False)
    delete_message = Field(type=str, required=False)
    play_envelope = Field(type=str, required=False)
    callback_caller = Field(type=str, required=False)
    compose_message = Field(type=str, required=False)
    reply_message = Field(type=str, required=False)
    forward_message = Field(type=str, required=False)
    personalized_name = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class AdviceOfChargeCostInformationSourceEntry(OCIType):
    """
    The advice of charge cost information source entry.
    """

    ELEMENTS = (
        ElementInfo("peer_identity", "peerIdentity", str, False, True, False),
        ElementInfo("priority", "priority", int, False, True, False),
    )
    peer_identity = Field(type=str, required=True)
    priority = Field(type=int, required=True)


class AgentStatistics(OCIType):
    """
    Contains Call Center Agent statistics for a given time frame.
    """

    ELEMENTS = (
        ElementInfo(
            "number_of_calls_handled", "numberOfCallsHandled", int, False, True, False,
        ),
        ElementInfo(
            "number_of_calls_unanswered",
            "numberOfCallsUnanswered",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_call_seconds", "averageCallSeconds", int, False, True, False,
        ),
        ElementInfo("total_talk_seconds", "totalTalkSeconds", int, False, True, False),
        ElementInfo(
            "total_staffed_seconds", "totalStaffedSeconds", int, False, True, False,
        ),
    )
    number_of_calls_handled = Field(type=int, required=True)
    number_of_calls_unanswered = Field(type=int, required=True)
    average_call_seconds = Field(type=int, required=True)
    total_talk_seconds = Field(type=int, required=True)
    total_staffed_seconds = Field(type=int, required=True)


class AlternateNumberEntry(OCIType):
    """
    Alternate Number Entry.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("ring_pattern", "ringPattern", str, False, False, False),
    )
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    ring_pattern = Field(type=str, required=False)


class AlternateNumberEntry17(OCIType):
    """
    Alternate Number Entry.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("ring_pattern", "ringPattern", str, False, False, False),
    )
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    ring_pattern = Field(type=str, required=False)


class AlternateNumberEntry21(OCIType):
    """
    Alternate Number Entry.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("ring_pattern", "ringPattern", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    ring_pattern = Field(type=str, required=False)
    description = Field(type=str, required=False)


class AlternateUserIdEntry(OCIType):
    """
    Alternate user id.
    """

    ELEMENTS = (
        ElementInfo("alternate_user_id", "alternateUserId", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    alternate_user_id = Field(type=str, required=True)
    description = Field(type=str, required=False)


class AnnouncementFileKey(OCIType):
    """
    Uniquely identifies a file within a group or user repository.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("media_file_type", "mediaFileType", str, False, True, False),
    )
    name = Field(type=str, required=True)
    media_file_type = Field(type=str, required=True)


class AnnouncementFileLevelKey(OCIType):
    """
    Uniquely identifies a file within a group or user repository.
    Includes level to distinguish between group and user announcements
    in scenarios where both are listed.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("media_file_type", "mediaFileType", str, False, True, False),
        ElementInfo("level", "level", str, False, True, False),
    )
    name = Field(type=str, required=True)
    media_file_type = Field(type=str, required=True)
    level = Field(type=str, required=True)


class AnnouncementMenuKeysModifyEntry(OCIType):
    """
    The voice portal announcement menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("record_audio", "recordAudio", str, False, False, False),
        ElementInfo("record_audio_video", "recordAudioVideo", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    record_audio = Field(type=str, required=False)
    record_audio_video = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class AnnouncementMenuKeysReadEntry(OCIType):
    """
    The voice portal announcement menu keys.
    """

    ELEMENTS = (
        ElementInfo("record_audio", "recordAudio", str, False, False, False),
        ElementInfo("record_audio_video", "recordAudioVideo", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    record_audio = Field(type=str, required=False)
    record_audio_video = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class AnnouncementRecordingMenuKeysModifyEntry(OCIType):
    """
    The voice portal announcement recording menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("accept_recording", "acceptRecording", str, False, False, False),
        ElementInfo("reject_rerecord", "rejectRerecord", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
        ElementInfo("end", "end", str, False, False, False),
    )
    accept_recording = Field(type=str, required=False)
    reject_rerecord = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)
    end = Field(type=str, required=False)


class AnnouncementRecordingMenuKeysReadEntry(OCIType):
    """
    The voice portal announcement recording menu keys.
    """

    ELEMENTS = (
        ElementInfo("accept_recording", "acceptRecording", str, False, True, False),
        ElementInfo("reject_rerecord", "rejectRerecord", str, False, True, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
        ElementInfo("end", "end", str, False, True, False),
    )
    accept_recording = Field(type=str, required=True)
    reject_rerecord = Field(type=str, required=True)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)
    end = Field(type=str, required=True)


class AssignedGroupServicesEntry(OCIType):
    """
    Assigned Group Services List Entry.
    The isActive element is true, false, or could be missing completely.
    """

    ELEMENTS = (
        ElementInfo("service_name", "serviceName", str, False, True, False),
        ElementInfo("is_active", "isActive", bool, False, False, False),
    )
    service_name = Field(type=str, required=True)
    is_active = Field(type=bool, required=False)


class AssignedUserServicesEntry(OCIType):
    """
    Assigned User Services List Entry.
    The isActive element is true, false, or could be missing completely.
    """

    ELEMENTS = (
        ElementInfo("service_name", "serviceName", str, False, True, False),
        ElementInfo("is_active", "isActive", bool, False, False, False),
    )
    service_name = Field(type=str, required=True)
    is_active = Field(type=bool, required=False)


class AttendantConsoleReplacementDisplayColumnList(OCIType):
    """
    A list of attendant console display columns that replaces a previously configured list.
    By convention, an element of this type may be set nil to clear the list.
    """

    ELEMENTS = (
        ElementInfo("display_column", "displayColumn", str, False, True, False),
    )
    display_column = Field(type=str, required=True)


class AutoAttendantKeyConfigurationReadEntry(OCIType):
    """
    The read configuration entry of a key for Auto Attendant.
    The following elements are only used in AS data mode and not returned in XS data mode:
      audioFileDescription
      audioMediaType
      videoFileDescription
      videoMediaType
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file_description", "audioFileDescription", str, False, False, False,
        ),
        ElementInfo("audio_media_type", "audioMediaType", str, False, False, False),
        ElementInfo(
            "video_file_description", "videoFileDescription", str, False, False, False,
        ),
        ElementInfo("video_media_type", "videoMediaType", str, False, False, False),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file_description = Field(type=str, required=False)
    audio_media_type = Field(type=str, required=False)
    video_file_description = Field(type=str, required=False)
    video_media_type = Field(type=str, required=False)


class AutoAttendantKeyConfigurationReadEntry19(OCIType):
    """
    The read configuration entry of a key for Auto
    Attendant.
    The following
    data elements are only valid for Standard Auto
    Attendants:
    submenuId
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file_description", "audioFileDescription", str, False, False, False,
        ),
        ElementInfo("audio_media_type", "audioMediaType", str, False, False, False),
        ElementInfo(
            "video_file_description", "videoFileDescription", str, False, False, False,
        ),
        ElementInfo("video_media_type", "videoMediaType", str, False, False, False),
        ElementInfo("submenu_id", "submenuId", str, False, False, False),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file_description = Field(type=str, required=False)
    audio_media_type = Field(type=str, required=False)
    video_file_description = Field(type=str, required=False)
    video_media_type = Field(type=str, required=False)
    submenu_id = Field(type=str, required=False)


class AutomaticCollectCallPrefixDigitsEntry(OCIType):
    """
    The Automatic Collect Call prefix digits entry.
    """

    ELEMENTS = (
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("prefix_digits", "prefixDigits", str, False, True, False),
    )
    country_code = Field(type=str, required=True)
    prefix_digits = Field(type=str, required=True)


class BasicCallLogsEntry(OCIType):
    """
    Call Log entry describing a placed, received, or missed call.
    Replaced By: CallLogsEntry
    """

    ELEMENTS = (
        ElementInfo("country_code", "countryCode", str, False, False, False),
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("time", "time", str, False, True, False),
    )
    country_code = Field(type=str, required=False)
    phone_number = Field(type=str, required=True)
    name = Field(type=str, required=True)
    time = Field(type=str, required=True)


class BroadWorksMobilityAlertingMobileNumberReplacementList(OCIType):
    """
    A list of Mobile Numbers to be alerted.
    By convention, an element of this type may be set nil to clear the list.
    """

    ELEMENTS = (ElementInfo("mobile_number", "mobileNumber", str, False, True, False),)
    mobile_number = Field(type=str, required=True)


class BroadWorksMobilityUserMobileIdentityEntry(OCIType):
    """
    User's Mobile Identity Read Entry
    """

    ELEMENTS = (
        ElementInfo("mobile_number", "mobileNumber", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("is_primary", "isPrimary", bool, False, True, False),
        ElementInfo("enable_alerting", "enableAlerting", bool, False, True, False),
    )
    mobile_number = Field(type=str, required=True)
    description = Field(type=str, required=False)
    is_primary = Field(type=bool, required=True)
    enable_alerting = Field(type=bool, required=True)


class BroadWorksMobilityUserMobileIdentityModifyEntry(OCIType):
    """
    User's Mobile Identity Modify Entry
    """

    ELEMENTS = (
        ElementInfo("mobile_number", "mobileNumber", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("is_primary", "isPrimary", bool, False, False, False),
        ElementInfo("enable_alerting", "enableAlerting", bool, False, False, False),
    )
    mobile_number = Field(type=str, required=True)
    description = Field(type=str, required=False)
    is_primary = Field(type=bool, required=False)
    enable_alerting = Field(type=bool, required=False)


class CPEDeviceOptions(OCIType):
    """
    CPE device's options.
    Replaced by: CPEDeviceOptions14sp6
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo("config_type", "configType", str, False, True, False),
        ElementInfo("system_file_name", "systemFileName", str, False, True, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, True, False),
    )
    enable_monitoring = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    config_type = Field(type=str, required=True)
    system_file_name = Field(type=str, required=True)
    device_file_format = Field(type=str, required=True)


class CallBlockingServiceMapEntry(OCIType):
    """
    The call blocking service map entry.
    """

    ELEMENTS = (
        ElementInfo(
            "call_blocking_service", "callBlockingService", str, False, True, False,
        ),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
    )
    call_blocking_service = Field(type=str, required=True)
    treatment_id = Field(type=str, required=False)


class CallCenterAgentAvailability(OCIType):
    """
    Specifies an agent's login state (availability) for a particular Call Center.
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("available", "available", bool, False, True, False),
    )
    service_user_id = Field(type=str, required=True)
    available = Field(type=bool, required=True)


class CallCenterAgentDailyStatistics13mp8(OCIType):
    """
    Contains Call Center Agent statistics for one day.
    """

    ELEMENTS = (
        ElementInfo(
            "number_of_calls_received", "numberOfCallsReceived", int, False, True, False,
        ),
        ElementInfo(
            "number_of_calls_not_answered",
            "numberOfCallsNotAnswered",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_time_per_call_seconds",
            "averageTimePerCallSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "time_in_calls_seconds", "timeInCallsSeconds", int, False, True, False,
        ),
        ElementInfo(
            "time_logged_off_seconds", "timeLoggedOffSeconds", int, False, True, False,
        ),
        ElementInfo(
            "time_logged_on_and_idle_seconds",
            "timeLoggedOnAndIdleSeconds",
            int,
            False,
            True,
            False,
        ),
    )
    number_of_calls_received = Field(type=int, required=True)
    number_of_calls_not_answered = Field(type=int, required=True)
    average_time_per_call_seconds = Field(type=int, required=True)
    time_in_calls_seconds = Field(type=int, required=True)
    time_logged_off_seconds = Field(type=int, required=True)
    time_logged_on_and_idle_seconds = Field(type=int, required=True)


class CallCenterAgentSettings(OCIType):
    """
    Specifies an agent's settings for a particular Call Center.
    The skillLevel only applies to Premium agents.
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("available", "available", bool, False, False, False),
        ElementInfo("skill_level", "skillLevel", int, False, False, False),
    )
    service_user_id = Field(type=str, required=True)
    available = Field(type=bool, required=False)
    skill_level = Field(type=int, required=False)


class CallCenterAgentThresholdProfileReplacementNotificationEmailList(OCIType):
    """
    List of email addresses to which the Agent Threshold Profile email is sent. The
    list replaces a previously configured list.
    """

    ELEMENTS = (ElementInfo("email_address", "emailAddress", str, False, True, False),)
    email_address = Field(type=str, required=True)


class CallCenterAgentUnavailableCodeStateModify(OCIType):
    """
    Contains a Call Center Agent Unavailable Code and its active state
    """

    ELEMENTS = (
        ElementInfo("code", "code", str, False, True, False),
        ElementInfo("is_active", "isActive", bool, False, True, False),
    )
    code = Field(type=str, required=True)
    is_active = Field(type=bool, required=True)


class CallCenterAnnouncementDescriptionList(OCIType):
    """
    Contains list of file descriptions for audio or video files
    """

    ELEMENTS = (
        ElementInfo("file_description1", "fileDescription1", str, False, False, False),
        ElementInfo("file_description2", "fileDescription2", str, False, False, False),
        ElementInfo("file_description3", "fileDescription3", str, False, False, False),
        ElementInfo("file_description4", "fileDescription4", str, False, False, False),
    )
    file_description1 = Field(type=str, required=False)
    file_description2 = Field(type=str, required=False)
    file_description3 = Field(type=str, required=False)
    file_description4 = Field(type=str, required=False)


class CallCenterAnnouncementMediaFileTypeList(OCIType):
    """
    Contains list of file media types for audio or video files
    """

    ELEMENTS = (
        ElementInfo("media_type1", "mediaType1", str, False, False, False),
        ElementInfo("media_type2", "mediaType2", str, False, False, False),
        ElementInfo("media_type3", "mediaType3", str, False, False, False),
        ElementInfo("media_type4", "mediaType4", str, False, False, False),
    )
    media_type1 = Field(type=str, required=False)
    media_type2 = Field(type=str, required=False)
    media_type3 = Field(type=str, required=False)
    media_type4 = Field(type=str, required=False)


class CallCenterAnnouncementURLList(OCIType):
    """
    Contains list of urls
    """

    ELEMENTS = (
        ElementInfo("url1", "url1", str, False, False, False),
        ElementInfo("url2", "url2", str, False, False, False),
        ElementInfo("url3", "url3", str, False, False, False),
        ElementInfo("url4", "url4", str, False, False, False),
    )
    url1 = Field(type=str, required=False)
    url2 = Field(type=str, required=False)
    url3 = Field(type=str, required=False)
    url4 = Field(type=str, required=False)


class CallCenterAnnouncementURLListModify(OCIType):
    """
      Contains a list of URLs for modify.
    """

    ELEMENTS = (
        ElementInfo("url1", "url1", str, False, False, False),
        ElementInfo("url2", "url2", str, False, False, False),
        ElementInfo("url3", "url3", str, False, False, False),
        ElementInfo("url4", "url4", str, False, False, False),
    )
    url1 = Field(type=str, required=False)
    url2 = Field(type=str, required=False)
    url3 = Field(type=str, required=False)
    url4 = Field(type=str, required=False)


class CallCenterMusicOnHoldSourceModify(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=False)
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)


class CallCenterMusicOnHoldSourceRead(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)


class CallCenterQueueStatistics13mp8(OCIType):
    """
    Contains Call Center Queue statistics.
    """

    ELEMENTS = (
        ElementInfo(
            "number_of_incoming_calls", "numberOfIncomingCalls", int, False, True, False,
        ),
        ElementInfo(
            "number_of_calls_queued", "numberOfCallsQueued", int, False, True, False,
        ),
        ElementInfo(
            "number_of_busy_overflows", "numberOfBusyOverflows", int, False, True, False,
        ),
        ElementInfo(
            "number_of_calls_answered", "numberOfCallsAnswered", int, False, True, False,
        ),
        ElementInfo(
            "average_time_with_agent_seconds",
            "averageTimeWithAgentSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_time_in_queue_seconds",
            "averageTimeInQueueSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_number_of_agents_busy",
            "averageNumberOfAgentsBusy",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_number_of_agents_logged_off",
            "averageNumberOfAgentsLoggedOff",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_hold_time_before_call_loss_seconds",
            "averageHoldTimeBeforeCallLossSeconds",
            int,
            False,
            True,
            False,
        ),
    )
    number_of_incoming_calls = Field(type=int, required=True)
    number_of_calls_queued = Field(type=int, required=True)
    number_of_busy_overflows = Field(type=int, required=True)
    number_of_calls_answered = Field(type=int, required=True)
    average_time_with_agent_seconds = Field(type=int, required=True)
    average_time_in_queue_seconds = Field(type=int, required=True)
    average_number_of_agents_busy = Field(type=int, required=True)
    average_number_of_agents_logged_off = Field(type=int, required=True)
    average_hold_time_before_call_loss_seconds = Field(type=int, required=True)


class CallCenterQueueStatistics14sp9(OCIType):
    """
    Contains Call Center Queue statistics.
    """

    ELEMENTS = (
        ElementInfo(
            "number_of_busy_overflows", "numberOfBusyOverflows", int, False, True, False,
        ),
        ElementInfo(
            "number_of_calls_answered", "numberOfCallsAnswered", int, False, True, False,
        ),
        ElementInfo(
            "number_of_calls_abandoned",
            "numberOfCallsAbandoned",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "number_of_calls_transferred",
            "numberOfCallsTransferred",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "number_of_calls_timedout", "numberOfCallsTimedout", int, False, True, False,
        ),
        ElementInfo(
            "average_number_of_agents_talking",
            "averageNumberOfAgentsTalking",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_number_of_agents_staffed",
            "averageNumberOfAgentsStaffed",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "average_wait_seconds", "averageWaitSeconds", int, False, True, False,
        ),
        ElementInfo(
            "average_abandonment_seconds",
            "averageAbandonmentSeconds",
            int,
            False,
            True,
            False,
        ),
    )
    number_of_busy_overflows = Field(type=int, required=True)
    number_of_calls_answered = Field(type=int, required=True)
    number_of_calls_abandoned = Field(type=int, required=True)
    number_of_calls_transferred = Field(type=int, required=True)
    number_of_calls_timedout = Field(type=int, required=True)
    average_number_of_agents_talking = Field(type=int, required=True)
    average_number_of_agents_staffed = Field(type=int, required=True)
    average_wait_seconds = Field(type=int, required=True)
    average_abandonment_seconds = Field(type=int, required=True)


class CallCenterQueueThresholdReplacementNotificationEmailList(OCIType):
    """
    List of email addresses to which the Call Center Queue Threshold email is sent.
    The list replaces a previously configured list.
    """

    ELEMENTS = (ElementInfo("email_address", "emailAddress", str, False, True, False),)
    email_address = Field(type=str, required=True)


class CallCenterReportAbandonedCallThresholdReplacementList(OCIType):
    """
    A list of call center reporting abandoned call threshold seconds that replaces a
    previously configured list.
    """

    ELEMENTS = (
        ElementInfo(
            "abandoned_call_threshold_seconds",
            "abandonedCallThresholdSeconds",
            int,
            False,
            True,
            False,
        ),
    )
    abandoned_call_threshold_seconds = Field(type=int, required=True)


class CallCenterReportCurrentInterval(OCIType):
    """
    The call center enhanced reporting report current interval, for example, current week.
    """

    ELEMENTS = (ElementInfo("time_unit", "timeUnit", str, False, True, False),)
    time_unit = Field(type=str, required=True)


class CallCenterReportDataTemplateInfo(OCIType):
    """
    Call center reporting data template info.
    """

    ELEMENTS = (
        ElementInfo("data_template", "dataTemplate", str, False, True, False),
        ElementInfo("report_type", "reportType", str, False, True, False),
        ElementInfo("is_realtime_report", "isRealtimeReport", bool, False, True, False),
        ElementInfo(
            "is_agent_param_required", "isAgentParamRequired", str, False, True, False,
        ),
        ElementInfo(
            "is_call_center_param_required",
            "isCallCenterParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_call_center_dnis_param_required",
            "isCallCenterDnisParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_sampling_period_param_required",
            "isSamplingPeriodParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_call_completion_threshold_param_required",
            "isCallCompletionThresholdParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_short_duration_threshold_param_required",
            "isShortDurationThresholdParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_service_level_threshold_param_required",
            "isServiceLevelThresholdParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_service_level_inclusions_param_required",
            "isServiceLevelInclusionsParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_service_level_objective_threshold_param_required",
            "isServiceLevelObjectiveThresholdParamRequired",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_abandoned_call_threshold_param_required",
            "isAbandonedCallThresholdParamRequired",
            str,
            False,
            True,
            False,
        ),
    )
    data_template = Field(type=str, required=True)
    report_type = Field(type=str, required=True)
    is_realtime_report = Field(type=bool, required=True)
    is_agent_param_required = Field(type=str, required=True)
    is_call_center_param_required = Field(type=str, required=True)
    is_call_center_dnis_param_required = Field(type=str, required=True)
    is_sampling_period_param_required = Field(type=str, required=True)
    is_call_completion_threshold_param_required = Field(type=str, required=True)
    is_short_duration_threshold_param_required = Field(type=str, required=True)
    is_service_level_threshold_param_required = Field(type=str, required=True)
    is_service_level_inclusions_param_required = Field(type=str, required=True)
    is_service_level_objective_threshold_param_required = Field(type=str, required=True)
    is_abandoned_call_threshold_param_required = Field(type=str, required=True)


class CallCenterReportDataTemplateQueryFilterValueReplacementList(OCIType):
    """
    A list of call center reporting data template query filter values that replaces a
    previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("filter_value", "filterValue", str, False, True, False),)
    filter_value = Field(type=str, required=True)


class CallCenterReportPastInterval(OCIType):
    """
    The call center enhanced reporting report past interval, for example, last 24 month.
    """

    ELEMENTS = (
        ElementInfo("number", "number", int, False, True, False),
        ElementInfo("time_unit", "timeUnit", str, False, True, False),
    )
    number = Field(type=int, required=True)
    time_unit = Field(type=str, required=True)


class CallCenterReportReplacementEmailList(OCIType):
    """
    A list of call center reporting email addresses that replaces a previously
    configured list.
    """

    ELEMENTS = (ElementInfo("email_address", "emailAddress", str, False, True, False),)
    email_address = Field(type=str, required=True)


class CallCenterReportServiceLevelThresholdReplacementList(OCIType):
    """
    A list of call center reporting service level threshold seconds that replaces a
    previously configured list.
    """

    ELEMENTS = (
        ElementInfo(
            "service_level_threshold_seconds",
            "serviceLevelThresholdSeconds",
            int,
            False,
            True,
            False,
        ),
    )
    service_level_threshold_seconds = Field(type=int, required=True)


class CallCenterReportTemplateKey(OCIType):
    """
    Uniquely identifies a call center report template created in the system.
    """

    ELEMENTS = (
        ElementInfo("template_level", "templateLevel", str, False, True, False),
        ElementInfo("template_name", "templateName", str, False, True, False),
    )
    template_level = Field(type=str, required=True)
    template_name = Field(type=str, required=True)


class CallCenterRoutingPriorityOrder(OCIType):
    """
    Call center routing order
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("priority", "priority", str, False, True, False),
    )
    service_user_id = Field(type=str, required=True)
    priority = Field(type=str, required=True)


class CallCenterScheduledReportAgentSelection(OCIType):
    """
    Either all agents or list of agents.
    """

    ELEMENTS = (
        ElementInfo("all_agent", "allAgent", bool, False, True, False),
        ElementInfo("agent_user_id", "agentUserId", str, False, True, False),
    )
    all_agent = Field(type=bool, required=True)
    agent_user_id = Field(type=str, required=True)


class CallCenterScheduledReportAgentSelectionAdminRead(OCIType):
    """
     Either all agents or 2 list of agents: one for current and one for past
    (deleted) agents.
     This is used when an admin reads a Scheduled Report.
     Each agent table has the following column headings:
     "User Id", "Last Name", "First Name", "Hiragana Last Name" and "Hiragana First Name".
    """

    ELEMENTS = (
        ElementInfo("all_agent", "allAgent", bool, False, True, False),
        ElementInfo("current_agent_table", "currentAgentTable", list, True, True, True),
        ElementInfo("past_agent_table", "pastAgentTable", list, True, True, True),
    )
    all_agent = Field(type=bool, required=True)
    current_agent_table = Field(type=list, required=True)
    past_agent_table = Field(type=list, required=True)


class CallCenterScheduledReportAgentSelectionRead(OCIType):
    """
    Either all agents or list of agents.
    The agent table has the following column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name" and "Hiragana First Name".
    """

    ELEMENTS = (
        ElementInfo("all_agent", "allAgent", bool, False, True, False),
        ElementInfo("agent_table", "agentTable", list, True, True, True),
    )
    all_agent = Field(type=bool, required=True)
    agent_table = Field(type=list, required=True)


class CallCenterScheduledReportCallCenterSelection(OCIType):
    """
    Either all call centers or list of call centers.
    """

    ELEMENTS = (
        ElementInfo("all_call_center", "allCallCenter", bool, False, True, False),
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
    )
    all_call_center = Field(type=bool, required=True)
    service_user_id = Field(type=str, required=True)


class CallCenterScheduledReportCallCenterSelectionRead(OCIType):
    """
    User for admin read. Either all call centers or 2 lists of call centers: one for
    current and one for deleted call centers.
    """

    ELEMENTS = (
        ElementInfo("all_call_center", "allCallCenter", bool, False, True, False),
        ElementInfo("current_user_id", "currentUserId", str, False, False, False),
        ElementInfo("past_user_id", "pastUserId", str, False, False, False),
    )
    all_call_center = Field(type=bool, required=True)
    current_user_id = Field(type=str, required=False)
    past_user_id = Field(type=str, required=False)


class CallCenterScheduledReportDNISSelection(OCIType):
    """
    Either all DNIS under the specified Call Center or list of DNIS.
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("all_dnis", "allDNIS", bool, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_user_id = Field(type=str, required=True)
    all_dnis = Field(type=bool, required=True)
    name = Field(type=str, required=True)


class CallCenterScheduledReportDNISSelectionRead(OCIType):
    """
    Either all DNIS under the specified Call Center or 2 lists of DNIS, one for
    current one for past (deleted).
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("deleted", "deleted", bool, False, False, False),
        ElementInfo("all_dnis", "allDNIS", bool, False, True, False),
        ElementInfo("current_name", "currentName", str, False, False, False),
        ElementInfo("past_name", "pastName", str, False, False, False),
    )
    service_user_id = Field(type=str, required=True)
    deleted = Field(type=bool, required=False)
    all_dnis = Field(type=bool, required=True)
    current_name = Field(type=str, required=False)
    past_name = Field(type=str, required=False)


class CallCenterScheduledReportServiceLevelInclusions(OCIType):
    """
    The call center enhanced reporting scheduled report inclusions related to the
    Service Level thresholds
    """

    ELEMENTS = (
        ElementInfo(
            "include_overflow_time_transfered_in_service_level",
            "includeOverflowTimeTransferedInServiceLevel",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_other_transfers_in_service_level",
            "includeOtherTransfersInServiceLevel",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "abandoned_calls_in_service_level",
            "abandonedCallsInServiceLevel",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "abandoned_call_interval_seconds",
            "abandonedCallIntervalSeconds",
            int,
            False,
            False,
            False,
        ),
    )
    include_overflow_time_transfered_in_service_level = Field(type=bool, required=True)
    include_other_transfers_in_service_level = Field(type=bool, required=True)
    abandoned_calls_in_service_level = Field(type=str, required=True)
    abandoned_call_interval_seconds = Field(type=int, required=False)


class CallCenterScheduledReportServiceLevelInclusionsModify(OCIType):
    """
    The call center enhanced reporting scheduled report modified inclusions related
    to the Service Level thresholds
    """

    ELEMENTS = (
        ElementInfo(
            "include_overflow_time_transfered_in_service_level",
            "includeOverflowTimeTransferedInServiceLevel",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_other_transfers_in_service_level",
            "includeOtherTransfersInServiceLevel",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "abandoned_calls_in_service_level",
            "abandonedCallsInServiceLevel",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "abandoned_call_interval_seconds",
            "abandonedCallIntervalSeconds",
            int,
            False,
            False,
            False,
        ),
    )
    include_overflow_time_transfered_in_service_level = Field(type=bool, required=False)
    include_other_transfers_in_service_level = Field(type=bool, required=False)
    abandoned_calls_in_service_level = Field(type=str, required=False)
    abandoned_call_interval_seconds = Field(type=int, required=False)


class CallCenterSkillAgentList(OCIType):
    """
    A list of agents for a particular skill Level.
    """

    ELEMENTS = (
        ElementInfo("skill_level", "skillLevel", int, False, True, False),
        ElementInfo("agent", "agent", str, False, False, False),
    )
    skill_level = Field(type=int, required=True)
    agent = Field(type=str, required=False)


class CallCenterStatisticsRange(OCIType):
    """
    Statistics Range
    """

    ELEMENTS = (
        ElementInfo("start", "start", str, False, True, False),
        ElementInfo("end", "end", str, False, False, False),
    )
    start = Field(type=str, required=True)
    end = Field(type=str, required=False)


class CallDispositionCodeActivation(OCIType):
    """
    Contains a Call Center Call Disposition Code and its active state
    """

    ELEMENTS = (
        ElementInfo("code", "code", str, False, True, False),
        ElementInfo("is_active", "isActive", bool, False, True, False),
    )
    code = Field(type=str, required=True)
    is_active = Field(type=bool, required=True)


class CallDispositionCodeWithLevel(OCIType):
    """
    Contains a Call Center Call Disposition Code and its Level
    """

    ELEMENTS = (
        ElementInfo("code", "code", str, False, True, False),
        ElementInfo("level", "level", str, False, True, False),
    )
    code = Field(type=str, required=True)
    level = Field(type=str, required=True)


class CallForwardingOptionsMenuKeysModifyEntry(OCIType):
    """
    The voice portal call forwarding option menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "activate_call_forwarding",
            "activateCallForwarding",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "deactivate_call_forwarding",
            "deactivateCallForwarding",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "change_call_forwarding_destination",
            "changeCallForwardingDestination",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_call_forwarding_status",
            "listenToCallForwardingStatus",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_call_forwarding = Field(type=str, required=False)
    deactivate_call_forwarding = Field(type=str, required=False)
    change_call_forwarding_destination = Field(type=str, required=False)
    listen_to_call_forwarding_status = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class CallForwardingOptionsMenuKeysReadEntry(OCIType):
    ELEMENTS = (
        ElementInfo(
            "activate_call_forwarding",
            "activateCallForwarding",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "deactivate_call_forwarding",
            "deactivateCallForwarding",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "change_call_forwarding_destination",
            "changeCallForwardingDestination",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_call_forwarding_status",
            "listenToCallForwardingStatus",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_call_forwarding = Field(type=str, required=False)
    deactivate_call_forwarding = Field(type=str, required=False)
    change_call_forwarding_destination = Field(type=str, required=False)
    listen_to_call_forwarding_status = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class CallLogsEntry(OCIType):
    """
    Call Log entry describing a placed, received, or missed call.
    """

    ELEMENTS = (
        ElementInfo("country_code", "countryCode", str, False, False, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("time", "time", str, False, True, False),
    )
    country_code = Field(type=str, required=False)
    call_log_id = Field(type=str, required=True)
    phone_number = Field(type=str, required=True)
    name = Field(type=str, required=True)
    time = Field(type=str, required=True)


class CallMeNowToDnCriteria(OCIType):
    """
    The To dn criteria used on the call me now external number.
    """

    ELEMENTS = (
        ElementInfo(
            "to_dn_criteria_selection", "toDnCriteriaSelection", str, False, True, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
    )
    to_dn_criteria_selection = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)


class CallToNumber(OCIType):
    """
    Call to Number.
    """

    ELEMENTS = (
        ElementInfo("type", "type", str, False, True, False),
        ElementInfo("number", "number", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
    )
    type = Field(type=str, required=True)
    number = Field(type=str, required=False)
    extension = Field(type=str, required=False)


class CallTypeMappingEntry(OCIType):
    """
    The call type mapping entry.
    """

    ELEMENTS = (
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("digit_map", "digitMap", str, False, True, False),
        ElementInfo("call_type", "callType", str, False, True, False),
    )
    country_code = Field(type=str, required=True)
    digit_map = Field(type=str, required=True)
    call_type = Field(type=str, required=True)


class CallTypeMappingKey(OCIType):
    """
    The call type mapping Key.
    """

    ELEMENTS = (
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("digit_map", "digitMap", str, False, True, False),
    )
    country_code = Field(type=str, required=True)
    digit_map = Field(type=str, required=True)


class ChangeBusyOrNoAnswerGreetingMenuKeysModifyEntry(OCIType):
    """
    The voice portal change busy or not answer greeting menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "record_new_greeting", "recordNewGreeting", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_current_greeting",
            "listenToCurrentGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "revert_to_system_default_greeting",
            "revertToSystemDefaultGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    record_new_greeting = Field(type=str, required=False)
    listen_to_current_greeting = Field(type=str, required=False)
    revert_to_system_default_greeting = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class ChangeBusyOrNoAnswerGreetingMenuKeysReadEntry(OCIType):
    """
    The voice portal change busy or not answer greeting menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "record_new_greeting", "recordNewGreeting", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_current_greeting",
            "listenToCurrentGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "revert_to_system_default_greeting",
            "revertToSystemDefaultGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    record_new_greeting = Field(type=str, required=False)
    listen_to_current_greeting = Field(type=str, required=False)
    revert_to_system_default_greeting = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class ChangeCallForwardingDestinationMenuKeysModifyEntry(OCIType):
    """
    The voice portal change call forwarding destination menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "finish_entering_new_destination_number",
            "finishEnteringNewDestinationNumber",
            str,
            False,
            False,
            False,
        ),
    )
    finish_entering_new_destination_number = Field(type=str, required=False)


class ChangeCallForwardingDestinationMenuKeysReadEntry(OCIType):
    """
    The voice portal change call forwarding destination menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "finish_entering_new_destination_number",
            "finishEnteringNewDestinationNumber",
            str,
            False,
            True,
            False,
        ),
    )
    finish_entering_new_destination_number = Field(type=str, required=True)


class ChangeCurrentIntroductionOrMessageOrReplyMenuKeysModifyEntry(OCIType):
    """
    The voice portal change current introduction or message or reply menu keys modify entry.
    """

    ELEMENTS = (ElementInfo("end_recording", "endRecording", str, False, False, False),)
    end_recording = Field(type=str, required=False)


class ChangeCurrentIntroductionOrMessageOrReplyMenuKeysReadEntry(OCIType):
    """
    The voice portal change current introduction or message or reply menu keys.
    """

    ELEMENTS = (ElementInfo("end_recording", "endRecording", str, False, True, False),)
    end_recording = Field(type=str, required=True)


class ChangeExtendedAwayGreetingMenuKeysModifyEntry(OCIType):
    """
    The voice portal change extended away greeting menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "activate_extended_away_greeting",
            "activateExtendedAwayGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "deactivate_extended_away_greeting",
            "deactivateExtendedAwayGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "record_new_greeting", "recordNewGreeting", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_current_greeting",
            "listenToCurrentGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "enable_message_deposit", "enableMessageDeposit", str, False, False, False,
        ),
        ElementInfo(
            "disable_message_deposit", "disableMessageDeposit", str, False, False, False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_extended_away_greeting = Field(type=str, required=False)
    deactivate_extended_away_greeting = Field(type=str, required=False)
    record_new_greeting = Field(type=str, required=False)
    listen_to_current_greeting = Field(type=str, required=False)
    enable_message_deposit = Field(type=str, required=False)
    disable_message_deposit = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class ChangeExtendedAwayGreetingMenuKeysReadEntry(OCIType):
    """
    The voice portal change extended away greeting menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "activate_extended_away_greeting",
            "activateExtendedAwayGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "deactivate_extended_away_greeting",
            "deactivateExtendedAwayGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "record_new_greeting", "recordNewGreeting", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_current_greeting",
            "listenToCurrentGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_extended_away_greeting = Field(type=str, required=False)
    deactivate_extended_away_greeting = Field(type=str, required=False)
    record_new_greeting = Field(type=str, required=False)
    listen_to_current_greeting = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class CollaborateBridgeMaximumParticipants(OCIType):
    """
    Maximum number of Collaborate bridge participants. Can either be unlimited or
    limited to a value between 3 and 999999.
    """

    ELEMENTS = (
        ElementInfo("unlimited", "unlimited", bool, False, True, False),
        ElementInfo("quantity", "quantity", int, False, True, False),
    )
    unlimited = Field(type=bool, required=True)
    quantity = Field(type=int, required=True)


class CollaborateGracePeriodDuration(OCIType):
    """
    Collaborate grace period duration.
    """

    ELEMENTS = (
        ElementInfo("hours", "hours", int, False, True, False),
        ElementInfo("minutes", "minutes", int, False, True, False),
    )
    hours = Field(type=int, required=True)
    minutes = Field(type=int, required=True)


class CollaborateRoomSchedule(OCIType):
    """
    Collaborate room schedule.
    """

    ELEMENTS = (
        ElementInfo(
            "schedule_reservationless",
            "scheduleReservationless",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "schedule_one_time", "scheduleOneTime", str, True, True, False,
        ),  # unknown
        ElementInfo(
            "schedule_recurring", "scheduleRecurring", str, True, True, False,
        ),  # unknown
    )
    schedule_reservationless = Field(type=str, required=True)
    schedule_one_time = Field(type=str, required=True)
    schedule_recurring = Field(type=str, required=True)


class CollaborateRoomScheduleDuration(OCIType):
    """
    Collaborate room schedule duration.
    """

    ELEMENTS = (
        ElementInfo("hours", "hours", int, False, True, False),
        ElementInfo("minutes", "minutes", int, False, True, False),
    )
    hours = Field(type=int, required=True)
    minutes = Field(type=int, required=True)


class CommPilotExpressEmailNotify(OCIType):
    """
    CommPilot Express Email Notify configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo("send_email", "sendEmail", bool, False, True, False),
        ElementInfo("email_address", "emailAddress", str, False, False, False),
    )
    send_email = Field(type=bool, required=True)
    email_address = Field(type=str, required=False)


class CommPilotExpressEmailNotifyModify(OCIType):
    """
    CommPilot Express Email Notify configuration used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo("send_email", "sendEmail", bool, False, False, False),
        ElementInfo("email_address", "emailAddress", str, False, False, False),
    )
    send_email = Field(type=bool, required=False)
    email_address = Field(type=str, required=False)


class CommPilotExpressProfileMenuKeysModifyEntry(OCIType):
    """
    The voice portal commPilot express profile menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "activate_available_in_office_profile",
            "activateAvailableInOfficeProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "activate_available_out_of_office_profile",
            "activateAvailableOutOfOfficeProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "activate_busy_profile", "activateBusyProfile", str, False, False, False,
        ),
        ElementInfo(
            "activate_unavailable_profile",
            "activateUnavailableProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("no_profile", "noProfile", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_available_in_office_profile = Field(type=str, required=False)
    activate_available_out_of_office_profile = Field(type=str, required=False)
    activate_busy_profile = Field(type=str, required=False)
    activate_unavailable_profile = Field(type=str, required=False)
    no_profile = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class CommPilotExpressProfileMenuKeysReadEntry(OCIType):
    """
    The voice portal commPilot express profile menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "activate_available_in_office_profile",
            "activateAvailableInOfficeProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "activate_available_out_of_office_profile",
            "activateAvailableOutOfOfficeProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "activate_busy_profile", "activateBusyProfile", str, False, False, False,
        ),
        ElementInfo(
            "activate_unavailable_profile",
            "activateUnavailableProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("no_profile", "noProfile", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_available_in_office_profile = Field(type=str, required=False)
    activate_available_out_of_office_profile = Field(type=str, required=False)
    activate_busy_profile = Field(type=str, required=False)
    activate_unavailable_profile = Field(type=str, required=False)
    no_profile = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class CommPilotExpressRedirection(OCIType):
    """
    CommPilot Express type to transfer to voice Mail or forward to a number
    used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "forwarding_phone_number", "forwardingPhoneNumber", str, False, False, False,
        ),
    )
    action = Field(type=str, required=True)
    forwarding_phone_number = Field(type=str, required=False)


class CommPilotExpressRedirectionModify(OCIType):
    """
    CommPilot Express type to transfer to voice Mail or forward to a number
    used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo("action", "action", str, False, False, False),
        ElementInfo(
            "forwarding_phone_number", "forwardingPhoneNumber", str, False, False, False,
        ),
    )
    action = Field(type=str, required=False)
    forwarding_phone_number = Field(type=str, required=False)


class CommPilotExpressRedirectionWithException(OCIType):
    """
    CommPilot Express type to transfer to voice mail or forward to a number
    with certain exceptions used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "send_calls_to_voice_mail_except_excluded_numbers",
            "sendCallsToVoiceMailExceptExcludedNumbers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "excluded_phone_number01", "excludedPhoneNumber01", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number02", "excludedPhoneNumber02", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number03", "excludedPhoneNumber03", str, False, False, False,
        ),
        ElementInfo(
            "forward_excluded_numbers_to",
            "forwardExcludedNumbersTo",
            str,
            False,
            False,
            False,
        ),
    )
    send_calls_to_voice_mail_except_excluded_numbers = Field(type=bool, required=True)
    excluded_phone_number01 = Field(type=str, required=False)
    excluded_phone_number02 = Field(type=str, required=False)
    excluded_phone_number03 = Field(type=str, required=False)
    forward_excluded_numbers_to = Field(type=str, required=False)


class CommPilotExpressRedirectionWithExceptionModify(OCIType):
    """
    CommPilot Express type to transfer to voice mail or forward to a number
    with certain exceptions used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "send_calls_to_voice_mail_except_excluded_numbers",
            "sendCallsToVoiceMailExceptExcludedNumbers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "excluded_phone_number01", "excludedPhoneNumber01", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number02", "excludedPhoneNumber02", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number03", "excludedPhoneNumber03", str, False, False, False,
        ),
        ElementInfo(
            "forward_excluded_numbers_to",
            "forwardExcludedNumbersTo",
            str,
            False,
            False,
            False,
        ),
    )
    send_calls_to_voice_mail_except_excluded_numbers = Field(type=bool, required=False)
    excluded_phone_number01 = Field(type=str, required=False)
    excluded_phone_number02 = Field(type=str, required=False)
    excluded_phone_number03 = Field(type=str, required=False)
    forward_excluded_numbers_to = Field(type=str, required=False)


class CommPilotExpressSREmailNotify(OCIType):
    """
    CommPilot Express SR Email Notify configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo("send_email", "sendEmail", bool, False, True, False),
        ElementInfo("email_address", "emailAddress", str, False, False, False),
    )
    send_email = Field(type=bool, required=True)
    email_address = Field(type=str, required=False)


class CommPilotExpressSREmailNotifyModify(OCIType):
    """
    CommPilot Express SR Email Notify configuration used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo("send_email", "sendEmail", bool, False, False, False),
        ElementInfo("email_address", "emailAddress", str, False, False, False),
    )
    send_email = Field(type=bool, required=False)
    email_address = Field(type=str, required=False)


class CommPilotExpressSRRedirection(OCIType):
    """
    CommPilot Express SR type to transfer to voice Mail or forward to a number
    used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "forwarding_phone_number", "forwardingPhoneNumber", str, False, False, False,
        ),
    )
    action = Field(type=str, required=True)
    forwarding_phone_number = Field(type=str, required=False)


class CommPilotExpressSRRedirectionModify(OCIType):
    """
    CommPilot Express SR type to transfer to voice Mail or forward to a number
    used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo("action", "action", str, False, False, False),
        ElementInfo(
            "forwarding_phone_number", "forwardingPhoneNumber", str, False, False, False,
        ),
    )
    action = Field(type=str, required=False)
    forwarding_phone_number = Field(type=str, required=False)


class CommPilotExpressSRRedirectionWithException(OCIType):
    """
    CommPilot Express SR type to transfer to voice mail or forward to a number
    with certain exceptions used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "send_calls_to_voice_mail_except_excluded_numbers",
            "sendCallsToVoiceMailExceptExcludedNumbers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "excluded_phone_number01", "excludedPhoneNumber01", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number02", "excludedPhoneNumber02", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number03", "excludedPhoneNumber03", str, False, False, False,
        ),
        ElementInfo(
            "forward_excluded_numbers_to",
            "forwardExcludedNumbersTo",
            str,
            False,
            False,
            False,
        ),
    )
    send_calls_to_voice_mail_except_excluded_numbers = Field(type=bool, required=True)
    excluded_phone_number01 = Field(type=str, required=False)
    excluded_phone_number02 = Field(type=str, required=False)
    excluded_phone_number03 = Field(type=str, required=False)
    forward_excluded_numbers_to = Field(type=str, required=False)


class CommPilotExpressSRRedirectionWithExceptionModify(OCIType):
    """
    CommPilot Express SR type to transfer to voice mail or forward to a number
    with certain exceptions used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "send_calls_to_voice_mail_except_excluded_numbers",
            "sendCallsToVoiceMailExceptExcludedNumbers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "excluded_phone_number01", "excludedPhoneNumber01", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number02", "excludedPhoneNumber02", str, False, False, False,
        ),
        ElementInfo(
            "excluded_phone_number03", "excludedPhoneNumber03", str, False, False, False,
        ),
        ElementInfo(
            "forward_excluded_numbers_to",
            "forwardExcludedNumbersTo",
            str,
            False,
            False,
            False,
        ),
    )
    send_calls_to_voice_mail_except_excluded_numbers = Field(type=bool, required=False)
    excluded_phone_number01 = Field(type=str, required=False)
    excluded_phone_number02 = Field(type=str, required=False)
    excluded_phone_number03 = Field(type=str, required=False)
    forward_excluded_numbers_to = Field(type=str, required=False)


class CommPilotExpressSRRedirectionWithRing(OCIType):
    """
    CommPilot Express SR Forward Number Entry with number of times to ring.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "number_of_times_to_ring", "numberOfTimesToRing", int, False, True, False,
        ),
    )
    phone_number = Field(type=str, required=False)
    number_of_times_to_ring = Field(type=int, required=True)


class CommunicationBarringAuthorizationCodeConfiguration(OCIType):
    """
    Communication Barring Authorization Code add entry.
    """

    ELEMENTS = (
        ElementInfo("code", "code", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo(
            "network_class_of_service",
            "networkClassOfService",
            str,
            False,
            False,
            False,
        ),
    )
    code = Field(type=str, required=True)
    description = Field(type=str, required=False)
    network_class_of_service = Field(type=str, required=False)


class CommunicationBarringAuthorizationCodeEntry(OCIType):
    """
    Communication Barring Authorization Code entry.
    """

    ELEMENTS = (
        ElementInfo("code", "code", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    code = Field(type=str, required=True)
    description = Field(type=str, required=False)


class CommunicationBarringCallMeNowRule(OCIType):
    """
    Communication Barring Call Me Now Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
    )
    criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    call_timeout_seconds = Field(type=int, required=False)


class CommunicationBarringIncomingRule(OCIType):
    """
    Communication Barring Incoming Rule
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_criteria", "digitPatternCriteria", str, False, True, False,
        ),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
        ElementInfo("time_schedule", "timeSchedule", str, False, False, False),
        ElementInfo("holiday_schedule", "holidaySchedule", str, False, False, False),
        ElementInfo("priority", "priority", str, False, True, False),
    )
    digit_pattern_criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    call_timeout_seconds = Field(type=int, required=False)
    time_schedule = Field(type=str, required=False)
    holiday_schedule = Field(type=str, required=False)
    priority = Field(type=str, required=True)


class CommunicationBarringIncomingRule19sp1(OCIType):
    """
    Communication Barring Incoming Rule
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_criteria", "digitPatternCriteria", str, False, True, False,
        ),
        ElementInfo("incoming_criteria", "incomingCriteria", str, False, True, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
        ElementInfo("time_schedule", "timeSchedule", str, False, False, False),
        ElementInfo("holiday_schedule", "holidaySchedule", str, False, False, False),
        ElementInfo("priority", "priority", str, False, True, False),
    )
    digit_pattern_criteria = Field(type=str, required=True)
    incoming_criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    call_timeout_seconds = Field(type=int, required=False)
    time_schedule = Field(type=str, required=False)
    holiday_schedule = Field(type=str, required=False)
    priority = Field(type=str, required=True)


class CommunicationBarringOriginatingRule(OCIType):
    """
    Communication Barring Originating Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
        ElementInfo("transfer_number", "transferNumber", str, False, False, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
    )
    criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    treatment_id = Field(type=str, required=False)
    transfer_number = Field(type=str, required=False)
    call_timeout_seconds = Field(type=int, required=False)


class CommunicationBarringOriginatingRule15sp2(OCIType):
    """
    Communication Barring Originating Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
        ElementInfo("transfer_number", "transferNumber", str, False, False, False),
    )
    criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    treatment_id = Field(type=str, required=False)
    transfer_number = Field(type=str, required=False)


class CommunicationBarringProfileReplacementList(OCIType):
    """
    A list of communication barring profiles that replaces a previously configured list.
    By convention, an element of this type may be set nil to clear the list.
    """

    ELEMENTS = (ElementInfo("profile_name", "profileName", str, False, True, False),)
    profile_name = Field(type=str, required=True)


class CommunicationBarringRedirectingRule(OCIType):
    """
    Communication Barring Redirecting Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
    )
    criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    call_timeout_seconds = Field(type=int, required=False)


class CommunicationBarringRedirectingRule15sp2(OCIType):
    """
    Communication Barring Redirecting Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo("action", "action", str, False, True, False),
    )
    criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)


class ConferenceGreetingMenuKeysModifyEntry(OCIType):
    """
    The voice portal greeting menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "activate_conf_greeting", "activateConfGreeting", str, False, False, False,
        ),
        ElementInfo(
            "deactivate_conf_greeting",
            "deactivateConfGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "record_new_conf_greeting",
            "recordNewConfGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_current_conf_greeting",
            "listenToCurrentConfGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_conf_greeting = Field(type=str, required=False)
    deactivate_conf_greeting = Field(type=str, required=False)
    record_new_conf_greeting = Field(type=str, required=False)
    listen_to_current_conf_greeting = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class ConferenceGreetingMenuKeysReadEntry(OCIType):
    """
    The voice portal conference greeting menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "activate_conf_greeting", "activateConfGreeting", str, False, False, False,
        ),
        ElementInfo(
            "deactivate_conf_greeting",
            "deactivateConfGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "record_new_conf_greeting",
            "recordNewConfGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_current_conf_greeting",
            "listenToCurrentConfGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    activate_conf_greeting = Field(type=str, required=False)
    deactivate_conf_greeting = Field(type=str, required=False)
    record_new_conf_greeting = Field(type=str, required=False)
    listen_to_current_conf_greeting = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class Contact(OCIType):
    """
    Contact information.
    """

    ELEMENTS = (
        ElementInfo("contact_name", "contactName", str, False, False, False),
        ElementInfo("contact_number", "contactNumber", str, False, False, False),
        ElementInfo("contact_email", "contactEmail", str, False, False, False),
    )
    contact_name = Field(type=str, required=False)
    contact_number = Field(type=str, required=False)
    contact_email = Field(type=str, required=False)


class CriteriaActivation(OCIType):
    """
    Criteria active status indicator
    """

    ELEMENTS = (
        ElementInfo("criteria_name", "criteriaName", str, False, True, False),
        ElementInfo("is_active", "isActive", bool, False, True, False),
    )
    criteria_name = Field(type=str, required=True)
    is_active = Field(type=bool, required=True)


class CriteriaFromDn(OCIType):
    """
    The from dn criteria used within an add/get request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
    )
    from_dn_criteria_selection = Field(type=str, required=True)
    include_anonymous_callers = Field(type=bool, required=True)
    include_unavailable_callers = Field(type=bool, required=True)
    phone_number = Field(type=str, required=False)


class CriteriaReplacementDNList(OCIType):
    """
    A list of criteria DNs that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("phone_number", "phoneNumber", str, False, True, False),)
    phone_number = Field(type=str, required=True)


class CustomContactDirectoryEntry(OCIType):
    """
    Represents either an existing user's Id or an existing Virtual
    On-Net user's DN. For a DN the groupId is used to make it unique
    within an Enterprise, however the groupId is not used with Service
    Providers.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo(
            "virtual_on_net_phone_number",
            "virtualOnNetPhoneNumber",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("group_id", "groupId", str, False, False, False),
    )
    user_id = Field(type=str, required=True)
    virtual_on_net_phone_number = Field(type=str, required=True)
    group_id = Field(type=str, required=False)


class DNISKey(OCIType):
    """
    Uniquely identifies a Call Center DNIS.
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_user_id = Field(type=str, required=True)
    name = Field(type=str, required=True)


class DNRange(OCIType):
    """
    Directory number range. The minimum and maximum values are inclusive.
    """

    ELEMENTS = (
        ElementInfo("min_phone_number", "minPhoneNumber", str, False, True, False),
        ElementInfo("max_phone_number", "maxPhoneNumber", str, False, True, False),
    )
    min_phone_number = Field(type=str, required=True)
    max_phone_number = Field(type=str, required=True)


class DNValidationStatusMessage(OCIType):
    """
    The message contains the status and error reason that prevents DN to be assigned/validated
    """

    ELEMENTS = (
        ElementInfo("dn", "dn", str, False, True, False),
        ElementInfo("status", "status", str, False, True, False),
        ElementInfo("message_code", "messageCode", int, False, False, False),
        ElementInfo("summary", "summary", str, False, False, False),
        ElementInfo("summary_english", "summaryEnglish", str, False, False, False),
    )
    dn = Field(type=str, required=True)
    status = Field(type=str, required=True)
    message_code = Field(type=int, required=False)
    summary = Field(type=str, required=False)
    summary_english = Field(type=str, required=False)


class DefaultNetworkClassOfService(OCIType):
    """
    The default Network Class of Service to set during assignation/unassignation.
    """

    ELEMENTS = (
        ElementInfo("use_existing", "useExisting", bool, False, True, False),
        ElementInfo(
            "network_class_of_service_name",
            "networkClassOfServiceName",
            str,
            False,
            True,
            False,
        ),
    )
    use_existing = Field(type=bool, required=True)
    network_class_of_service_name = Field(type=str, required=True)


class DeleteAllMessagesMenuKeysModifyEntry(OCIType):
    """
    The voice portal delete all messages menu keys modify entry modify entry.
    """

    ELEMENTS = (
        ElementInfo("confirm_deletion", "confirmDeletion", str, False, False, False),
        ElementInfo("cancel_deletion", "cancelDeletion", str, False, False, False),
    )
    confirm_deletion = Field(type=str, required=False)
    cancel_deletion = Field(type=str, required=False)


class DeleteAllMessagesMenuKeysReadEntry(OCIType):
    """
    The voice portal delete all messages menu keys.
    """

    ELEMENTS = (
        ElementInfo("confirm_deletion", "confirmDeletion", str, False, True, False),
        ElementInfo("cancel_deletion", "cancelDeletion", str, False, True, False),
    )
    confirm_deletion = Field(type=str, required=True)
    cancel_deletion = Field(type=str, required=True)


class DepartmentKey(OCIType):
    """
    Uniquely identifies a department system-wide.
    Departments are contained in either an enterprise or a group. Enterprise
    departments can be
    used by any or all groups within the enterprise. Department names are unique
    within a group and
    within an enterprise, but the same department name can exist in 2 different
    groups or in both
    a group and its parent enterprise. Therefore, to uniquely identify a department,
    we must know
    the department name and which enterprise or group contains the department.
    This type is extended by group and enterprise department keys.
    """

    ELEMENTS = ()


class DeviceManagementAutoRebuildConfigEntry(OCIType):
    """
    Contains one automatic rebuild configuration list entry.
    """

    ELEMENTS = (
        ElementInfo("oci_request_prefix", "ociRequestPrefix", str, False, True, False),
        ElementInfo(
            "auto_rebuild_enabled", "autoRebuildEnabled", bool, False, False, False,
        ),
    )
    oci_request_prefix = Field(type=str, required=True)
    auto_rebuild_enabled = Field(type=bool, required=False)


class DeviceManagementDeviceTypeOptionsRead(OCIType):
    """
    Device Management System device type options.
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(type=str, required=False)
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptionsRead16(OCIType):
    """
    Device Management System device type options.
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(type=str, required=False)
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptionsRead21sp1(OCIType):
    """
    Device Management System device type options.
    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(type=str, required=False)
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptionsRead22(OCIType):
    """
    Device Management System device type options.
    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, True, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    allow_sp_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(type=str, required=False)
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptionsRead22V2(OCIType):
    """
    Device Management System device type options.

    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, True, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    allow_sp_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(type=str, required=False)
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptionsRead22V3(OCIType):
    """
    Device Management System device type options.

    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI

    The following data elements are only used in AS data mode:
          enableDeviceActivation, value ‘false’ is returned

    The following elements are only used in AS data mode and not returned in XS data mode
          deviceModel
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, True, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "enable_device_activation",
            "enableDeviceActivation",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("device_model", "deviceModel", str, False, False, False),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    allow_sp_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(type=str, required=False)
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)
    enable_device_activation = Field(type=bool, required=True)
    device_model = Field(type=str, required=False)


class DeviceManagementLanguageMapping(OCIType):
    """
    Maps a BroadWorks language to a device-equivalent language.
    """

    ELEMENTS = (
        ElementInfo(
            "broad_works_language", "broadWorksLanguage", str, False, True, False,
        ),
        ElementInfo("device_language", "deviceLanguage", str, False, True, False),
    )
    broad_works_language = Field(type=str, required=True)
    device_language = Field(type=str, required=True)


class DeviceManagementTag(OCIType):
    """
    Represents a tag name with its associated value.
    """

    ELEMENTS = (
        ElementInfo("tag_name", "tagName", str, False, True, False),
        ElementInfo("tag_value", "tagValue", str, False, False, False),
    )
    tag_name = Field(type=str, required=True)
    tag_value = Field(type=str, required=False)


class DeviceManagementTagSetRename(OCIType):
    """
    Pair of DeviceManagementTagSetName
    """

    ELEMENTS = (
        ElementInfo(
            "original_tag_set_name", "originalTagSetName", str, False, True, False,
        ),
        ElementInfo("new_tag_set_name", "newTagSetName", str, False, True, False),
    )
    original_tag_set_name = Field(type=str, required=True)
    new_tag_set_name = Field(type=str, required=True)


class DeviceManagementUserNamePassword(OCIType):
    """
    Access device credentials.
    """

    ELEMENTS = (
        ElementInfo("user_name", "userName", str, False, True, False),
        ElementInfo("password", "password", str, False, True, False),
    )
    user_name = Field(type=str, required=True)
    password = Field(type=str, required=True)


class DeviceManagementUserNamePassword16(OCIType):
    """
    Access device credentials.
    """

    ELEMENTS = (
        ElementInfo("user_name", "userName", str, False, True, False),
        ElementInfo("password", "password", str, False, True, False),
    )
    user_name = Field(type=str, required=True)
    password = Field(type=str, required=True)


class DialPlanPolicy(OCIType):
    """
    Dial Plan Access Code attributes.
    """

    ELEMENTS = (
        ElementInfo("use_setting", "useSetting", str, False, False, False),
        ElementInfo(
            "requires_access_code_for_public_calls",
            "requiresAccessCodeForPublicCalls",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_e164_public_calls", "allowE164PublicCalls", bool, False, False, False,
        ),
        ElementInfo(
            "prefer_e164_number_format_for_callback_services",
            "preferE164NumberFormatForCallbackServices",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo("public_digit_map", "publicDigitMap", str, False, False, False),
        ElementInfo("private_digit_map", "privateDigitMap", str, False, False, False),
    )
    use_setting = Field(type=str, required=False)
    requires_access_code_for_public_calls = Field(type=bool, required=False)
    allow_e164_public_calls = Field(type=bool, required=False)
    prefer_e164_number_format_for_callback_services = Field(type=bool, required=False)
    public_digit_map = Field(type=str, required=False)
    private_digit_map = Field(type=str, required=False)


class DialPlanPolicyAccessCode(OCIType):
    """
    Dial Plan Access Code attributes.
    """

    ELEMENTS = (
        ElementInfo("access_code", "accessCode", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo(
            "include_code_for_network_translations_and_routing",
            "includeCodeForNetworkTranslationsAndRouting",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_code_for_screening_services",
            "includeCodeForScreeningServices",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "enable_secondary_dial_tone",
            "enableSecondaryDialTone",
            bool,
            False,
            False,
            False,
        ),
    )
    access_code = Field(type=str, required=True)
    description = Field(type=str, required=False)
    include_code_for_network_translations_and_routing = Field(type=bool, required=False)
    include_code_for_screening_services = Field(type=bool, required=False)
    enable_secondary_dial_tone = Field(type=bool, required=False)


class DialableCallerIDCriteriaPriorityOrder(OCIType):
    """
    Dialable Caller ID routing order
    """

    ELEMENTS = (
        ElementInfo("criteria_name", "criteriaName", str, False, True, False),
        ElementInfo("priority", "priority", str, False, True, False),
    )
    criteria_name = Field(type=str, required=True)
    priority = Field(type=str, required=True)


class DirectRouteIdentifiers(OCIType):
    """
    Direct Route identifiers.
    """

    ELEMENTS = (
        ElementInfo("dtg_identity", "dtgIdentity", str, False, True, False),
        ElementInfo("trunk_identity", "trunkIdentity", str, False, True, False),
    )
    dtg_identity = Field(type=str, required=True)
    trunk_identity = Field(type=str, required=True)


class DirectRouteReplacementIdentityList(OCIType):
    """
    A replacement list of direct route parameters.
    """

    ELEMENTS = (
        ElementInfo("dtg_identity", "dtgIdentity", str, False, True, False),
        ElementInfo("trunk_identity", "trunkIdentity", str, False, True, False),
    )
    dtg_identity = Field(type=str, required=True)
    trunk_identity = Field(type=str, required=True)


class DisableMessageDepositMenuKeysModifyEntry(OCIType):
    """
    The voice portal disable message deposit menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "disconnect_after_greeting",
            "disconnectAfterGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "forward_after_greeting", "forwardAfterGreeting", str, False, False, False,
        ),
        ElementInfo(
            "change_forwarding_destination",
            "changeForwardingDestination",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    disconnect_after_greeting = Field(type=str, required=False)
    forward_after_greeting = Field(type=str, required=False)
    change_forwarding_destination = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class DisableMessageDepositMenuKeysReadEntry(OCIType):
    """
    The voice portal disable message deposit menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "disconnect_after_greeting",
            "disconnectAfterGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "forward_after_greeting", "forwardAfterGreeting", str, False, False, False,
        ),
        ElementInfo(
            "change_forwarding_destination",
            "changeForwardingDestination",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    disconnect_after_greeting = Field(type=str, required=False)
    forward_after_greeting = Field(type=str, required=False)
    change_forwarding_destination = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class EnhancedCallLogsAccountAuthorizationCodeFilter(OCIType):
    """
    Filter criteria based on the account code.
    When "callsWithCodes" is set to true, all call logs with account/authorization
    codes are returned.
    When it set to false, all call logs without account/authorization codes are returned.
    """

    ELEMENTS = (
        ElementInfo("calls_with_codes", "callsWithCodes", bool, False, True, False),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            True,
            False,
        ),
    )
    calls_with_codes = Field(type=bool, required=True)
    account_authorization_code = Field(type=str, required=True)


class EnhancedCallLogsCallAuthorizationCodeFilter(OCIType):
    """
    Filter criteria based on call authorization code. Note that this code
    filter is different than EnhancedCallLogsAccountAuthorizationCodeFilter,
    which applies strictly to codes entered using the account/authorization
    code service.
    When "callsWithCodes" is set to true, all call logs with authorization
    codes are returned.
    When it set to false, all call logs without authorization codes are
    returned.
    If "authorizationCode" is set, all call logs matching that specific
    authorization code are returned.
    """

    ELEMENTS = (
        ElementInfo("calls_with_codes", "callsWithCodes", bool, False, True, False),
        ElementInfo("authorization_code", "authorizationCode", str, False, True, False),
    )
    calls_with_codes = Field(type=bool, required=True)
    authorization_code = Field(type=str, required=True)


class EnhancedCallLogsEntry(OCIType):
    """
           Call Log entry describing a placed, received, or missed call.
           Replaced By: CallLogsEntry
    """

    ELEMENTS = (
        ElementInfo("country_code", "countryCode", str, False, False, False),
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("time", "time", str, False, True, False),
    )
    country_code = Field(type=str, required=False)
    phone_number = Field(type=str, required=True)
    name = Field(type=str, required=True)
    time = Field(type=str, required=True)


class EnhancedCallLogsRedirectedCallSelection(OCIType):
    """
          Redirected call selection.
          When " redirectedCall " is set to true, all call logs with redirected call
    are returned. When it
          set to false, all call logs without redirected call are returned.
          The redirected call can be defined by including a subset of Service
    Invocation Disposition here.
          If none included, any call has a ServiceInvocationDisposition  value
    defined in ServiceInvocationDisposition
          is considered as a redirected call.
    """

    ELEMENTS = (
        ElementInfo("redirected_call", "redirectedCall", bool, False, True, False),
        ElementInfo("redirect_type", "redirectType", str, False, False, False),
    )
    redirected_call = Field(type=bool, required=True)
    redirect_type = Field(type=str, required=False)


class EnhancedCallLogsRedirectedCallSelection21(OCIType):
    """
          Redirected call selection.
          When " redirectedCall " is set to true, all call logs with redirected call
    are returned. When it
          set to false, all call logs without redirected call are returned.
          The redirected call can be defined by including a subset of Service
    Invocation Disposition here.
          If none included, any call has a ServiceInvocationDisposition value defined
    in ServiceInvocationDisposition21
          is considered as a redirected call.
    """

    ELEMENTS = (
        ElementInfo("redirected_call", "redirectedCall", bool, False, True, False),
        ElementInfo("redirect_type", "redirectType", str, False, False, False),
    )
    redirected_call = Field(type=bool, required=True)
    redirect_type = Field(type=str, required=False)


class EnhancedCallLogsRedirectedCallSelection21sp1(OCIType):
    """
          Redirected call selection.
          When " redirectedCall " is set to true, all call logs with redirected call
    are returned. When it
          set to false, all call logs without redirected call are returned.
          The redirected call can be defined by including a subset of Service
    Invocation Disposition here.
          If none included, any call has a ServiceInvocationDisposition value defined
    in ServiceInvocationDisposition21sp1
          is considered as a redirected call.
    """

    ELEMENTS = (
        ElementInfo("redirected_call", "redirectedCall", bool, False, True, False),
        ElementInfo("redirect_type", "redirectType", str, False, False, False),
    )
    redirected_call = Field(type=bool, required=True)
    redirect_type = Field(type=str, required=False)


class EnhancedCallLogsResponsePagingControl(OCIType):
    """
    Used in enhanced call logs group and enterprise queries to restrict the set of result
    rows when making a request that can result in a large dataset. The client specifies the
    starting row and the number of rows requested.
    The server only provides those rows in results, if available.
    """

    ELEMENTS = (
        ElementInfo(
            "response_start_index", "responseStartIndex", int, False, True, False,
        ),
        ElementInfo("response_page_size", "responsePageSize", int, False, True, False),
    )
    response_start_index = Field(type=int, required=True)
    response_page_size = Field(type=int, required=True)


class EnhancedCallLogsTimeRange(OCIType):
    """
    Time range used to filter call logs.
    """

    ELEMENTS = (
        ElementInfo("start_date_time", "startDateTime", str, False, True, False),
        ElementInfo("end_date_time", "endDateTime", str, False, True, False),
    )
    start_date_time = Field(type=str, required=True)
    end_date_time = Field(type=str, required=True)


class EnterpriseDepartmentKey(OCIType):
    """
    Uniquely identifies a department defined within an enterprise.
    To uniquely identify an enterprise department, we must know the department name and which
    enterprise contains the department.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    name = Field(type=str, required=True)


class EnterpriseSessionAdmissionControlGroupGetRequest21sp1V2(OCIType):
    """
    Request to get a session admission control group for the enterprise.
    The response is either an EnterpriseSessionAdmissionControlGroupGetResponse21sp1V2
    or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    name = Field(type=str, required=True)


class EnterpriseTrunkNumberRangeModify(OCIType):
    """
    Directory number range for modification.
    """

    ELEMENTS = (
        ElementInfo("dn_range_start", "dnRangeStart", str, False, True, False),
        ElementInfo("extension_length", "extensionLength", int, False, False, False),
    )
    dn_range_start = Field(type=str, required=True)
    extension_length = Field(type=int, required=False)


class EnterpriseTrunkReplacementNumberPrefixList(OCIType):
    """
    A list of prefixes that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("number_prefix", "numberPrefix", str, False, True, False),)
    number_prefix = Field(type=str, required=True)


class EnterpriseTrunkTrunkGroupKey(OCIType):
    """
    Identifies a trunk group within an Enterprise Trunk where the service provider id
    is already known.
    """

    ELEMENTS = (
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("trunk_group_name", "trunkGroupName", str, False, True, False),
    )
    group_id = Field(type=str, required=True)
    trunk_group_name = Field(type=str, required=True)


class EnterpriseVoiceVPNDigitManipulation(OCIType):
    """
    Enterprise Voice VPN Digit Manipulation Entry.
    """

    ELEMENTS = ()


class EnterpriseVoiceVPNDigitManipulationNoValue(OCIType):
    """
    Enterprise Voice VPN Digit Manipulation Entry that has no value.
    """

    ELEMENTS = (ElementInfo("operation", "operation", str, False, True, False),)
    operation = Field(type=str, required=True)


class EnterpriseVoiceVPNDigitManipulationOptionalValue(OCIType):
    """
    Enterprise Voice VPN Digit Manipulation Entry that optionally has a value.
    """

    ELEMENTS = (
        ElementInfo("operation", "operation", str, False, True, False),
        ElementInfo("value", "value", str, False, False, False),
    )
    operation = Field(type=str, required=True)
    value = Field(type=str, required=False)


class EnterpriseVoiceVPNDigitManipulationRequiredValue(OCIType):
    """
    Enterprise Voice VPN Digit Manipulation Entry that has a value.
    """

    ELEMENTS = (
        ElementInfo("operation", "operation", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
    )
    operation = Field(type=str, required=True)
    value = Field(type=str, required=True)


class EnterpriseVoiceVPNTreatmentEntry(OCIType):
    """
    Enterprise Voice VPN Treatment entry
    """

    ELEMENTS = (
        ElementInfo("id", "id", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    id = Field(type=str, required=True)
    description = Field(type=str, required=False)


class EstimatedWaitMessageOptionsModify(OCIType):
    """
    Estimated Wait Message Options
    """

    ELEMENTS = (
        ElementInfo("enabled", "enabled", bool, False, False, False),
        ElementInfo("operating_mode", "operatingMode", str, False, False, False),
        ElementInfo(
            "play_position_high_volume",
            "playPositionHighVolume",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "play_time_high_volume", "playTimeHighVolume", bool, False, False, False,
        ),
        ElementInfo("maximum_positions", "maximumPositions", int, False, False, False),
        ElementInfo(
            "maximum_waiting_minutes", "maximumWaitingMinutes", int, False, False, False,
        ),
        ElementInfo(
            "default_call_handling_minutes",
            "defaultCallHandlingMinutes",
            int,
            False,
            False,
            False,
        ),
        ElementInfo("play_updated_ewm", "playUpdatedEWM", bool, False, False, False),
        ElementInfo(
            "time_between_ewm_updates_seconds",
            "timeBetweenEWMUpdatesSeconds",
            int,
            False,
            False,
            False,
        ),
    )
    enabled = Field(type=bool, required=False)
    operating_mode = Field(type=str, required=False)
    play_position_high_volume = Field(type=bool, required=False)
    play_time_high_volume = Field(type=bool, required=False)
    maximum_positions = Field(type=int, required=False)
    maximum_waiting_minutes = Field(type=int, required=False)
    default_call_handling_minutes = Field(type=int, required=False)
    play_updated_ewm = Field(type=bool, required=False)
    time_between_ewm_updates_seconds = Field(type=int, required=False)


class EstimatedWaitMessageOptionsRead(OCIType):
    """
    Estimated Wait Message Options

    Replaced by EstimatedWaitMessageOptionsRead17sp4
    """

    ELEMENTS = (
        ElementInfo("enabled", "enabled", bool, False, True, False),
        ElementInfo("operating_mode", "operatingMode", str, False, True, False),
        ElementInfo(
            "play_position_high_volume",
            "playPositionHighVolume",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "play_time_high_volume", "playTimeHighVolume", bool, False, True, False,
        ),
        ElementInfo("maximum_positions", "maximumPositions", int, False, True, False),
        ElementInfo(
            "maximum_waiting_minutes", "maximumWaitingMinutes", int, False, True, False,
        ),
        ElementInfo(
            "default_call_handling_minutes",
            "defaultCallHandlingMinutes",
            int,
            False,
            True,
            False,
        ),
    )
    enabled = Field(type=bool, required=True)
    operating_mode = Field(type=str, required=True)
    play_position_high_volume = Field(type=bool, required=True)
    play_time_high_volume = Field(type=bool, required=True)
    maximum_positions = Field(type=int, required=True)
    maximum_waiting_minutes = Field(type=int, required=True)
    default_call_handling_minutes = Field(type=int, required=True)


class EstimatedWaitMessageOptionsRead17sp4(OCIType):
    """
    Estimated Wait Message Options
    """

    ELEMENTS = (
        ElementInfo("enabled", "enabled", bool, False, True, False),
        ElementInfo("operating_mode", "operatingMode", str, False, True, False),
        ElementInfo(
            "play_position_high_volume",
            "playPositionHighVolume",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "play_time_high_volume", "playTimeHighVolume", bool, False, True, False,
        ),
        ElementInfo("maximum_positions", "maximumPositions", int, False, True, False),
        ElementInfo(
            "maximum_waiting_minutes", "maximumWaitingMinutes", int, False, True, False,
        ),
        ElementInfo(
            "default_call_handling_minutes",
            "defaultCallHandlingMinutes",
            int,
            False,
            True,
            False,
        ),
        ElementInfo("play_updated_ewm", "playUpdatedEWM", bool, False, True, False),
        ElementInfo(
            "time_between_ewm_updates_seconds",
            "timeBetweenEWMUpdatesSeconds",
            int,
            False,
            False,
            False,
        ),
    )
    enabled = Field(type=bool, required=True)
    operating_mode = Field(type=str, required=True)
    play_position_high_volume = Field(type=bool, required=True)
    play_time_high_volume = Field(type=bool, required=True)
    maximum_positions = Field(type=int, required=True)
    maximum_waiting_minutes = Field(type=int, required=True)
    default_call_handling_minutes = Field(type=int, required=True)
    play_updated_ewm = Field(type=bool, required=True)
    time_between_ewm_updates_seconds = Field(type=int, required=False)


class ExchangeUserNamePassword(OCIType):
    """
    Exchange server user name and password.
    """

    ELEMENTS = (
        ElementInfo("user_name", "userName", str, False, True, False),
        ElementInfo("password", "password", str, False, True, False),
    )
    user_name = Field(type=str, required=True)
    password = Field(type=str, required=True)


class ExecutiveAssistantOptInStatus(OCIType):
    """
    Executive assistant Opt-in status with executive.
    """

    ELEMENTS = (
        ElementInfo("executive_user_id", "executiveUserId", str, False, True, False),
        ElementInfo("opt_in", "optIn", bool, False, True, False),
    )
    executive_user_id = Field(type=str, required=True)
    opt_in = Field(type=bool, required=True)


class ExecutiveCallFilteringCriteriaFromDn(OCIType):
    """
    The from dn criteria used within an executive call filtering criteria add/get request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
    )
    from_dn_criteria_selection = Field(type=str, required=True)
    include_anonymous_callers = Field(type=bool, required=True)
    include_unavailable_callers = Field(type=bool, required=True)
    phone_number = Field(type=str, required=False)


class ExtendedMixedCallLogsEntry(OCIType):
    """
    Extended Call Log entry describing a placed, received, or missed call.
    "countryCode" is the user's country code
    The following time elements are represented as timestamp, i.e., the number of milliseconds
    since January 1, 1970, 00:00:00 GMT.
    "startTime" represents the time when the system sends out a call invitation
    message (e.g. for
    placed calls) or receives a call invitation message (e.g. for missed/received calls).
    "answerTime" represents the time when the call is answered by the terminating party.
    "detachTime" represents the time when the call is successfully redirected by the system.
    "releaseTime" represents the time when the call is released. This time corresponds to the
    moment the call is released by the system, and not necessarily when one party
    hangs up, since this
    does not always mean the call is released (e.g. Emergency/911 calls).
    The elements "userGroupId", "userId","userPrimaryDn" and "userPrimaryExtension"
    are only returned when the enterprise or group level requests are used.
    Replaced by ExtendedMixedCallLogsEntry17sp4.
    Originally deprecated in release 20.
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("call_id", "callId", str, False, True, False),
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
        ElementInfo("dialed_number", "dialedNumber", str, False, False, False),
        ElementInfo("called_number", "calledNumber", str, False, False, False),
        ElementInfo(
            "network_translated_address",
            "networkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_asserted_number", "callingAssertedNumber", str, False, False, False,
        ),
        ElementInfo(
            "calling_presentation_number",
            "callingPresentationNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_number_source",
            "callingPresentationNumberSource",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_name",
            "callingPresentationName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_indicator",
            "callingPresentationIndicator",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("calling_group_id", "callingGroupId", str, False, False, False),
        ElementInfo(
            "called_directory_name", "calledDirectoryName", str, False, False, False,
        ),
        ElementInfo("called_group_id", "calledGroupId", str, False, False, False),
        ElementInfo("connected_number", "connectedNumber", str, False, False, False),
        ElementInfo(
            "connected_number_source", "connectedNumberSource", str, False, False, False,
        ),
        ElementInfo("connected_name", "connectedName", str, False, False, False),
        ElementInfo(
            "connected_presentation_indicator",
            "connectedPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("type_of_network", "typeOfNetwork", str, False, False, False),
        ElementInfo("call_category", "callCategory", str, False, False, False),
        ElementInfo("basic_call_type", "basicCallType", str, False, True, False),
        ElementInfo(
            "configurable_call_type", "configurableCallType", str, False, False, False,
        ),
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type", "virtualOnNetCallType", str, False, False, False,
        ),
        ElementInfo("time", "time", str, False, True, False),
        ElementInfo("start_time", "startTime", int, False, True, False),
        ElementInfo("answer_time", "answerTime", int, False, False, False),
        ElementInfo("release_time", "releaseTime", int, False, False, False),
        ElementInfo("detached_time", "detachedTime", int, False, False, False),
        ElementInfo(
            "detached_answer_time", "detachedAnswerTime", int, False, False, False,
        ),
        ElementInfo("outgoing_dnis", "outgoingDnis", str, False, False, False),
        ElementInfo(
            "service_invocation_disposition",
            "serviceInvocationDisposition",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_dialed_number",
            "serviceInvocationDialedNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_number",
            "serviceInvocationCalledNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_network_translated_address",
            "serviceInvocationNetworkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_type_of_network",
            "serviceInvocationTypeOfNetwork",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_call_category",
            "serviceInvocationCallCategory",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_basic_call_type",
            "serviceInvocationBasicCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_configurable_call_type",
            "serviceInvocationConfigurableCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_alternate_call_indicator",
            "serviceInvocationAlternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_virtual_on_net_call_type",
            "serviceInvocationVirtualOnNetCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_directory_name",
            "serviceInvocationCalledDirectoryName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_group_id",
            "serviceInvocationCalledGroupId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_number", "redirectingNumber", str, False, False, False,
        ),
        ElementInfo("redirecting_name", "redirectingName", str, False, False, False),
        ElementInfo(
            "redirecting_presentation_indicator",
            "redirectingPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_reason", "RedirectingReason", str, False, False, False,
        ),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("user_group_id", "userGroupId", str, False, False, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("user_primary_dn", "userPrimaryDn", str, False, False, False),
        ElementInfo(
            "user_primary_extension", "userPrimaryExtension", str, False, False, False,
        ),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=True)
    call_log_id = Field(type=str, required=True)
    call_id = Field(type=str, required=True)
    subscriber_type = Field(type=str, required=True)
    dialed_number = Field(type=str, required=False)
    called_number = Field(type=str, required=False)
    network_translated_address = Field(type=str, required=False)
    calling_asserted_number = Field(type=str, required=False)
    calling_presentation_number = Field(type=str, required=False)
    calling_presentation_number_source = Field(type=str, required=False)
    calling_presentation_name = Field(type=str, required=False)
    calling_presentation_indicator = Field(type=str, required=True)
    calling_group_id = Field(type=str, required=False)
    called_directory_name = Field(type=str, required=False)
    called_group_id = Field(type=str, required=False)
    connected_number = Field(type=str, required=False)
    connected_number_source = Field(type=str, required=False)
    connected_name = Field(type=str, required=False)
    connected_presentation_indicator = Field(type=str, required=False)
    type_of_network = Field(type=str, required=False)
    call_category = Field(type=str, required=False)
    basic_call_type = Field(type=str, required=True)
    configurable_call_type = Field(type=str, required=False)
    alternate_call_indicator = Field(type=str, required=False)
    virtual_on_net_call_type = Field(type=str, required=False)
    time = Field(type=str, required=True)
    start_time = Field(type=int, required=True)
    answer_time = Field(type=int, required=False)
    release_time = Field(type=int, required=False)
    detached_time = Field(type=int, required=False)
    detached_answer_time = Field(type=int, required=False)
    outgoing_dnis = Field(type=str, required=False)
    service_invocation_disposition = Field(type=str, required=False)
    service_invocation_dialed_number = Field(type=str, required=False)
    service_invocation_called_number = Field(type=str, required=False)
    service_invocation_network_translated_address = Field(type=str, required=False)
    service_invocation_type_of_network = Field(type=str, required=False)
    service_invocation_call_category = Field(type=str, required=False)
    service_invocation_basic_call_type = Field(type=str, required=False)
    service_invocation_configurable_call_type = Field(type=str, required=False)
    service_invocation_alternate_call_indicator = Field(type=str, required=False)
    service_invocation_virtual_on_net_call_type = Field(type=str, required=False)
    service_invocation_called_directory_name = Field(type=str, required=False)
    service_invocation_called_group_id = Field(type=str, required=False)
    redirecting_number = Field(type=str, required=False)
    redirecting_name = Field(type=str, required=False)
    redirecting_presentation_indicator = Field(type=str, required=False)
    redirecting_reason = Field(type=str, required=False)
    account_authorization_code = Field(type=str, required=False)
    user_group_id = Field(type=str, required=False)
    user_id = Field(type=str, required=False)
    user_primary_dn = Field(type=str, required=False)
    user_primary_extension = Field(type=str, required=False)


class ExtendedMixedCallLogsEntry17sp4(OCIType):
    """
    Extended Call Log entry describing a placed, received, or missed call.
    "countryCode" is the user's country code
    The following time elements are represented as timestamp, i.e., the number of milliseconds
    since January 1, 1970, 00:00:00 GMT.
    "startTime" represents the time when the system sends out a call invitation
    message (e.g. for
    placed calls) or receives a call invitation message (e.g. for missed/received calls).
    "answerTime" represents the time when the call is answered by the terminating party.
    "detachedTime" represents the time when the call is successfully redirected by
    the system.
    "releaseTime" represents the time when the call is released. This time corresponds to the
    moment the call is released by the system, and not necessarily when one party
    hangs up, since this
    does not always mean the call is released (e.g. Emergency/911 calls).
    The elements "userGroupId", "userId","userPrimaryDn" and "userPrimaryExtension"
    are only returned when the enterprise or group level requests are used.
    The following elements are only used in AS data mode and not returned in XS data mode:
      callAuthorizationCode
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("call_id", "callId", str, False, True, False),
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
        ElementInfo("dialed_number", "dialedNumber", str, False, False, False),
        ElementInfo("called_number", "calledNumber", str, False, False, False),
        ElementInfo(
            "network_translated_address",
            "networkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_asserted_number", "callingAssertedNumber", str, False, False, False,
        ),
        ElementInfo(
            "calling_presentation_number",
            "callingPresentationNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_number_source",
            "callingPresentationNumberSource",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_name",
            "callingPresentationName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_indicator",
            "callingPresentationIndicator",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("calling_group_id", "callingGroupId", str, False, False, False),
        ElementInfo(
            "called_directory_name", "calledDirectoryName", str, False, False, False,
        ),
        ElementInfo("called_group_id", "calledGroupId", str, False, False, False),
        ElementInfo("connected_number", "connectedNumber", str, False, False, False),
        ElementInfo(
            "connected_number_source", "connectedNumberSource", str, False, False, False,
        ),
        ElementInfo("connected_name", "connectedName", str, False, False, False),
        ElementInfo(
            "connected_presentation_indicator",
            "connectedPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("type_of_network", "typeOfNetwork", str, False, False, False),
        ElementInfo("call_category", "callCategory", str, False, False, False),
        ElementInfo("basic_call_type", "basicCallType", str, False, True, False),
        ElementInfo(
            "configurable_call_type", "configurableCallType", str, False, False, False,
        ),
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type", "virtualOnNetCallType", str, False, False, False,
        ),
        ElementInfo("time", "time", str, False, True, False),
        ElementInfo("start_time", "startTime", int, False, True, False),
        ElementInfo("answer_time", "answerTime", int, False, False, False),
        ElementInfo("release_time", "releaseTime", int, False, False, False),
        ElementInfo("detached_time", "detachedTime", int, False, False, False),
        ElementInfo(
            "detached_answer_time", "detachedAnswerTime", int, False, False, False,
        ),
        ElementInfo("outgoing_dnis", "outgoingDnis", str, False, False, False),
        ElementInfo(
            "service_invocation_disposition",
            "serviceInvocationDisposition",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_dialed_number",
            "serviceInvocationDialedNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_number",
            "serviceInvocationCalledNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_network_translated_address",
            "serviceInvocationNetworkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_type_of_network",
            "serviceInvocationTypeOfNetwork",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_call_category",
            "serviceInvocationCallCategory",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_basic_call_type",
            "serviceInvocationBasicCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_configurable_call_type",
            "serviceInvocationConfigurableCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_alternate_call_indicator",
            "serviceInvocationAlternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_virtual_on_net_call_type",
            "serviceInvocationVirtualOnNetCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_directory_name",
            "serviceInvocationCalledDirectoryName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_group_id",
            "serviceInvocationCalledGroupId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_number", "redirectingNumber", str, False, False, False,
        ),
        ElementInfo("redirecting_name", "redirectingName", str, False, False, False),
        ElementInfo(
            "redirecting_presentation_indicator",
            "redirectingPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_reason", "RedirectingReason", str, False, False, False,
        ),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code", "callAuthorizationCode", str, False, False, False,
        ),
        ElementInfo("user_group_id", "userGroupId", str, False, False, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("user_primary_dn", "userPrimaryDn", str, False, False, False),
        ElementInfo(
            "user_primary_extension", "userPrimaryExtension", str, False, False, False,
        ),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=True)
    call_log_id = Field(type=str, required=True)
    call_id = Field(type=str, required=True)
    subscriber_type = Field(type=str, required=True)
    dialed_number = Field(type=str, required=False)
    called_number = Field(type=str, required=False)
    network_translated_address = Field(type=str, required=False)
    calling_asserted_number = Field(type=str, required=False)
    calling_presentation_number = Field(type=str, required=False)
    calling_presentation_number_source = Field(type=str, required=False)
    calling_presentation_name = Field(type=str, required=False)
    calling_presentation_indicator = Field(type=str, required=True)
    calling_group_id = Field(type=str, required=False)
    called_directory_name = Field(type=str, required=False)
    called_group_id = Field(type=str, required=False)
    connected_number = Field(type=str, required=False)
    connected_number_source = Field(type=str, required=False)
    connected_name = Field(type=str, required=False)
    connected_presentation_indicator = Field(type=str, required=False)
    type_of_network = Field(type=str, required=False)
    call_category = Field(type=str, required=False)
    basic_call_type = Field(type=str, required=True)
    configurable_call_type = Field(type=str, required=False)
    alternate_call_indicator = Field(type=str, required=False)
    virtual_on_net_call_type = Field(type=str, required=False)
    time = Field(type=str, required=True)
    start_time = Field(type=int, required=True)
    answer_time = Field(type=int, required=False)
    release_time = Field(type=int, required=False)
    detached_time = Field(type=int, required=False)
    detached_answer_time = Field(type=int, required=False)
    outgoing_dnis = Field(type=str, required=False)
    service_invocation_disposition = Field(type=str, required=False)
    service_invocation_dialed_number = Field(type=str, required=False)
    service_invocation_called_number = Field(type=str, required=False)
    service_invocation_network_translated_address = Field(type=str, required=False)
    service_invocation_type_of_network = Field(type=str, required=False)
    service_invocation_call_category = Field(type=str, required=False)
    service_invocation_basic_call_type = Field(type=str, required=False)
    service_invocation_configurable_call_type = Field(type=str, required=False)
    service_invocation_alternate_call_indicator = Field(type=str, required=False)
    service_invocation_virtual_on_net_call_type = Field(type=str, required=False)
    service_invocation_called_directory_name = Field(type=str, required=False)
    service_invocation_called_group_id = Field(type=str, required=False)
    redirecting_number = Field(type=str, required=False)
    redirecting_name = Field(type=str, required=False)
    redirecting_presentation_indicator = Field(type=str, required=False)
    redirecting_reason = Field(type=str, required=False)
    account_authorization_code = Field(type=str, required=False)
    call_authorization_code = Field(type=str, required=False)
    user_group_id = Field(type=str, required=False)
    user_id = Field(type=str, required=False)
    user_primary_dn = Field(type=str, required=False)
    user_primary_extension = Field(type=str, required=False)


class ExtendedMixedCallLogsEntry20(OCIType):
    """
    Extended Call Log entry describing a placed, received, or missed call.
    "countryCode" is the user's country code
    The following time elements are represented as timestamp, i.e., the number of milliseconds
    since January 1, 1970, 00:00:00 GMT.
    "startTime" represents the time when the system sends out a call invitation
    message (e.g. for
    placed calls) or receives a call invitation message (e.g. for missed/received calls).
    "answerTime" represents the time when the call is answered by the terminating party.
    "detachedTime" represents the time when the call is successfully redirected by the system.
    "releaseTime" represents the time when the call is released. This time corresponds to the
    moment the call is released by the system, and not necessarily when one party
    hangs up, since this
    does not always mean the call is released (e.g. Emergency/911 calls).
    The elements "userGroupId", "userId","userPrimaryDn" and "userPrimaryExtension"
    are only returned when the enterprise or group level requests are used.
    The following elements are only used in AS data mode and not returned in XS data mode:
      callAuthorizationCode
      callSecurityClassification
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("call_id", "callId", str, False, True, False),
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
        ElementInfo("dialed_number", "dialedNumber", str, False, False, False),
        ElementInfo("called_number", "calledNumber", str, False, False, False),
        ElementInfo(
            "network_translated_address",
            "networkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_asserted_number", "callingAssertedNumber", str, False, False, False,
        ),
        ElementInfo(
            "calling_presentation_number",
            "callingPresentationNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_number_source",
            "callingPresentationNumberSource",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_name",
            "callingPresentationName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_indicator",
            "callingPresentationIndicator",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("calling_group_id", "callingGroupId", str, False, False, False),
        ElementInfo(
            "called_directory_name", "calledDirectoryName", str, False, False, False,
        ),
        ElementInfo("called_group_id", "calledGroupId", str, False, False, False),
        ElementInfo("connected_number", "connectedNumber", str, False, False, False),
        ElementInfo(
            "connected_number_source", "connectedNumberSource", str, False, False, False,
        ),
        ElementInfo("connected_name", "connectedName", str, False, False, False),
        ElementInfo(
            "connected_presentation_indicator",
            "connectedPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("type_of_network", "typeOfNetwork", str, False, False, False),
        ElementInfo("call_category", "callCategory", str, False, False, False),
        ElementInfo("basic_call_type", "basicCallType", str, False, True, False),
        ElementInfo(
            "configurable_call_type", "configurableCallType", str, False, False, False,
        ),
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type", "virtualOnNetCallType", str, False, False, False,
        ),
        ElementInfo("time", "time", str, False, True, False),
        ElementInfo("start_time", "startTime", int, False, True, False),
        ElementInfo("answer_time", "answerTime", int, False, False, False),
        ElementInfo("release_time", "releaseTime", int, False, False, False),
        ElementInfo("detached_time", "detachedTime", int, False, False, False),
        ElementInfo(
            "detached_answer_time", "detachedAnswerTime", int, False, False, False,
        ),
        ElementInfo("outgoing_dnis", "outgoingDnis", str, False, False, False),
        ElementInfo(
            "service_invocation_disposition",
            "serviceInvocationDisposition",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_dialed_number",
            "serviceInvocationDialedNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_number",
            "serviceInvocationCalledNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_network_translated_address",
            "serviceInvocationNetworkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_type_of_network",
            "serviceInvocationTypeOfNetwork",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_call_category",
            "serviceInvocationCallCategory",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_basic_call_type",
            "serviceInvocationBasicCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_configurable_call_type",
            "serviceInvocationConfigurableCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_alternate_call_indicator",
            "serviceInvocationAlternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_virtual_on_net_call_type",
            "serviceInvocationVirtualOnNetCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_directory_name",
            "serviceInvocationCalledDirectoryName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_group_id",
            "serviceInvocationCalledGroupId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_number", "redirectingNumber", str, False, False, False,
        ),
        ElementInfo("redirecting_name", "redirectingName", str, False, False, False),
        ElementInfo(
            "redirecting_presentation_indicator",
            "redirectingPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_reason", "RedirectingReason", str, False, False, False,
        ),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code", "callAuthorizationCode", str, False, False, False,
        ),
        ElementInfo("user_group_id", "userGroupId", str, False, False, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("user_primary_dn", "userPrimaryDn", str, False, False, False),
        ElementInfo(
            "user_primary_extension", "userPrimaryExtension", str, False, False, False,
        ),
        ElementInfo(
            "security_classification",
            "securityClassification",
            str,
            False,
            False,
            False,
        ),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=True)
    call_log_id = Field(type=str, required=True)
    call_id = Field(type=str, required=True)
    subscriber_type = Field(type=str, required=True)
    dialed_number = Field(type=str, required=False)
    called_number = Field(type=str, required=False)
    network_translated_address = Field(type=str, required=False)
    calling_asserted_number = Field(type=str, required=False)
    calling_presentation_number = Field(type=str, required=False)
    calling_presentation_number_source = Field(type=str, required=False)
    calling_presentation_name = Field(type=str, required=False)
    calling_presentation_indicator = Field(type=str, required=True)
    calling_group_id = Field(type=str, required=False)
    called_directory_name = Field(type=str, required=False)
    called_group_id = Field(type=str, required=False)
    connected_number = Field(type=str, required=False)
    connected_number_source = Field(type=str, required=False)
    connected_name = Field(type=str, required=False)
    connected_presentation_indicator = Field(type=str, required=False)
    type_of_network = Field(type=str, required=False)
    call_category = Field(type=str, required=False)
    basic_call_type = Field(type=str, required=True)
    configurable_call_type = Field(type=str, required=False)
    alternate_call_indicator = Field(type=str, required=False)
    virtual_on_net_call_type = Field(type=str, required=False)
    time = Field(type=str, required=True)
    start_time = Field(type=int, required=True)
    answer_time = Field(type=int, required=False)
    release_time = Field(type=int, required=False)
    detached_time = Field(type=int, required=False)
    detached_answer_time = Field(type=int, required=False)
    outgoing_dnis = Field(type=str, required=False)
    service_invocation_disposition = Field(type=str, required=False)
    service_invocation_dialed_number = Field(type=str, required=False)
    service_invocation_called_number = Field(type=str, required=False)
    service_invocation_network_translated_address = Field(type=str, required=False)
    service_invocation_type_of_network = Field(type=str, required=False)
    service_invocation_call_category = Field(type=str, required=False)
    service_invocation_basic_call_type = Field(type=str, required=False)
    service_invocation_configurable_call_type = Field(type=str, required=False)
    service_invocation_alternate_call_indicator = Field(type=str, required=False)
    service_invocation_virtual_on_net_call_type = Field(type=str, required=False)
    service_invocation_called_directory_name = Field(type=str, required=False)
    service_invocation_called_group_id = Field(type=str, required=False)
    redirecting_number = Field(type=str, required=False)
    redirecting_name = Field(type=str, required=False)
    redirecting_presentation_indicator = Field(type=str, required=False)
    redirecting_reason = Field(type=str, required=False)
    account_authorization_code = Field(type=str, required=False)
    call_authorization_code = Field(type=str, required=False)
    user_group_id = Field(type=str, required=False)
    user_id = Field(type=str, required=False)
    user_primary_dn = Field(type=str, required=False)
    user_primary_extension = Field(type=str, required=False)
    security_classification = Field(type=str, required=False)


class ExtendedMixedCallLogsEntry21(OCIType):
    """
    Extended Call Log entry describing a placed, received, or missed call.
    "countryCode" is the user's country code
    The following time elements are represented as timestamp, i.e., the number of milliseconds
    since January 1, 1970, 00:00:00 GMT.
    "startTime" represents the time when the system sends out a call invitation
    message (e.g. for
    placed calls) or receives a call invitation message (e.g. for missed/received calls).
    "answerTime" represents the time when the call is answered by the terminating party.
    "detachedTime" represents the time when the call is successfully redirected by
    the system.
    "releaseTime" represents the time when the call is released. This time corresponds to the
    moment the call is released by the system, and not necessarily when one party
    hangs up, since this
    does not always mean the call is released (e.g. Emergency/911 calls).
    The elements "userGroupId", "userId","userPrimaryDn" and "userPrimaryExtension"
    are only returned when the enterprise or group level requests are used.
    The following elements are only used in AS data mode and not returned in XS data mode:
      callAuthorizationCode
      securityClassification
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("call_id", "callId", str, False, True, False),
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
        ElementInfo("dialed_number", "dialedNumber", str, False, False, False),
        ElementInfo("called_number", "calledNumber", str, False, False, False),
        ElementInfo(
            "network_translated_address",
            "networkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_asserted_number", "callingAssertedNumber", str, False, False, False,
        ),
        ElementInfo(
            "calling_presentation_number",
            "callingPresentationNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_number_source",
            "callingPresentationNumberSource",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_name",
            "callingPresentationName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_indicator",
            "callingPresentationIndicator",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("calling_group_id", "callingGroupId", str, False, False, False),
        ElementInfo(
            "called_directory_name", "calledDirectoryName", str, False, False, False,
        ),
        ElementInfo("called_group_id", "calledGroupId", str, False, False, False),
        ElementInfo("connected_number", "connectedNumber", str, False, False, False),
        ElementInfo(
            "connected_number_source", "connectedNumberSource", str, False, False, False,
        ),
        ElementInfo("connected_name", "connectedName", str, False, False, False),
        ElementInfo(
            "connected_presentation_indicator",
            "connectedPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("type_of_network", "typeOfNetwork", str, False, False, False),
        ElementInfo("call_category", "callCategory", str, False, False, False),
        ElementInfo("basic_call_type", "basicCallType", str, False, True, False),
        ElementInfo(
            "configurable_call_type", "configurableCallType", str, False, False, False,
        ),
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type", "virtualOnNetCallType", str, False, False, False,
        ),
        ElementInfo("time", "time", str, False, True, False),
        ElementInfo("start_time", "startTime", int, False, True, False),
        ElementInfo("answer_time", "answerTime", int, False, False, False),
        ElementInfo("release_time", "releaseTime", int, False, False, False),
        ElementInfo("detached_time", "detachedTime", int, False, False, False),
        ElementInfo(
            "detached_answer_time", "detachedAnswerTime", int, False, False, False,
        ),
        ElementInfo("outgoing_dnis", "outgoingDnis", str, False, False, False),
        ElementInfo(
            "service_invocation_disposition",
            "serviceInvocationDisposition",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_dialed_number",
            "serviceInvocationDialedNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_number",
            "serviceInvocationCalledNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_network_translated_address",
            "serviceInvocationNetworkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_type_of_network",
            "serviceInvocationTypeOfNetwork",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_call_category",
            "serviceInvocationCallCategory",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_basic_call_type",
            "serviceInvocationBasicCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_configurable_call_type",
            "serviceInvocationConfigurableCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_alternate_call_indicator",
            "serviceInvocationAlternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_virtual_on_net_call_type",
            "serviceInvocationVirtualOnNetCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_directory_name",
            "serviceInvocationCalledDirectoryName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_group_id",
            "serviceInvocationCalledGroupId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_number", "redirectingNumber", str, False, False, False,
        ),
        ElementInfo("redirecting_name", "redirectingName", str, False, False, False),
        ElementInfo(
            "redirecting_presentation_indicator",
            "redirectingPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_reason", "RedirectingReason", str, False, False, False,
        ),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code", "callAuthorizationCode", str, False, False, False,
        ),
        ElementInfo("user_group_id", "userGroupId", str, False, False, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("user_primary_dn", "userPrimaryDn", str, False, False, False),
        ElementInfo(
            "user_primary_extension", "userPrimaryExtension", str, False, False, False,
        ),
        ElementInfo(
            "security_classification",
            "securityClassification",
            str,
            False,
            False,
            False,
        ),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=True)
    call_log_id = Field(type=str, required=True)
    call_id = Field(type=str, required=True)
    subscriber_type = Field(type=str, required=True)
    dialed_number = Field(type=str, required=False)
    called_number = Field(type=str, required=False)
    network_translated_address = Field(type=str, required=False)
    calling_asserted_number = Field(type=str, required=False)
    calling_presentation_number = Field(type=str, required=False)
    calling_presentation_number_source = Field(type=str, required=False)
    calling_presentation_name = Field(type=str, required=False)
    calling_presentation_indicator = Field(type=str, required=True)
    calling_group_id = Field(type=str, required=False)
    called_directory_name = Field(type=str, required=False)
    called_group_id = Field(type=str, required=False)
    connected_number = Field(type=str, required=False)
    connected_number_source = Field(type=str, required=False)
    connected_name = Field(type=str, required=False)
    connected_presentation_indicator = Field(type=str, required=False)
    type_of_network = Field(type=str, required=False)
    call_category = Field(type=str, required=False)
    basic_call_type = Field(type=str, required=True)
    configurable_call_type = Field(type=str, required=False)
    alternate_call_indicator = Field(type=str, required=False)
    virtual_on_net_call_type = Field(type=str, required=False)
    time = Field(type=str, required=True)
    start_time = Field(type=int, required=True)
    answer_time = Field(type=int, required=False)
    release_time = Field(type=int, required=False)
    detached_time = Field(type=int, required=False)
    detached_answer_time = Field(type=int, required=False)
    outgoing_dnis = Field(type=str, required=False)
    service_invocation_disposition = Field(type=str, required=False)
    service_invocation_dialed_number = Field(type=str, required=False)
    service_invocation_called_number = Field(type=str, required=False)
    service_invocation_network_translated_address = Field(type=str, required=False)
    service_invocation_type_of_network = Field(type=str, required=False)
    service_invocation_call_category = Field(type=str, required=False)
    service_invocation_basic_call_type = Field(type=str, required=False)
    service_invocation_configurable_call_type = Field(type=str, required=False)
    service_invocation_alternate_call_indicator = Field(type=str, required=False)
    service_invocation_virtual_on_net_call_type = Field(type=str, required=False)
    service_invocation_called_directory_name = Field(type=str, required=False)
    service_invocation_called_group_id = Field(type=str, required=False)
    redirecting_number = Field(type=str, required=False)
    redirecting_name = Field(type=str, required=False)
    redirecting_presentation_indicator = Field(type=str, required=False)
    redirecting_reason = Field(type=str, required=False)
    account_authorization_code = Field(type=str, required=False)
    call_authorization_code = Field(type=str, required=False)
    user_group_id = Field(type=str, required=False)
    user_id = Field(type=str, required=False)
    user_primary_dn = Field(type=str, required=False)
    user_primary_extension = Field(type=str, required=False)
    security_classification = Field(type=str, required=False)


class ExtendedMixedCallLogsEntry21sp1(OCIType):
    """
    Extended Call Log entry describing a placed, received, or missed call.
    "countryCode" is the user's country code
    The following time elements are represented as timestamp, i.e., the number of milliseconds
    since January 1, 1970, 00:00:00 GMT.
    "startTime" represents the time when the system sends out a call invitation
    message (e.g. for
    placed calls) or receives a call invitation message (e.g. for missed/received calls).
    "answerTime" represents the time when the call is answered by the terminating party.
    "detachedTime" represents the time when the call is successfully redirected by
    the system.
    "releaseTime" represents the time when the call is released. This time corresponds to the
    moment the call is released by the system, and not necessarily when one party
    hangs up, since this
    does not always mean the call is released (e.g. Emergency/911 calls).
    The elements "userGroupId", "userId","userPrimaryDn" and "userPrimaryExtension"
    are only returned when the enterprise or group level requests are used.
    The following elements are only used in AS data mode:
      callAuthorizationCode
      securityClassification

    ExtendedMixedCallLogsEntry21sp1 version: only the
    ServiceInvocationDisposition21sp1 name changed.
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("call_id", "callId", str, False, True, False),
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
        ElementInfo("dialed_number", "dialedNumber", str, False, False, False),
        ElementInfo("called_number", "calledNumber", str, False, False, False),
        ElementInfo(
            "network_translated_address",
            "networkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_asserted_number", "callingAssertedNumber", str, False, False, False,
        ),
        ElementInfo(
            "calling_presentation_number",
            "callingPresentationNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_number_source",
            "callingPresentationNumberSource",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_name",
            "callingPresentationName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_indicator",
            "callingPresentationIndicator",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("calling_group_id", "callingGroupId", str, False, False, False),
        ElementInfo(
            "called_directory_name", "calledDirectoryName", str, False, False, False,
        ),
        ElementInfo("called_group_id", "calledGroupId", str, False, False, False),
        ElementInfo("connected_number", "connectedNumber", str, False, False, False),
        ElementInfo(
            "connected_number_source", "connectedNumberSource", str, False, False, False,
        ),
        ElementInfo("connected_name", "connectedName", str, False, False, False),
        ElementInfo(
            "connected_presentation_indicator",
            "connectedPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("type_of_network", "typeOfNetwork", str, False, False, False),
        ElementInfo("call_category", "callCategory", str, False, False, False),
        ElementInfo("basic_call_type", "basicCallType", str, False, True, False),
        ElementInfo(
            "configurable_call_type", "configurableCallType", str, False, False, False,
        ),
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type", "virtualOnNetCallType", str, False, False, False,
        ),
        ElementInfo("time", "time", str, False, True, False),
        ElementInfo("start_time", "startTime", int, False, True, False),
        ElementInfo("answer_time", "answerTime", int, False, False, False),
        ElementInfo("release_time", "releaseTime", int, False, False, False),
        ElementInfo("detached_time", "detachedTime", int, False, False, False),
        ElementInfo(
            "detached_answer_time", "detachedAnswerTime", int, False, False, False,
        ),
        ElementInfo("outgoing_dnis", "outgoingDnis", str, False, False, False),
        ElementInfo(
            "service_invocation_disposition",
            "serviceInvocationDisposition",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_dialed_number",
            "serviceInvocationDialedNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_number",
            "serviceInvocationCalledNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_network_translated_address",
            "serviceInvocationNetworkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_type_of_network",
            "serviceInvocationTypeOfNetwork",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_call_category",
            "serviceInvocationCallCategory",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_basic_call_type",
            "serviceInvocationBasicCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_configurable_call_type",
            "serviceInvocationConfigurableCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_alternate_call_indicator",
            "serviceInvocationAlternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_virtual_on_net_call_type",
            "serviceInvocationVirtualOnNetCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_directory_name",
            "serviceInvocationCalledDirectoryName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_group_id",
            "serviceInvocationCalledGroupId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_number", "redirectingNumber", str, False, False, False,
        ),
        ElementInfo("redirecting_name", "redirectingName", str, False, False, False),
        ElementInfo(
            "redirecting_presentation_indicator",
            "redirectingPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_reason", "RedirectingReason", str, False, False, False,
        ),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code", "callAuthorizationCode", str, False, False, False,
        ),
        ElementInfo("user_group_id", "userGroupId", str, False, False, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("user_primary_dn", "userPrimaryDn", str, False, False, False),
        ElementInfo(
            "user_primary_extension", "userPrimaryExtension", str, False, False, False,
        ),
        ElementInfo(
            "security_classification",
            "securityClassification",
            str,
            False,
            False,
            False,
        ),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=True)
    call_log_id = Field(type=str, required=True)
    call_id = Field(type=str, required=True)
    subscriber_type = Field(type=str, required=True)
    dialed_number = Field(type=str, required=False)
    called_number = Field(type=str, required=False)
    network_translated_address = Field(type=str, required=False)
    calling_asserted_number = Field(type=str, required=False)
    calling_presentation_number = Field(type=str, required=False)
    calling_presentation_number_source = Field(type=str, required=False)
    calling_presentation_name = Field(type=str, required=False)
    calling_presentation_indicator = Field(type=str, required=True)
    calling_group_id = Field(type=str, required=False)
    called_directory_name = Field(type=str, required=False)
    called_group_id = Field(type=str, required=False)
    connected_number = Field(type=str, required=False)
    connected_number_source = Field(type=str, required=False)
    connected_name = Field(type=str, required=False)
    connected_presentation_indicator = Field(type=str, required=False)
    type_of_network = Field(type=str, required=False)
    call_category = Field(type=str, required=False)
    basic_call_type = Field(type=str, required=True)
    configurable_call_type = Field(type=str, required=False)
    alternate_call_indicator = Field(type=str, required=False)
    virtual_on_net_call_type = Field(type=str, required=False)
    time = Field(type=str, required=True)
    start_time = Field(type=int, required=True)
    answer_time = Field(type=int, required=False)
    release_time = Field(type=int, required=False)
    detached_time = Field(type=int, required=False)
    detached_answer_time = Field(type=int, required=False)
    outgoing_dnis = Field(type=str, required=False)
    service_invocation_disposition = Field(type=str, required=False)
    service_invocation_dialed_number = Field(type=str, required=False)
    service_invocation_called_number = Field(type=str, required=False)
    service_invocation_network_translated_address = Field(type=str, required=False)
    service_invocation_type_of_network = Field(type=str, required=False)
    service_invocation_call_category = Field(type=str, required=False)
    service_invocation_basic_call_type = Field(type=str, required=False)
    service_invocation_configurable_call_type = Field(type=str, required=False)
    service_invocation_alternate_call_indicator = Field(type=str, required=False)
    service_invocation_virtual_on_net_call_type = Field(type=str, required=False)
    service_invocation_called_directory_name = Field(type=str, required=False)
    service_invocation_called_group_id = Field(type=str, required=False)
    redirecting_number = Field(type=str, required=False)
    redirecting_name = Field(type=str, required=False)
    redirecting_presentation_indicator = Field(type=str, required=False)
    redirecting_reason = Field(type=str, required=False)
    account_authorization_code = Field(type=str, required=False)
    call_authorization_code = Field(type=str, required=False)
    user_group_id = Field(type=str, required=False)
    user_id = Field(type=str, required=False)
    user_primary_dn = Field(type=str, required=False)
    user_primary_extension = Field(type=str, required=False)
    security_classification = Field(type=str, required=False)


class ExtendedMixedCallLogsEntry21sp1V2(OCIType):
    """
    Extended Call Log entry describing a placed, received, or missed call.
    "countryCode" is the user's country code
    The following time elements are represented as timestamp, i.e., the number of milliseconds
    since January 1, 1970, 00:00:00 GMT.
    "startTime" represents the time when the system sends out a call invitation
    message (e.g. for
    placed calls) or receives a call invitation message (e.g. for missed/received calls).
    "answerTime" represents the time when the call is answered by the terminating party.
    "detachedTime" represents the time when the call is successfully redirected by
    the system.
    "releaseTime" represents the time when the call is released. This time corresponds to the
    moment the call is released by the system, and not necessarily when one party
    hangs up, since this
    does not always mean the call is released (e.g. Emergency/911 calls).
    The elements "userGroupId", "userId","userPrimaryDn" and "userPrimaryExtension"
    are only returned when the enterprise or group level requests are used.
    The following elements are only used in AS data mode:
      callAuthorizationCode
      securityClassification

    ExtendedMixedCallLogsEntry21sp1 version: only the
    ServiceInvocationDisposition21sp1 name changed.
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("call_id", "callId", str, False, True, False),
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
        ElementInfo("dialed_number", "dialedNumber", str, False, False, False),
        ElementInfo("called_number", "calledNumber", str, False, False, False),
        ElementInfo(
            "network_translated_address",
            "networkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_asserted_number", "callingAssertedNumber", str, False, False, False,
        ),
        ElementInfo(
            "calling_presentation_number",
            "callingPresentationNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_number_source",
            "callingPresentationNumberSource",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_name",
            "callingPresentationName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_indicator",
            "callingPresentationIndicator",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("calling_group_id", "callingGroupId", str, False, False, False),
        ElementInfo(
            "called_directory_name", "calledDirectoryName", str, False, False, False,
        ),
        ElementInfo("called_group_id", "calledGroupId", str, False, False, False),
        ElementInfo("connected_number", "connectedNumber", str, False, False, False),
        ElementInfo(
            "connected_number_source", "connectedNumberSource", str, False, False, False,
        ),
        ElementInfo("connected_name", "connectedName", str, False, False, False),
        ElementInfo(
            "connected_presentation_indicator",
            "connectedPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("type_of_network", "typeOfNetwork", str, False, False, False),
        ElementInfo("call_category", "callCategory", str, False, False, False),
        ElementInfo("basic_call_type", "basicCallType", str, False, True, False),
        ElementInfo(
            "configurable_call_type", "configurableCallType", str, False, False, False,
        ),
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type", "virtualOnNetCallType", str, False, False, False,
        ),
        ElementInfo("time", "time", str, False, True, False),
        ElementInfo("start_time", "startTime", int, False, True, False),
        ElementInfo("answer_time", "answerTime", int, False, False, False),
        ElementInfo("release_time", "releaseTime", int, False, False, False),
        ElementInfo("detached_time", "detachedTime", int, False, False, False),
        ElementInfo(
            "detached_answer_time", "detachedAnswerTime", int, False, False, False,
        ),
        ElementInfo("outgoing_dnis", "outgoingDnis", str, False, False, False),
        ElementInfo(
            "service_invocation_disposition",
            "serviceInvocationDisposition",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_dialed_number",
            "serviceInvocationDialedNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_number",
            "serviceInvocationCalledNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_network_translated_address",
            "serviceInvocationNetworkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_type_of_network",
            "serviceInvocationTypeOfNetwork",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_call_category",
            "serviceInvocationCallCategory",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_basic_call_type",
            "serviceInvocationBasicCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_configurable_call_type",
            "serviceInvocationConfigurableCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_alternate_call_indicator",
            "serviceInvocationAlternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_virtual_on_net_call_type",
            "serviceInvocationVirtualOnNetCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_directory_name",
            "serviceInvocationCalledDirectoryName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_group_id",
            "serviceInvocationCalledGroupId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_number", "redirectingNumber", str, False, False, False,
        ),
        ElementInfo("redirecting_name", "redirectingName", str, False, False, False),
        ElementInfo(
            "redirecting_presentation_indicator",
            "redirectingPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_reason", "RedirectingReason", str, False, False, False,
        ),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code", "callAuthorizationCode", str, False, False, False,
        ),
        ElementInfo("user_group_id", "userGroupId", str, False, False, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("user_primary_dn", "userPrimaryDn", str, False, False, False),
        ElementInfo(
            "user_primary_extension", "userPrimaryExtension", str, False, False, False,
        ),
        ElementInfo(
            "security_classification",
            "securityClassification",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "direct_route_number", "directRouteNumber", str, False, False, False,
        ),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=True)
    call_log_id = Field(type=str, required=True)
    call_id = Field(type=str, required=True)
    subscriber_type = Field(type=str, required=True)
    dialed_number = Field(type=str, required=False)
    called_number = Field(type=str, required=False)
    network_translated_address = Field(type=str, required=False)
    calling_asserted_number = Field(type=str, required=False)
    calling_presentation_number = Field(type=str, required=False)
    calling_presentation_number_source = Field(type=str, required=False)
    calling_presentation_name = Field(type=str, required=False)
    calling_presentation_indicator = Field(type=str, required=True)
    calling_group_id = Field(type=str, required=False)
    called_directory_name = Field(type=str, required=False)
    called_group_id = Field(type=str, required=False)
    connected_number = Field(type=str, required=False)
    connected_number_source = Field(type=str, required=False)
    connected_name = Field(type=str, required=False)
    connected_presentation_indicator = Field(type=str, required=False)
    type_of_network = Field(type=str, required=False)
    call_category = Field(type=str, required=False)
    basic_call_type = Field(type=str, required=True)
    configurable_call_type = Field(type=str, required=False)
    alternate_call_indicator = Field(type=str, required=False)
    virtual_on_net_call_type = Field(type=str, required=False)
    time = Field(type=str, required=True)
    start_time = Field(type=int, required=True)
    answer_time = Field(type=int, required=False)
    release_time = Field(type=int, required=False)
    detached_time = Field(type=int, required=False)
    detached_answer_time = Field(type=int, required=False)
    outgoing_dnis = Field(type=str, required=False)
    service_invocation_disposition = Field(type=str, required=False)
    service_invocation_dialed_number = Field(type=str, required=False)
    service_invocation_called_number = Field(type=str, required=False)
    service_invocation_network_translated_address = Field(type=str, required=False)
    service_invocation_type_of_network = Field(type=str, required=False)
    service_invocation_call_category = Field(type=str, required=False)
    service_invocation_basic_call_type = Field(type=str, required=False)
    service_invocation_configurable_call_type = Field(type=str, required=False)
    service_invocation_alternate_call_indicator = Field(type=str, required=False)
    service_invocation_virtual_on_net_call_type = Field(type=str, required=False)
    service_invocation_called_directory_name = Field(type=str, required=False)
    service_invocation_called_group_id = Field(type=str, required=False)
    redirecting_number = Field(type=str, required=False)
    redirecting_name = Field(type=str, required=False)
    redirecting_presentation_indicator = Field(type=str, required=False)
    redirecting_reason = Field(type=str, required=False)
    account_authorization_code = Field(type=str, required=False)
    call_authorization_code = Field(type=str, required=False)
    user_group_id = Field(type=str, required=False)
    user_id = Field(type=str, required=False)
    user_primary_dn = Field(type=str, required=False)
    user_primary_extension = Field(type=str, required=False)
    security_classification = Field(type=str, required=False)
    direct_route_number = Field(type=str, required=False)


class ExtendedMixedCallLogsEntry22(OCIType):
    """
    Extended Call Log entry describing a placed, received, or missed call.
    "countryCode" is the user's country code
    The following time elements are represented as timestamp, i.e., the number of milliseconds
    since January 1, 1970, 00:00:00 GMT.
    "startTime" represents the time when the system sends out a call invitation
    message (e.g. for
    placed calls) or receives a call invitation message (e.g. for missed/received calls).
    "answerTime" represents the time when the call is answered by the terminating party.
    "detachedTime" represents the time when the call is successfully redirected by
    the system.
    "releaseTime" represents the time when the call is released. This time corresponds to the
    moment the call is released by the system, and not necessarily when one party
    hangs up, since this
    does not always mean the call is released (e.g. Emergency/911 calls).
    The elements "userGroupId", "userId","userPrimaryDn" and "userPrimaryExtension"
    are only returned when the enterprise or group level requests are used.
    The following elements are only used in AS data mode:
      callAuthorizationCode
      securityClassification

    ExtendedMixedCallLogsEntry21sp1 version: only the
    ServiceInvocationDisposition21sp1 name changed.
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("call_id", "callId", str, False, True, False),
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
        ElementInfo("dialed_number", "dialedNumber", str, False, False, False),
        ElementInfo("called_number", "calledNumber", str, False, False, False),
        ElementInfo(
            "network_translated_address",
            "networkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_asserted_number", "callingAssertedNumber", str, False, False, False,
        ),
        ElementInfo(
            "calling_presentation_number",
            "callingPresentationNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_number_source",
            "callingPresentationNumberSource",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_name",
            "callingPresentationName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_presentation_indicator",
            "callingPresentationIndicator",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("calling_group_id", "callingGroupId", str, False, False, False),
        ElementInfo(
            "called_directory_name", "calledDirectoryName", str, False, False, False,
        ),
        ElementInfo("called_group_id", "calledGroupId", str, False, False, False),
        ElementInfo("connected_number", "connectedNumber", str, False, False, False),
        ElementInfo(
            "connected_number_source", "connectedNumberSource", str, False, False, False,
        ),
        ElementInfo("connected_name", "connectedName", str, False, False, False),
        ElementInfo(
            "connected_presentation_indicator",
            "connectedPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("type_of_network", "typeOfNetwork", str, False, False, False),
        ElementInfo("call_category", "callCategory", str, False, False, False),
        ElementInfo("basic_call_type", "basicCallType", str, False, True, False),
        ElementInfo(
            "configurable_call_type", "configurableCallType", str, False, False, False,
        ),
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type", "virtualOnNetCallType", str, False, False, False,
        ),
        ElementInfo("time", "time", str, False, True, False),
        ElementInfo("start_time", "startTime", int, False, True, False),
        ElementInfo("answer_time", "answerTime", int, False, False, False),
        ElementInfo("release_time", "releaseTime", int, False, False, False),
        ElementInfo("detached_time", "detachedTime", int, False, False, False),
        ElementInfo(
            "detached_answer_time", "detachedAnswerTime", int, False, False, False,
        ),
        ElementInfo("outgoing_dnis", "outgoingDnis", str, False, False, False),
        ElementInfo(
            "service_invocation_disposition",
            "serviceInvocationDisposition",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_dialed_number",
            "serviceInvocationDialedNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_number",
            "serviceInvocationCalledNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_network_translated_address",
            "serviceInvocationNetworkTranslatedAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_type_of_network",
            "serviceInvocationTypeOfNetwork",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_call_category",
            "serviceInvocationCallCategory",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_basic_call_type",
            "serviceInvocationBasicCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_configurable_call_type",
            "serviceInvocationConfigurableCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_alternate_call_indicator",
            "serviceInvocationAlternateCallIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_virtual_on_net_call_type",
            "serviceInvocationVirtualOnNetCallType",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_directory_name",
            "serviceInvocationCalledDirectoryName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "service_invocation_called_group_id",
            "serviceInvocationCalledGroupId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_number", "redirectingNumber", str, False, False, False,
        ),
        ElementInfo("redirecting_name", "redirectingName", str, False, False, False),
        ElementInfo(
            "redirecting_presentation_indicator",
            "redirectingPresentationIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_reason", "RedirectingReason", str, False, False, False,
        ),
        ElementInfo(
            "account_authorization_code",
            "accountAuthorizationCode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code", "callAuthorizationCode", str, False, False, False,
        ),
        ElementInfo("user_group_id", "userGroupId", str, False, False, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("user_primary_dn", "userPrimaryDn", str, False, False, False),
        ElementInfo(
            "user_primary_extension", "userPrimaryExtension", str, False, False, False,
        ),
        ElementInfo(
            "security_classification",
            "securityClassification",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "direct_route_number", "directRouteNumber", str, False, False, False,
        ),
        ElementInfo("route_list_dn", "routeListDN", str, False, False, False),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=True)
    call_log_id = Field(type=str, required=True)
    call_id = Field(type=str, required=True)
    subscriber_type = Field(type=str, required=True)
    dialed_number = Field(type=str, required=False)
    called_number = Field(type=str, required=False)
    network_translated_address = Field(type=str, required=False)
    calling_asserted_number = Field(type=str, required=False)
    calling_presentation_number = Field(type=str, required=False)
    calling_presentation_number_source = Field(type=str, required=False)
    calling_presentation_name = Field(type=str, required=False)
    calling_presentation_indicator = Field(type=str, required=True)
    calling_group_id = Field(type=str, required=False)
    called_directory_name = Field(type=str, required=False)
    called_group_id = Field(type=str, required=False)
    connected_number = Field(type=str, required=False)
    connected_number_source = Field(type=str, required=False)
    connected_name = Field(type=str, required=False)
    connected_presentation_indicator = Field(type=str, required=False)
    type_of_network = Field(type=str, required=False)
    call_category = Field(type=str, required=False)
    basic_call_type = Field(type=str, required=True)
    configurable_call_type = Field(type=str, required=False)
    alternate_call_indicator = Field(type=str, required=False)
    virtual_on_net_call_type = Field(type=str, required=False)
    time = Field(type=str, required=True)
    start_time = Field(type=int, required=True)
    answer_time = Field(type=int, required=False)
    release_time = Field(type=int, required=False)
    detached_time = Field(type=int, required=False)
    detached_answer_time = Field(type=int, required=False)
    outgoing_dnis = Field(type=str, required=False)
    service_invocation_disposition = Field(type=str, required=False)
    service_invocation_dialed_number = Field(type=str, required=False)
    service_invocation_called_number = Field(type=str, required=False)
    service_invocation_network_translated_address = Field(type=str, required=False)
    service_invocation_type_of_network = Field(type=str, required=False)
    service_invocation_call_category = Field(type=str, required=False)
    service_invocation_basic_call_type = Field(type=str, required=False)
    service_invocation_configurable_call_type = Field(type=str, required=False)
    service_invocation_alternate_call_indicator = Field(type=str, required=False)
    service_invocation_virtual_on_net_call_type = Field(type=str, required=False)
    service_invocation_called_directory_name = Field(type=str, required=False)
    service_invocation_called_group_id = Field(type=str, required=False)
    redirecting_number = Field(type=str, required=False)
    redirecting_name = Field(type=str, required=False)
    redirecting_presentation_indicator = Field(type=str, required=False)
    redirecting_reason = Field(type=str, required=False)
    account_authorization_code = Field(type=str, required=False)
    call_authorization_code = Field(type=str, required=False)
    user_group_id = Field(type=str, required=False)
    user_id = Field(type=str, required=False)
    user_primary_dn = Field(type=str, required=False)
    user_primary_extension = Field(type=str, required=False)
    security_classification = Field(type=str, required=False)
    direct_route_number = Field(type=str, required=False)
    route_list_dn = Field(type=str, required=False)


class ExtensionRange(OCIType):
    """
    Extension range. The minimum and maximum values are inclusive.
    """

    ELEMENTS = (
        ElementInfo("min_extension", "minExtension", str, False, True, False),
        ElementInfo("max_extension", "maxExtension", str, False, True, False),
    )
    min_extension = Field(type=str, required=True)
    max_extension = Field(type=str, required=True)


class ExtensionRange17(OCIType):
    """
    Extension range. The minimum and maximum values are inclusive.
    """

    ELEMENTS = (
        ElementInfo("min_extension", "minExtension", str, False, True, False),
        ElementInfo("max_extension", "maxExtension", str, False, True, False),
    )
    min_extension = Field(type=str, required=True)
    max_extension = Field(type=str, required=True)


class FaxMessagingMenuKeysModifyEntry(OCIType):
    """
    The voice portal fax messaging menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "save_fax_message_and_skip_to_next",
            "saveFaxMessageAndSkipToNext",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "previous_fax_message", "previousFaxMessage", str, False, False, False,
        ),
        ElementInfo("play_envelope", "playEnvelope", str, False, False, False),
        ElementInfo("next_fax_message", "nextFaxMessage", str, False, False, False),
        ElementInfo("delete_fax_message", "deleteFaxMessage", str, False, False, False),
        ElementInfo("print_fax_message", "printFaxMessage", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
    )
    save_fax_message_and_skip_to_next = Field(type=str, required=False)
    previous_fax_message = Field(type=str, required=False)
    play_envelope = Field(type=str, required=False)
    next_fax_message = Field(type=str, required=False)
    delete_fax_message = Field(type=str, required=False)
    print_fax_message = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)


class FaxMessagingMenuKeysReadEntry(OCIType):
    """
    The voice portal fax messaging menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "save_fax_message_and_skip_to_next",
            "saveFaxMessageAndSkipToNext",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "previous_fax_message", "previousFaxMessage", str, False, False, False,
        ),
        ElementInfo("play_envelope", "playEnvelope", str, False, False, False),
        ElementInfo("next_fax_message", "nextFaxMessage", str, False, False, False),
        ElementInfo("delete_fax_message", "deleteFaxMessage", str, False, False, False),
        ElementInfo("print_fax_message", "printFaxMessage", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
    )
    save_fax_message_and_skip_to_next = Field(type=str, required=False)
    previous_fax_message = Field(type=str, required=False)
    play_envelope = Field(type=str, required=False)
    next_fax_message = Field(type=str, required=False)
    delete_fax_message = Field(type=str, required=False)
    print_fax_message = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)


class FeatureAccessCodeEntry(OCIType):
    """
    Feature Access Code Entry
    """

    ELEMENTS = (
        ElementInfo(
            "feature_access_code_name", "featureAccessCodeName", str, False, True, False,
        ),
        ElementInfo("main_code", "mainCode", str, False, False, False),
        ElementInfo("alternate_code", "alternateCode", str, False, False, False),
    )
    feature_access_code_name = Field(type=str, required=True)
    main_code = Field(type=str, required=False)
    alternate_code = Field(type=str, required=False)


class FeatureAccessCodeModifyEntry(OCIType):
    """
    Feature Access Code Entry to be used in all the system, service provider and
      group modify commands.
    """

    ELEMENTS = (
        ElementInfo(
            "feature_access_code_name", "featureAccessCodeName", str, False, True, False,
        ),
        ElementInfo("main_code", "mainCode", str, False, False, False),
        ElementInfo("alternate_code", "alternateCode", str, False, False, False),
        ElementInfo("enable_fac", "enableFAC", bool, False, False, False),
    )
    feature_access_code_name = Field(type=str, required=True)
    main_code = Field(type=str, required=False)
    alternate_code = Field(type=str, required=False)
    enable_fac = Field(type=bool, required=False)


class FeatureAccessCodeReadEntry(OCIType):
    """
    Feature Access Code Entry to be used in all GET commands.
    """

    ELEMENTS = (
        ElementInfo(
            "feature_access_code_name", "featureAccessCodeName", str, False, True, False,
        ),
        ElementInfo("main_code", "mainCode", str, False, False, False),
        ElementInfo("alternate_code", "alternateCode", str, False, False, False),
        ElementInfo("enable_fac", "enableFAC", bool, False, False, False),
    )
    feature_access_code_name = Field(type=str, required=True)
    main_code = Field(type=str, required=False)
    alternate_code = Field(type=str, required=False)
    enable_fac = Field(type=bool, required=False)


class FileRepositoryProtocolFTP(OCIType):
    """
     Attributes of the FTP protocol when the file repository interface is using FTP.
    """

    ELEMENTS = (
        ElementInfo("ftp_passive", "ftpPassive", bool, False, True, False),
        ElementInfo("net_address", "netAddress", str, False, True, False),
    )
    ftp_passive = Field(type=bool, required=True)
    net_address = Field(type=str, required=True)


class FileRepositoryProtocolFTP16(OCIType):
    """
    Attributes of the FTP protocol when the file repository interface is using FTP.
    """

    ELEMENTS = (
        ElementInfo("ftp_passive", "ftpPassive", bool, False, True, False),
        ElementInfo("net_address", "netAddress", str, False, True, False),
        ElementInfo(
            "ftp_remote_verification", "ftpRemoteVerification", bool, False, True, False,
        ),
    )
    ftp_passive = Field(type=bool, required=True)
    net_address = Field(type=str, required=True)
    ftp_remote_verification = Field(type=bool, required=True)


class FileRepositoryProtocolWebDAV(OCIType):
    """
    Attributes of the WebDav protocol when the file repository interface is using WebDav.
    """

    ELEMENTS = (
        ElementInfo("secure", "secure", bool, False, True, False),
        ElementInfo("net_address", "netAddress", str, False, True, False),
    )
    secure = Field(type=bool, required=True)
    net_address = Field(type=str, required=True)


class FileRepositoryProtocolWebDAV20(OCIType):
    """
    Attributes of the WebDav protocol when the file repository interface is using WebDav.
    """

    ELEMENTS = (
        ElementInfo("secure", "secure", bool, False, True, False),
        ElementInfo("net_address", "netAddress", str, False, True, False),
        ElementInfo(
            "extended_file_capture_support",
            "extendedFileCaptureSupport",
            bool,
            False,
            True,
            False,
        ),
    )
    secure = Field(type=bool, required=True)
    net_address = Field(type=str, required=True)
    extended_file_capture_support = Field(type=bool, required=True)


class FileResource(OCIType):
    """
    Represents either an existing file for the application server to use, or
    the contents of a file to transfer.
    """

    ELEMENTS = (
        ElementInfo("source_file_name", "sourceFileName", str, False, True, False),
        ElementInfo("file_content", "fileContent", str, False, True, False),
    )
    source_file_name = Field(type=str, required=True)
    file_content = Field(type=str, required=True)


class FindMeFollowMeAlertingGroupReplacementOutgoingDNSIPURIorUserIdList(OCIType):
    """
    A list of phone numbers/sipuris or user ids that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("user_id", "userId", str, False, True, False),
    )
    phone_number = Field(type=str, required=True)
    user_id = Field(type=str, required=True)


class ForwardOrComposeMessageMenuKeysModifyEntry(OCIType):
    """
    The voice portal forward or compose message menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("send_to_person", "sendToPerson", str, False, False, False),
        ElementInfo(
            "send_to_all_group_members",
            "sendToAllGroupMembers",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "send_to_distribution_list",
            "sendToDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "change_current_introduction_or_message",
            "changeCurrentIntroductionOrMessage",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_current_introduction_or_message",
            "listenToCurrentIntroductionOrMessage",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_or_clear_urgent_indicator",
            "setOrClearUrgentIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_or_clear_confidential_indicator",
            "setOrClearConfidentialIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    send_to_person = Field(type=str, required=False)
    send_to_all_group_members = Field(type=str, required=False)
    send_to_distribution_list = Field(type=str, required=False)
    change_current_introduction_or_message = Field(type=str, required=False)
    listen_to_current_introduction_or_message = Field(type=str, required=False)
    set_or_clear_urgent_indicator = Field(type=str, required=False)
    set_or_clear_confidential_indicator = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class ForwardOrComposeMessageMenuKeysReadEntry(OCIType):
    """
    The voice portal forward or compose message menu keys.
    """

    ELEMENTS = (
        ElementInfo("send_to_person", "sendToPerson", str, False, False, False),
        ElementInfo(
            "send_to_all_group_members",
            "sendToAllGroupMembers",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "send_to_distribution_list",
            "sendToDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "change_current_introduction_or_message",
            "changeCurrentIntroductionOrMessage",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_current_introduction_or_message",
            "listenToCurrentIntroductionOrMessage",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_or_clear_urgent_indicator",
            "setOrClearUrgentIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_or_clear_confidential_indicator",
            "setOrClearConfidentialIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    send_to_person = Field(type=str, required=False)
    send_to_all_group_members = Field(type=str, required=False)
    send_to_distribution_list = Field(type=str, required=False)
    change_current_introduction_or_message = Field(type=str, required=False)
    listen_to_current_introduction_or_message = Field(type=str, required=False)
    set_or_clear_urgent_indicator = Field(type=str, required=False)
    set_or_clear_confidential_indicator = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class GETSInhibitedAvpCodeKey(OCIType):
    """
    The GETS inhibited Avp code entry.
    """

    ELEMENTS = (
        ElementInfo("avp_code", "avpCode", int, False, True, False),
        ElementInfo("vendor_id", "vendorId", int, False, True, False),
    )
    avp_code = Field(type=int, required=True)
    vendor_id = Field(type=int, required=True)


class GETSSessionPriorityMapEntry(OCIType):
    """
    The GETS session priority map entry.
    """

    ELEMENTS = (
        ElementInfo("priority_level", "priorityLevel", int, False, True, False),
        ElementInfo("session_priority", "sessionPriority", int, False, True, False),
    )
    priority_level = Field(type=int, required=True)
    session_priority = Field(type=int, required=True)


class GatewayRouteIdentity(OCIType):
    """
    Represents either a dtg identity or a trunk identity
    """

    ELEMENTS = (
        ElementInfo("dtg_identity", "dtgIdentity", str, False, True, False),
        ElementInfo("trunk_identity", "trunkIdentity", str, False, True, False),
    )
    dtg_identity = Field(type=str, required=True)
    trunk_identity = Field(type=str, required=True)


class GreetingOnlyForwardingDestinationMenuKeysModifyEntry(OCIType):
    """
    The voice portal greeting only forwarding destination menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "greeting_only_forwarding_destination",
            "greetingOnlyForwardingDestination",
            str,
            False,
            False,
            False,
        ),
    )
    greeting_only_forwarding_destination = Field(type=str, required=False)


class GreetingOnlyForwardingDestinationMenuKeysReadEntry(OCIType):
    """
    The voice portal greeting only forwarding destination menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "greeting_only_forwarding_destination",
            "greetingOnlyForwardingDestination",
            str,
            False,
            False,
            False,
        ),
    )
    greeting_only_forwarding_destination = Field(type=str, required=False)


class GreetingsMenuKeysModifyEntry(OCIType):
    """
    The voice portal greeting menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo(
            "conference_greeting", "conferenceGreeting", str, False, False, False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    personalized_name = Field(type=str, required=False)
    conference_greeting = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class GreetingsMenuKeysReadEntry(OCIType):
    """
    The voice portal greeting menu keys.
    """

    ELEMENTS = (
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo(
            "conference_greeting", "conferenceGreeting", str, False, False, False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    personalized_name = Field(type=str, required=False)
    conference_greeting = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class GroupAdmin(OCIType):
    """
    The common Group Admin elements.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, False, False),
        ElementInfo("last_name", "lastName", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("language", "language", str, False, False, False),
    )
    user_id = Field(type=str, required=True)
    first_name = Field(type=str, required=False)
    last_name = Field(type=str, required=False)
    password = Field(type=str, required=False)
    language = Field(type=str, required=False)


class GroupBroadWorksMobilityGetRequest21sp1V2(OCIType):
    """
    Get the group's BroadWorks Mobility settings.
    The response is either a GroupBroadWorksMobilityGetResponse21sp1V2 or an ErrorResponse.

    Replaced by GroupBroadWorksMobilityGetRequest22V2.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)


class GroupBroadWorksMobilityGetResponse21sp1V2(OCIType):
    """
    The response to a GroupBroadWorksMobilityGetRequest21sp1V2.

    Replaced by GroupBroadWorksMobilityGetResponse22V2.
    """

    ELEMENTS = (
        ElementInfo("use_setting_level", "useSettingLevel", str, False, True, False),
        ElementInfo(
            "enable_location_services",
            "enableLocationServices",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("enable_msrn_lookup", "enableMSRNLookup", bool, False, True, False),
        ElementInfo(
            "enable_mobile_state_checking",
            "enableMobileStateChecking",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "deny_call_originations", "denyCallOriginations", bool, False, True, False,
        ),
        ElementInfo(
            "deny_call_terminations", "denyCallTerminations", bool, False, True, False,
        ),
        ElementInfo(
            "enable_announcement_suppression",
            "enableAnnouncementSuppression",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_internal_clid_delivery_access_locations",
            "enableInternalCLIDDeliveryAccessLocations",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_enhanced_unreachable_state_checking",
            "enableEnhancedUnreachableStateChecking",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_network_call_barring_status_check",
            "enableNetworkCallBarringStatusCheck",
            bool,
            False,
            True,
            False,
        ),
    )
    use_setting_level = Field(type=str, required=True)
    enable_location_services = Field(type=bool, required=True)
    enable_msrn_lookup = Field(type=bool, required=True)
    enable_mobile_state_checking = Field(type=bool, required=True)
    deny_call_originations = Field(type=bool, required=True)
    deny_call_terminations = Field(type=bool, required=True)
    enable_announcement_suppression = Field(type=bool, required=True)
    enable_internal_clid_delivery_access_locations = Field(type=bool, required=True)
    enable_enhanced_unreachable_state_checking = Field(type=bool, required=True)
    enable_network_call_barring_status_check = Field(type=bool, required=True)


class GroupDepartmentKey(OCIType):
    """
    Uniquely identifies a department defined within a group.
    To uniquely identify a group department, we must know the department name and which
    group contains the department.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    name = Field(type=str, required=True)


class GroupEnterpriseTrunkPriorityWeightedTrunkGroup(OCIType):
    """
    Trunk group details (order and weight) for each trunk group
    """

    ELEMENTS = (
        ElementInfo("trunk_group", "trunkGroup", str, False, True, False),
        ElementInfo("priority", "priority", int, False, True, False),
        ElementInfo("weight", "weight", int, False, True, False),
    )
    trunk_group = Field(type=str, required=True)
    priority = Field(type=int, required=True)
    weight = Field(type=int, required=True)


class GroupExtensionLengthSettings(OCIType):
    """
    Group extension length settings
    """

    ELEMENTS = (
        ElementInfo(
            "min_extension_length", "minExtensionLength", int, False, False, False,
        ),
        ElementInfo(
            "max_extension_length", "maxExtensionLength", int, False, False, False,
        ),
        ElementInfo(
            "default_extension_length",
            "defaultExtensionLength",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_enterprise_extension_length_setting",
            "useEnterpriseExtensionLengthSetting",
            bool,
            False,
            False,
            False,
        ),
    )
    min_extension_length = Field(type=int, required=False)
    max_extension_length = Field(type=int, required=False)
    default_extension_length = Field(type=int, required=False)
    use_enterprise_extension_length_setting = Field(type=bool, required=False)


class GroupHuntGroupGetInstanceRequest17sp1V1(OCIType):
    """
    Request to get all the information of a Hunt Group instance.
    The response is either GroupHuntGroupGetInstanceResponse17sp1V1 or ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
    )
    service_user_id = Field(type=str, required=True)


class GroupPreferredCarrierName(OCIType):
    """
    Group can either use it's service provider/enterprise's preferred carrier or use it's own.
    The group carrier name is exposed if it was previously configured.
    """

    ELEMENTS = (
        ElementInfo(
            "use_service_provider_preferred_carrier",
            "useServiceProviderPreferredCarrier",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("carrier", "carrier", str, False, False, False),
    )
    use_service_provider_preferred_carrier = Field(type=bool, required=True)
    carrier = Field(type=str, required=False)


class GroupPreferredCarrierNameModify(OCIType):
    """
    Group can either use it's service provider/enterprise's preferred carrier or use it's own.
    You can use the Service Provider preferred carrier without clearing the group
    carrier name -- in this case, the group carrier name is retained.
    """

    ELEMENTS = (
        ElementInfo(
            "use_service_provider_preferred_carrier",
            "useServiceProviderPreferredCarrier",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("carrier", "carrier", str, False, False, False),
    )
    use_service_provider_preferred_carrier = Field(type=bool, required=True)
    carrier = Field(type=str, required=False)


class GroupSessionAdmissionControlGroupGetRequest21sp1V2(OCIType):
    """
    Request to get a session admission control group for the group.
    The response is either a GroupSessionAdmissionControlGroupGetResponse21sp1V2 or
    an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    name = Field(type=str, required=True)


class Holiday(OCIType):
    """
    Holiday entry.
    """

    ELEMENTS = (
        ElementInfo("holiday_name", "holidayName", str, False, True, False),
        ElementInfo("start_date", "startDate", str, False, True, False),
        ElementInfo("end_date", "endDate", str, False, False, False),
    )
    holiday_name = Field(type=str, required=True)
    start_date = Field(type=str, required=True)
    end_date = Field(type=str, required=False)


class HolidaySchedule(OCIType):
    """
    Holiday Schedule.
    """

    ELEMENTS = (
        ElementInfo("type", "type", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
    )
    type = Field(type=str, required=True)
    name = Field(type=str, required=True)


class HotelingMenuKeysModifyEntry(OCIType):
    """
    The voice portal hoteling menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("check_host_status", "checkHostStatus", str, False, False, False),
        ElementInfo(
            "associate_with_host", "associateWithHost", str, False, False, False,
        ),
        ElementInfo(
            "disassociate_from_host", "disassociateFromHost", str, False, False, False,
        ),
        ElementInfo(
            "disassociate_from_remote_host",
            "disassociateFromRemoteHost",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    check_host_status = Field(type=str, required=False)
    associate_with_host = Field(type=str, required=False)
    disassociate_from_host = Field(type=str, required=False)
    disassociate_from_remote_host = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class HotelingMenuKeysReadEntry(OCIType):
    """
    The voice portal hoteling menu keys.
    """

    ELEMENTS = (
        ElementInfo("check_host_status", "checkHostStatus", str, False, False, False),
        ElementInfo(
            "associate_with_host", "associateWithHost", str, False, False, False,
        ),
        ElementInfo(
            "disassociate_from_host", "disassociateFromHost", str, False, False, False,
        ),
        ElementInfo(
            "disassociate_from_remote_host",
            "disassociateFromRemoteHost",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    check_host_status = Field(type=str, required=False)
    associate_with_host = Field(type=str, required=False)
    disassociate_from_host = Field(type=str, required=False)
    disassociate_from_remote_host = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class HourMinute(OCIType):
    """
    Represents a specific time with hour and minute granularity
    """

    ELEMENTS = (
        ElementInfo("hour", "hour", int, False, True, False),
        ElementInfo("minute", "minute", int, False, True, False),
    )
    hour = Field(type=int, required=True)
    minute = Field(type=int, required=True)


class HuntAgentWeight(OCIType):
    """
    The weighted call distribution weight for an agent.
    """

    ELEMENTS = (
        ElementInfo("agent_user_id", "agentUserId", str, False, True, False),
        ElementInfo("weight", "weight", int, False, True, False),
    )
    agent_user_id = Field(type=str, required=True)
    weight = Field(type=int, required=True)


class IPAddressRange(OCIType):
    """
    IP Address Range.
    """

    ELEMENTS = (
        ElementInfo("min_ip_address", "minIpAddress", str, False, True, False),
        ElementInfo("max_ip_address", "maxIpAddress", str, False, True, False),
    )
    min_ip_address = Field(type=str, required=True)
    max_ip_address = Field(type=str, required=True)


class IncomingCallingPlanDigitPatternPermission(OCIType):
    """
    Indicates whether calls from specified digit patterns are permitted.
    """

    ELEMENTS = (
        ElementInfo("digit_pattern_name", "digitPatternName", str, False, True, False),
        ElementInfo("allow", "allow", bool, False, True, False),
    )
    digit_pattern_name = Field(type=str, required=True)
    allow = Field(type=bool, required=True)


class InterceptDNListEntry(OCIType):
    """
    Intercept User Entry containing the phone number and a Description.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    phone_number = Field(type=str, required=True)
    description = Field(type=str, required=False)


class InternalReleaseCauseMapEntry(OCIType):
    """
    The internal release cause map entry.
    """

    ELEMENTS = (
        ElementInfo(
            "internal_release_cause", "internalReleaseCause", str, False, True, False,
        ),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
    )
    internal_release_cause = Field(type=str, required=True)
    treatment_id = Field(type=str, required=False)


class LDAPEntryField(OCIType):
    """
    One name value pair for a LDAP entry.
    """

    ELEMENTS = (
        ElementInfo("attribute_name", "attributeName", str, False, True, False),
        ElementInfo("attribute_value", "attributeValue", str, False, False, False),
    )
    attribute_name = Field(type=str, required=True)
    attribute_value = Field(type=str, required=False)


class LDAPPage(OCIType):
    """
    Type to retrieve a particular page or the last page.
    """

    ELEMENTS = (
        ElementInfo("last_page", "lastPage", bool, False, True, False),
        ElementInfo("number", "number", int, False, True, False),
    )
    last_page = Field(type=bool, required=True)
    number = Field(type=int, required=True)


class LabeledFileNameResource(OCIType):
    """
    Represents an existing file for the application server to use, along with
    a description and mediaType.
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, True, False),
        ElementInfo("media_type", "mediaType", str, False, True, False),
        ElementInfo("source_file_name", "sourceFileName", str, False, True, False),
    )
    description = Field(type=str, required=True)
    media_type = Field(type=str, required=True)
    source_file_name = Field(type=str, required=True)


class LabeledFileResource(OCIType):
    """
    Represents either an existing file for the application server to use, or
    the contents of a file to transfer with a description.
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, True, False),
        ElementInfo("source_file_name", "sourceFileName", str, False, True, False),
        ElementInfo("content", "content", str, False, True, False),
    )
    description = Field(type=str, required=True)
    source_file_name = Field(type=str, required=True)
    content = Field(type=str, required=True)


class LabeledMediaFileResource(OCIType):
    """
    Represents either an existing file for the application server to use, or
    the contents of a file to transfer with a description.
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, True, False),
        ElementInfo("media_type", "mediaType", str, False, True, False),
        ElementInfo("source_file_name", "sourceFileName", str, False, True, False),
        ElementInfo("content", "content", str, False, True, False),
    )
    description = Field(type=str, required=True)
    media_type = Field(type=str, required=True)
    source_file_name = Field(type=str, required=True)
    content = Field(type=str, required=True)


class MWIDeliveryToMobileEndpointTemplateActivation(OCIType):
    """
    MWI Delivery To Mobile Endpoint enabled status indicator
    """

    ELEMENTS = (
        ElementInfo("language", "language", str, False, True, False),
        ElementInfo("type", "type", str, False, True, False),
        ElementInfo("is_enabled", "isEnabled", bool, False, True, False),
    )
    language = Field(type=str, required=True)
    type = Field(type=str, required=True)
    is_enabled = Field(type=bool, required=True)


class MWIDeliveryToMobileEndpointTemplateLine(OCIType):
    """
     MWI Delivery To Mobile Endpoint template section associated with a specific tag.
    """

    ELEMENTS = (
        ElementInfo("prefix", "prefix", str, False, False, False),
        ElementInfo("tag", "tag", str, False, False, False),
        ElementInfo("postfix", "postfix", str, False, False, False),
    )
    prefix = Field(type=str, required=False)
    tag = Field(type=str, required=False)
    postfix = Field(type=str, required=False)


class MaliciousCallTraceTimePeriod(OCIType):
    """
    Modify the user level data associated with Malicious Call Trace.
    The response is either a SuccessResponse or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo("start_date_time", "startDateTime", str, False, True, False),
        ElementInfo("stop_date_time", "stopDateTime", str, False, True, False),
    )
    start_date_time = Field(type=str, required=True)
    stop_date_time = Field(type=str, required=True)


class MeetMeConferencingConferenceDuration(OCIType):
    """
    Conference duration.
    """

    ELEMENTS = (
        ElementInfo("hours", "hours", int, False, True, False),
        ElementInfo("minutes", "minutes", int, False, True, False),
    )
    hours = Field(type=int, required=True)
    minutes = Field(type=int, required=True)


class MeetMeConferencingConferenceKey(OCIType):
    """
    Identifier for conference.
    """

    ELEMENTS = (
        ElementInfo("bridge_id", "bridgeId", str, False, True, False),
        ElementInfo("conference_id", "conferenceId", str, False, True, False),
    )
    bridge_id = Field(type=str, required=True)
    conference_id = Field(type=str, required=True)


class MeetMeConferencingConferencePorts(OCIType):
    """
    Number of conference ports. Can either be unlimited or limited to a value between
    0 and 999999.
    """

    ELEMENTS = (
        ElementInfo("unlimited", "unlimited", bool, False, True, False),
        ElementInfo("quantity", "quantity", int, False, True, False),
    )
    unlimited = Field(type=bool, required=True)
    quantity = Field(type=int, required=True)


class MeetMeConferencingConferenceRecordingKey(OCIType):
    """
    Identifier for conference recording. startTime is the recording start timestamp.
    """

    ELEMENTS = (
        ElementInfo("bridge_id", "bridgeId", str, False, True, False),
        ElementInfo("conference_id", "conferenceId", str, False, True, False),
        ElementInfo("start_time", "startTime", str, False, True, False),
    )
    bridge_id = Field(type=str, required=True)
    conference_id = Field(type=str, required=True)
    start_time = Field(type=str, required=True)


class MeetMeConferencingConferenceSchedule(OCIType):
    """
    Conference schedule.
    """

    ELEMENTS = (
        ElementInfo(
            "schedule_reservationless",
            "scheduleReservationless",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "schedule_one_time", "scheduleOneTime", str, True, True, False,
        ),  # unknown
        ElementInfo(
            "schedule_recurring", "scheduleRecurring", str, True, True, False,
        ),  # unknown
    )
    schedule_reservationless = Field(type=str, required=True)
    schedule_one_time = Field(type=str, required=True)
    schedule_recurring = Field(type=str, required=True)


class MessageDepositMenuKeysModifyEntry(OCIType):
    """
    The voice portal message deposit menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "enable_message_deposit", "enableMessageDeposit", str, False, False, False,
        ),
        ElementInfo(
            "disable_message_deposit", "disableMessageDeposit", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_message_deposit_status",
            "listenToMessageDepositStatus",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    enable_message_deposit = Field(type=str, required=False)
    disable_message_deposit = Field(type=str, required=False)
    listen_to_message_deposit_status = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class MessageDepositMenuKeysReadEntry(OCIType):
    """
    The voice portal message deposit menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "enable_message_deposit", "enableMessageDeposit", str, False, False, False,
        ),
        ElementInfo(
            "disable_message_deposit", "disableMessageDeposit", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_message_deposit_status",
            "listenToMessageDepositStatus",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    enable_message_deposit = Field(type=str, required=False)
    disable_message_deposit = Field(type=str, required=False)
    listen_to_message_deposit_status = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class MixedCallLogsEntry(OCIType):
    """
    Call Log entry describing a placed, received, or missed call.
    """

    ELEMENTS = (
        ElementInfo("call_log_type", "callLogType", str, False, True, False),
        ElementInfo("country_code", "countryCode", str, False, False, False),
        ElementInfo("call_log_id", "callLogId", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("time", "time", str, False, True, False),
    )
    call_log_type = Field(type=str, required=True)
    country_code = Field(type=str, required=False)
    call_log_id = Field(type=str, required=True)
    phone_number = Field(type=str, required=True)
    name = Field(type=str, required=True)
    time = Field(type=str, required=True)


class MusicOnHoldSourceAdd(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceAdd16(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceAdd19sp1(OCIType):
    """
    Contains the music on hold source configuration.

    Replaced by: MusicOnHoldSourceAdd20
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceAdd20(OCIType):
    """
    Contains the music on hold source configuration.
    Replaced by: MusicOnHoldSourceAdd21
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceAdd21(OCIType):
    """
    Contains the music on hold source configuration.
    The following elements are only used in HSS data mode and ignored in AS data mode:
      labeledMediaFiles
    The following elements are only used in AS data mode and ignored in HSS data mode:
      announcementMediaFiles
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "labeled_custom_source_media_files",
            "labeledCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "announcement_custom_source_media_files",
            "announcementCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    labeled_custom_source_media_files = Field(type=str, required=True)
    announcement_custom_source_media_files = Field(type=str, required=True)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceAdd22(OCIType):
    """
    Contains the music on hold source configuration.
    The following elements are only used in HSS data mode and ignored in AS data mode:
      labeledMediaFiles
    The following elements are only used in AS data mode and ignored in HSS data mode:
      announcementMediaFiles
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "labeled_custom_source_media_files",
            "labeledCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "announcement_custom_source_media_files",
            "announcementCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    labeled_custom_source_media_files = Field(type=str, required=True)
    announcement_custom_source_media_files = Field(type=str, required=True)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceModify(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=False)
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceModify16(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=False)
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceModify19sp1(OCIType):
    """
    Contains the music on hold source configuration.

    Replaced by: MusicOnHoldSourceModify20
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=False)
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceModify20(OCIType):
    """
    Contains the music on hold source configuration.
    Replaced by: MusicOnHoldSourceModify21
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=False)
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceModify21(OCIType):
    """
    Contains the music on hold source configuration.
    The following elements are only used in HSS data mode and ignored in AS data mode:
      labeledMediaFiles
    The following elements are only used in AS data mode and ignored in HSS data mode:
      announcementMediaFiles
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "labeled_custom_source_media_files",
            "labeledCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "announcement_custom_source_media_files",
            "announcementCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=False)
    message_source_selection = Field(type=str, required=False)
    labeled_custom_source_media_files = Field(type=str, required=True)
    announcement_custom_source_media_files = Field(type=str, required=True)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceModify22(OCIType):
    """
    Contains the music on hold source configuration.
    The following elements are only used in HSS data mode and ignored in AS data mode:
      labeledMediaFiles
    The following elements are only used in AS data mode and ignored in HSS data mode:
      announcementMediaFiles
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "labeled_custom_source_media_files",
            "labeledCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "announcement_custom_source_media_files",
            "announcementCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=False)
    message_source_selection = Field(type=str, required=False)
    labeled_custom_source_media_files = Field(type=str, required=True)
    announcement_custom_source_media_files = Field(type=str, required=True)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead16(OCIType):
    """
    Contains the music on hold source configuration.

          Replaced by: MusicOnHoldSourceRead19.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead19(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead19sp1(OCIType):
    """
    Contains the music on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead20(OCIType):
    """
    Contains the music on hold source configuration.
    Replaced by: MusicOnHoldSourceRead21
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead21(OCIType):
    """
    Contains the music on hold source configuration.
    The following elements are only used in XS data mode and not returned in AS data mode:
      labeledCustomSourceMediaFiles
    The following elements are only used in AS data mode and not returned in XS data mode:
      announcementMediaFiles
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "labeled_custom_source_media_files",
            "labeledCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "announcement_custom_source_media_files",
            "announcementCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    labeled_custom_source_media_files = Field(type=str, required=True)
    announcement_custom_source_media_files = Field(type=str, required=True)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead22(OCIType):
    """
    Contains the music on hold source configuration.
    The following elements are only used in XS data mode and not returned in AS data mode:
      labeledCustomSourceMediaFiles
    The following elements are only used in AS data mode and not returned in XS data mode:
      announcementMediaFiles
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "labeled_custom_source_media_files",
            "labeledCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "announcement_custom_source_media_files",
            "announcementCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    labeled_custom_source_media_files = Field(type=str, required=True)
    announcement_custom_source_media_files = Field(type=str, required=True)
    external_source = Field(type=str, required=False)


class MusicOnHoldSourceRead22V2(OCIType):
    """
    Contains the music on hold source configuration.
    The following elements are only used in XS data mode and not returned in AS data mode:
      labeledCustomSourceMediaFiles
    The following elements are only used in AS data mode and not returned in XS data mode:
      announcementMediaFiles
    """

    ELEMENTS = (
        ElementInfo(
            "audio_file_preferred_codec",
            "audioFilePreferredCodec",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "labeled_custom_source_media_files",
            "labeledCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "announcement_custom_source_media_files",
            "announcementCustomSourceMediaFiles",
            str,
            True,
            True,
            False,
        ),  # unknown
        ElementInfo(
            "external_source", "externalSource", str, True, False, False,
        ),  # unknown
    )
    audio_file_preferred_codec = Field(type=str, required=True)
    message_source_selection = Field(type=str, required=True)
    labeled_custom_source_media_files = Field(type=str, required=True)
    announcement_custom_source_media_files = Field(type=str, required=True)
    external_source = Field(type=str, required=False)


class MusicOnHoldUserSourceModify(OCIType):
    """
    Contains the music on hold user source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)


class MusicOnHoldUserSourceModify16(OCIType):
    """
    Contains the music on hold user source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)


class MusicOnHoldUserSourceModify20(OCIType):
    """
    Contains the music on hold user source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    message_source_selection = Field(type=str, required=False)
    custom_source = Field(type=str, required=False)


class MusicOnHoldUserSourceRead(OCIType):
    """
    Contains the music on hold user source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)


class MusicOnHoldUserSourceRead16(OCIType):
    """
    Contains the music on hold user source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)


class MusicOnHoldUserSourceRead20(OCIType):
    """
    Contains the music on hold user source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "message_source_selection",
            "messageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "custom_source", "customSource", str, True, False, False,
        ),  # unknown
    )
    message_source_selection = Field(type=str, required=True)
    custom_source = Field(type=str, required=False)


class NSTreatmentMapEntry(OCIType):
    """
    The NS treatment map entry.
    """

    ELEMENTS = (
        ElementInfo("ns_treatment", "nsTreatment", str, False, True, False),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
    )
    ns_treatment = Field(type=str, required=True)
    treatment_id = Field(type=str, required=False)


class NameDialingName(OCIType):
    """
    Name dialing last and first names.
    """

    ELEMENTS = (
        ElementInfo(
            "name_dialing_last_name", "nameDialingLastName", str, False, True, False,
        ),
        ElementInfo(
            "name_dialing_first_name", "nameDialingFirstName", str, False, True, False,
        ),
    )
    name_dialing_last_name = Field(type=str, required=True)
    name_dialing_first_name = Field(type=str, required=True)


class NetworkClassOfServiceCommunicationBarringProfile(OCIType):
    """
    Communication Barring Profile defined as part of the Network Class
    Of Service. There can be only one primary profile within a Network
    Class Of Service.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("is_primary", "isPrimary", bool, False, True, False),
    )
    name = Field(type=str, required=True)
    is_primary = Field(type=bool, required=True)


class OcpCallTypeEntry(OCIType):
    """
    The outgoing call plan call type entry.
    """

    ELEMENTS = (
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("digit_map", "digitMap", str, False, True, False),
        ElementInfo("call_type", "callType", str, False, True, False),
    )
    country_code = Field(type=str, required=True)
    digit_map = Field(type=str, required=True)
    call_type = Field(type=str, required=True)


class OutgoingCallingPlanAuthorizationCodeEntry(OCIType):
    """
    Outgoing Calling Plan Authorization Code.
    """

    ELEMENTS = (
        ElementInfo("code", "code", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    code = Field(type=str, required=True)
    description = Field(type=str, required=False)


class OutgoingCallingPlanCallMeNowPermissions(OCIType):
    """
     Outgoing Calling Plan for Call Me Now call permissions.
    """

    ELEMENTS = (
        ElementInfo("group", "group", bool, False, True, False),
        ElementInfo("local", "local", bool, False, True, False),
        ElementInfo("toll_free", "tollFree", bool, False, True, False),
        ElementInfo("toll", "toll", bool, False, True, False),
        ElementInfo("international", "international", bool, False, True, False),
        ElementInfo("operator_assisted", "operatorAssisted", bool, False, True, False),
        ElementInfo(
            "chargeable_directory_assisted",
            "chargeableDirectoryAssisted",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("special_services_i", "specialServicesI", bool, False, True, False),
        ElementInfo(
            "special_services_ii", "specialServicesII", bool, False, True, False,
        ),
        ElementInfo("premium_services_i", "premiumServicesI", bool, False, True, False),
        ElementInfo(
            "premium_services_ii", "premiumServicesII", bool, False, True, False,
        ),
        ElementInfo("casual", "casual", bool, False, True, False),
        ElementInfo("url_dialing", "urlDialing", bool, False, True, False),
        ElementInfo("unknown", "unknown", bool, False, True, False),
    )
    group = Field(type=bool, required=True)
    local = Field(type=bool, required=True)
    toll_free = Field(type=bool, required=True)
    toll = Field(type=bool, required=True)
    international = Field(type=bool, required=True)
    operator_assisted = Field(type=bool, required=True)
    chargeable_directory_assisted = Field(type=bool, required=True)
    special_services_i = Field(type=bool, required=True)
    special_services_ii = Field(type=bool, required=True)
    premium_services_i = Field(type=bool, required=True)
    premium_services_ii = Field(type=bool, required=True)
    casual = Field(type=bool, required=True)
    url_dialing = Field(type=bool, required=True)
    unknown = Field(type=bool, required=True)


class OutgoingCallingPlanCallMeNowPermissionsModify(OCIType):
    """
     Modify outgoing Calling Plan for Call Me Now call permissions.
    """

    ELEMENTS = (
        ElementInfo("group", "group", bool, False, False, False),
        ElementInfo("local", "local", bool, False, False, False),
        ElementInfo("toll_free", "tollFree", bool, False, False, False),
        ElementInfo("toll", "toll", bool, False, False, False),
        ElementInfo("international", "international", bool, False, False, False),
        ElementInfo("operator_assisted", "operatorAssisted", bool, False, False, False),
        ElementInfo(
            "chargeable_directory_assisted",
            "chargeableDirectoryAssisted",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "special_services_i", "specialServicesI", bool, False, False, False,
        ),
        ElementInfo(
            "special_services_ii", "specialServicesII", bool, False, False, False,
        ),
        ElementInfo(
            "premium_services_i", "premiumServicesI", bool, False, False, False,
        ),
        ElementInfo(
            "premium_services_ii", "premiumServicesII", bool, False, False, False,
        ),
        ElementInfo("casual", "casual", bool, False, False, False),
        ElementInfo("url_dialing", "urlDialing", bool, False, False, False),
        ElementInfo("unknown", "unknown", bool, False, False, False),
    )
    group = Field(type=bool, required=False)
    local = Field(type=bool, required=False)
    toll_free = Field(type=bool, required=False)
    toll = Field(type=bool, required=False)
    international = Field(type=bool, required=False)
    operator_assisted = Field(type=bool, required=False)
    chargeable_directory_assisted = Field(type=bool, required=False)
    special_services_i = Field(type=bool, required=False)
    special_services_ii = Field(type=bool, required=False)
    premium_services_i = Field(type=bool, required=False)
    premium_services_ii = Field(type=bool, required=False)
    casual = Field(type=bool, required=False)
    url_dialing = Field(type=bool, required=False)
    unknown = Field(type=bool, required=False)


class OutgoingCallingPlanDigitPatternCallMeNowPermission(OCIType):
    """
    Indicates whether Call Me Now calls using specified digit patterns are permitted.
    """

    ELEMENTS = (
        ElementInfo("digit_pattern_name", "digitPatternName", str, False, True, False),
        ElementInfo("permission", "permission", bool, False, True, False),
    )
    digit_pattern_name = Field(type=str, required=True)
    permission = Field(type=bool, required=True)


class OutgoingCallingPlanDigitPatternOriginatingPermission(OCIType):
    """
    Indicates whether originating calls using specified digit patterns are permitted.
    """

    ELEMENTS = (
        ElementInfo("digit_pattern_name", "digitPatternName", str, False, True, False),
        ElementInfo("permission", "permission", str, False, True, False),
    )
    digit_pattern_name = Field(type=str, required=True)
    permission = Field(type=str, required=True)


class OutgoingCallingPlanDigitPatternRedirectingPermission(OCIType):
    """
    Indicates whether redirecting calls using specified digit patterns are permitted.
    """

    ELEMENTS = (
        ElementInfo("digit_pattern_name", "digitPatternName", str, False, True, False),
        ElementInfo("permission", "permission", bool, False, True, False),
    )
    digit_pattern_name = Field(type=str, required=True)
    permission = Field(type=bool, required=True)


class OutgoingCallingPlanOriginatingPermissions(OCIType):
    """
    Outgoing Calling Plan originating call permissions.
    """

    ELEMENTS = (
        ElementInfo("group", "group", str, False, True, False),
        ElementInfo("local", "local", str, False, True, False),
        ElementInfo("toll_free", "tollFree", str, False, True, False),
        ElementInfo("toll", "toll", str, False, True, False),
        ElementInfo("international", "international", str, False, True, False),
        ElementInfo("operator_assisted", "operatorAssisted", str, False, True, False),
        ElementInfo(
            "chargeable_directory_assisted",
            "chargeableDirectoryAssisted",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("special_services_i", "specialServicesI", str, False, True, False),
        ElementInfo(
            "special_services_ii", "specialServicesII", str, False, True, False,
        ),
        ElementInfo("premium_services_i", "premiumServicesI", str, False, True, False),
        ElementInfo(
            "premium_services_ii", "premiumServicesII", str, False, True, False,
        ),
        ElementInfo("casual", "casual", str, False, True, False),
        ElementInfo("url_dialing", "urlDialing", str, False, True, False),
        ElementInfo("unknown", "unknown", str, False, True, False),
    )
    group = Field(type=str, required=True)
    local = Field(type=str, required=True)
    toll_free = Field(type=str, required=True)
    toll = Field(type=str, required=True)
    international = Field(type=str, required=True)
    operator_assisted = Field(type=str, required=True)
    chargeable_directory_assisted = Field(type=str, required=True)
    special_services_i = Field(type=str, required=True)
    special_services_ii = Field(type=str, required=True)
    premium_services_i = Field(type=str, required=True)
    premium_services_ii = Field(type=str, required=True)
    casual = Field(type=str, required=True)
    url_dialing = Field(type=str, required=True)
    unknown = Field(type=str, required=True)


class OutgoingCallingPlanOriginatingPermissionsModify(OCIType):
    """
    Outgoing Calling Plan originating call permissions.
    """

    ELEMENTS = (
        ElementInfo("group", "group", str, False, False, False),
        ElementInfo("local", "local", str, False, False, False),
        ElementInfo("toll_free", "tollFree", str, False, False, False),
        ElementInfo("toll", "toll", str, False, False, False),
        ElementInfo("international", "international", str, False, False, False),
        ElementInfo("operator_assisted", "operatorAssisted", str, False, False, False),
        ElementInfo(
            "chargeable_directory_assisted",
            "chargeableDirectoryAssisted",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("special_services_i", "specialServicesI", str, False, False, False),
        ElementInfo(
            "special_services_ii", "specialServicesII", str, False, False, False,
        ),
        ElementInfo("premium_services_i", "premiumServicesI", str, False, False, False),
        ElementInfo(
            "premium_services_ii", "premiumServicesII", str, False, False, False,
        ),
        ElementInfo("casual", "casual", str, False, False, False),
        ElementInfo("url_dialing", "urlDialing", str, False, False, False),
        ElementInfo("unknown", "unknown", str, False, False, False),
    )
    group = Field(type=str, required=False)
    local = Field(type=str, required=False)
    toll_free = Field(type=str, required=False)
    toll = Field(type=str, required=False)
    international = Field(type=str, required=False)
    operator_assisted = Field(type=str, required=False)
    chargeable_directory_assisted = Field(type=str, required=False)
    special_services_i = Field(type=str, required=False)
    special_services_ii = Field(type=str, required=False)
    premium_services_i = Field(type=str, required=False)
    premium_services_ii = Field(type=str, required=False)
    casual = Field(type=str, required=False)
    url_dialing = Field(type=str, required=False)
    unknown = Field(type=str, required=False)


class OutgoingCallingPlanRedirectedPermissions(OCIType):
    """
    Outgoing Calling Plan being forwarded/transferred permissions.
    """

    ELEMENTS = (ElementInfo("outside_group", "outsideGroup", bool, False, True, False),)
    outside_group = Field(type=bool, required=True)


class OutgoingCallingPlanRedirectedPermissionsModify(OCIType):
    """
    Outgoing Calling Plan being forwarded/transferred permissions.
    """

    ELEMENTS = (
        ElementInfo("outside_group", "outsideGroup", bool, False, False, False),
    )
    outside_group = Field(type=bool, required=False)


class OutgoingCallingPlanRedirectingPermissions(OCIType):
    """
    Outgoing Calling Plan initiating call forwards/transfer permissions.
    """

    ELEMENTS = (
        ElementInfo("group", "group", bool, False, True, False),
        ElementInfo("local", "local", bool, False, True, False),
        ElementInfo("toll_free", "tollFree", bool, False, True, False),
        ElementInfo("toll", "toll", bool, False, True, False),
        ElementInfo("international", "international", bool, False, True, False),
        ElementInfo("operator_assisted", "operatorAssisted", bool, False, True, False),
        ElementInfo(
            "chargeable_directory_assisted",
            "chargeableDirectoryAssisted",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("special_services_i", "specialServicesI", bool, False, True, False),
        ElementInfo(
            "special_services_ii", "specialServicesII", bool, False, True, False,
        ),
        ElementInfo("premium_services_i", "premiumServicesI", bool, False, True, False),
        ElementInfo(
            "premium_services_ii", "premiumServicesII", bool, False, True, False,
        ),
        ElementInfo("casual", "casual", bool, False, True, False),
        ElementInfo("url_dialing", "urlDialing", bool, False, True, False),
        ElementInfo("unknown", "unknown", bool, False, True, False),
    )
    group = Field(type=bool, required=True)
    local = Field(type=bool, required=True)
    toll_free = Field(type=bool, required=True)
    toll = Field(type=bool, required=True)
    international = Field(type=bool, required=True)
    operator_assisted = Field(type=bool, required=True)
    chargeable_directory_assisted = Field(type=bool, required=True)
    special_services_i = Field(type=bool, required=True)
    special_services_ii = Field(type=bool, required=True)
    premium_services_i = Field(type=bool, required=True)
    premium_services_ii = Field(type=bool, required=True)
    casual = Field(type=bool, required=True)
    url_dialing = Field(type=bool, required=True)
    unknown = Field(type=bool, required=True)


class OutgoingCallingPlanRedirectingPermissionsModify(OCIType):
    """
    Outgoing Calling Plan initiating call forwards/transfer permissions.
    """

    ELEMENTS = (
        ElementInfo("group", "group", bool, False, False, False),
        ElementInfo("local", "local", bool, False, False, False),
        ElementInfo("toll_free", "tollFree", bool, False, False, False),
        ElementInfo("toll", "toll", bool, False, False, False),
        ElementInfo("international", "international", bool, False, False, False),
        ElementInfo("operator_assisted", "operatorAssisted", bool, False, False, False),
        ElementInfo(
            "chargeable_directory_assisted",
            "chargeableDirectoryAssisted",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "special_services_i", "specialServicesI", bool, False, False, False,
        ),
        ElementInfo(
            "special_services_ii", "specialServicesII", bool, False, False, False,
        ),
        ElementInfo(
            "premium_services_i", "premiumServicesI", bool, False, False, False,
        ),
        ElementInfo(
            "premium_services_ii", "premiumServicesII", bool, False, False, False,
        ),
        ElementInfo("casual", "casual", bool, False, False, False),
        ElementInfo("url_dialing", "urlDialing", bool, False, False, False),
        ElementInfo("unknown", "unknown", bool, False, False, False),
    )
    group = Field(type=bool, required=False)
    local = Field(type=bool, required=False)
    toll_free = Field(type=bool, required=False)
    toll = Field(type=bool, required=False)
    international = Field(type=bool, required=False)
    operator_assisted = Field(type=bool, required=False)
    chargeable_directory_assisted = Field(type=bool, required=False)
    special_services_i = Field(type=bool, required=False)
    special_services_ii = Field(type=bool, required=False)
    premium_services_i = Field(type=bool, required=False)
    premium_services_ii = Field(type=bool, required=False)
    casual = Field(type=bool, required=False)
    url_dialing = Field(type=bool, required=False)
    unknown = Field(type=bool, required=False)


class OutgoingCallingPlanTransferNumbers(OCIType):
    """
    Outgoing Calling Plan transfer numbers.
    """

    ELEMENTS = (
        ElementInfo("phone_number01", "phoneNumber01", str, False, False, False),
        ElementInfo("phone_number02", "phoneNumber02", str, False, False, False),
        ElementInfo("phone_number03", "phoneNumber03", str, False, False, False),
    )
    phone_number01 = Field(type=str, required=False)
    phone_number02 = Field(type=str, required=False)
    phone_number03 = Field(type=str, required=False)


class OutgoingCallingPlanTransferNumbersModify(OCIType):
    """
    Outgoing Calling Plan transfer numbers.
    """

    ELEMENTS = (
        ElementInfo("phone_number01", "phoneNumber01", str, False, False, False),
        ElementInfo("phone_number02", "phoneNumber02", str, False, False, False),
        ElementInfo("phone_number03", "phoneNumber03", str, False, False, False),
    )
    phone_number01 = Field(type=str, required=False)
    phone_number02 = Field(type=str, required=False)
    phone_number03 = Field(type=str, required=False)


class OutgoingPinholeDigitPlanDigitPatternCallMeNowPermission(OCIType):
    """
    Indicates whether Call Me Now calls using specified Pinhole digit patterns are permitted.
    """

    ELEMENTS = (
        ElementInfo("digit_pattern_name", "digitPatternName", str, False, True, False),
        ElementInfo("permission", "permission", str, False, True, False),
    )
    digit_pattern_name = Field(type=str, required=True)
    permission = Field(type=str, required=True)


class OutgoingPinholeDigitPlanDigitPatternOriginatingPermission(OCIType):
    """
    Indicates whether originating calls using specified Pinhole digit patterns are permitted.
    """

    ELEMENTS = (
        ElementInfo("digit_pattern_name", "digitPatternName", str, False, True, False),
        ElementInfo("permission", "permission", str, False, True, False),
    )
    digit_pattern_name = Field(type=str, required=True)
    permission = Field(type=str, required=True)


class OutgoingPinholeDigitPlanDigitPatternRedirectingPermission(OCIType):
    """
    Indicates whether redirecting calls using specified Pinhole digit patterns are permitted.
    """

    ELEMENTS = (
        ElementInfo("digit_pattern_name", "digitPatternName", str, False, True, False),
        ElementInfo("permission", "permission", str, False, True, False),
    )
    digit_pattern_name = Field(type=str, required=True)
    permission = Field(type=str, required=True)


class PasscodeMenuKeysModifyEntry(OCIType):
    """
    The voice portal passcode menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "finish_entering_or_reentering_passcode",
            "finishEnteringOrReenteringPasscode",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
    )
    finish_entering_or_reentering_passcode = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)


class PasscodeMenuKeysReadEntry(OCIType):
    """
    The voice portal passcode menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "finish_entering_or_reentering_passcode",
            "finishEnteringOrReenteringPasscode",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
    )
    finish_entering_or_reentering_passcode = Field(type=str, required=True)
    return_to_previous_menu = Field(type=str, required=True)


class PasswordForAccessDevice(OCIType):
    """
    Passwords to be generated for an access device.
    The combination of serviceProviderId, groupId, and deviceName will be used
    to find the device if it exists. If the device doesn't exist yet, then
    the serviceProviderId and groupId will be used to choose the password
    rules with which to generate the device password.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, False, False,
        ),
        ElementInfo("group_id", "groupId", str, False, False, False),
        ElementInfo("device_name", "deviceName", str, False, False, False),
        ElementInfo(
            "generate_device_authentication_password",
            "generateDeviceAuthenticationPassword",
            bool,
            False,
            True,
            False,
        ),
    )
    service_provider_id = Field(type=str, required=False)
    group_id = Field(type=str, required=False)
    device_name = Field(type=str, required=False)
    generate_device_authentication_password = Field(type=bool, required=True)


class PasswordForGroupAdministrator(OCIType):
    """
    Password to be generated for a group administrator. If the administratorId is not
    included, or included but
    is not an exiting administrator for the group, a password will be generated based
    on only the rules applicable
    for a new user.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("administrator_id", "administratorId", str, False, False, False),
        ElementInfo("generate_password", "generatePassword", bool, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    administrator_id = Field(type=str, required=False)
    generate_password = Field(type=bool, required=True)


class PasswordForServiceProviderAdministrator(OCIType):
    """
    Password to be generated for a service provider administrator. If the
    administratorId is not included,
    or included but is not an exiting administrator for the service provider, a
    password will be generated
    based on only the rules applicable for a new user.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("administrator_id", "administratorId", str, False, False, False),
        ElementInfo("generate_password", "generatePassword", bool, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    administrator_id = Field(type=str, required=False)
    generate_password = Field(type=bool, required=True)


class PasswordForSystemAdministrator(OCIType):
    """
    Password to be generated for a System or Provisioning administrator. If the
    administratorId is
    not included, or included but is not an exiting administrator for the
    service provider, a password will be generated
    based on only the rules applicable for a new user.
    """

    ELEMENTS = (
        ElementInfo("administrator_id", "administratorId", str, False, False, False),
        ElementInfo("generate_password", "generatePassword", bool, False, True, False),
    )
    administrator_id = Field(type=str, required=False)
    generate_password = Field(type=bool, required=True)


class PasswordForTrunkGroup(OCIType):
    """
    Passwords to be generated for a trunk group.
    The combination of serviceProviderId, groupId, and name will be used to
    find the trunk group if it exists. If the trunk group doesn't exist yet,
    then the serviceProviderId and groupId will be used to choose the password
    rules with which to generate the trunk group password.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo(
            "generate_trunk_group_authentication_password",
            "generateTrunkGroupAuthenticationPassword",
            bool,
            False,
            True,
            False,
        ),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    name = Field(type=str, required=False)
    generate_trunk_group_authentication_password = Field(type=bool, required=True)


class PasswordForUser(OCIType):
    """
    Passwords, passcode and SIP authentication passwords to be generated for a user.
    If the userId is not
    included or included but is not an existing user in the group, a password will be
    generated based on only
    the rules applicable for a new user.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo("generate_password", "generatePassword", bool, False, False, False),
        ElementInfo("generate_passcode", "generatePasscode", bool, False, False, False),
        ElementInfo(
            "generate_sip_password", "generateSipPassword", bool, False, False, False,
        ),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    user_id = Field(type=str, required=False)
    generate_password = Field(type=bool, required=False)
    generate_passcode = Field(type=bool, required=False)
    generate_sip_password = Field(type=bool, required=False)


class PersonalAssistantMenuKeysModifyEntry(OCIType):
    """
    The voice portal personal assistant menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "set_presence_to_none", "setPresenceToNone", str, False, False, False,
        ),
        ElementInfo(
            "set_presence_to_business_trip",
            "setPresenceToBusinessTrip",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_gone_for_the_day",
            "setPresenceToGoneForTheDay",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_lunch", "setPresenceToLunch", str, False, False, False,
        ),
        ElementInfo(
            "set_presence_to_meeting", "setPresenceToMeeting", str, False, False, False,
        ),
        ElementInfo(
            "set_presence_to_out_of_office",
            "setPresenceToOutOfOffice",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_temporarily_out",
            "setPresenceToTemporarilyOut",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_training",
            "setPresenceToTraining",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_unavailable",
            "setPresenceToUnavailable",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_vacation",
            "setPresenceToVacation",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    set_presence_to_none = Field(type=str, required=False)
    set_presence_to_business_trip = Field(type=str, required=False)
    set_presence_to_gone_for_the_day = Field(type=str, required=False)
    set_presence_to_lunch = Field(type=str, required=False)
    set_presence_to_meeting = Field(type=str, required=False)
    set_presence_to_out_of_office = Field(type=str, required=False)
    set_presence_to_temporarily_out = Field(type=str, required=False)
    set_presence_to_training = Field(type=str, required=False)
    set_presence_to_unavailable = Field(type=str, required=False)
    set_presence_to_vacation = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class PersonalAssistantMenuKeysReadEntry(OCIType):
    """
    The voice portal personal assistant menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "set_presence_to_none", "setPresenceToNone", str, False, False, False,
        ),
        ElementInfo(
            "set_presence_to_business_trip",
            "setPresenceToBusinessTrip",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_gone_for_the_day",
            "setPresenceToGoneForTheDay",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_lunch", "setPresenceToLunch", str, False, False, False,
        ),
        ElementInfo(
            "set_presence_to_meeting", "setPresenceToMeeting", str, False, False, False,
        ),
        ElementInfo(
            "set_presence_to_out_of_office",
            "setPresenceToOutOfOffice",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_temporarily_out",
            "setPresenceToTemporarilyOut",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_training",
            "setPresenceToTraining",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_unavailable",
            "setPresenceToUnavailable",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_presence_to_vacation",
            "setPresenceToVacation",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    set_presence_to_none = Field(type=str, required=False)
    set_presence_to_business_trip = Field(type=str, required=False)
    set_presence_to_gone_for_the_day = Field(type=str, required=False)
    set_presence_to_lunch = Field(type=str, required=False)
    set_presence_to_meeting = Field(type=str, required=False)
    set_presence_to_out_of_office = Field(type=str, required=False)
    set_presence_to_temporarily_out = Field(type=str, required=False)
    set_presence_to_training = Field(type=str, required=False)
    set_presence_to_unavailable = Field(type=str, required=False)
    set_presence_to_vacation = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class PersonalizedNameMenuKeysModifyEntry(OCIType):
    """
    The voice portal personalized name menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "record_new_personalized_name",
            "recordNewPersonalizedName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_current_personalized_name",
            "listenToCurrentPersonalizedName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "delete_personalized_name",
            "deletePersonalizedName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    record_new_personalized_name = Field(type=str, required=False)
    listen_to_current_personalized_name = Field(type=str, required=False)
    delete_personalized_name = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class PersonalizedNameMenuKeysReadEntry(OCIType):
    """
    The voice portal personalized name menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "record_new_personalized_name",
            "recordNewPersonalizedName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "listen_to_current_personalized_name",
            "listenToCurrentPersonalizedName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "delete_personalized_name",
            "deletePersonalizedName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    record_new_personalized_name = Field(type=str, required=False)
    listen_to_current_personalized_name = Field(type=str, required=False)
    delete_personalized_name = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class PhoneListEntry(OCIType):
    """
    Phone list entry.
    """

    ELEMENTS = (
        ElementInfo("entry_name", "entryName", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
    )
    entry_name = Field(type=str, required=True)
    phone_number = Field(type=str, required=True)


class PlayGreetingMenuKeysModifyEntry(OCIType):
    """
    The voice portal play greeting menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("skip_backward", "skipBackward", str, False, False, False),
        ElementInfo("pause_or_resume", "pauseOrResume", str, False, False, False),
        ElementInfo("skip_forward", "skipForward", str, False, False, False),
        ElementInfo("jump_to_begin", "jumpToBegin", str, False, False, False),
        ElementInfo("jump_to_end", "jumpToEnd", str, False, False, False),
    )
    skip_backward = Field(type=str, required=False)
    pause_or_resume = Field(type=str, required=False)
    skip_forward = Field(type=str, required=False)
    jump_to_begin = Field(type=str, required=False)
    jump_to_end = Field(type=str, required=False)


class PlayGreetingMenuKeysReadEntry(OCIType):
    """
    The voice portal play greeting menu keys.
    """

    ELEMENTS = (
        ElementInfo("skip_backward", "skipBackward", str, False, False, False),
        ElementInfo("pause_or_resume", "pauseOrResume", str, False, False, False),
        ElementInfo("skip_forward", "skipForward", str, False, False, False),
        ElementInfo("jump_to_begin", "jumpToBegin", str, False, False, False),
        ElementInfo("jump_to_end", "jumpToEnd", str, False, False, False),
    )
    skip_backward = Field(type=str, required=False)
    pause_or_resume = Field(type=str, required=False)
    skip_forward = Field(type=str, required=False)
    jump_to_begin = Field(type=str, required=False)
    jump_to_end = Field(type=str, required=False)


class PlayMessageMenuKeysModifyEntry(OCIType):
    """
    The voice portal play message menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("skip_backward", "skipBackward", str, False, False, False),
        ElementInfo("pause_or_resume", "pauseOrResume", str, False, False, False),
        ElementInfo("skip_forward", "skipForward", str, False, False, False),
        ElementInfo("jump_to_begin", "jumpToBegin", str, False, False, False),
        ElementInfo("jump_to_end", "jumpToEnd", str, False, False, False),
    )
    skip_backward = Field(type=str, required=False)
    pause_or_resume = Field(type=str, required=False)
    skip_forward = Field(type=str, required=False)
    jump_to_begin = Field(type=str, required=False)
    jump_to_end = Field(type=str, required=False)


class PlayMessageMenuKeysReadEntry(OCIType):
    """
    The voice portal play message menu keys.
    """

    ELEMENTS = (
        ElementInfo("skip_backward", "skipBackward", str, False, False, False),
        ElementInfo("pause_or_resume", "pauseOrResume", str, False, False, False),
        ElementInfo("skip_forward", "skipForward", str, False, False, False),
        ElementInfo("jump_to_begin", "jumpToBegin", str, False, False, False),
        ElementInfo("jump_to_end", "jumpToEnd", str, False, False, False),
    )
    skip_backward = Field(type=str, required=False)
    pause_or_resume = Field(type=str, required=False)
    skip_forward = Field(type=str, required=False)
    jump_to_begin = Field(type=str, required=False)
    jump_to_end = Field(type=str, required=False)


class PlayMessagesMenuKeysModifyEntry(OCIType):
    """
    The voice portal play message menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("save_message", "saveMessage", str, False, False, False),
        ElementInfo("delete_message", "deleteMessage", str, False, False, False),
        ElementInfo("play_message", "playMessage", str, False, False, False),
        ElementInfo("previous_message", "previousMessage", str, False, False, False),
        ElementInfo("play_envelope", "playEnvelope", str, False, False, False),
        ElementInfo("next_message", "nextMessage", str, False, False, False),
        ElementInfo("callback_caller", "callbackCaller", str, False, False, False),
        ElementInfo("compose_message", "composeMessage", str, False, False, False),
        ElementInfo("reply_message", "replyMessage", str, False, False, False),
        ElementInfo("forward_message", "forwardMessage", str, False, False, False),
        ElementInfo(
            "additional_message_options",
            "additionalMessageOptions",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    save_message = Field(type=str, required=False)
    delete_message = Field(type=str, required=False)
    play_message = Field(type=str, required=False)
    previous_message = Field(type=str, required=False)
    play_envelope = Field(type=str, required=False)
    next_message = Field(type=str, required=False)
    callback_caller = Field(type=str, required=False)
    compose_message = Field(type=str, required=False)
    reply_message = Field(type=str, required=False)
    forward_message = Field(type=str, required=False)
    additional_message_options = Field(type=str, required=False)
    personalized_name = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class PlayMessagesMenuKeysReadEntry(OCIType):
    """
    The voice portal play message menu keys.
    """

    ELEMENTS = (
        ElementInfo("save_message", "saveMessage", str, False, False, False),
        ElementInfo("delete_message", "deleteMessage", str, False, False, False),
        ElementInfo("play_message", "playMessage", str, False, False, False),
        ElementInfo("previous_message", "previousMessage", str, False, False, False),
        ElementInfo("play_envelope", "playEnvelope", str, False, False, False),
        ElementInfo("next_message", "nextMessage", str, False, False, False),
        ElementInfo("callback_caller", "callbackCaller", str, False, False, False),
        ElementInfo("compose_message", "composeMessage", str, False, False, False),
        ElementInfo("reply_message", "replyMessage", str, False, False, False),
        ElementInfo("forward_message", "forwardMessage", str, False, False, False),
        ElementInfo(
            "additional_message_options",
            "additionalMessageOptions",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    save_message = Field(type=str, required=False)
    delete_message = Field(type=str, required=False)
    play_message = Field(type=str, required=False)
    previous_message = Field(type=str, required=False)
    play_envelope = Field(type=str, required=False)
    next_message = Field(type=str, required=False)
    callback_caller = Field(type=str, required=False)
    compose_message = Field(type=str, required=False)
    reply_message = Field(type=str, required=False)
    forward_message = Field(type=str, required=False)
    additional_message_options = Field(type=str, required=False)
    personalized_name = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class PrimaryUserInfo(OCIType):
    """
    Primary user information.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, False, False),
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, False, False,
        ),
        ElementInfo("group_id", "groupId", str, False, False, False),
        ElementInfo("user_first_name", "userFirstName", str, False, False, False),
        ElementInfo("user_last_name", "userLastName", str, False, False, False),
        ElementInfo("user_phone_number", "userPhoneNumber", str, False, False, False),
        ElementInfo("user_extension", "userExtension", str, False, False, False),
        ElementInfo("end_point_type", "endPointType", str, False, False, False),
    )
    user_id = Field(type=str, required=False)
    service_provider_id = Field(type=str, required=False)
    group_id = Field(type=str, required=False)
    user_first_name = Field(type=str, required=False)
    user_last_name = Field(type=str, required=False)
    user_phone_number = Field(type=str, required=False)
    user_extension = Field(type=str, required=False)
    end_point_type = Field(type=str, required=False)


class PriorityAlertCriteriaFromDn(OCIType):
    """
    The from dn criteria used within an add/get request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
    )
    from_dn_criteria_selection = Field(type=str, required=True)
    include_anonymous_callers = Field(type=bool, required=True)
    include_unavailable_callers = Field(type=bool, required=True)
    phone_number = Field(type=str, required=False)


class ProfileAndServiceAnonymousCallRejectionInfo(OCIType):
    """
    This is the configuration parameters for anonymous Call Rejection service
    """

    ELEMENTS = (ElementInfo("is_active", "isActive", bool, False, True, False),)
    is_active = Field(type=bool, required=True)


class ProfileAndServiceAutomaticCallbackInfo(OCIType):
    """
    This is the configuration parameters for anonymous Call Rejection service
    """

    ELEMENTS = (ElementInfo("is_active", "isActive", bool, False, True, False),)
    is_active = Field(type=bool, required=True)


class ProfileAndServiceBusyLampFieldInfo(OCIType):
    """
        This is the configuration parameters for Busy Lamp Field service
        The monitoredUserTable has column headings:
        "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
        "Phone Number", "Extension", "Department", "Email Address", "IMP Id".
    """

    ELEMENTS = (
        ElementInfo("list_uri", "listURI", str, False, False, False),
        ElementInfo(
            "enable_call_park_notification",
            "enableCallParkNotification",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "monitored_user_table", "monitoredUserTable", list, True, True, True,
        ),
    )
    list_uri = Field(type=str, required=False)
    enable_call_park_notification = Field(type=bool, required=True)
    monitored_user_table = Field(type=list, required=True)


class ProfileAndServiceCallForwardAlwaysInfo(OCIType):
    """
        This is the configuration parameters for Call Forward Always service
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "forward_to_phone_number", "forwardToPhoneNumber", str, False, False, False,
        ),
        ElementInfo(
            "is_ring_splash_active", "isRingSplashActive", bool, False, True, False,
        ),
    )
    is_active = Field(type=bool, required=True)
    forward_to_phone_number = Field(type=str, required=False)
    is_ring_splash_active = Field(type=bool, required=True)


class ProfileAndServiceCallForwardingBusyInfo(OCIType):
    """
        This is the configuration parameters for Call Forwarding Busy service
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "forward_to_phone_number", "forwardToPhoneNumber", str, False, False, False,
        ),
    )
    is_active = Field(type=bool, required=True)
    forward_to_phone_number = Field(type=str, required=False)


class ProfileAndServiceCallForwardingNoAnswerInfo(OCIType):
    """
        This is the configuration parameters for Call Forwarding No Answer service
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "forward_to_phone_number", "forwardToPhoneNumber", str, False, False, False,
        ),
        ElementInfo("number_of_rings", "numberOfRings", int, False, True, False),
    )
    is_active = Field(type=bool, required=True)
    forward_to_phone_number = Field(type=str, required=False)
    number_of_rings = Field(type=int, required=True)


class ProfileAndServiceCallForwardingSelectiveInfo(OCIType):
    """
        This is the configuration parameters for Call Forwarding Selective service

        The criteria table's column headings are:
        "Is Active", "Criteria Name", "Time Schedule", "Calls From", "Forward To",
    "Blacklisted", "Holiday Schedule"

        The "Calls From" column is a string containing call numbers
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "default_forward_to_phone_number",
            "defaultForwardToPhoneNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("play_ring_reminder", "playRingReminder", bool, False, True, False),
        ElementInfo("criteria_table", "criteriaTable", list, True, True, True),
    )
    is_active = Field(type=bool, required=True)
    default_forward_to_phone_number = Field(type=str, required=False)
    play_ring_reminder = Field(type=bool, required=True)
    criteria_table = Field(type=list, required=True)


class ProfileAndServiceCallNotifyInfo(OCIType):
    """
        This is the configuration parameters for Call Notify service

        The criteria table's column headings are: "Is Active",
        "Criteria Name", "Time Schedule", "Calls From", "Blacklisted" ,"Holiday Schedule"

        The "Calls From" column is a string containing call numbers
    """

    ELEMENTS = (
        ElementInfo(
            "call_notify_email_address",
            "callNotifyEmailAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("criteria_table", "criteriaTable", list, True, True, True),
    )
    call_notify_email_address = Field(type=str, required=False)
    criteria_table = Field(type=list, required=True)


class ProfileAndServiceCallTransferInfo(OCIType):
    """
        This is the configuration parameters for Call Transfer service
    """

    ELEMENTS = (
        ElementInfo("is_recall_active", "isRecallActive", bool, False, True, False),
        ElementInfo(
            "recall_number_of_rings", "recallNumberOfRings", int, False, True, False,
        ),
        ElementInfo(
            "use_diversion_inhibitor_for_blind_transfer",
            "useDiversionInhibitorForBlindTransfer",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_diversion_inhibitor_for_consultative_calls",
            "useDiversionInhibitorForConsultativeCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_busy_camp_on", "enableBusyCampOn", bool, False, True, False,
        ),
        ElementInfo(
            "busy_camp_on_seconds", "busyCampOnSeconds", int, False, True, False,
        ),
    )
    is_recall_active = Field(type=bool, required=True)
    recall_number_of_rings = Field(type=int, required=True)
    use_diversion_inhibitor_for_blind_transfer = Field(type=bool, required=True)
    use_diversion_inhibitor_for_consultative_calls = Field(type=bool, required=True)
    enable_busy_camp_on = Field(type=bool, required=True)
    busy_camp_on_seconds = Field(type=int, required=True)


class ProfileAndServiceCallWaitingInfo(OCIType):
    """
        This is the configuration parameters for Call Transfer service
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "disable_calling_line_id_delivery",
            "disableCallingLineIdDelivery",
            bool,
            False,
            True,
            False,
        ),
    )
    is_active = Field(type=bool, required=True)
    disable_calling_line_id_delivery = Field(type=bool, required=True)


class ProfileAndServiceCallingLineIDDeliveryBlockingInfo(OCIType):
    """
        This is the configuration parameters for Calling Line ID Delivery Blocking service
    """

    ELEMENTS = (ElementInfo("is_active", "isActive", bool, False, True, False),)
    is_active = Field(type=bool, required=True)


class ProfileAndServiceCommunicationBarringUserControlInfo(OCIType):
    """
        This is the configuration parameters for Communication Barring User Control service

        profileTable has column headings: "Name", "Code", "Activated" and "Primary".
    """

    ELEMENTS = (
        ElementInfo("lockout_status", "lockoutStatus", bool, False, True, False),
        ElementInfo("profile_table", "profileTable", list, True, True, True),
    )
    lockout_status = Field(type=bool, required=True)
    profile_table = Field(type=list, required=True)


class ProfileAndServiceCustomRingbackInfo(OCIType):
    """
        This is the configuration parameters for Custom Ringback service

        The criteria table's column headings are: "Is Active", "Criteria Name",
        "Time Schedule", "Calls From", "Blacklisted", "Holiday Schedule".

        The "Calls From" column is a string containing call numbers
    """

    ELEMENTS = (ElementInfo("criteria_table", "criteriaTable", list, True, True, True),)
    criteria_table = Field(type=list, required=True)


class ProfileAndServiceDirectedCallPickupWithBargeInInfo(OCIType):
    """
        This is the configuration parameters for Directed Call Pickup With Barge In service
    """

    ELEMENTS = (
        ElementInfo(
            "enable_barge_in_warning_tone",
            "enableBargeInWarningTone",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_automatic_target_selection",
            "enableAutomaticTargetSelection",
            bool,
            False,
            True,
            False,
        ),
    )
    enable_barge_in_warning_tone = Field(type=bool, required=True)
    enable_automatic_target_selection = Field(type=bool, required=True)


class ProfileAndServiceDoNotDisturbInfo(OCIType):
    """
        This is the configuration parameters for Do Not Disturb service
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo("ring_splash", "ringSplash", bool, False, True, False),
    )
    is_active = Field(type=bool, required=True)
    ring_splash = Field(type=bool, required=True)


class ProfileAndServiceExternalLineIDDeliveryInfo(OCIType):
    """
        This is the configuration parameters for External Line ID Delivery service
    """

    ELEMENTS = (ElementInfo("is_active", "isActive", bool, False, True, False),)
    is_active = Field(type=bool, required=True)


class ProfileAndServiceInternalCallingLineIDDeliveryInfo(OCIType):
    """
        This is the configuration parameters for Internal Calling Line ID Delivery service
    """

    ELEMENTS = (ElementInfo("is_active", "isActive", bool, False, True, False),)
    is_active = Field(type=bool, required=True)


class ProfileAndServicePreAlertingAnnouncementInfo(OCIType):
    """
        This is the configuration parameters for Pre Alerting Announcement service

        The criteria table's column headings are: "Is Active", "Criteria Name",
        "Blacklisted", and "Calls From".

        The "Calls From" column is a string containing call numbers
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo("audio_selection", "audioSelection", str, False, True, False),
        ElementInfo(
            "audio_file_description", "audioFileDescription", str, False, False, False,
        ),
        ElementInfo("audio_media_type", "audioMediaType", str, False, False, False),
        ElementInfo("audio_file_url", "audioFileUrl", str, False, False, False),
        ElementInfo("video_selection", "videoSelection", str, False, True, False),
        ElementInfo(
            "video_file_description", "videoFileDescription", str, False, False, False,
        ),
        ElementInfo("video_media_type", "videoMediaType", str, False, False, False),
        ElementInfo("video_file_url", "videoFileUrl", str, False, False, False),
        ElementInfo("criteria_table", "criteriaTable", list, True, True, True),
    )
    is_active = Field(type=bool, required=True)
    audio_selection = Field(type=str, required=True)
    audio_file_description = Field(type=str, required=False)
    audio_media_type = Field(type=str, required=False)
    audio_file_url = Field(type=str, required=False)
    video_selection = Field(type=str, required=True)
    video_file_description = Field(type=str, required=False)
    video_media_type = Field(type=str, required=False)
    video_file_url = Field(type=str, required=False)
    criteria_table = Field(type=list, required=True)


class ProfileAndServiceSelectiveCallRejectionInfo(OCIType):
    """
        This is the configuration parameters for Selective Call Rejection service

        The criteria table's column headings are:
        "Is Active", "Criteria Name", "Time Schedule", "Calls From", "Blacklisted",
    "Holiday Schedule"

        The "Calls From" column is a string containing call numbers
    """

    ELEMENTS = (ElementInfo("criteria_table", "criteriaTable", list, True, True, True),)
    criteria_table = Field(type=list, required=True)


class ProfileAndServiceSharedCallAppearanceInfo(OCIType):
    """
    This is the configuration parameters for shared call appearance service
    The endpointTable contains columns:
      "Device Level", "Device Name", "Device Type", "Line/Port", "SIP Contact", "Port
    Number". "Private Identity" .

    The "Device Level" column contains one of the AccessDeviceLevel enumerated constants.
    Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo(
            "alert_all_appearances_for_click_to_dial_calls",
            "alertAllAppearancesForClickToDialCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "alert_all_appearances_for_group_paging_calls",
            "alertAllAppearancesForGroupPagingCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("max_appearances", "maxAppearances", int, False, True, False),
        ElementInfo(
            "allow_sca_call_retrieve", "allowSCACallRetrieve", bool, False, True, False,
        ),
        ElementInfo(
            "enable_multiple_call_arrangement",
            "enableMultipleCallArrangement",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "multiple_call_arrangement_is_active",
            "multipleCallArrangementIsActive",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("endpoint_table", "endpointTable", list, True, True, True),
        ElementInfo(
            "allow_bridging_between_locations",
            "allowBridgingBetweenLocations",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "bridge_warning_tone", "bridgeWarningTone", str, False, True, False,
        ),
        ElementInfo(
            "enable_call_park_notification",
            "enableCallParkNotification",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_user_primary_with_alternate_calls_setting",
            "useUserPrimaryWithAlternateCallsSetting",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_simultaneous_primary_and_alternate",
            "allowSimultaneousPrimaryAndAlternate",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "restrict_call_retrieve_of_primary",
            "restrictCallRetrieveOfPrimary",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "restrict_call_bridging_of_primary",
            "restrictCallBridgingOfPrimary",
            bool,
            False,
            True,
            False,
        ),
    )
    alert_all_appearances_for_click_to_dial_calls = Field(type=bool, required=True)
    alert_all_appearances_for_group_paging_calls = Field(type=bool, required=True)
    max_appearances = Field(type=int, required=True)
    allow_sca_call_retrieve = Field(type=bool, required=True)
    enable_multiple_call_arrangement = Field(type=bool, required=True)
    multiple_call_arrangement_is_active = Field(type=bool, required=True)
    endpoint_table = Field(type=list, required=True)
    allow_bridging_between_locations = Field(type=bool, required=True)
    bridge_warning_tone = Field(type=str, required=True)
    enable_call_park_notification = Field(type=bool, required=True)
    use_user_primary_with_alternate_calls_setting = Field(type=bool, required=True)
    allow_simultaneous_primary_and_alternate = Field(type=bool, required=True)
    restrict_call_retrieve_of_primary = Field(type=bool, required=True)
    restrict_call_bridging_of_primary = Field(type=bool, required=True)


class ProfileAndServiceThirdPartyVoiceMailInfo(OCIType):
    """
        This is the configuration parameters for Third Party Voice Mail service
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "busy_redirect_to_voice_mail",
            "busyRedirectToVoiceMail",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "no_answer_redirect_to_voice_mail",
            "noAnswerRedirectToVoiceMail",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("server_selection", "serverSelection", str, False, True, False),
        ElementInfo("user_server", "userServer", str, False, False, False),
        ElementInfo("mailbox_id_type", "mailboxIdType", str, False, True, False),
        ElementInfo("mailbox_url", "mailboxURL", str, False, False, False),
        ElementInfo(
            "no_answer_number_of_rings",
            "noAnswerNumberOfRings",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "always_redirect_to_voice_mail",
            "alwaysRedirectToVoiceMail",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "out_of_primary_zone_redirect_to_voice_mail",
            "outOfPrimaryZoneRedirectToVoiceMail",
            bool,
            False,
            True,
            False,
        ),
    )
    is_active = Field(type=bool, required=True)
    busy_redirect_to_voice_mail = Field(type=bool, required=True)
    no_answer_redirect_to_voice_mail = Field(type=bool, required=True)
    server_selection = Field(type=str, required=True)
    user_server = Field(type=str, required=False)
    mailbox_id_type = Field(type=str, required=True)
    mailbox_url = Field(type=str, required=False)
    no_answer_number_of_rings = Field(type=int, required=True)
    always_redirect_to_voice_mail = Field(type=bool, required=True)
    out_of_primary_zone_redirect_to_voice_mail = Field(type=bool, required=True)


class PublicUserIdentity(OCIType):
    """
    Public User Identity
    """

    ELEMENTS = (
        ElementInfo("sip_uri", "sipURI", str, False, True, False),
        ElementInfo("tel_uri", "telURI", str, False, True, False),
    )
    sip_uri = Field(type=str, required=True)
    tel_uri = Field(type=str, required=True)


class PushNotificationEventData(OCIType):
    """
    The common push notification event elements.
    """

    ELEMENTS = (
        ElementInfo("event_name", "eventName", str, False, True, False),
        ElementInfo("silent", "silent", bool, False, True, False),
        ElementInfo("mutable_content", "mutableContent", bool, False, True, False),
        ElementInfo(
            "push_notification_event_parameters",
            "pushNotificationEventParameters",
            str,
            False,
            False,
            False,
        ),
    )
    event_name = Field(type=str, required=True)
    silent = Field(type=bool, required=True)
    mutable_content = Field(type=bool, required=True)
    push_notification_event_parameters = Field(type=str, required=False)


class Q850CauseMapEntry(OCIType):
    """
    The Q850 cause map entry.
    """

    ELEMENTS = (
        ElementInfo("q850_cause_value", "q850CauseValue", int, False, True, False),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
    )
    q850_cause_value = Field(type=int, required=True)
    treatment_id = Field(type=str, required=False)


class RandomPort(OCIType):
    """
    Represents either a random port number, or a specific port number.
    """

    ELEMENTS = (
        ElementInfo("random", "random", str, False, True, False),
        ElementInfo("port", "port", int, False, True, False),
    )
    random = Field(type=str, required=True)
    port = Field(type=int, required=True)


class RecordNewGreetingOrPersonalizedNameMenuKeysModifyEntry(OCIType):
    """
    The voice portal record new greeting or personalized name menu keys modify entry.
    """

    ELEMENTS = (ElementInfo("end_recording", "endRecording", str, False, False, False),)
    end_recording = Field(type=str, required=False)


class RecordNewGreetingOrPersonalizedNameMenuKeysReadEntry(OCIType):
    """
    The voice portal record new greeting or personalized name menu keys.
    """

    ELEMENTS = (ElementInfo("end_recording", "endRecording", str, False, True, False),)
    end_recording = Field(type=str, required=True)


class Recurrence(OCIType):
    """
    Defines recurrence.
    """

    ELEMENTS = (
        ElementInfo("recur_daily", "recurDaily", str, True, True, False),  # unknown
        ElementInfo("recur_weekly", "recurWeekly", str, True, True, False),  # unknown
        ElementInfo(
            "recur_monthly_by_day", "recurMonthlyByDay", str, True, True, False,
        ),  # unknown
        ElementInfo(
            "recur_monthly_by_week", "recurMonthlyByWeek", str, True, True, False,
        ),  # unknown
        ElementInfo(
            "recur_yearly_by_day", "recurYearlyByDay", str, True, True, False,
        ),  # unknown
        ElementInfo(
            "recur_yearly_by_week", "recurYearlyByWeek", str, True, True, False,
        ),  # unknown
        ElementInfo("recur_for_ever", "recurForEver", bool, False, True, False),
        ElementInfo("recur_end_date", "recurEndDate", str, False, True, False),
        ElementInfo(
            "recur_end_occurrence", "recurEndOccurrence", int, False, True, False,
        ),
    )
    recur_daily = Field(type=str, required=True)
    recur_weekly = Field(type=str, required=True)
    recur_monthly_by_day = Field(type=str, required=True)
    recur_monthly_by_week = Field(type=str, required=True)
    recur_yearly_by_day = Field(type=str, required=True)
    recur_yearly_by_week = Field(type=str, required=True)
    recur_for_ever = Field(type=bool, required=True)
    recur_end_date = Field(type=str, required=True)
    recur_end_occurrence = Field(type=int, required=True)


class ReplacementCallProcessingPolicyProfileSubscriberTypeList(OCIType):
    """
    A list of CallProcessingPolicyProfileSubscriberType. The list replaces a
    previously configured list.
    """

    ELEMENTS = (
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
    )
    subscriber_type = Field(type=str, required=True)


class ReplacementCallProcessingPolicyProfileSubscriberTypeList20(OCIType):
    """
    A list of CallProcessingPolicyProfileSubscriberType20. The list replaces a
    previously configured list.
    """

    ELEMENTS = (
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
    )
    subscriber_type = Field(type=str, required=True)


class ReplacementCallProcessingPolicyProfileSubscriberTypeList21(OCIType):
    """
    A list of CallProcessingPolicyProfileSubscriberType21. The list replaces a
    previously configured list.
    """

    ELEMENTS = (
        ElementInfo("subscriber_type", "subscriberType", str, False, True, False),
    )
    subscriber_type = Field(type=str, required=True)


class ReplacementCombinedNetworkClassOfServiceList(OCIType):
    """
          A list of network class of services that replaces a previously network
    class of services.
    """

    ELEMENTS = (
        ElementInfo(
            "network_class_of_service", "networkClassOfService", str, False, True, False,
        ),
    )
    network_class_of_service = Field(type=str, required=True)


class ReplacementCommunicationBarringAlternateCallIndicatorList(OCIType):
    """
    A list of Communication Barring Alternate Call Indicator that replaces
    a previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "alternate_call_indicator",
            "alternateCallIndicator",
            str,
            False,
            True,
            False,
        ),
    )
    alternate_call_indicator = Field(type=str, required=True)


class ReplacementCommunicationBarringCallTypeList(OCIType):
    """
    A list of Communication Barring Call Types that replaces a previously
    configured list. By convention, an element of this type may be set
    nill to clear the list.
    """

    ELEMENTS = (ElementInfo("call_type", "callType", str, False, True, False),)
    call_type = Field(type=str, required=True)


class ReplacementContactList(OCIType):
    """
    A list of SIP contacts that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("contact", "contact", str, False, True, False),)
    contact = Field(type=str, required=True)


class ReplacementDNList(OCIType):
    """
    A list of dns that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("phone_number", "phoneNumber", str, False, True, False),)
    phone_number = Field(type=str, required=True)


class ReplacementDeviceTypeList(OCIType):
    """
    A list of device types that replaces the previously assigned list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("device_type", "deviceType", str, False, True, False),)
    device_type = Field(type=str, required=True)


class ReplacementEnterpriseTrunkTrunkGroupList(OCIType):
    """
    A list of Group Trunk Krunk Group Names that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("trunk_group", "trunkGroup", str, False, True, False),)
    trunk_group = Field(type=str, required=True)


class ReplacementGroupEnterpriseTrunkTrunkGroupList(OCIType):
    """
    A list of Group Trunk Krunk Group Names that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("trunk_group", "trunkGroup", str, False, True, False),)
    trunk_group = Field(type=str, required=True)


class ReplacementMediaNameList(OCIType):
    """
    A list of media that replaces a previously configured list.
    """

    ELEMENTS = (ElementInfo("media_name", "mediaName", str, False, True, False),)
    media_name = Field(type=str, required=True)


class ReplacementNumberPortabilityStatusList(OCIType):
    """
    A list of Number Portability Query Statuses that replaces a previously
    configured list. By convention, an element of this type may be set
    to nill to clear the list.
    """

    ELEMENTS = (ElementInfo("status", "status", str, False, True, False),)
    status = Field(type=str, required=True)


class ReplacementOCICallControlApplicationIdList(OCIType):
    """
    A list of applicationIds that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo("application_id", "applicationId", str, False, True, False),
    )
    application_id = Field(type=str, required=True)


class ReplacementOutgoingDNList(OCIType):
    """
    A list of outgoing dns that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("phone_number", "phoneNumber", str, False, True, False),)
    phone_number = Field(type=str, required=True)


class ReplacementOutgoingDNorSIPURIList(OCIType):
    """
    A list of phone numbers or sipuris that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("phone_number", "phoneNumber", str, False, True, False),)
    phone_number = Field(type=str, required=True)


class ReplacementSIPAliasList(OCIType):
    """
    A list of SIP aliases that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("sip_alias", "sipAlias", str, False, True, False),)
    sip_alias = Field(type=str, required=True)


class ReplacementServicePackNameList(OCIType):
    """
    A list of service packs that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo("service_pack_name", "servicePackName", str, False, True, False),
    )
    service_pack_name = Field(type=str, required=True)


class ReplacementTagSetList(OCIType):
    """
    A list of tag sets that replaces the previously assigned list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("tag_set", "tagSet", str, False, True, False),)
    tag_set = Field(type=str, required=True)


class ReplacementUserIdList(OCIType):
    """
    A list of userIds that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("user_id", "userId", str, False, True, False),)
    user_id = Field(type=str, required=True)


class ReplacementUserServiceList(OCIType):
    """
    A list of user services that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("service_name", "serviceName", str, False, True, False),)
    service_name = Field(type=str, required=True)


class ReplacementVirtualOnNetCallTypeNameList(OCIType):
    """
    A list of Virtual On-Net Call Types that replaces a previously
    configured list. By convention, an element of this type may be set
    to nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "virtual_on_net_call_type_name",
            "virtualOnNetCallTypeName",
            str,
            False,
            True,
            False,
        ),
    )
    virtual_on_net_call_type_name = Field(type=str, required=True)


class ReplacementZoneList(OCIType):
    """
    Contains an ordered list of zones to use to replace the current list of zones in
    an Office Zone.
    """

    ELEMENTS = (ElementInfo("zone_name", "zoneName", str, False, True, False),)
    zone_name = Field(type=str, required=True)


class ReplyMessageMenuKeysModifyEntry(OCIType):
    """
    The voice portal reply message menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "send_reply_to_caller", "sendReplyToCaller", str, False, False, False,
        ),
        ElementInfo(
            "change_current_reply", "changeCurrentReply", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_current_reply", "listenToCurrentReply", str, False, False, False,
        ),
        ElementInfo(
            "set_or_clear_urgent_indicator",
            "setOrClearUrgentIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_or_clear_confidential_indicator",
            "setOrClearConfidentialIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    send_reply_to_caller = Field(type=str, required=False)
    change_current_reply = Field(type=str, required=False)
    listen_to_current_reply = Field(type=str, required=False)
    set_or_clear_urgent_indicator = Field(type=str, required=False)
    set_or_clear_confidential_indicator = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class ReplyMessageMenuKeysReadEntry(OCIType):
    """
    The voice portal reply message menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "send_reply_to_caller", "sendReplyToCaller", str, False, True, False,
        ),
        ElementInfo(
            "change_current_reply", "changeCurrentReply", str, False, False, False,
        ),
        ElementInfo(
            "listen_to_current_reply", "listenToCurrentReply", str, False, False, False,
        ),
        ElementInfo(
            "set_or_clear_urgent_indicator",
            "setOrClearUrgentIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "set_or_clear_confidential_indicator",
            "setOrClearConfidentialIndicator",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    send_reply_to_caller = Field(type=str, required=True)
    change_current_reply = Field(type=str, required=False)
    listen_to_current_reply = Field(type=str, required=False)
    set_or_clear_urgent_indicator = Field(type=str, required=False)
    set_or_clear_confidential_indicator = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class ResponsePagingControl(OCIType):
    """
    Used in queries to restrict the set of result rows when making a request that can
    result in
    a large dataset. The client specifies the starting row and the number of rows requested.
    The server only provides those rows in results, if available.
    """

    ELEMENTS = (
        ElementInfo(
            "response_start_index", "responseStartIndex", int, False, True, False,
        ),
        ElementInfo("response_page_size", "responsePageSize", int, False, True, False),
    )
    response_start_index = Field(type=int, required=True)
    response_page_size = Field(type=int, required=True)


class ReviewSelectedDistributionListMenuKeysModifyEntry(OCIType):
    """
    The voice portal review selected distribution list menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "interrupt_playback_and_return_to_previous_menu",
            "interruptPlaybackAndReturnToPreviousMenu",
            str,
            False,
            False,
            False,
        ),
    )
    interrupt_playback_and_return_to_previous_menu = Field(type=str, required=False)


class ReviewSelectedDistributionListMenuKeysReadEntry(OCIType):
    """
    The voice portal review selected distribution list menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "interrupt_playback_and_return_to_previous_menu",
            "interruptPlaybackAndReturnToPreviousMenu",
            str,
            False,
            True,
            False,
        ),
    )
    interrupt_playback_and_return_to_previous_menu = Field(type=str, required=True)


class SIPAuthenticationUserNamePassword(OCIType):
    """
    User's authentication service information.
    """

    ELEMENTS = (
        ElementInfo(
            "sip_authentication_user_name",
            "sipAuthenticationUserName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "sip_authentication_password",
            "sipAuthenticationPassword",
            str,
            False,
            True,
            False,
        ),
    )
    sip_authentication_user_name = Field(type=str, required=True)
    sip_authentication_password = Field(type=str, required=True)


class SIPContactInfo(OCIType):
    """
    A SIP Contact info contains the SIP registration Contact and its associated Header path
    The following element is only used in AS data mode and ignored in XS data mode:
      pathHeader
    """

    ELEMENTS = (
        ElementInfo("sip_contact", "sipContact", str, False, True, False),
        ElementInfo("path_header", "pathHeader", str, False, False, False),
    )
    sip_contact = Field(type=str, required=True)
    path_header = Field(type=str, required=False)


class SIPStatusMapEntry(OCIType):
    """
    The access SIP status map entry.
    """

    ELEMENTS = (
        ElementInfo("sip_status_code", "sipStatusCode", int, False, True, False),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
    )
    sip_status_code = Field(type=int, required=True)
    treatment_id = Field(type=str, required=False)


class ScheduleKey(OCIType):
    """
    Uniquely identifies Holiday and Time Schedules within a level(System, Service
    Provider, Group or User level).
    """

    ELEMENTS = (
        ElementInfo("schedule_name", "scheduleName", str, False, True, False),
        ElementInfo("schedule_type", "scheduleType", str, False, True, False),
    )
    schedule_name = Field(type=str, required=True)
    schedule_type = Field(type=str, required=True)


class SearchCriteria(OCIType):
    """
    Abstract base type for specifying search criteria. A search criteria is an
    optional element
    used to restrict the number of rows returned when requesting a potentially large set of
    data from the provisioning server.
    """

    ELEMENTS = ()


class SearchCriteriaAccessDeviceEndpointPrivateIdentity(OCIType):
    """
    Criteria for searching for a private identity.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAccessDeviceVersion(OCIType):
    """
    Criteria for searching for an Access Device Version.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAdminFirstName(OCIType):
    """
    Criteria for searching for an administrator's first name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAdminId(OCIType):
    """
    Criteria for searching for an administrator's adminId.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAdminLastName(OCIType):
    """
    Criteria for searching for an administrator's last name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAgentThresholdProfile(OCIType):
    """
    Criteria for searching a Call Center Agent Threshold Profile.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAlternateTrunkIdentity(OCIType):
    """
    Criteria for searching for a particular fully specified alternate trunk identity.
    In IMS mode, it only applies to the user part of alternate trunk identity.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAlternateTrunkIdentityDomain(OCIType):
    """
    Criteria for searching for alternate trunk identity domain part.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAlternateUserId(OCIType):
    """
    Criteria for searching for a user's alternate userId.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaAnnouncementFileName(OCIType):
    """
    Criteria for searching for an Announcement File Name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaCallCenterName(OCIType):
    """
    Criteria for searching for a call center
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaCallCenterReportTemplateName(OCIType):
    """
    Criteria for searching for a particular call center enhanced reporting report template.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaCallCenterScheduledReportName(OCIType):
    """
    Criteria for searching for a call center enhanced reporting scheduled report name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaCallParkName(OCIType):
    """
    Criteria for searching for a call park by name
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaCallPickupName(OCIType):
    """
    Criteria for searching for a call pickup by name
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaCommunicationBarringAuthorizationCode(OCIType):
    """
    Criteria for searching for a Communication Barring Authorization Code.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaCommunicationBarringAuthorizationCodeDescription(OCIType):
    """
    Criteria for searching for a Communication Barring Authorization Code description.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaComposedOr(OCIType):
    """
    Abstract base type for specifying search criteria where the search criteria
    params are OR'ed.
    A search criteria is an optional element
    used to restrict the number of rows returned when requesting a potentially large set of
    data from the provisioning server.
    """

    ELEMENTS = ()


class SearchCriteriaComposedOrUserName(OCIType):
    """
    Criteria for searching for a user's full name.
    This search criterion will be compared against multiple combinations of first
    name and last name:

    First Name + ‘ ‘ + Last Name
    Last Name + ‘ ‘ + First Name
    Hiragana Last Name + ' ' + Hiragana First Name

    Note: For this search criterion, the searchMode is always ‘Contains’ and the
    search criteria are always OR’ed.
    """

    ELEMENTS = (
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDepartmentName(OCIType):
    """
            Criteria for searching for a user's department.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDeviceMACAddress(OCIType):
    """
    Criteria for searching for device MAC address.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDeviceManagementEventAdditionalInfo(OCIType):
    """
    Criteria for searching for a particular additional info of a DeviceManagement event.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDeviceManagementEventLoginId(OCIType):
    """
    Criteria for searching for a particular login id.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDeviceName(OCIType):
    """
    Criteria for searching for device name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDeviceNetAddress(OCIType):
    """
    Criteria for searching for device network address.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDeviceSerialNumber(OCIType):
    """
    Criteria for searching for device serial number.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDeviceType(OCIType):
    """
    Criteria for searching for device type.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDigitPattern(OCIType):
    """
    Criteria for searching for digit pattern.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDn(OCIType):
    """
    Criteria for searching for a DN.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaDomainName(OCIType):
    """
    Criteria for searching for Domain Names.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaEmailAddress(OCIType):
    """
    Criteria for searching for a email address.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaEnterpriseCommonMultiPartPhoneListName(OCIType):
    """
    Criteria for searching for a multi-part name in an enterprise common phone list.\
    Note: For this search criterion, the searchMode is always ‘Contains’ and the
    multi-part search criteria are always AND’ed.
    """

    ELEMENTS = (
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaEnterpriseCommonPhoneListName(OCIType):
    """
    Criteria for searching for a name in an enterprise common phone list.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaEnterpriseCommonPhoneListNumber(OCIType):
    """
    Criteria for searching for a phone number in an enterprise common phone list.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaEnterpriseTrunkName(OCIType):
    """
    Criteria for searching for an Enterprise Trunk name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaExactAnnouncementFileType(OCIType):
    """
    Criteria for searching for a particular announcement file type.
    """

    ELEMENTS = (ElementInfo("type", "type", str, False, True, False),)
    type = Field(type=str, required=True)


class SearchCriteriaExactAutoAttendantType(OCIType):
    """
    Criteria for searching for a particular auto-attendant type.
    """

    ELEMENTS = (ElementInfo("type", "type", str, False, True, False),)
    type = Field(type=str, required=True)


class SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor(OCIType):
    """
    Criteria for searching for call center scheduled report created by a
    supervisor or administrator.
    """

    ELEMENTS = (
        ElementInfo(
            "created_by_supervisor", "createdBySupervisor", bool, False, True, False,
        ),
    )
    created_by_supervisor = Field(type=bool, required=True)


class SearchCriteriaExactCallCenterScheduledReportGroup(OCIType):
    """
    Criteria for searching for a particular fully specified call center scheduled
    report's group.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)


class SearchCriteriaExactCallCenterScheduledReportServiceProvider(OCIType):
    """
    Criteria for searching for a particular call center scheduled report's service provider.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
    )
    service_provider_id = Field(type=str, required=True)


class SearchCriteriaExactCallCenterType(OCIType):
    """
    Criteria for searching for a particular fully specified call center type.
    """

    ELEMENTS = (
        ElementInfo("call_center_type", "callCenterType", str, False, True, False),
    )
    call_center_type = Field(type=str, required=True)


class SearchCriteriaExactCustomContactDirectory(OCIType):
    """
    Criteria for searching for a particular fully specified custom contact directory.
    """

    ELEMENTS = (
        ElementInfo(
            "custom_contact_directory_name",
            "customContactDirectoryName",
            str,
            False,
            True,
            False,
        ),
    )
    custom_contact_directory_name = Field(type=str, required=True)


class SearchCriteriaExactDeviceLevel(OCIType):
    """
    Criteria for searching for a particular device level.
    """

    ELEMENTS = (ElementInfo("device_level", "deviceLevel", str, False, True, False),)
    device_level = Field(type=str, required=True)


class SearchCriteriaExactDeviceManagementEventAction(OCIType):
    """
    Criteria for searching for a particular fully specified DeviceManagement event action.
    """

    ELEMENTS = (
        ElementInfo("dm_event_action", "dmEventAction", str, False, True, False),
    )
    dm_event_action = Field(type=str, required=True)


class SearchCriteriaExactDeviceManagementEventLevel(OCIType):
    """
    Criteria for searching for a particular fully specified DeviceManagement event level.
    """

    ELEMENTS = (ElementInfo("dm_event_level", "dmEventLevel", str, False, True, False),)
    dm_event_level = Field(type=str, required=True)


class SearchCriteriaExactDeviceManagementEventStatusCompleted(OCIType):
    """
    Criteria for searching for a particular fully specified Device Management
    completed event status.
    """

    ELEMENTS = (
        ElementInfo(
            "dm_event_status_completed",
            "dmEventStatusCompleted",
            str,
            False,
            True,
            False,
        ),
    )
    dm_event_status_completed = Field(type=str, required=True)


class SearchCriteriaExactDeviceManagementEventStatusInProgressOrPending(OCIType):
    """
    Criteria for searching for a particular fully specified Device Management event
    in progress or pending status.
    """

    ELEMENTS = (
        ElementInfo(
            "dm_event_status_in_progress_or_pending",
            "dmEventStatusInProgressOrPending",
            str,
            False,
            True,
            False,
        ),
    )
    dm_event_status_in_progress_or_pending = Field(type=str, required=True)


class SearchCriteriaExactDeviceManagementEventType(OCIType):
    """
    Criteria for searching for a particular fully specified DeviceManagement event type.
    """

    ELEMENTS = (ElementInfo("dm_event_type", "dmEventType", str, False, True, False),)
    dm_event_type = Field(type=str, required=True)


class SearchCriteriaExactDeviceServiceProvider(OCIType):
    """
    Criteria for searching for a particular fully specified service provider
    associated with a device.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
    )
    service_provider_id = Field(type=str, required=True)


class SearchCriteriaExactDeviceType(OCIType):
    """
    Criteria for searching for a particular fully specified device type.
    """

    ELEMENTS = (ElementInfo("device_type", "deviceType", str, False, True, False),)
    device_type = Field(type=str, required=True)


class SearchCriteriaExactDeviceTypeConfigurationOptionType(OCIType):
    """
    Criteria for searching for a particular fully specified DeviceTypeConfigurationOptionType.
    """

    ELEMENTS = (
        ElementInfo(
            "device_config_options", "deviceConfigOptions", str, False, True, False,
        ),
    )
    device_config_options = Field(type=str, required=True)


class SearchCriteriaExactDnActivation(OCIType):
    """
      Criteria for searching for a particular Dn activation state.
    """

    ELEMENTS = (ElementInfo("activated", "activated", bool, False, True, False),)
    activated = Field(type=bool, required=True)


class SearchCriteriaExactDnAvailability(OCIType):
    """
      Criteria for searching for a particular dn availability.
    """

    ELEMENTS = (ElementInfo("available", "available", bool, False, True, False),)
    available = Field(type=bool, required=True)


class SearchCriteriaExactEndpointType(OCIType):
    """
    Criteria for searching for a particular endpoint type.
    """

    ELEMENTS = (ElementInfo("endpoint_type", "endpointType", str, False, True, False),)
    endpoint_type = Field(type=str, required=True)


class SearchCriteriaExactEndpointType21sp1(OCIType):
    """
    Criteria for searching for a particular endpoint type.
    """

    ELEMENTS = (ElementInfo("endpoint_type", "endpointType", str, False, True, False),)
    endpoint_type = Field(type=str, required=True)


class SearchCriteriaExactGroupAdminType(OCIType):
    """
    Criteria for searching for a particular group administrator type.
    """

    ELEMENTS = (ElementInfo("type", "type", str, False, True, False),)
    type = Field(type=str, required=True)


class SearchCriteriaExactHuntPolicy(OCIType):
    """
    Criteria for searching for a particular fully specified hunt policy.
    """

    ELEMENTS = (ElementInfo("hunt_policy", "huntPolicy", str, False, True, False),)
    hunt_policy = Field(type=str, required=True)


class SearchCriteriaExactLocationEnabled(OCIType):
    """
      Criteria for searching for a particular Location enabled state.
    """

    ELEMENTS = (ElementInfo("enabled", "enabled", bool, False, True, False),)
    enabled = Field(type=bool, required=True)


class SearchCriteriaExactMediaFileType(OCIType):
    """
    Criteria for searching for a particular media file type.
    """

    ELEMENTS = (ElementInfo("type", "type", str, False, True, False),)
    type = Field(type=str, required=True)


class SearchCriteriaExactMobileDnAvailability(OCIType):
    """
    Criteria for searching for a particular mobile dn availability.
    """

    ELEMENTS = (ElementInfo("available", "available", bool, False, True, False),)
    available = Field(type=bool, required=True)


class SearchCriteriaExactMobileNetwork(OCIType):
    """
    Criteria for searching for a particular BroadWorks Mobility Mobile Network.
    """

    ELEMENTS = (
        ElementInfo(
            "mobile_network_name", "mobileNetworkName", str, False, True, False,
        ),
    )
    mobile_network_name = Field(type=str, required=True)


class SearchCriteriaExactOrganizationType(OCIType):
    """
    Criteria for searching for an organization type.
    """

    ELEMENTS = (
        ElementInfo("organization_type", "organizationType", str, False, True, False),
    )
    organization_type = Field(type=str, required=True)


class SearchCriteriaExactPolicySelection(OCIType):
    """
      Criteria for searching for a particular Voice VPN policy selection.
    """

    ELEMENTS = (
        ElementInfo("policy_selection", "policySelection", str, False, True, False),
    )
    policy_selection = Field(type=str, required=True)


class SearchCriteriaExactPortNumber(OCIType):
    """
    Criteria for searching for a port number.
    """

    ELEMENTS = (ElementInfo("port", "port", int, False, True, False),)
    port = Field(type=int, required=True)


class SearchCriteriaExactScheduleLevel(OCIType):
    """
    Criteria for searching for a particular schedule level.
    """

    ELEMENTS = (ElementInfo("level", "level", str, False, True, False),)
    level = Field(type=str, required=True)


class SearchCriteriaExactScheduleType(OCIType):
    """
    Criteria for searching for a particular schedule type.
    """

    ELEMENTS = (ElementInfo("type", "type", str, False, True, False),)
    type = Field(type=str, required=True)


class SearchCriteriaExactServiceProvider(OCIType):
    """
    Criteria for searching for a particular fully specified service provider.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
    )
    service_provider_id = Field(type=str, required=True)


class SearchCriteriaExactServiceProviderAdminType(OCIType):
    """
    Criteria for searching for a particular service provider administrator type.
    """

    ELEMENTS = (ElementInfo("type", "type", str, False, True, False),)
    type = Field(type=str, required=True)


class SearchCriteriaExactServiceType(OCIType):
    """
    Criteria for searching for a particular fully specified service type.
    """

    ELEMENTS = (ElementInfo("service_type", "serviceType", str, False, True, False),)
    service_type = Field(type=str, required=True)


class SearchCriteriaExactSignalingAddressType(OCIType):
    """
    Criteria for searching for a particular fully specified SignalingAddressType.
    """

    ELEMENTS = (ElementInfo("profile", "profile", str, False, True, False),)
    profile = Field(type=str, required=True)


class SearchCriteriaExactSkillLevel(OCIType):
    """
    Criteria for searching for a skill Level.
    """

    ELEMENTS = (ElementInfo("skill_level", "skillLevel", int, False, True, False),)
    skill_level = Field(type=int, required=True)


class SearchCriteriaExactUserGroup(OCIType):
    """
    Criteria for searching for a particular fully specified user's group.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)


class SearchCriteriaExactUserInTrunkGroup(OCIType):
    """
    Criteria for searching for user in/not in a trunk group.
    """

    ELEMENTS = (
        ElementInfo(
            "user_in_trunk_group", "userInTrunkGroup", bool, False, True, False,
        ),
    )
    user_in_trunk_group = Field(type=bool, required=True)


class SearchCriteriaExactUserNetworkClassOfService(OCIType):
    """
    Criteria for searching for users with a specified network class of service.
    """

    ELEMENTS = (
        ElementInfo(
            "network_class_of_service", "networkClassOfService", str, False, True, False,
        ),
    )
    network_class_of_service = Field(type=str, required=True)


class SearchCriteriaExactUserRouteListAssigned(OCIType):
    """
      Criteria for searching for users with/without Route List feature assigned.
    """

    ELEMENTS = (
        ElementInfo(
            "route_list_assigned", "routeListAssigned", bool, False, True, False,
        ),
    )
    route_list_assigned = Field(type=bool, required=True)


class SearchCriteriaExactUserRouteListAssignment(OCIType):
    """
    Criteria for searching for users with Route List feature assignment.
    """

    ELEMENTS = (ElementInfo("assigned", "assigned", bool, False, True, False),)
    assigned = Field(type=bool, required=True)


class SearchCriteriaExactUserType(OCIType):
    """
    Criteria for searching for a particular User Type.
    """

    ELEMENTS = (ElementInfo("user_type", "userType", str, False, True, False),)
    user_type = Field(type=str, required=True)


class SearchCriteriaExactVirtualOnNetCallTypeName(OCIType):
    """
    Criteria for searching for a particular fully specified Virtual On-Net Call Type Name.
    """

    ELEMENTS = (
        ElementInfo(
            "virtual_on_net_call_type_name",
            "virtualOnNetCallTypeName",
            str,
            False,
            True,
            False,
        ),
    )
    virtual_on_net_call_type_name = Field(type=str, required=True)


class SearchCriteriaExtension(OCIType):
    """
    Criteria for searching for an extension.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaForwardedToNumber(OCIType):
    """
    Criteria for searching for a forwarded to number.
    This search criteria data type is only intended to be used by the commands
    introduced by BW-2301.
    The commands are EnterpriseUserCallForwardingSettingsGetListRequest
    and GroupUserCallForwardingSettingsGetListRequest.
    The following Call Forwarding services are compatible for this search:
    Call Forwarding Always, Call Forwarding Always Secondary, Call Forwarding Busy,
    Call Forwarding No Answer, Call Forwarding Not Reachable, Call Forwarding Selective.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaGroupCommonMultiPartPhoneListName(OCIType):
    """
    Criteria for searching for a multi-value name in a group common phone list.
    Note: For this search criterion, the searchMode is always ‘Contains’ and the
    multi-part search criteria are always AND’ed.
    """

    ELEMENTS = (
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaGroupCommonPhoneListName(OCIType):
    """
    Criteria for searching for a name in a group common phone list.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaGroupCommonPhoneListNumber(OCIType):
    """
    Criteria for searching for a phone number in a group common phone list.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaGroupExternalId(OCIType):
    """
    Criteria for searching by a group's externalId.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)


class SearchCriteriaGroupId(OCIType):
    """
    Criteria for searching for a group ID.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaGroupLocationCode(OCIType):
    """
    Criteria for searching for a group location dialing code.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaGroupName(OCIType):
    """
    Criteria for searching for a group name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaHomeMscAddress(OCIType):
    """
    Criteria for searching for a system Home Network Msc Address.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaIMRN(OCIType):
    """
    Criteria for searching for an IMRN Number.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaImpId(OCIType):
    """
    Criteria for searching for a user's IMP Id.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaLanguage(OCIType):
    """
    Criteria for searching for a language.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaLinePortDomain(OCIType):
    """
    Criteria for searching for device line/port, or SIPURI domain part.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaLinePortUserPart(OCIType):
    """
    Criteria for searching for device line/port, or SIPURI user part.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaLocation(OCIType):
    """
    Criteria for searching for a Location.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaLoginId(OCIType):
    """
    Criteria for searching for a Login Id.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaMobilePhoneNumber(OCIType):
    """
    Criteria for searching for a user's mobile phone number.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaMobileSubscriberDirectoryNumber(OCIType):
    """
    Criteria for searching for a BroadWorks Mobility Mobile Subscriber Directory Number.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaMultiPartUserName(OCIType):
    """
    Criteria for searching for a user's full name.
    This search criterion will be compared against multiple combinations of first
    name and last name:

    First Name + ‘ ‘ + Last Name
    Last Name + ‘ ‘ + First Name
    Last Name + ‘, ‘ + First Name
    Hiragana Last Name + Hiragana First Name

    Note that when specific conditions are met, VON users will be included in the
    search results.
    Note: For this search criterion, the searchMode is always ‘Contains’ and the
    multi-part search criteria are always AND’ed.
    """

    ELEMENTS = (
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaNetworkClassOfServiceName(OCIType):
    """
    Criteria for searching for a Network Class of Service name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaNumberPortabilityQueryDigitPattern(OCIType):
    """
    Criteria for searching for digit pattern.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaNumberPortabilityStatus(OCIType):
    """
    Criteria for searching for number portability status.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaOutgoingDNorSIPURI(OCIType):
    """
    Criteria for searching for a phone number or SIPURI.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaPersonalAssistantExclusionNumber(OCIType):
    """
    Criteria for searching for Personal Assistant Exclusion Number.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaPersonalAssistantExclusionNumberDescription(OCIType):
    """
    Criteria for searching Personal Assistant Exclusion Number's Description.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaPhysicalLocation(OCIType):
    """
    Criteria for searching for a Physical Location.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaProfileServiceCode(OCIType):
    """
    Criteria for searching for a Service Code.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaProfileServiceCodeDescription(OCIType):
    """
    Criteria for searching for a Service Code description.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaReceptionistNote(OCIType):
    """
    Criteria for searching for Receptionist Notes.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaRegistrationURI(OCIType):
    """
    Criteria for searching for a RegistrationURI.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaResellerId(OCIType):
    """
    Criteria for searching for a reseller ID.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaResellerName(OCIType):
    """
    Criteria for searching for a reseller name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaRoamingMscAddress(OCIType):
    """
    Criteria for searching for a system Roaming Network Msc Address.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaRoutePointName(OCIType):
    """
    Criteria for searching for a route point
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaSIPContact(OCIType):
    """
    Criteria for searching for a SIP Contact.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaScheduleName(OCIType):
    """
    Criteria for searching for a schedule name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaServiceCode(OCIType):
    """
    Criteria for searching for a Service Code.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaServiceCodeDescription(OCIType):
    """
    Criteria for searching for a Service Code description.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaServiceInstanceName(OCIType):
    """
    Criteria for searching for a service instance name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaServiceProviderId(OCIType):
    """
    Criteria for searching for a service provider ID.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaServiceProviderName(OCIType):
    """
    Criteria for searching for a service provider name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaServiceProviderNumberPortabilityQueryDigitPattern(OCIType):
    """
    Criteria for searching for digit pattern.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaServiceStatus(OCIType):
    """
    Criteria for searching for services that are active or not.
    This search criteria data type is only intended to be used by the commands
    introduced by BW-2301.
    The commands are EnterpriseUserCallWaitingSettingsGetListRequest
    and GroupUserCallWaitingSettingsGetListRequest.
    """

    ELEMENTS = (ElementInfo("is_active", "isActive", bool, False, True, False),)
    is_active = Field(type=bool, required=True)


class SearchCriteriaSystemServiceDn(OCIType):
    """
    Criteria for searching for a system service DN.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaTitle(OCIType):
    """
      Criteria for searching for a user's title.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaTrunkGroupName(OCIType):
    """
    Criteria for searching for a trunk group
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserExternalId(OCIType):
    """
    Criteria for searching for a user's externalId.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)


class SearchCriteriaUserFirstName(OCIType):
    """
    Criteria for searching for a user's first name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserHotlineContact(OCIType):
    """
    Criteria for searching for a user's hotline contact.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserId(OCIType):
    """
    Criteria for searching for a user's userId.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserLastName(OCIType):
    """
    Criteria for searching for a user's last name.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserName(OCIType):
    """
    Criteria for searching for a user's full name.
    This search criterion will be compared against multiple combinations of first
    name and last name:

    First Name + ' ' + Last Name
    Last Name + ' ' + First Name
    Last Name + ', ' + First Name
    Hiragana Last Name + Hiragana First Name

    Note that when specific conditions are met, VON users will be included in the
    search results.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserPersonalMultiPartPhoneListName(OCIType):
    """
    Criteria for searching for a name in a user personal phone list.
    Note: For this search criterion, the searchMode is always ‘Contains’ and the
    multi-part search criteria are always AND’ed.
    """

    ELEMENTS = (
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserPersonalPhoneListName(OCIType):
    """
    Criteria for searching for a name in a user personal phone list.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserPersonalPhoneListNumber(OCIType):
    """
    Criteria for searching for a phone number in a user personal phone list.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaUserPlaceType(OCIType):
    """
    Criteria for searching based on a user type – “User” or “Place”.
    """

    ELEMENTS = (ElementInfo("value", "value", str, False, True, False),)
    value = Field(type=str, required=True)


class SearchCriteriaYahooId(OCIType):
    """
    Criteria for searching for a user's yahoo id.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SearchCriteriaZoneIPAddress(OCIType):
    """
    Criteria for searching for a system zone's IP Address.
    """

    ELEMENTS = (
        ElementInfo("mode", "mode", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
        ElementInfo(
            "is_case_insensitive", "isCaseInsensitive", bool, False, True, False,
        ),
    )
    mode = Field(type=str, required=True)
    value = Field(type=str, required=True)
    is_case_insensitive = Field(type=bool, required=True)


class SecurityClassificationCustomizationActivation(OCIType):
    """
    The security classification customization activation.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("is_customized", "isCustomized", bool, False, True, False),
    )
    name = Field(type=str, required=True)
    is_customized = Field(type=bool, required=True)


class SelectDistributionListMenuKeysModifyEntry(OCIType):
    """
    The voice portal select distribution list menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo(
            "repeat_menu_or_finish_entering_distribution_list_number",
            "repeatMenuOrFinishEnteringDistributionListNumber",
            str,
            False,
            False,
            False,
        ),
    )
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu_or_finish_entering_distribution_list_number = Field(
        type=str, required=False,
    )


class SelectDistributionListMenuKeysReadEntry(OCIType):
    """
    The voice portal select distribution list menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo(
            "repeat_menu_or_finish_entering_distribution_list_number",
            "repeatMenuOrFinishEnteringDistributionListNumber",
            str,
            False,
            False,
            False,
        ),
    )
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu_or_finish_entering_distribution_list_number = Field(
        type=str, required=False,
    )


class SelectiveCallRejectionCriteriaCallType(OCIType):
    """
    The call type criteria used within an add/get request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
    )
    from_dn_criteria_selection = Field(type=str, required=True)
    include_anonymous_callers = Field(type=bool, required=True)
    include_unavailable_callers = Field(type=bool, required=True)
    phone_number = Field(type=str, required=False)


class SendMessageToSelectedDistributionListMenuKeysModifyEntry(OCIType):
    """
    The voice portal send message to selected distribution list menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "confirm_sending_to_distribution_list",
            "confirmSendingToDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "cancel_sending_to_distribution_list",
            "cancelSendingToDistributionList",
            str,
            False,
            False,
            False,
        ),
    )
    confirm_sending_to_distribution_list = Field(type=str, required=False)
    cancel_sending_to_distribution_list = Field(type=str, required=False)


class SendMessageToSelectedDistributionListMenuKeysReadEntry(OCIType):
    """
    The voice portal send message to selected distribution list menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "confirm_sending_to_distribution_list",
            "confirmSendingToDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "cancel_sending_to_distribution_list",
            "cancelSendingToDistributionList",
            str,
            False,
            True,
            False,
        ),
    )
    confirm_sending_to_distribution_list = Field(type=str, required=False)
    cancel_sending_to_distribution_list = Field(type=str, required=True)


class SendToAllGroupMembersMenuKeysModifyEntry(OCIType):
    """
    The voice portal send to all group memeber menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "confirm_sending_to_entire_group",
            "confirmSendingToEntireGroup",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "cancel_sending_to_entire_group",
            "cancelSendingToEntireGroup",
            str,
            False,
            False,
            False,
        ),
    )
    confirm_sending_to_entire_group = Field(type=str, required=False)
    cancel_sending_to_entire_group = Field(type=str, required=False)


class SendToAllGroupMembersMenuKeysReadEntry(OCIType):
    """
    The voice portal send to all group memeber menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "confirm_sending_to_entire_group",
            "confirmSendingToEntireGroup",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "cancel_sending_to_entire_group",
            "cancelSendingToEntireGroup",
            str,
            False,
            True,
            False,
        ),
    )
    confirm_sending_to_entire_group = Field(type=str, required=True)
    cancel_sending_to_entire_group = Field(type=str, required=True)


class SendToDistributionListMenuKeysModifyEntry(OCIType):
    """
    The voice portal send to distribution list menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "send_message_to_selected_distribution_list",
            "sendMessageToSelectedDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "select_distribution_list",
            "selectDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "review_selected_distribution_list",
            "reviewSelectedDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    send_message_to_selected_distribution_list = Field(type=str, required=False)
    select_distribution_list = Field(type=str, required=False)
    review_selected_distribution_list = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class SendToDistributionListMenuKeysReadEntry(OCIType):
    """
    The voice portal send to distribution list menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "send_message_to_selected_distribution_list",
            "sendMessageToSelectedDistributionList",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "select_distribution_list",
            "selectDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "review_selected_distribution_list",
            "reviewSelectedDistributionList",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    send_message_to_selected_distribution_list = Field(type=str, required=True)
    select_distribution_list = Field(type=str, required=False)
    review_selected_distribution_list = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class SendToPersonMenuKeysModifyEntry(OCIType):
    """
    The voice portal send to person menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "confirm_sending_message", "confirmSendingMessage", str, False, False, False,
        ),
        ElementInfo(
            "cancel_sending_message", "cancelSendingMessage", str, False, False, False,
        ),
        ElementInfo(
            "finish_entering_number_where_to_send_message_to",
            "finishEnteringNumberWhereToSendMessageTo",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "finish_forwarding_or_sending_message",
            "finishForwardingOrSendingMessage",
            str,
            False,
            False,
            False,
        ),
    )
    confirm_sending_message = Field(type=str, required=False)
    cancel_sending_message = Field(type=str, required=False)
    finish_entering_number_where_to_send_message_to = Field(type=str, required=False)
    finish_forwarding_or_sending_message = Field(type=str, required=False)


class SendToPersonMenuKeysReadEntry(OCIType):
    """
    The voice portal send to person menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "confirm_sending_message", "confirmSendingMessage", str, False, True, False,
        ),
        ElementInfo(
            "cancel_sending_message", "cancelSendingMessage", str, False, True, False,
        ),
        ElementInfo(
            "finish_entering_number_where_to_send_message_to",
            "finishEnteringNumberWhereToSendMessageTo",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "finish_forwarding_or_sending_message",
            "finishForwardingOrSendingMessage",
            str,
            False,
            True,
            False,
        ),
    )
    confirm_sending_message = Field(type=str, required=True)
    cancel_sending_message = Field(type=str, required=True)
    finish_entering_number_where_to_send_message_to = Field(type=str, required=True)
    finish_forwarding_or_sending_message = Field(type=str, required=True)


class SequentialRingLocation(OCIType):
    """
    Sequential Ring Location.
    Replaced By: SequentialRingLocation14sp4
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("number_of_rings", "numberOfRings", int, False, True, False),
    )
    phone_number = Field(type=str, required=False)
    number_of_rings = Field(type=int, required=True)


class SequentialRingLocation14sp4(OCIType):
    """
    Sequential Ring Location.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("number_of_rings", "numberOfRings", int, False, True, False),
        ElementInfo(
            "answer_confirmation_required",
            "answerConfirmationRequired",
            bool,
            False,
            True,
            False,
        ),
    )
    phone_number = Field(type=str, required=False)
    number_of_rings = Field(type=int, required=True)
    answer_confirmation_required = Field(type=bool, required=True)


class SequentialRingLocationModify(OCIType):
    """
    Sequential Ring Location.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("number_of_rings", "numberOfRings", int, False, False, False),
        ElementInfo(
            "answer_confirmation_required",
            "answerConfirmationRequired",
            bool,
            False,
            False,
            False,
        ),
    )
    phone_number = Field(type=str, required=False)
    number_of_rings = Field(type=int, required=False)
    answer_confirmation_required = Field(type=bool, required=False)


class ServiceActivation(OCIType):
    """
    Service Instance active status indicator
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("is_active", "isActive", bool, False, True, False),
    )
    service_user_id = Field(type=str, required=True)
    is_active = Field(type=bool, required=True)


class ServiceCodeEntry(OCIType):
    """
    The service code entry.
    """

    ELEMENTS = (
        ElementInfo("service_code", "serviceCode", str, False, True, False),
        ElementInfo("description", "description", str, False, True, False),
    )
    service_code = Field(type=str, required=True)
    description = Field(type=str, required=True)


class ServicePolicyAttributeEntry(OCIType):
    """
    The service policy attributes name and value pair.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("value", "value", str, False, False, False),
    )
    name = Field(type=str, required=True)
    value = Field(type=str, required=False)


class ServicePolicyAttributeModifyEntry(OCIType):
    """
    The service policy attributes name and value pair.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("value", "value", str, False, True, False),
    )
    name = Field(type=str, required=True)
    value = Field(type=str, required=True)


class ServicePolicyProfileKey(OCIType):
    """
    The service policy profile key.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("category", "category", str, False, True, False),
    )
    name = Field(type=str, required=True)
    category = Field(type=str, required=True)


class ServiceProviderAdmin(OCIType):
    """
    The common Service Provider Admin elements.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, False, False),
        ElementInfo("last_name", "lastName", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("administrator_type", "administratorType", str, False, True, False),
    )
    user_id = Field(type=str, required=True)
    first_name = Field(type=str, required=False)
    last_name = Field(type=str, required=False)
    password = Field(type=str, required=False)
    language = Field(type=str, required=False)
    administrator_type = Field(type=str, required=True)


class ServiceProviderBroadWorksMobilityGetRequest21sp1V2(OCIType):
    """
    Get the service provider BroadWorks Mobility service settings.
    The response is either a ServiceProviderBroadWorksMobilityGetResponse21sp1V2 or
    an ErrorResponse.

    Replaced by ServiceProviderBroadWorksMobilityGetRequest22V2.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
    )
    service_provider_id = Field(type=str, required=True)


class ServiceProviderBroadWorksMobilityGetResponse21sp1V2(OCIType):
    """
    The response to a ServiceProviderBroadWorksMobilityGetRequest21sp1V2.

    Replaced by ServiceProviderBroadWorksMobilityGetResponse22V2.
    """

    ELEMENTS = (
        ElementInfo("use_setting_level", "useSettingLevel", str, False, True, False),
        ElementInfo(
            "enable_location_services",
            "enableLocationServices",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("enable_msrn_lookup", "enableMSRNLookup", bool, False, True, False),
        ElementInfo(
            "enable_mobile_state_checking",
            "enableMobileStateChecking",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "deny_call_originations", "denyCallOriginations", bool, False, True, False,
        ),
        ElementInfo(
            "deny_call_terminations", "denyCallTerminations", bool, False, True, False,
        ),
        ElementInfo(
            "enable_announcement_suppression",
            "enableAnnouncementSuppression",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_internal_clid_delivery_access_locations",
            "enableInternalCLIDDeliveryAccessLocations",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_enhanced_unreachable_state_checking",
            "enableEnhancedUnreachableStateChecking",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_network_call_barring_status_check",
            "enableNetworkCallBarringStatusCheck",
            bool,
            False,
            True,
            False,
        ),
    )
    use_setting_level = Field(type=str, required=True)
    enable_location_services = Field(type=bool, required=True)
    enable_msrn_lookup = Field(type=bool, required=True)
    enable_mobile_state_checking = Field(type=bool, required=True)
    deny_call_originations = Field(type=bool, required=True)
    deny_call_terminations = Field(type=bool, required=True)
    enable_announcement_suppression = Field(type=bool, required=True)
    enable_internal_clid_delivery_access_locations = Field(type=bool, required=True)
    enable_enhanced_unreachable_state_checking = Field(type=bool, required=True)
    enable_network_call_barring_status_check = Field(type=bool, required=True)


class ServiceProviderCommunicationBarringHierarchicalCallMeNowRule(OCIType):
    """
    Service Provider Communication Barring Hierarchical Call Me Now Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo(
            "digit_pattern_criteria", "digitPatternCriteria", str, False, True, False,
        ),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
        ElementInfo("time_schedule", "timeSchedule", str, False, False, False),
        ElementInfo("holiday_schedule", "holidaySchedule", str, False, False, False),
        ElementInfo("priority", "priority", str, False, True, False),
    )
    criteria = Field(type=str, required=True)
    digit_pattern_criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    call_timeout_seconds = Field(type=int, required=False)
    time_schedule = Field(type=str, required=False)
    holiday_schedule = Field(type=str, required=False)
    priority = Field(type=str, required=True)


class ServiceProviderCommunicationBarringHierarchicalOriginatingRule(OCIType):
    """
    Service Provider Communication Barring Hierarchical Originating Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo(
            "digit_pattern_criteria", "digitPatternCriteria", str, False, True, False,
        ),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("treatment_id", "treatmentId", str, False, False, False),
        ElementInfo("transfer_number", "transferNumber", str, False, False, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
        ElementInfo("time_schedule", "timeSchedule", str, False, False, False),
        ElementInfo("holiday_schedule", "holidaySchedule", str, False, False, False),
        ElementInfo("priority", "priority", str, False, True, False),
    )
    criteria = Field(type=str, required=True)
    digit_pattern_criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    treatment_id = Field(type=str, required=False)
    transfer_number = Field(type=str, required=False)
    call_timeout_seconds = Field(type=int, required=False)
    time_schedule = Field(type=str, required=False)
    holiday_schedule = Field(type=str, required=False)
    priority = Field(type=str, required=True)


class ServiceProviderCommunicationBarringHierarchicalRedirectingRule(OCIType):
    """
    Service Provider Communication Barring Hierarchical Redirecting Rule
    """

    ELEMENTS = (
        ElementInfo("criteria", "criteria", str, False, True, False),
        ElementInfo(
            "digit_pattern_criteria", "digitPatternCriteria", str, False, True, False,
        ),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo(
            "call_timeout_seconds", "callTimeoutSeconds", int, False, False, False,
        ),
        ElementInfo("time_schedule", "timeSchedule", str, False, False, False),
        ElementInfo("holiday_schedule", "holidaySchedule", str, False, False, False),
        ElementInfo("priority", "priority", str, False, True, False),
    )
    criteria = Field(type=str, required=True)
    digit_pattern_criteria = Field(type=str, required=True)
    action = Field(type=str, required=True)
    call_timeout_seconds = Field(type=int, required=False)
    time_schedule = Field(type=str, required=False)
    holiday_schedule = Field(type=str, required=False)
    priority = Field(type=str, required=True)


class ServiceProviderCommunicationBarringProfileGetRequest19sp1V2(OCIType):
    """
    Get an existing Communication Barring Profile.
    The response is either a ServiceProviderCommunicationBarringProfileGetResponse19sp1V2
    or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    name = Field(type=str, required=True)


class ServiceProviderVoiceMessagingGroupSettingsAdd(OCIType):
    """
    A service provider's or enterprise's voice messaging settings used in the context of add.
    """

    ELEMENTS = (
        ElementInfo(
            "delivery_from_address", "deliveryFromAddress", str, False, False, False,
        ),
        ElementInfo(
            "notification_from_address",
            "notificationFromAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "voice_portal_lockout_from_address",
            "voicePortalLockoutFromAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "use_system_default_delivery_from_address",
            "useSystemDefaultDeliveryFromAddress",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_system_default_notification_from_address",
            "useSystemDefaultNotificationFromAddress",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_system_default_voice_portal_lockout_from_address",
            "useSystemDefaultVoicePortalLockoutFromAddress",
            bool,
            False,
            True,
            False,
        ),
    )
    delivery_from_address = Field(type=str, required=False)
    notification_from_address = Field(type=str, required=False)
    voice_portal_lockout_from_address = Field(type=str, required=False)
    use_system_default_delivery_from_address = Field(type=bool, required=True)
    use_system_default_notification_from_address = Field(type=bool, required=True)
    use_system_default_voice_portal_lockout_from_address = Field(
        type=bool, required=True,
    )


class ServiceScriptsFileResource(OCIType):
    """
    Service Scripts File Resource for uploading file content.
    """

    ELEMENTS = (
        ElementInfo("file_name", "fileName", str, False, True, False),
        ElementInfo("script_content", "scriptContent", str, False, True, False),
    )
    file_name = Field(type=str, required=True)
    script_content = Field(type=str, required=True)


class SimultaneousRingNumber(OCIType):
    """
    Simultaneous Ring number entry.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo(
            "answer_confirmation_required",
            "answerConfirmationRequired",
            bool,
            False,
            True,
            False,
        ),
    )
    phone_number = Field(type=str, required=True)
    answer_confirmation_required = Field(type=bool, required=True)


class SortByAdminFirstName(OCIType):
    """
    The sort criteria specifies the administrator first name
    as the column for the
    sort, whether the
    sort is ascending or
    descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByAdminId(OCIType):
    """
    The sort criteria specifies the administrator id as the
    column for the sort,
    whether the
    sort is ascending or descending,
    and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByAdminLastName(OCIType):
    """
    The sort criteria specifies the administrator last name
    as the column for the
    sort, whether the
    sort is ascending or
    descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByAgentThresholdProfile(OCIType):
    """
    The sort criteria specifies the call center agent threshold profile as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByAnnouncementFileName(OCIType):
    """
    The sort criteria specifies the file name as the column for the sort,
    whether the sort is ascending or descending, and whether the sort is
    case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByAnnouncementFileSize(OCIType):
    """
    The sort criteria specifies the file size as the column for the sort,
    whether the sort is ascending or descending, and whether the sort is
    case sensitive.
    """

    ELEMENTS = (ElementInfo("is_ascending", "isAscending", bool, False, True, False),)
    is_ascending = Field(type=bool, required=True)


class SortByCallCenterName(OCIType):
    """
    The sort criteria specifies the call center name as the column for the sort, whether the
    sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByCallCenterType(OCIType):
    """
    The sort criteria specifies the call center type as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByCallParkName(OCIType):
    """
    The sort criteria specifies the call park name as the column for the sort, whether the
    sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByCallPickupName(OCIType):
    """
    The sort criteria specifies the call pickup name as the column for the sort, whether the
    sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDepartmentName(OCIType):
    """
    The sort criteria specifies the department name as the column for the sort, whether the
    sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDeviceMACAddress(OCIType):
    """
    The sort criteria specifies the device MAC address as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDeviceName(OCIType):
    """
    The sort criteria specifies the device name as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDeviceNetAddress(OCIType):
    """
    The sort criteria specifies the device net address as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDeviceType(OCIType):
    """
    The sort criteria specifies the device type as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDn(OCIType):
    """
    The sort criteria specifies the DN as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDnActivated(OCIType):
    """
    The sort criteria specifies the dn activation status as the column for the sort,
    whether the sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByDnAvailable(OCIType):
    """
    The sort criteria specifies the dn availability as the column for the sort, whether the
        sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByEmailAddress(OCIType):
    """
    The sort criteria specifies the email as the column for the sort, whether
        the sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByEnabled(OCIType):
    """
    The sort criteria specifies the Broadworks Enabled Flag as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByEnterpriseCommonPhoneListName(OCIType):
    """
    The sort criteria specifies the enterprise common phone list name as the
    column for the sort, whether sort is ascending or descending, and
    whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByEnterpriseCommonPhoneListNumber(OCIType):
    """
    The sort criteria specifies the enterprise common phone list number as as the column
    for the sort, whether sort is ascending or descending, and whether the sort is
    case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByExtension(OCIType):
    """
            The sort criteria specifies the extension as the column for
            the sort, whether the sort is ascending or descending, and whether the
            sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByForwardedToNumber(OCIType):
    """
            The sort criteria specifies the forwarded to phone number as the column for
            the sort, whether the sort is ascending or descending, and whether the
            sort is case sensitive.
            This sort criteria data type is only intended to be used by the commands
            introduced by BW-2301.
            The commands are EnterpriseUserCallForwardingSettingsGetListRequest
            and GroupUserCallForwardingSettingsGetListRequest.
            The following Call Forwarding services are compatible for this search:
            Call Forwarding Always, Call Forwarding Always Secondary, Call Forwarding Busy,
            Call Forwarding No Answer, Call Forwarding Not Reachable, Call Forwarding
    Selective.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByGroupCommonPhoneListName(OCIType):
    """
            The sort criteria specifies the group common phone list name as the
    column for the sort, whether
            the sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByGroupCommonPhoneListNumber(OCIType):
    """
            The sort criteria specifies the group common phone list number as the
    column for the sort, whether
            sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByGroupId(OCIType):
    """
    The sort criteria specifies the group id as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByGroupLocationCode(OCIType):
    """
    The sort criteria specifies the group location code as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByGroupName(OCIType):
    """
      The sort criteria specifies the group name as the column for
      the sort, whether the sort is ascending or descending, and whether the
      sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByHuntPolicy(OCIType):
    """
    The sort criteria specifies the call center hunt policy as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByImpId(OCIType):
    """
    The sort criteria specifies the imp id as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByLocation(OCIType):
    """
    The sort criteria specifies the Broadworks Location as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByMobileDirectoryNumber(OCIType):
    """
      The sort criteria specifies the Mobile dn availability as the column for the
      sort, whether the sort is ascending or descending, and whether the sort
      is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByMobilePhoneNumber(OCIType):
    """
    The sort criteria specifies the mobile phone number as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByReceptionistNote(OCIType):
    """
    The sort criteria specifies the Receptionist Notes as the column for the sort, whether
    the sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByScheduleName(OCIType):
    """
      The sort criteria specifies the schedule name as the column for
      the sort, whether the sort is ascending or descending, and whether the
      sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByServiceProviderId(OCIType):
    """
    The sort criteria specifies the service provider id as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByServiceProviderName(OCIType):
    """
    The sort criteria specifies the service provider name as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByServiceStatus(OCIType):
    """
        The sort criteria specifies the service status as the column for
        the sort, whether the sort is ascending or descending, and whether the
        sort is case sensitive.
        This sort criteria data type is only intended to be used by the commands
        introduced by BW-2301.
        The commands are EnterpriseUserCallWaitingSettingsGetListRequest,
    GroupUserCallWaitingSettingsGetListRequest,
        EnterpriseUserHotelingGuestSettingsGetListRequest, and
    GroupUserHotelingGuestSettingsGetListRequest.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByTrunkGroupName(OCIType):
    """
    The sort criteria specifies the trunk group name as the column for the sort, whether the
    sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByUserDepartment(OCIType):
    """
            The sort criteria specifies the user department name as the column for
    the sort, whether the
            sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByUserFirstName(OCIType):
    """
            The sort criteria specifies the user first name as the column for the
    sort, whether the
            sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByUserId(OCIType):
    """
    The sort criteria specifies the user id as the column for the sort,
    whether the sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByUserLastName(OCIType):
    """
            The sort criteria specifies the user last name as the column for the
    sort, whether the
            sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByUserPersonalPhoneListName(OCIType):
    """
    The sort criteria specifies the user personal phone list name as the column for
    the sort, whether
        sort is ascending or descending, and whether the sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByUserPersonalPhoneListNumber(OCIType):
    """
            The sort criteria specifies the user personal phone list number as the column for
            the sort, whether the sort is ascending or descending, and whether the
            sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortByYahooId(OCIType):
    """
    The sort criteria specifies the yahoo id as the column for
    the sort, whether the sort is ascending or descending, and whether the
    sort is case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortCriteria(OCIType):
    """
    The sort criteria specifies whether sort is ascending or descending,
    and    whether the sort is case sensitive. Sort order defaults to
    ascending and case sensitive.
    """

    ELEMENTS = (
        ElementInfo("is_ascending", "isAscending", bool, False, True, False),
        ElementInfo("is_case_sensitive", "isCaseSensitive", bool, False, True, False),
    )
    is_ascending = Field(type=bool, required=True)
    is_case_sensitive = Field(type=bool, required=True)


class SortCriteriaNumeric(OCIType):
    """
    The sort criteria specifies whether sort is
    ascending or descending.
    Sort order defaults to ascending.
    """

    ELEMENTS = (ElementInfo("is_ascending", "isAscending", bool, False, True, False),)
    is_ascending = Field(type=bool, required=True)


class SpeedDial100Entry(OCIType):
    """
    Modify the speed dial 100 prefix setting for a group.
    The response is either a SuccessResponse or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo("speed_code", "speedCode", int, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    speed_code = Field(type=int, required=True)
    phone_number = Field(type=str, required=True)
    description = Field(type=str, required=False)


class SpeedDial100EntryModify(OCIType):
    """
    Modify the speed dial 100 prefix setting for a group.
    The response is either a SuccessResponse or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo("speed_code", "speedCode", int, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    speed_code = Field(type=int, required=True)
    phone_number = Field(type=str, required=False)
    description = Field(type=str, required=False)


class SpeedDial8Entry(OCIType):
    """
    Modify the speed dial 8 prefix setting for a group.
    The response is either a SuccessResponse or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo("speed_code", "speedCode", int, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    speed_code = Field(type=int, required=True)
    phone_number = Field(type=str, required=False)
    description = Field(type=str, required=False)


class StreetAddress(OCIType):
    """
    Street address information.
    """

    ELEMENTS = (
        ElementInfo("address_line1", "addressLine1", str, False, False, False),
        ElementInfo("address_line2", "addressLine2", str, False, False, False),
        ElementInfo("city", "city", str, False, False, False),
        ElementInfo("state_or_province", "stateOrProvince", str, False, False, False),
        ElementInfo(
            "state_or_province_display_name",
            "stateOrProvinceDisplayName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("zip_or_postal_code", "zipOrPostalCode", str, False, False, False),
        ElementInfo("country", "country", str, False, False, False),
    )
    address_line1 = Field(type=str, required=False)
    address_line2 = Field(type=str, required=False)
    city = Field(type=str, required=False)
    state_or_province = Field(type=str, required=False)
    state_or_province_display_name = Field(type=str, required=False)
    zip_or_postal_code = Field(type=str, required=False)
    country = Field(type=str, required=False)


class SystemBroadWorksMobilityGetRequest21sp1V2(OCIType):
    """
    Get the broadworks mobility system parameters.
    The response is either a SystemBroadWorksMobilityGetResponse21sp1V2 or an ErrorResponse.

    Replaced by SystemBroadWorksMobilityGetRequest22V2.
    """

    ELEMENTS = ()


class SystemBroadWorksMobilityGetResponse21sp1V2(OCIType):
    """
    The response to a SystemBroadWorksMobilityGetRequest21sp1V2.

    Replaced by SystemBroadWorksMobilityGetResponse22V2.
    """

    ELEMENTS = (
        ElementInfo(
            "enable_location_services",
            "enableLocationServices",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("enable_msrn_lookup", "enableMSRNLookup", bool, False, True, False),
        ElementInfo(
            "enable_mobile_state_checking",
            "enableMobileStateChecking",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "deny_call_originations", "denyCallOriginations", bool, False, True, False,
        ),
        ElementInfo(
            "deny_call_terminations", "denyCallTerminations", bool, False, True, False,
        ),
        ElementInfo(
            "imrn_timeout_millisecnds",
            "imrnTimeoutMillisecnds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_internal_clid_delivery_access_locations",
            "enableInternalCLIDDeliveryAccessLocations",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_enhanced_unreachable_state_checking",
            "enableEnhancedUnreachableStateChecking",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_network_call_barring_status_check",
            "enableNetworkCallBarringStatusCheck",
            bool,
            False,
            True,
            False,
        ),
    )
    enable_location_services = Field(type=bool, required=True)
    enable_msrn_lookup = Field(type=bool, required=True)
    enable_mobile_state_checking = Field(type=bool, required=True)
    deny_call_originations = Field(type=bool, required=True)
    deny_call_terminations = Field(type=bool, required=True)
    imrn_timeout_millisecnds = Field(type=int, required=True)
    enable_internal_clid_delivery_access_locations = Field(type=bool, required=True)
    enable_enhanced_unreachable_state_checking = Field(type=bool, required=True)
    enable_network_call_barring_status_check = Field(type=bool, required=True)


class SystemCollaborateGetRequest20sp1V2(OCIType):
    """
    Request the system level data associated with collaborate services.
    The response is either a SystemCollaborateGetResponse20sp1V2 or an ErrorResponse.
    """

    ELEMENTS = ()


class SystemCommunicationBarringProfileGetRequest19sp1V2(OCIType):
    """
    Get an existing Communication Barring Profile.
    The response is either a SystemCommunicationBarringProfileGetResponse19sp1V2
    or an ErrorResponse.
    """

    ELEMENTS = (ElementInfo("name", "name", str, False, True, False),)
    name = Field(type=str, required=True)


class SystemSIPDeviceTypeGetRequest18sp1V2(OCIType):
    """
    Request to get a sip device type.
    See Also: SystemDeviceTypeGetRequest
    The response is either SystemSIPDeviceTypeGetResponse19 or ErrorResponse.

        Replaced by: SystemSIPDeviceTypeGetRequest19.
    """

    ELEMENTS = (ElementInfo("device_type", "deviceType", str, False, True, False),)
    device_type = Field(type=str, required=True)


class SystemSIPDeviceTypeGetRequest21sp1V2(OCIType):
    """
    Request to get a sip device type.
    See Also: SystemDeviceTypeGetRequest
    The response is either SystemSIPDeviceTypeGetResponse21sp1V2 or ErrorResponse.

    Replaced by: SystemSIPDeviceTypeGetRequest22 in AS data mode.
    """

    ELEMENTS = (ElementInfo("device_type", "deviceType", str, False, True, False),)
    device_type = Field(type=str, required=True)


class TimeInterval(OCIType):
    """
    Time Interval.
    """

    ELEMENTS = (
        ElementInfo("start_day_of_week", "startDayOfWeek", str, False, True, False),
        ElementInfo("start_hour", "startHour", int, False, True, False),
        ElementInfo("start_minute", "startMinute", int, False, True, False),
        ElementInfo("end_day_of_week", "endDayOfWeek", str, False, True, False),
        ElementInfo("end_hour", "endHour", int, False, True, False),
        ElementInfo("end_minute", "endMinute", int, False, True, False),
    )
    start_day_of_week = Field(type=str, required=True)
    start_hour = Field(type=int, required=True)
    start_minute = Field(type=int, required=True)
    end_day_of_week = Field(type=str, required=True)
    end_hour = Field(type=int, required=True)
    end_minute = Field(type=int, required=True)


class TimeSchedule(OCIType):
    """
    The from dn criteria.
    """

    ELEMENTS = (
        ElementInfo("type", "type", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
    )
    type = Field(type=str, required=True)
    name = Field(type=str, required=True)


class TrunkGroupDeviceEndpointAdd(OCIType):
    """
    Trunk group device endpoint used in the context of modify.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
    )
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)


class TrunkGroupDeviceEndpointModify(OCIType):
    """
    Trunk group device endpoint used in the context of modify.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
    )
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)


class TrunkGroupDeviceEndpointRead(OCIType):
    """
    Trunk group device endpoint.
    """

    ELEMENTS = (
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
    )
    service_user_id = Field(type=str, required=True)
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)


class TrunkGroupDeviceEndpointRead14sp4(OCIType):
    """
    Trunk group device endpoint.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("is_pilot_user", "isPilotUser", bool, False, True, False),
    )
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    is_pilot_user = Field(type=bool, required=True)


class TrunkGroupDeviceMultipleContactEndpointAdd(OCIType):
    """
    Trunk group device endpoint used in the context of modify that can have multiple contacts.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
    )
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)


class TrunkGroupDeviceMultipleContactEndpointRead(OCIType):
    """
    Trunk group device endpoint that can have multiple contacts.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("is_pilot_user", "isPilotUser", bool, False, True, False),
    )
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    is_pilot_user = Field(type=bool, required=True)


class TrunkGroupKey(OCIType):
    """
    Uniquely identifies a Trunk Group system-wide.
    The trunkGroupName is unique within a group, but not unique system-wide.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    name = Field(type=str, required=True)


class UnboundedNonNegativeInt(OCIType):
    """
    Unbounded Quantity. Can either be unlimited or a non-negative int quantity.
    """

    ELEMENTS = (
        ElementInfo("unlimited", "unlimited", bool, False, True, False),
        ElementInfo("quantity", "quantity", int, False, True, False),
    )
    unlimited = Field(type=bool, required=True)
    quantity = Field(type=int, required=True)


class UnboundedPositiveInt(OCIType):
    """
    Unbounded Quantity. Can either be unlimited or a positive int quantity.
    """

    ELEMENTS = (
        ElementInfo("unlimited", "unlimited", bool, False, True, False),
        ElementInfo("quantity", "quantity", int, False, True, False),
    )
    unlimited = Field(type=bool, required=True)
    quantity = Field(type=int, required=True)


class UserBroadWorksMobilityMobileIdentityGetRequest21sp1V2(OCIType):
    """
    Get the settings for a user's specified mobile identity.
    The response is either a UserBroadWorksMobilityMobileIdentityGetResponse21sp1V2
    or an ErrorResponse.

    Replaced by: UserBroadWorksMobilityMobileIdentityGetRequest22.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("mobile_number", "mobileNumber", str, False, True, False),
    )
    user_id = Field(type=str, required=True)
    mobile_number = Field(type=str, required=True)


class UserDNExtension(OCIType):
    """
     User's DN and extension. Used in SearchCriteriaComposedOrDnExtension when either a DN
     or an extension can be used as a search criteria.
    """

    ELEMENTS = (
        ElementInfo("dn", "dn", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
    )
    dn = Field(type=str, required=False)
    extension = Field(type=str, required=False)


class UserDisplayNames(OCIType):
    """
    The parts of a user's display name that a client can display in whatever way is
    appropriate
    for the client application.
    """

    ELEMENTS = (
        ElementInfo("last_name", "lastName", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, True, False),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
    )
    last_name = Field(type=str, required=True)
    first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)


class UserEndpointKey(OCIType):
    """
    Key to uniquely identify a user endpoint.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
    )
    user_id = Field(type=str, required=True)
    line_port = Field(type=str, required=True)


class UserEnhancedCallLogsGetListResponse17sp4V2(OCIType):
    """
    Response to UserEnhancedCallLogsGetListRequest17sp4V2.
    Total numbers of rows is:
    - the total number of retrievable logs of the call log type that was specified in
    the UserEnhancedCallLogsGetListRequest17sp4V2,
      if a call log type was specified in the request.
    - the total number of retrievable logs, if no call log type was specified in the request.
    A list of MixedCallLogsEntry will be returned if the call logs are stored on CDS
    A list of ExtendedMixedCallLogsEntry17sp4 will be returned if the call logs are
    stored on DBS
    The logs are sorted by date/time of the call.
    """

    ELEMENTS = (
        ElementInfo(
            "total_number_of_rows", "totalNumberOfRows", int, False, True, False,
        ),
        ElementInfo("legacy_entry", "legacyEntry", str, True, True, False),  # unknown
        ElementInfo(
            "extended_entry", "extendedEntry", str, True, True, False,
        ),  # unknown
    )
    total_number_of_rows = Field(type=int, required=True)
    legacy_entry = Field(type=str, required=True)
    extended_entry = Field(type=str, required=True)


class UserEnhancedCallLogsGetListResponse21sp1V2(OCIType):
    """
    Response to UserEnhancedCallLogsGetListRequest21sp1V2.
    Total numbers of rows is:
    - the total number of retrievable logs of the call log type that was specified in
    the UserEnhancedCallLogsGetListRequest21sp1V2,
      if a call log type was specified in the request.
    - the total number of retrievable logs, if no call log type was specified in the request.
    A list of MixedCallLogsEntry will be returned if the call logs are stored on CDS
    A list of ExtendedMixedCallLogsEntry21sp1V2 will be returned if the call logs are
    stored on DBS
    The logs are sorted by date/time of the call.
    """

    ELEMENTS = (
        ElementInfo(
            "total_number_of_rows", "totalNumberOfRows", int, False, True, False,
        ),
        ElementInfo("legacy_entry", "legacyEntry", str, True, True, False),  # unknown
        ElementInfo(
            "extended_entry", "extendedEntry", str, True, True, False,
        ),  # unknown
    )
    total_number_of_rows = Field(type=int, required=True)
    legacy_entry = Field(type=str, required=True)
    extended_entry = Field(type=str, required=True)


class UserFeatureAccessCodeModifyEntry(OCIType):
    """
         Feature Access Code Entry to be used in all user modify command.
    """

    ELEMENTS = (
        ElementInfo(
            "feature_access_code_name", "featureAccessCodeName", str, False, True, False,
        ),
        ElementInfo("enable_fac", "enableFAC", bool, False, False, False),
    )
    feature_access_code_name = Field(type=str, required=True)
    enable_fac = Field(type=bool, required=False)


class UserGetRequest21sp1V2(OCIType):
    """
    Request to get the user information.  The response is either
    UserGetResponse21sp1V2 or ErrorResponse.

     Replaced by UserGetRequest22V3 in AS data mode
    """

    ELEMENTS = (ElementInfo("user_id", "userId", str, False, True, False),)
    user_id = Field(type=str, required=True)


class UserMoveMessage(OCIType):
    """
    The message describes the impact made when moving a user from one group to
    another group within the enterprise. The message could also contain the error
    condition that prevents the user move.
    """

    ELEMENTS = (
        ElementInfo("message_code", "messageCode", int, False, True, False),
        ElementInfo("summary", "summary", str, False, True, False),
        ElementInfo("summary_english", "summaryEnglish", str, False, True, False),
    )
    message_code = Field(type=int, required=True)
    summary = Field(type=str, required=True)
    summary_english = Field(type=str, required=True)


class UserPreferredCarrierName(OCIType):
    """
    User can either use it's group's preferred carrier or use it's own.
    The user carrier name is exposed if it was previously configured.
    """

    ELEMENTS = (
        ElementInfo(
            "use_group_preferred_carrier",
            "useGroupPreferredCarrier",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("carrier", "carrier", str, False, False, False),
    )
    use_group_preferred_carrier = Field(type=bool, required=True)
    carrier = Field(type=str, required=False)


class UserPreferredCarrierNameModify(OCIType):
    """
    User can either use it's group's preferred carrier or use it's own.
    You can use the group's preferred carrier without clearing the user carrier name --
    in this case, the user carrier name is retained.
    """

    ELEMENTS = (
        ElementInfo(
            "use_group_preferred_carrier",
            "useGroupPreferredCarrier",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("carrier", "carrier", str, False, False, False),
    )
    use_group_preferred_carrier = Field(type=bool, required=True)
    carrier = Field(type=str, required=False)


class UserTwoStageDialingGetRequest13Mp20(OCIType):
    """
      Request the user level data associated with Two Stage Dialing.
      The response is either a UserTwoStageDialingGetResponse13Mp20 or an ErrorResponse.
    """

    ELEMENTS = (ElementInfo("user_id", "userId", str, False, True, False),)
    user_id = Field(type=str, required=True)


class UserTwoStageDialingGetResponse13Mp20(OCIType):
    """
      Response to UserTwoStageDialingGetRequest13Mp20.
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "allow_activation_with_user_addresses",
            "allowActivationWithUserAddresses",
            bool,
            False,
            True,
            False,
        ),
    )
    is_active = Field(type=bool, required=True)
    allow_activation_with_user_addresses = Field(type=bool, required=True)


class VerifyTranslationAndRoutingOrigination(OCIType):
    """
    Verification Translation and Routing origination
    value.
    """

    ELEMENTS = (
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("phone", "phone", str, False, True, False),
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("url", "url", str, False, True, False),
    )
    line_port = Field(type=str, required=True)
    phone = Field(type=str, required=True)
    user_id = Field(type=str, required=True)
    url = Field(type=str, required=True)


class VirtualOnNetUser(OCIType):
    """
    Virtual On-Net User.
    """

    ELEMENTS = (
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
        ElementInfo("extension", "extension", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, True, False),
        ElementInfo("last_name", "lastName", str, False, True, False),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type_name",
            "virtualOnNetCallTypeName",
            str,
            False,
            True,
            False,
        ),
    )
    phone_number = Field(type=str, required=True)
    extension = Field(type=str, required=True)
    first_name = Field(type=str, required=True)
    last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    virtual_on_net_call_type_name = Field(type=str, required=True)


class VirtualOnNetUserKey(OCIType):
    """
    Virtual On-Net User identifier which is the Service Provider ID, Group ID,
    and phone number (in E.164 format).
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    phone_number = Field(type=str, required=True)


class VoiceMessagingAliasListModify(OCIType):
    """
    A list of dns that is added to a previously configured list.
    """

    ELEMENTS = (ElementInfo("phone_number", "phoneNumber", str, False, True, False),)
    phone_number = Field(type=str, required=True)


class VoiceMessagingAlternateNoAnswerGreetingRead(OCIType):
    """
    The configuration of a alternate no answer greeting.
    It is used when geting a user's voice messaging greeting.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("audio_file", "audioFile", str, False, False, False),
        ElementInfo("video_file", "videoFile", str, False, False, False),
    )
    name = Field(type=str, required=True)
    audio_file = Field(type=str, required=False)
    video_file = Field(type=str, required=False)


class VoiceMessagingAlternateNoAnswerGreetingRead16(OCIType):
    """
    The configuration of a alternate no answer greeting.
    It is used when geting a user's voice messaging greeting.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("audio_file", "audioFile", str, False, False, False),
        ElementInfo("audio_media_type", "audioMediaType", str, False, False, False),
        ElementInfo("video_file", "videoFile", str, False, False, False),
        ElementInfo("video_media_type", "videoMediaType", str, False, False, False),
    )
    name = Field(type=str, required=True)
    audio_file = Field(type=str, required=False)
    audio_media_type = Field(type=str, required=False)
    video_file = Field(type=str, required=False)
    video_media_type = Field(type=str, required=False)


class VoiceMessagingMenuKeysModifyEntry(OCIType):
    """
    The voice portal voice messaging menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("play_messages", "playMessages", str, False, False, False),
        ElementInfo(
            "change_busy_greeting", "changeBusyGreeting", str, False, False, False,
        ),
        ElementInfo(
            "change_no_answer_greeting",
            "changeNoAnswerGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "change_extended_away_greeting",
            "changeExtendedAwayGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("compose_message", "composeMessage", str, False, False, False),
        ElementInfo(
            "delete_all_messages", "deleteAllMessages", str, False, False, False,
        ),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo("message_deposit", "messageDeposit", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    play_messages = Field(type=str, required=False)
    change_busy_greeting = Field(type=str, required=False)
    change_no_answer_greeting = Field(type=str, required=False)
    change_extended_away_greeting = Field(type=str, required=False)
    compose_message = Field(type=str, required=False)
    delete_all_messages = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    personalized_name = Field(type=str, required=False)
    message_deposit = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)


class VoiceMessagingMenuKeysReadEntry(OCIType):
    """
    The voice portal voice messaging menu keys.
    """

    ELEMENTS = (
        ElementInfo("play_messages", "playMessages", str, False, False, False),
        ElementInfo(
            "change_busy_greeting", "changeBusyGreeting", str, False, False, False,
        ),
        ElementInfo(
            "change_no_answer_greeting",
            "changeNoAnswerGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "change_extended_away_greeting",
            "changeExtendedAwayGreeting",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("compose_message", "composeMessage", str, False, False, False),
        ElementInfo(
            "delete_all_messages", "deleteAllMessages", str, False, False, False,
        ),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo("personalized_name", "personalizedName", str, False, False, False),
        ElementInfo("message_deposit", "messageDeposit", str, False, False, False),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
    )
    play_messages = Field(type=str, required=False)
    change_busy_greeting = Field(type=str, required=False)
    change_no_answer_greeting = Field(type=str, required=False)
    change_extended_away_greeting = Field(type=str, required=False)
    compose_message = Field(type=str, required=False)
    delete_all_messages = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    personalized_name = Field(type=str, required=False)
    message_deposit = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=True)
    repeat_menu = Field(type=str, required=False)


class VoicePortalCallingMenuKeysModifyEntry(OCIType):
    """
    The voice portal calling menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "end_current_call_and_go_back_to_previous_menu",
            "endCurrentCallAndGoBackToPreviousMenu",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, False, False,
        ),
    )
    end_current_call_and_go_back_to_previous_menu = Field(type=str, required=False)
    return_to_previous_menu = Field(type=str, required=False)


class VoicePortalCallingMenuKeysReadEntry(OCIType):
    """
    The voice portal change calling menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "end_current_call_and_go_back_to_previous_menu",
            "endCurrentCallAndGoBackToPreviousMenu",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "return_to_previous_menu", "returnToPreviousMenu", str, False, True, False,
        ),
    )
    end_current_call_and_go_back_to_previous_menu = Field(type=str, required=True)
    return_to_previous_menu = Field(type=str, required=True)


class VoicePortalLoginMenuKeysModifyEntry(OCIType):
    """
    The voice portal voice portal login menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo(
            "access_using_other_mailbox_id",
            "accessUsingOtherMailboxId",
            str,
            False,
            False,
            False,
        ),
    )
    access_using_other_mailbox_id = Field(type=str, required=False)


class VoicePortalLoginMenuKeysReadEntry(OCIType):
    """
    The voice portal login menu keys.
    """

    ELEMENTS = (
        ElementInfo(
            "access_using_other_mailbox_id",
            "accessUsingOtherMailboxId",
            str,
            False,
            False,
            False,
        ),
    )
    access_using_other_mailbox_id = Field(type=str, required=False)


class VoicePortalMainMenuKeysModifyEntry(OCIType):
    """
    The voice portal main menu keys modify entry.
    """

    ELEMENTS = (
        ElementInfo("voice_messaging", "voiceMessaging", str, False, False, False),
        ElementInfo(
            "comm_pilot_express_profile",
            "commPilotExpressProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("greetings", "greetings", str, False, False, False),
        ElementInfo(
            "call_forwarding_options", "callForwardingOptions", str, False, False, False,
        ),
        ElementInfo(
            "voice_portal_calling", "voicePortalCalling", str, False, False, False,
        ),
        ElementInfo("hoteling", "hoteling", str, False, False, False),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo("exit_voice_portal", "exitVoicePortal", str, False, False, False),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
        ElementInfo("external_routing", "externalRouting", str, False, False, False),
        ElementInfo("announcement", "announcement", str, False, False, False),
        ElementInfo(
            "personal_assistant", "personalAssistant", str, False, False, False,
        ),
    )
    voice_messaging = Field(type=str, required=False)
    comm_pilot_express_profile = Field(type=str, required=False)
    greetings = Field(type=str, required=False)
    call_forwarding_options = Field(type=str, required=False)
    voice_portal_calling = Field(type=str, required=False)
    hoteling = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    exit_voice_portal = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)
    external_routing = Field(type=str, required=False)
    announcement = Field(type=str, required=False)
    personal_assistant = Field(type=str, required=False)


class VoicePortalMainMenuKeysReadEntry(OCIType):
    """
    The voice portal main menu keys.
    """

    ELEMENTS = (
        ElementInfo("voice_messaging", "voiceMessaging", str, False, False, False),
        ElementInfo(
            "comm_pilot_express_profile",
            "commPilotExpressProfile",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("greetings", "greetings", str, False, False, False),
        ElementInfo(
            "call_forwarding_options", "callForwardingOptions", str, False, False, False,
        ),
        ElementInfo(
            "voice_portal_calling", "voicePortalCalling", str, False, False, False,
        ),
        ElementInfo("hoteling", "hoteling", str, False, False, False),
        ElementInfo("passcode", "passcode", str, False, False, False),
        ElementInfo("exit_voice_portal", "exitVoicePortal", str, False, False, False),
        ElementInfo("repeat_menu", "repeatMenu", str, False, False, False),
        ElementInfo("external_routing", "externalRouting", str, False, False, False),
        ElementInfo("announcement", "announcement", str, False, False, False),
        ElementInfo(
            "personal_assistant", "personalAssistant", str, False, False, False,
        ),
    )
    voice_messaging = Field(type=str, required=False)
    comm_pilot_express_profile = Field(type=str, required=False)
    greetings = Field(type=str, required=False)
    call_forwarding_options = Field(type=str, required=False)
    voice_portal_calling = Field(type=str, required=False)
    hoteling = Field(type=str, required=False)
    passcode = Field(type=str, required=False)
    exit_voice_portal = Field(type=str, required=False)
    repeat_menu = Field(type=str, required=False)
    external_routing = Field(type=str, required=False)
    announcement = Field(type=str, required=False)
    personal_assistant = Field(type=str, required=False)


class XsiApplicationIdEntry(OCIType):
    """
    The system application Id entry.
    """

    ELEMENTS = (
        ElementInfo("xsi_application_id", "xsiApplicationId", str, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
    )
    xsi_application_id = Field(type=str, required=True)
    description = Field(type=str, required=False)


class XsiPolicyProfileAssignEntry(OCIType):
    """
    The Xsi policy profile assign entry contains multiple Xsi policy profile
    and one default xsi policy profile.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo("default", "default", str, False, False, False),
    )
    name = Field(type=str, required=False)
    default = Field(type=str, required=False)


class XsiPolicyProfileKey(OCIType):
    """
    The system Xsi policy profile key.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("level", "level", str, False, True, False),
    )
    name = Field(type=str, required=True)
    level = Field(type=str, required=True)


class XsiPolicyProfileUnassignEntry(OCIType):
    """
    The Xsi policy profile unassign entry contains mutiltipe Xsi policy profile
    and a new replacement default xsi policy profile.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo("new_default", "newDefault", str, False, False, False),
    )
    name = Field(type=str, required=False)
    new_default = Field(type=str, required=False)


class AccessDeviceEndpointAdd(OCIType):
    """
    Access device end point used in the context of add.
    Port numbers are only used by devices with static line ordering.
    The following element is only used in AS data mode and ignored in XS data mode:
      pathHeader
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("path_header", "pathHeader", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    path_header = Field(type=str, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceEndpointAndHotlineAdd(OCIType):
    """
    Access device end point used in the context of add.
    Port numbers are only used by devices with static line ordering.
    The following element is only used in AS data mode and ignored in XS data mode:
      pathHeader
      useHotline, use value false in XS data mode
      hotlineContact

    The following element is only used in XS data mode and ignored in AS data mode:
      privateIdentity
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("path_header", "pathHeader", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("use_hotline", "useHotline", bool, False, True, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    path_header = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    use_hotline = Field(type=bool, required=True)
    hotline_contact = Field(type=str, required=False)


class AccessDeviceEndpointAndHotlineModify(OCIType):
    """
    Access device end point used in the context of modify.
    Port numbers are only used by devices with static line ordering.
    The following element is only used in AS data mode and ignored in XS data mode:
      pathHeader
      useHotline
      hotlineContact
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("path_header", "pathHeader", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("use_hotline", "useHotline", bool, False, False, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    path_header = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    use_hotline = Field(type=bool, required=False)
    hotline_contact = Field(type=str, required=False)


class AccessDeviceEndpointKey(OCIType):
    """
    Access device end point in the context of a modify or delete command.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)


class AccessDeviceEndpointModify(OCIType):
    """
    Access device end point used in the context of modify.
    Port numbers are only used by devices with static line ordering.
    The following element is only used in AS data mode and ignored in XS data mode:
      pathHeader
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("path_header", "pathHeader", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    path_header = Field(type=str, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceEndpointRead14(OCIType):
    """
    Access device end point.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)


class AccessDeviceEndpointWithPortNumberRead(OCIType):
    """
    Access device end point.
    Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)


class AccessDeviceEndpointWithPortNumberRead22(OCIType):
    """
    Access device end point.
    Port numbers are only used by devices with static line ordering.
    The following element is only used in AS data mode and ignored in XS data mode:
      pathHeader
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("path_header", "pathHeader", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    path_header = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)


class AccessDeviceEndpointWithPortNumberRead22V2(OCIType):
    """
    Access device end point.
    Port numbers are only used by devices with static line ordering.
    The following element is only used in AS data mode and ignored in XS data mode:
      pathHeader
      hotlineContact

    The following elements are only used in AS data mode and a value false is
    returned in the XS mode:
      useHotline
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("path_header", "pathHeader", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("use_hotline", "useHotline", bool, False, True, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    path_header = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)
    use_hotline = Field(type=bool, required=True)
    hotline_contact = Field(type=str, required=False)


class AccessDeviceMultipleContactEndpointAdd(OCIType):
    """
    Access device end point used in the context of add that can have more than one
    contact defined.
    Only Static Registration capabable devices may have more than one contact defined.
        Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleContactEndpointAdd22(OCIType):
    """
    Access device end point used in the context of add that can have more than one
    contact defined.
    Only Static Registration capabable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=SIPContactInfo, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleContactEndpointModify(OCIType):
    """
    Access device end point used in the context of modify that can have more than one
    contact defined.
    Only Static Registration capable devices may have more than one contact defined.
        Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo(
            "contact_list", "contactList", ReplacementContactList, True, False, False,
        ),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=False)
    line_port = Field(type=str, required=False)
    contact_list = Field(type=ReplacementContactList, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleContactEndpointRead(OCIType):
    """
    Access device end point that can have multiple contacts.

        Replaced by AccessDeviceMultipleContactEndpointRead19.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)


class AccessDeviceMultipleContactEndpointRead19(OCIType):
    """
    Access device end point that can have multiple contacts.
        Port numbers are only used by devices with static line ordering.

          Replaced by AccessDeviceMultipleContactEndpointRead20.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleContactEndpointRead20(OCIType):
    """
    Access device end point that can have multiple contacts.
    Port numbers are only used by devices with static line ordering.
    Replaced by AccessDeviceMultipleContactEndpointRead22.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo(
            "support_visual_device_management",
            "supportVisualDeviceManagement",
            bool,
            False,
            True,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)
    support_visual_device_management = Field(type=bool, required=True)


class AccessDeviceMultipleContactEndpointRead22(OCIType):
    """
    Access device end point that can have multiple contacts.
    Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo(
            "support_visual_device_management",
            "supportVisualDeviceManagement",
            bool,
            False,
            True,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=SIPContactInfo, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)
    support_visual_device_management = Field(type=bool, required=True)


class AccessDeviceMultipleIdentityAndContactEndpointAdd(OCIType):
    """
      Access device end point used in the context of add that can have more than one
    contact defined.
      The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
      Only Static Registration capabable devices may have more than one contact defined.
      Port numbers are only used by devices with static line ordering.
      The following elements are only used in XS data mode and ignored in AS data mode:
        privateIdentity
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleIdentityAndContactEndpointAdd22(OCIType):
    """
    Access device end point used in the context of add that can have more than one
    contact defined.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Only Static Registration capabable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=SIPContactInfo, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleIdentityAndContactEndpointAdd22V2(OCIType):
    """
    Access device end point used in the context of add that can have more than one
    contact defined.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Only Static Registration capabable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity

    The following elements are only used in AS data mode and ignored in XS data mode:
      useHotline, use value false in XS data mode
      hotlineContact
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("use_hotline", "useHotline", bool, False, True, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=SIPContactInfo, required=False)
    port_number = Field(type=int, required=False)
    use_hotline = Field(type=bool, required=True)
    hotline_contact = Field(type=str, required=False)


class AccessDeviceMultipleIdentityAndContactEndpointModify(OCIType):
    """
    Access device end point used in the context of modify that can have more than one
    contact defined.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Only Static Registration capabable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo(
            "contact_list", "contactList", ReplacementContactList, True, False, False,
        ),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=False)
    line_port = Field(type=str, required=False)
    private_identity = Field(type=str, required=False)
    contact_list = Field(type=ReplacementContactList, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleIdentityAndContactEndpointRead(OCIType):
    """
    Access device end point that can have multiple contacts.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
      Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and not returned in AS data mode:
      privateIdentity
    The following elements are only used in AS data mode and a value false is
    returned in the XS mode:
      supportVisualDeviceManagement
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo(
            "support_visual_device_management",
            "supportVisualDeviceManagement",
            bool,
            False,
            True,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)
    support_visual_device_management = Field(type=bool, required=True)


class AccessDeviceMultipleIdentityAndContactEndpointRead22(OCIType):
    """
    Access device end point that can have multiple contacts.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
      Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and not returned in AS data mode:
      privateIdentity
    The following elements are only used in AS data mode and a value false is
    returned in the XS mode:
      supportVisualDeviceManagement
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo(
            "support_visual_device_management",
            "supportVisualDeviceManagement",
            bool,
            False,
            True,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=SIPContactInfo, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)
    support_visual_device_management = Field(type=bool, required=True)


class AccessDeviceMultipleIdentityAndContactEndpointRead22V2(OCIType):
    """
    Access device end point that can have multiple contacts.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
      Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and not returned in AS data mode:
      privateIdentity
    The following elements are only used in AS data mode and a value false is
    returned in the XS mode:
      supportVisualDeviceManagement
      useHotline
    The following elements are only used in AS data mode and not returned in XS data mode:
      hotlineContact
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo(
            "support_visual_device_management",
            "supportVisualDeviceManagement",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_hotline", "useHotline", bool, False, True, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=SIPContactInfo, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    port_number = Field(type=int, required=False)
    support_visual_device_management = Field(type=bool, required=True)
    use_hotline = Field(type=bool, required=True)
    hotline_contact = Field(type=str, required=False)


class AccessDeviceMultipleIdentityEndpointAdd(OCIType):
    """
    Access device end point used in the context of add.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleIdentityEndpointKey(OCIType):
    """
    Access device end point in the context of a modify or delete command.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)


class AccessDeviceMultipleIdentityEndpointWithType(OCIType):
    """
          Access device end point that can have multiple contacts.
          The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
          Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("device_type", "deviceType", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    device_type = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    mac_address = Field(type=str, required=False)


class AutoAttendantKeyConfigurationEntry(OCIType):
    """
    The configuration entry of a key for Auto Attendant.
    The following elements are only used in AS data mode:
      audioFile
      videoFile
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", LabeledMediaFileResource, True, False, False,
        ),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file = Field(type=LabeledMediaFileResource, required=False)
    video_file = Field(type=LabeledMediaFileResource, required=False)


class AutoAttendantKeyConfigurationEntry19(OCIType):
    """
    The configuration entry of a key for Auto
    Attendant.
    The following data elements are only valid for Standard Auto
    Attendants:
    submenuId
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo("submenu_id", "submenuId", str, False, False, False),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file = Field(type=LabeledMediaFileResource, required=False)
    video_file = Field(type=LabeledMediaFileResource, required=False)
    submenu_id = Field(type=str, required=False)


class AutoAttendantKeyConfigurationEntry20(OCIType):
    """
    The configuration entry of a key for Auto Attendant.
    The following data elements are only used in AS data mode:
      audioFile
      videoFile
      submenuId
    The following data elements are only valid for Standard Auto
    Attendants:
      submenuId
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo("submenu_id", "submenuId", str, False, False, False),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)
    submenu_id = Field(type=str, required=False)


class AutoAttendantKeyConfigurationModifyEntry(OCIType):
    """
    The modify configuration entry of a key for Auto
    Attendant.
    The following data elements are only valid for Standard Auto
    Attendants:
    submenuId
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo("submenu_id", "submenuId", str, False, False, False),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file = Field(type=LabeledMediaFileResource, required=False)
    video_file = Field(type=LabeledMediaFileResource, required=False)
    submenu_id = Field(type=str, required=False)


class AutoAttendantKeyConfigurationModifyEntry20(OCIType):
    """
    The modify configuration entry of a key for Auto Attendant.
    The following data elements are only used in AS data mode:
      audioFile
      videoFile
      submenuId
    The following data elements are only valid for Standard Auto
    Attendants:
      submenuId
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo("submenu_id", "submenuId", str, False, False, False),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)
    submenu_id = Field(type=str, required=False)


class AutoAttendantKeyConfigurationReadEntry20(OCIType):
    """
    The read configuration entry of a key for Auto Attendant.
    The following data elements are only used in AS data mode:
      submenuId
    The following data elements are only valid for Standard Auto
    Attendants:
      submenuId
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("action", "action", str, False, True, False),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo("submenu_id", "submenuId", str, False, False, False),
    )
    description = Field(type=str, required=False)
    action = Field(type=str, required=True)
    phone_number = Field(type=str, required=False)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)
    submenu_id = Field(type=str, required=False)


class AutoAttendantKeyReadConfiguration(OCIType):
    """
    The read configuration of a key for Auto Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry", "entry", AutoAttendantKeyConfigurationReadEntry, True, True, False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationReadEntry, required=True)


class AutoAttendantKeyReadConfiguration19(OCIType):
    """
    The read configuration of a key for Auto
    Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry",
            "entry",
            AutoAttendantKeyConfigurationReadEntry19,
            True,
            True,
            False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationReadEntry19, required=True)


class CPEDeviceOptionsRead(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo("config_type", "configType", str, False, True, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptionsRead,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    config_type = Field(type=str, required=True)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptionsRead, required=False,
    )


class CPEDeviceOptionsRead16(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo("config_type", "configType", str, False, True, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptionsRead16,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    config_type = Field(type=str, required=True)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptionsRead16, required=False,
    )


class CPEDeviceOptionsRead16sp1(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptionsRead16,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptionsRead16, required=False,
    )


class CPEDeviceOptionsRead21sp1(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptionsRead21sp1,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptionsRead21sp1, required=False,
    )


class CPEDeviceOptionsRead22(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptionsRead22,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptionsRead22, required=False,
    )


class CPEDeviceOptionsRead22V2(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptionsRead22V2,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptionsRead22V2, required=False,
    )


class CPEDeviceOptionsRead22V3(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptionsRead22V3,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptionsRead22V3, required=False,
    )


class CallCenterAgentStatistics13mp8(OCIType):
    """
    Contains Call Center statistics for a specified agent.
    """

    ELEMENTS = (
        ElementInfo("agent_user_id", "agentUserId", str, False, True, False),
        ElementInfo(
            "agent_display_names",
            "agentDisplayNames",
            UserDisplayNames,
            True,
            True,
            False,
        ),
        ElementInfo("available", "available", bool, False, True, False),
        ElementInfo(
            "statistics_yesterday",
            "statisticsYesterday",
            CallCenterAgentDailyStatistics13mp8,
            True,
            True,
            False,
        ),
        ElementInfo(
            "statistics_today",
            "statisticsToday",
            CallCenterAgentDailyStatistics13mp8,
            True,
            True,
            False,
        ),
    )
    agent_user_id = Field(type=str, required=True)
    agent_display_names = Field(type=UserDisplayNames, required=True)
    available = Field(type=bool, required=True)
    statistics_yesterday = Field(
        type=CallCenterAgentDailyStatistics13mp8, required=True,
    )
    statistics_today = Field(type=CallCenterAgentDailyStatistics13mp8, required=True)


class CallCenterAgentStatistics14sp9(OCIType):
    """
    Contains Call Center statistics for a specified agent.
    """

    ELEMENTS = (
        ElementInfo("agent_user_id", "agentUserId", str, False, True, False),
        ElementInfo(
            "agent_display_names",
            "agentDisplayNames",
            UserDisplayNames,
            True,
            True,
            False,
        ),
        ElementInfo("available", "available", bool, False, True, False),
        ElementInfo("statistics", "statistics", AgentStatistics, True, True, False),
    )
    agent_user_id = Field(type=str, required=True)
    agent_display_names = Field(type=UserDisplayNames, required=True)
    available = Field(type=bool, required=True)
    statistics = Field(type=AgentStatistics, required=True)


class CallCenterAnnouncementFileListModify(OCIType):
    """
    Contains a list of audio or video files to modify.
    """

    ELEMENTS = (
        ElementInfo("file1", "file1", LabeledMediaFileResource, True, False, False),
        ElementInfo("file2", "file2", LabeledMediaFileResource, True, False, False),
        ElementInfo("file3", "file3", LabeledMediaFileResource, True, False, False),
        ElementInfo("file4", "file4", LabeledMediaFileResource, True, False, False),
    )
    file1 = Field(type=LabeledMediaFileResource, required=False)
    file2 = Field(type=LabeledMediaFileResource, required=False)
    file3 = Field(type=LabeledMediaFileResource, required=False)
    file4 = Field(type=LabeledMediaFileResource, required=False)


class CallCenterAnnouncementFileListModify20(OCIType):
    """
    Contains a list of announcement repository files
    """

    ELEMENTS = (
        ElementInfo("file1", "file1", AnnouncementFileLevelKey, True, False, False),
        ElementInfo("file2", "file2", AnnouncementFileLevelKey, True, False, False),
        ElementInfo("file3", "file3", AnnouncementFileLevelKey, True, False, False),
        ElementInfo("file4", "file4", AnnouncementFileLevelKey, True, False, False),
    )
    file1 = Field(type=AnnouncementFileLevelKey, required=False)
    file2 = Field(type=AnnouncementFileLevelKey, required=False)
    file3 = Field(type=AnnouncementFileLevelKey, required=False)
    file4 = Field(type=AnnouncementFileLevelKey, required=False)


class CallCenterAnnouncementFileListRead20(OCIType):
    """
    Contains a list of announcement repository files
    """

    ELEMENTS = (
        ElementInfo("file1", "file1", AnnouncementFileLevelKey, True, False, False),
        ElementInfo("file2", "file2", AnnouncementFileLevelKey, True, False, False),
        ElementInfo("file3", "file3", AnnouncementFileLevelKey, True, False, False),
        ElementInfo("file4", "file4", AnnouncementFileLevelKey, True, False, False),
    )
    file1 = Field(type=AnnouncementFileLevelKey, required=False)
    file2 = Field(type=AnnouncementFileLevelKey, required=False)
    file3 = Field(type=AnnouncementFileLevelKey, required=False)
    file4 = Field(type=AnnouncementFileLevelKey, required=False)


class CallCenterReplacementSkilledAgents(OCIType):
    """
    A list of agents grouped by skill levels.
    """

    ELEMENTS = (
        ElementInfo("skill_level", "skillLevel", int, False, True, False),
        ElementInfo("agents", "agents", ReplacementUserIdList, True, True, False),
    )
    skill_level = Field(type=int, required=True)
    agents = Field(type=ReplacementUserIdList, required=True)


class CallCenterReportIntervalDates(OCIType):
    """
    The call center enhanced reporting report interval, using dates.
    """

    ELEMENTS = (
        ElementInfo("start_date", "startDate", str, False, True, False),
        ElementInfo("start_time", "startTime", HourMinute, True, True, False),
        ElementInfo("end_date", "endDate", str, False, True, False),
        ElementInfo("end_time", "endTime", HourMinute, True, True, False),
    )
    start_date = Field(type=str, required=True)
    start_time = Field(type=HourMinute, required=True)
    end_date = Field(type=str, required=True)
    end_time = Field(type=HourMinute, required=True)


class CallCenterReportScheduleRecurrence(OCIType):
    """
    A recurring schedule for call center enhanced reporting scheduled report.
    """

    ELEMENTS = (
        ElementInfo("time_zone", "timeZone", str, False, True, False),
        ElementInfo("start_date", "startDate", str, False, True, False),
        ElementInfo("schedule_time", "scheduleTime", HourMinute, True, True, False),
        ElementInfo("recurrence", "recurrence", Recurrence, True, True, False),
    )
    time_zone = Field(type=str, required=True)
    start_date = Field(type=str, required=True)
    schedule_time = Field(type=HourMinute, required=True)
    recurrence = Field(type=Recurrence, required=True)


class CallCenterReportScheduleTime(OCIType):
    """
    A scheduled time for call center enhanced reporting scheduled report.
    """

    ELEMENTS = (
        ElementInfo("time_zone", "timeZone", str, False, True, False),
        ElementInfo("schedule_date", "scheduleDate", str, False, True, False),
        ElementInfo("schedule_time", "scheduleTime", HourMinute, True, True, False),
    )
    time_zone = Field(type=str, required=True)
    schedule_date = Field(type=str, required=True)
    schedule_time = Field(type=HourMinute, required=True)


class CallMeNowToDnCriteriaModify(OCIType):
    """
    The To dn criteria used on the call me now external number to be modified.
    """

    ELEMENTS = (
        ElementInfo(
            "to_dn_criteria_selection",
            "toDnCriteriaSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "phone_number_list",
            "phoneNumberList",
            CriteriaReplacementDNList,
            True,
            False,
            False,
        ),
    )
    to_dn_criteria_selection = Field(type=str, required=False)
    phone_number_list = Field(type=CriteriaReplacementDNList, required=False)


class CombinedAccessDeviceMultipleIdentityEndpointAdd(OCIType):
    """
          Access device end point used in the context of add.
          The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
          Only Static Registration capable devices may have more than one contact defined.
          Port numbers are only used by devices with static line ordering.

          In the case an access device referenced by accessDevice does not exist, the
    device will be added.

          The device attributes deviceType, protocol, netAddress, port,
    outboundProxyServerNetAddress,
          stunServerNetAddress, macAddress, serialNumber, description,
    physicalLocation, transportProtocol,
          useCustomUserNamePassword and accessDeviceCredentials will be ignored if
    the access device already
          exists.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )


class CombinedAccessDeviceMultipleIdentityEndpointModify(OCIType):
    """
          Access device end point used in the context of modify.
          The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
          Only Static Registration capable devices may have more than one contact defined.
          Port numbers are only used by devices with static line ordering.

          In the case an access device referenced by accessDevice does not exist, the
    device will be added.
          When the device needs to be added, if the linePort is not specified, the
    request will fail

          The device attributes deviceType, protocol, netAddress, port,
    outboundProxyServerNetAddress,
          stunServerNetAddress, macAddress, serialNumber, description,
    physicalLocation, transportProtocol,
          useCustomUserNamePassword and accessDeviceCredentials will be ignored if
    the access device already
          exists.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=False)
    line_port = Field(type=str, required=False)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )


class CombinedGroupServiceAuthorization(OCIType):
    """
          Authorize a group service.
    """

    ELEMENTS = (
        ElementInfo("service_name", "serviceName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    service_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class CombinedServiceInstanceAddProfile(OCIType):
    """
          Service Profile Information for group service.

          When name, callingLineIdLastName and callingLineIdFirstName are not
    included, the values
          in the corresponding service instance template (if this is used to add a
    Hunt Group, for
          example, the name will come from the Hunt Group template) will be used.
    Otherwise, the
          request will fail.

          If the phoneNumber has not been assigned to the group, it will be added to group and
          service provider if needed.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=False)
    calling_line_id_last_name = Field(type=str, required=False)
    calling_line_id_first_name = Field(type=str, required=False)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    public_user_identity = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class CombinedServicePackAssignment(OCIType):
    """
          Assign a service pack to user. If the service pack has not been authorized
    to service provider or
          group, it will be authorized.

          If the service pack needs to be authorized at group/service provider
    levels, the authorizedQuantity
          will be used. Otherwise, it will be ignored. If the authorizedQuantity is
    not included, the
          quantity will come from the group template for the service pack. If a template does
          not exist, the service quantity will be set to unlimited.
    """

    ELEMENTS = (
        ElementInfo("service_pack_name", "servicePackName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    service_pack_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class CombinedServicePackAuthorization(OCIType):
    """
          Authorize a service pack.
    """

    ELEMENTS = (
        ElementInfo("service_pack_name", "servicePackName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    service_pack_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class CombinedSharedCallAppearanceAccessDeviceMultipleIdentityEndpoint(OCIType):
    """
          Access device end point for Shared Call Appearance Service used in the
    context of add.
          The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
          Port numbers are only used by devices with static line ordering.

          In the case an access device referenced by accessDevice does not exist, the
    device will be added.

          When elements for isActive, allowOrigination, allowTermination and
    allowVideo are not included in the request,
          the values for them will come for the Shared Call Appearance endpoints
    template. If the template
          does not exist, the request using this data type will fail.

          The device attributes deviceType, protocol, netAddress, port,
    outboundProxyServerNetAddress,
          stunServerNetAddress, macAddress, serialNumber, description,
    physicalLocation, transportProtocol,
          useCustomUserNamePassword and accessDeviceCredentials will be ignored if
    the access device already
          exists.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("is_active", "isActive", bool, False, False, False),
        ElementInfo("allow_origination", "allowOrigination", bool, False, False, False),
        ElementInfo("allow_termination", "allowTermination", bool, False, False, False),
        ElementInfo("allow_video", "allowVideo", bool, False, False, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    is_active = Field(type=bool, required=False)
    allow_origination = Field(type=bool, required=False)
    allow_termination = Field(type=bool, required=False)
    allow_video = Field(type=bool, required=False)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )


class CombinedUserServiceAssignment(OCIType):
    """
          Assign a service user. If the service has not been authorized to service
    provider or group, it will
          be authorized.

          If the service needs to be authorized at group/service provider levels, the
    authorizedQuantity
          will be used. Otherwise, it will be ignored. If the authorizedQuantity is
    not included, the
          quantity will come from the group template for the service. If a template does
          not exist, the service quantity will be set to unlimited.
    """

    ELEMENTS = (
        ElementInfo("user_service", "userService", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    user_service = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class CombinedUserServiceAuthorization(OCIType):
    """
          Authorize a user service.
    """

    ELEMENTS = (
        ElementInfo("service_name", "serviceName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    service_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class CommPilotExpressAvailableInOffice(OCIType):
    """
    CommPilot Express Available In Office Settings.
    """

    ELEMENTS = (
        ElementInfo(
            "additional_phone_number_to_ring",
            "additionalPhoneNumberToRing",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "busy_setting",
            "busySetting",
            CommPilotExpressRedirection,
            True,
            True,
            False,
        ),
        ElementInfo(
            "no_answer_setting",
            "noAnswerSetting",
            CommPilotExpressRedirection,
            True,
            True,
            False,
        ),
    )
    additional_phone_number_to_ring = Field(type=str, required=False)
    busy_setting = Field(type=CommPilotExpressRedirection, required=True)
    no_answer_setting = Field(type=CommPilotExpressRedirection, required=True)


class CommPilotExpressAvailableInOfficeModify(OCIType):
    """
    CommPilot Express Available In Office Settings.
    """

    ELEMENTS = (
        ElementInfo(
            "additional_phone_number_to_ring",
            "additionalPhoneNumberToRing",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "busy_setting",
            "busySetting",
            CommPilotExpressRedirectionModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "no_answer_setting",
            "noAnswerSetting",
            CommPilotExpressRedirectionModify,
            True,
            False,
            False,
        ),
    )
    additional_phone_number_to_ring = Field(type=str, required=False)
    busy_setting = Field(type=CommPilotExpressRedirectionModify, required=False)
    no_answer_setting = Field(type=CommPilotExpressRedirectionModify, required=False)


class CommPilotExpressAvailableOutOfOffice(OCIType):
    """
    CommPilot Express Available Out Of Office Configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressRedirection,
            True,
            True,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressEmailNotify,
            True,
            True,
            False,
        ),
    )
    incoming_calls = Field(type=CommPilotExpressRedirection, required=True)
    incoming_call_notify = Field(type=CommPilotExpressEmailNotify, required=True)


class CommPilotExpressAvailableOutOfOfficeModify(OCIType):
    """
    CommPilot Express Available Out Of Office Configuration used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressRedirectionModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressEmailNotifyModify,
            True,
            False,
            False,
        ),
    )
    incoming_calls = Field(type=CommPilotExpressRedirectionModify, required=False)
    incoming_call_notify = Field(type=CommPilotExpressEmailNotifyModify, required=False)


class CommPilotExpressBusy(OCIType):
    """
    CommPilot Express Available In Office Configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressRedirectionWithException,
            True,
            True,
            False,
        ),
        ElementInfo(
            "voice_mail_notify",
            "voiceMailNotify",
            CommPilotExpressEmailNotify,
            True,
            True,
            False,
        ),
    )
    incoming_calls = Field(type=CommPilotExpressRedirectionWithException, required=True)
    voice_mail_notify = Field(type=CommPilotExpressEmailNotify, required=True)


class CommPilotExpressBusyModify(OCIType):
    """
    CommPilot Express Available In Office Configuration used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressRedirectionWithExceptionModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "voice_mail_notify",
            "voiceMailNotify",
            CommPilotExpressEmailNotifyModify,
            True,
            False,
            False,
        ),
    )
    incoming_calls = Field(
        type=CommPilotExpressRedirectionWithExceptionModify, required=False,
    )
    voice_mail_notify = Field(type=CommPilotExpressEmailNotifyModify, required=False)


class CommPilotExpressSRBusy(OCIType):
    """
    CommPilot Express SR Available In Office Configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressSRRedirectionWithException,
            True,
            True,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotify,
            True,
            True,
            False,
        ),
    )
    incoming_calls = Field(
        type=CommPilotExpressSRRedirectionWithException, required=True,
    )
    incoming_call_notify = Field(type=CommPilotExpressSREmailNotify, required=True)


class CommPilotExpressSRBusyModify(OCIType):
    """
    CommPilot Express SR Available In Office Configuration used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressSRRedirectionWithExceptionModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotifyModify,
            True,
            False,
            False,
        ),
    )
    incoming_calls = Field(
        type=CommPilotExpressSRRedirectionWithExceptionModify, required=False,
    )
    incoming_call_notify = Field(
        type=CommPilotExpressSREmailNotifyModify, required=False,
    )


class CommPilotExpressSRRedirectionWithRingList(OCIType):
    """
    CommPilot Express SR Forward Numbers with number of times to ring.
    """

    ELEMENTS = (
        ElementInfo(
            "number_entry",
            "numberEntry",
            CommPilotExpressSRRedirectionWithRing,
            True,
            False,
            False,
        ),
    )
    number_entry = Field(type=CommPilotExpressSRRedirectionWithRing, required=False)


class CommPilotExpressSRUnavailable(OCIType):
    """
    CommPilot Express SR Unavailable Configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressSRRedirectionWithException,
            True,
            True,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotify,
            True,
            True,
            False,
        ),
    )
    incoming_calls = Field(
        type=CommPilotExpressSRRedirectionWithException, required=True,
    )
    incoming_call_notify = Field(type=CommPilotExpressSREmailNotify, required=True)


class CommPilotExpressSRUnavailableModify(OCIType):
    """
    CommPilot Express SR Unavailable Configuration used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressSRRedirectionWithExceptionModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotifyModify,
            True,
            False,
            False,
        ),
    )
    incoming_calls = Field(
        type=CommPilotExpressSRRedirectionWithExceptionModify, required=False,
    )
    incoming_call_notify = Field(
        type=CommPilotExpressSREmailNotifyModify, required=False,
    )


class CommPilotExpressUnavailable(OCIType):
    """
    CommPilot Express Unavailable Configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressRedirectionWithException,
            True,
            True,
            False,
        ),
        ElementInfo(
            "voice_mail_greeting", "voiceMailGreeting", str, False, True, False,
        ),
    )
    incoming_calls = Field(type=CommPilotExpressRedirectionWithException, required=True)
    voice_mail_greeting = Field(type=str, required=True)


class CommPilotExpressUnavailableModify(OCIType):
    """
    CommPilot Express Unavailable Configuration used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "incoming_calls",
            "incomingCalls",
            CommPilotExpressRedirectionWithExceptionModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "voice_mail_greeting", "voiceMailGreeting", str, False, False, False,
        ),
    )
    incoming_calls = Field(
        type=CommPilotExpressRedirectionWithExceptionModify, required=False,
    )
    voice_mail_greeting = Field(type=str, required=False)


class ConsolidatedAccessDeviceMultipleIdentityEndpointAndContactAdd(OCIType):
    """
    Access device end point used in the context of add.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    In XS data mode, only one contact can be defined.
    Only Static Registration capable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.

    In the case an access device referenced by accessDevice does not exist, the
    device will be added.

    The device attributes deviceType, protocol, netAddress, port,
    outboundProxyServerNetAddress,
    stunServerNetAddress, macAddress, serialNumber, description, physicalLocation,
    transportProtocol,
    useCustomUserNamePassword and accessDeviceCredentials will be ignored if the
    access device already
    exists.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )


class ConsolidatedAccessDeviceMultipleIdentityEndpointAndContactAdd22(OCIType):
    """
    Access device end point used in the context of add.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    In XS data mode, only one contact can be defined.
    Only Static Registration capable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.

    In the case an access device referenced by accessDevice does not exist, the
    device will be added.

    The device attributes deviceType, protocol, netAddress, port,
    outboundProxyServerNetAddress,
    stunServerNetAddress, macAddress, serialNumber, description, physicalLocation,
    transportProtocol,
    useCustomUserNamePassword and accessDeviceCredentials will be ignored if the
    access device already
    exists.

    The following elements are only used in AS data mode and ignored in XS data mode:
      useHotline, use value false in XS data mode
      hotlineContact
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo("use_hotline", "useHotline", bool, False, True, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_hotline = Field(type=bool, required=True)
    hotline_contact = Field(type=str, required=False)


class ConsolidatedAccessDeviceMultipleIdentityEndpointAndContactModify(OCIType):
    """
    Access device end point used in the context of modify. .
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Only Static Registration capable devices may have more than one contact defined.
    Only the first contact in contactList is used in XS data mode.
    Port numbers are only used by devices with static line ordering.

    In the case an access device referenced by accessDevice does not exist, the
    device will be added.
    When the device needs to be added, if the linePort is not specified, the request will fail

    If the deviceType is included in the request a new device will be created using
    the type unless a
    device with the same name already exists.

    The device attributes protocol, netAddress, port, outboundProxyServerNetAddress,
    stunServerNetAddress, macAddress, serialNumber, description, physicalLocation,
    transportProtocol,
    useCustomUserNamePassword and accessDeviceCredentials will be ignored if the
    access device already
    exists.

    The following elements are only used in AS data mode and ignored in XS data mode:
      useHotline
      hotlineContact
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo(
            "contact_list", "contactList", ReplacementContactList, True, False, False,
        ),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo("use_hotline", "useHotline", bool, False, False, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=False)
    line_port = Field(type=str, required=False)
    private_identity = Field(type=str, required=False)
    contact_list = Field(type=ReplacementContactList, required=False)
    port_number = Field(type=int, required=False)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_hotline = Field(type=bool, required=False)
    hotline_contact = Field(type=str, required=False)


class ConsolidatedGroupServiceAssignment(OCIType):
    """
    Authorize and assign a group service.

    The authorizedQuantity will be used at the group level if provided; otherwise,
    the service quantity will be set to unlimited.
    The command will fail if the authorized quantity set at the service provider
    level is insufficient.
    """

    ELEMENTS = (
        ElementInfo("group_service_name", "groupServiceName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    group_service_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class ConsolidatedServicePackAssignment(OCIType):
    """
    Assign a service pack to user. If the service pack has not been authorized to
    the group, it will be authorized.
    The authorizedQuantity will be used at the group level if provided; otherwise,
    the service quantity will be set to unlimited.
    The command will fail if the authorized quantity set at the service provider
    level is insufficient.
    """

    ELEMENTS = (
        ElementInfo("service_pack_name", "servicePackName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    service_pack_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class ConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpoint(OCIType):
    """
    Access device end point for Shared Call Appearance Service used in the context of add.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Port numbers are only used by devices with static line ordering.

    In the case an access device referenced by accessDevice does not exist, the
    device will be added.

    The device attributes deviceType, protocol, netAddress, port,
    outboundProxyServerNetAddress,
    stunServerNetAddress, macAddress, serialNumber, description, physicalLocation,
    transportProtocol,
    useCustomUserNamePassword and accessDeviceCredentials will be ignored if the
    access device already
    exists.

    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo("allow_origination", "allowOrigination", bool, False, True, False),
        ElementInfo("allow_termination", "allowTermination", bool, False, True, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo("use_hotline", "useHotline", bool, False, False, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    is_active = Field(type=bool, required=True)
    allow_origination = Field(type=bool, required=True)
    allow_termination = Field(type=bool, required=True)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_hotline = Field(type=bool, required=False)
    hotline_contact = Field(type=str, required=False)


class ConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpointAdd22(
    OCIType,
):
    """
    Access device end point for Shared Call Appearance Service used in the context of add.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Port numbers are only used by devices with static line ordering.

    In the case an access device referenced by accessDevice does not exist, the
    device will be added.

    The device attributes deviceType, protocol, netAddress, port,
    outboundProxyServerNetAddress,
    stunServerNetAddress, macAddress, serialNumber, description, physicalLocation,
    transportProtocol,
    useCustomUserNamePassword and accessDeviceCredentials will be ignored if the
    access device already
    exists.

    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity

    The following elements are only used in AS data mode and ignored in XS data mode:
      useHotline, use value false in XS data mode
      hotlineContact
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo("allow_origination", "allowOrigination", bool, False, True, False),
        ElementInfo("allow_termination", "allowTermination", bool, False, True, False),
        ElementInfo("device_type", "deviceType", str, False, False, False),
        ElementInfo("protocol", "protocol", str, False, False, False),
        ElementInfo("net_address", "netAddress", str, False, False, False),
        ElementInfo("port", "port", int, False, False, False),
        ElementInfo(
            "outbound_proxy_server_net_address",
            "outboundProxyServerNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "stun_server_net_address", "stunServerNetAddress", str, False, False, False,
        ),
        ElementInfo("mac_address", "macAddress", str, False, False, False),
        ElementInfo("serial_number", "serialNumber", str, False, False, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
        ElementInfo(
            "transport_protocol", "transportProtocol", str, False, False, False,
        ),
        ElementInfo(
            "use_custom_user_name_password",
            "useCustomUserNamePassword",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo("use_hotline", "useHotline", bool, False, True, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    contact = Field(type=str, required=False)
    port_number = Field(type=int, required=False)
    is_active = Field(type=bool, required=True)
    allow_origination = Field(type=bool, required=True)
    allow_termination = Field(type=bool, required=True)
    device_type = Field(type=str, required=False)
    protocol = Field(type=str, required=False)
    net_address = Field(type=str, required=False)
    port = Field(type=int, required=False)
    outbound_proxy_server_net_address = Field(type=str, required=False)
    stun_server_net_address = Field(type=str, required=False)
    mac_address = Field(type=str, required=False)
    serial_number = Field(type=str, required=False)
    description = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
    transport_protocol = Field(type=str, required=False)
    use_custom_user_name_password = Field(type=bool, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_hotline = Field(type=bool, required=True)
    hotline_contact = Field(type=str, required=False)


class ConsolidatedUserServiceAssignment(OCIType):
    """
    Assign a user service. If the service has not been authorized to the group, it
    will be authorized.
    The authorizedQuantity will be used at the group level if provided; otherwise,
    the service quantity will be set to unlimited.
    The command will fail if the authorized quantity set at the service provider
    level is insufficient.
    """

    ELEMENTS = (
        ElementInfo("user_service_name", "userServiceName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
    )
    user_service_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)


class CriteriaFromDnModify(OCIType):
    """
    The from dn criteria used within a modify request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "phone_number_list",
            "phoneNumberList",
            CriteriaReplacementDNList,
            True,
            False,
            False,
        ),
    )
    from_dn_criteria_selection = Field(type=str, required=False)
    include_anonymous_callers = Field(type=bool, required=False)
    include_unavailable_callers = Field(type=bool, required=False)
    phone_number_list = Field(type=CriteriaReplacementDNList, required=False)


class DeviceManagementDeviceTypeModifyOptions(OCIType):
    """
    Device Management System device type options during a modify request.
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, False, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, False, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, False, False,
        ),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=False)
    tag_mode = Field(type=str, required=False)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=False)
    allow_group_custom_tag_set = Field(type=bool, required=False)
    send_email_upon_reset_failure = Field(type=bool, required=False)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=False)
    mac_based_file_authentication = Field(type=bool, required=False)
    user_name_password_file_authentication = Field(type=bool, required=False)
    mac_in_non_request_uri = Field(type=bool, required=False)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeModifyOptions16(OCIType):
    """
    Device Management System device type options during a modify request.
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, False, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, False, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, False, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, False, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, False, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=False)
    tag_mode = Field(type=str, required=False)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=False)
    allow_group_custom_tag_set = Field(type=bool, required=False)
    allow_sp_custom_tag_set = Field(type=bool, required=False)
    send_email_upon_reset_failure = Field(type=bool, required=False)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=False)
    mac_based_file_authentication = Field(type=bool, required=False)
    user_name_password_file_authentication = Field(type=bool, required=False)
    mac_in_non_request_uri = Field(type=bool, required=False)
    mac_in_cert = Field(type=bool, required=False)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeModifyOptions22(OCIType):
    """
    Device Management System device type options during a modify request.

    The following data elements are only used in AS data mode and ignored in XS data mode:
      enableDeviceActivation
      deviceModel
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, False, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, False, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, False, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, False, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, False, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "enable_device_activation",
            "enableDeviceActivation",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo("device_model", "deviceModel", str, False, False, False),
    )
    device_access_protocol = Field(type=str, required=False)
    tag_mode = Field(type=str, required=False)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=False)
    allow_group_custom_tag_set = Field(type=bool, required=False)
    allow_sp_custom_tag_set = Field(type=bool, required=False)
    send_email_upon_reset_failure = Field(type=bool, required=False)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=False)
    mac_based_file_authentication = Field(type=bool, required=False)
    user_name_password_file_authentication = Field(type=bool, required=False)
    mac_in_non_request_uri = Field(type=bool, required=False)
    mac_in_cert = Field(type=bool, required=False)
    mac_format_in_non_request_uri = Field(type=str, required=False)
    enable_device_activation = Field(type=bool, required=False)
    device_model = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptions(OCIType):
    """
    Device Management System device type options.
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptions16(OCIType):
    """
    Device Management System device type options.
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptions21sp1(OCIType):
    """
    Device Management System device type options.

    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptions22(OCIType):
    """
    Device Management System device type options.

    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, True, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    allow_sp_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptions22V2(OCIType):
    """
    Device Management System device type options.

    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, True, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    allow_sp_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)


class DeviceManagementDeviceTypeOptions22V3(OCIType):
    """
    Device Management System device type options.

    Note: For the elements listed below, when device configuration is set to
    deviceManagement, those elements apply to the creation of the Polycom Phone
    Services directory file only.
          For all other files, they are not used. Those elements are instead
    configured on a per-file basis at the Device Type File level.
          When device configuration is set to legacy, those elements apply to all
    configuration files.

          useHttpDigestAuthentication
          macBasedFileAuthentication
          userNamePasswordFileAuthentication
          macInNonRequestURI
          macInCert
          macFormatInNonRequestURI

    The following data elements are only used in AS data mode and ignored in XS data mode:
          enableDeviceActivation
          deviceModel
    """

    ELEMENTS = (
        ElementInfo(
            "device_access_protocol", "deviceAccessProtocol", str, False, True, False,
        ),
        ElementInfo("tag_mode", "tagMode", str, False, True, False),
        ElementInfo("tag_set", "tagSet", str, False, False, False),
        ElementInfo(
            "allow_device_profile_custom_tag_set",
            "allowDeviceProfileCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_group_custom_tag_set",
            "allowGroupCustomTagSet",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_sp_custom_tag_set", "allowSpCustomTagSet", bool, False, True, False,
        ),
        ElementInfo(
            "send_email_upon_reset_failure",
            "sendEmailUponResetFailure",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_access_net_address",
            "deviceAccessNetAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("device_access_port", "deviceAccessPort", int, False, False, False),
        ElementInfo(
            "device_access_context", "deviceAccessContext", str, False, False, False,
        ),
        ElementInfo("device_access_uri", "deviceAccessURI", str, False, False, False),
        ElementInfo(
            "default_device_language", "defaultDeviceLanguage", str, False, False, False,
        ),
        ElementInfo(
            "default_device_encoding", "defaultDeviceEncoding", str, False, False, False,
        ),
        ElementInfo(
            "access_device_credentials",
            "accessDeviceCredentials",
            DeviceManagementUserNamePassword16,
            True,
            False,
            False,
        ),
        ElementInfo(
            "use_http_digest_authentication",
            "useHttpDigestAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_based_file_authentication",
            "macBasedFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "user_name_password_file_authentication",
            "userNamePasswordFileAuthentication",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mac_in_non_request_uri", "macInNonRequestURI", bool, False, True, False,
        ),
        ElementInfo("mac_in_cert", "macInCert", bool, False, True, False),
        ElementInfo(
            "mac_format_in_non_request_uri",
            "macFormatInNonRequestURI",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "enable_device_activation",
            "enableDeviceActivation",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("device_model", "deviceModel", str, False, False, False),
    )
    device_access_protocol = Field(type=str, required=True)
    tag_mode = Field(type=str, required=True)
    tag_set = Field(type=str, required=False)
    allow_device_profile_custom_tag_set = Field(type=bool, required=True)
    allow_group_custom_tag_set = Field(type=bool, required=True)
    allow_sp_custom_tag_set = Field(type=bool, required=True)
    send_email_upon_reset_failure = Field(type=bool, required=True)
    device_access_net_address = Field(type=str, required=False)
    device_access_port = Field(type=int, required=False)
    device_access_context = Field(type=str, required=False)
    device_access_uri = Field(type=str, required=False)
    default_device_language = Field(type=str, required=False)
    default_device_encoding = Field(type=str, required=False)
    access_device_credentials = Field(
        type=DeviceManagementUserNamePassword16, required=False,
    )
    use_http_digest_authentication = Field(type=bool, required=True)
    mac_based_file_authentication = Field(type=bool, required=True)
    user_name_password_file_authentication = Field(type=bool, required=True)
    mac_in_non_request_uri = Field(type=bool, required=True)
    mac_in_cert = Field(type=bool, required=True)
    mac_format_in_non_request_uri = Field(type=str, required=False)
    enable_device_activation = Field(type=bool, required=True)
    device_model = Field(type=str, required=False)


class EnhancedCallLogsNumberFilter(OCIType):
    """
    Filter criteria based on the called number or number called.
    """

    ELEMENTS = (
        ElementInfo(
            "include_basic_call_type", "includeBasicCallType", str, False, True, False,
        ),
        ElementInfo(
            "include_call_category", "includeCallCategory", str, False, True, False,
        ),
        ElementInfo(
            "include_configurable_call_type",
            "includeConfigurableCallType",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_dialed_number",
            "searchCriteriaDialedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_called_number",
            "searchCriteriaCalledNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_network_translated_number",
            "searchCriteriaNetworkTranslatedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_calling_presentation_number",
            "searchCriteriaCallingPresentationNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
    )
    include_basic_call_type = Field(type=str, required=True)
    include_call_category = Field(type=str, required=True)
    include_configurable_call_type = Field(type=str, required=True)
    search_criteria_dialed_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_called_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_network_translated_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_calling_presentation_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )


class EnhancedCallLogsRedirectedNumberFilter(OCIType):
    """
    Filter criteria based on the transferred/forwarded number.
    """

    ELEMENTS = (
        ElementInfo(
            "redirected_call",
            "redirectedCall",
            EnhancedCallLogsRedirectedCallSelection,
            True,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_basic_call_type",
            "includeServiceInvocationBasicCallType",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_call_category",
            "includeServiceInvocationCallCategory",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_configurable_call_type",
            "includeServiceInvocationConfigurableCallType",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_dialed_number",
            "searchCriteriaServiceInvocationDialedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_called_number",
            "searchCriteriaServiceInvocationCalledNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_network_translated_number",
            "searchCriteriaServiceInvocationNetworkTranslatedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
    )
    redirected_call = Field(type=EnhancedCallLogsRedirectedCallSelection, required=True)
    include_service_invocation_basic_call_type = Field(type=str, required=True)
    include_service_invocation_call_category = Field(type=str, required=True)
    include_service_invocation_configurable_call_type = Field(type=str, required=True)
    search_criteria_service_invocation_dialed_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_service_invocation_called_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_service_invocation_network_translated_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )


class EnhancedCallLogsRedirectedNumberFilter21(OCIType):
    """
    Filter criteria based on the transferred/forwarded number.
    """

    ELEMENTS = (
        ElementInfo(
            "redirected_call",
            "redirectedCall",
            EnhancedCallLogsRedirectedCallSelection21,
            True,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_basic_call_type",
            "includeServiceInvocationBasicCallType",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_call_category",
            "includeServiceInvocationCallCategory",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_configurable_call_type",
            "includeServiceInvocationConfigurableCallType",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_dialed_number",
            "searchCriteriaServiceInvocationDialedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_called_number",
            "searchCriteriaServiceInvocationCalledNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_network_translated_number",
            "searchCriteriaServiceInvocationNetworkTranslatedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
    )
    redirected_call = Field(
        type=EnhancedCallLogsRedirectedCallSelection21, required=True,
    )
    include_service_invocation_basic_call_type = Field(type=str, required=True)
    include_service_invocation_call_category = Field(type=str, required=True)
    include_service_invocation_configurable_call_type = Field(type=str, required=True)
    search_criteria_service_invocation_dialed_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_service_invocation_called_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_service_invocation_network_translated_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )


class EnhancedCallLogsRedirectedNumberFilter21sp1(OCIType):
    """
    Filter criteria based on the transferred/forwarded number.
    """

    ELEMENTS = (
        ElementInfo(
            "redirected_call",
            "redirectedCall",
            EnhancedCallLogsRedirectedCallSelection21sp1,
            True,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_basic_call_type",
            "includeServiceInvocationBasicCallType",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_call_category",
            "includeServiceInvocationCallCategory",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_service_invocation_configurable_call_type",
            "includeServiceInvocationConfigurableCallType",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_dialed_number",
            "searchCriteriaServiceInvocationDialedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_called_number",
            "searchCriteriaServiceInvocationCalledNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
        ElementInfo(
            "search_criteria_service_invocation_network_translated_number",
            "searchCriteriaServiceInvocationNetworkTranslatedNumber",
            SearchCriteriaOutgoingDNorSIPURI,
            True,
            True,
            False,
        ),
    )
    redirected_call = Field(
        type=EnhancedCallLogsRedirectedCallSelection21sp1, required=True,
    )
    include_service_invocation_basic_call_type = Field(type=str, required=True)
    include_service_invocation_call_category = Field(type=str, required=True)
    include_service_invocation_configurable_call_type = Field(type=str, required=True)
    search_criteria_service_invocation_dialed_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_service_invocation_called_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )
    search_criteria_service_invocation_network_translated_number = Field(
        type=SearchCriteriaOutgoingDNorSIPURI, required=True,
    )


class EnterpriseAccessDevice(OCIType):
    """
    Uniquely identifies an access device accessible for an enterprise. It could be a
    system level device, an enterprise level device or a group level device.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("group_id", "groupId", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=True)
    group_id = Field(type=str, required=False)


class EnterpriseEnterpriseTrunkPriorityWeightedTrunkGroup(OCIType):
    """
    Trunk group details (order and weight) for each trunk group
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group", "trunkGroup", EnterpriseTrunkTrunkGroupKey, True, True, False,
        ),
        ElementInfo("priority", "priority", int, False, True, False),
        ElementInfo("weight", "weight", int, False, True, False),
    )
    trunk_group = Field(type=EnterpriseTrunkTrunkGroupKey, required=True)
    priority = Field(type=int, required=True)
    weight = Field(type=int, required=True)


class EnterpriseTrunkNumberPrefix22(OCIType):
    """
    Enterprise Trunk Number Prefix
    """

    ELEMENTS = (
        ElementInfo("number_prefix", "numberPrefix", str, False, True, False),
        ElementInfo(
            "extension_range", "extensionRange", ExtensionRange17, True, False, False,
        ),
    )
    number_prefix = Field(type=str, required=True)
    extension_range = Field(type=ExtensionRange17, required=False)


class EnterpriseTrunkNumberPrefixModify(OCIType):
    """
    Enterprise Trunk Number Prefix for modify.
    """

    ELEMENTS = (
        ElementInfo("number_prefix", "numberPrefix", str, False, True, False),
        ElementInfo(
            "extension_range", "extensionRange", ExtensionRange17, True, False, False,
        ),
    )
    number_prefix = Field(type=str, required=True)
    extension_range = Field(type=ExtensionRange17, required=False)


class EnterpriseTrunkNumberRange(OCIType):
    """
    Directory number range. The minimum and maximum values are inclusive.
    """

    ELEMENTS = (
        ElementInfo("dn_range", "dnRange", DNRange, True, True, False),
        ElementInfo("extension_length", "extensionLength", int, False, False, False),
    )
    dn_range = Field(type=DNRange, required=True)
    extension_length = Field(type=int, required=False)


class EnterpriseTrunkPriorityWeightedTrunkGroup(OCIType):
    """
    Trunk group details (order and weight) for each trunk group
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group", "trunkGroup", EnterpriseTrunkTrunkGroupKey, True, True, False,
        ),
        ElementInfo("priority", "priority", int, False, True, False),
        ElementInfo("weight", "weight", int, False, True, False),
    )
    trunk_group = Field(type=EnterpriseTrunkTrunkGroupKey, required=True)
    priority = Field(type=int, required=True)
    weight = Field(type=int, required=True)


class ExecutiveCallFilteringCriteriaFromDnModify(OCIType):
    """
    The from dn criteria used within an executive call filtering criteria modify request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "phone_number_list",
            "phoneNumberList",
            CriteriaReplacementDNList,
            True,
            False,
            False,
        ),
    )
    from_dn_criteria_selection = Field(type=str, required=False)
    include_anonymous_callers = Field(type=bool, required=False)
    include_unavailable_callers = Field(type=bool, required=False)
    phone_number_list = Field(type=CriteriaReplacementDNList, required=False)


class ExtendedFileResource(OCIType):
    """
      Represents either an existing file for the application server to use, or
      the contents of a file to transfer and an URL.
    """

    ELEMENTS = (
        ElementInfo("file", "file", LabeledFileResource, True, False, False),
        ElementInfo("url", "url", str, False, False, False),
    )
    file = Field(type=LabeledFileResource, required=False)
    url = Field(type=str, required=False)


class ExtendedMediaFileLevelResource20(OCIType):
    """
      Represents either an existing file for the application server to use, or
      the contents of a file to transfer and an URL.
    """

    ELEMENTS = (
        ElementInfo("file", "file", AnnouncementFileLevelKey, True, False, False),
        ElementInfo("url", "url", str, False, False, False),
    )
    file = Field(type=AnnouncementFileLevelKey, required=False)
    url = Field(type=str, required=False)


class ExtendedMediaFileResource(OCIType):
    """
      Represents either an existing file for the application server to use, or
      the contents of a file to transfer and an URL.
    """

    ELEMENTS = (
        ElementInfo("file", "file", LabeledMediaFileResource, True, False, False),
        ElementInfo("url", "url", str, False, False, False),
    )
    file = Field(type=LabeledMediaFileResource, required=False)
    url = Field(type=str, required=False)


class ExtendedMediaFileResource20(OCIType):
    """
      Represents either an existing file for the application server to use, or
      the contents of a file to transfer and an URL.
    """

    ELEMENTS = (
        ElementInfo("file", "file", AnnouncementFileKey, True, False, False),
        ElementInfo("url", "url", str, False, False, False),
    )
    file = Field(type=AnnouncementFileKey, required=False)
    url = Field(type=str, required=False)


class GroupServiceAuthorization(OCIType):
    """
    Authorize (with quantity) or unauthorize a group service.
    """

    ELEMENTS = (
        ElementInfo("service_name", "serviceName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            True,
            False,
        ),
        ElementInfo("unauthorized", "unauthorized", bool, False, True, False),
    )
    service_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=True)
    unauthorized = Field(type=bool, required=True)


class GroupServiceAuthorizationAndAssignment(OCIType):
    """
    Authorize (with quantity) a group service, and optionally
    assign the service.
    """

    ELEMENTS = (
        ElementInfo("service_name", "serviceName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            False,
            False,
        ),
        ElementInfo("assign", "assign", bool, False, False, False),
    )
    service_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=False)
    assign = Field(type=bool, required=False)


class GroupSessionAdmissionControlGroupGetResponse21sp1V2(OCIType):
    """
    Response to GroupSessionAdmissionControlGroupGetRequest21sp1V2.
    Returns the profile information for the session admission control group.
    """

    ELEMENTS = (
        ElementInfo("max_session", "maxSession", int, False, True, False),
        ElementInfo(
            "max_user_originating_sessions",
            "maxUserOriginatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "max_user_terminating_sessions",
            "maxUserTerminatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo("reserved_session", "reservedSession", int, False, True, False),
        ElementInfo(
            "reserved_user_originating_sessions",
            "reservedUserOriginatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "reserved_user_terminating_sessions",
            "reservedUserTerminatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo("default_group", "defaultGroup", bool, False, True, False),
        ElementInfo(
            "count_intra_sac_group_sessions",
            "countIntraSACGroupSessions",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("devices", "devices", AccessDevice, True, False, False),
        ElementInfo(
            "block_emergency_and_repair_calls_due_to_sac_limits",
            "blockEmergencyAndRepairCallsDueToSACLimits",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("media_group_name", "mediaGroupName", str, False, False, False),
        ElementInfo(
            "access_info_pattern", "accessInfoPattern", str, False, False, False,
        ),
    )
    max_session = Field(type=int, required=True)
    max_user_originating_sessions = Field(type=int, required=False)
    max_user_terminating_sessions = Field(type=int, required=False)
    reserved_session = Field(type=int, required=True)
    reserved_user_originating_sessions = Field(type=int, required=False)
    reserved_user_terminating_sessions = Field(type=int, required=False)
    default_group = Field(type=bool, required=True)
    count_intra_sac_group_sessions = Field(type=bool, required=True)
    devices = Field(type=AccessDevice, required=False)
    block_emergency_and_repair_calls_due_to_sac_limits = Field(type=bool, required=True)
    media_group_name = Field(type=str, required=False)
    access_info_pattern = Field(type=str, required=False)


class GroupTrunkGroupGetInstanceRequest14sp9A(OCIType):
    """
    Get a Trunk Group Instance's profile.
    The response is either a GroupTrunkGroupGetInstanceResponse14sp9A or an ErrorResponse.
    The response contains a hosted user table with column headings: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name".
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_key", "trunkGroupKey", TrunkGroupKey, True, True, False,
        ),
    )
    trunk_group_key = Field(type=TrunkGroupKey, required=True)


class GroupTrunkGroupGetInstanceRequest17sp4V2(OCIType):
    """
    Get a Trunk Group Instance's profile.
    The response is either a GroupTrunkGroupGetInstanceResponse17sp4V2 or an ErrorResponse.
    The response contains a hosted user table with column headings: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name".

    Replaced by: GroupTrunkGroupGetInstanceRequest19V2
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_key", "trunkGroupKey", TrunkGroupKey, True, True, False,
        ),
    )
    trunk_group_key = Field(type=TrunkGroupKey, required=True)


class GroupTrunkGroupGetInstanceRequest19sp1V2(OCIType):
    """
    Get a Trunk Group Instance's profile.
    The response is either a GroupTrunkGroupGetInstanceResponse19sp1V2 or an ErrorResponse.
    The response contains a hosted user table with column headings: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number", "Extension",
    "Department", "Email Address".
    Replaced by: GroupTrunkGroupGetInstanceRequest20sp1
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_key", "trunkGroupKey", TrunkGroupKey, True, True, False,
        ),
    )
    trunk_group_key = Field(type=TrunkGroupKey, required=True)


class GroupTrunkGroupGetInstanceResponse14sp9A(OCIType):
    """
    Response to GroupTrunkGroupGetInstanceRequest14sp9A.
    Returns the profile information for the Trunk Group.
    Contains a hosted user table with column headings: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name".
    """

    ELEMENTS = (
        ElementInfo("pilot_user_id", "pilotUserId", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("max_active_calls", "maxActiveCalls", int, False, True, False),
        ElementInfo("max_incoming_calls", "maxIncomingCalls", int, False, False, False),
        ElementInfo("max_outgoing_calls", "maxOutgoingCalls", int, False, False, False),
        ElementInfo("enable_bursting", "enableBursting", bool, False, True, False),
        ElementInfo(
            "bursting_max_active_calls",
            "burstingMaxActiveCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_incoming_calls",
            "burstingMaxIncomingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_outgoing_calls",
            "burstingMaxOutgoingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_action",
            "capacityExceededAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_forward_address",
            "capacityExceededForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_initial_calls",
            "capacityExceededTrapInitialCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_offset_calls",
            "capacityExceededTrapOffsetCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unreachable_destination_action",
            "unreachableDestinationAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_trap_initial_calls",
            "unreachableDestinationTrapInitialCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unreachable_destination_trap_offset_calls",
            "unreachableDestinationTrapOffsetCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo("invitation_timeout", "invitationTimeout", int, False, True, False),
        ElementInfo(
            "require_authentication", "requireAuthentication", bool, False, True, False,
        ),
        ElementInfo(
            "sip_authentication_user_name",
            "sipAuthenticationUserName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hosted_user_table", "hostedUserTable", list, True, False, True),
        ElementInfo(
            "trunk_group_identity", "trunkGroupIdentity", str, False, False, False,
        ),
        ElementInfo("otg_dtg_identity", "otgDtgIdentity", str, False, False, False),
        ElementInfo(
            "include_trunk_group_identity",
            "includeTrunkGroupIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_dtg_identity", "includeDtgIdentity", bool, False, True, False,
        ),
        ElementInfo(
            "enable_network_address_identity",
            "enableNetworkAddressIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_unscreened_calls", "allowUnscreenedCalls", bool, False, True, False,
        ),
        ElementInfo(
            "allow_unscreened_emergency_calls",
            "allowUnscreenedEmergencyCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_charge_number_policy",
            "pilotUserChargeNumberPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_action",
            "callForwardingAlwaysAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
    )
    pilot_user_id = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    access_device = Field(type=AccessDevice, required=False)
    max_active_calls = Field(type=int, required=True)
    max_incoming_calls = Field(type=int, required=False)
    max_outgoing_calls = Field(type=int, required=False)
    enable_bursting = Field(type=bool, required=True)
    bursting_max_active_calls = Field(type=int, required=False)
    bursting_max_incoming_calls = Field(type=int, required=False)
    bursting_max_outgoing_calls = Field(type=int, required=False)
    capacity_exceeded_action = Field(type=str, required=False)
    capacity_exceeded_forward_address = Field(type=str, required=False)
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True)
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True)
    unreachable_destination_action = Field(type=str, required=False)
    unreachable_destination_forward_address = Field(type=str, required=False)
    unreachable_destination_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    unreachable_destination_trap_initial_calls = Field(type=int, required=True)
    unreachable_destination_trap_offset_calls = Field(type=int, required=True)
    invitation_timeout = Field(type=int, required=True)
    require_authentication = Field(type=bool, required=True)
    sip_authentication_user_name = Field(type=str, required=False)
    hosted_user_table = Field(type=list, required=False)
    trunk_group_identity = Field(type=str, required=False)
    otg_dtg_identity = Field(type=str, required=False)
    include_trunk_group_identity = Field(type=bool, required=True)
    include_dtg_identity = Field(type=bool, required=True)
    enable_network_address_identity = Field(type=bool, required=True)
    allow_unscreened_calls = Field(type=bool, required=True)
    allow_unscreened_emergency_calls = Field(type=bool, required=True)
    pilot_user_calling_line_identity_policy = Field(type=str, required=True)
    pilot_user_charge_number_policy = Field(type=str, required=True)
    call_forwarding_always_action = Field(type=str, required=False)
    call_forwarding_always_forward_address = Field(type=str, required=False)
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )


class GroupTrunkGroupGetInstanceResponse17sp4V2(OCIType):
    """
    Response to GroupTrunkGroupGetInstanceRequest17sp4V2.
    Returns the profile information for the Trunk Group.
    Contains a hosted user table with column headings: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name".

    Replaced by: GroupTrunkGroupGetInstanceResponse19V2
    """

    ELEMENTS = (
        ElementInfo("pilot_user_id", "pilotUserId", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("max_active_calls", "maxActiveCalls", int, False, True, False),
        ElementInfo("max_incoming_calls", "maxIncomingCalls", int, False, False, False),
        ElementInfo("max_outgoing_calls", "maxOutgoingCalls", int, False, False, False),
        ElementInfo("enable_bursting", "enableBursting", bool, False, True, False),
        ElementInfo(
            "bursting_max_active_calls",
            "burstingMaxActiveCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_incoming_calls",
            "burstingMaxIncomingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_outgoing_calls",
            "burstingMaxOutgoingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_action",
            "capacityExceededAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_forward_address",
            "capacityExceededForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_initial_calls",
            "capacityExceededTrapInitialCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_offset_calls",
            "capacityExceededTrapOffsetCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unreachable_destination_action",
            "unreachableDestinationAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo("invitation_timeout", "invitationTimeout", int, False, True, False),
        ElementInfo(
            "require_authentication", "requireAuthentication", bool, False, True, False,
        ),
        ElementInfo(
            "sip_authentication_user_name",
            "sipAuthenticationUserName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hosted_user_table", "hostedUserTable", list, True, False, True),
        ElementInfo(
            "trunk_group_identity", "trunkGroupIdentity", str, False, False, False,
        ),
        ElementInfo("otg_dtg_identity", "otgDtgIdentity", str, False, False, False),
        ElementInfo(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_termination_to_dtg_identity",
            "allowTerminationToDtgIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_trunk_group_identity",
            "includeTrunkGroupIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_dtg_identity", "includeDtgIdentity", bool, False, True, False,
        ),
        ElementInfo(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_otg_identity_for_network_calls",
            "includeOtgIdentityForNetworkCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_network_address_identity",
            "enableNetworkAddressIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_unscreened_calls", "allowUnscreenedCalls", bool, False, True, False,
        ),
        ElementInfo(
            "allow_unscreened_emergency_calls",
            "allowUnscreenedEmergencyCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_charge_number_policy",
            "pilotUserChargeNumberPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_action",
            "callForwardingAlwaysAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo("peering_domain", "peeringDomain", str, False, False, False),
        ElementInfo(
            "route_to_peering_domain", "routeToPeeringDomain", bool, False, True, False,
        ),
        ElementInfo("prefix_enabled", "prefixEnabled", bool, False, True, False),
        ElementInfo("prefix", "prefix", str, False, False, False),
        ElementInfo(
            "stateful_rerouting_enabled",
            "statefulReroutingEnabled",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_continuous_options_message",
            "sendContinuousOptionsMessage",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "failure_threshold_counter",
            "failureThresholdCounter",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "success_threshold_counter",
            "successThresholdCounter",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "invite_failure_threshold_counter",
            "inviteFailureThresholdCounter",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo("trunk_group_state", "trunkGroupState", str, False, True, False),
        ElementInfo(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy",
            bool,
            False,
            True,
            False,
        ),
    )
    pilot_user_id = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    access_device = Field(type=AccessDevice, required=False)
    max_active_calls = Field(type=int, required=True)
    max_incoming_calls = Field(type=int, required=False)
    max_outgoing_calls = Field(type=int, required=False)
    enable_bursting = Field(type=bool, required=True)
    bursting_max_active_calls = Field(type=int, required=False)
    bursting_max_incoming_calls = Field(type=int, required=False)
    bursting_max_outgoing_calls = Field(type=int, required=False)
    capacity_exceeded_action = Field(type=str, required=False)
    capacity_exceeded_forward_address = Field(type=str, required=False)
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True)
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True)
    unreachable_destination_action = Field(type=str, required=False)
    unreachable_destination_forward_address = Field(type=str, required=False)
    unreachable_destination_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    invitation_timeout = Field(type=int, required=True)
    require_authentication = Field(type=bool, required=True)
    sip_authentication_user_name = Field(type=str, required=False)
    hosted_user_table = Field(type=list, required=False)
    trunk_group_identity = Field(type=str, required=False)
    otg_dtg_identity = Field(type=str, required=False)
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True)
    allow_termination_to_dtg_identity = Field(type=bool, required=True)
    include_trunk_group_identity = Field(type=bool, required=True)
    include_dtg_identity = Field(type=bool, required=True)
    include_trunk_group_identity_for_network_calls = Field(type=bool, required=True)
    include_otg_identity_for_network_calls = Field(type=bool, required=True)
    enable_network_address_identity = Field(type=bool, required=True)
    allow_unscreened_calls = Field(type=bool, required=True)
    allow_unscreened_emergency_calls = Field(type=bool, required=True)
    pilot_user_calling_line_identity_policy = Field(type=str, required=True)
    pilot_user_charge_number_policy = Field(type=str, required=True)
    call_forwarding_always_action = Field(type=str, required=False)
    call_forwarding_always_forward_address = Field(type=str, required=False)
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    peering_domain = Field(type=str, required=False)
    route_to_peering_domain = Field(type=bool, required=True)
    prefix_enabled = Field(type=bool, required=True)
    prefix = Field(type=str, required=False)
    stateful_rerouting_enabled = Field(type=bool, required=True)
    send_continuous_options_message = Field(type=bool, required=True)
    continuous_options_sending_interval_seconds = Field(type=int, required=True)
    failure_options_sending_interval_seconds = Field(type=int, required=True)
    failure_threshold_counter = Field(type=int, required=True)
    success_threshold_counter = Field(type=int, required=True)
    invite_failure_threshold_counter = Field(type=int, required=True)
    invite_failure_threshold_window_seconds = Field(type=int, required=True)
    trunk_group_state = Field(type=str, required=True)
    pilot_user_calling_line_asserted_identity_policy = Field(type=str, required=True)
    use_system_calling_line_asserted_identity_policy = Field(type=bool, required=True)


class GroupTrunkGroupGetInstanceResponse19sp1V2(OCIType):
    """
    Response to GroupTrunkGroupGetInstanceRequest19sp1V2.
    Returns the profile information for the Trunk Group.
    Contains a hosted user table with column headings: "User Id", "Last Name",
    "First Name", "Hiragana Last Name", "Hiragana First Name", "Phone Number",
    "Extension", "Department", "Email Address".
    Replaced by: GroupTrunkGroupGetInstanceResponse20sp1
    """

    ELEMENTS = (
        ElementInfo("pilot_user_id", "pilotUserId", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("max_active_calls", "maxActiveCalls", int, False, True, False),
        ElementInfo("max_incoming_calls", "maxIncomingCalls", int, False, False, False),
        ElementInfo("max_outgoing_calls", "maxOutgoingCalls", int, False, False, False),
        ElementInfo("enable_bursting", "enableBursting", bool, False, True, False),
        ElementInfo(
            "bursting_max_active_calls",
            "burstingMaxActiveCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_incoming_calls",
            "burstingMaxIncomingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_outgoing_calls",
            "burstingMaxOutgoingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_action",
            "capacityExceededAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_forward_address",
            "capacityExceededForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_initial_calls",
            "capacityExceededTrapInitialCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_offset_calls",
            "capacityExceededTrapOffsetCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unreachable_destination_action",
            "unreachableDestinationAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo("invitation_timeout", "invitationTimeout", int, False, True, False),
        ElementInfo(
            "require_authentication", "requireAuthentication", bool, False, True, False,
        ),
        ElementInfo(
            "sip_authentication_user_name",
            "sipAuthenticationUserName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hosted_user_table", "hostedUserTable", list, True, False, True),
        ElementInfo(
            "trunk_group_identity", "trunkGroupIdentity", str, False, False, False,
        ),
        ElementInfo("otg_dtg_identity", "otgDtgIdentity", str, False, False, False),
        ElementInfo(
            "allow_termination_to_trunk_group_identity",
            "allowTerminationToTrunkGroupIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_termination_to_dtg_identity",
            "allowTerminationToDtgIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_trunk_group_identity",
            "includeTrunkGroupIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_dtg_identity", "includeDtgIdentity", bool, False, True, False,
        ),
        ElementInfo(
            "include_trunk_group_identity_for_network_calls",
            "includeTrunkGroupIdentityForNetworkCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_otg_identity_for_network_calls",
            "includeOtgIdentityForNetworkCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_network_address_identity",
            "enableNetworkAddressIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_unscreened_calls", "allowUnscreenedCalls", bool, False, True, False,
        ),
        ElementInfo(
            "allow_unscreened_emergency_calls",
            "allowUnscreenedEmergencyCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_calling_line_identity_for_external_calls_policy",
            "pilotUserCallingLineIdentityForExternalCallsPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_charge_number_policy",
            "pilotUserChargeNumberPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_action",
            "callForwardingAlwaysAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo("peering_domain", "peeringDomain", str, False, False, False),
        ElementInfo(
            "route_to_peering_domain", "routeToPeeringDomain", bool, False, True, False,
        ),
        ElementInfo("prefix_enabled", "prefixEnabled", bool, False, True, False),
        ElementInfo("prefix", "prefix", str, False, False, False),
        ElementInfo(
            "stateful_rerouting_enabled",
            "statefulReroutingEnabled",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "send_continuous_options_message",
            "sendContinuousOptionsMessage",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "continuous_options_sending_interval_seconds",
            "continuousOptionsSendingIntervalSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "failure_options_sending_interval_seconds",
            "failureOptionsSendingIntervalSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "failure_threshold_counter",
            "failureThresholdCounter",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "success_threshold_counter",
            "successThresholdCounter",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "invite_failure_threshold_counter",
            "inviteFailureThresholdCounter",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "invite_failure_threshold_window_seconds",
            "inviteFailureThresholdWindowSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo("trunk_group_state", "trunkGroupState", str, False, True, False),
        ElementInfo(
            "pilot_user_calling_line_asserted_identity_policy",
            "pilotUserCallingLineAssertedIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_system_calling_line_asserted_identity_policy",
            "useSystemCallingLineAssertedIdentityPolicy",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "total_active_incoming_calls",
            "totalActiveIncomingCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "total_active_outgoing_calls",
            "totalActiveOutgoingCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_call_optimization_policy",
            "pilotUserCallOptimizationPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "clid_source_for_screened_calls_policy",
            "clidSourceForScreenedCallsPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_system_clid_source_for_screened_calls_policy",
            "useSystemCLIDSourceForScreenedCallsPolicy",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("user_lookup_policy", "userLookupPolicy", str, False, True, False),
        ElementInfo(
            "use_system_user_lookup_policy",
            "useSystemUserLookupPolicy",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_calling_line_identity_for_emergency_calls_policy",
            "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
            str,
            False,
            True,
            False,
        ),
    )
    pilot_user_id = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    access_device = Field(type=AccessDevice, required=False)
    max_active_calls = Field(type=int, required=True)
    max_incoming_calls = Field(type=int, required=False)
    max_outgoing_calls = Field(type=int, required=False)
    enable_bursting = Field(type=bool, required=True)
    bursting_max_active_calls = Field(type=int, required=False)
    bursting_max_incoming_calls = Field(type=int, required=False)
    bursting_max_outgoing_calls = Field(type=int, required=False)
    capacity_exceeded_action = Field(type=str, required=False)
    capacity_exceeded_forward_address = Field(type=str, required=False)
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True)
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True)
    unreachable_destination_action = Field(type=str, required=False)
    unreachable_destination_forward_address = Field(type=str, required=False)
    unreachable_destination_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    invitation_timeout = Field(type=int, required=True)
    require_authentication = Field(type=bool, required=True)
    sip_authentication_user_name = Field(type=str, required=False)
    hosted_user_table = Field(type=list, required=False)
    trunk_group_identity = Field(type=str, required=False)
    otg_dtg_identity = Field(type=str, required=False)
    allow_termination_to_trunk_group_identity = Field(type=bool, required=True)
    allow_termination_to_dtg_identity = Field(type=bool, required=True)
    include_trunk_group_identity = Field(type=bool, required=True)
    include_dtg_identity = Field(type=bool, required=True)
    include_trunk_group_identity_for_network_calls = Field(type=bool, required=True)
    include_otg_identity_for_network_calls = Field(type=bool, required=True)
    enable_network_address_identity = Field(type=bool, required=True)
    allow_unscreened_calls = Field(type=bool, required=True)
    allow_unscreened_emergency_calls = Field(type=bool, required=True)
    pilot_user_calling_line_identity_for_external_calls_policy = Field(
        type=str, required=True,
    )
    pilot_user_charge_number_policy = Field(type=str, required=True)
    call_forwarding_always_action = Field(type=str, required=False)
    call_forwarding_always_forward_address = Field(type=str, required=False)
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    peering_domain = Field(type=str, required=False)
    route_to_peering_domain = Field(type=bool, required=True)
    prefix_enabled = Field(type=bool, required=True)
    prefix = Field(type=str, required=False)
    stateful_rerouting_enabled = Field(type=bool, required=True)
    send_continuous_options_message = Field(type=bool, required=True)
    continuous_options_sending_interval_seconds = Field(type=int, required=True)
    failure_options_sending_interval_seconds = Field(type=int, required=True)
    failure_threshold_counter = Field(type=int, required=True)
    success_threshold_counter = Field(type=int, required=True)
    invite_failure_threshold_counter = Field(type=int, required=True)
    invite_failure_threshold_window_seconds = Field(type=int, required=True)
    trunk_group_state = Field(type=str, required=True)
    pilot_user_calling_line_asserted_identity_policy = Field(type=str, required=True)
    use_system_calling_line_asserted_identity_policy = Field(type=bool, required=True)
    total_active_incoming_calls = Field(type=int, required=True)
    total_active_outgoing_calls = Field(type=int, required=True)
    pilot_user_call_optimization_policy = Field(type=str, required=True)
    clid_source_for_screened_calls_policy = Field(type=str, required=True)
    use_system_clid_source_for_screened_calls_policy = Field(type=bool, required=True)
    user_lookup_policy = Field(type=str, required=True)
    use_system_user_lookup_policy = Field(type=bool, required=True)
    pilot_user_calling_line_identity_for_emergency_calls_policy = Field(
        type=str, required=True,
    )


class GroupTrunkGroupModifyInstanceRequest14sp9A(OCIType):
    """
    Modify a Trunk Group Instance in a group.
    The access device cannot be modified or cleared if there are any users assigned
    to the Trunk Group.
    The response is either a SuccessResponse or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_key", "trunkGroupKey", TrunkGroupKey, True, True, False,
        ),
        ElementInfo("new_name", "newName", str, False, False, False),
        ElementInfo("pilot_user_id", "pilotUserId", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("max_active_calls", "maxActiveCalls", int, False, False, False),
        ElementInfo("max_incoming_calls", "maxIncomingCalls", int, False, False, False),
        ElementInfo("max_outgoing_calls", "maxOutgoingCalls", int, False, False, False),
        ElementInfo("enable_bursting", "enableBursting", bool, False, False, False),
        ElementInfo(
            "bursting_max_active_calls",
            "burstingMaxActiveCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_incoming_calls",
            "burstingMaxIncomingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_outgoing_calls",
            "burstingMaxOutgoingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_action",
            "capacityExceededAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_forward_address",
            "capacityExceededForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_initial_calls",
            "capacityExceededTrapInitialCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_offset_calls",
            "capacityExceededTrapOffsetCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_action",
            "unreachableDestinationAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_trap_initial_calls",
            "unreachableDestinationTrapInitialCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_trap_offset_calls",
            "unreachableDestinationTrapOffsetCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "invitation_timeout", "invitationTimeout", int, False, False, False,
        ),
        ElementInfo(
            "require_authentication", "requireAuthentication", bool, False, False, False,
        ),
        ElementInfo(
            "sip_authentication_user_name",
            "sipAuthenticationUserName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "sip_authentication_password",
            "sipAuthenticationPassword",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "hosted_user_id_list",
            "hostedUserIdList",
            ReplacementUserIdList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "trunk_group_identity", "trunkGroupIdentity", str, False, False, False,
        ),
        ElementInfo("otg_dtg_identity", "otgDtgIdentity", str, False, False, False),
        ElementInfo(
            "include_trunk_group_identity",
            "includeTrunkGroupIdentity",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_dtg_identity", "includeDtgIdentity", bool, False, False, False,
        ),
        ElementInfo(
            "enable_network_address_identity",
            "enableNetworkAddressIdentity",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_unscreened_calls", "allowUnscreenedCalls", bool, False, False, False,
        ),
        ElementInfo(
            "allow_unscreened_emergency_calls",
            "allowUnscreenedEmergencyCalls",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "pilot_user_charge_number_policy",
            "pilotUserChargeNumberPolicy",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_action",
            "callForwardingAlwaysAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
    )
    trunk_group_key = Field(type=TrunkGroupKey, required=True)
    new_name = Field(type=str, required=False)
    pilot_user_id = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    access_device = Field(type=AccessDevice, required=False)
    max_active_calls = Field(type=int, required=False)
    max_incoming_calls = Field(type=int, required=False)
    max_outgoing_calls = Field(type=int, required=False)
    enable_bursting = Field(type=bool, required=False)
    bursting_max_active_calls = Field(type=int, required=False)
    bursting_max_incoming_calls = Field(type=int, required=False)
    bursting_max_outgoing_calls = Field(type=int, required=False)
    capacity_exceeded_action = Field(type=str, required=False)
    capacity_exceeded_forward_address = Field(type=str, required=False)
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    capacity_exceeded_trap_initial_calls = Field(type=int, required=False)
    capacity_exceeded_trap_offset_calls = Field(type=int, required=False)
    unreachable_destination_action = Field(type=str, required=False)
    unreachable_destination_forward_address = Field(type=str, required=False)
    unreachable_destination_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    unreachable_destination_trap_initial_calls = Field(type=int, required=False)
    unreachable_destination_trap_offset_calls = Field(type=int, required=False)
    invitation_timeout = Field(type=int, required=False)
    require_authentication = Field(type=bool, required=False)
    sip_authentication_user_name = Field(type=str, required=False)
    sip_authentication_password = Field(type=str, required=False)
    hosted_user_id_list = Field(type=ReplacementUserIdList, required=False)
    trunk_group_identity = Field(type=str, required=False)
    otg_dtg_identity = Field(type=str, required=False)
    include_trunk_group_identity = Field(type=bool, required=False)
    include_dtg_identity = Field(type=bool, required=False)
    enable_network_address_identity = Field(type=bool, required=False)
    allow_unscreened_calls = Field(type=bool, required=False)
    allow_unscreened_emergency_calls = Field(type=bool, required=False)
    pilot_user_calling_line_identity_policy = Field(type=str, required=False)
    pilot_user_charge_number_policy = Field(type=str, required=False)
    call_forwarding_always_action = Field(type=str, required=False)
    call_forwarding_always_forward_address = Field(type=str, required=False)
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )


class IncomingCallingPlanDepartmentPermissions(OCIType):
    """
    Allows or disallows various types of incoming calls for a specified department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "department_full_path_name",
            "departmentFullPathName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_from_within_group", "allowFromWithinGroup", bool, False, True, False,
        ),
        ElementInfo(
            "allow_from_outside_group", "allowFromOutsideGroup", str, False, True, False,
        ),
        ElementInfo(
            "allow_collect_calls", "allowCollectCalls", bool, False, True, False,
        ),
        ElementInfo(
            "digit_pattern_permission",
            "digitPatternPermission",
            IncomingCallingPlanDigitPatternPermission,
            True,
            False,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_full_path_name = Field(type=str, required=True)
    allow_from_within_group = Field(type=bool, required=True)
    allow_from_outside_group = Field(type=str, required=True)
    allow_collect_calls = Field(type=bool, required=True)
    digit_pattern_permission = Field(
        type=IncomingCallingPlanDigitPatternPermission, required=False,
    )


class IncomingCallingPlanDepartmentPermissionsModify(OCIType):
    """
    Allows or disallows various types of incoming calls for a specified department.
    For use when modifing settings.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "allow_from_within_group", "allowFromWithinGroup", bool, False, False, False,
        ),
        ElementInfo(
            "allow_from_outside_group",
            "allowFromOutsideGroup",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_collect_calls", "allowCollectCalls", bool, False, False, False,
        ),
        ElementInfo(
            "digit_pattern_permission",
            "digitPatternPermission",
            IncomingCallingPlanDigitPatternPermission,
            True,
            False,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    allow_from_within_group = Field(type=bool, required=False)
    allow_from_outside_group = Field(type=str, required=False)
    allow_collect_calls = Field(type=bool, required=False)
    digit_pattern_permission = Field(
        type=IncomingCallingPlanDigitPatternPermission, required=False,
    )


class IncomingCallingPlanPermissions(OCIType):
    """
    Allows or disallows various types of incoming calls for a user or group -- not
    any particular department.
    """

    ELEMENTS = (
        ElementInfo(
            "allow_from_within_group", "allowFromWithinGroup", bool, False, True, False,
        ),
        ElementInfo(
            "allow_from_outside_group", "allowFromOutsideGroup", str, False, True, False,
        ),
        ElementInfo(
            "allow_collect_calls", "allowCollectCalls", bool, False, True, False,
        ),
        ElementInfo(
            "digit_pattern_permission",
            "digitPatternPermission",
            IncomingCallingPlanDigitPatternPermission,
            True,
            False,
            False,
        ),
    )
    allow_from_within_group = Field(type=bool, required=True)
    allow_from_outside_group = Field(type=str, required=True)
    allow_collect_calls = Field(type=bool, required=True)
    digit_pattern_permission = Field(
        type=IncomingCallingPlanDigitPatternPermission, required=False,
    )


class IncomingCallingPlanPermissionsModify(OCIType):
    """
    Allows or disallows various types of incoming calls for a user or group -- not
    any particular department.
    For use when modifing settings.
    """

    ELEMENTS = (
        ElementInfo(
            "allow_from_within_group", "allowFromWithinGroup", bool, False, False, False,
        ),
        ElementInfo(
            "allow_from_outside_group",
            "allowFromOutsideGroup",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "allow_collect_calls", "allowCollectCalls", bool, False, False, False,
        ),
        ElementInfo(
            "digit_pattern_permission",
            "digitPatternPermission",
            IncomingCallingPlanDigitPatternPermission,
            True,
            False,
            False,
        ),
    )
    allow_from_within_group = Field(type=bool, required=False)
    allow_from_outside_group = Field(type=str, required=False)
    allow_collect_calls = Field(type=bool, required=False)
    digit_pattern_permission = Field(
        type=IncomingCallingPlanDigitPatternPermission, required=False,
    )


class MWIDeliveryToMobileEndpointTemplateBody(OCIType):
    """
     MWI Delivery To Mobile Endpoint template body.
    """

    ELEMENTS = (
        ElementInfo(
            "line", "line", MWIDeliveryToMobileEndpointTemplateLine, True, True, False,
        ),
    )
    line = Field(type=MWIDeliveryToMobileEndpointTemplateLine, required=True)


class OutgoingCallingPlanCallMeNowDepartmentPermissions(OCIType):
    """
     Outgoing Calling Plan for Call Me Now call permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanCallMeNowPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    permissions = Field(type=OutgoingCallingPlanCallMeNowPermissions, required=True)


class OutgoingCallingPlanCallMeNowDepartmentPermissionsModify(OCIType):
    """
     Modify outgoing Calling Plan for Call Me Now call permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanCallMeNowPermissionsModify,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    permissions = Field(
        type=OutgoingCallingPlanCallMeNowPermissionsModify, required=True,
    )


class OutgoingCallingPlanDepartmentAuthorizationCodes(OCIType):
    """
    Outgoing Calling Plan Authorization Code for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "code_entry",
            "codeEntry",
            OutgoingCallingPlanAuthorizationCodeEntry,
            True,
            False,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    code_entry = Field(type=OutgoingCallingPlanAuthorizationCodeEntry, required=False)


class OutgoingCallingPlanDepartmentTransferNumbers(OCIType):
    """
    Outgoing Calling Plan transfer numbers for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "transfer_numbers",
            "transferNumbers",
            OutgoingCallingPlanTransferNumbers,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    transfer_numbers = Field(type=OutgoingCallingPlanTransferNumbers, required=True)


class OutgoingCallingPlanDepartmentTransferNumbersModify(OCIType):
    """
    Outgoing Calling Plan transfer numbers for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "transfer_numbers",
            "transferNumbers",
            OutgoingCallingPlanTransferNumbersModify,
            True,
            False,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    transfer_numbers = Field(
        type=OutgoingCallingPlanTransferNumbersModify, required=False,
    )


class OutgoingCallingPlanDigitPatternCallMeNowPermissions(OCIType):
    """
    Outgoing Calling Plan Call Me Now call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternCallMeNowPermission,
            True,
            True,
            False,
        ),
    )
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternCallMeNowPermission, required=True,
    )


class OutgoingCallingPlanDigitPatternOriginatingPermissions(OCIType):
    """
    Outgoing Calling Plan originating call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternOriginatingPermission,
            True,
            True,
            False,
        ),
    )
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternOriginatingPermission, required=True,
    )


class OutgoingCallingPlanDigitPatternRedirectingPermissions(OCIType):
    """
    Outgoing Calling Plan redirecting call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternRedirectingPermission,
            True,
            True,
            False,
        ),
    )
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternRedirectingPermission, required=True,
    )


class OutgoingCallingPlanGroupAuthorizationCodes(OCIType):
    """
    Outgoing Calling Plan Authorization Code for the group default.
    """

    ELEMENTS = (
        ElementInfo(
            "code_entry",
            "codeEntry",
            OutgoingCallingPlanAuthorizationCodeEntry,
            True,
            False,
            False,
        ),
    )
    code_entry = Field(type=OutgoingCallingPlanAuthorizationCodeEntry, required=False)


class OutgoingCallingPlanOriginatingDepartmentPermissions(OCIType):
    """
    Outgoing Calling Plan originating call permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanOriginatingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    permissions = Field(type=OutgoingCallingPlanOriginatingPermissions, required=True)


class OutgoingCallingPlanOriginatingDepartmentPermissionsModify(OCIType):
    """
    Outgoing Calling Plan originating call permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanOriginatingPermissionsModify,
            True,
            False,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    permissions = Field(
        type=OutgoingCallingPlanOriginatingPermissionsModify, required=False,
    )


class OutgoingCallingPlanRedirectedDepartmentPermissions(OCIType):
    """
    Outgoing Calling Plan being forwarded/transferred permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanRedirectedPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    permissions = Field(type=OutgoingCallingPlanRedirectedPermissions, required=True)


class OutgoingCallingPlanRedirectedDepartmentPermissionsModify(OCIType):
    """
    Outgoing Calling Plan being forwarded/transferred permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanRedirectedPermissionsModify,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    permissions = Field(
        type=OutgoingCallingPlanRedirectedPermissionsModify, required=True,
    )


class OutgoingCallingPlanRedirectingDepartmentPermissions(OCIType):
    """
    Outgoing Calling Plan initiating call forwards/transfer permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanRedirectingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    permissions = Field(type=OutgoingCallingPlanRedirectingPermissions, required=True)


class OutgoingCallingPlanRedirectingDepartmentPermissionsModify(OCIType):
    """
    Outgoing Calling Plan initiating call forwards/transfer permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingCallingPlanRedirectingPermissionsModify,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    permissions = Field(
        type=OutgoingCallingPlanRedirectingPermissionsModify, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions(OCIType):
    """
    Outgoing Pinhole Digit Plan Call Me Now call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingPinholeDigitPlanDigitPatternCallMeNowPermission,
            True,
            True,
            False,
        ),
    )
    digit_pattern_permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternCallMeNowPermission, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions(OCIType):
    """
    Outgoing Pinhole Digit Plan originating call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingPinholeDigitPlanDigitPatternOriginatingPermission,
            True,
            True,
            False,
        ),
    )
    digit_pattern_permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternOriginatingPermission, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions(OCIType):
    """
    Outgoing Pinhole Digit Plan redirecting call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingPinholeDigitPlanDigitPatternRedirectingPermission,
            True,
            True,
            False,
        ),
    )
    digit_pattern_permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternRedirectingPermission, required=True,
    )


class PriorityAlertCriteriaFromDnModify(OCIType):
    """
    The from dn criteria used within a modify request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "phone_number_list",
            "phoneNumberList",
            CriteriaReplacementDNList,
            True,
            False,
            False,
        ),
    )
    from_dn_criteria_selection = Field(type=str, required=False)
    include_anonymous_callers = Field(type=bool, required=False)
    include_unavailable_callers = Field(type=bool, required=False)
    phone_number_list = Field(type=CriteriaReplacementDNList, required=False)


class ProfileAndServiceDeviceEndpointInfo(OCIType):
    """
    Represents information about an endpoint device
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo(
            "access_device_mac_address",
            "accessDeviceMacAddress",
            str,
            False,
            False,
            False,
        ),
    )
    access_device = Field(type=AccessDevice, required=True)
    line_port = Field(type=str, required=True)
    private_identity = Field(type=str, required=False)
    access_device_mac_address = Field(type=str, required=False)


class ProfileAndServiceMusicOnHoldInfo(OCIType):
    """
        This is the configuration parameters for Music On Hold service
    """

    ELEMENTS = (
        ElementInfo("enable_video", "enableVideo", bool, False, True, False),
        ElementInfo("source", "source", MusicOnHoldUserSourceRead16, True, True, False),
        ElementInfo(
            "use_alternate_source_for_internal_calls",
            "useAlternateSourceForInternalCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "internal_source",
            "internalSource",
            MusicOnHoldUserSourceRead16,
            True,
            False,
            False,
        ),
    )
    enable_video = Field(type=bool, required=True)
    source = Field(type=MusicOnHoldUserSourceRead16, required=True)
    use_alternate_source_for_internal_calls = Field(type=bool, required=True)
    internal_source = Field(type=MusicOnHoldUserSourceRead16, required=False)


class ProfileAndServiceSimultaneousRingPersonalInfo(OCIType):
    """
        This is the configuration parameters for Simultaneous Ring Personal  service

        Contains a criteria table with column heading: "Is Active", "Criteria Name",
    "Time Schedule", "Holiday Schedule", "Calls From" and "Blacklisted".

        The "Calls From" column is a string containing call numbers
    """

    ELEMENTS = (
        ElementInfo("is_active", "isActive", bool, False, True, False),
        ElementInfo(
            "do_not_ring_if_on_call", "doNotRingIfOnCall", bool, False, True, False,
        ),
        ElementInfo(
            "simultaneous_ring_number",
            "simultaneousRingNumber",
            SimultaneousRingNumber,
            True,
            False,
            False,
        ),
        ElementInfo("criteria_table", "criteriaTable", list, True, True, True),
    )
    is_active = Field(type=bool, required=True)
    do_not_ring_if_on_call = Field(type=bool, required=True)
    simultaneous_ring_number = Field(type=SimultaneousRingNumber, required=False)
    criteria_table = Field(type=list, required=True)


class ProfileAndServiceSpeedDial100Info(OCIType):
    """
        This is the configuration parameters for Speed Dial 100 service
    """

    ELEMENTS = (
        ElementInfo("prefix", "prefix", str, False, False, False),
        ElementInfo(
            "speed_dial_entry", "speedDialEntry", SpeedDial100Entry, True, False, False,
        ),
    )
    prefix = Field(type=str, required=False)
    speed_dial_entry = Field(type=SpeedDial100Entry, required=False)


class ProfileAndServiceSpeedDial8Info(OCIType):
    """
        This is the configuration parameters for Speed Dial 8 service
    """

    ELEMENTS = (
        ElementInfo(
            "speed_dial_entry", "speedDialEntry", SpeedDial8Entry, True, False, False,
        ),
    )
    speed_dial_entry = Field(type=SpeedDial8Entry, required=False)


class PushNotificationTokenData(OCIType):
    """
    ?
    The common push notification token elements.
    """

    ELEMENTS = (
        ElementInfo(
            "push_notification_token", "pushNotificationToken", str, False, True, False,
        ),
        ElementInfo(
            "push_notification_type", "pushNotificationType", str, False, True, False,
        ),
        ElementInfo(
            "push_notification_event_data",
            "pushNotificationEventData",
            PushNotificationEventData,
            True,
            False,
            False,
        ),
    )
    push_notification_token = Field(type=str, required=True)
    push_notification_type = Field(type=str, required=True)
    push_notification_event_data = Field(type=PushNotificationEventData, required=False)


class ReceptionistContactUserAndNote(OCIType):
    """
    The Receptionist User (or VON User) and Receptionist Notes.
    """

    ELEMENTS = (
        ElementInfo("contact_user_id", "contactUserId", str, False, True, False),
        ElementInfo("von_user", "vonUser", VirtualOnNetUserKey, True, True, False),
        ElementInfo("note", "note", str, False, True, False),
    )
    contact_user_id = Field(type=str, required=True)
    von_user = Field(type=VirtualOnNetUserKey, required=True)
    note = Field(type=str, required=True)


class ReplacementAgentWeightList(OCIType):
    """
    A list of agent userIds and hunt agent weights that replaces the previously
    configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo("agent_weight", "agentWeight", HuntAgentWeight, True, True, False),
    )
    agent_weight = Field(type=HuntAgentWeight, required=True)


class ReplacementAlternateUserIdEntryList(OCIType):
    """
    A list of alternate user ids that that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "alternate_user_id",
            "alternateUserId",
            AlternateUserIdEntry,
            True,
            True,
            False,
        ),
    )
    alternate_user_id = Field(type=AlternateUserIdEntry, required=True)


class ReplacementCallToNumberList(OCIType):
    """
    A list of Call to Numbers that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    For the callToNumbers, the extension element is not used and the number element
    is only used when the type is BroadWorks Mobility.
    """

    ELEMENTS = (
        ElementInfo("call_to_number", "callToNumber", CallToNumber, True, True, False),
    )
    call_to_number = Field(type=CallToNumber, required=True)


class ReplacementCommunicationBarringCallMeNowRuleList(OCIType):
    """
    A list of Communication Barring CallMeNow Rules that replaces a
    previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule", "rule", CommunicationBarringCallMeNowRule, True, True, False,
        ),
    )
    rule = Field(type=CommunicationBarringCallMeNowRule, required=True)


class ReplacementCommunicationBarringIncomingRuleList(OCIType):
    """
    A list of Communication Barring Incoming Rules that replaces a
    previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule", "rule", CommunicationBarringIncomingRule, True, True, False,
        ),
    )
    rule = Field(type=CommunicationBarringIncomingRule, required=True)


class ReplacementCommunicationBarringIncomingRuleList19sp1(OCIType):
    """
    A list of Communication Barring Incoming Rules that replaces a
    previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule", "rule", CommunicationBarringIncomingRule19sp1, True, True, False,
        ),
    )
    rule = Field(type=CommunicationBarringIncomingRule19sp1, required=True)


class ReplacementCommunicationBarringOriginatingRuleList(OCIType):
    """
    A list of Communication Barring Originating Rules that replaces a
    previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule", "rule", CommunicationBarringOriginatingRule, True, True, False,
        ),
    )
    rule = Field(type=CommunicationBarringOriginatingRule, required=True)


class ReplacementCommunicationBarringRedirectingRuleList(OCIType):
    """
    A list of Communication Barring Redirecting Rules that replaces a
    previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule", "rule", CommunicationBarringRedirectingRule, True, True, False,
        ),
    )
    rule = Field(type=CommunicationBarringRedirectingRule, required=True)


class ReplacementContactList22(OCIType):
    """
    A list of SIP contacts that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("contact", "contact", SIPContactInfo, True, True, False),)
    contact = Field(type=SIPContactInfo, required=True)


class ReplacementCustomContactDirectoryEntryList(OCIType):
    """
    A list of userIds and/or Virtual On-Net user DNs that replaces a previously
    configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo("entry", "entry", CustomContactDirectoryEntry, True, True, False),
    )
    entry = Field(type=CustomContactDirectoryEntry, required=True)


class ReplacementDeviceList(OCIType):
    """
    A list of devices that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (ElementInfo("device", "device", AccessDevice, True, True, False),)
    device = Field(type=AccessDevice, required=True)


class ReplacementEnterpriseEnterpriseTrunkTrunkGroupKeyList(OCIType):
    """
    A list of Enterprise Trunk Krunk Group Keys that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group", "trunkGroup", EnterpriseTrunkTrunkGroupKey, True, True, False,
        ),
    )
    trunk_group = Field(type=EnterpriseTrunkTrunkGroupKey, required=True)


class ReplacementEnterpriseTrunkTrunkGroupKeyList(OCIType):
    """
    A list of Enterprise Trunk Krunk Group Keys that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_list",
            "trunkGroupList",
            EnterpriseTrunkTrunkGroupKey,
            True,
            True,
            False,
        ),
    )
    trunk_group_list = Field(type=EnterpriseTrunkTrunkGroupKey, required=True)


class ReplacementGroupEnterpriseTrunkPriorityWeightedTrunkGroupList(OCIType):
    """
    A list of enterprise trunk priority weighted trunk groups in a group that
    replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group",
            "trunkGroup",
            GroupEnterpriseTrunkPriorityWeightedTrunkGroup,
            True,
            True,
            False,
        ),
    )
    trunk_group = Field(
        type=GroupEnterpriseTrunkPriorityWeightedTrunkGroup, required=True,
    )


class ScheduleEvents(OCIType):
    """
       Retrives all Holiday or Time Event details for a given schedulel Level.
    """

    ELEMENTS = (
        ElementInfo("eventname", "eventname", str, False, True, False),
        ElementInfo("start_date", "startDate", str, False, True, False),
        ElementInfo("all_day_event", "allDayEvent", bool, False, True, False),
        ElementInfo("start_time", "startTime", HourMinute, True, True, False),
        ElementInfo("end_time", "endTime", HourMinute, True, True, False),
        ElementInfo("end_date", "endDate", str, False, True, False),
        ElementInfo("recurrence", "recurrence", Recurrence, True, False, False),
    )
    eventname = Field(type=str, required=True)
    start_date = Field(type=str, required=True)
    all_day_event = Field(type=bool, required=True)
    start_time = Field(type=HourMinute, required=True)
    end_time = Field(type=HourMinute, required=True)
    end_date = Field(type=str, required=True)
    recurrence = Field(type=Recurrence, required=False)


class ScheduleGlobalKey(OCIType):
    """
    Uniquely identifies Holiday and Time Schedules throughout all System, Service
    Provider, Group and User level.
    """

    ELEMENTS = (
        ElementInfo("schedule_key", "scheduleKey", ScheduleKey, True, True, False),
        ElementInfo("schedule_level", "scheduleLevel", str, False, True, False),
    )
    schedule_key = Field(type=ScheduleKey, required=True)
    schedule_level = Field(type=str, required=True)


class SearchCriteriaComposedOrDnExtension(OCIType):
    """
    Criteria for searching for a DN OR an extension.
    Note: For this search criterion, the searchMode is always ‘Contains’ and the
    search criteria are always OR’ed.
    """

    ELEMENTS = (ElementInfo("value", "value", UserDNExtension, True, True, False),)
    value = Field(type=UserDNExtension, required=True)


class SearchCriteriaExactCallCenterReportTemplateKey(OCIType):
    """
    Criteria for searching for a particular call center enhanced reporting report template.
    """

    ELEMENTS = (
        ElementInfo(
            "report_template",
            "reportTemplate",
            CallCenterReportTemplateKey,
            True,
            True,
            False,
        ),
    )
    report_template = Field(type=CallCenterReportTemplateKey, required=True)


class SearchCriteriaExactDnDepartment(OCIType):
    """
    Criteria for searching for a particular fully specified DN's department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)


class SearchCriteriaExactUserDepartment(OCIType):
    """
    Criteria for searching for a particular fully specified user's department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)


class SelectiveCallRejectionCriteriaCallTypeModify(OCIType):
    """
    The call type criteria used within a modify request.
    """

    ELEMENTS = (
        ElementInfo(
            "from_dn_criteria_selection",
            "fromDnCriteriaSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_anonymous_callers",
            "includeAnonymousCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "include_unavailable_callers",
            "includeUnavailableCallers",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "phone_number_list",
            "phoneNumberList",
            CriteriaReplacementDNList,
            True,
            False,
            False,
        ),
    )
    from_dn_criteria_selection = Field(type=str, required=False)
    include_anonymous_callers = Field(type=bool, required=False)
    include_unavailable_callers = Field(type=bool, required=False)
    phone_number_list = Field(type=CriteriaReplacementDNList, required=False)


class ServiceInstanceAddProfile(OCIType):
    """
    Service Profile Information for group service.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    public_user_identity = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class ServiceInstanceAddProfileCallCenter(OCIType):
    """
    Service Profile Information for a call center.
    Password is required.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, True, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=True)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    public_user_identity = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class ServiceInstanceAddProfileFlexibleSeatingHost(OCIType):
    """
    Service Profile Information for a flexible seating host.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class ServiceInstanceAddProfileTrunkGroup(OCIType):
    """
    Service Profile Information for a trunk group.
    The publicUserIdentity element is not part of ServiceInstanceAddProfileTrunkGroup.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class ServiceInstanceModifyProfile(OCIType):
    """
    Service Profile Information for group service used when modifying an existing
    service instance.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "sip_alias_list",
            "sipAliasList",
            ReplacementSIPAliasList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=False)
    calling_line_id_last_name = Field(type=str, required=False)
    calling_line_id_first_name = Field(type=str, required=False)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    sip_alias_list = Field(type=ReplacementSIPAliasList, required=False)
    public_user_identity = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class ServiceInstanceModifyProfileFlexibleSeatingHost(OCIType):
    """
    Service Profile Information for a flexible seating host
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=False)
    calling_line_id_last_name = Field(type=str, required=False)
    calling_line_id_first_name = Field(type=str, required=False)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class ServiceInstanceModifyProfileTrunkGroup(OCIType):
    """
    Service Profile Information for a trunk group used when modifying an existing
    service instance.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "sip_alias_list",
            "sipAliasList",
            ReplacementSIPAliasList,
            True,
            False,
            False,
        ),
    )
    name = Field(type=str, required=False)
    calling_line_id_last_name = Field(type=str, required=False)
    calling_line_id_first_name = Field(type=str, required=False)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    sip_alias_list = Field(type=ReplacementSIPAliasList, required=False)


class ServiceInstanceReadProfile(OCIType):
    """
    Service Profile Information for group service.
    It is identical to the ServiceInstanceAddProfile, but without the password.
    Prior to release 14 this was called ServiceInstanceProfile.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "time_zone_display_name", "timeZoneDisplayName", str, False, False, False,
        ),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    time_zone_display_name = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    public_user_identity = Field(type=str, required=False)


class ServiceInstanceReadProfile17(OCIType):
    """
    Service Profile Information for group service.
    It is identical to the ServiceInstanceAddProfile, but without the password.

    Replaced by: ServiceInstanceReadProfile17sp4
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "time_zone_display_name", "timeZoneDisplayName", str, False, False, False,
        ),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    time_zone_display_name = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    public_user_identity = Field(type=str, required=False)


class ServiceInstanceReadProfile17sp4(OCIType):
    """
    Service Profile Information for group service.

    Replaced by: ServiceInstanceReadProfile19sp1
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("country_code", "countryCode", str, False, False, False),
        ElementInfo("national_prefix", "nationalPrefix", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "time_zone_display_name", "timeZoneDisplayName", str, False, False, False,
        ),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    country_code = Field(type=str, required=False)
    national_prefix = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    time_zone_display_name = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    public_user_identity = Field(type=str, required=False)


class ServiceInstanceReadProfile19sp1(OCIType):
    """
    Service Profile Information for group service.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.
    The value is returned exactly the same as being stored.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo("country_code", "countryCode", str, False, False, False),
        ElementInfo("national_prefix", "nationalPrefix", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "time_zone_display_name", "timeZoneDisplayName", str, False, False, False,
        ),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "public_user_identity", "publicUserIdentity", str, False, False, False,
        ),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    country_code = Field(type=str, required=False)
    national_prefix = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    time_zone_display_name = Field(type=str, required=False)
    alias = Field(type=str, required=False)
    public_user_identity = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class ServicePack(OCIType):
    """
    The common Service Pack elements.
    """

    ELEMENTS = (
        ElementInfo("service_pack_name", "servicePackName", str, False, True, False),
        ElementInfo(
            "service_pack_description",
            "servicePackDescription",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "is_available_for_use", "isAvailableForUse", bool, False, True, False,
        ),
        ElementInfo(
            "service_pack_quantity",
            "servicePackQuantity",
            UnboundedPositiveInt,
            True,
            True,
            False,
        ),
        ElementInfo("service_name", "serviceName", str, False, False, False),
    )
    service_pack_name = Field(type=str, required=True)
    service_pack_description = Field(type=str, required=False)
    is_available_for_use = Field(type=bool, required=True)
    service_pack_quantity = Field(type=UnboundedPositiveInt, required=True)
    service_name = Field(type=str, required=False)


class ServicePackAuthorization(OCIType):
    """
    Authorize (with quantity) or unauthorize a service pack.
    """

    ELEMENTS = (
        ElementInfo("service_pack_name", "servicePackName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            True,
            False,
        ),
        ElementInfo("unauthorized", "unauthorized", bool, False, True, False),
    )
    service_pack_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=True)
    unauthorized = Field(type=bool, required=True)


class ServiceProviderCommunicationBarringProfileGetResponse19sp1V2(OCIType):
    """
    Response to the ServiceProviderCommunicationBarringProfileGetRequest19sp1V2.
    The response contains the Communication Barring Profile information.
    The incoming, originating, redirecting and call me now rules are returned in
    ascending priority order.
          The following elements are only used in AS data mode:
       callMeNowDefaultAction
       callMeNowDefaultCallTimeout
       callMeNowRule
       applyToAttendedCallTransfers
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo(
            "originating_default_action",
            "originatingDefaultAction",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "originating_default_treatment_id",
            "originatingDefaultTreatmentId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "originating_default_transfer_number",
            "originatingDefaultTransferNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "originating_default_call_timeout",
            "originatingDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "originating_rule",
            "originatingRule",
            ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
            True,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_default_action",
            "redirectingDefaultAction",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "redirecting_default_call_timeout",
            "redirectingDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_rule",
            "redirectingRule",
            ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
            True,
            False,
            False,
        ),
        ElementInfo(
            "call_me_now_default_action",
            "callMeNowDefaultAction",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "call_me_now_default_call_timeout",
            "callMeNowDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_me_now_rule",
            "callMeNowRule",
            ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
            True,
            False,
            False,
        ),
        ElementInfo(
            "incoming_default_action", "incomingDefaultAction", str, False, True, False,
        ),
        ElementInfo(
            "incoming_default_call_timeout",
            "incomingDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "incoming_rule",
            "incomingRule",
            CommunicationBarringIncomingRule19sp1,
            True,
            False,
            False,
        ),
        ElementInfo("is_default", "isDefault", bool, False, True, False),
        ElementInfo(
            "apply_to_attended_call_transfers",
            "applyToAttendedCallTransfers",
            bool,
            False,
            True,
            False,
        ),
    )
    description = Field(type=str, required=False)
    originating_default_action = Field(type=str, required=True)
    originating_default_treatment_id = Field(type=str, required=False)
    originating_default_transfer_number = Field(type=str, required=False)
    originating_default_call_timeout = Field(type=int, required=False)
    originating_rule = Field(
        type=ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
        required=False,
    )
    redirecting_default_action = Field(type=str, required=True)
    redirecting_default_call_timeout = Field(type=int, required=False)
    redirecting_rule = Field(
        type=ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
        required=False,
    )
    call_me_now_default_action = Field(type=str, required=True)
    call_me_now_default_call_timeout = Field(type=int, required=False)
    call_me_now_rule = Field(
        type=ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
        required=False,
    )
    incoming_default_action = Field(type=str, required=True)
    incoming_default_call_timeout = Field(type=int, required=False)
    incoming_rule = Field(type=CommunicationBarringIncomingRule19sp1, required=False)
    is_default = Field(type=bool, required=True)
    apply_to_attended_call_transfers = Field(type=bool, required=True)


class ServiceProviderReplacementCommunicationBarringHierarchicalCallMeNowRuleList(
    OCIType,
):
    """
    A list of Service Provider Communication Barring Hierarchical Call Me Now Rules
    that replaces a previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule",
            "rule",
            ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
            True,
            True,
            False,
        ),
    )
    rule = Field(
        type=ServiceProviderCommunicationBarringHierarchicalCallMeNowRule, required=True,
    )


class ServiceProviderReplacementCommunicationBarringHierarchicalOriginatingRuleList(
    OCIType,
):
    """
    A list of Service Provider Communication Barring Hierarchical Originating Rules
    that replaces a previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule",
            "rule",
            ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
            True,
            True,
            False,
        ),
    )
    rule = Field(
        type=ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
        required=True,
    )


class ServiceProviderReplacementCommunicationBarringHierarchicalRedirectingRuleList(
    OCIType,
):
    """
    A list of Service Provider Communication Barring Hierarchical Redirecting Rules
    that replaces a previously configured list. By convention, an element of this type
    may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "rule",
            "rule",
            ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
            True,
            True,
            False,
        ),
    )
    rule = Field(
        type=ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
        required=True,
    )


class ShInterfaceUserIdDataEntry(OCIType):
    """
    ShInterface User Id Data Entry.
    """

    ELEMENTS = (
        ElementInfo("user_type", "userType", str, False, True, False),
        ElementInfo(
            "public_user_identity",
            "publicUserIdentity",
            PublicUserIdentity,
            True,
            True,
            False,
        ),
        ElementInfo("endpoint_type", "endpointType", str, False, True, False),
        ElementInfo("scscf_name", "SCSCFName", str, False, False, False),
        ElementInfo("ims_user_state", "IMSUserState", str, False, True, False),
    )
    user_type = Field(type=str, required=True)
    public_user_identity = Field(type=PublicUserIdentity, required=True)
    endpoint_type = Field(type=str, required=True)
    scscf_name = Field(type=str, required=False)
    ims_user_state = Field(type=str, required=True)


class ShInterfaceUserIdDataEntry21sp1(OCIType):
    """
    ShInterface User Id Data Entry.
    """

    ELEMENTS = (
        ElementInfo("user_type", "userType", str, False, True, False),
        ElementInfo(
            "public_user_identity",
            "publicUserIdentity",
            PublicUserIdentity,
            True,
            True,
            False,
        ),
        ElementInfo("endpoint_type", "endpointType", str, False, True, False),
        ElementInfo("scscf_name", "SCSCFName", str, False, False, False),
        ElementInfo("ims_user_state", "IMSUserState", str, False, True, False),
    )
    user_type = Field(type=str, required=True)
    public_user_identity = Field(type=PublicUserIdentity, required=True)
    endpoint_type = Field(type=str, required=True)
    scscf_name = Field(type=str, required=False)
    ims_user_state = Field(type=str, required=True)


class ShInterfaceUserListEntry(OCIType):
    """
    ShInterface User List Entry.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("user_type", "userType", str, False, True, False),
        ElementInfo(
            "public_user_identity",
            "publicUserIdentity",
            PublicUserIdentity,
            True,
            True,
            False,
        ),
        ElementInfo("endpoint_type", "endpointType", str, False, True, False),
        ElementInfo("scscf_name", "SCSCFName", str, False, False, False),
        ElementInfo("ims_user_state", "IMSUserState", str, False, True, False),
    )
    user_id = Field(type=str, required=True)
    user_type = Field(type=str, required=True)
    public_user_identity = Field(type=PublicUserIdentity, required=True)
    endpoint_type = Field(type=str, required=True)
    scscf_name = Field(type=str, required=False)
    ims_user_state = Field(type=str, required=True)


class ShInterfaceUserListEntry21sp1(OCIType):
    """
    ShInterface User List Entry.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("user_type", "userType", str, False, True, False),
        ElementInfo(
            "public_user_identity",
            "publicUserIdentity",
            PublicUserIdentity,
            True,
            True,
            False,
        ),
        ElementInfo("endpoint_type", "endpointType", str, False, True, False),
        ElementInfo("scscf_name", "SCSCFName", str, False, False, False),
        ElementInfo("ims_user_state", "IMSUserState", str, False, True, False),
    )
    user_id = Field(type=str, required=True)
    user_type = Field(type=str, required=True)
    public_user_identity = Field(type=PublicUserIdentity, required=True)
    endpoint_type = Field(type=str, required=True)
    scscf_name = Field(type=str, required=False)
    ims_user_state = Field(type=str, required=True)


class SimultaneousRingReplacementNumberList(OCIType):
    """
    A list of Simultaneous Ring numbers that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "simultaneous_ring_number",
            "simultaneousRingNumber",
            SimultaneousRingNumber,
            True,
            True,
            False,
        ),
    )
    simultaneous_ring_number = Field(type=SimultaneousRingNumber, required=True)


class SortOrderEnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentPagedSortedList(
    OCIType,
):
    """
    Used to sort the SortOrderEnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentPagedSortedListRequest.
    """

    ELEMENTS = (
        ElementInfo(
            "sort_by_mobile_directory_number",
            "sortByMobileDirectoryNumber",
            SortByMobileDirectoryNumber,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_dn_available",
            "sortByDnAvailable",
            SortByDnAvailable,
            True,
            True,
            False,
        ),
    )
    sort_by_mobile_directory_number = Field(
        type=SortByMobileDirectoryNumber, required=True,
    )
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_dn_available = Field(type=SortByDnAvailable, required=True)


class SortOrderEnterpriseCallCenterAgentThresholdProfileGetAvailableAgentPagedSortedList(
    OCIType,
):
    """
    Used to sort the EnterpriseCallCenterAgentThresholdProfileGetAvailableAgentPagedSortedListRequest
    request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_agent_threshold_profile",
            "sortByAgentThresholdProfile",
            SortByAgentThresholdProfile,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)
    sort_by_agent_threshold_profile = Field(
        type=SortByAgentThresholdProfile, required=True,
    )


class SortOrderEnterpriseCallCenterAgentThresholdProfileGetPagedSorted(OCIType):
    """
    Used to sort the EnterpriseCallCenterAgentThresholdProfileGetPagedSortedRequest request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)


class SortOrderEnterprisePhoneDirectoryGetPagedSortedList(OCIType):
    """
    Used to sort the EnterprisePhoneDirectoryGetPagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_group_location_code",
            "sortByGroupLocationCode",
            SortByGroupLocationCode,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_mobile_phone_number",
            "sortByMobilePhoneNumber",
            SortByMobilePhoneNumber,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_group_name", "sortByGroupName", SortByGroupName, True, True, False,
        ),
        ElementInfo(
            "sort_by_yahoo_id", "sortByYahooId", SortByYahooId, True, True, False,
        ),
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo("sort_by_imp_id", "sortByImpId", SortByImpId, True, True, False),
    )
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_group_location_code = Field(type=SortByGroupLocationCode, required=True)
    sort_by_mobile_phone_number = Field(type=SortByMobilePhoneNumber, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_group_name = Field(type=SortByGroupName, required=True)
    sort_by_yahoo_id = Field(type=SortByYahooId, required=True)
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_imp_id = Field(type=SortByImpId, required=True)


class SortOrderGroupCallCenterAgentThresholdProfileGetAvailableAgentPagedSortedList(
    OCIType,
):
    """
    Used to sort the GroupCallCenterAgentThresholdProfileGetAvailableAgentPagedSortedListRequest
    request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_agent_threshold_profile",
            "sortByAgentThresholdProfile",
            SortByAgentThresholdProfile,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)
    sort_by_agent_threshold_profile = Field(
        type=SortByAgentThresholdProfile, required=True,
    )


class SortOrderGroupCallCenterAgentThresholdProfileGetPagedSorted(OCIType):
    """
    Used to sort the GroupCallCenterAgentThresholdProfileGetPagedSortedRequest request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)


class SortOrderGroupCallCenterGetAvailableAgentPagedSortedList(OCIType):
    """
    Used to sort the GroupCallCenterGetAvailableAgentPagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)


class SortOrderGroupCallCenterGetInstancePagedSortedList(OCIType):
    """
    Used to sort the GroupCallCenterGetInstancePagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_call_center_name",
            "sortByCallCenterName",
            SortByCallCenterName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_hunt_policy",
            "sortByHuntPolicy",
            SortByHuntPolicy,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_call_center_type",
            "sortByCallCenterType",
            SortByCallCenterType,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_call_center_name = Field(type=SortByCallCenterName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_hunt_policy = Field(type=SortByHuntPolicy, required=True)
    sort_by_call_center_type = Field(type=SortByCallCenterType, required=True)


class SortOrderGroupCallParkGetAvailableAlternateRecallUserPagedSortedList(OCIType):
    """
    Used to sort the GroupCallParkGetAvailableAlternateRecallUserPagedSortedListRequest
    request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)


class SortOrderGroupCallParkGetAvailableUserPagedSortedList(OCIType):
    """
    Used to sort the GroupCallParkGetAvailableUserPagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)


class SortOrderGroupCallPickupGetAvailableUserPagedSortedList(OCIType):
    """
    Used to sort the GroupCallPickupGetAvailableUserPagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)


class SortOrderGroupCallPickupGetInstancePagedSorted(OCIType):
    """
    Used to sort the GroupCallPickupGetInstancePagedSortedRequest request.
    """

    ELEMENTS = (
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo("sort_by_dn", "sortByDn", SortByDn, True, True, False),
        ElementInfo(
            "sort_by_extension", "sortByExtension", SortByExtension, True, True, False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
    )
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_dn = Field(type=SortByDn, required=True)
    sort_by_extension = Field(type=SortByExtension, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)


class SortOrderGroupGetListInServiceProviderPagedSortedList(OCIType):
    """
    Used to sort the GroupGetListInServiceProviderPagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo(
            "sort_by_group_id", "sortByGroupId", SortByGroupId, True, True, False,
        ),
        ElementInfo(
            "sort_by_group_name", "sortByGroupName", SortByGroupName, True, True, False,
        ),
    )
    sort_by_group_id = Field(type=SortByGroupId, required=True)
    sort_by_group_name = Field(type=SortByGroupName, required=True)


class SortOrderGroupPhoneDirectoryGetPagedSortedList(OCIType):
    """
    Used to sort the GroupPhoneDirectoryGetPagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo(
            "sort_by_user_last_name",
            "sortByUserLastName",
            SortByUserLastName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_user_first_name",
            "sortByUserFirstName",
            SortByUserFirstName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_mobile_phone_number",
            "sortByMobilePhoneNumber",
            SortByMobilePhoneNumber,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_email_address",
            "sortByEmailAddress",
            SortByEmailAddress,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_department_name",
            "sortByDepartmentName",
            SortByDepartmentName,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_yahoo_id", "sortByYahooId", SortByYahooId, True, True, False,
        ),
        ElementInfo("sort_by_user_id", "sortByUserId", SortByUserId, True, True, False),
        ElementInfo("sort_by_imp_id", "sortByImpId", SortByImpId, True, True, False),
    )
    sort_by_user_last_name = Field(type=SortByUserLastName, required=True)
    sort_by_user_first_name = Field(type=SortByUserFirstName, required=True)
    sort_by_mobile_phone_number = Field(type=SortByMobilePhoneNumber, required=True)
    sort_by_email_address = Field(type=SortByEmailAddress, required=True)
    sort_by_department_name = Field(type=SortByDepartmentName, required=True)
    sort_by_yahoo_id = Field(type=SortByYahooId, required=True)
    sort_by_user_id = Field(type=SortByUserId, required=True)
    sort_by_imp_id = Field(type=SortByImpId, required=True)


class SortOrderServiceProviderGetPagedSortedList(OCIType):
    """
    Used to sort the ServiceProviderGetPagedSortedListRequest request.
    """

    ELEMENTS = (
        ElementInfo(
            "sort_by_service_provider_id",
            "sortByServiceProviderId",
            SortByServiceProviderId,
            True,
            True,
            False,
        ),
        ElementInfo(
            "sort_by_service_provider_name",
            "sortByServiceProviderName",
            SortByServiceProviderName,
            True,
            True,
            False,
        ),
    )
    sort_by_service_provider_id = Field(type=SortByServiceProviderId, required=True)
    sort_by_service_provider_name = Field(type=SortByServiceProviderName, required=True)


class SystemCollaborateGetResponse20sp1V2(OCIType):
    """
    Response to SystemCollaborateGetRequest20sp1V2.
    """

    ELEMENTS = (
        ElementInfo(
            "collaborate_room_id_length",
            "collaborateRoomIdLength",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "instant_room_idle_timeout_seconds",
            "instantRoomIdleTimeoutSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "collaborate_room_maximum_duration_minutes",
            "collaborateRoomMaximumDurationMinutes",
            int,
            False,
            True,
            False,
        ),
        ElementInfo("support_outdial", "supportOutdial", bool, False, True, False),
        ElementInfo(
            "max_collaborate_room_participants",
            "maxCollaborateRoomParticipants",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "collaborate_active_talker_refresh_interval_seconds",
            "collaborateActiveTalkerRefreshIntervalSeconds",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "terminate_collaborate_after_grace_period",
            "terminateCollaborateAfterGracePeriod",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "collaborate_grace_period",
            "collaborateGracePeriod",
            CollaborateGracePeriodDuration,
            True,
            True,
            False,
        ),
        ElementInfo(
            "enable_active_collaborate_notification",
            "enableActiveCollaborateNotification",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "collaborate_from_address",
            "collaborateFromAddress",
            str,
            False,
            False,
            False,
        ),
    )
    collaborate_room_id_length = Field(type=int, required=True)
    instant_room_idle_timeout_seconds = Field(type=int, required=True)
    collaborate_room_maximum_duration_minutes = Field(type=int, required=True)
    support_outdial = Field(type=bool, required=True)
    max_collaborate_room_participants = Field(type=int, required=True)
    collaborate_active_talker_refresh_interval_seconds = Field(type=int, required=True)
    terminate_collaborate_after_grace_period = Field(type=bool, required=True)
    collaborate_grace_period = Field(type=CollaborateGracePeriodDuration, required=True)
    enable_active_collaborate_notification = Field(type=bool, required=True)
    collaborate_from_address = Field(type=str, required=False)


class SystemCollaborateModifyRequest20sp1V2(OCIType):
    """
    Modify the system level data associated with collaborate services.
    The response is either a SuccessResponse or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo(
            "collaborate_room_id_length",
            "collaborateRoomIdLength",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "instant_room_idle_timeout_seconds",
            "instantRoomIdleTimeoutSeconds",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "collaborate_room_maximum_duration_minutes",
            "collaborateRoomMaximumDurationMinutes",
            int,
            False,
            False,
            False,
        ),
        ElementInfo("support_outdial", "supportOutdial", bool, False, False, False),
        ElementInfo(
            "max_collaborate_room_participants",
            "maxCollaborateRoomParticipants",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "collaborate_active_talker_refresh_interval_seconds",
            "collaborateActiveTalkerRefreshIntervalSeconds",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "terminate_collaborate_after_grace_period",
            "terminateCollaborateAfterGracePeriod",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "collaborate_grace_period",
            "collaborateGracePeriod",
            CollaborateGracePeriodDuration,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enable_active_collaborate_notification",
            "enableActiveCollaborateNotification",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "collaborate_from_address",
            "collaborateFromAddress",
            str,
            False,
            False,
            False,
        ),
    )
    collaborate_room_id_length = Field(type=int, required=False)
    instant_room_idle_timeout_seconds = Field(type=int, required=False)
    collaborate_room_maximum_duration_minutes = Field(type=int, required=False)
    support_outdial = Field(type=bool, required=False)
    max_collaborate_room_participants = Field(type=int, required=False)
    collaborate_active_talker_refresh_interval_seconds = Field(type=int, required=False)
    terminate_collaborate_after_grace_period = Field(type=bool, required=False)
    collaborate_grace_period = Field(
        type=CollaborateGracePeriodDuration, required=False,
    )
    enable_active_collaborate_notification = Field(type=bool, required=False)
    collaborate_from_address = Field(type=str, required=False)


class SystemCommunicationBarringProfileGetResponse19sp1V2(OCIType):
    """
    Response to the SystemCommunicationBarringProfileGetRequest19sp1V2.
    The response contains the Communication Barring Profile information.
    The incoming rules are returned in ascending priority order.
    The following elements are only used in AS data mode:
       callMeNowDefaultAction
       callMeNowDefaultCallTimeout
       callMeNowRule
           applyToAttendedCallTransfers
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo(
            "originating_default_action",
            "originatingDefaultAction",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "originating_default_treatment_id",
            "originatingDefaultTreatmentId",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "originating_default_transfer_number",
            "originatingDefaultTransferNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "originating_default_call_timeout",
            "originatingDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "originating_rule",
            "originatingRule",
            CommunicationBarringOriginatingRule,
            True,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_default_action",
            "redirectingDefaultAction",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "redirecting_default_call_timeout",
            "redirectingDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "redirecting_rule",
            "redirectingRule",
            CommunicationBarringRedirectingRule,
            True,
            False,
            False,
        ),
        ElementInfo(
            "incoming_default_action", "incomingDefaultAction", str, False, True, False,
        ),
        ElementInfo(
            "incoming_default_call_timeout",
            "incomingDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "incoming_rule",
            "incomingRule",
            CommunicationBarringIncomingRule19sp1,
            True,
            False,
            False,
        ),
        ElementInfo(
            "call_me_now_default_action",
            "callMeNowDefaultAction",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "call_me_now_default_call_timeout",
            "callMeNowDefaultCallTimeout",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_me_now_rule",
            "callMeNowRule",
            CommunicationBarringCallMeNowRule,
            True,
            False,
            False,
        ),
        ElementInfo(
            "apply_to_attended_call_transfers",
            "applyToAttendedCallTransfers",
            bool,
            False,
            True,
            False,
        ),
    )
    description = Field(type=str, required=False)
    originating_default_action = Field(type=str, required=True)
    originating_default_treatment_id = Field(type=str, required=False)
    originating_default_transfer_number = Field(type=str, required=False)
    originating_default_call_timeout = Field(type=int, required=False)
    originating_rule = Field(type=CommunicationBarringOriginatingRule, required=False)
    redirecting_default_action = Field(type=str, required=True)
    redirecting_default_call_timeout = Field(type=int, required=False)
    redirecting_rule = Field(type=CommunicationBarringRedirectingRule, required=False)
    incoming_default_action = Field(type=str, required=True)
    incoming_default_call_timeout = Field(type=int, required=False)
    incoming_rule = Field(type=CommunicationBarringIncomingRule19sp1, required=False)
    call_me_now_default_action = Field(type=str, required=True)
    call_me_now_default_call_timeout = Field(type=int, required=False)
    call_me_now_rule = Field(type=CommunicationBarringCallMeNowRule, required=False)
    apply_to_attended_call_transfers = Field(type=bool, required=True)


class TrunkAddressingAdd(OCIType):
    """
    Trunk group endpoint.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceEndpointAdd,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceEndpointAdd, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)


class TrunkAddressingModify(OCIType):
    """
    Trunk group endpoint.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceEndpointModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceEndpointModify, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)


class TrunkAddressingMultipleContactAdd(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    alternateTrunkIdentityDomain is only used in XS mode.
    Both alternateTrunkIdentity and AlternateTrunkIdentityDomain should be set at the
    same time if one is set in XS mode.
    The following elements are only used in AS data mode and are ignored in XS data
    mode:
     physicalLocation
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointAdd,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "alternate_trunk_identity_domain",
            "alternateTrunkIdentityDomain",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointAdd, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)
    alternate_trunk_identity_domain = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)


class TrunkAddressingMultipleContactRead(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    Replaced by: TrunkAddressingMultipleContactRead21
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointRead,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointRead, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)


class TrunkAddressingMultipleContactRead21(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    alternateTrunkIdentityDomain is only used in XS mode.
    The following elements are only used in AS data mode and ignored in XS data mode:
      alternateTrunkIdentityDomain
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointRead,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "alternate_trunk_identity_domain",
            "alternateTrunkIdentityDomain",
            str,
            False,
            False,
            False,
        ),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointRead, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)
    alternate_trunk_identity_domain = Field(type=str, required=False)


class TrunkAddressingMultipleContactRead21sp1(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    alternateTrunkIdentityDomain is only used in AS mode in IMS.
    The following elements are only used in AS data mode and are ignored in XS data mode:
      physicalLocation
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointRead,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "alternate_trunk_identity_domain",
            "alternateTrunkIdentityDomain",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointRead, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)
    alternate_trunk_identity_domain = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)


class TrunkAddressingRead(OCIType):
    """
    Trunk group endpoint.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceEndpointRead14sp4,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceEndpointRead14sp4, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)


class TrunkGroupDeviceMultipleContactEndpointAdd22(OCIType):
    """
    Trunk group device endpoint used in the context of modify that can have multiple contacts.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
    )
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=SIPContactInfo, required=False)


class TrunkGroupDeviceMultipleContactEndpointModify(OCIType):
    """
    Trunk group device endpoint used in the context of modify that can have multiple contacts.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo(
            "contact_list", "contactList", ReplacementContactList, True, False, False,
        ),
    )
    name = Field(type=str, required=False)
    line_port = Field(type=str, required=False)
    contact_list = Field(type=ReplacementContactList, required=False)


class TrunkGroupDeviceMultipleContactEndpointRead22(OCIType):
    """
    Trunk group device endpoint that can have multiple contacts.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("use_domain", "useDomain", bool, False, True, False),
        ElementInfo("is_pilot_user", "isPilotUser", bool, False, True, False),
    )
    name = Field(type=str, required=True)
    line_port = Field(type=str, required=True)
    contact = Field(type=SIPContactInfo, required=False)
    static_registration_capable = Field(type=bool, required=True)
    use_domain = Field(type=bool, required=True)
    is_pilot_user = Field(type=bool, required=True)


class TrunkGroupMultipleContactPilotUser(OCIType):
    """
    Trunk Group pilot user information used when adding a Trunk Group.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("last_name", "lastName", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    user_id = Field(type=str, required=True)
    last_name = Field(type=str, required=True)
    first_name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class TrunkGroupMultipleContactPilotUser22(OCIType):
    """
    Trunk Group pilot user information used when adding a Trunk Group.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("last_name", "lastName", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", SIPContactInfo, True, False, False),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
    )
    user_id = Field(type=str, required=True)
    last_name = Field(type=str, required=True)
    first_name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    line_port = Field(type=str, required=True)
    contact = Field(type=SIPContactInfo, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)


class TrunkGroupPilotUser(OCIType):
    """
    Trunk Group pilot user information used when adding a Trunk Group.
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("last_name", "lastName", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("password", "password", str, False, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("language", "language", str, False, False, False),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo("line_port", "linePort", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
    )
    user_id = Field(type=str, required=True)
    last_name = Field(type=str, required=True)
    first_name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    password = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    language = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    line_port = Field(type=str, required=True)
    contact = Field(type=str, required=False)


class UserServiceAuthorization(OCIType):
    """
    Authorize (with quantity) or unauthorize a user service.
    """

    ELEMENTS = (
        ElementInfo("service_name", "serviceName", str, False, True, False),
        ElementInfo(
            "authorized_quantity",
            "authorizedQuantity",
            UnboundedPositiveInt,
            True,
            True,
            False,
        ),
        ElementInfo("unauthorized", "unauthorized", bool, False, True, False),
    )
    service_name = Field(type=str, required=True)
    authorized_quantity = Field(type=UnboundedPositiveInt, required=True)
    unauthorized = Field(type=bool, required=True)


class VerifyTranslationAndRoutingParameters(OCIType):
    """
    Verification Translation and Routing parameters
    for creating a Verify Translation and Routing request from
    parameters.
    """

    ELEMENTS = (
        ElementInfo(
            "origination",
            "origination",
            VerifyTranslationAndRoutingOrigination,
            True,
            True,
            False,
        ),
        ElementInfo("destination", "destination", str, False, True, False),
        ElementInfo("contact", "contact", str, False, False, False),
        ElementInfo("diversion", "diversion", str, False, False, False),
    )
    origination = Field(type=VerifyTranslationAndRoutingOrigination, required=True)
    destination = Field(type=str, required=True)
    contact = Field(type=str, required=False)
    diversion = Field(type=str, required=False)


class VirtualOnNetUserRange(OCIType):
    """
    Virtual On-Net User Range.
    """

    ELEMENTS = (
        ElementInfo("dn_range", "dnRange", DNRange, True, True, False),
        ElementInfo(
            "extension_range", "extensionRange", ExtensionRange17, True, True, False,
        ),
        ElementInfo("first_name", "firstName", str, False, True, False),
        ElementInfo("last_name", "lastName", str, False, True, False),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "virtual_on_net_call_type_name",
            "virtualOnNetCallTypeName",
            str,
            False,
            True,
            False,
        ),
    )
    dn_range = Field(type=DNRange, required=True)
    extension_range = Field(type=ExtensionRange17, required=True)
    first_name = Field(type=str, required=True)
    last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    virtual_on_net_call_type_name = Field(type=str, required=True)


class VoiceMessagingAlternateNoAnswerGreetingModify(OCIType):
    """
    The configuration of a alternate no answer greeting.
    It is used when modifying a user's voice messaging greeting.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo("audio_file", "audioFile", LabeledFileResource, True, False, False),
        ElementInfo("video_file", "videoFile", LabeledFileResource, True, False, False),
    )
    name = Field(type=str, required=False)
    audio_file = Field(type=LabeledFileResource, required=False)
    video_file = Field(type=LabeledFileResource, required=False)


class VoiceMessagingAlternateNoAnswerGreetingModify16(OCIType):
    """
    The configuration of a alternate no answer
    greeting.
    It is used when modifying a user's voice
    messaging
    greeting.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", LabeledMediaFileResource, True, False, False,
        ),
    )
    name = Field(type=str, required=False)
    audio_file = Field(type=LabeledMediaFileResource, required=False)
    video_file = Field(type=LabeledMediaFileResource, required=False)


class VoiceMessagingAlternateNoAnswerGreetingModify20(OCIType):
    """
    The configuration of a alternate no answer greeting.
    It is used when modifying a user's voice messaging greeting.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
    )
    name = Field(type=str, required=False)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)


class VoiceMessagingAlternateNoAnswerGreetingRead20(OCIType):
    """
    The configuration of a alternate no answer greeting.
    It is used when geting a user's voice messaging greeting.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
    )
    name = Field(type=str, required=True)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)


class VoiceMessagingDistributionListModify(OCIType):
    """
    A list of voice mail distribution lists
    It is used when setting a user's voice messaging distribution lists
    """

    ELEMENTS = (
        ElementInfo("list_id", "listId", int, False, True, False),
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo(
            "phone_number_list",
            "phoneNumberList",
            ReplacementOutgoingDNorSIPURIList,
            True,
            False,
            False,
        ),
    )
    list_id = Field(type=int, required=True)
    description = Field(type=str, required=False)
    phone_number_list = Field(type=ReplacementOutgoingDNorSIPURIList, required=False)


class AccessDeviceMultipleContactEndpointModify22(OCIType):
    """
    Access device end point used in the context of modify that can have more than one
    contact defined.
    Only Static Registration capable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo(
            "contact_list", "contactList", ReplacementContactList22, True, False, False,
        ),
        ElementInfo("port_number", "portNumber", int, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=False)
    line_port = Field(type=str, required=False)
    contact_list = Field(type=ReplacementContactList22, required=False)
    port_number = Field(type=int, required=False)


class AccessDeviceMultipleIdentityAndContactEndpointModify22(OCIType):
    """
    Access device end point used in the context of modify that can have more than one
    contact defined.
    The endpoint is identified by its linePort (public Identity) and possibly a
    private Identity.
    Only Static Registration capable devices may have more than one contact defined.
    Port numbers are only used by devices with static line ordering.
    The following elements are only used in XS data mode and ignored in AS data mode:
      privateIdentity
    The following elements are only used in AS data mode and ignored in XS data mode:
      useHotline
      hotlineContact
    """

    ELEMENTS = (
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo("private_identity", "privateIdentity", str, False, False, False),
        ElementInfo(
            "contact_list", "contactList", ReplacementContactList22, True, False, False,
        ),
        ElementInfo("port_number", "portNumber", int, False, False, False),
        ElementInfo("use_hotline", "useHotline", bool, False, False, False),
        ElementInfo("hotline_contact", "hotlineContact", str, False, False, False),
    )
    access_device = Field(type=AccessDevice, required=False)
    line_port = Field(type=str, required=False)
    private_identity = Field(type=str, required=False)
    contact_list = Field(type=ReplacementContactList22, required=False)
    port_number = Field(type=int, required=False)
    use_hotline = Field(type=bool, required=False)
    hotline_contact = Field(type=str, required=False)


class AutoAttendantKeyConfiguration(OCIType):
    """
    The configuration of a key for Auto Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry", "entry", AutoAttendantKeyConfigurationEntry, True, True, False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationEntry, required=True)


class AutoAttendantKeyConfiguration19(OCIType):
    """
    The configuration of a key for Auto Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry", "entry", AutoAttendantKeyConfigurationEntry19, True, True, False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationEntry19, required=True)


class AutoAttendantKeyConfiguration20(OCIType):
    """
    The configuration of a key for Auto Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry", "entry", AutoAttendantKeyConfigurationEntry20, True, True, False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationEntry20, required=True)


class AutoAttendantKeyModifyConfiguration(OCIType):
    """
    The modify configuration of a key for Auto
    Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry",
            "entry",
            AutoAttendantKeyConfigurationModifyEntry,
            True,
            True,
            False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationModifyEntry, required=True)


class AutoAttendantKeyModifyConfiguration20(OCIType):
    """
    The modify configuration of a key for Auto Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry",
            "entry",
            AutoAttendantKeyConfigurationModifyEntry20,
            True,
            True,
            False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationModifyEntry20, required=True)


class AutoAttendantKeyReadConfiguration20(OCIType):
    """
    The read configuration of a key for Auto Attendant.
    """

    ELEMENTS = (
        ElementInfo("key", "key", str, False, True, False),
        ElementInfo(
            "entry",
            "entry",
            AutoAttendantKeyConfigurationReadEntry20,
            True,
            True,
            False,
        ),
    )
    key = Field(type=str, required=True)
    entry = Field(type=AutoAttendantKeyConfigurationReadEntry20, required=True)


class AutoAttendantReadMenu19(OCIType):
    """
    The configuration of the automated receptionist
    greeting
    prompt and dialing menu to be used during
    after business
    hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo(
            "audio_file_description", "audioFileDescription", str, False, False, False,
        ),
        ElementInfo("audio_media_type", "audioMediaType", str, False, False, False),
        ElementInfo(
            "video_file_description", "videoFileDescription", str, False, False, False,
        ),
        ElementInfo("video_media_type", "videoMediaType", str, False, False, False),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyReadConfiguration19,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file_description = Field(type=str, required=False)
    audio_media_type = Field(type=str, required=False)
    video_file_description = Field(type=str, required=False)
    video_media_type = Field(type=str, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyReadConfiguration19, required=False)


class CPEDeviceModifyOptions(OCIType):
    """
    CPE device's options when used with a modify request.
    The following options are not changeable:
      configType
      systemFileName
      deviceFileFormat
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, False, False),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeModifyOptions,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=False)
    reset_event = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeModifyOptions, required=False,
    )


class CPEDeviceModifyOptions16(OCIType):
    """
    CPE device's options when used with a modify request.
    The following options are not changeable:
      configType
      systemFileName
      deviceFileFormat
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, False, False),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeModifyOptions16,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=False)
    reset_event = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeModifyOptions16, required=False,
    )


class CPEDeviceModifyOptions16sp1(OCIType):
    """
    CPE device's options when used with a modify request.
    The following options are not changeable:
      configType
      systemFileName
      deviceFileFormat
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeModifyOptions16,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeModifyOptions16, required=False,
    )


class CPEDeviceModifyOptions22(OCIType):
    """
    CPE device's options when used with a modify request.
    The following options are not changeable:
      configType
      systemFileName
      deviceFileFormat
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeModifyOptions22,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeModifyOptions22, required=False,
    )


class CPEDeviceOptions14sp6(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo("config_type", "configType", str, False, True, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptions,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    config_type = Field(type=str, required=True)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptions, required=False,
    )


class CPEDeviceOptions16(OCIType):
    """
    CPE device's options.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo("config_type", "configType", str, False, True, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptions16,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    config_type = Field(type=str, required=True)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptions16, required=False,
    )


class CPEDeviceOptions16sp1(OCIType):
    """
    CPE device's options.

        The field configType is optional to allow the use of field enableMonitoring
    for all device types being managed or not
        ie. device configuration option equals to DeviceManagement, or Legacy, or Not
    Supported).

        If the device configuration option is set to "Not Supported", the value of
    configType is forced set to "None" regardless
        of its current value.

        It is not allowed to add a device type with device configuration option set
    to Device Management or Legacy when the configType
        is not set.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptions16,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptions16, required=False,
    )


class CPEDeviceOptions21sp1(OCIType):
    """
    CPE device's options.

        The field configType is optional to allow the use of field enableMonitoring
    for all device types being managed or not
        ie. device configuration option equals to DeviceManagement, or Legacy, or Not
    Supported).

        If the device configuration option is set to "Not Supported", the value of
    configType is forced set to "None" regardless
        of its current value.

        It is not allowed to add a device type with device configuration option set
    to Device Management or Legacy when the configType
        is not set.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptions21sp1,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptions21sp1, required=False,
    )


class CPEDeviceOptions22(OCIType):
    """
    CPE device's options.

        The field configType is optional to allow the use of field enableMonitoring
    for all device types being managed or not
        ie. device configuration option equals to DeviceManagement, or Legacy, or Not
    Supported).

        If the device configuration option is set to "Not Supported", the value of
    configType is forced set to "None" regardless
        of its current value.

        It is not allowed to add a device type with device configuration option set
    to Device Management or Legacy when the configType
        is not set.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptions22,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptions22, required=False,
    )


class CPEDeviceOptions22V2(OCIType):
    """
    CPE device's options.

    The field configType is optional to allow the use of field enableMonitoring for
    all device types being managed or not
    ie. device configuration option equals to DeviceManagement, or Legacy, or Not Supported).

    If the device configuration option is set to "Not Supported", the value of
    configType is forced set to "None" regardless
    of its current value.

    It is not allowed to add a device type with device configuration option set to
    Device Management or Legacy when the configType
    is not set.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptions22V2,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptions22V2, required=False,
    )


class CPEDeviceOptions22V3(OCIType):
    """
    CPE device's options.

        The field configType is optional to allow the use of field enableMonitoring
    for all device types being managed or not
        ie. device configuration option equals to DeviceManagement, or Legacy, or Not
    Supported).

        If the device configuration option is set to "Not Supported", the value of
    configType is forced set to "None" regardless
        of its current value.

        It is not allowed to add a device type with device configuration option set
    to Device Management or Legacy when the configType
        is not set.
    """

    ELEMENTS = (
        ElementInfo("enable_monitoring", "enableMonitoring", bool, False, True, False),
        ElementInfo("config_type", "configType", str, False, False, False),
        ElementInfo("system_file_name", "systemFileName", str, False, False, False),
        ElementInfo("device_file_format", "deviceFileFormat", str, False, False, False),
        ElementInfo(
            "device_management_device_type_options",
            "deviceManagementDeviceTypeOptions",
            DeviceManagementDeviceTypeOptions22V3,
            True,
            False,
            False,
        ),
    )
    enable_monitoring = Field(type=bool, required=True)
    config_type = Field(type=str, required=False)
    system_file_name = Field(type=str, required=False)
    device_file_format = Field(type=str, required=False)
    device_management_device_type_options = Field(
        type=DeviceManagementDeviceTypeOptions22V3, required=False,
    )


class CallCenterMediaOnHoldSourceModify16(OCIType):
    """
    Contains the call center media on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "audio_file", "audioFile", ExtendedMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "video_file", "videoFile", ExtendedMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointModify,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=False)
    audio_file = Field(type=ExtendedMediaFileResource, required=False)
    external_audio_source = Field(type=AccessDeviceEndpointModify, required=False)
    video_message_source_selection = Field(type=str, required=False)
    video_file = Field(type=ExtendedMediaFileResource, required=False)
    external_video_source = Field(type=AccessDeviceEndpointModify, required=False)


class CallCenterMediaOnHoldSourceModify17(OCIType):
    """
    Contains the call center media on hold source
    configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "audio_url_list",
            "audioUrlList",
            CallCenterAnnouncementURLListModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_file_list",
            "audioFileList",
            CallCenterAnnouncementFileListModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "video_url_list",
            "videoUrlList",
            CallCenterAnnouncementURLListModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_file_list",
            "videoFileList",
            CallCenterAnnouncementFileListModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointModify,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=False)
    audio_url_list = Field(type=CallCenterAnnouncementURLListModify, required=False)
    audio_file_list = Field(type=CallCenterAnnouncementFileListModify, required=False)
    external_audio_source = Field(type=AccessDeviceEndpointModify, required=False)
    video_message_source_selection = Field(type=str, required=False)
    video_url_list = Field(type=CallCenterAnnouncementURLListModify, required=False)
    video_file_list = Field(type=CallCenterAnnouncementFileListModify, required=False)
    external_video_source = Field(type=AccessDeviceEndpointModify, required=False)


class CallCenterMediaOnHoldSourceModify20(OCIType):
    """
    Contains the call center media on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "audio_url_list",
            "audioUrlList",
            CallCenterAnnouncementURLListModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_file_list",
            "audioFileList",
            CallCenterAnnouncementFileListModify20,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "video_url_list",
            "videoUrlList",
            CallCenterAnnouncementURLListModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_file_list",
            "videoFileList",
            CallCenterAnnouncementFileListModify20,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointModify,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=False)
    audio_url_list = Field(type=CallCenterAnnouncementURLListModify, required=False)
    audio_file_list = Field(type=CallCenterAnnouncementFileListModify20, required=False)
    external_audio_source = Field(type=AccessDeviceEndpointModify, required=False)
    video_message_source_selection = Field(type=str, required=False)
    video_url_list = Field(type=CallCenterAnnouncementURLListModify, required=False)
    video_file_list = Field(type=CallCenterAnnouncementFileListModify20, required=False)
    external_video_source = Field(type=AccessDeviceEndpointModify, required=False)


class CallCenterMediaOnHoldSourceRead16(OCIType):
    """
    Contains the call center media on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("audio_file_url", "audioFileUrl", str, False, False, False),
        ElementInfo(
            "audio_file_description", "audioFileDescription", str, False, False, False,
        ),
        ElementInfo(
            "audio_file_media_type", "audioFileMediaType", str, False, False, False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointRead14,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("video_file_url", "videoFileUrl", str, False, False, False),
        ElementInfo(
            "video_file_description", "videoFileDescription", str, False, False, False,
        ),
        ElementInfo(
            "video_file_media_type", "videoFileMediaType", str, False, False, False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointRead14,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=True)
    audio_file_url = Field(type=str, required=False)
    audio_file_description = Field(type=str, required=False)
    audio_file_media_type = Field(type=str, required=False)
    external_audio_source = Field(type=AccessDeviceEndpointRead14, required=False)
    video_message_source_selection = Field(type=str, required=False)
    video_file_url = Field(type=str, required=False)
    video_file_description = Field(type=str, required=False)
    video_file_media_type = Field(type=str, required=False)
    external_video_source = Field(type=AccessDeviceEndpointRead14, required=False)


class CallCenterMediaOnHoldSourceRead17(OCIType):
    """
    Contains the call center media on hold source configuration.

        Replaced by: CallCenterMediaOnHoldSourceRead19.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "audio_url_list",
            "audioUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_file_list",
            "audioFileList",
            CallCenterAnnouncementDescriptionList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_media_type_list",
            "audioMediaTypeList",
            CallCenterAnnouncementMediaFileTypeList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointRead14,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "video_url_list",
            "videoUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_file_list",
            "videoFileList",
            CallCenterAnnouncementDescriptionList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_media_type_list",
            "videoMediaTypeList",
            CallCenterAnnouncementMediaFileTypeList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointRead14,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=True)
    audio_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    audio_file_list = Field(type=CallCenterAnnouncementDescriptionList, required=False)
    audio_media_type_list = Field(
        type=CallCenterAnnouncementMediaFileTypeList, required=False,
    )
    external_audio_source = Field(type=AccessDeviceEndpointRead14, required=False)
    video_message_source_selection = Field(type=str, required=False)
    video_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    video_file_list = Field(type=CallCenterAnnouncementDescriptionList, required=False)
    video_media_type_list = Field(
        type=CallCenterAnnouncementMediaFileTypeList, required=False,
    )
    external_video_source = Field(type=AccessDeviceEndpointRead14, required=False)


class CallCenterMediaOnHoldSourceRead19(OCIType):
    """
    Contains the call center media on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "audio_url_list",
            "audioUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_file_list",
            "audioFileList",
            CallCenterAnnouncementDescriptionList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_media_type_list",
            "audioMediaTypeList",
            CallCenterAnnouncementMediaFileTypeList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointWithPortNumberRead,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "video_url_list",
            "videoUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_file_list",
            "videoFileList",
            CallCenterAnnouncementDescriptionList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_media_type_list",
            "videoMediaTypeList",
            CallCenterAnnouncementMediaFileTypeList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointWithPortNumberRead,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=True)
    audio_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    audio_file_list = Field(type=CallCenterAnnouncementDescriptionList, required=False)
    audio_media_type_list = Field(
        type=CallCenterAnnouncementMediaFileTypeList, required=False,
    )
    external_audio_source = Field(
        type=AccessDeviceEndpointWithPortNumberRead, required=False,
    )
    video_message_source_selection = Field(type=str, required=False)
    video_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    video_file_list = Field(type=CallCenterAnnouncementDescriptionList, required=False)
    video_media_type_list = Field(
        type=CallCenterAnnouncementMediaFileTypeList, required=False,
    )
    external_video_source = Field(
        type=AccessDeviceEndpointWithPortNumberRead, required=False,
    )


class CallCenterMediaOnHoldSourceRead20(OCIType):
    """
    Contains the call center media on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "audio_url_list",
            "audioUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_file_list",
            "audioFileList",
            CallCenterAnnouncementFileListRead20,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointWithPortNumberRead,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "video_url_list",
            "videoUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_file_list",
            "videoFileList",
            CallCenterAnnouncementFileListRead20,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointWithPortNumberRead,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=True)
    audio_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    audio_file_list = Field(type=CallCenterAnnouncementFileListRead20, required=False)
    external_audio_source = Field(
        type=AccessDeviceEndpointWithPortNumberRead, required=False,
    )
    video_message_source_selection = Field(type=str, required=False)
    video_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    video_file_list = Field(type=CallCenterAnnouncementFileListRead20, required=False)
    external_video_source = Field(
        type=AccessDeviceEndpointWithPortNumberRead, required=False,
    )


class CallCenterMediaOnHoldSourceRead22(OCIType):
    """
    Contains the call center media on hold source configuration.
    """

    ELEMENTS = (
        ElementInfo(
            "audio_message_source_selection",
            "audioMessageSourceSelection",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "audio_url_list",
            "audioUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "audio_file_list",
            "audioFileList",
            CallCenterAnnouncementFileListRead20,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_audio_source",
            "externalAudioSource",
            AccessDeviceEndpointWithPortNumberRead22,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_message_source_selection",
            "videoMessageSourceSelection",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "video_url_list",
            "videoUrlList",
            CallCenterAnnouncementURLList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "video_file_list",
            "videoFileList",
            CallCenterAnnouncementFileListRead20,
            True,
            False,
            False,
        ),
        ElementInfo(
            "external_video_source",
            "externalVideoSource",
            AccessDeviceEndpointWithPortNumberRead22,
            True,
            False,
            False,
        ),
    )
    audio_message_source_selection = Field(type=str, required=True)
    audio_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    audio_file_list = Field(type=CallCenterAnnouncementFileListRead20, required=False)
    external_audio_source = Field(
        type=AccessDeviceEndpointWithPortNumberRead22, required=False,
    )
    video_message_source_selection = Field(type=str, required=False)
    video_url_list = Field(type=CallCenterAnnouncementURLList, required=False)
    video_file_list = Field(type=CallCenterAnnouncementFileListRead20, required=False)
    external_video_source = Field(
        type=AccessDeviceEndpointWithPortNumberRead22, required=False,
    )


class CallCenterReportInterval(OCIType):
    """
    Report interval for call center enhanced reporting scheduled reports.
    """

    ELEMENTS = (
        ElementInfo("dates", "dates", CallCenterReportIntervalDates, True, True, False),
        ElementInfo(
            "current", "current", CallCenterReportCurrentInterval, True, True, False,
        ),
        ElementInfo("past", "past", CallCenterReportPastInterval, True, True, False),
    )
    dates = Field(type=CallCenterReportIntervalDates, required=True)
    current = Field(type=CallCenterReportCurrentInterval, required=True)
    past = Field(type=CallCenterReportPastInterval, required=True)


class CallCenterReportSchedule(OCIType):
    """
    A schedule for call center enhanced reporting scheduled report. It can either be
    a fixed time schedule
    or recurring schedule
    """

    ELEMENTS = (
        ElementInfo(
            "schedule_time",
            "scheduleTime",
            CallCenterReportScheduleTime,
            True,
            True,
            False,
        ),
        ElementInfo(
            "recurrence",
            "recurrence",
            CallCenterReportScheduleRecurrence,
            True,
            True,
            False,
        ),
    )
    schedule_time = Field(type=CallCenterReportScheduleTime, required=True)
    recurrence = Field(type=CallCenterReportScheduleRecurrence, required=True)


class CommPilotExpressSRNoAnswer(OCIType):
    """
    CommPilot Express SR No Answer Settings used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "ring_forward_numbers", "ringForwardNumbers", bool, False, True, False,
        ),
        ElementInfo(
            "forwarding_number_list",
            "forwardingNumberList",
            CommPilotExpressSRRedirectionWithRingList,
            True,
            True,
            False,
        ),
        ElementInfo(
            "still_no_answer",
            "stillNoAnswer",
            CommPilotExpressSRRedirection,
            True,
            True,
            False,
        ),
    )
    ring_forward_numbers = Field(type=bool, required=True)
    forwarding_number_list = Field(
        type=CommPilotExpressSRRedirectionWithRingList, required=True,
    )
    still_no_answer = Field(type=CommPilotExpressSRRedirection, required=True)


class CommPilotExpressSRNoAnswerModify(OCIType):
    """
    CommPilot Express SR No Answer Settings used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "ring_foward_numbers", "ringFowardNumbers", bool, False, False, False,
        ),
        ElementInfo(
            "forwarding_number_list",
            "forwardingNumberList",
            CommPilotExpressSRRedirectionWithRingList,
            True,
            False,
            False,
        ),
        ElementInfo(
            "still_no_answer",
            "stillNoAnswer",
            CommPilotExpressSRRedirectionModify,
            True,
            False,
            False,
        ),
    )
    ring_foward_numbers = Field(type=bool, required=False)
    forwarding_number_list = Field(
        type=CommPilotExpressSRRedirectionWithRingList, required=False,
    )
    still_no_answer = Field(type=CommPilotExpressSRRedirectionModify, required=False)


class ConsolidatedGroupProperties(OCIType):
    ELEMENTS = (
        ElementInfo("default_domain", "defaultDomain", str, False, True, False),
        ElementInfo("user_limit", "userLimit", int, False, True, False),
        ElementInfo("group_name", "groupName", str, False, False, False),
        ElementInfo(
            "calling_line_id_name", "callingLineIdName", str, False, False, False,
        ),
        ElementInfo("time_zone", "timeZone", str, False, False, False),
        ElementInfo(
            "location_dialing_code", "locationDialingCode", str, False, False, False,
        ),
        ElementInfo("contact", "contact", Contact, True, False, False),
        ElementInfo("address", "address", StreetAddress, True, False, False),
        ElementInfo(
            "network_class_of_service",
            "networkClassOfService",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "default_network_class_of_service",
            "defaultNetworkClassOfService",
            DefaultNetworkClassOfService,
            True,
            False,
            False,
        ),
        ElementInfo(
            "group_service",
            "groupService",
            ConsolidatedGroupServiceAssignment,
            True,
            False,
            False,
        ),
        ElementInfo("service_policy", "servicePolicy", str, False, False, False),
    )
    default_domain = Field(type=str, required=True)
    user_limit = Field(type=int, required=True)
    group_name = Field(type=str, required=False)
    calling_line_id_name = Field(type=str, required=False)
    time_zone = Field(type=str, required=False)
    location_dialing_code = Field(type=str, required=False)
    contact = Field(type=Contact, required=False)
    address = Field(type=StreetAddress, required=False)
    network_class_of_service = Field(type=str, required=False)
    default_network_class_of_service = Field(
        type=DefaultNetworkClassOfService, required=False,
    )
    group_service = Field(type=ConsolidatedGroupServiceAssignment, required=False)
    service_policy = Field(type=str, required=False)


class EnterpriseSessionAdmissionControlGroupGetResponse21sp1V2(OCIType):
    """
    Response to EnterpriseSessionAdmissionControlGroupGetRequest21sp1V2.
    Returns the profile information for the session admission control group.
    """

    ELEMENTS = (
        ElementInfo("max_session", "maxSession", int, False, True, False),
        ElementInfo(
            "max_user_originating_sessions",
            "maxUserOriginatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "max_user_terminating_sessions",
            "maxUserTerminatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo("reserved_session", "reservedSession", int, False, True, False),
        ElementInfo(
            "reserved_user_originating_sessions",
            "reservedUserOriginatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "reserved_user_terminating_sessions",
            "reservedUserTerminatingSessions",
            int,
            False,
            False,
            False,
        ),
        ElementInfo("default_group", "defaultGroup", bool, False, True, False),
        ElementInfo(
            "count_intra_sac_group_sessions",
            "countIntraSACGroupSessions",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("devices", "devices", EnterpriseAccessDevice, True, False, False),
        ElementInfo(
            "block_emergency_and_repair_calls_due_to_sac_limits",
            "blockEmergencyAndRepairCallsDueToSACLimits",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("media_group_name", "mediaGroupName", str, False, False, False),
        ElementInfo(
            "access_info_pattern", "accessInfoPattern", str, False, False, False,
        ),
    )
    max_session = Field(type=int, required=True)
    max_user_originating_sessions = Field(type=int, required=False)
    max_user_terminating_sessions = Field(type=int, required=False)
    reserved_session = Field(type=int, required=True)
    reserved_user_originating_sessions = Field(type=int, required=False)
    reserved_user_terminating_sessions = Field(type=int, required=False)
    default_group = Field(type=bool, required=True)
    count_intra_sac_group_sessions = Field(type=bool, required=True)
    devices = Field(type=EnterpriseAccessDevice, required=False)
    block_emergency_and_repair_calls_due_to_sac_limits = Field(type=bool, required=True)
    media_group_name = Field(type=str, required=False)
    access_info_pattern = Field(type=str, required=False)


class GroupHuntGroupAddInstanceRequest17sp1V1(OCIType):
    """
    Add a Hunt Group instance to a group.
    The domain is required in the serviceUserId.
    The response is either SuccessResponse or ErrorResponse.
    The following elements are only used in XS data mode:
       allowMembersToControlGroupBusy, use value "false" in AS data mode
       enableGroupBusy, use value "false" in AS data mode
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("service_user_id", "serviceUserId", str, False, True, False),
        ElementInfo(
            "service_instance_profile",
            "serviceInstanceProfile",
            ServiceInstanceAddProfile,
            True,
            True,
            False,
        ),
        ElementInfo("policy", "policy", str, False, True, False),
        ElementInfo(
            "hunt_after_no_answer", "huntAfterNoAnswer", bool, False, True, False,
        ),
        ElementInfo(
            "no_answer_number_of_rings",
            "noAnswerNumberOfRings",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "forward_after_timeout", "forwardAfterTimeout", bool, False, True, False,
        ),
        ElementInfo(
            "forward_timeout_seconds", "forwardTimeoutSeconds", int, False, True, False,
        ),
        ElementInfo(
            "forward_to_phone_number", "forwardToPhoneNumber", str, False, False, False,
        ),
        ElementInfo("agent_user_id", "agentUserId", str, False, False, False),
        ElementInfo(
            "allow_call_waiting_for_agents",
            "allowCallWaitingForAgents",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_members_to_control_group_busy",
            "allowMembersToControlGroupBusy",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("enable_group_busy", "enableGroupBusy", bool, False, True, False),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    service_user_id = Field(type=str, required=True)
    service_instance_profile = Field(type=ServiceInstanceAddProfile, required=True)
    policy = Field(type=str, required=True)
    hunt_after_no_answer = Field(type=bool, required=True)
    no_answer_number_of_rings = Field(type=int, required=True)
    forward_after_timeout = Field(type=bool, required=True)
    forward_timeout_seconds = Field(type=int, required=True)
    forward_to_phone_number = Field(type=str, required=False)
    agent_user_id = Field(type=str, required=False)
    allow_call_waiting_for_agents = Field(type=bool, required=True)
    allow_members_to_control_group_busy = Field(type=bool, required=True)
    enable_group_busy = Field(type=bool, required=True)


class GroupHuntGroupGetInstanceResponse17sp1V1(OCIType):
    """
    Response to GroupHuntGroupGetInstanceRequest17sp1V1.
    Contains the service profile information and a table of assigned users.
    The table has column headings: "User Id", "Last Name", "First Name",
    "Hiragana Last Name", "Hiragana First Name", "Weight".
    The following elements are only used in XS data mode:
       allowMembersToControlGroupBusy
       enableGroupBusy
    """

    ELEMENTS = (
        ElementInfo(
            "service_instance_profile",
            "serviceInstanceProfile",
            ServiceInstanceReadProfile17,
            True,
            True,
            False,
        ),
        ElementInfo("policy", "policy", str, False, True, False),
        ElementInfo(
            "hunt_after_no_answer", "huntAfterNoAnswer", bool, False, True, False,
        ),
        ElementInfo(
            "no_answer_number_of_rings",
            "noAnswerNumberOfRings",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "forward_after_timeout", "forwardAfterTimeout", bool, False, True, False,
        ),
        ElementInfo(
            "forward_timeout_seconds", "forwardTimeoutSeconds", int, False, True, False,
        ),
        ElementInfo(
            "forward_to_phone_number", "forwardToPhoneNumber", str, False, False, False,
        ),
        ElementInfo("agent_user_table", "agentUserTable", list, True, True, True),
        ElementInfo(
            "allow_call_waiting_for_agents",
            "allowCallWaitingForAgents",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_members_to_control_group_busy",
            "allowMembersToControlGroupBusy",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("enable_group_busy", "enableGroupBusy", bool, False, True, False),
    )
    service_instance_profile = Field(type=ServiceInstanceReadProfile17, required=True)
    policy = Field(type=str, required=True)
    hunt_after_no_answer = Field(type=bool, required=True)
    no_answer_number_of_rings = Field(type=int, required=True)
    forward_after_timeout = Field(type=bool, required=True)
    forward_timeout_seconds = Field(type=int, required=True)
    forward_to_phone_number = Field(type=str, required=False)
    agent_user_table = Field(type=list, required=True)
    allow_call_waiting_for_agents = Field(type=bool, required=True)
    allow_members_to_control_group_busy = Field(type=bool, required=True)
    enable_group_busy = Field(type=bool, required=True)


class GroupTrunkGroupAddInstanceRequest14sp9A(OCIType):
    """
    Add a Trunk Group instance to a group.
    The response is either a SuccessResponse or an ErrorResponse.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("name", "name", str, False, True, False),
        ElementInfo("pilot_user", "pilotUser", TrunkGroupPilotUser, True, False, False),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo("access_device", "accessDevice", AccessDevice, True, False, False),
        ElementInfo("max_active_calls", "maxActiveCalls", int, False, True, False),
        ElementInfo("max_incoming_calls", "maxIncomingCalls", int, False, False, False),
        ElementInfo("max_outgoing_calls", "maxOutgoingCalls", int, False, False, False),
        ElementInfo("enable_bursting", "enableBursting", bool, False, True, False),
        ElementInfo(
            "bursting_max_active_calls",
            "burstingMaxActiveCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_incoming_calls",
            "burstingMaxIncomingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "bursting_max_outgoing_calls",
            "burstingMaxOutgoingCalls",
            int,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_action",
            "capacityExceededAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_forward_address",
            "capacityExceededForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_reroute_trunk_group_key",
            "capacityExceededRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_initial_calls",
            "capacityExceededTrapInitialCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "capacity_exceeded_trap_offset_calls",
            "capacityExceededTrapOffsetCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unreachable_destination_action",
            "unreachableDestinationAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_forward_address",
            "unreachableDestinationForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_reroute_trunk_group_key",
            "unreachableDestinationRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
        ElementInfo(
            "unreachable_destination_trap_initial_calls",
            "unreachableDestinationTrapInitialCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unreachable_destination_trap_offset_calls",
            "unreachableDestinationTrapOffsetCalls",
            int,
            False,
            True,
            False,
        ),
        ElementInfo("invitation_timeout", "invitationTimeout", int, False, True, False),
        ElementInfo(
            "require_authentication", "requireAuthentication", bool, False, True, False,
        ),
        ElementInfo(
            "sip_authentication_user_name",
            "sipAuthenticationUserName",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "sip_authentication_password",
            "sipAuthenticationPassword",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("hosted_user_id", "hostedUserId", str, False, False, False),
        ElementInfo(
            "trunk_group_identity", "trunkGroupIdentity", str, False, False, False,
        ),
        ElementInfo("otg_dtg_identity", "otgDtgIdentity", str, False, False, False),
        ElementInfo(
            "include_trunk_group_identity",
            "includeTrunkGroupIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_dtg_identity", "includeDtgIdentity", bool, False, True, False,
        ),
        ElementInfo(
            "enable_network_address_identity",
            "enableNetworkAddressIdentity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "allow_unscreened_calls", "allowUnscreenedCalls", bool, False, True, False,
        ),
        ElementInfo(
            "allow_unscreened_emergency_calls",
            "allowUnscreenedEmergencyCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_calling_line_identity_policy",
            "pilotUserCallingLineIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "pilot_user_charge_number_policy",
            "pilotUserChargeNumberPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_action",
            "callForwardingAlwaysAction",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_forward_address",
            "callForwardingAlwaysForwardAddress",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "call_forwarding_always_reroute_trunk_group_key",
            "callForwardingAlwaysRerouteTrunkGroupKey",
            TrunkGroupKey,
            True,
            False,
            False,
        ),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    name = Field(type=str, required=True)
    pilot_user = Field(type=TrunkGroupPilotUser, required=False)
    department = Field(type=DepartmentKey, required=False)
    access_device = Field(type=AccessDevice, required=False)
    max_active_calls = Field(type=int, required=True)
    max_incoming_calls = Field(type=int, required=False)
    max_outgoing_calls = Field(type=int, required=False)
    enable_bursting = Field(type=bool, required=True)
    bursting_max_active_calls = Field(type=int, required=False)
    bursting_max_incoming_calls = Field(type=int, required=False)
    bursting_max_outgoing_calls = Field(type=int, required=False)
    capacity_exceeded_action = Field(type=str, required=False)
    capacity_exceeded_forward_address = Field(type=str, required=False)
    capacity_exceeded_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    capacity_exceeded_trap_initial_calls = Field(type=int, required=True)
    capacity_exceeded_trap_offset_calls = Field(type=int, required=True)
    unreachable_destination_action = Field(type=str, required=False)
    unreachable_destination_forward_address = Field(type=str, required=False)
    unreachable_destination_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )
    unreachable_destination_trap_initial_calls = Field(type=int, required=True)
    unreachable_destination_trap_offset_calls = Field(type=int, required=True)
    invitation_timeout = Field(type=int, required=True)
    require_authentication = Field(type=bool, required=True)
    sip_authentication_user_name = Field(type=str, required=False)
    sip_authentication_password = Field(type=str, required=False)
    hosted_user_id = Field(type=str, required=False)
    trunk_group_identity = Field(type=str, required=False)
    otg_dtg_identity = Field(type=str, required=False)
    include_trunk_group_identity = Field(type=bool, required=True)
    include_dtg_identity = Field(type=bool, required=True)
    enable_network_address_identity = Field(type=bool, required=True)
    allow_unscreened_calls = Field(type=bool, required=True)
    allow_unscreened_emergency_calls = Field(type=bool, required=True)
    pilot_user_calling_line_identity_policy = Field(type=str, required=True)
    pilot_user_charge_number_policy = Field(type=str, required=True)
    call_forwarding_always_action = Field(type=str, required=False)
    call_forwarding_always_forward_address = Field(type=str, required=False)
    call_forwarding_always_reroute_trunk_group_key = Field(
        type=TrunkGroupKey, required=False,
    )


class OutgoingCallingPlanDigitPatternCallMeNowDepartmentPermissions(OCIType):
    """
    Outgoing Calling Plan Call Me Now call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternCallMeNowPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternCallMeNowPermissions, required=True,
    )


class OutgoingCallingPlanDigitPatternCallMeNowDepartmentPermissionsModify(OCIType):
    """
    Modify outgoing Calling Plan Call Me Now call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternCallMeNowPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternCallMeNowPermissions, required=True,
    )


class OutgoingCallingPlanDigitPatternOriginatingDepartmentPermissions(OCIType):
    """
    Outgoing Calling Plan originating call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternOriginatingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternOriginatingPermissions, required=True,
    )


class OutgoingCallingPlanDigitPatternOriginatingDepartmentPermissionsModify(OCIType):
    """
    Modify outgoing Calling Plan originating call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternOriginatingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternOriginatingPermissions, required=True,
    )


class OutgoingCallingPlanDigitPatternRedirectingDepartmentPermissions(OCIType):
    """
    Outgoing Calling Plan redirecting call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternRedirectingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternRedirectingPermissions, required=True,
    )


class OutgoingCallingPlanDigitPatternRedirectingDepartmentPermissionsModify(OCIType):
    """
    Modify outgoing Calling Plan redirecting call permissions for specified digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingCallingPlanDigitPatternRedirectingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingCallingPlanDigitPatternRedirectingPermissions, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternCallMeNowDepartmentPermissions(OCIType):
    """
    Outgoing Pinhole Digit Plan Call Me Now call permissions for a department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternCallMeNowDepartmentPermissionsModify(OCIType):
    """
    Modify Outgoing Pinhole Digit Plan Call Me Now call permissions for specified
    digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternOriginatingDepartmentPermissions(OCIType):
    """
    Outgoing Pinhole Digit Plan department originating call permissions for specified
    digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternOriginatingDepartmentPermissionsModify(
    OCIType,
):
    """
    Modify Outgoing Pinhole Digit Plan originating call permissions for specified
    digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternRedirectingDepartmentPermissions(OCIType):
    """
    Outgoing Pinhole Digit Plan initiating call forwards/transfer permissions for a
    department.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo("department_name", "departmentName", str, False, True, False),
        ElementInfo(
            "permissions",
            "permissions",
            OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    department_name = Field(type=str, required=True)
    permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions, required=True,
    )


class OutgoingPinholeDigitPlanDigitPatternRedirectingDepartmentPermissionsModify(
    OCIType,
):
    """
    Modify Outgoing Pinhole Digit Plan redirecting call permissions for specified
    digit patterns.
    """

    ELEMENTS = (
        ElementInfo(
            "department_key", "departmentKey", DepartmentKey, True, True, False,
        ),
        ElementInfo(
            "digit_pattern_permissions",
            "digitPatternPermissions",
            OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
            True,
            True,
            False,
        ),
    )
    department_key = Field(type=DepartmentKey, required=True)
    digit_pattern_permissions = Field(
        type=OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions, required=True,
    )


class PushNotificationRegistrationData(OCIType):
    """
    ?
    The common push notification registration elements.
    """

    ELEMENTS = (
        ElementInfo("registration_id", "registrationId", str, False, True, False),
        ElementInfo("application_id", "applicationId", str, False, True, False),
        ElementInfo(
            "application_version", "applicationVersion", str, False, True, False,
        ),
        ElementInfo("device_os_type", "deviceOsType", str, False, True, False),
        ElementInfo("device_version", "deviceVersion", str, False, True, False),
        ElementInfo("timestamp", "timestamp", str, False, True, False),
        ElementInfo(
            "push_notification_client_version",
            "pushNotificationClientVersion",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "push_notification_token_data",
            "pushNotificationTokenData",
            PushNotificationTokenData,
            True,
            False,
            False,
        ),
    )
    registration_id = Field(type=str, required=True)
    application_id = Field(type=str, required=True)
    application_version = Field(type=str, required=True)
    device_os_type = Field(type=str, required=True)
    device_version = Field(type=str, required=True)
    timestamp = Field(type=str, required=True)
    push_notification_client_version = Field(type=str, required=True)
    push_notification_token_data = Field(type=PushNotificationTokenData, required=False)


class ReplacementCombinedGroupServiceAuthorizationList(OCIType):
    """
          A list of group services that replaces a previously authorized group services.
    """

    ELEMENTS = (
        ElementInfo(
            "group_service_authorization",
            "groupServiceAuthorization",
            CombinedGroupServiceAuthorization,
            True,
            True,
            False,
        ),
    )
    group_service_authorization = Field(
        type=CombinedGroupServiceAuthorization, required=True,
    )


class ReplacementCombinedServicePackAssignmentList(OCIType):
    """
          A list of service packs that replaces existing service packs assgined to the user.

          If a service pack is already assigned to the user, the service quantitiy
    will be updated if included.
    """

    ELEMENTS = (
        ElementInfo(
            "service_pack",
            "servicePack",
            CombinedServicePackAssignment,
            True,
            True,
            False,
        ),
    )
    service_pack = Field(type=CombinedServicePackAssignment, required=True)


class ReplacementCombinedServicePackAuthorizationList(OCIType):
    """
          A list of service packs that replaces previously authorized service packs.
    """

    ELEMENTS = (
        ElementInfo(
            "service_pack_authorization",
            "servicePackAuthorization",
            CombinedServicePackAuthorization,
            True,
            True,
            False,
        ),
    )
    service_pack_authorization = Field(
        type=CombinedServicePackAuthorization, required=True,
    )


class ReplacementCombinedSharedCallAppearanceAccessDeviceMultipleIdentityEndpointList(
    OCIType,
):
    """
          A list of shared call appearance endpoints that replaces existing endpoints.
    """

    ELEMENTS = (
        ElementInfo(
            "shared_call_appearance_access_device_endpoint",
            "sharedCallAppearanceAccessDeviceEndpoint",
            CombinedSharedCallAppearanceAccessDeviceMultipleIdentityEndpoint,
            True,
            True,
            False,
        ),
    )
    shared_call_appearance_access_device_endpoint = Field(
        type=CombinedSharedCallAppearanceAccessDeviceMultipleIdentityEndpoint,
        required=True,
    )


class ReplacementCombinedUserServiceAssignmentList(OCIType):
    """
          A list of user services that replaces existing user services assgined to the user.

          If a service is already assigned to the user, the service quantitiy will be
    updated if included.
    """

    ELEMENTS = (
        ElementInfo(
            "service_name",
            "serviceName",
            CombinedUserServiceAssignment,
            True,
            True,
            False,
        ),
    )
    service_name = Field(type=CombinedUserServiceAssignment, required=True)


class ReplacementCombinedUserServiceAuthorizationList(OCIType):
    """
          A list of user services that replaces a previously authorized user services.
    """

    ELEMENTS = (
        ElementInfo(
            "user_service_authorization",
            "userServiceAuthorization",
            CombinedUserServiceAuthorization,
            True,
            True,
            False,
        ),
    )
    user_service_authorization = Field(
        type=CombinedUserServiceAuthorization, required=True,
    )


class ReplacementConsolidatedServicePackAssignmentList(OCIType):
    """
    A list of service packs that replaces existing service packs assigned to the user.
    If a service pack is not authorized to the group, the service will be authorized.
    The authorizedQuantity will be used if provided; otherwise, the service quantity
    will be set to unlimited. The command will fail if the authorized Quantity set at
    the service provider is insufficient
    If a service pack is already authorized to the group, the service quantity will
    be ignored if included.
    """

    ELEMENTS = (
        ElementInfo(
            "service_pack",
            "servicePack",
            ConsolidatedServicePackAssignment,
            True,
            True,
            False,
        ),
    )
    service_pack = Field(type=ConsolidatedServicePackAssignment, required=True)


class ReplacementConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpointList(
    OCIType,
):
    """
    A list of shared call appearance endpoints that replaces existing endpoints.
    """

    ELEMENTS = (
        ElementInfo(
            "shared_call_appearance_access_device_endpoint",
            "sharedCallAppearanceAccessDeviceEndpoint",
            ConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpoint,
            True,
            True,
            False,
        ),
    )
    shared_call_appearance_access_device_endpoint = Field(
        type=ConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpoint,
        required=True,
    )


class ReplacementConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpointList22(
    OCIType,
):
    """
    A list of shared call appearance endpoints that replaces existing endpoints.
    """

    ELEMENTS = (
        ElementInfo(
            "shared_call_appearance_access_device_endpoint",
            "sharedCallAppearanceAccessDeviceEndpoint",
            ConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpointAdd22,
            True,
            True,
            False,
        ),
    )
    shared_call_appearance_access_device_endpoint = Field(
        type=ConsolidatedSharedCallAppearanceAccessDeviceMultipleIdentityEndpointAdd22,
        required=True,
    )


class ReplacementConsolidatedUserServiceAssignmentList(OCIType):
    """
    A list of user services that replaces existing user services assigned to the user.
    If a service is not authorized to the group, the service will be authorized. The
    authorizedQuantity will be used if provided; otherwise, the service quantity will
    be set to unlimited. The command will fail if the authorized Quantity set at the
    service provider is insufficient.
    If a service is already authorized to the group, the service quantity will be
    ignored if included.
    """

    ELEMENTS = (
        ElementInfo(
            "user_service_service_name",
            "userServiceServiceName",
            ConsolidatedUserServiceAssignment,
            True,
            True,
            False,
        ),
    )
    user_service_service_name = Field(
        type=ConsolidatedUserServiceAssignment, required=True,
    )


class ReplacementEnterpriseDeviceList(OCIType):
    """
    A list of enterprise accessible devices that replaces a previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo("device", "device", EnterpriseAccessDevice, True, True, False),
    )
    device = Field(type=EnterpriseAccessDevice, required=True)


class ReplacementEnterpriseEnterpriseTrunkPriorityWeightedTrunkGroupList(OCIType):
    """
    A list of enterprise trunk priority weighted trunk groups that replaces a
    previously configured list.
    By convention, an element of this type may be set nill to clear the list.
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group",
            "trunkGroup",
            EnterpriseEnterpriseTrunkPriorityWeightedTrunkGroup,
            True,
            True,
            False,
        ),
    )
    trunk_group = Field(
        type=EnterpriseEnterpriseTrunkPriorityWeightedTrunkGroup, required=True,
    )


class SystemSIPDeviceTypeGetResponse18sp1V2(OCIType):
    """
    Response to SystemSIPDeviceTypeGetRequest18sp1V2.
    The following elements are only used in AS data mode:
      holdAnnouncementMethod
      supportRFC3398
    The following elements are only used in XS data mode:
      enable3G4GContinuity
    The following element values are only applicable in AS data mode:
      holdNormalization=useRfc3264Hold
    """

    ELEMENTS = (
        ElementInfo("is_obsolete", "isObsolete", bool, False, True, False),
        ElementInfo(
            "number_of_ports", "numberOfPorts", UnboundedPositiveInt, True, True, False,
        ),
        ElementInfo("profile", "profile", str, False, True, False),
        ElementInfo(
            "registration_capable", "registrationCapable", bool, False, True, False,
        ),
        ElementInfo(
            "is_conference_device", "isConferenceDevice", bool, False, True, False,
        ),
        ElementInfo(
            "is_mobility_manager_device",
            "isMobilityManagerDevice",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_music_on_hold_device", "isMusicOnHoldDevice", bool, False, True, False,
        ),
        ElementInfo("hold_normalization", "holdNormalization", str, False, True, False),
        ElementInfo(
            "hold_announcement_method",
            "holdAnnouncementMethod",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("is_trusted", "isTrusted", bool, False, True, False),
        ElementInfo("e164_capable", "E164Capable", bool, False, True, False),
        ElementInfo("route_advance", "routeAdvance", bool, False, True, False),
        ElementInfo(
            "forwarding_override", "forwardingOverride", bool, False, True, False,
        ),
        ElementInfo(
            "wireless_integration", "wirelessIntegration", bool, False, True, False,
        ),
        ElementInfo(
            "web_based_config_url", "webBasedConfigURL", str, False, False, False,
        ),
        ElementInfo("is_video_capable", "isVideoCapable", bool, False, True, False),
        ElementInfo("pbx_integration", "PBXIntegration", bool, False, True, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "cpe_device_options",
            "cpeDeviceOptions",
            CPEDeviceOptionsRead16sp1,
            True,
            False,
            False,
        ),
        ElementInfo("protocol_choice", "protocolChoice", str, False, True, False),
        ElementInfo(
            "early_media_support", "earlyMediaSupport", str, False, True, False,
        ),
        ElementInfo(
            "authenticate_refer", "authenticateRefer", bool, False, True, False,
        ),
        ElementInfo(
            "auto_config_soft_client", "autoConfigSoftClient", bool, False, True, False,
        ),
        ElementInfo(
            "authentication_mode", "authenticationMode", str, False, True, False,
        ),
        ElementInfo(
            "requires_broad_works_digit_collection",
            "requiresBroadWorksDigitCollection",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_broad_works_call_waiting_tone",
            "requiresBroadWorksCallWaitingTone",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_mwi_subscription",
            "requiresMWISubscription",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_history_info_header_on_access_side",
            "useHistoryInfoHeaderOnAccessSide",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "advice_of_charge_capable",
            "adviceOfChargeCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo(
            "support_call_center_mime_type",
            "supportCallCenterMIMEType",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("trunk_mode", "trunkMode", str, False, True, False),
        ElementInfo(
            "add_p_called_party_id", "addPCalledPartyId", bool, False, True, False,
        ),
        ElementInfo(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable3_g4_g_continuity", "enable3G4GContinuity", bool, False, True, False,
        ),
        ElementInfo(
            "support_emergency_disconnect_control",
            "supportEmergencyDisconnectControl",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_type_configuration_option",
            "deviceTypeConfigurationOption",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("support_rfc3398", "supportRFC3398", bool, False, True, False),
    )
    is_obsolete = Field(type=bool, required=True)
    number_of_ports = Field(type=UnboundedPositiveInt, required=True)
    profile = Field(type=str, required=True)
    registration_capable = Field(type=bool, required=True)
    is_conference_device = Field(type=bool, required=True)
    is_mobility_manager_device = Field(type=bool, required=True)
    is_music_on_hold_device = Field(type=bool, required=True)
    hold_normalization = Field(type=str, required=True)
    hold_announcement_method = Field(type=str, required=True)
    is_trusted = Field(type=bool, required=True)
    e164_capable = Field(type=bool, required=True)
    route_advance = Field(type=bool, required=True)
    forwarding_override = Field(type=bool, required=True)
    wireless_integration = Field(type=bool, required=True)
    web_based_config_url = Field(type=str, required=False)
    is_video_capable = Field(type=bool, required=True)
    pbx_integration = Field(type=bool, required=True)
    static_registration_capable = Field(type=bool, required=True)
    cpe_device_options = Field(type=CPEDeviceOptionsRead16sp1, required=False)
    protocol_choice = Field(type=str, required=True)
    early_media_support = Field(type=str, required=True)
    authenticate_refer = Field(type=bool, required=True)
    auto_config_soft_client = Field(type=bool, required=True)
    authentication_mode = Field(type=str, required=True)
    requires_broad_works_digit_collection = Field(type=bool, required=True)
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True)
    requires_mwi_subscription = Field(type=bool, required=True)
    use_history_info_header_on_access_side = Field(type=bool, required=True)
    advice_of_charge_capable = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    support_call_center_mime_type = Field(type=bool, required=True)
    trunk_mode = Field(type=str, required=True)
    add_p_called_party_id = Field(type=bool, required=True)
    support_identity_in_update_and_re_invite = Field(type=bool, required=True)
    unscreened_presentation_identity_policy = Field(type=str, required=True)
    enable3_g4_g_continuity = Field(type=bool, required=True)
    support_emergency_disconnect_control = Field(type=bool, required=True)
    device_type_configuration_option = Field(type=str, required=True)
    support_rfc3398 = Field(type=bool, required=True)


class SystemSIPDeviceTypeGetResponse21sp1V2(OCIType):
    """
    Response to SystemSIPDeviceTypeGetRequest21sp1V2.
    The following elements are only used in AS data mode:
      holdAnnouncementMethod
      supportRFC3398
      supportClientSessionInfo
      supportCallInfoConferenceSubscriptionURI
      supportRemotePartyInfo
    The following elements are only used in XS data mode:
      enhancedForICS - value false is returned in AS data mode
      enable3G4GContinuity - value false is returned in AS data mode
      publishesOwnPresence - value false is returned in AS data mode
      locationNetwork, value Fixed is returned in AS data mode
    The following element values are only applicable in AS data mode:
      holdNormalization=useRfc3264Hold
    The following elements are only used in AS data mode:
      supportCauseParameter - value false is returned in XS data mode
    Replaced by: SystemSIPDeviceTypeGetResponse22 in AS data mode.
    """

    ELEMENTS = (
        ElementInfo("is_obsolete", "isObsolete", bool, False, True, False),
        ElementInfo(
            "number_of_ports", "numberOfPorts", UnboundedPositiveInt, True, True, False,
        ),
        ElementInfo("profile", "profile", str, False, True, False),
        ElementInfo(
            "registration_capable", "registrationCapable", bool, False, True, False,
        ),
        ElementInfo(
            "is_conference_device", "isConferenceDevice", bool, False, True, False,
        ),
        ElementInfo(
            "is_mobility_manager_device",
            "isMobilityManagerDevice",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_music_on_hold_device", "isMusicOnHoldDevice", bool, False, True, False,
        ),
        ElementInfo("hold_normalization", "holdNormalization", str, False, True, False),
        ElementInfo(
            "hold_announcement_method",
            "holdAnnouncementMethod",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("is_trusted", "isTrusted", bool, False, True, False),
        ElementInfo("e164_capable", "E164Capable", bool, False, True, False),
        ElementInfo("route_advance", "routeAdvance", bool, False, True, False),
        ElementInfo(
            "forwarding_override", "forwardingOverride", bool, False, True, False,
        ),
        ElementInfo(
            "wireless_integration", "wirelessIntegration", bool, False, True, False,
        ),
        ElementInfo(
            "web_based_config_url", "webBasedConfigURL", str, False, False, False,
        ),
        ElementInfo("is_video_capable", "isVideoCapable", bool, False, True, False),
        ElementInfo("pbx_integration", "PBXIntegration", bool, False, True, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "cpe_device_options",
            "cpeDeviceOptions",
            CPEDeviceOptionsRead21sp1,
            True,
            False,
            False,
        ),
        ElementInfo("protocol_choice", "protocolChoice", str, False, True, False),
        ElementInfo(
            "early_media_support", "earlyMediaSupport", str, False, True, False,
        ),
        ElementInfo(
            "authenticate_refer", "authenticateRefer", bool, False, True, False,
        ),
        ElementInfo(
            "auto_config_soft_client", "autoConfigSoftClient", bool, False, True, False,
        ),
        ElementInfo(
            "authentication_mode", "authenticationMode", str, False, True, False,
        ),
        ElementInfo(
            "requires_broad_works_digit_collection",
            "requiresBroadWorksDigitCollection",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_broad_works_call_waiting_tone",
            "requiresBroadWorksCallWaitingTone",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_mwi_subscription",
            "requiresMWISubscription",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_history_info_header_on_access_side",
            "useHistoryInfoHeaderOnAccessSide",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "advice_of_charge_capable",
            "adviceOfChargeCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo(
            "support_call_center_mime_type",
            "supportCallCenterMIMEType",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("trunk_mode", "trunkMode", str, False, True, False),
        ElementInfo(
            "add_p_called_party_id", "addPCalledPartyId", bool, False, True, False,
        ),
        ElementInfo(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("enhanced_for_ics", "enhancedForICS", bool, False, True, False),
        ElementInfo(
            "support_emergency_disconnect_control",
            "supportEmergencyDisconnectControl",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_type_configuration_option",
            "deviceTypeConfigurationOption",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("support_rfc3398", "supportRFC3398", bool, False, True, False),
        ElementInfo(
            "static_line_ordering", "staticLineOrdering", bool, False, True, False,
        ),
        ElementInfo(
            "support_client_session_info",
            "supportClientSessionInfo",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "support_call_info_conference_subscription_uri",
            "supportCallInfoConferenceSubscriptionURI",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "support_remote_party_info",
            "supportRemotePartyInfo",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "support_visual_device_management",
            "supportVisualDeviceManagement",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "bypass_media_treatment", "bypassMediaTreatment", bool, False, True, False,
        ),
        ElementInfo(
            "supports3_g4_g_continuity",
            "supports3G4GContinuity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "publishes_own_presence", "publishesOwnPresence", bool, False, True, False,
        ),
        ElementInfo(
            "support_cause_parameter", "supportCauseParameter", bool, False, True, False,
        ),
        ElementInfo("location_network", "locationNetwork", str, False, True, False),
    )
    is_obsolete = Field(type=bool, required=True)
    number_of_ports = Field(type=UnboundedPositiveInt, required=True)
    profile = Field(type=str, required=True)
    registration_capable = Field(type=bool, required=True)
    is_conference_device = Field(type=bool, required=True)
    is_mobility_manager_device = Field(type=bool, required=True)
    is_music_on_hold_device = Field(type=bool, required=True)
    hold_normalization = Field(type=str, required=True)
    hold_announcement_method = Field(type=str, required=True)
    is_trusted = Field(type=bool, required=True)
    e164_capable = Field(type=bool, required=True)
    route_advance = Field(type=bool, required=True)
    forwarding_override = Field(type=bool, required=True)
    wireless_integration = Field(type=bool, required=True)
    web_based_config_url = Field(type=str, required=False)
    is_video_capable = Field(type=bool, required=True)
    pbx_integration = Field(type=bool, required=True)
    static_registration_capable = Field(type=bool, required=True)
    cpe_device_options = Field(type=CPEDeviceOptionsRead21sp1, required=False)
    protocol_choice = Field(type=str, required=True)
    early_media_support = Field(type=str, required=True)
    authenticate_refer = Field(type=bool, required=True)
    auto_config_soft_client = Field(type=bool, required=True)
    authentication_mode = Field(type=str, required=True)
    requires_broad_works_digit_collection = Field(type=bool, required=True)
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True)
    requires_mwi_subscription = Field(type=bool, required=True)
    use_history_info_header_on_access_side = Field(type=bool, required=True)
    advice_of_charge_capable = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    support_call_center_mime_type = Field(type=bool, required=True)
    trunk_mode = Field(type=str, required=True)
    add_p_called_party_id = Field(type=bool, required=True)
    support_identity_in_update_and_re_invite = Field(type=bool, required=True)
    unscreened_presentation_identity_policy = Field(type=str, required=True)
    enhanced_for_ics = Field(type=bool, required=True)
    support_emergency_disconnect_control = Field(type=bool, required=True)
    device_type_configuration_option = Field(type=str, required=True)
    support_rfc3398 = Field(type=bool, required=True)
    static_line_ordering = Field(type=bool, required=True)
    support_client_session_info = Field(type=bool, required=True)
    support_call_info_conference_subscription_uri = Field(type=bool, required=True)
    support_remote_party_info = Field(type=bool, required=True)
    support_visual_device_management = Field(type=bool, required=True)
    bypass_media_treatment = Field(type=bool, required=True)
    supports3_g4_g_continuity = Field(type=bool, required=True)
    publishes_own_presence = Field(type=bool, required=True)
    support_cause_parameter = Field(type=bool, required=True)
    location_network = Field(type=str, required=True)


class TrunkAddressingMultipleContactAdd22(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    alternateTrunkIdentityDomain is only used in XS mode.
    Both alternateTrunkIdentity and AlternateTrunkIdentityDomain should be set at the
    same time if one is set in XS mode.
    The following elements are only used in AS data mode and are ignored in XS data
    mode:
     physicalLocation
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointAdd22,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "alternate_trunk_identity_domain",
            "alternateTrunkIdentityDomain",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointAdd22, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)
    alternate_trunk_identity_domain = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)


class TrunkAddressingMultipleContactModify(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    alternateTrunkIdentityDomainName is only used in XS mode.
    Setting alternateTrunkIdentity or alternateTrunkIdentityDomain to nil in XS mode,
    the other one paremter should be set to nil at the same time.
    The following elements are only used in AS data mode and are ignored in XS data
    mode:
     physicalLocation
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "alternate_trunk_identity_domain",
            "alternateTrunkIdentityDomain",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointModify, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)
    alternate_trunk_identity_domain = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)


class TrunkAddressingMultipleContactRead22(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    alternateTrunkIdentityDomain is only used in AS mode in IMS.
    The following elements are only used in AS data mode and are ignored in XS data mode:
      physicalLocation
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointRead22,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "alternate_trunk_identity_domain",
            "alternateTrunkIdentityDomain",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointRead22, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)
    alternate_trunk_identity_domain = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)


class TrunkGroupDeviceMultipleContactEndpointModify22(OCIType):
    """
    Trunk group device endpoint used in the context of modify that can have multiple contacts.
    """

    ELEMENTS = (
        ElementInfo("name", "name", str, False, False, False),
        ElementInfo("line_port", "linePort", str, False, False, False),
        ElementInfo(
            "contact_list", "contactList", ReplacementContactList22, True, False, False,
        ),
    )
    name = Field(type=str, required=False)
    line_port = Field(type=str, required=False)
    contact_list = Field(type=ReplacementContactList22, required=False)


class UserBroadWorksMobilityMobileIdentityGetResponse21sp1V2(OCIType):
    """
     Response to a UserBroadWorksMobilityMobileIdentityGetRequest21sp1V2.

     Columns for the mobileNumberAlertedTable are as follows: "Mobile Number",
    "Country Code", "National Prefix"
    """

    ELEMENTS = (
        ElementInfo("description", "description", str, False, False, False),
        ElementInfo("is_primary", "isPrimary", bool, False, True, False),
        ElementInfo("enable_alerting", "enableAlerting", bool, False, True, False),
        ElementInfo("alert_agent_calls", "alertAgentCalls", bool, False, True, False),
        ElementInfo(
            "alert_click_to_dial_calls",
            "alertClickToDialCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "alert_group_paging_calls",
            "alertGroupPagingCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_mobility_calling_line_id",
            "useMobilityCallingLineID",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_diversion_inhibitor",
            "enableDiversionInhibitor",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "require_answer_confirmation",
            "requireAnswerConfirmation",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "broadworks_call_control", "broadworksCallControl", bool, False, True, False,
        ),
        ElementInfo("use_setting_level", "useSettingLevel", str, False, True, False),
        ElementInfo(
            "deny_call_originations", "denyCallOriginations", bool, False, True, False,
        ),
        ElementInfo(
            "deny_call_terminations", "denyCallTerminations", bool, False, True, False,
        ),
        ElementInfo(
            "effective_enable_location_services",
            "effectiveEnableLocationServices",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "effective_enable_msrn_lookup",
            "effectiveEnableMSRNLookup",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "effective_enable_mobile_state_checking",
            "effectiveEnableMobileStateChecking",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "effective_enable_announcement_suppression",
            "effectiveEnableAnnouncementSuppression",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "effective_deny_call_originations",
            "effectiveDenyCallOriginations",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "effective_deny_call_terminations",
            "effectiveDenyCallTerminations",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("devices_to_ring", "devicesToRing", str, False, True, False),
        ElementInfo(
            "include_shared_call_appearance",
            "includeSharedCallAppearance",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_broadworks_anywhere",
            "includeBroadworksAnywhere",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "include_executive_assistant",
            "includeExecutiveAssistant",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable_call_anchoring", "enableCallAnchoring", bool, False, True, False,
        ),
        ElementInfo(
            "time_schedule", "timeSchedule", ScheduleGlobalKey, True, False, False,
        ),
        ElementInfo(
            "holiday_schedule", "holidaySchedule", ScheduleGlobalKey, True, False, False,
        ),
        ElementInfo(
            "access_device_endpoint",
            "accessDeviceEndpoint",
            AccessDeviceEndpointWithPortNumberRead,
            True,
            False,
            False,
        ),
        ElementInfo(
            "outbound_alternate_number",
            "outboundAlternateNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "enable_direct_routing", "enableDirectRouting", bool, False, True, False,
        ),
        ElementInfo(
            "mark_cdr_as_enterprise_group_calls",
            "markCDRAsEnterpriseGroupCalls",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "mobile_number_alerted_table",
            "mobileNumberAlertedTable",
            list,
            True,
            True,
            True,
        ),
    )
    description = Field(type=str, required=False)
    is_primary = Field(type=bool, required=True)
    enable_alerting = Field(type=bool, required=True)
    alert_agent_calls = Field(type=bool, required=True)
    alert_click_to_dial_calls = Field(type=bool, required=True)
    alert_group_paging_calls = Field(type=bool, required=True)
    use_mobility_calling_line_id = Field(type=bool, required=True)
    enable_diversion_inhibitor = Field(type=bool, required=True)
    require_answer_confirmation = Field(type=bool, required=True)
    broadworks_call_control = Field(type=bool, required=True)
    use_setting_level = Field(type=str, required=True)
    deny_call_originations = Field(type=bool, required=True)
    deny_call_terminations = Field(type=bool, required=True)
    effective_enable_location_services = Field(type=bool, required=True)
    effective_enable_msrn_lookup = Field(type=bool, required=True)
    effective_enable_mobile_state_checking = Field(type=bool, required=True)
    effective_enable_announcement_suppression = Field(type=bool, required=True)
    effective_deny_call_originations = Field(type=bool, required=True)
    effective_deny_call_terminations = Field(type=bool, required=True)
    devices_to_ring = Field(type=str, required=True)
    include_shared_call_appearance = Field(type=bool, required=True)
    include_broadworks_anywhere = Field(type=bool, required=True)
    include_executive_assistant = Field(type=bool, required=True)
    enable_call_anchoring = Field(type=bool, required=True)
    time_schedule = Field(type=ScheduleGlobalKey, required=False)
    holiday_schedule = Field(type=ScheduleGlobalKey, required=False)
    access_device_endpoint = Field(
        type=AccessDeviceEndpointWithPortNumberRead, required=False,
    )
    outbound_alternate_number = Field(type=str, required=False)
    enable_direct_routing = Field(type=bool, required=True)
    mark_cdr_as_enterprise_group_calls = Field(type=bool, required=True)
    mobile_number_alerted_table = Field(type=list, required=True)


class UserEnhancedCallLogsGetListRequest17sp4V2(OCIType):
    """
    Request user's call logs.
    If the callLogType is not specified, all types of calls logs (placed, received,
    missed) are returned.
    The filters "dateTimeRange", "numberFilter", "redirectedNumberFilter",
    "accountAuthorizationCodeFilter"
    "callAuthorizationCodeFilter" and "subscriberType" are ignored if call logs are
    stored in CDS. When
    "ReceivedOrMissed" is specified as "callLogType" and call logs are stored in CDS,
    all call logs including
    placed will be returned.
    It is possible to restrict the number of rows returned using
    responsePagingControl. If responsePagingControl
    is not specified, the value of Enhanced Call Logs system parameter
    maxNonPagedResponseSize will control
    the maximum number of call logs can be returned.
    The response is either a UserEnhancedCallLogsGetListResponse17sp4V2 or an ErrorResponse.
    The following elements are only used in AS data mode and not returned in XS data mode:
      callAuthorizationCodeFilter
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("call_log_type", "callLogType", str, False, False, False),
        ElementInfo(
            "date_time_range",
            "dateTimeRange",
            EnhancedCallLogsTimeRange,
            True,
            True,
            False,
        ),
        ElementInfo(
            "number_filter",
            "numberFilter",
            EnhancedCallLogsNumberFilter,
            True,
            False,
            False,
        ),
        ElementInfo(
            "redirected_number_filter",
            "redirectedNumberFilter",
            EnhancedCallLogsRedirectedNumberFilter,
            True,
            False,
            False,
        ),
        ElementInfo(
            "account_authorization_code_filter",
            "accountAuthorizationCodeFilter",
            EnhancedCallLogsAccountAuthorizationCodeFilter,
            True,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code_filter",
            "callAuthorizationCodeFilter",
            EnhancedCallLogsCallAuthorizationCodeFilter,
            True,
            False,
            False,
        ),
        ElementInfo("subscriber_type", "subscriberType", str, False, False, False),
        ElementInfo(
            "response_paging_control",
            "responsePagingControl",
            ResponsePagingControl,
            True,
            False,
            False,
        ),
    )
    user_id = Field(type=str, required=True)
    call_log_type = Field(type=str, required=False)
    date_time_range = Field(type=EnhancedCallLogsTimeRange, required=True)
    number_filter = Field(type=EnhancedCallLogsNumberFilter, required=False)
    redirected_number_filter = Field(
        type=EnhancedCallLogsRedirectedNumberFilter, required=False,
    )
    account_authorization_code_filter = Field(
        type=EnhancedCallLogsAccountAuthorizationCodeFilter, required=False,
    )
    call_authorization_code_filter = Field(
        type=EnhancedCallLogsCallAuthorizationCodeFilter, required=False,
    )
    subscriber_type = Field(type=str, required=False)
    response_paging_control = Field(type=ResponsePagingControl, required=False)


class UserEnhancedCallLogsGetListRequest21sp1V2(OCIType):
    """
    Request user's call logs.
    If the callLogType is not specified, all types of calls logs (placed, received,
    missed) are returned.
    The filters "dateTimeRange", "numberFilter", "redirectedNumberFilter",
    "accountAuthorizationCodeFilter"
    "callAuthorizationCodeFilter" and "subscriberType" are ignored if call logs are
    stored in CDS. When
    "ReceivedOrMissed" is specified as "callLogType" and call logs are stored in CDS,
    all call logs including
    placed will be returned.
    It is possible to restrict the number of rows returned using
    responsePagingControl. If responsePagingControl
    is not specified, the value of Enhanced Call Logs system parameter
    maxNonPagedResponseSize will control
    the maximum number of call logs can be returned.
    The response is either a UserEnhancedCallLogsGetListResponse21sp1V2 or an ErrorResponse.
    The following elements are only used in AS data mode and ignored in XS data mode:
      callAuthorizationCodeFilter
    """

    ELEMENTS = (
        ElementInfo("user_id", "userId", str, False, True, False),
        ElementInfo("call_log_type", "callLogType", str, False, False, False),
        ElementInfo(
            "date_time_range",
            "dateTimeRange",
            EnhancedCallLogsTimeRange,
            True,
            True,
            False,
        ),
        ElementInfo(
            "number_filter",
            "numberFilter",
            EnhancedCallLogsNumberFilter,
            True,
            False,
            False,
        ),
        ElementInfo(
            "redirected_number_filter",
            "redirectedNumberFilter",
            EnhancedCallLogsRedirectedNumberFilter21sp1,
            True,
            False,
            False,
        ),
        ElementInfo(
            "account_authorization_code_filter",
            "accountAuthorizationCodeFilter",
            EnhancedCallLogsAccountAuthorizationCodeFilter,
            True,
            False,
            False,
        ),
        ElementInfo(
            "call_authorization_code_filter",
            "callAuthorizationCodeFilter",
            EnhancedCallLogsCallAuthorizationCodeFilter,
            True,
            False,
            False,
        ),
        ElementInfo("subscriber_type", "subscriberType", str, False, False, False),
        ElementInfo(
            "response_paging_control",
            "responsePagingControl",
            ResponsePagingControl,
            True,
            False,
            False,
        ),
    )
    user_id = Field(type=str, required=True)
    call_log_type = Field(type=str, required=False)
    date_time_range = Field(type=EnhancedCallLogsTimeRange, required=True)
    number_filter = Field(type=EnhancedCallLogsNumberFilter, required=False)
    redirected_number_filter = Field(
        type=EnhancedCallLogsRedirectedNumberFilter21sp1, required=False,
    )
    account_authorization_code_filter = Field(
        type=EnhancedCallLogsAccountAuthorizationCodeFilter, required=False,
    )
    call_authorization_code_filter = Field(
        type=EnhancedCallLogsCallAuthorizationCodeFilter, required=False,
    )
    subscriber_type = Field(type=str, required=False)
    response_paging_control = Field(type=ResponsePagingControl, required=False)


class UserGetResponse21sp1V2(OCIType):
    """
    Response to UserGetRequest21sp1V2.
    It is possible that the TrunkAddressingRead element is present with nothing
    populated in it which means the user is a trunk user.
    The following data elements are only used in AS data mode and not returned in HSS
    data mode:
      contact[2]-contact[5]
      alternateUserId
    The following data elements are only used in IMS data mode:
      alternateTrunkIdentityDomain

    The country code (countryCode) included is the user's phone number country code
    when the user has a phone number assigned, or the
    user's Group associated country code when the user does not have a phone number
    assigned, or the system default country code when the
    user's Group does not have an associated country code.

    The nationalPrefix in this response is the one associated to the included countryCode.

    The callingLineIdPhoneNumber is no longer being formatted for display purpose.
    The value is returned exactly the same as being stored.
    """

    ELEMENTS = (
        ElementInfo(
            "service_provider_id", "serviceProviderId", str, False, True, False,
        ),
        ElementInfo("group_id", "groupId", str, False, True, False),
        ElementInfo("last_name", "lastName", str, False, True, False),
        ElementInfo("first_name", "firstName", str, False, True, False),
        ElementInfo(
            "calling_line_id_last_name",
            "callingLineIdLastName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "calling_line_id_first_name",
            "callingLineIdFirstName",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "name_dialing_name", "nameDialingName", NameDialingName, True, False, False,
        ),
        ElementInfo("hiragana_last_name", "hiraganaLastName", str, False, False, False),
        ElementInfo(
            "hiragana_first_name", "hiraganaFirstName", str, False, False, False,
        ),
        ElementInfo("phone_number", "phoneNumber", str, False, False, False),
        ElementInfo("extension", "extension", str, False, False, False),
        ElementInfo(
            "calling_line_id_phone_number",
            "callingLineIdPhoneNumber",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("department", "department", DepartmentKey, True, False, False),
        ElementInfo(
            "department_full_path", "departmentFullPath", str, False, False, False,
        ),
        ElementInfo("language", "language", str, False, True, False),
        ElementInfo("time_zone", "timeZone", str, False, True, False),
        ElementInfo(
            "time_zone_display_name", "timeZoneDisplayName", str, False, True, False,
        ),
        ElementInfo("default_alias", "defaultAlias", str, False, True, False),
        ElementInfo("alias", "alias", str, False, False, False),
        ElementInfo(
            "access_device_endpoint",
            "accessDeviceEndpoint",
            AccessDeviceMultipleIdentityAndContactEndpointRead,
            True,
            False,
            False,
        ),
        ElementInfo(
            "trunk_addressing",
            "trunkAddressing",
            TrunkAddressingMultipleContactRead21sp1,
            True,
            False,
            False,
        ),
        ElementInfo("title", "title", str, False, False, False),
        ElementInfo("pager_phone_number", "pagerPhoneNumber", str, False, False, False),
        ElementInfo(
            "mobile_phone_number", "mobilePhoneNumber", str, False, False, False,
        ),
        ElementInfo("email_address", "emailAddress", str, False, False, False),
        ElementInfo("yahoo_id", "yahooId", str, False, False, False),
        ElementInfo("address_location", "addressLocation", str, False, False, False),
        ElementInfo("address", "address", StreetAddress, True, False, False),
        ElementInfo("country_code", "countryCode", str, False, True, False),
        ElementInfo("national_prefix", "nationalPrefix", str, False, False, False),
        ElementInfo(
            "network_class_of_service",
            "networkClassOfService",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("office_zone_name", "officeZoneName", str, False, False, False),
        ElementInfo("primary_zone_name", "primaryZoneName", str, False, False, False),
        ElementInfo("imp_id", "impId", str, False, False, False),
        ElementInfo(
            "alternate_user_id",
            "alternateUserId",
            AlternateUserIdEntry,
            True,
            False,
            False,
        ),
    )
    service_provider_id = Field(type=str, required=True)
    group_id = Field(type=str, required=True)
    last_name = Field(type=str, required=True)
    first_name = Field(type=str, required=True)
    calling_line_id_last_name = Field(type=str, required=True)
    calling_line_id_first_name = Field(type=str, required=True)
    name_dialing_name = Field(type=NameDialingName, required=False)
    hiragana_last_name = Field(type=str, required=False)
    hiragana_first_name = Field(type=str, required=False)
    phone_number = Field(type=str, required=False)
    extension = Field(type=str, required=False)
    calling_line_id_phone_number = Field(type=str, required=False)
    department = Field(type=DepartmentKey, required=False)
    department_full_path = Field(type=str, required=False)
    language = Field(type=str, required=True)
    time_zone = Field(type=str, required=True)
    time_zone_display_name = Field(type=str, required=True)
    default_alias = Field(type=str, required=True)
    alias = Field(type=str, required=False)
    access_device_endpoint = Field(
        type=AccessDeviceMultipleIdentityAndContactEndpointRead, required=False,
    )
    trunk_addressing = Field(
        type=TrunkAddressingMultipleContactRead21sp1, required=False,
    )
    title = Field(type=str, required=False)
    pager_phone_number = Field(type=str, required=False)
    mobile_phone_number = Field(type=str, required=False)
    email_address = Field(type=str, required=False)
    yahoo_id = Field(type=str, required=False)
    address_location = Field(type=str, required=False)
    address = Field(type=StreetAddress, required=False)
    country_code = Field(type=str, required=True)
    national_prefix = Field(type=str, required=False)
    network_class_of_service = Field(type=str, required=False)
    office_zone_name = Field(type=str, required=False)
    primary_zone_name = Field(type=str, required=False)
    imp_id = Field(type=str, required=False)
    alternate_user_id = Field(type=AlternateUserIdEntry, required=False)


class AutoAttendantAddMenu(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during after business hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo("audio_file", "audioFile", LabeledFileResource, True, False, False),
        ElementInfo("video_file", "videoFile", LabeledFileResource, True, False, False),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyConfiguration,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file = Field(type=LabeledFileResource, required=False)
    video_file = Field(type=LabeledFileResource, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyConfiguration, required=False)


class AutoAttendantAddMenu16(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during after business hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo(
            "audio_file", "audioFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyConfiguration,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file = Field(type=LabeledMediaFileResource, required=False)
    video_file = Field(type=LabeledMediaFileResource, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyConfiguration, required=False)


class AutoAttendantAddMenu19(OCIType):
    """
    The configuration of the automated receptionist
    greeting
    prompt and dialing menu to be used during
    after business
    hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo(
            "audio_file", "audioFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyConfiguration19,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file = Field(type=LabeledMediaFileResource, required=False)
    video_file = Field(type=LabeledMediaFileResource, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyConfiguration19, required=False)


class AutoAttendantAddMenu20(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during after business hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyConfiguration20,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyConfiguration20, required=False)


class AutoAttendantModifyMenu(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during business hours.
    It is used when modifying an Auto Attendant group.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, False, False,
        ),
        ElementInfo("audio_file", "audioFile", LabeledFileResource, True, False, False),
        ElementInfo("video_file", "videoFile", LabeledFileResource, True, False, False),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyModifyConfiguration,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=False)
    audio_file = Field(type=LabeledFileResource, required=False)
    video_file = Field(type=LabeledFileResource, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=False)
    key_configuration = Field(type=AutoAttendantKeyModifyConfiguration, required=False)


class AutoAttendantModifyMenu16(OCIType):
    """
    The configuration of the automated receptionist
    greeting
    prompt and dialing menu to be used during
    business
    hours.
    It is used when modifying an Auto Attendant group.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, False, False,
        ),
        ElementInfo(
            "audio_file", "audioFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", LabeledMediaFileResource, True, False, False,
        ),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyModifyConfiguration,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=False)
    audio_file = Field(type=LabeledMediaFileResource, required=False)
    video_file = Field(type=LabeledMediaFileResource, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=False)
    key_configuration = Field(type=AutoAttendantKeyModifyConfiguration, required=False)


class AutoAttendantModifyMenu20(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during business hours.
    It is used when modifying an Auto Attendant group.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, False, False,
        ),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            False,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyModifyConfiguration20,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=False)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=False)
    key_configuration = Field(
        type=AutoAttendantKeyModifyConfiguration20, required=False,
    )


class AutoAttendantReadMenu(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during after business hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo(
            "audio_file_description", "audioFileDescription", str, False, False, False,
        ),
        ElementInfo(
            "video_file_description", "videoFileDescription", str, False, False, False,
        ),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyConfiguration,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file_description = Field(type=str, required=False)
    video_file_description = Field(type=str, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyConfiguration, required=False)


class AutoAttendantReadMenu16(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during after business hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo(
            "audio_file_description", "audioFileDescription", str, False, False, False,
        ),
        ElementInfo("audio_media_type", "audioMediaType", str, False, False, False),
        ElementInfo(
            "video_file_description", "videoFileDescription", str, False, False, False,
        ),
        ElementInfo("video_media_type", "videoMediaType", str, False, False, False),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyConfiguration,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file_description = Field(type=str, required=False)
    audio_media_type = Field(type=str, required=False)
    video_file_description = Field(type=str, required=False)
    video_media_type = Field(type=str, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyConfiguration, required=False)


class AutoAttendantReadMenu20(OCIType):
    """
    The configuration of the automated receptionist greeting
    prompt and dialing menu to be used during after business hours.
    """

    ELEMENTS = (
        ElementInfo(
            "announcement_selection", "announcementSelection", str, False, True, False,
        ),
        ElementInfo(
            "audio_file", "audioFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "video_file", "videoFile", AnnouncementFileLevelKey, True, False, False,
        ),
        ElementInfo(
            "enable_first_menu_level_extension_dialing",
            "enableFirstMenuLevelExtensionDialing",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "key_configuration",
            "keyConfiguration",
            AutoAttendantKeyReadConfiguration20,
            True,
            False,
            False,
        ),
    )
    announcement_selection = Field(type=str, required=True)
    audio_file = Field(type=AnnouncementFileLevelKey, required=False)
    video_file = Field(type=AnnouncementFileLevelKey, required=False)
    enable_first_menu_level_extension_dialing = Field(type=bool, required=True)
    key_configuration = Field(type=AutoAttendantKeyReadConfiguration20, required=False)


class CommPilotExpressSRAvailableInOffice(OCIType):
    """
    CommPilot Express SR Available In Office Settings used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "busy_setting",
            "busySetting",
            CommPilotExpressSRRedirection,
            True,
            True,
            False,
        ),
        ElementInfo(
            "no_answer_setting",
            "noAnswerSetting",
            CommPilotExpressSRNoAnswer,
            True,
            True,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotify,
            True,
            True,
            False,
        ),
    )
    busy_setting = Field(type=CommPilotExpressSRRedirection, required=True)
    no_answer_setting = Field(type=CommPilotExpressSRNoAnswer, required=True)
    incoming_call_notify = Field(type=CommPilotExpressSREmailNotify, required=True)


class CommPilotExpressSRAvailableInOfficeModify(OCIType):
    """
    CommPilot Express SR Available In Office Settings used in the context of a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "busy_setting",
            "busySetting",
            CommPilotExpressSRRedirectionModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "no_answer_setting",
            "noAnswerSetting",
            CommPilotExpressSRNoAnswerModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotifyModify,
            True,
            False,
            False,
        ),
    )
    busy_setting = Field(type=CommPilotExpressSRRedirectionModify, required=False)
    no_answer_setting = Field(type=CommPilotExpressSRNoAnswerModify, required=False)
    incoming_call_notify = Field(
        type=CommPilotExpressSREmailNotifyModify, required=False,
    )


class CommPilotExpressSRAvailableOutOfOffice(OCIType):
    """
    CommPilot Express SR Available Out Of Office Configuration used in the context of a get.
    """

    ELEMENTS = (
        ElementInfo(
            "remote_phone_number", "remotePhoneNumber", str, False, False, False,
        ),
        ElementInfo(
            "no_answer_setting",
            "noAnswerSetting",
            CommPilotExpressSRNoAnswer,
            True,
            True,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotify,
            True,
            True,
            False,
        ),
    )
    remote_phone_number = Field(type=str, required=False)
    no_answer_setting = Field(type=CommPilotExpressSRNoAnswer, required=True)
    incoming_call_notify = Field(type=CommPilotExpressSREmailNotify, required=True)


class CommPilotExpressSRAvailableOutOfOfficeModify(OCIType):
    """
    CommPilot Express SR Available Out Of Office Configuration used in the context of
    a modify.
    """

    ELEMENTS = (
        ElementInfo(
            "remote_phone_number", "remotePhoneNumber", str, False, False, False,
        ),
        ElementInfo(
            "no_answer_setting",
            "noAnswerSetting",
            CommPilotExpressSRNoAnswerModify,
            True,
            False,
            False,
        ),
        ElementInfo(
            "incoming_call_notify",
            "incomingCallNotify",
            CommPilotExpressSREmailNotifyModify,
            True,
            False,
            False,
        ),
    )
    remote_phone_number = Field(type=str, required=False)
    no_answer_setting = Field(type=CommPilotExpressSRNoAnswerModify, required=False)
    incoming_call_notify = Field(
        type=CommPilotExpressSREmailNotifyModify, required=False,
    )


class SystemSIPDeviceTypeAddRequest18sp1V2(OCIType):
    """
    Request to add a sip device type.
    The response is either SuccessResponse or ErrorResponse.
    The following elements are only used in XS data mode:
      enable3G4GContinuity, use value "false" in AS data mode
    The following elements are only used in AS data mode:
      holdAnnouncementMethod, use value "useInactive" in XS data mode
      supportRFC3398, use value "false" in XS data mode
    The following element values are only applicable in AS data mode:
      holdNormalization=useRfc3264Hold will raise an error in XS data mode
        Replaced by: SystemSIPDeviceTypeAddRequest19.
    """

    ELEMENTS = (
        ElementInfo("device_type", "deviceType", str, False, True, False),
        ElementInfo(
            "number_of_ports", "numberOfPorts", UnboundedPositiveInt, True, True, False,
        ),
        ElementInfo("profile", "profile", str, False, True, False),
        ElementInfo(
            "registration_capable", "registrationCapable", bool, False, True, False,
        ),
        ElementInfo(
            "is_conference_device", "isConferenceDevice", bool, False, True, False,
        ),
        ElementInfo(
            "is_mobility_manager_device",
            "isMobilityManagerDevice",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_music_on_hold_device", "isMusicOnHoldDevice", bool, False, True, False,
        ),
        ElementInfo("hold_normalization", "holdNormalization", str, False, True, False),
        ElementInfo(
            "hold_announcement_method",
            "holdAnnouncementMethod",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("is_trusted", "isTrusted", bool, False, True, False),
        ElementInfo("e164_capable", "E164Capable", bool, False, True, False),
        ElementInfo("route_advance", "routeAdvance", bool, False, True, False),
        ElementInfo(
            "forwarding_override", "forwardingOverride", bool, False, True, False,
        ),
        ElementInfo(
            "wireless_integration", "wirelessIntegration", bool, False, True, False,
        ),
        ElementInfo(
            "web_based_config_url", "webBasedConfigURL", str, False, False, False,
        ),
        ElementInfo("is_video_capable", "isVideoCapable", bool, False, True, False),
        ElementInfo("pbx_integration", "PBXIntegration", bool, False, True, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "cpe_device_options",
            "cpeDeviceOptions",
            CPEDeviceOptions16sp1,
            True,
            False,
            False,
        ),
        ElementInfo(
            "early_media_support", "earlyMediaSupport", str, False, True, False,
        ),
        ElementInfo(
            "authenticate_refer", "authenticateRefer", bool, False, True, False,
        ),
        ElementInfo(
            "auto_config_soft_client", "autoConfigSoftClient", bool, False, True, False,
        ),
        ElementInfo(
            "authentication_mode", "authenticationMode", str, False, True, False,
        ),
        ElementInfo(
            "requires_broad_works_digit_collection",
            "requiresBroadWorksDigitCollection",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_broad_works_call_waiting_tone",
            "requiresBroadWorksCallWaitingTone",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_mwi_subscription",
            "requiresMWISubscription",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_history_info_header_on_access_side",
            "useHistoryInfoHeaderOnAccessSide",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "advice_of_charge_capable",
            "adviceOfChargeCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo(
            "support_call_center_mime_type",
            "supportCallCenterMIMEType",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("trunk_mode", "trunkMode", str, False, True, False),
        ElementInfo(
            "add_p_called_party_id", "addPCalledPartyId", bool, False, True, False,
        ),
        ElementInfo(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo(
            "enable3_g4_g_continuity", "enable3G4GContinuity", bool, False, True, False,
        ),
        ElementInfo(
            "support_emergency_disconnect_control",
            "supportEmergencyDisconnectControl",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_type_configuration_option",
            "deviceTypeConfigurationOption",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("support_rfc3398", "supportRFC3398", bool, False, True, False),
    )
    device_type = Field(type=str, required=True)
    number_of_ports = Field(type=UnboundedPositiveInt, required=True)
    profile = Field(type=str, required=True)
    registration_capable = Field(type=bool, required=True)
    is_conference_device = Field(type=bool, required=True)
    is_mobility_manager_device = Field(type=bool, required=True)
    is_music_on_hold_device = Field(type=bool, required=True)
    hold_normalization = Field(type=str, required=True)
    hold_announcement_method = Field(type=str, required=True)
    is_trusted = Field(type=bool, required=True)
    e164_capable = Field(type=bool, required=True)
    route_advance = Field(type=bool, required=True)
    forwarding_override = Field(type=bool, required=True)
    wireless_integration = Field(type=bool, required=True)
    web_based_config_url = Field(type=str, required=False)
    is_video_capable = Field(type=bool, required=True)
    pbx_integration = Field(type=bool, required=True)
    static_registration_capable = Field(type=bool, required=True)
    cpe_device_options = Field(type=CPEDeviceOptions16sp1, required=False)
    early_media_support = Field(type=str, required=True)
    authenticate_refer = Field(type=bool, required=True)
    auto_config_soft_client = Field(type=bool, required=True)
    authentication_mode = Field(type=str, required=True)
    requires_broad_works_digit_collection = Field(type=bool, required=True)
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True)
    requires_mwi_subscription = Field(type=bool, required=True)
    use_history_info_header_on_access_side = Field(type=bool, required=True)
    advice_of_charge_capable = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    support_call_center_mime_type = Field(type=bool, required=True)
    trunk_mode = Field(type=str, required=True)
    add_p_called_party_id = Field(type=bool, required=True)
    support_identity_in_update_and_re_invite = Field(type=bool, required=True)
    unscreened_presentation_identity_policy = Field(type=str, required=True)
    enable3_g4_g_continuity = Field(type=bool, required=True)
    support_emergency_disconnect_control = Field(type=bool, required=True)
    device_type_configuration_option = Field(type=str, required=True)
    support_rfc3398 = Field(type=bool, required=True)


class SystemSIPDeviceTypeAddRequest21sp1V2(OCIType):
    """
    Request to add a sip device type.
    The response is either SuccessResponse or ErrorResponse.
    The following elements are only used in the XS data mode and ignored in the AS data mode:
      enhancedForICS
      supports3G4GContinuity
      publishesOwnPresence, use value "false" in AS data mode
      locationNetwork, use value "Fixed" in AS data mode

    The following elements are only used in AS data mode and ignored in the XS data mode:
      supportRFC3398, use value "false" in XS data mode
      supportClientSessionInfo, use value "false" in XS data mode
      supportCallInfoConferenceSubscriptionURI, use value "false" in XS data mode
      supportRemotePartyInfo, use value "false" in XS data mode
      bypassMediaTreatment, use value "false" in XS data mode
      supportCauseParameter, use value "false" in XS data mode

    The following values for element profile are only used in AS data mode and an
    error is returned in the XS data mode:
      Non-intelligent Device Addressing
      Intelligent Device Addressing

    The following logic applies to these elements:
      macInCert
      macInNonRequestURI
      The two elements are mutually exclusive.
      When both are set to true, the command fails.

      Replaced by: SystemSIPDeviceTypeAddRequest22 in AS data mode.
    """

    ELEMENTS = (
        ElementInfo("device_type", "deviceType", str, False, True, False),
        ElementInfo(
            "number_of_ports", "numberOfPorts", UnboundedPositiveInt, True, True, False,
        ),
        ElementInfo("profile", "profile", str, False, True, False),
        ElementInfo(
            "registration_capable", "registrationCapable", bool, False, True, False,
        ),
        ElementInfo(
            "is_conference_device", "isConferenceDevice", bool, False, True, False,
        ),
        ElementInfo(
            "is_mobility_manager_device",
            "isMobilityManagerDevice",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "is_music_on_hold_device", "isMusicOnHoldDevice", bool, False, True, False,
        ),
        ElementInfo("hold_normalization", "holdNormalization", str, False, True, False),
        ElementInfo(
            "hold_announcement_method",
            "holdAnnouncementMethod",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("is_trusted", "isTrusted", bool, False, True, False),
        ElementInfo("e164_capable", "E164Capable", bool, False, True, False),
        ElementInfo("route_advance", "routeAdvance", bool, False, True, False),
        ElementInfo(
            "forwarding_override", "forwardingOverride", bool, False, True, False,
        ),
        ElementInfo(
            "wireless_integration", "wirelessIntegration", bool, False, True, False,
        ),
        ElementInfo(
            "web_based_config_url", "webBasedConfigURL", str, False, False, False,
        ),
        ElementInfo("is_video_capable", "isVideoCapable", bool, False, True, False),
        ElementInfo("pbx_integration", "PBXIntegration", bool, False, True, False),
        ElementInfo(
            "static_registration_capable",
            "staticRegistrationCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "cpe_device_options",
            "cpeDeviceOptions",
            CPEDeviceOptions21sp1,
            True,
            False,
            False,
        ),
        ElementInfo(
            "early_media_support", "earlyMediaSupport", str, False, True, False,
        ),
        ElementInfo(
            "authenticate_refer", "authenticateRefer", bool, False, True, False,
        ),
        ElementInfo(
            "auto_config_soft_client", "autoConfigSoftClient", bool, False, True, False,
        ),
        ElementInfo(
            "authentication_mode", "authenticationMode", str, False, True, False,
        ),
        ElementInfo(
            "requires_broad_works_digit_collection",
            "requiresBroadWorksDigitCollection",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_broad_works_call_waiting_tone",
            "requiresBroadWorksCallWaitingTone",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "requires_mwi_subscription",
            "requiresMWISubscription",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "use_history_info_header_on_access_side",
            "useHistoryInfoHeaderOnAccessSide",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "advice_of_charge_capable",
            "adviceOfChargeCapable",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("reset_event", "resetEvent", str, False, False, False),
        ElementInfo(
            "support_call_center_mime_type",
            "supportCallCenterMIMEType",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo("trunk_mode", "trunkMode", str, False, True, False),
        ElementInfo(
            "add_p_called_party_id", "addPCalledPartyId", bool, False, True, False,
        ),
        ElementInfo(
            "support_identity_in_update_and_re_invite",
            "supportIdentityInUpdateAndReInvite",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "unscreened_presentation_identity_policy",
            "unscreenedPresentationIdentityPolicy",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("enhanced_for_ics", "enhancedForICS", bool, False, True, False),
        ElementInfo(
            "support_emergency_disconnect_control",
            "supportEmergencyDisconnectControl",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "device_type_configuration_option",
            "deviceTypeConfigurationOption",
            str,
            False,
            True,
            False,
        ),
        ElementInfo("support_rfc3398", "supportRFC3398", bool, False, True, False),
        ElementInfo(
            "static_line_ordering", "staticLineOrdering", bool, False, True, False,
        ),
        ElementInfo(
            "support_client_session_info",
            "supportClientSessionInfo",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "support_call_info_conference_subscription_uri",
            "supportCallInfoConferenceSubscriptionURI",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "support_remote_party_info",
            "supportRemotePartyInfo",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "support_visual_device_management",
            "supportVisualDeviceManagement",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "bypass_media_treatment", "bypassMediaTreatment", bool, False, True, False,
        ),
        ElementInfo(
            "supports3_g4_g_continuity",
            "supports3G4GContinuity",
            bool,
            False,
            True,
            False,
        ),
        ElementInfo(
            "publishes_own_presence", "publishesOwnPresence", bool, False, True, False,
        ),
        ElementInfo(
            "support_cause_parameter", "supportCauseParameter", bool, False, True, False,
        ),
        ElementInfo("location_network", "locationNetwork", str, False, True, False),
    )
    device_type = Field(type=str, required=True)
    number_of_ports = Field(type=UnboundedPositiveInt, required=True)
    profile = Field(type=str, required=True)
    registration_capable = Field(type=bool, required=True)
    is_conference_device = Field(type=bool, required=True)
    is_mobility_manager_device = Field(type=bool, required=True)
    is_music_on_hold_device = Field(type=bool, required=True)
    hold_normalization = Field(type=str, required=True)
    hold_announcement_method = Field(type=str, required=True)
    is_trusted = Field(type=bool, required=True)
    e164_capable = Field(type=bool, required=True)
    route_advance = Field(type=bool, required=True)
    forwarding_override = Field(type=bool, required=True)
    wireless_integration = Field(type=bool, required=True)
    web_based_config_url = Field(type=str, required=False)
    is_video_capable = Field(type=bool, required=True)
    pbx_integration = Field(type=bool, required=True)
    static_registration_capable = Field(type=bool, required=True)
    cpe_device_options = Field(type=CPEDeviceOptions21sp1, required=False)
    early_media_support = Field(type=str, required=True)
    authenticate_refer = Field(type=bool, required=True)
    auto_config_soft_client = Field(type=bool, required=True)
    authentication_mode = Field(type=str, required=True)
    requires_broad_works_digit_collection = Field(type=bool, required=True)
    requires_broad_works_call_waiting_tone = Field(type=bool, required=True)
    requires_mwi_subscription = Field(type=bool, required=True)
    use_history_info_header_on_access_side = Field(type=bool, required=True)
    advice_of_charge_capable = Field(type=bool, required=True)
    reset_event = Field(type=str, required=False)
    support_call_center_mime_type = Field(type=bool, required=True)
    trunk_mode = Field(type=str, required=True)
    add_p_called_party_id = Field(type=bool, required=True)
    support_identity_in_update_and_re_invite = Field(type=bool, required=True)
    unscreened_presentation_identity_policy = Field(type=str, required=True)
    enhanced_for_ics = Field(type=bool, required=True)
    support_emergency_disconnect_control = Field(type=bool, required=True)
    device_type_configuration_option = Field(type=str, required=True)
    support_rfc3398 = Field(type=bool, required=True)
    static_line_ordering = Field(type=bool, required=True)
    support_client_session_info = Field(type=bool, required=True)
    support_call_info_conference_subscription_uri = Field(type=bool, required=True)
    support_remote_party_info = Field(type=bool, required=True)
    support_visual_device_management = Field(type=bool, required=True)
    bypass_media_treatment = Field(type=bool, required=True)
    supports3_g4_g_continuity = Field(type=bool, required=True)
    publishes_own_presence = Field(type=bool, required=True)
    support_cause_parameter = Field(type=bool, required=True)
    location_network = Field(type=str, required=True)


class TrunkAddressingMultipleContactModify22(OCIType):
    """
    Trunk group endpoint that can have multiple contacts.
    alternateTrunkIdentityDomainName is only used in XS mode.
    Setting alternateTrunkIdentity or alternateTrunkIdentityDomain to nil in XS mode,
    the other one paremter should be set to nil at the same time.
    The following elements are only used in AS data mode and are ignored in XS data
    mode:
     physicalLocation
    """

    ELEMENTS = (
        ElementInfo(
            "trunk_group_device_endpoint",
            "trunkGroupDeviceEndpoint",
            TrunkGroupDeviceMultipleContactEndpointModify22,
            True,
            False,
            False,
        ),
        ElementInfo(
            "enterprise_trunk_name", "enterpriseTrunkName", str, False, False, False,
        ),
        ElementInfo(
            "alternate_trunk_identity",
            "alternateTrunkIdentity",
            str,
            False,
            False,
            False,
        ),
        ElementInfo(
            "alternate_trunk_identity_domain",
            "alternateTrunkIdentityDomain",
            str,
            False,
            False,
            False,
        ),
        ElementInfo("physical_location", "physicalLocation", str, False, False, False),
    )
    trunk_group_device_endpoint = Field(
        type=TrunkGroupDeviceMultipleContactEndpointModify22, required=False,
    )
    enterprise_trunk_name = Field(type=str, required=False)
    alternate_trunk_identity = Field(type=str, required=False)
    alternate_trunk_identity_domain = Field(type=str, required=False)
    physical_location = Field(type=str, required=False)
