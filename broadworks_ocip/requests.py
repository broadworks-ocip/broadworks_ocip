"""Broadworks OCI-P Interface Request Classes"""
# Autogenerated from the Broadworks XML Schemas.
# Do not edit as changes will be overwritten.
# Generated on 2022-01-31T15:41:42.585023
# fmt: off
from typing import List
from typing import Tuple

import attr

import broadworks_ocip.types as OCI
from .base import ElementInfo as E
from .base import OCIRequest


@attr.s(slots=True, frozen=True, kw_only=True)
class AuthenticationRequest(OCIRequest):
    """
    ``AuthenticationRequest()`` is 1st stage of the 2 stage OCI login process.


    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class AuthenticationVerifyRequest(OCIRequest):
    """
    ``AuthenticationVerifyRequest()`` is used to authenticate a user using the user Id and
    password.

    The response is a ``AuthenticationVerifyResponse()`` or an ``ErrorResponse()``

    Replaced By: ``AuthenticationVerifyRequest14sp8()``

    Attributes:
        user_id: userId
        password: password
    """

    user_id: str = attr.ib()
    password: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("password", "password", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class AuthenticationVerifyRequest14sp8(OCIRequest):
    """
    ``AuthenticationVerifyRequest14sp8()`` is used to authenticate a user either by
    userId/password, userId/sip username/sip password, dn/passcode or a token previously
    authorized with the ``ExternalAuthenticationAuthorizeTokenRequest()``.

    The phone number may be any DN associated with a user.

    The response is a ``AuthenticationVerifyResponse14sp8()`` or an ``ErrorResponse()``

    Attributes:
        user_id: userId
        password: password
        phone_number: phoneNumber
        passcode: passcode
        login_token: loginToken
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
    """

    user_id: str = attr.ib()
    password: str = attr.ib()
    phone_number: str = attr.ib()
    passcode: str = attr.ib()
    login_token: str = attr.ib()
    sip_authentication_user_name: str = attr.ib()
    sip_authentication_password: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("password", "password", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("passcode", "passcode", str, is_required=True),
            E("login_token", "loginToken", str, is_required=True),
            E(
                "sip_authentication_user_name",
                "sipAuthenticationUserName",
                str,
                is_required=True,
            ),
            E(
                "sip_authentication_password",
                "sipAuthenticationPassword",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class AvailabilityTestRequest(OCIRequest):
    """
    ``AvailabilityTestRequest()`` is for high-availability support.

    Response is either ``SuccessResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class DeviceManagementFileAuthLocationGetRequest(OCIRequest):
    """
    Get the address and credentials of the File Repository hosting the requested access
    device file.

    Also get the file name and path on the File Repository.

    The response is either a ``DeviceManagementFileAuthLocationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        device_access_protocol: deviceAccessProtocol
        device_access_method: deviceAccessMethod
        device_access_uri: deviceAccessURI
        access_device_user_name: accessDeviceUserName
        access_device_user_password: accessDeviceUserPassword
        signed_password: signedPassword
        mac_address: macAddress
        realm_name: realmName
        digest_ha1_complement: digestHa1Complement
        digest_response: digestResponse
    """

    device_access_protocol: str = attr.ib()
    device_access_method: str = attr.ib()
    device_access_uri: str = attr.ib()
    access_device_user_name: str = attr.ib(default=None)
    access_device_user_password: str = attr.ib(default=None)
    signed_password: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    realm_name: str = attr.ib(default=None)
    digest_ha1_complement: str = attr.ib(default=None)
    digest_response: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_access_protocol", "deviceAccessProtocol", str, is_required=True),
            E("device_access_method", "deviceAccessMethod", str, is_required=True),
            E("device_access_uri", "deviceAccessURI", str, is_required=True),
            E("access_device_user_name", "accessDeviceUserName", str),
            E("access_device_user_password", "accessDeviceUserPassword", str),
            E("signed_password", "signedPassword", str),
            E("mac_address", "macAddress", str),
            E("realm_name", "realmName", str),
            E("digest_ha1_complement", "digestHa1Complement", str),
            E("digest_response", "digestResponse", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class DeviceManagementFileAuthLocationGetRequest17(OCIRequest):
    """
    Get the address and credentials of the File Repository hosting the requested access
    device file.

    Also get the file name and path on the File Repository.

    The response is either a ``DeviceManagementFileAuthLocationGetResponse17()`` or an
    ``ErrorResponse()``. Replaced by: ``DeviceManagementFileAuthLocationGetRequest18()``

    Attributes:
        device_access_protocol: deviceAccessProtocol
        device_access_method: deviceAccessMethod
        device_access_uri: deviceAccessURI
        access_device_user_name: accessDeviceUserName
        access_device_user_password: accessDeviceUserPassword
        signed_password: signedPassword
        mac_address: macAddress
        realm_name: realmName
        digest_ha1_complement: digestHa1Complement
        digest_response: digestResponse
    """

    device_access_protocol: str = attr.ib()
    device_access_method: str = attr.ib()
    device_access_uri: str = attr.ib()
    access_device_user_name: str = attr.ib(default=None)
    access_device_user_password: str = attr.ib(default=None)
    signed_password: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    realm_name: str = attr.ib(default=None)
    digest_ha1_complement: str = attr.ib(default=None)
    digest_response: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_access_protocol", "deviceAccessProtocol", str, is_required=True),
            E("device_access_method", "deviceAccessMethod", str, is_required=True),
            E("device_access_uri", "deviceAccessURI", str, is_required=True),
            E("access_device_user_name", "accessDeviceUserName", str),
            E("access_device_user_password", "accessDeviceUserPassword", str),
            E("signed_password", "signedPassword", str),
            E("mac_address", "macAddress", str),
            E("realm_name", "realmName", str),
            E("digest_ha1_complement", "digestHa1Complement", str),
            E("digest_response", "digestResponse", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class DeviceManagementFileAuthLocationGetRequest18(OCIRequest):
    """
    Get the address and credentials of the File Repository hosting the requested access
    device file.

    Also get the file name and path on the File Repository.

    The response is either a ``DeviceManagementFileAuthLocationGetResponse18()`` or an
    ``ErrorResponse()``. Replaced by: ``DeviceManagementFileAuthLocationGetRequest21()``.

    Attributes:
        device_access_protocol: deviceAccessProtocol
        device_access_method: deviceAccessMethod
        device_access_uri: deviceAccessURI
        access_device_user_name: accessDeviceUserName
        access_device_user_password: accessDeviceUserPassword
        signed_password: signedPassword
        mac_address: macAddress
        realm_name: realmName
        digest_ha1_complement: digestHa1Complement
        digest_response: digestResponse
    """

    device_access_protocol: str = attr.ib()
    device_access_method: str = attr.ib()
    device_access_uri: str = attr.ib()
    access_device_user_name: str = attr.ib(default=None)
    access_device_user_password: str = attr.ib(default=None)
    signed_password: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    realm_name: str = attr.ib(default=None)
    digest_ha1_complement: str = attr.ib(default=None)
    digest_response: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_access_protocol", "deviceAccessProtocol", str, is_required=True),
            E("device_access_method", "deviceAccessMethod", str, is_required=True),
            E("device_access_uri", "deviceAccessURI", str, is_required=True),
            E("access_device_user_name", "accessDeviceUserName", str),
            E("access_device_user_password", "accessDeviceUserPassword", str),
            E("signed_password", "signedPassword", str),
            E("mac_address", "macAddress", str),
            E("realm_name", "realmName", str),
            E("digest_ha1_complement", "digestHa1Complement", str),
            E("digest_response", "digestResponse", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class DeviceManagementFileAuthLocationGetRequest21(OCIRequest):
    """
    Get the address and credentials of the File Repository hosting the requested access
    device file.

    Also get the file name and path on the File Repository.

    The response is either ``DeviceManagementFileAuthLocationGetResponse21()`` or
    ``ErrorResponse()``. The following elements are only used in AS data mode and will
    fail in HSS data mode: deviceToken

    Attributes:
        device_access_protocol: deviceAccessProtocol
        device_access_method: deviceAccessMethod
        device_access_uri: deviceAccessURI
        access_device_user_name: accessDeviceUserName
        access_device_user_password: accessDeviceUserPassword
        device_token: deviceToken
        signed_password: signedPassword
        mac_address: macAddress
        realm_name: realmName
        digest_ha1_complement: digestHa1Complement
        digest_response: digestResponse
    """

    device_access_protocol: str = attr.ib()
    device_access_method: str = attr.ib()
    device_access_uri: str = attr.ib()
    access_device_user_name: str = attr.ib(default=None)
    access_device_user_password: str = attr.ib(default=None)
    device_token: str = attr.ib(default=None)
    signed_password: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    realm_name: str = attr.ib(default=None)
    digest_ha1_complement: str = attr.ib(default=None)
    digest_response: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_access_protocol", "deviceAccessProtocol", str, is_required=True),
            E("device_access_method", "deviceAccessMethod", str, is_required=True),
            E("device_access_uri", "deviceAccessURI", str, is_required=True),
            E("access_device_user_name", "accessDeviceUserName", str),
            E("access_device_user_password", "accessDeviceUserPassword", str),
            E("device_token", "deviceToken", str),
            E("signed_password", "signedPassword", str),
            E("mac_address", "macAddress", str),
            E("realm_name", "realmName", str),
            E("digest_ha1_complement", "digestHa1Complement", str),
            E("digest_response", "digestResponse", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class DeviceManagementPutFileRequest(OCIRequest):
    """
    Informs BroadWorks that a file was uploaded to the repository.

    The response is always a ``SuccessResponse()``.

    Attributes:
        device_access_uri: deviceAccessURI
        ip_address: ipAddress
    """

    device_access_uri: str = attr.ib()
    ip_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_access_uri", "deviceAccessURI", str, is_required=True),
            E("ip_address", "ipAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerActivationRequest(OCIRequest):
    """
    Activates or Deactivates the BroadWorks Mobile Manager.

    The deactivationReason is required when isActive is set to false.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        is_active: isActive
        deactivation_reason: deactivationReason
    """

    service_provider_id: str = attr.ib()
    is_active: bool = attr.ib()
    deactivation_reason: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("deactivation_reason", "deactivationReason", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerAddHomeZoneRequest(OCIRequest):
    """
    Add a home zone to the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        home_zone_domain_name: homeZoneDomainName
        mobile_country_code: mobileCountryCode
        mobile_network_code: mobileNetworkCode
        location_area_code: locationAreaCode
        cell_identity: cellIdentity
    """

    service_provider_id: str = attr.ib()
    home_zone_domain_name: str = attr.ib()
    mobile_country_code: str = attr.ib()
    mobile_network_code: str = attr.ib()
    location_area_code: str = attr.ib()
    cell_identity: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("home_zone_domain_name", "homeZoneDomainName", str, is_required=True),
            E("mobile_country_code", "mobileCountryCode", str, is_required=True),
            E("mobile_network_code", "mobileNetworkCode", str, is_required=True),
            E("location_area_code", "locationAreaCode", str, is_required=True),
            E("cell_identity", "cellIdentity", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerAddRequest(OCIRequest):
    """
    Add the BroadWorks Mobile Manager.

    Only one BroadWorks Mobile Manager can be added per enterprise.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        information_file: informationFile
        certificate_file: certificateFile
        is_active: isActive
        local_to_carrier: localToCarrier
        max_tx_per_second_enabled: maxTxPerSecondEnabled
        max_tx_per_second: maxTxPerSecond
        tldn_enabled: tldnEnabled
        generic_number_enabled: genericNumberEnabled
        mobile_state_check_enabled: mobileStateCheckEnabled
        location_based_services_enabled: locationBasedServicesEnabled
    """

    service_provider_id: str = attr.ib()
    information_file: str = attr.ib()
    certificate_file: str = attr.ib()
    is_active: bool = attr.ib()
    local_to_carrier: bool = attr.ib()
    max_tx_per_second_enabled: bool = attr.ib()
    max_tx_per_second: int = attr.ib(default=None)
    tldn_enabled: bool = attr.ib()
    generic_number_enabled: bool = attr.ib()
    mobile_state_check_enabled: bool = attr.ib()
    location_based_services_enabled: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("information_file", "informationFile", str, is_required=True),
            E("certificate_file", "certificateFile", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("local_to_carrier", "localToCarrier", bool, is_required=True),
            E(
                "max_tx_per_second_enabled",
                "maxTxPerSecondEnabled",
                bool,
                is_required=True,
            ),
            E("max_tx_per_second", "maxTxPerSecond", int),
            E("tldn_enabled", "tldnEnabled", bool, is_required=True),
            E("generic_number_enabled", "genericNumberEnabled", bool, is_required=True),
            E(
                "mobile_state_check_enabled",
                "mobileStateCheckEnabled",
                bool,
                is_required=True,
            ),
            E(
                "location_based_services_enabled",
                "locationBasedServicesEnabled",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerDeleteHomeZoneListRequest(OCIRequest):
    """
    Delete a list of home zones from the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        home_zone_id: homeZoneId
    """

    service_provider_id: str = attr.ib()
    home_zone_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerDeleteHomeZoneRequest(OCIRequest):
    """
    Delete a home zone from the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        home_zone_id: homeZoneId
    """

    service_provider_id: str = attr.ib()
    home_zone_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerDeleteRequest(OCIRequest):
    """
    Delete the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerGetDomainListRequest(OCIRequest):
    """
    Get the list of domains of the BroadWorks Mobile Manager.

    The response is either ``EnterpriseBroadWorksMobileManagerGetDomainListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerGetHomeZoneListRequest(OCIRequest):
    """
    Get the list of home zones of the BroadWorks Mobile Manager.

    The response is either ``EnterpriseBroadWorksMobileManagerGetHomeZoneListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerGetHomeZoneRequest(OCIRequest):
    """
    Get a home zone from the BroadWorks Mobile Manager.

    The response is either ``EnterpriseBroadWorksMobileManagerGetHomeZoneResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        home_zone_id: homeZoneId
    """

    service_provider_id: str = attr.ib()
    home_zone_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerGetRequest(OCIRequest):
    """
    Get the BroadWorks Mobile Manager.

    The response is either ``EnterpriseBroadWorksMobileManagerGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerModifyHomeZoneRequest(OCIRequest):
    """
    Modify an existing home zone in the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        home_zone_id: homeZoneId
        home_zone_domain_name: homeZoneDomainName
        mobile_country_code: mobileCountryCode
        mobile_network_code: mobileNetworkCode
        location_area_code: locationAreaCode
        cell_identity: cellIdentity
    """

    service_provider_id: str = attr.ib()
    home_zone_id: str = attr.ib()
    home_zone_domain_name: str = attr.ib(default=None)
    mobile_country_code: str = attr.ib(default=None)
    mobile_network_code: str = attr.ib(default=None)
    location_area_code: str = attr.ib(default=None)
    cell_identity: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True),
            E("home_zone_domain_name", "homeZoneDomainName", str),
            E("mobile_country_code", "mobileCountryCode", str),
            E("mobile_network_code", "mobileNetworkCode", str),
            E("location_area_code", "locationAreaCode", str),
            E("cell_identity", "cellIdentity", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerModifyRequest(OCIRequest):
    """
    Modify the BroadWorks Mobile Manager settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        information_file: informationFile
        certificate_file: certificateFile
        local_to_carrier: localToCarrier
        max_tx_per_second_enabled: maxTxPerSecondEnabled
        max_tx_per_second: maxTxPerSecond
        tldn_enabled: tldnEnabled
        generic_number_enabled: genericNumberEnabled
        mobile_state_check_enabled: mobileStateCheckEnabled
        location_based_services_enabled: locationBasedServicesEnabled
    """

    service_provider_id: str = attr.ib()
    information_file: str = attr.ib(default=None)
    certificate_file: str = attr.ib(default=None)
    local_to_carrier: bool = attr.ib(default=None)
    max_tx_per_second_enabled: bool = attr.ib(default=None)
    max_tx_per_second: int = attr.ib(default=None)
    tldn_enabled: bool = attr.ib(default=None)
    generic_number_enabled: bool = attr.ib(default=None)
    mobile_state_check_enabled: bool = attr.ib(default=None)
    location_based_services_enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("information_file", "informationFile", str),
            E("certificate_file", "certificateFile", str),
            E("local_to_carrier", "localToCarrier", bool),
            E("max_tx_per_second_enabled", "maxTxPerSecondEnabled", bool),
            E("max_tx_per_second", "maxTxPerSecond", int),
            E("tldn_enabled", "tldnEnabled", bool),
            E("generic_number_enabled", "genericNumberEnabled", bool),
            E("mobile_state_check_enabled", "mobileStateCheckEnabled", bool),
            E("location_based_services_enabled", "locationBasedServicesEnabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobileManagerSendCarrierFilesRequest(OCIRequest):
    """
    Sends an email with the carrier information and certificate files.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        email_to: emailTo
    """

    service_provider_id: str = attr.ib()
    email_to: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("email_to", "emailTo", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest(OCIRequest):
    """
    Request a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any user.

    The response is either
    ``EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileAddAgentListRequest(OCIRequest):
    """
    Add agent(s) to a Agent Threshold Profile.

    When an agent is assigned (added) to a profile, it is automatically unassigned
    (deleted) from the previous profile it was assigned to.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        profile_name: profileName
        agent_user_id: agentUserId
    """

    service_provider_id: str = attr.ib()
    profile_name: str = attr.ib()
    agent_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileAddRequest(OCIRequest):
    """
    Add a new Call Center Agent Threshold Profile in an Enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        profile_name: profileName
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address: notificationEmailAddress
        agent_user_id: agentUserId
    """

    service_provider_id: str = attr.ib()
    profile_name: str = attr.ib()
    profile_description: str = attr.ib(default=None)
    threshold_current_call_state_idle_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_idle_time_red: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_red: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_yellow: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_red: int = attr.ib(default=None)
    threshold_average_busy_in_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_in_time_red: int = attr.ib(default=None)
    threshold_average_busy_out_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_out_time_red: int = attr.ib(default=None)
    threshold_average_wrap_up_time_yellow: int = attr.ib(default=None)
    threshold_average_wrap_up_time_red: int = attr.ib(default=None)
    enable_notification_email: bool = attr.ib()
    notification_email_address: List[str] = attr.ib(default=None)
    agent_user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E(
                "enable_notification_email",
                "enableNotificationEmail",
                bool,
                is_required=True,
            ),
            E(
                "notification_email_address",
                "notificationEmailAddress",
                str,
                is_array=True,
            ),
            E("agent_user_id", "agentUserId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileDeleteAgentListRequest(OCIRequest):
    """
    Delete agent(s) from a Agent Threshold Profile.

    Agents cannot be unassigned (deleted) directly from the default profile, they need to
    be assigned (added) to a different profile.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        profile_name: profileName
        agent_user_id: agentUserId
    """

    service_provider_id: str = attr.ib()
    profile_name: str = attr.ib()
    agent_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileDeleteRequest(OCIRequest):
    """
    Deletes an existing Call Center Agent Threshold Profile in an Enterprise.

    The default profile cannot be deleted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        profile_name: profileName
    """

    service_provider_id: str = attr.ib()
    profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileGetListRequest(OCIRequest):
    """
    Get the list of Call Center Agent Threshold Profiles in the Enterprise.

    The response is either ``EnterpriseCallCenterAgentThresholdProfileGetListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileGetRequest(OCIRequest):
    """
    Gets an existing non-default Call Center Agent Threshold Profile in an Enterprise.

    The response is either a ``EnterpriseCallCenterAgentThresholdProfileGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        profile_name: profileName
    """

    service_provider_id: str = attr.ib()
    profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeAddRequest(OCIRequest):
    """
    Add a Call Center Agent Unavailable Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        is_active: isActive
        code: code
        description: description
    """

    service_provider_id: str = attr.ib()
    is_active: bool = attr.ib()
    code: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("code", "code", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeDeleteRequest(OCIRequest):
    """
    Delete a Call Center Agent Unavailable Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeGetListRequest(OCIRequest):
    """
    Get the list of Call Center Agent Unavailable Codes.

    The response is either ``EnterpriseCallCenterAgentUnavailableCodeGetListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeGetRequest(OCIRequest):
    """
    Get a Call Center Agent Unavailable Code.

    The response is either ``EnterpriseCallCenterAgentUnavailableCodeGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeModifyRequest(OCIRequest):
    """
    Modify a Call Center Agent Unavailable Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
        is_active: isActive
        description: description
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest(OCIRequest):
    """
    Request the enterprise level data associated with Call Center Agents Unavailable Code
    Settings.

    The response is either an
    ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse()`` or an
    ``ErrorResponse()``. Replaced by
    ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest17sp4()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest17sp4(OCIRequest):
    """
    Request the enterprise level data associated with Call Center Agents Unavailable Code
    Settings.

    The response is either an
    ``EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse17sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCallDispositionCodeAddRequest(OCIRequest):
    """
    Add a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
        is_active: isActive
        description: description
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCallDispositionCodeDeleteRequest(OCIRequest):
    """
    Delete a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCallDispositionCodeGetListRequest(OCIRequest):
    """
    Get the list of Call Center Call Disposition Codes.

    The response is either ``EnterpriseCallCenterCallDispositionCodeGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCallDispositionCodeGetRequest(OCIRequest):
    """
    Get a Call Center Call Disposition Code.

    The response is either ``EnterpriseCallCenterCallDispositionCodeGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCallDispositionCodeGetUsageListRequest(OCIRequest):
    """
    Get the list of Call Centers and Route Points using the specified disposition code.

    The response is either
    ``EnterpriseCallCenterCallDispositionCodeGetUsageListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCallDispositionCodeModifyRequest(OCIRequest):
    """
    Modify a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        code: code
        is_active: isActive
        description: description
    """

    service_provider_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCurrentAndPastDNISGetListRequest(OCIRequest):
    """
    Request to get all the past and current DNIS for the Call Center for the enterprise.

    The response is either ``EnterpriseCallCenterCurrentAndPastDNISGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_user_id: serviceUserId
    """

    service_provider_id: str = attr.ib()
    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingBrandingGetRequest(OCIRequest):
    """
    Request to get the enterprise branding information.

    The response is either ``EnterpriseCallCenterEnhancedReportingBrandingGetResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListRequest(OCIRequest):
    """
    Request to get all enabled call center report template for an enterprise.

    The response is either an
    ``EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingGetRequest(OCIRequest):
    """
    Request to get an enterprise level call center enhanced reporting setting.

    The response is either an ``EnterpriseCallCenterEnhancedReportingGetResponse()`` or an
    ``ErrorResponse()``. Replaced by
    ``EnterpriseCallCenterEnhancedReportingGetRequest19()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingGetRequest19(OCIRequest):
    """
    Request to get an enterprise level call center enhanced reporting setting.

    The response is either an ``EnterpriseCallCenterEnhancedReportingGetResponse19()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingModifyRequest(OCIRequest):
    """
    Request to modify enterprise level call center enhanced reporting settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``EnterpriseCallCenterEnhancedReportingModifyRequest19()``

    Attributes:
        service_provider_id: serviceProviderId
        reporting_server: reportingServer
        web_statistic_source: webStatisticSource
    """

    service_provider_id: str = attr.ib()
    reporting_server: str = attr.ib(default=None)
    web_statistic_source: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("reporting_server", "reportingServer", str),
            E("web_statistic_source", "webStatisticSource", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingModifyRequest19(OCIRequest):
    """
    Request to modify enterprise level call center enhanced reporting settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        reporting_server: reportingServer
    """

    service_provider_id: str = attr.ib()
    reporting_server: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("reporting_server", "reportingServer", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingReportTemplateDeleteRequest(OCIRequest):
    """
    Request to delete an enterprise level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingReportTemplateGetListRequest(OCIRequest):
    """
    Request to get enterprise level call center report template list.

    The response is either an
    ``EnterpriseCallCenterEnhancedReportingReportTemplateGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingReportTemplateGetRequest(OCIRequest):
    """
    Request to get an enterprise level call center report template.

    The response is either an
    ``EnterpriseCallCenterEnhancedReportingReportTemplateGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportDeleteRequest(OCIRequest):
    """
    Request to delete an enterprise level call center reporting scheduled report.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest(OCIRequest):
    """
    Request to get all the call center reporting scheduled report in an enterprise that
    uses a given enterprise level report template.

    The response is either a
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportGetRequest(OCIRequest):
    """
    Request to get an enterprise level call center reporting scheduled report.

    The response is either an
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterGetRequest(OCIRequest):
    """
    Request the enterprise level data associated with Call Center.

    The response is either an ``EnterpriseCallCenterGetResponse()`` or an
    ``ErrorResponse()``. Replaced by ``EnterpriseCallCenterGetRequest17sp4()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterGetRequest17sp4(OCIRequest):
    """
    Request the enterprise level data associated with Call Center.

    The response is either an ``EnterpriseCallCenterGetResponse17sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterGetRoutingPolicyRequest(OCIRequest):
    """
    Request the enterprise call center routing policy.

    The response is either an ``EnterpriseCallCenterGetRoutingPolicyResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterModifyRequest(OCIRequest):
    """
    Modify the enterprise level data associated with Call Center The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        service_provider_id: serviceProviderId
        use_system_default_guard_timer: useSystemDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
    """

    service_provider_id: str = attr.ib()
    use_system_default_guard_timer: bool = attr.ib(default=None)
    enable_guard_timer: bool = attr.ib(default=None)
    guard_timer_seconds: int = attr.ib(default=None)
    use_system_default_unavailable_settings: bool = attr.ib(default=None)
    force_agent_unavailable_on_dnd_activation: bool = attr.ib(default=None)
    force_agent_unavailable_on_personal_calls: bool = attr.ib(default=None)
    force_agent_unavailable_on_bounced_call_limit: bool = attr.ib(default=None)
    number_consecutive_bounced_calls_to_force_agent_unavailable: int = attr.ib(default=None)
    force_agent_unavailable_on_not_reachable: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_system_default_guard_timer", "useSystemDefaultGuardTimer", bool),
            E("enable_guard_timer", "enableGuardTimer", bool),
            E("guard_timer_seconds", "guardTimerSeconds", int),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCommonPhoneListDeleteListRequest(OCIRequest):
    """
    Delete one or more entries from an enterprise's common phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        entry_name: entryName
    """

    service_provider_id: str = attr.ib()
    entry_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("entry_name", "entryName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCommonPhoneListModifyRequest(OCIRequest):
    """
    Modify an entry in an enterprise's common phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        entry_name: entryName
        new_entry_name: newEntryName
        phone_number: phoneNumber
    """

    service_provider_id: str = attr.ib()
    entry_name: str = attr.ib()
    new_entry_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("entry_name", "entryName", str, is_required=True),
            E("new_entry_name", "newEntryName", str),
            E("phone_number", "phoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseDepartmentDeleteRequest(OCIRequest):
    """
    Delete a department from an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        enterprise_id: enterpriseId
        department_name: departmentName
    """

    enterprise_id: str = attr.ib()
    department_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseDepartmentGetAvailableParentListRequest(OCIRequest):
    """
    Get a list of enterprise level departments in an enterprise that could be the parent
    of the specified department.

    The department itself and all its decendents are not eligible to be the parent
    department.

    The response is either ``EnterpriseDepartmentGetAvailableParentListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        enterprise_id: enterpriseId
        department_name: departmentName
    """

    enterprise_id: str = attr.ib()
    department_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseDepartmentGetListRequest(OCIRequest):
    """
    Request a list of departments in an enterprise.

    You may request only the list of departments defined at the enterprise-level, or you
    may request the list of all departments in the enterprise including all the
    departments defined within the groups inside the enterprise.

    The response is either ``EnterpriseDepartmentGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        enterprise_id: enterpriseId
        include_group_departments: includeGroupDepartments
    """

    enterprise_id: str = attr.ib()
    include_group_departments: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E(
                "include_group_departments",
                "includeGroupDepartments",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkAddRequest(OCIRequest):
    """
    Request to add an enterprise trunk in an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``EnterpriseEnterpriseTrunkAddRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    maximum_reroute_attempts: int = attr.ib()
    route_exhaustion_action: str = attr.ib()
    route_exhaustion_forward_address: str = attr.ib(default=None)
    ordered_routing: str = attr.ib(default=None)
    priority_weighted_routing: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkAddRequest21(OCIRequest):
    """
    Request to add an enterprise trunk in an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
        enable_capacity_management: enableCapacityManagement
        max_active_calls: maxActiveCalls
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    maximum_reroute_attempts: int = attr.ib()
    route_exhaustion_action: str = attr.ib()
    route_exhaustion_forward_address: str = attr.ib(default=None)
    ordered_routing: str = attr.ib(default=None)
    priority_weighted_routing: str = attr.ib(default=None)
    enable_capacity_management: bool = attr.ib()
    max_active_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "enable_capacity_management",
                "enableCapacityManagement",
                bool,
                is_required=True,
            ),
            E("max_active_calls", "maxActiveCalls", int),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkAddUserListRequest(OCIRequest):
    """
    Request to add users to an enterprise trunk in an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkDeleteRequest(OCIRequest):
    """
    Request to delete an enterprise trunk in an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkDeleteUserListRequest(OCIRequest):
    """
    Request to delete users from an enterprise trunk in an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkForceAssignUserListRequest(OCIRequest):
    """
    Request to add users to an enterprise trunk in an enterprise.

    If the user is already assigned to another enterprise trunk, it will be unassigned
    from the old enterprise trunk and assigned to the new enterprise trunk specified in
    this request.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkGetListRequest(OCIRequest):
    """
    Request to get the list of all enterprise trunks defined in an enterprise.

    The response is either a ``EnterpriseEnterpriseTrunkGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkGetRequest(OCIRequest):
    """
    Request to get an enterprise trunk The response is either an
    ``EnterpriseEnterpriseTrunkGetResponse()`` or an ``ErrorResponse()``.

    Replaced by: ``EnterpriseEnterpriseTrunkGetRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkGetRequest21(OCIRequest):
    """
    Request to get an enterprise trunk The response is either an
    ``EnterpriseEnterpriseTrunkGetResponse21()`` or an ``ErrorResponse()``.


    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkModifyRequest(OCIRequest):
    """
    Request to modify an enterprise trunk in an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
        new_enterprise_trunk_name: newEnterpriseTrunkName
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
        enable_capacity_management: enableCapacityManagement
        max_active_calls: maxActiveCalls
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    new_enterprise_trunk_name: str = attr.ib(default=None)
    maximum_reroute_attempts: int = attr.ib(default=None)
    route_exhaustion_action: str = attr.ib(default=None)
    route_exhaustion_forward_address: str = attr.ib(default=None)
    ordered_routing: str = attr.ib(default=None)
    priority_weighted_routing: str = attr.ib(default=None)
    enable_capacity_management: bool = attr.ib(default=None)
    max_active_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("new_enterprise_trunk_name", "newEnterpriseTrunkName", str),
            E("maximum_reroute_attempts", "maximumRerouteAttempts", int),
            E("route_exhaustion_action", "routeExhaustionAction", str),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
            E("enable_capacity_management", "enableCapacityManagement", bool),
            E("max_active_calls", "maxActiveCalls", int),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterprisePreAlertingAnnouncementGetRequest(OCIRequest):
    """
    Get the Enterprise pre-alerting service settings.

    The response is either a ``EnterprisePreAlertingAnnouncementGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest(OCIRequest):
    """
    Request a list of number ranges that are assigned to an enterprise and still available
    for assignment to users within the enterprise.

    The response is either
    ``EnterpriseRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all enterprise trunk number ranges in the enterprise.

    The response is either
    ``EnterpriseRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupDeleteListRequest(OCIRequest):
    """
    Request to delete one or more session admission control groups for the enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupGetListRequest(OCIRequest):
    """
    Request to get the list of session admission control group for the enterprise.

    The response is either an ``EnterpriseSessionAdmissionControlGroupGetListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupGetRequest(OCIRequest):
    """
    Request to get a session admission control group for the enterprise.

    The response is either an ``EnterpriseSessionAdmissionControlGroupGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupGetRequest19sp1(OCIRequest):
    """
    Request to get a session admission control group for the enterprise.

    The response is either an ``EnterpriseSessionAdmissionControlGroupGetResponse19sp1()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNDeletePolicyRequest(OCIRequest):
    """
    Delete a enterprise voice VPN location.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        location_dialing_code: locationDialingCode
    """

    service_provider_id: str = attr.ib()
    location_dialing_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("location_dialing_code", "locationDialingCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNGetDefaultRequest(OCIRequest):
    """
    Request the Voice VPN default settings for the enterprise.

    The response is ``EnterpriseVoiceVPNGetDefaultResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNGetPolicyRequest(OCIRequest):
    """
    Request the enterprise level data associated with Voice VPN location code.

    The response is either a ``EnterpriseVoiceVPNGetPolicyResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        location_dialing_code: locationDialingCode
    """

    service_provider_id: str = attr.ib()
    location_dialing_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("location_dialing_code", "locationDialingCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNGetRequest(OCIRequest):
    """
    Request the enterprise level data associated with Voice VPN.

    The response is either a ``EnterpriseVoiceVPNGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``EnterpriseVoiceVPNGetRequest14sp3()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNGetRequest14sp3(OCIRequest):
    """
    Request the enterprise level data associated with Voice VPN.

    The response is either a ``EnterpriseVoiceVPNGetResponse14sp3()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNModifyRequest(OCIRequest):
    """
    Modify the enterprise voice VPN level data associated with voice VPN.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        is_active: isActive
        default_selection: defaultSelection
        e164_selection: e164Selection
        use_phone_context: usePhoneContext
    """

    service_provider_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    default_selection: str = attr.ib(default=None)
    e164_selection: str = attr.ib(default=None)
    use_phone_context: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("default_selection", "defaultSelection", str),
            E("e164_selection", "e164Selection", str),
            E("use_phone_context", "usePhoneContext", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ExternalAuthenticationAuthorizeTokenRequest(OCIRequest):
    """
    This command is part of the Portal API.

    Sent when a Web or CLI user logs in using external authentication.  The password must
    be hashed.  The password hashing algorithm is: 1) The message digest of the user's
    plain password is calculated using the SHA algorithm.  2) For every four bits in the
    160-bit digest, starting from the first bit, it is converted into a character in ASCII
    Hex format (0 through 9, a through f). The result is a 40-character string, for
    example, f7a9e24777ec23212c54d7a350bc5bea5477fdbb.  3) The above string then is used
    to populate the password field in the request.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        password: password
        login_token: loginToken
    """

    user_id: str = attr.ib()
    password: str = attr.ib(default=None)
    login_token: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("password", "password", str),
            E("login_token", "loginToken", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ExternalAuthenticationCreateLoginTokenRequest(OCIRequest):
    """
    This command allows a BroadWorks or Third-Party Client Application to create a Single
    Sign-On token for a user.

    The response is either ``ExternalAuthenticationCreateLoginTokenResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceCustomTagAddRequest(OCIRequest):
    """
    Request to add a static configuration tag for a group access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        tag_name: tagName
        tag_value: tagValue
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceCustomTagDeleteListRequest(OCIRequest):
    """
    Request to delete static configuration tags for a group access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        tag_name: tagName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    tag_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceCustomTagGetListRequest(OCIRequest):
    """
    Request to get the list of custom configuration tags managed by the Device Management
    System, on a per-device profile basis.

    The response is either ``GroupAccessDeviceCustomTagGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceCustomTagModifyRequest(OCIRequest):
    """
    Request to modify a static configuration tag for a group access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        tag_name: tagName
        tag_value: tagValue
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceDeleteRequest(OCIRequest):
    """
    Request to delete a specified group access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileGetListRequest(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device profile basis.

    The response is either ``GroupAccessDeviceFileGetListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupAccessDeviceFileGetListRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileGetListRequest14sp8(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device profile basis.

    The response is either ``GroupAccessDeviceFileGetListResponse14sp8()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileGetRequest(OCIRequest):
    """
    Request to get a group device profile file.

    The response is either ``GroupAccessDeviceFileGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupAccessDeviceFileGetRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        file_type: fileType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    file_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileGetRequest14sp8(OCIRequest):
    """
    Request to get a group device profile file.

    The response is either ``GroupAccessDeviceFileGetResponse14sp8()`` or
    ``ErrorResponse()``. Replaced by: ``GroupAccessDeviceFileGetRequest16sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileGetRequest16sp1(OCIRequest):
    """
    Request to get a group device profile file.

    The response is either ``GroupAccessDeviceFileGetResponse16sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileGetRequest20(OCIRequest):
    """
    Request to get a group device profile file.

    The response is either ``GroupAccessDeviceFileGetResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetAvailableDetailListRequest14(OCIRequest):
    """
    Requests the list of available access devices for assignment to a user within a group.

    The list includes devices created at the system, service provider, and group levels.

    The response is either ``GroupAccessDeviceGetAvailableDetailListResponse14()`` or
    ``ErrorResponse()``. Replaced by:
    ``GroupAccessDeviceGetAvailableDetailListRequest19()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_music_on_hold: isMusicOnHold
        only_video_capable: onlyVideoCapable
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_music_on_hold: bool = attr.ib()
    only_video_capable: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_music_on_hold", "isMusicOnHold", bool, is_required=True),
            E("only_video_capable", "onlyVideoCapable", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetAvailableDetailListRequest19(OCIRequest):
    """
    Requests the list of available access devices for assignment to a user within a group.

    The list includes devices created at the system, service provider, and group levels.

    The response is either ``GroupAccessDeviceGetAvailableDetailListResponse19()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_music_on_hold: isMusicOnHold
        only_video_capable: onlyVideoCapable
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_music_on_hold: bool = attr.ib()
    only_video_capable: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_music_on_hold", "isMusicOnHold", bool, is_required=True),
            E("only_video_capable", "onlyVideoCapable", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetEnhancedConfigurationTypeListRequest(OCIRequest):
    """
    Requests the list of configurable device types of devices that have already been added
    to the group.

    The response is either ``GroupAccessDeviceGetEnhancedConfigurationTypeListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetEnhancedConfigurationTypeRequest14(OCIRequest):
    """
    Requests the details of a specified configurable device type for a group.

    The response is either ``GroupAccessDeviceGetEnhancedConfigurationTypeResponse14()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetRequest14(OCIRequest):
    """
    Requests the configuration of a specified group access device.

    The response is either ``GroupAccessDeviceGetResponse14()`` or ``ErrorResponse()``.

    Replaced By: ``GroupAccessDeviceGetRequest14sp3()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetRequest14sp3(OCIRequest):
    """
    Requests the configuration of a specified group access device.

    The response is either ``GroupAccessDeviceGetResponse14sp3()`` or ``ErrorResponse()``.

    Replaced By: ``GroupAccessDeviceGetRequest14sp6()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetRequest14sp6(OCIRequest):
    """
    Requests the configuration of a specified group access device.

    The response is either ``GroupAccessDeviceGetResponse14sp6()`` or ``ErrorResponse()``.
    Replaced by: ``GroupAccessDeviceGetRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetRequest16(OCIRequest):
    """
    Requests the configuration of a specified group access device.

    The response is either ``GroupAccessDeviceGetResponse16()`` or ``ErrorResponse()``.
    Replaced by: ``GroupAccessDeviceGetRequest18sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetRequest18sp1(OCIRequest):
    """
    Requests the configuration of a specified group access device.

    The response is either ``GroupAccessDeviceGetResponse18sp1()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceModifyUserRequest(OCIRequest):
    """
    Request to modify attributes for line/ports assigned on the group device profile.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode and ignored in AS data mode: privateIdentity

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        line_port: linePort
        private_identity: privateIdentity
        is_primary_line_port: isPrimaryLinePort
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    line_port: str = attr.ib()
    private_identity: str = attr.ib(default=None)
    is_primary_line_port: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("line_port", "linePort", str, is_required=True),
            E("private_identity", "privateIdentity", str),
            E("is_primary_line_port", "isPrimaryLinePort", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceResetRequest(OCIRequest):
    """
    Reset a specific group SIP device that supports the reset operation.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccountAuthorizationCodesDeleteListRequest(OCIRequest):
    """
    Delete a list of account/authorization codes from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccountAuthorizationCodesGetListRequest(OCIRequest):
    """
    Request the list of account/authorization codes for a group.

    The response is either a ``GroupAccountAuthorizationCodesGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccountAuthorizationCodesGetRequest(OCIRequest):
    """
    Request the group's account/authorization codes setting.

    The response is either a ``GroupAccountAuthorizationCodesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminAddRequest(OCIRequest):
    """
    Add a group administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    language: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str),
            E("language", "language", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminDeleteRequest(OCIRequest):
    """
    Delete a group administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetListRequest(OCIRequest):
    """
    Get a list of group and department administrators within the group.

    The response is either a ``GroupAdminGetListResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest14sp1(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse14sp1()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest16sp1(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse16sp1()`` or ``ErrorResponse()``.
    Replaced by: ``GroupAdminGetPolicyRequest17()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest16sp2(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse16sp2()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest17(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse17()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest17sp3(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse17sp3()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest18(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse18()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest19sp1(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse19sp1()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetPolicyRequest20(OCIRequest):
    """
    Requests the Group administrator's policy settings.

    The response is either ``GroupAdminGetPolicyResponse20()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminGetRequest(OCIRequest):
    """
    Get a group administrators profile.

    The response is either a ``GroupAdminGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminModifyPolicyRequest(OCIRequest):
    """
    Request to modify the group administrator's policy settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: dialableCallerIDAccess
    verifyTranslationAndRoutingAccess communicationBarringUserProfileAccess (only
    applicable to groups in an Enterprise)

    Attributes:
        user_id: userId
        profile_access: profileAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        enhanced_service_instance_access: enhancedServiceInstanceAccess
        feature_access_code_access: featureAccessCodeAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        trunk_group_access: trunkGroupAccess
        session_admission_control_access: sessionAdmissionControlAccess
        office_zone_access: officeZoneAccess
        dialable_caller_id_access: dialableCallerIDAccess
        number_activation_access: numberActivationAccess
        verify_translation_and_routing_access: verifyTranslationAndRoutingAccess
        communication_barring_user_profile_access: communicationBarringUserProfileAccess
    """

    user_id: str = attr.ib()
    profile_access: str = attr.ib(default=None)
    user_access: str = attr.ib(default=None)
    admin_access: str = attr.ib(default=None)
    department_access: str = attr.ib(default=None)
    access_device_access: str = attr.ib(default=None)
    enhanced_service_instance_access: str = attr.ib(default=None)
    feature_access_code_access: str = attr.ib(default=None)
    phone_number_extension_access: str = attr.ib(default=None)
    calling_line_id_number_access: str = attr.ib(default=None)
    service_access: str = attr.ib(default=None)
    trunk_group_access: str = attr.ib(default=None)
    session_admission_control_access: str = attr.ib(default=None)
    office_zone_access: str = attr.ib(default=None)
    dialable_caller_id_access: str = attr.ib(default=None)
    number_activation_access: str = attr.ib(default=None)
    verify_translation_and_routing_access: str = attr.ib(default=None)
    communication_barring_user_profile_access: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("profile_access", "profileAccess", str),
            E("user_access", "userAccess", str),
            E("admin_access", "adminAccess", str),
            E("department_access", "departmentAccess", str),
            E("access_device_access", "accessDeviceAccess", str),
            E("enhanced_service_instance_access", "enhancedServiceInstanceAccess", str),
            E("feature_access_code_access", "featureAccessCodeAccess", str),
            E("phone_number_extension_access", "phoneNumberExtensionAccess", str),
            E("calling_line_id_number_access", "callingLineIdNumberAccess", str),
            E("service_access", "serviceAccess", str),
            E("trunk_group_access", "trunkGroupAccess", str),
            E("session_admission_control_access", "sessionAdmissionControlAccess", str),
            E("office_zone_access", "officeZoneAccess", str),
            E("dialable_caller_id_access", "dialableCallerIDAccess", str),
            E("number_activation_access", "numberActivationAccess", str),
            E(
                "verify_translation_and_routing_access",
                "verifyTranslationAndRoutingAccess",
                str,
            ),
            E(
                "communication_barring_user_profile_access",
                "communicationBarringUserProfileAccess",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdminModifyRequest(OCIRequest):
    """
    Modify a group administrator.

    Since old password is not specified here, any password rule related to old password
    does not apply.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
    """

    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    language: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str),
            E("language", "language", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdviceOfChargeGetRequest(OCIRequest):
    """
    Request to get the list of Advice of Charge group parameters.

    The response is either ``GroupAdviceOfChargeGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAdviceOfChargeModifyRequest(OCIRequest):
    """
    Modify the service provider level Advice Of Charge group settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_group_level_ao_c_settings: useGroupLevelAoCSettings
        delay_between_notification_seconds: delayBetweenNotificationSeconds
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_group_level_ao_c_settings: bool = attr.ib(default=None)
    delay_between_notification_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_group_level_ao_c_settings", "useGroupLevelAoCSettings", bool),
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupApplicationServerSetGetRequest(OCIRequest):
    """
    Get the Application Server set for a group.

    The response is either a ``GroupApplicationServerSetGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupApplicationServerSetModifyRequest(OCIRequest):
    """
    Modify the Application Server set for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        application_server_set_name: applicationServerSetName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    application_server_set_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("application_server_set_name", "applicationServerSetName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantDeleteInstanceRequest(OCIRequest):
    """
    Delete a Auto Attendant instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceListRequest(OCIRequest):
    """
    Get a list of Auto Attendant instances within a group.

    The response is either ``GroupAutoAttendantGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceRequest14(OCIRequest):
    """
    Request to get all the information of a Auto Attendant instance.

    The response is either ``GroupAutoAttendantGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupAutoAttendantGetInstanceRequest16()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceRequest16(OCIRequest):
    """
    Request to get all the information of a Auto Attendant instance.

    The response is either ``GroupAutoAttendantGetInstanceResponse16()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceRequest17(OCIRequest):
    """
    Request to get all the information of a Auto Attendant instance.

    The response is either ``GroupAutoAttendantGetInstanceResponse17()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceRequest17sp1(OCIRequest):
    """
    Request to get all the information of a Auto Attendant instance.

    The response is either ``GroupAutoAttendantGetInstanceResponse17sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceRequest19(OCIRequest):
    """
    Request to get all the information of a Auto Attendant instance.

    The response is either ``GroupAutoAttendantGetInstanceResponse19()`` or
    ``ErrorResponse()``. Replaced by: ``GroupAutoAttendantGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a Auto Attendant instance.

    The response is either ``GroupAutoAttendantGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``. Replaced by: ``GroupAutoAttendantGetInstanceRequest20()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantGetInstanceRequest20(OCIRequest):
    """
    Request to get all the information of a Auto Attendant instance.

    The response is either ``GroupAutoAttendantGetInstanceResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuDeleteListRequest(OCIRequest):
    """
    Delete a submenu form an auto attendant.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. This request is
    only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
    """

    service_user_id: str = attr.ib()
    submenu_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuGetListRequest(OCIRequest):
    """
    Get a list of Auto Attendant Submenus.

    The response is either ``GroupAutoAttendantSubmenuGetListResponse()`` or
    ``ErrorResponse()``. This request is only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuGetRequest(OCIRequest):
    """
    Request to get an Auto Attendant submenu instance.

    The response is either ``GroupAutoAttendantSubmenuGetResponse()`` or
    ``ErrorResponse()``. This request is only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
    """

    service_user_id: str = attr.ib()
    submenu_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuGetRequest20(OCIRequest):
    """
    Request to get an Auto Attendant submenu instance.

    The response is either ``GroupAutoAttendantSubmenuGetResponse20()`` or
    ``ErrorResponse()``. This request is only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
    """

    service_user_id: str = attr.ib()
    submenu_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuGetUsageListRequest(OCIRequest):
    """
    Get a list of Auto Attendant Business Hours Menu,After Hours Menu,Holiday Menu and
    Submenus that use this submenu.

    The response is either ``GroupAutoAttendantSubmenuGetUsageListResponse()`` or
    ``ErrorResponse()``. This request is only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
    """

    service_user_id: str = attr.ib()
    submenu_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereDeleteInstanceRequest(OCIRequest):
    """
    Delete a BroadWorks Anywhere instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereGetInstanceListRequest(OCIRequest):
    """
    Get a list of BroadWorks Anywhere instances within a group.

    The response is either ``GroupBroadWorksAnywhereGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereGetInstanceRequest(OCIRequest):
    """
    Request to get all the information of a BroadWorks Anywhere instance.

    The response is either ``GroupBroadWorksAnywhereGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereGetInstanceRequest17(OCIRequest):
    """
    Request to get all the information of a BroadWorks Anywhere instance.

    The response is either ``GroupBroadWorksAnywhereGetInstanceResponse17()`` or
    ``ErrorResponse()``. Replaced by: ``GroupBroadWorksAnywhereGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a BroadWorks Anywhere instance.

    The response is either ``GroupBroadWorksAnywhereGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerActivationRequest(OCIRequest):
    """
    Activates or Deactivates the BroadWorks Mobile Manager.

    The deactivationReason is required when isActive is set to false.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        deactivation_reason: deactivationReason
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib()
    deactivation_reason: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("deactivation_reason", "deactivationReason", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerAddHomeZoneRequest(OCIRequest):
    """
    Add a home zone to the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_domain_name: homeZoneDomainName
        mobile_country_code: mobileCountryCode
        mobile_network_code: mobileNetworkCode
        location_area_code: locationAreaCode
        cell_identity: cellIdentity
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_domain_name: str = attr.ib()
    mobile_country_code: str = attr.ib()
    mobile_network_code: str = attr.ib()
    location_area_code: str = attr.ib()
    cell_identity: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("home_zone_domain_name", "homeZoneDomainName", str, is_required=True),
            E("mobile_country_code", "mobileCountryCode", str, is_required=True),
            E("mobile_network_code", "mobileNetworkCode", str, is_required=True),
            E("location_area_code", "locationAreaCode", str, is_required=True),
            E("cell_identity", "cellIdentity", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerAddRequest(OCIRequest):
    """
    Add the BroadWorks Mobile Manager.

    Only one BroadWorks Mobile Manager can be added per group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        information_file: informationFile
        certificate_file: certificateFile
        is_active: isActive
        local_to_carrier: localToCarrier
        max_tx_per_second_enabled: maxTxPerSecondEnabled
        max_tx_per_second: maxTxPerSecond
        tldn_enabled: tldnEnabled
        generic_number_enabled: genericNumberEnabled
        mobile_state_check_enabled: mobileStateCheckEnabled
        location_based_services_enabled: locationBasedServicesEnabled
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    information_file: str = attr.ib()
    certificate_file: str = attr.ib()
    is_active: bool = attr.ib()
    local_to_carrier: bool = attr.ib()
    max_tx_per_second_enabled: bool = attr.ib()
    max_tx_per_second: int = attr.ib(default=None)
    tldn_enabled: bool = attr.ib()
    generic_number_enabled: bool = attr.ib()
    mobile_state_check_enabled: bool = attr.ib()
    location_based_services_enabled: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("information_file", "informationFile", str, is_required=True),
            E("certificate_file", "certificateFile", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("local_to_carrier", "localToCarrier", bool, is_required=True),
            E(
                "max_tx_per_second_enabled",
                "maxTxPerSecondEnabled",
                bool,
                is_required=True,
            ),
            E("max_tx_per_second", "maxTxPerSecond", int),
            E("tldn_enabled", "tldnEnabled", bool, is_required=True),
            E("generic_number_enabled", "genericNumberEnabled", bool, is_required=True),
            E(
                "mobile_state_check_enabled",
                "mobileStateCheckEnabled",
                bool,
                is_required=True,
            ),
            E(
                "location_based_services_enabled",
                "locationBasedServicesEnabled",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerDeleteHomeZoneListRequest(OCIRequest):
    """
    Delete a list of home zones from the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_id: homeZoneId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerDeleteHomeZoneRequest(OCIRequest):
    """
    Delete a home zone from the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_id: homeZoneId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerDeleteRequest(OCIRequest):
    """
    Delete the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerGetDomainListRequest(OCIRequest):
    """
    Get the list of domains of the BroadWorks Mobile Manager.

    The response is either ``GroupBroadWorksMobileManagerGetDomainListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerGetHomeZoneListRequest(OCIRequest):
    """
    Get the list of home zones of the BroadWorks Mobile Manager.

    The response is either ``GroupBroadWorksMobileManagerGetHomeZoneListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerGetHomeZoneRequest(OCIRequest):
    """
    Get a home zone from the BroadWorks Mobile Manager.

    The response is either ``GroupBroadWorksMobileManagerGetHomeZoneResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_id: homeZoneId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerGetRequest(OCIRequest):
    """
    Get the BroadWorks Mobile Manager.

    The response is either ``GroupBroadWorksMobileManagerGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerModifyHomeZoneRequest(OCIRequest):
    """
    Modify an existing home zone in the BroadWorks Mobile Manager.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_id: homeZoneId
        home_zone_domain_name: homeZoneDomainName
        mobile_country_code: mobileCountryCode
        mobile_network_code: mobileNetworkCode
        location_area_code: locationAreaCode
        cell_identity: cellIdentity
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_id: str = attr.ib()
    home_zone_domain_name: str = attr.ib(default=None)
    mobile_country_code: str = attr.ib(default=None)
    mobile_network_code: str = attr.ib(default=None)
    location_area_code: str = attr.ib(default=None)
    cell_identity: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("home_zone_id", "homeZoneId", str, is_required=True),
            E("home_zone_domain_name", "homeZoneDomainName", str),
            E("mobile_country_code", "mobileCountryCode", str),
            E("mobile_network_code", "mobileNetworkCode", str),
            E("location_area_code", "locationAreaCode", str),
            E("cell_identity", "cellIdentity", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerModifyRequest(OCIRequest):
    """
    Modify the BroadWorks Mobile Manager settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        information_file: informationFile
        certificate_file: certificateFile
        local_to_carrier: localToCarrier
        max_tx_per_second_enabled: maxTxPerSecondEnabled
        max_tx_per_second: maxTxPerSecond
        tldn_enabled: tldnEnabled
        generic_number_enabled: genericNumberEnabled
        mobile_state_check_enabled: mobileStateCheckEnabled
        location_based_services_enabled: locationBasedServicesEnabled
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    information_file: str = attr.ib(default=None)
    certificate_file: str = attr.ib(default=None)
    local_to_carrier: bool = attr.ib(default=None)
    max_tx_per_second_enabled: bool = attr.ib(default=None)
    max_tx_per_second: int = attr.ib(default=None)
    tldn_enabled: bool = attr.ib(default=None)
    generic_number_enabled: bool = attr.ib(default=None)
    mobile_state_check_enabled: bool = attr.ib(default=None)
    location_based_services_enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("information_file", "informationFile", str),
            E("certificate_file", "certificateFile", str),
            E("local_to_carrier", "localToCarrier", bool),
            E("max_tx_per_second_enabled", "maxTxPerSecondEnabled", bool),
            E("max_tx_per_second", "maxTxPerSecond", int),
            E("tldn_enabled", "tldnEnabled", bool),
            E("generic_number_enabled", "genericNumberEnabled", bool),
            E("mobile_state_check_enabled", "mobileStateCheckEnabled", bool),
            E("location_based_services_enabled", "locationBasedServicesEnabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobileManagerSendCarrierFilesRequest(OCIRequest):
    """
    Sends an email with the carrier information and certificate files.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        email_to: emailTo
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    email_to: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("email_to", "emailTo", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobilityGetRequest(OCIRequest):
    """
    Get the groups BroadWorks Mobility settings.

    The response is either a ``GroupBroadWorksMobilityGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobilityGetRequest19sp1(OCIRequest):
    """
    Get the group's BroadWorks Mobility settings.

    The response is either a ``GroupBroadWorksMobilityGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberAssignListRequest(OCIRequest):
    """
    Assign Mobile Subscriber Directory Numbers to a group.

    It is possible to add a single DN,or a list of DNs.  . This command is applicable only
    for group in a service provider and will fail for a group in an enterprise.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        mobile_subscriber_directory_number: mobileSubscriberDirectoryNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    mobile_subscriber_directory_number: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "mobile_subscriber_directory_number",
                "mobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest(OCIRequest):
    """
    Request a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any user.

    . This command is applicable only for group in a service provider and will fail for a
    group in an enterprise.

    The response is either
    ``GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberUnassignListRequest(OCIRequest):
    """
    Unassign Mobile Subscriber Directory Numbers from a group.

    It is possible to unassign either: a single DN, or a list of DNs.  . This command is
    applicable only for group in a service provider and will fail for a group in an
    enterprise.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        mobile_subscriber_directory_number: mobileSubscriberDirectoryNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    mobile_subscriber_directory_number: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "mobile_subscriber_directory_number",
                "mobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobilityModifyRequest(OCIRequest):
    """
    Modify the group level broadworks mobility service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_setting_level: useSettingLevel
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        enable_announcement_suppression: enableAnnouncementSuppression
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_setting_level: str = attr.ib(default=None)
    enable_location_services: bool = attr.ib(default=None)
    enable_msrn_lookup: bool = attr.ib(default=None)
    enable_mobile_state_checking: bool = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)
    enable_announcement_suppression: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_setting_level", "useSettingLevel", str),
            E("enable_location_services", "enableLocationServices", bool),
            E("enable_msrn_lookup", "enableMSRNLookup", bool),
            E("enable_mobile_state_checking", "enableMobileStateChecking", bool),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
            E("enable_announcement_suppression", "enableAnnouncementSuppression", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCPEConfigRebuildConfigFileRequest(OCIRequest):
    """
    Rebuild the group default config file for the specified device type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        force: force
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    force: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("force", "force", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCPEConfigRebuildDeviceConfigFileRequest(OCIRequest):
    """
    Rebuild the config file for a specified device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        force: force
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    force: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("force", "force", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCPEConfigReorderDeviceLinePortsRequest(OCIRequest):
    """
    Reorder the lines of a group device.

    You can not add or delete line ports, only re-ordering the list is allowed.  The
    ordered list of line ports can be obtained with the
    ``GroupAccessDeviceGetRequest16()`` command.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        ordered_line_port_list: orderedLinePortList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    ordered_line_port_list: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E(
                "ordered_line_port_list",
                "orderedLinePortList",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCPEConfigResetDeviceRequest(OCIRequest):
    """
    Reset a specific group device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCPEConfigResetDeviceTypeRequest(OCIRequest):
    """
    Reset all the devices of the specified device type in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementAddInstanceRequest(OCIRequest):
    """
    Adds a Call Capacity Management group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        max_active_calls_allowed: maxActiveCallsAllowed
        max_incoming_active_calls_allowed: maxIncomingActiveCallsAllowed
        max_outgoing_active_calls_allowed: maxOutgoingActiveCallsAllowed
        become_default_group_for_new_users: becomeDefaultGroupForNewUsers
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    max_active_calls_allowed: int = attr.ib()
    max_incoming_active_calls_allowed: int = attr.ib(default=None)
    max_outgoing_active_calls_allowed: int = attr.ib(default=None)
    become_default_group_for_new_users: bool = attr.ib()
    user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "max_active_calls_allowed",
                "maxActiveCallsAllowed",
                int,
                is_required=True,
            ),
            E("max_incoming_active_calls_allowed", "maxIncomingActiveCallsAllowed", int),
            E("max_outgoing_active_calls_allowed", "maxOutgoingActiveCallsAllowed", int),
            E(
                "become_default_group_for_new_users",
                "becomeDefaultGroupForNewUsers",
                bool,
                is_required=True,
            ),
            E("user_id", "userId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementAddUserListRequest(OCIRequest):
    """
    Adds one or more users to a Call Capacity Management group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementDeleteInstanceListRequest(OCIRequest):
    """
    Deletes one or more Call Capacity Management groups.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementDeleteUserListRequest(OCIRequest):
    """
    Deletes one or more users from a Call Capacity Management group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementGetInstanceListRequest(OCIRequest):
    """
    Request to get a list of Call Capacity Management instances within a group.

    The response is either ``GroupCallCapacityManagementGetInstanceListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementGetInstanceRequest(OCIRequest):
    """
    Gets a Call Capacity Management group.

    The response is either ``GroupCallCapacityManagementGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddSupervisorListRequest(OCIRequest):
    """
    Add supervisor(s) to a call center.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        supervisor_user_id: supervisorUserId
    """

    service_user_id: str = attr.ib()
    supervisor_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "supervisor_user_id",
                "supervisorUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileAddAgentListRequest(OCIRequest):
    """
    Add agent(s) to a Agent Threshold Profile.

    When an agent is assigned (added )to a profile, it is automatically unassigned
    (deleted) from the previous profile it was assigned to.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        profile_name: profileName
        agent_user_id: agentUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    profile_name: str = attr.ib()
    agent_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileAddRequest(OCIRequest):
    """
    Add a new Call Center Agent Threshold Profile in a Group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        profile_name: profileName
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address: notificationEmailAddress
        agent_user_id: agentUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    profile_name: str = attr.ib()
    profile_description: str = attr.ib(default=None)
    threshold_current_call_state_idle_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_idle_time_red: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_red: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_yellow: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_red: int = attr.ib(default=None)
    threshold_average_busy_in_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_in_time_red: int = attr.ib(default=None)
    threshold_average_busy_out_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_out_time_red: int = attr.ib(default=None)
    threshold_average_wrap_up_time_yellow: int = attr.ib(default=None)
    threshold_average_wrap_up_time_red: int = attr.ib(default=None)
    enable_notification_email: bool = attr.ib()
    notification_email_address: List[str] = attr.ib(default=None)
    agent_user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E(
                "enable_notification_email",
                "enableNotificationEmail",
                bool,
                is_required=True,
            ),
            E(
                "notification_email_address",
                "notificationEmailAddress",
                str,
                is_array=True,
            ),
            E("agent_user_id", "agentUserId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileDeleteAgentListRequest(OCIRequest):
    """
    Delete agent(s) from a Agent Threshold Profile.

    Agents cannot be unassigned (deleted) directly from the default profile, they need to
    be assigned (added) to a different profile.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        profile_name: profileName
        agent_user_id: agentUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    profile_name: str = attr.ib()
    agent_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileDeleteRequest(OCIRequest):
    """
    Deletes an existing Call Center Agent Threshold Profile in a Group.

    The default profile cannot be deleted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        profile_name: profileName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileGetListRequest(OCIRequest):
    """
    Get the list of Call Center Agent Threshold Profiles in the Group.

    The response is either ``GroupCallCenterAgentThresholdProfileGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileGetRequest(OCIRequest):
    """
    Gets an existing non-default Call Center Agent Threshold Profile in a Group.

    The response is either a ``GroupCallCenterAgentThresholdProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        profile_name: profileName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeAddRequest(OCIRequest):
    """
    Add a Call Center Agent Unavailable Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        code: code
        description: description
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib()
    code: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("code", "code", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeDeleteRequest(OCIRequest):
    """
    Delete a Call Center Agent Unavailable Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeGetListRequest(OCIRequest):
    """
    Get the list of Call Center Agent Unavailable Codes.

    The response is either ``GroupCallCenterAgentUnavailableCodeGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeGetRequest(OCIRequest):
    """
    Get a Call Center Agent Unavailable Code.

    The response is either ``GroupCallCenterAgentUnavailableCodeGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeModifyRequest(OCIRequest):
    """
    Modify a Call Center Agent Unavailable Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
        is_active: isActive
        description: description
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeSettingsGetRequest(OCIRequest):
    """
    Request the group level data associated with Call Center Agents Unavailable Code
    Settings.

    The response is either an ``GroupCallCenterAgentUnavailableCodeSettingsGetResponse()``
    or an ``ErrorResponse()``. Replaced by
    ``GroupCallCenterAgentUnavailableCodeSettingsGetRequest17sp4()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeSettingsGetRequest17sp4(OCIRequest):
    """
    Request the group level data associated with Call Center Agents Unavailable Code
    Settings.

    The response is either a
    ``GroupCallCenterAgentUnavailableCodeSettingsGetResponse17sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterBouncedCallGetRequest(OCIRequest):
    """
    Get a call center's bounced call settings.

    The response is either a ``GroupCallCenterBouncedCallGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``GroupCallCenterBouncedCallGetRequest17()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterBouncedCallGetRequest17(OCIRequest):
    """
    Get a call center's bounced call settings.

    The response is either a ``GroupCallCenterBouncedCallGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterBouncedCallModifyRequest(OCIRequest):
    """
    Modify a call center's bounced call settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        number_of_rings_before_bouncing_call: numberOfRingsBeforeBouncingCall
        enable_transfer: enableTransfer
        transfer_phone_number: transferPhoneNumber
        bounce_call_when_agent_unavailable: bounceCallWhenAgentUnavailable
        alert_call_center_call_on_hold: alertCallCenterCallOnHold
        alert_call_center_call_on_hold_seconds: alertCallCenterCallOnHoldSeconds
        bounce_call_center_call_on_hold: bounceCallCenterCallOnHold
        bounce_call_center_call_on_hold_seconds: bounceCallCenterCallOnHoldSeconds
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    number_of_rings_before_bouncing_call: int = attr.ib(default=None)
    enable_transfer: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    bounce_call_when_agent_unavailable: bool = attr.ib(default=None)
    alert_call_center_call_on_hold: bool = attr.ib(default=None)
    alert_call_center_call_on_hold_seconds: int = attr.ib(default=None)
    bounce_call_center_call_on_hold: bool = attr.ib(default=None)
    bounce_call_center_call_on_hold_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "number_of_rings_before_bouncing_call",
                "numberOfRingsBeforeBouncingCall",
                int,
            ),
            E("enable_transfer", "enableTransfer", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "bounce_call_when_agent_unavailable",
                "bounceCallWhenAgentUnavailable",
                bool,
            ),
            E("alert_call_center_call_on_hold", "alertCallCenterCallOnHold", bool),
            E(
                "alert_call_center_call_on_hold_seconds",
                "alertCallCenterCallOnHoldSeconds",
                int,
            ),
            E("bounce_call_center_call_on_hold", "bounceCallCenterCallOnHold", bool),
            E(
                "bounce_call_center_call_on_hold_seconds",
                "bounceCallCenterCallOnHoldSeconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCallDispositionCodeAddRequest(OCIRequest):
    """
    Add a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
        is_active: isActive
        description: description
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCallDispositionCodeDeleteRequest(OCIRequest):
    """
    Delete a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCallDispositionCodeGetListRequest(OCIRequest):
    """
    Get the list of Call Center Call Disposition Codes.

    The response is either ``GroupCallCenterCallDispositionCodeGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCallDispositionCodeGetRequest(OCIRequest):
    """
    Get a Call Center Call Disposition Code.

    The response is either ``GroupCallCenterCallDispositionCodeGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCallDispositionCodeGetUsageListRequest(OCIRequest):
    """
    Get the list of Call Centers and Route Points using the specified disposition code.

    The response is either ``GroupCallCenterCallDispositionCodeGetUsageListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCallDispositionCodeModifyRequest(OCIRequest):
    """
    Modify a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
        is_active: isActive
        description: description
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterComfortMessageBypassGetRequest(OCIRequest):
    """
    Get a call center's comfort message bypass settings.

    The response is either a ``GroupCallCenterComfortMessageBypassGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterComfortMessageBypassGetRequest17(OCIRequest):
    """
    Get a call center's comfort message bypass settings.

    The response is either a ``GroupCallCenterComfortMessageBypassGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterComfortMessageBypassGetRequest20(OCIRequest):
    """
    Get a call center's comfort message bypass settings.

    The response is either a ``GroupCallCenterComfortMessageBypassGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCurrentAndPastDNISGetListRequest(OCIRequest):
    """
    Request to get all the past and current DNIS for the Call Center for the group.

    The response is either ``GroupCallCenterCurrentAndPastDNISGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterDeleteAgentListRequest(OCIRequest):
    """
    Delete agent(s) from a call center.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        agent_user_id: agentUserId
    """

    service_user_id: str = attr.ib()
    agent_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterDeleteInstanceRequest(OCIRequest):
    """
    Delete a Call Center instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterDeleteSupervisorListRequest(OCIRequest):
    """
    Delete supervisor(s) from a call center.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        supervisor_user_id: supervisorUserId
    """

    service_user_id: str = attr.ib()
    supervisor_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "supervisor_user_id",
                "supervisorUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterDistinctiveRingingGetRequest(OCIRequest):
    """
    Get the distinctive ringing configuration values for call center.

    The response is either a ``GroupCallCenterDistinctiveRingingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterDistinctiveRingingModifyRequest(OCIRequest):
    """
    Modify the distinctive ringing configuration values for call center.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        distinctive_ringing_call_center_calls: distinctiveRingingCallCenterCalls
        distinctive_ringing_ring_pattern_for_call_center:
            distinctiveRingingRingPatternForCallCenter
        distinctive_ringing_force_delivery_ring_pattern:
            distinctiveRingingForceDeliveryRingPattern
    """

    service_user_id: str = attr.ib()
    distinctive_ringing_call_center_calls: bool = attr.ib(default=None)
    distinctive_ringing_ring_pattern_for_call_center: str = attr.ib(default=None)
    distinctive_ringing_force_delivery_ring_pattern: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "distinctive_ringing_call_center_calls",
                "distinctiveRingingCallCenterCalls",
                bool,
            ),
            E(
                "distinctive_ringing_ring_pattern_for_call_center",
                "distinctiveRingingRingPatternForCallCenter",
                str,
            ),
            E(
                "distinctive_ringing_force_delivery_ring_pattern",
                "distinctiveRingingForceDeliveryRingPattern",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedGetRequest(OCIRequest):
    """
    Request to get the Call Center Enhanced configuration data for a Call Center.

    The response is either ``GroupCallCenterEnhancedGetResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetInstanceResponse16()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedModifyRequest(OCIRequest):
    """
    Modify the Call Center Enhanced configuration data for a Call Center.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterModifyInstanceRequest16()``

    Attributes:
        service_user_id: serviceUserId
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
    """

    service_user_id: str = attr.ib()
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingBrandingGetRequest(OCIRequest):
    """
    Request to get the group branding information.

    The response is either ``GroupCallCenterEnhancedReportingBrandingGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingGetAvailableReportTemplateListRequest(OCIRequest):
    """
    Request to get all enabled call center report template for a group.

    The response is either a
    ``GroupCallCenterEnhancedReportingGetAvailableReportTemplateListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingGetRequest(OCIRequest):
    """
    Request to get a group level call center enhanced reporting setting.

    The response is either a ``GroupCallCenterEnhancedReportingGetResponse()`` or an
    ``ErrorResponse()``. Replaced by ``GroupCallCenterEnhancedReportingGetRequest19()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingGetRequest19(OCIRequest):
    """
    Request to get a group level call center enhanced reporting setting.

    The response is either a ``GroupCallCenterEnhancedReportingGetResponse19()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingModifyRequest(OCIRequest):
    """
    Request to modify group level call center enhanced reporting settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``GroupCallCenterEnhancedReportingModifyRequest19()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        reporting_server: reportingServer
        web_statistic_source: webStatisticSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    reporting_server: str = attr.ib(default=None)
    web_statistic_source: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("reporting_server", "reportingServer", str),
            E("web_statistic_source", "webStatisticSource", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingModifyRequest19(OCIRequest):
    """
    Request to modify group level call center enhanced reporting settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        reporting_server: reportingServer
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    reporting_server: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("reporting_server", "reportingServer", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingReportTemplateDeleteRequest(OCIRequest):
    """
    Request to delete a group level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingReportTemplateGetListRequest(OCIRequest):
    """
    Request to get group level call center report template list.

    The response is either a
    ``GroupCallCenterEnhancedReportingReportTemplateGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingReportTemplateGetRequest(OCIRequest):
    """
    Request to get a group level call center report template.

    The response is either a
    ``GroupCallCenterEnhancedReportingReportTemplateGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportDeleteRequest(OCIRequest):
    """
    Request to delete a group level call center reporting scheduled report.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest(OCIRequest):
    """
    Request to get all the call center reporting scheduled report in a group that uses a
    given group level report template.

    The response is either a
    ``GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportGetRequest(OCIRequest):
    """
    Request to get a group level call center reporting scheduled report.

    The response is either a
    ``GroupCallCenterEnhancedReportingScheduledReportGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterForcedForwardingGetRequest(OCIRequest):
    """
    Get a call center's forced forwarding settings.

    The response is either a ``GroupCallCenterForcedForwardingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterForcedForwardingGetRequest17(OCIRequest):
    """
    Get a call center's forced forwarding settings.

    The response is either a ``GroupCallCenterForcedForwardingGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterForcedForwardingGetRequest20(OCIRequest):
    """
    Get a call center's forced forwarding settings.

    The response is either a ``GroupCallCenterForcedForwardingGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAnnouncementRequest(OCIRequest):
    """
    Get a call center's announcement settings.

    The response is either a ``GroupCallCenterGetAnnouncementResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAnnouncementRequest14sp6(OCIRequest):
    """
    Get a call center's announcement settings.

    The response is either a ``GroupCallCenterGetAnnouncementResponse14sp6()`` or an
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetAnnouncementRequest16()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAnnouncementRequest16(OCIRequest):
    """
    Get a call center's announcement settings.

    The response is either a ``GroupCallCenterGetAnnouncementResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAnnouncementRequest17(OCIRequest):
    """
    Get a call center's announcement settings.

    The response is either a ``GroupCallCenterGetAnnouncementResponse17()`` or an
    ``ErrorResponse()``. Replaced by ``GroupCallCenterGetAnnouncementRequest17sp4()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAnnouncementRequest17sp4(OCIRequest):
    """
    Get a call center's announcement settings.

    The response is either a ``GroupCallCenterGetAnnouncementResponse17sp4()`` or an
    ``ErrorResponse()``. Replaced by: ``GroupCallCenterGetAnnouncementRequest19()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAnnouncementRequest19(OCIRequest):
    """
    Get a call center's announcement settings.

    The response is either a ``GroupCallCenterGetAnnouncementResponse19()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAnnouncementRequest20(OCIRequest):
    """
    Get a call center's announcement settings.

    The response is either a ``GroupCallCenterGetAnnouncementResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDNISListRequest(OCIRequest):
    """
    Get a list of DNIS that are configured for a Call Center.

    The response is either ``GroupCallCenterGetDNISListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDistinctiveRingingRequest(OCIRequest):
    """
    Get the distinctive ringing configuration values for call center.

    The response is either a ``GroupCallCenterGetDistinctiveRingingResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceListRequest(OCIRequest):
    """
    Get a list of Call Center instances within a group.

    The response is either ``GroupCallCenterGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceQueueStatusRequest(OCIRequest):
    """
    Get Call Center queue status.

    The response is either ``GroupCallCenterGetInstanceQueueStatusResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest14(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse14()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetInstanceRequest14sp3()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest14sp3(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse14sp3()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetInstanceRequest14sp9()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest14sp9(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse14sp9()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetInstanceRequest16()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest16(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse16()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest17(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse17()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest17sp1(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse17sp1()`` or
    ``ErrorResponse()``. Replaced by: ``GroupCallCenterGetInstanceRequest17sp3()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest17sp3(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse17sp3()`` or
    ``ErrorResponse()``. Replaced by ``GroupCallCenterGetInstanceRequest19()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest19(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse19()`` or
    ``ErrorResponse()``. Replaced by: ``GroupCallCenterGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a Call Center instance.

    The response is either ``GroupCallCenterGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceStatisticsReportingRequest(OCIRequest):
    """
    Request to get the call center statistics reporting settings.

    The response is either ``GroupCallCenterGetInstanceStatisticsReportingResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetInstanceStatisticsReportingRequest16()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceStatisticsReportingRequest16(OCIRequest):
    """
    Request to get the call center statistics reporting settings.

    The response is either ``GroupCallCenterGetInstanceStatisticsReportingResponse16()``
    or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceStatisticsReportingRequest17sp1(OCIRequest):
    """
    Request to get the call center statistics reporting settings.

    The response is either
    ``GroupCallCenterGetInstanceStatisticsReportingResponse17sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceStatisticsRequest13mp8(OCIRequest):
    """
    Get Call Center queue and agent statistics.

    The response is either ``GroupCallCenterGetInstanceStatisticsResponse13mp8()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetInstanceStatisticsRequest14sp9()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetRequest(OCIRequest):
    """
    Request the Group level data associated with Call Center.

    The response is either a ``GroupCallCenterGetResponse()`` or an ``ErrorResponse()``.
    Replaced by ``GroupCallCenterGetRequest17sp4()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetRequest17sp4(OCIRequest):
    """
    Request the Group level data associated with Call Center.

    The response is either a ``GroupCallCenterGetResponse17sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetRoutingPolicyRequest(OCIRequest):
    """
    Request the group call center routing policy.

    The response is either a ``GroupCallCenterGetRoutingPolicyResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetSupervisorListRequest(OCIRequest):
    """
    Get a list of supervisors assigned to a call center.

    Only users in the same group or enterprise as this call center can successfully
    execute this request.

    The response is either a ``GroupCallCenterGetSupervisorListResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterSupervisorReportingGetRequest()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetSupervisorListRequest16(OCIRequest):
    """
    Get a list of supervisors assigned to a call center.

    The response is either a ``GroupCallCenterGetSupervisorListResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetUnlicensedAgentListRequest(OCIRequest):
    """
    Get a list of unlicensed users who are preventing the Call Center from upgrading to
    another type.

    The response is either ``GroupCallCenterGetUnlicensedAgentListRequest()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        call_center_type: callCenterType
    """

    service_user_id: str = attr.ib()
    call_center_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("call_center_type", "callCenterType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceGetRequest(OCIRequest):
    """
    Get a call center's holiday service settings.

    The response is either a ``GroupCallCenterHolidayServiceGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceGetRequest17(OCIRequest):
    """
    Get a call center's holiday service settings.

    The response is either a ``GroupCallCenterHolidayServiceGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceGetRequest17sp1(OCIRequest):
    """
    Get a call center's holiday service settings.

    The response is either a ``GroupCallCenterHolidayServiceGetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceGetRequest20(OCIRequest):
    """
    Get a call center's holiday service settings.

    The response is either a ``GroupCallCenterHolidayServiceGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyDNISParametersRequest(OCIRequest):
    """
    Modify the setting that are configured for all the DNIS in a Call Center.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        display_dnis_number: displayDNISNumber
        display_dnis_name: displayDNISName
        promote_calls_from_priority1to0: promoteCallsFromPriority1to0
        promote_calls_from_priority2to1: promoteCallsFromPriority2to1
        promote_calls_from_priority3to2: promoteCallsFromPriority3to2
        promote_calls_from_priority1to0_seconds: promoteCallsFromPriority1to0Seconds
        promote_calls_from_priority2to1_seconds: promoteCallsFromPriority2to1Seconds
        promote_calls_from_priority3to2_seconds: promoteCallsFromPriority3to2Seconds
    """

    service_user_id: str = attr.ib()
    display_dnis_number: bool = attr.ib(default=None)
    display_dnis_name: bool = attr.ib(default=None)
    promote_calls_from_priority1to0: bool = attr.ib(default=None)
    promote_calls_from_priority2to1: bool = attr.ib(default=None)
    promote_calls_from_priority3to2: bool = attr.ib(default=None)
    promote_calls_from_priority1to0_seconds: int = attr.ib(default=None)
    promote_calls_from_priority2to1_seconds: int = attr.ib(default=None)
    promote_calls_from_priority3to2_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("display_dnis_number", "displayDNISNumber", bool),
            E("display_dnis_name", "displayDNISName", bool),
            E("promote_calls_from_priority1to0", "promoteCallsFromPriority1to0", bool),
            E("promote_calls_from_priority2to1", "promoteCallsFromPriority2to1", bool),
            E("promote_calls_from_priority3to2", "promoteCallsFromPriority3to2", bool),
            E(
                "promote_calls_from_priority1to0_seconds",
                "promoteCallsFromPriority1to0Seconds",
                int,
            ),
            E(
                "promote_calls_from_priority2to1_seconds",
                "promoteCallsFromPriority2to1Seconds",
                int,
            ),
            E(
                "promote_calls_from_priority3to2_seconds",
                "promoteCallsFromPriority3to2Seconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyDistinctiveRingingRequest(OCIRequest):
    """
    Modify the distinctive ringing configuration values for call center.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        distinctive_ringing_call_center_calls: distinctiveRingingCallCenterCalls
        distinctive_ringing_ring_pattern_for_call_center:
            distinctiveRingingRingPatternForCallCenter
        distinctive_ringing_force_delivery_ring_pattern:
            distinctiveRingingForceDeliveryRingPattern
    """

    service_user_id: str = attr.ib()
    distinctive_ringing_call_center_calls: bool = attr.ib(default=None)
    distinctive_ringing_ring_pattern_for_call_center: str = attr.ib(default=None)
    distinctive_ringing_force_delivery_ring_pattern: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "distinctive_ringing_call_center_calls",
                "distinctiveRingingCallCenterCalls",
                bool,
            ),
            E(
                "distinctive_ringing_ring_pattern_for_call_center",
                "distinctiveRingingRingPatternForCallCenter",
                str,
            ),
            E(
                "distinctive_ringing_force_delivery_ring_pattern",
                "distinctiveRingingForceDeliveryRingPattern",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceStatisticsReportingRequest(OCIRequest):
    """
    Modify the Call Center statistics reporting frequency and destination.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterModifyInstanceStatisticsReportingRequest14sp9()``

    Attributes:
        service_user_id: serviceUserId
        clear_today_statistics: clearTodayStatistics
        generate_daily_report: generateDailyReport
        collection_period_minutes: collectionPeriodMinutes
        reporting_email_address1: reportingEmailAddress1
        reporting_email_address2: reportingEmailAddress2
    """

    service_user_id: str = attr.ib()
    clear_today_statistics: bool = attr.ib(default=None)
    generate_daily_report: bool = attr.ib(default=None)
    collection_period_minutes: int = attr.ib(default=None)
    reporting_email_address1: str = attr.ib(default=None)
    reporting_email_address2: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("clear_today_statistics", "clearTodayStatistics", bool),
            E("generate_daily_report", "generateDailyReport", bool),
            E("collection_period_minutes", "collectionPeriodMinutes", int),
            E("reporting_email_address1", "reportingEmailAddress1", str),
            E("reporting_email_address2", "reportingEmailAddress2", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceStatisticsReportingRequest14sp9(OCIRequest):
    """
    Modify the Call Center statistics reporting frequency and destination.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        generate_daily_report: generateDailyReport
        collection_period_minutes: collectionPeriodMinutes
        reporting_email_address1: reportingEmailAddress1
        reporting_email_address2: reportingEmailAddress2
        statistics_source: statisticsSource
    """

    service_user_id: str = attr.ib()
    generate_daily_report: bool = attr.ib(default=None)
    collection_period_minutes: int = attr.ib(default=None)
    reporting_email_address1: str = attr.ib(default=None)
    reporting_email_address2: str = attr.ib(default=None)
    statistics_source: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("generate_daily_report", "generateDailyReport", bool),
            E("collection_period_minutes", "collectionPeriodMinutes", int),
            E("reporting_email_address1", "reportingEmailAddress1", str),
            E("reporting_email_address2", "reportingEmailAddress2", str),
            E("statistics_source", "statisticsSource", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceStatisticsReportingRequest17sp1(OCIRequest):
    """
    Modify the Call Center statistics reporting frequency and destination.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        generate_daily_report: generateDailyReport
        collection_period_minutes: collectionPeriodMinutes
        reporting_email_address1: reportingEmailAddress1
        reporting_email_address2: reportingEmailAddress2
        statistics_source: statisticsSource
    """

    service_user_id: str = attr.ib()
    generate_daily_report: bool = attr.ib(default=None)
    collection_period_minutes: int = attr.ib(default=None)
    reporting_email_address1: str = attr.ib(default=None)
    reporting_email_address2: str = attr.ib(default=None)
    statistics_source: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("generate_daily_report", "generateDailyReport", bool),
            E("collection_period_minutes", "collectionPeriodMinutes", int),
            E("reporting_email_address1", "reportingEmailAddress1", str),
            E("reporting_email_address2", "reportingEmailAddress2", str),
            E("statistics_source", "statisticsSource", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyRequest(OCIRequest):
    """
    Modify the group level data associated with Call Center and the active status of Call
    Center instances.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_system_default_guard_timer: useSystemDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_system_default_guard_timer: bool = attr.ib(default=None)
    enable_guard_timer: bool = attr.ib(default=None)
    guard_timer_seconds: int = attr.ib(default=None)
    use_system_default_unavailable_settings: bool = attr.ib(default=None)
    force_agent_unavailable_on_dnd_activation: bool = attr.ib(default=None)
    force_agent_unavailable_on_personal_calls: bool = attr.ib(default=None)
    force_agent_unavailable_on_bounced_call_limit: bool = attr.ib(default=None)
    number_consecutive_bounced_calls_to_force_agent_unavailable: int = attr.ib(default=None)
    force_agent_unavailable_on_not_reachable: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_system_default_guard_timer", "useSystemDefaultGuardTimer", bool),
            E("enable_guard_timer", "enableGuardTimer", bool),
            E("guard_timer_seconds", "guardTimerSeconds", int),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceGetRequest(OCIRequest):
    """
    Get a call center's night service settings.

    The response is either a ``GroupCallCenterNightServiceGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceGetRequest17(OCIRequest):
    """
    Get a call center's night service settings.

    The response is either a ``GroupCallCenterNightServiceGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceGetRequest17sp1(OCIRequest):
    """
    Get a call center's night service settings.

    The response is either a ``GroupCallCenterNightServiceGetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceGetRequest20(OCIRequest):
    """
    Get a call center's night service settings.

    The response is either a ``GroupCallCenterNightServiceGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterOverflowGetRequest(OCIRequest):
    """
    Get a call center's overflow settings.

    The response is either a ``GroupCallCenterOverflowGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterOverflowGetRequest17(OCIRequest):
    """
    Get a call center's overflow settings.

    The response is either a ``GroupCallCenterOverflowGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterOverflowGetRequest20(OCIRequest):
    """
    Get a call center's overflow settings.

    The response is either a ``GroupCallCenterOverflowGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueCallDispositionCodeAddRequest(OCIRequest):
    """
    Add a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
        is_active: isActive
        description: description
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueCallDispositionCodeDeleteRequest(OCIRequest):
    """
    Delete a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueCallDispositionCodeGetListRequest(OCIRequest):
    """
    Get the list of Call Center Level and Organization Level Call Disposition Codes.

    The response is either ``GroupCallCenterQueueCallDispositionCodeGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueCallDispositionCodeGetRequest(OCIRequest):
    """
    Get a Call Center Call Disposition Code.

    The response is either ``GroupCallCenterQueueCallDispositionCodeGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueCallDispositionCodeModifyRequest(OCIRequest):
    """
    Modify a Call Center Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
        is_active: isActive
        description: description
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueCallDispositionCodeSettingsGetRequest(OCIRequest):
    """
    Request the user level data associated with Call Center Call Disposition Code
    Settings.

    The response is either a
    ``GroupCallCenterQueueCallDispositionCodeSettingsGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueStatusNotificationGetRequest(OCIRequest):
    """
    Get the status configuration for a given call center.

    The response is either a ``GroupCallCenterQueueStatusNotificationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueStatusNotificationModifyRequest(OCIRequest):
    """
    Set the status configuration for a given call center.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        enable_queue_status_notification: enableQueueStatusNotification
        enable_queue_depth_threshold: enableQueueDepthThreshold
        enable_waiting_time_threshold: enableWaitingTimeThreshold
        number_of_calls_threshold: numberOfCallsThreshold
        waiting_time_of_calls_threshold: waitingTimeOfCallsThreshold
    """

    service_user_id: str = attr.ib()
    enable_queue_status_notification: bool = attr.ib(default=None)
    enable_queue_depth_threshold: bool = attr.ib(default=None)
    enable_waiting_time_threshold: bool = attr.ib(default=None)
    number_of_calls_threshold: int = attr.ib(default=None)
    waiting_time_of_calls_threshold: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("enable_queue_status_notification", "enableQueueStatusNotification", bool),
            E("enable_queue_depth_threshold", "enableQueueDepthThreshold", bool),
            E("enable_waiting_time_threshold", "enableWaitingTimeThreshold", bool),
            E("number_of_calls_threshold", "numberOfCallsThreshold", int),
            E("waiting_time_of_calls_threshold", "waitingTimeOfCallsThreshold", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueThresholdsGetRequest(OCIRequest):
    """
    Get a call center's queue Thresholds settings.

    The response is either a ``GroupCallCenterQueueThresholdsGetRequest()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallGetRequest(OCIRequest):
    """
    Get a call center's stranded call settings.

    The response is either a ``GroupCallCenterStrandedCallGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallGetRequest17(OCIRequest):
    """
    Get a call center's stranded call settings.

    The response is either a ``GroupCallCenterStrandedCallGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallGetRequest20(OCIRequest):
    """
    Get a call center's stranded call settings.

    The response is either a ``GroupCallCenterStrandedCallGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallUnavailableGetRequest(OCIRequest):
    """
    Get a call center's stranded calls - unavailable settings.

    The response is either a ``GroupCallCenterStrandedCallUnavailableGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallUnavailableGetRequest20(OCIRequest):
    """
    Get a call center's stranded calls - unavailable settings.

    The response is either a ``GroupCallCenterStrandedCallUnavailableGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterSupervisorReportingGetRequest(OCIRequest):
    """
    Get a list of supervisors assigned to a call center.

    Only users in the same group or enterprise as this call center can successfully
    execute this request.

    The response is either a ``GroupCallCenterSupervisorReportingGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetSupervisorListRequest16()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkAddInstanceRequest(OCIRequest):
    """
    Adds a Call Park group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("user_id", "userId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkAddInstanceRequest16sp2(OCIRequest):
    """
    Adds a Call Park group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: recallAlternateUserId recallTo, use value
    "Parking User Only" in HSS data mode

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        user_id: userId
        recall_alternate_user_id: recallAlternateUserId
        recall_to: recallTo
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    user_id: List[str] = attr.ib(default=None)
    recall_alternate_user_id: str = attr.ib(default=None)
    recall_to: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("user_id", "userId", str, is_array=True),
            E("recall_alternate_user_id", "recallAlternateUserId", str),
            E("recall_to", "recallTo", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkDeleteInstanceRequest(OCIRequest):
    """
    Deletes a Call Park group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkGetInstanceListRequest(OCIRequest):
    """
    Request to get a list of Call Park group instances within a group.

    The response is either ``GroupCallParkGetInstanceListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkGetInstanceRequest(OCIRequest):
    """
    Gets a Call Park group.

    The response is either ``GroupCallParkGetInstanceResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkGetInstanceRequest16sp2(OCIRequest):
    """
    Gets a Call Park group.

    The response is either ``GroupCallParkGetInstanceResponse16sp2()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkGetRequest(OCIRequest):
    """
    Gets the Call Park Group settings.

    The response is either ``GroupCallParkGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkGetRequest16sp2(OCIRequest):
    """
    Gets the Call Park Group settings.

    The response is either ``GroupCallParkGetResponse16sp2()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkModifyRequest(OCIRequest):
    """
    Modifies the Group's Call Park settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: recallAlternateUserId recallRingPattern
    recallTo alternateUserRecallTimerSeconds

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        recall_timer_seconds: recallTimerSeconds
        display_timer_seconds: displayTimerSeconds
        enable_destination_announcement: enableDestinationAnnouncement
        recall_alternate_user_id: recallAlternateUserId
        recall_ring_pattern: recallRingPattern
        recall_to: recallTo
        alternate_user_recall_timer_seconds: alternateUserRecallTimerSeconds
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    recall_timer_seconds: int = attr.ib(default=None)
    display_timer_seconds: int = attr.ib(default=None)
    enable_destination_announcement: bool = attr.ib(default=None)
    recall_alternate_user_id: str = attr.ib(default=None)
    recall_ring_pattern: str = attr.ib(default=None)
    recall_to: str = attr.ib(default=None)
    alternate_user_recall_timer_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("recall_timer_seconds", "recallTimerSeconds", int),
            E("display_timer_seconds", "displayTimerSeconds", int),
            E("enable_destination_announcement", "enableDestinationAnnouncement", bool),
            E("recall_alternate_user_id", "recallAlternateUserId", str),
            E("recall_ring_pattern", "recallRingPattern", str),
            E("recall_to", "recallTo", str),
            E(
                "alternate_user_recall_timer_seconds",
                "alternateUserRecallTimerSeconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallPickupAddInstanceRequest(OCIRequest):
    """
    Adds a Call Pickup group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("user_id", "userId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallPickupDeleteInstanceRequest(OCIRequest):
    """
    Deletes a Call Pickup group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallPickupGetInstanceListRequest(OCIRequest):
    """
    Request to get a list of Call Pickup instances within a group.

    The response is either ``GroupCallPickupGetInstanceListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallPickupGetInstanceRequest(OCIRequest):
    """
    Gets a Call Pickup group.

    The response is either ``GroupCallPickupGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest14(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest14sp1(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse14sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest14sp4(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse14sp4()`` or an
    ``ErrorResponse()``.

    Replaced By : ``GroupCallProcessingGetPolicyRequest15()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest14sp7(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse14sp7()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName) The useGroupMediaSetting attribute controls the Media settings
    (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting attribute
    controls the Call Limits settings (useMaxSimultaneousCalls, maxSimultaneousCalls,
    useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing)

    Replaced By: ``GroupCallProcessingGetPolicyRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest15(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse15()`` or an
    ``ErrorResponse()``.

    Replaced By: ``GroupCallProcessingGetPolicyRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest15sp2(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse15sp2()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName) The useGroupMediaSetting attribute controls the Media settings
    (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting attribute
    controls the Call Limits settings (useMaxSimultaneousCalls, maxSimultaneousCalls,
    useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing)

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest16(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse16()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName) The useGroupMediaSetting attribute controls the Media settings
    (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting attribute
    controls the Call Limits settings (useMaxSimultaneousCalls, maxSimultaneousCalls,
    useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing)

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest16sp2(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse16sp2()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName) The useGroupMediaSetting attribute controls the Media settings
    (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting attribute
    controls the Call Limits settings (useMaxSimultaneousCalls, maxSimultaneousCalls,
    useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing) The useGroupDCLIDSetting controls the Dialable
    Caller ID settings (enableDialableCallerID)

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest17(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse17()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName) The useGroupMediaSetting attribute controls the Media settings
    (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting attribute
    controls the Call Limits settings (useMaxSimultaneousCalls, maxSimultaneousCalls,
    useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing)

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest17sp3(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse17sp3()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName) The useGroupMediaSetting attribute controls the Media settings
    (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting attribute
    controls the Call Limits settings (useMaxSimultaneousCalls, maxSimultaneousCalls,
    useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing) The useGroupDCLIDSetting controls the Dialable
    Caller ID settings (enableDialableCallerID) The following elements are only used in AS
    data mode: useGroupDCLIDSetting enableDialableCallerID Replaced by
    ``GroupCallProcessingGetPolicyRequest17sp4()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest17sp4(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse17sp4()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName, allowConfigurableCLIDForRedirectingIdentity) The useGroupMediaSetting
    attribute controls the Media settings (medisPolicySelection, supportedMediaSetName)
    The useGroupCallLimitsSetting attribute controls the Call Limits settings
    (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing) The following elements are only used in AS data
    mode: useGroupDCLIDSetting enableDialableCallerID Replaced by
    ``GroupCallProcessingGetPolicyRequest18()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest18(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse18()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy, emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity,
    useGroupName, allowDepartmentCLIDNameOverride) The useGroupMediaSetting attribute
    controls the Media settings (medisPolicySelection, supportedMediaSetName) The
    useGroupCallLimitsSetting attribute controls the Call Limits settings
    (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing) The following elements are only used in AS data
    mode: useGroupDCLIDSetting enableDialableCallerID allowDepartmentCLIDNameOverride

    Replaced By : ``GroupCallProcessingGetPolicyRequest18sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest18sp1(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse18sp1()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy,enterpriseCallsCLIDPolicy, groupCallsCLIDPolicy, emergencyClidPolicy,
    allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowDepartmentCLIDNameOverride) The useGroupMediaSetting attribute controls the Media
    settings (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting
    attribute controls the Call Limits settings (useMaxSimultaneousCalls,
    maxSimultaneousCalls, useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing) The following elements are only used in AS data
    mode: useGroupDCLIDSetting enableDialableCallerID allowDepartmentCLIDNameOverride
    enterpriseCallsCLIDPolicy groupCallsCLIDPolicy Replaced by:
    ``GroupCallProcessingGetPolicyRequest19sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingGetPolicyRequest19sp1(OCIRequest):
    """
    Request the group level data associated with Call Processing Policy.

    The response is either a ``GroupCallProcessingGetPolicyResponse19sp1()`` or an
    ``ErrorResponse()``. The useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy,enterpriseCallsCLIDPolicy, groupCallsCLIDPolicy, emergencyClidPolicy,
    allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowDepartmentCLIDNameOverride) The useGroupMediaSetting attribute controls the Media
    settings (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting
    attribute controls the Call Limits settings (useMaxSimultaneousCalls,
    maxSimultaneousCalls, useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing) The following elements are only used in AS data
    mode: useGroupDCLIDSetting enableDialableCallerID allowDepartmentCLIDNameOverride
    enterpriseCallsCLIDPolicy groupCallsCLIDPolicy

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingModifyPolicyRequest14(OCIRequest):
    """
    Modify the group level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By : ``GroupCallProcessingModifyPolicyRequest15()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_group_setting: useGroupSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_group_setting: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_external_calls_via_private_dialing_plan: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_group_setting", "useGroupSetting", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingModifyPolicyRequest14sp7(OCIRequest):
    """
    Modify the group level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    useGroupCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName) The
    useGroupMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useGroupCallLimitsSetting attribute controls the Call
    Limits settings (useMaxSimultaneousCalls, maxSimultaneousCalls,
    useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing)

    Replaced By: ``GroupCallProcessingModifyPolicyRequest15sp2()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_group_clid_setting: bool = attr.ib(default=None)
    use_group_media_setting: bool = attr.ib(default=None)
    use_group_call_limits_setting: bool = attr.ib(default=None)
    use_group_translation_routing_setting: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_external_calls_via_private_dialing_plan: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_group_clid_setting", "useGroupCLIDSetting", bool),
            E("use_group_media_setting", "useGroupMediaSetting", bool),
            E("use_group_call_limits_setting", "useGroupCallLimitsSetting", bool),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
            ),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingModifyPolicyRequest15(OCIRequest):
    """
    Modify the group level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupCallProcessingModifyPolicyRequest15sp2()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_group_setting: useGroupSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_group_setting: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_group_setting", "useGroupSetting", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallProcessingModifyPolicyRequest15sp2(OCIRequest):
    """
    Modify the group level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    useGroupCLIDSetting attribute controls the CLID settings
    (clidPolicy,enterpriseCallsCLIDPolicy, groupCallsCLIDPolicy, emergencyClidPolicy,
    allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity, allowDepartmentCLIDNameOverride) The
    allowDepartmentCLID attribute is automatically set to false when the useGroupName
    attribute is set to false.  The useGroupMediaSetting attribute controls the Media
    settings (medisPolicySelection, supportedMediaSetName) The useGroupCallLimitsSetting
    attribute controls the Call Limits settings (useMaxSimultaneousCalls,
    maxSimultaneousCalls, useMaxSimultaneousVideoCalls, maxSimultaneousVideoCalls,
    useMaxCallTimeForAnsweredCalls, maxCallTimeForAnsweredCallsMinutes,
    useMaxCallTimeForUnansweredCalls, maxCallTimeForUnansweredCallsMinutes,
    useMaxConcurrentRedirectedCalls, useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useGroupTranslationRoutingSetting attribute controls the routing and translation
    settings (networkUsageSelection, enforceGroupCallingLineIdentityRestriction,
    allowEnterpriseGroupCallTypingForPrivateDialingPlan,
    allowEnterpriseGroupCallTypingForPublicDialingPlan,
    overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan,
    enableEnterpriseExtensionDialing) The useGroupDCLIDSetting controls the Dialable
    Caller ID settings (enableDialableCallerID) The following elements are only used in AS
    data mode: useGroupDCLIDSetting enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity allowDepartmentCLIDNameOverride
    allowConfigurableCLIDForRedirectingIdentity enterpriseCallsCLIDPolicy
    groupCallsCLIDPolicy

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_group_clid_setting: useGroupCLIDSetting
        use_group_media_setting: useGroupMediaSetting
        use_group_call_limits_setting: useGroupCallLimitsSetting
        use_group_translation_routing_setting: useGroupTranslationRoutingSetting
        use_group_dclid_setting: useGroupDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        enable_dialable_caller_id: enableDialableCallerID
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        group_calls_clid_policy: groupCallsCLIDPolicy
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_group_clid_setting: bool = attr.ib(default=None)
    use_group_media_setting: bool = attr.ib(default=None)
    use_group_call_limits_setting: bool = attr.ib(default=None)
    use_group_translation_routing_setting: bool = attr.ib(default=None)
    use_group_dclid_setting: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    group_calls_clid_policy: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_group_clid_setting", "useGroupCLIDSetting", bool),
            E("use_group_media_setting", "useGroupMediaSetting", bool),
            E("use_group_call_limits_setting", "useGroupCallLimitsSetting", bool),
            E(
                "use_group_translation_routing_setting",
                "useGroupTranslationRoutingSetting",
                bool,
            ),
            E("use_group_dclid_setting", "useGroupDCLIDSetting", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E("group_calls_clid_policy", "groupCallsCLIDPolicy", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallRecordingGetRequest(OCIRequest):
    """
    Get the Call Recording platform for a group.

    The response is either a ``GroupCallRecordingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallRecordingModifyRequest(OCIRequest):
    """
    Modify the Call Recording platform assignment for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallingLineIdGetRequest(OCIRequest):
    """
    Get the calling line id settings for a group.

    The response is either a ``GroupCallingLineIdGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallingLineIdModifyRequest(OCIRequest):
    """
    Modify the calling line id settings for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_group_number: useGroupNumber
        use_group_name: useGroupName
        calling_line_id_phone_number: callingLineIdPhoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_group_number: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_group_number", "useGroupNumber", bool),
            E("use_group_name", "useGroupName", bool),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallingPlanAddDigitPatternRequest(OCIRequest):
    """
    Add a new calling plan digit string.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        digit_pattern: digitPattern
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    digit_pattern: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("digit_pattern", "digitPattern", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallingPlanDeleteDigitPatternListRequest(OCIRequest):
    """
    Delete one or more calling plan digit strings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallingPlanGetDigitPatternListRequest(OCIRequest):
    """
    Get the list of calling plan digit strings for a group.

    The response is either a ``GroupCallingPlanGetDigitPatternListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallingPlanModifyDigitPatternRequest(OCIRequest):
    """
    Modify a calling plan digit string.

    The name is a key; it cannot be changed.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        digit_pattern: digitPattern
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    digit_pattern: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("digit_pattern", "digitPattern", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCollaborateBridgeDeleteInstanceRequest(OCIRequest):
    """
    Delete a collaborate bridge from a group.

    The request fails when attempting to delete the default collaborate bridge.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCollaborateBridgeGetInstanceListRequest(OCIRequest):
    """
    Get a list of collaborate bridges within a group.

    The response is either ``GroupCollaborateBridgeGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_name: departmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_name", "departmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCollaborateBridgeGetInstanceRequest(OCIRequest):
    """
    Request to get all the information of a collaborate bridge.

    The response is either ``GroupCollaborateBridgeGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommPilotCallManagerGetRequest(OCIRequest):
    """
    Request the group level data associated with CommPilot Call Manager.

    The response is either a ``GroupCommPilotCallManagerGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommPilotCallManagerModifyRequest(OCIRequest):
    """
    Modify the group level data associated with CommPilot Call Manager.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_directory: groupDirectory
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_directory: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_directory", "groupDirectory", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommonPhoneListDeleteListRequest(OCIRequest):
    """
    Delete one or more entries from a group's common phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        entry_name: entryName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    entry_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("entry_name", "entryName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommonPhoneListModifyRequest(OCIRequest):
    """
    Modify an entry in a group's common phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        entry_name: entryName
        new_entry_name: newEntryName
        phone_number: phoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    entry_name: str = attr.ib()
    new_entry_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("entry_name", "entryName", str, is_required=True),
            E("new_entry_name", "newEntryName", str),
            E("phone_number", "phoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommunicationBarringAuthorizationCodeDeleteListRequest(OCIRequest):
    """
    Delete a list of Communication Barring Authorization codes from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code", "code", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommunicationBarringAuthorizationCodeGetListRequest(OCIRequest):
    """
    Get a list of Communication Barring Authorization Codes for a group.

    The response is either a
    ``GroupCommunicationBarringAuthorizationCodeGetListResponse()`` or an
    ``ErorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommunicationBarringGetRequest(OCIRequest):
    """
    Gets Communication Barring setting for a group.

    The response is either a ``GroupCommunicationBarringGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommunicationBarringModifyRequest(OCIRequest):
    """
    Gets Communication Barring setting for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_default_service_provider_profile: useDefaultServiceProviderProfile
        profile: profile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_default_service_provider_profile: bool = attr.ib(default=None)
    profile: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "use_default_service_provider_profile",
                "useDefaultServiceProviderProfile",
                bool,
            ),
            E("profile", "profile", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommunicationBarringProfileGetAssignedListRequest(OCIRequest):
    """
    Get the list of all communication barring profiles assigned to the group.

    The response is either a ``GroupCommunicationBarringProfileGetAssignedListResponse()``
    or an ``ErrorResponse()``. This command only applies to groups in an Enterprise.  This
    command will fail for groups in a Service Provider.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryAddRequest(OCIRequest):
    """
    Adds a Custom Contact Directory to a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replace by:
    ``GroupCustomContactDirectoryAddRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("user_id", "userId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryDeleteRequest(OCIRequest):
    """
    Deletes a Custom Contact Directory to a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryGetListRequest(OCIRequest):
    """
    Gets the list of Custom Contact Directories for a group.

    The response is either ``GroupCustomContactDirectoryGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryGetRequest(OCIRequest):
    """
    Gets a Custom Contact Directory in a group.

    The response is either ``GroupCustomContactDirectoryGetResponse()`` or
    ``ErrorResponse()``. Replace by: ``GroupCustomContactDirectoryGetRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomRingbackGroupGetRequest(OCIRequest):
    """
    Get the group's custom ring back service settings.

    The response is either a ``GroupCustomRingbackGroupGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``GroupCustomRingbackGroupGetRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomRingbackGroupGetRequest16(OCIRequest):
    """
    Get the group's custom ring back service settings.

    The response is either a ``GroupCustomRingbackGroupGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomRingbackGroupGetRequest20(OCIRequest):
    """
    Get the group's custom ring back service settings.

    The response is either a ``GroupCustomRingbackGroupGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeleteRequest(OCIRequest):
    """
    Delete a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentAdminDeleteRequest(OCIRequest):
    """
    Delete a group department administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentAdminGetRequest(OCIRequest):
    """
    Get a group department administrators profile.

    The response is either a ``GroupDepartmentAdminGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentAdminModifyRequest(OCIRequest):
    """
    Modify a group department administrator.

    Since old password is not specified here, any password rule related to old password
    does not apply.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
    """

    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    language: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str),
            E("language", "language", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentDeleteRequest(OCIRequest):
    """
    Delete a department from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_name: departmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentGetAvailableParentListRequest(OCIRequest):
    """
    Get a list of departments that could be the parent department of the specified
    department.

    The department itself and all its descendents are not eligible to be the parent
    department.  If the group belongs to an enterprise, it also returns the departments
    defined in the enterprise it belongs to.

    The response is either ``GroupDepartmentGetAvailableParentListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_name: departmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentGetListRequest(OCIRequest):
    """
    Request a list of departments in a group.

    You may request only the list of departments defined at the group-level, or you may
    request the list of all departments in the group including all the departments defined
    within the enterprise the group belongs to.

    The response is either ``GroupDepartmentGetListResponse()`` or ``ErrorResponse()``.
    Replaced by: ``GroupDepartmentGetListRequest18()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        include_enterprise_departments: includeEnterpriseDepartments
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    include_enterprise_departments: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "include_enterprise_departments",
                "includeEnterpriseDepartments",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentGetListRequest18(OCIRequest):
    """
    Request a list of departments in a group.

    You may request only the list of departments defined at the group-level, or you may
    request the list of all departments in the group including all the departments defined
    within the enterprise the group belongs to.

    The response is either ``GroupDepartmentGetListResponse18()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        include_enterprise_departments: includeEnterpriseDepartments
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    include_enterprise_departments: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "include_enterprise_departments",
                "includeEnterpriseDepartments",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentGetRequest(OCIRequest):
    """
    Request the attributes of a department.

    The response is either a ``GroupDepartmentGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_name: departmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceManagementGetAccessDeviceCountForDeviceTypeGroupRequest(OCIRequest):
    """
    Request the number of access device of a particular device type and group.

    If countOnlyResetSupportedDevice is true, count only access devices if the device type
    supports reset.  Devices are counted only if their device type supports Device
    Management.  An error is returned if deviceType is specified but does not support
    device management.

    The response is either
    ``GroupDeviceManagementGetAccessDeviceCountForDeviceTypeGroupResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        count_only_reset_supported_device: countOnlyResetSupportedDevice
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    count_only_reset_supported_device: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E(
                "count_only_reset_supported_device",
                "countOnlyResetSupportedDevice",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceManagementInProgressAndPendingEventCancelRequest(OCIRequest):
    """
    Cancel pending and in progress events.

    A list of individual events can be canceled.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        event_id: eventId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    event_id: List[int] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("event_id", "eventId", int, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeCustomTagAddRequest(OCIRequest):
    """
    Request to add a static configuration tag for an access device type used in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        tag_name: tagName
        tag_value: tagValue
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeCustomTagDeleteListRequest(OCIRequest):
    """
    Request to delete static configuration tags for an access device type used in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        tag_name: tagName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    tag_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeCustomTagGetListRequest(OCIRequest):
    """
    Request to get the list of custom configuration tags managed by the Device Management
    System, on a per-device type basis for a group.

    The response is either ``GroupDeviceTypeCustomTagGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeCustomTagModifyRequest(OCIRequest):
    """
    Request to modify a static configuration tag for an access device type used in a
    group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        tag_name: tagName
        tag_value: tagValue
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileGetListRequest(OCIRequest):
    """
    Request to get the list of device type files managed by the Device Management System,
    on a per-group basis.

    The response is either ``GroupDeviceTypeFileGetListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupDeviceTypeFileGetListRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileGetListRequest14sp8(OCIRequest):
    """
    Request to get the list of device type files managed by the Device Management System,
    on a per-group basis.

    The response is either ``GroupDeviceTypeFileGetListResponse14sp8()`` or
    ``ErrorResponse()``. Replaced by: ``GroupDeviceTypeFileGetListRequest21()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileGetListRequest21(OCIRequest):
    """
    Request to get the list of device type files managed by the Device Management System,
    on a per-group basis.

    The response is either ``GroupDeviceTypeFileGetListResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileGetRequest(OCIRequest):
    """
    Request to get a group device type file.

    The response is either ``GroupDeviceTypeFileGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupDeviceTypeFileGetRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        file_type: fileType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    file_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileGetRequest14sp8(OCIRequest):
    """
    Request to get a group device type file.

    The response is either ``GroupDeviceTypeFileGetResponse14sp8()`` or
    ``ErrorResponse()``. Replaced by: ``GroupDeviceTypeFileGetRequest16sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileGetRequest16sp1(OCIRequest):
    """
    Request to get a group device type file.

    The response is either ``GroupDeviceTypeFileGetResponse16sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyAddAccessCodeRequest(OCIRequest):
    """
    Request to add a Group level Dial Plan Access Code and its all attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        access_code: accessCode
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    access_code: str = attr.ib()
    include_code_for_network_translations_and_routing: bool = attr.ib()
    include_code_for_screening_services: bool = attr.ib()
    enable_secondary_dial_tone: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
                is_required=True,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
                is_required=True,
            ),
            E(
                "enable_secondary_dial_tone",
                "enableSecondaryDialTone",
                bool,
                is_required=True,
            ),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyDeleteAccessCodeRequest(OCIRequest):
    """
    Request to delete a Group level Dial Plan Access Code and its all attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        access_code: accessCode
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyGetAccessCodeListRequest(OCIRequest):
    """
    Request the Group level data associated with Dial Plan Policy.

    The response is either a ``GroupDialPlanPolicyGetAccessCodeListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyGetAccessCodeRequest(OCIRequest):
    """
    Request access code data associated with Group level Dial Plan Policy access codes.

    The response is either a ``GroupDialPlanPolicyGetAccessCodeResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        access_code: accessCode
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyGetRequest(OCIRequest):
    """
    Request the Group level data associated with Dial Plan Policy.

    The response is either a ``GroupDialPlanPolicyGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``GroupDialPlanPolicyGetRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyGetRequest17(OCIRequest):
    """
    Request the Group level data associated with Dial Plan Policy.

    The response is either a ``GroupDialPlanPolicyGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyModifyAccessCodeRequest(OCIRequest):
    """
    Request to modify a Group level Dial Plan Access Code and its attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        access_code: accessCode
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    access_code: str = attr.ib()
    include_code_for_network_translations_and_routing: bool = attr.ib(default=None)
    include_code_for_screening_services: bool = attr.ib(default=None)
    enable_secondary_dial_tone: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
            ),
            E("enable_secondary_dial_tone", "enableSecondaryDialTone", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialPlanPolicyModifyRequest(OCIRequest):
    """
    Modify the Group level data associated with Dial Plan Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_setting: useSetting
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        prefer_e164_number_format_for_callback_services:
            preferE164NumberFormatForCallbackServices
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_setting: str = attr.ib(default=None)
    requires_access_code_for_public_calls: bool = attr.ib(default=None)
    allow_e164_public_calls: bool = attr.ib(default=None)
    prefer_e164_number_format_for_callback_services: bool = attr.ib(default=None)
    public_digit_map: str = attr.ib(default=None)
    private_digit_map: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_setting", "useSetting", str),
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool),
            E(
                "prefer_e164_number_format_for_callback_services",
                "preferE164NumberFormatForCallbackServices",
                bool,
            ),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialableCallerIDCriteriaAddRequest(OCIRequest):
    """
    Add a new Dialable Caller ID Criteria.

    Criteria are added at the bottom of the list with the lowest priority.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    prefix_digits: str = attr.ib(default=None)
    match_call_type: List[str] = attr.ib(default=None)
    match_alternate_call_indicator: List[str] = attr.ib(default=None)
    match_local_category: bool = attr.ib()
    match_national_category: bool = attr.ib()
    match_interlata_category: bool = attr.ib()
    match_intralata_category: bool = attr.ib()
    match_international_category: bool = attr.ib()
    match_private_category: bool = attr.ib()
    match_emergency_category: bool = attr.ib()
    match_other_category: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialableCallerIDCriteriaDeleteRequest(OCIRequest):
    """
    Delete a Dialable Caller ID Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialableCallerIDCriteriaGetRequest(OCIRequest):
    """
    Get an existing Dialable Caller ID Criteria.

    The response is either a ``GroupDialableCallerIDCriteriaGetRequest()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialableCallerIDGetRequest(OCIRequest):
    """
    Get the Group’s Dialable Caller ID settings and criteria list.

    The response is either a ``GroupDialableCallerIDGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDigitCollectionGetRequest13mp4(OCIRequest):
    """
    Request the group's digit collection attributes.

    The response is either a ``GroupDigitCollectionGetResponse13mp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDigitCollectionModifyRequest(OCIRequest):
    """
    Modifies the group's digit collection attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_setting: useSetting
        access_code: accessCode
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_setting: str = attr.ib(default=None)
    access_code: str = attr.ib(default=None)
    public_digit_map: str = attr.ib(default=None)
    private_digit_map: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_setting", "useSetting", str),
            E("access_code", "accessCode", str),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDirectoryNumberHuntingGetAvailableUserListRequest(OCIRequest):
    """
    Request to get the agents of a call center or hunt group that are available to be
    assigned to a directory number hunting group.

    They are agents that are not already assigned to any other directory number hunting
    group.

    The response is either ``GroupDirectoryNumberHuntingGetAvailableUserListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDirectoryNumberHuntingGetRequest(OCIRequest):
    """
    Request to get the properties of the DNH service for a specified serviceUserId.

    It gets the agents of a call center or hunt group that are members of a directory
    number hunting group.  They are agents that are not already assigned to any other
    directory number hunting group.

    The response is either ``GroupDirectoryNumberHuntingGetResponse()`` or
    ``ErrorResponse()``. Replaced by: ``GroupDirectoryNumberHuntingGetRequest17sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDirectoryNumberHuntingGetRequest17sp1(OCIRequest):
    """
    Request to get the properties of the DNH service for a specified serviceUserId.

    It gets the agents of a call center or hunt group that are members of a directory
    number hunting group.  They are agents that are not already assigned to any other
    directory number hunting group.

    The response is either ``GroupDirectoryNumberHuntingGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetActivationListRequest(OCIRequest):
    """
    Get the list of activated and deactivated DNs in a group.

    Ranges of DNs with identical assignment and activation properties are coalesced to a
    single table row entry.  Only DNs assigned to a users are listed in the response when
    the number activation Mode is set to "User Activation Enabled" Dns assigned to the
    IMRN pool are not listed in the response.

    The response is either a ``GroupDnGetActivationListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetAvailableListRequest(OCIRequest):
    """
    Get the list of DNs that are assigned to a group and still available for assignment to
    users or service instances within the group.

    Dns assigned to the IMRN pool are not listed in the response.

    The response is either a ``GroupDnGetAvailableListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetAvailableRangesListRequest(OCIRequest):
    """
    Get a list of group DNs that are not assigned to user, service instances or IMRN pool.

    The Dns are returned in a list of DNs or DN ranges and formated in E164 format for
    display.

    The response is either a ``GroupDnGetAvailableRangeListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetDetailedAvailableListRequest(OCIRequest):
    """
    Get the list of DNs that are assigned to a group and still available for assignment to
    users within the group with the department name, if the DN is assigned to the
    department.

    Dns assigned to the IMRN pool are not listed in the response.

    The response is either a ``GroupDnGetDetailedAvailableListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetListRequest(OCIRequest):
    """
    Get the list of DNs that are assigned to a group.

    Dns assigned to the IMRN pool are not listed in the response.

    The response is either a ``GroupDnGetListResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetSummaryListRequest(OCIRequest):
    """
    Get the list of assigned and unassigned DN ranges in a group.

    Dns assigned to the IMRN pool are not listed in the response.

    The response is either a ``GroupDnGetSummaryListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDomainAssignListRequest(OCIRequest):
    """
    Assign a list of domains to a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        domain: domain
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    domain: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("domain", "domain", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDomainGetAssignedListRequest(OCIRequest):
    """
    Requests the list of all domains assigned to a group.

    The response is either ``GroupDomainGetAssignedListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDomainUnassignListRequest(OCIRequest):
    """
    Unassign a list of domains from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        domain: domain
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    domain: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("domain", "domain", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEmergencyZonesGetHomeZoneListRequest(OCIRequest):
    """
    Request the group level data associated with Emergency Zones.

    The response is either a ``GroupEmergencyZonesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEmergencyZonesGetRequest(OCIRequest):
    """
    Request the group level data associated with Emergency Zones.

    The response is either a ``GroupEmergencyZonesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEmergencyZonesModifyHomeZoneListRequest(OCIRequest):
    """
    Modify a list of home zones and/or home zone ranges.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_ip_address_list: homeZoneIpAddressList
        home_zone_ip_address_range_list: homeZoneIpAddressRangeList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_ip_address_list: List[str] = attr.ib(default=None)
    home_zone_ip_address_range_list: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "home_zone_ip_address_list",
                "homeZoneIpAddressList",
                str,
                is_complex=True,
                is_array=True,
            ),  # unknown
            E(
                "home_zone_ip_address_range_list",
                "homeZoneIpAddressRangeList",
                str,
                is_complex=True,
                is_array=True,
            ),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEmergencyZonesModifyRequest(OCIRequest):
    """
    Modify the group level data associated with Emergency Zones.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        emergency_zones_prohibition: emergencyZonesProhibition
        send_emergency_call_notify_email: sendEmergencyCallNotifyEmail
        emergency_call_notify_email_address: emergencyCallNotifyEmailAddress
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    emergency_zones_prohibition: str = attr.ib(default=None)
    send_emergency_call_notify_email: bool = attr.ib(default=None)
    emergency_call_notify_email_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("emergency_zones_prohibition", "emergencyZonesProhibition", str),
            E("send_emergency_call_notify_email", "sendEmergencyCallNotifyEmail", bool),
            E(
                "emergency_call_notify_email_address",
                "emergencyCallNotifyEmailAddress",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkAddRequest(OCIRequest):
    """
    Request to add an enterprise trunk in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``GroupEnterpriseTrunkAddRequest21()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    maximum_reroute_attempts: int = attr.ib()
    route_exhaustion_action: str = attr.ib()
    route_exhaustion_forward_address: str = attr.ib(default=None)
    ordered_routing: str = attr.ib(default=None)
    priority_weighted_routing: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkAddRequest21(OCIRequest):
    """
    Request to add an enterprise trunk in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
        enable_capacity_management: enableCapacityManagement
        max_active_calls: maxActiveCalls
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    maximum_reroute_attempts: int = attr.ib()
    route_exhaustion_action: str = attr.ib()
    route_exhaustion_forward_address: str = attr.ib(default=None)
    ordered_routing: str = attr.ib(default=None)
    priority_weighted_routing: str = attr.ib(default=None)
    enable_capacity_management: bool = attr.ib()
    max_active_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E(
                "maximum_reroute_attempts",
                "maximumRerouteAttempts",
                int,
                is_required=True,
            ),
            E("route_exhaustion_action", "routeExhaustionAction", str, is_required=True),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "enable_capacity_management",
                "enableCapacityManagement",
                bool,
                is_required=True,
            ),
            E("max_active_calls", "maxActiveCalls", int),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkAddUserListRequest(OCIRequest):
    """
    Request to add users to an enterprise trunk in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkDeleteRequest(OCIRequest):
    """
    Request to delete an enterprise trunk in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkDeleteUserListRequest(OCIRequest):
    """
    Request to delete users from an enterprise trunk in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkForceAssignUserListRequest(OCIRequest):
    """
    Request to add users to an enterprise trunk in a group.

    If the user is already assigned to another enterprise trunk, it will be unassigned
    from the old enterprise trunk and assigned to the new enterprise trunk specified in
    this request.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("user_id", "userId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkGetListRequest(OCIRequest):
    """
    Request to get the list of all enterprise trunks defined in a group.

    The response is either a ``GroupEnterpriseTrunkGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkGetRequest(OCIRequest):
    """
    Request to get an enterprise trunk The response is either an
    ``GroupEnterpriseTrunkGetResponse()`` or an ``ErrorResponse()``.

    Replaced by: ``GroupEnterpriseTrunkGetRequest21()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkGetRequest21(OCIRequest):
    """
    Request to get an enterprise trunk The response is either an
    ``GroupEnterpriseTrunkGetResponse21()`` or an ``ErrorResponse()``.


    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkModifyRequest(OCIRequest):
    """
    Request to modify an enterprise trunk in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
        new_enterprise_trunk_name: newEnterpriseTrunkName
        maximum_reroute_attempts: maximumRerouteAttempts
        route_exhaustion_action: routeExhaustionAction
        route_exhaustion_forward_address: routeExhaustionForwardAddress
        ordered_routing: orderedRouting
        priority_weighted_routing: priorityWeightedRouting
        enable_capacity_management: enableCapacityManagement
        max_active_calls: maxActiveCalls
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    new_enterprise_trunk_name: str = attr.ib(default=None)
    maximum_reroute_attempts: int = attr.ib(default=None)
    route_exhaustion_action: str = attr.ib(default=None)
    route_exhaustion_forward_address: str = attr.ib(default=None)
    ordered_routing: str = attr.ib(default=None)
    priority_weighted_routing: str = attr.ib(default=None)
    enable_capacity_management: bool = attr.ib(default=None)
    max_active_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("new_enterprise_trunk_name", "newEnterpriseTrunkName", str),
            E("maximum_reroute_attempts", "maximumRerouteAttempts", int),
            E("route_exhaustion_action", "routeExhaustionAction", str),
            E("route_exhaustion_forward_address", "routeExhaustionForwardAddress", str),
            E("ordered_routing", "orderedRouting", str, is_complex=True),  # unknown
            E(
                "priority_weighted_routing",
                "priorityWeightedRouting",
                str,
                is_complex=True,
            ),  # unknown
            E("enable_capacity_management", "enableCapacityManagement", bool),
            E("max_active_calls", "maxActiveCalls", int),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExchangeIntegrationGetRequest(OCIRequest):
    """
    Request the group level configuration for Exchange Integration.

    The response is either a ``GroupExchangeIntegrationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExistingUsersAssignUserServiceListRequest(OCIRequest):
    """
    Request to assign the user services and service packs to all existing users within the
    group.

    BroadSoft recommends using this command only for small groups with less than 100
    users.  This command will return an error if the group has over 500 users.  The
    recommended way to bulk assign/unassign services is Service Pack Migration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: List[str] = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str, is_array=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExistingUsersUnassignUserServiceListRequest(OCIRequest):
    """
    Requests to unassign the user services and service packs for all existing users within
    the group.

    BroadSoft recommends using this command only for small groups with less than 100
    users.  This command will return an error if the group has over 500 users.  The
    recommended way to bulk assign/unassign services is Service Pack Migration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: List[str] = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str, is_array=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExtensionLengthGetRequest(OCIRequest):
    """
    Request the group's extension length.

    The response is either a ``GroupExtensionLengthGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExtensionLengthGetRequest17(OCIRequest):
    """
    Request the group's extension length.

    The response is either a ``GroupExtensionLengthGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExtensionLengthModifyRequest(OCIRequest):
    """
    Modify the group's extension length.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        extension_length: extensionLength
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    extension_length: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("extension_length", "extensionLength", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExtensionLengthModifyRequest17(OCIRequest):
    """
    Modify the group's extension length range.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        min_extension_length: minExtensionLength
        max_extension_length: maxExtensionLength
        default_extension_length: defaultExtensionLength
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    min_extension_length: int = attr.ib(default=None)
    max_extension_length: int = attr.ib(default=None)
    default_extension_length: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("min_extension_length", "minExtensionLength", int),
            E("max_extension_length", "maxExtensionLength", int),
            E("default_extension_length", "defaultExtensionLength", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeGetListRequest(OCIRequest):
    """
    Get the list of feature access codes for a group.

    The response is either a ``GroupFeatureAccessCodeGetListResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``GroupFeatureAccessCodeGetRequest()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeGetRequest(OCIRequest):
    """
    Get group FAC code level and the list of feature access codes for a group.

    The response is either a ``GroupFeatureAccessCodeGetResponse()`` or an
    ``ErrorResponse()``. Returned Feature Access Codes may be group specific, or Service
    Provider Feature Access Codes, depending on FAC code level.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeGetRequest20(OCIRequest):
    """
    Get group FAC code level and the list of feature access codes for a group.

    The response is either a ``GroupFeatureAccessCodeGetResponse20()`` or an
    ``ErrorResponse()``. Returned Feature Access Codes may be group specific, or Service
    Provider Feature Access Codes, depending on FAC code level.  In release 20 the "Call
    Recording" FAC name is changed to "Call Recording - Start". Replaced by:
    ``GroupFeatureAccessCodeGetRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeGetRequest21(OCIRequest):
    """
    Get group FAC code level and the list of feature access codes for a group.

    The response is either a ``GroupFeatureAccessCodeGetResponse20()`` or an
    ``ErrorResponse()``. Returned Feature Access Codes may be group specific, or Service
    Provider Feature Access Codes, depending on FAC code level.  In release 20 the "Call
    Recording" FAC name is changed to "Call Recording - Start".

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFileRepositoryDeviceUserAddRequest(OCIRequest):
    """
    Add a new group file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        file_repository_name: fileRepositoryName
        user_name: userName
        password: password
        allow_put: allowPut
        allow_delete: allowDelete
        allow_get: allowGet
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()
    password: str = attr.ib()
    allow_put: bool = attr.ib()
    allow_delete: bool = attr.ib()
    allow_get: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
            E("password", "password", str, is_required=True),
            E("allow_put", "allowPut", bool, is_required=True),
            E("allow_delete", "allowDelete", bool, is_required=True),
            E("allow_get", "allowGet", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFileRepositoryDeviceUserDeleteRequest(OCIRequest):
    """
    Delete a group file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        file_repository_name: fileRepositoryName
        user_name: userName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFileRepositoryDeviceUserGetListRequest(OCIRequest):
    """
    Request the list of group users for a file repository in the system.

    The response is either a ``GroupFileRepositoryDeviceUserGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        file_repository_name: fileRepositoryName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    file_repository_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFileRepositoryDeviceUserModifyRequest(OCIRequest):
    """
    Modify a group file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        file_repository_name: fileRepositoryName
        user_name: userName
        password: password
        allow_put: allowPut
        allow_delete: allowDelete
        allow_get: allowGet
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()
    password: str = attr.ib(default=None)
    allow_put: bool = attr.ib(default=None)
    allow_delete: bool = attr.ib(default=None)
    allow_get: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
            E("password", "password", str),
            E("allow_put", "allowPut", bool),
            E("allow_delete", "allowDelete", bool),
            E("allow_get", "allowGet", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeAddAlertingGroupRequest(OCIRequest):
    """
    Add an alerting group to a Find-me/Follow-me instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
        alerting_group_description: alertingGroupDescription
        use_diversion_inhibitor: useDiversionInhibitor
        answer_confirmation_required: answerConfirmationRequired
        number_of_rings: numberOfRings
        phone_number: phoneNumber
        user_id: userId
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()
    alerting_group_description: str = attr.ib(default=None)
    use_diversion_inhibitor: bool = attr.ib()
    answer_confirmation_required: bool = attr.ib()
    number_of_rings: int = attr.ib()
    phone_number: str = attr.ib(default=None)
    user_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
            E("alerting_group_description", "alertingGroupDescription", str),
            E(
                "use_diversion_inhibitor",
                "useDiversionInhibitor",
                bool,
                is_required=True,
            ),
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
            E("number_of_rings", "numberOfRings", int, is_required=True),
            E("phone_number", "phoneNumber", str),
            E("user_id", "userId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeDeleteAlertingGroupRequest(OCIRequest):
    """
    Delete an alerting group from a Find-me/Follow-me instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeDeleteAlertingGroupSelectiveCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the Find-me/Follow-me alerting group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
        criteria_name: criteriaName
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeDeleteInstanceRequest(OCIRequest):
    """
    Delete a Find-me/Follow-me instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeGetAlertingGroupListRequest(OCIRequest):
    """
    Get a list of Find-me/Follow-me alerting groups within a group.

    The response is either ``GroupFindMeFollowMeGetAlertingGroupListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeGetAlertingGroupRequest(OCIRequest):
    """
    Request to get all the information of a Find-me/Follow-me alerting group.

    The response is either ``GroupFindMeFollowMeGetAlertingGroupResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaRequest(OCIRequest):
    """
    Request to get all the information of a specific Find-me/Follow-me alerting group
    selective criteria.

    The response is either ``GroupFindMeFollowMeGetAlertingGroupResponse()`` or
    ``ErrorResponse()``. Replaced by:
    ``GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaRequest21()``

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
        criteria_name: criteriaName
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeGetAlertingGroupSelectiveCriteriaRequest21(OCIRequest):
    """
    Request to get all the information of a specific Find-me/Follow-me alerting group
    selective criteria.

    The response is either ``GroupFindMeFollowMeGetAlertingGroupResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
        criteria_name: criteriaName
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeGetInstanceListRequest(OCIRequest):
    """
    Get a list of Find-me/Follow-me instances within a group.

    The response is either ``GroupFindMeFollowMeGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeGetInstanceRequest(OCIRequest):
    """
    Request to get all the information of a Find-me/Follow-me instance.

    The response is either ``GroupFindMeFollowMeGetInstanceResponse()`` or
    ``ErrorResponse()``. Replaced by: ``GroupFindMeFollowMeGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a Find-me/Follow-me instance.

    The response is either ``GroupFindMeFollowMeGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeModifyAlertingGroupListRequest(OCIRequest):
    """
    Modify the priorities assigned to alerting groups The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.

    NOTE: The command fails if all the alerting groups defined for the user are not
    provided.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
    """

    service_user_id: str = attr.ib()
    alerting_group_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingAccessDeviceGetListRequest(OCIRequest):
    """
    Requests the list of access devices available for assignment to a flexible seating
    host or guest.

    The list includes devices created at the system, service provider, and group levels
    that support device management.

    The response is either ``GroupFlexibleSeatingAccessDeviceGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostDeleteInstanceRequest(OCIRequest):
    """
    Delete a flexible seating host instance from a group.

    Host cannot be deleted when a guest is associated to a host.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostGetInstanceRequest(OCIRequest):
    """
    Request to get all the information of a flexible seating host instance.

    The response is either ``GroupFlexibleSeatingHostGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostGuestAssociationGetRequest(OCIRequest):
    """
    Request the flexible seating host guest association details.

    The response is either a ``GroupFlexibleSeatingHostGuestAssociationGetResponse()`` or
    an ``ErrorResponse()``. accessLevel is always set to Group for a Service Provider

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostGuestAssociationModifyRequest(OCIRequest):
    """
    Modify the flexible seating host’s guest association attributes.

    The request fails if enforceAssociationLimit or associationLimitHours are changed when
    the host is associated to a guest.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        enforce_association_limit: enforceAssociationLimit
        association_limit_hours: associationLimitHours
        access_level: accessLevel
        remove_guest_association: removeGuestAssociation
    """

    service_user_id: str = attr.ib()
    enforce_association_limit: bool = attr.ib(default=None)
    association_limit_hours: int = attr.ib(default=None)
    access_level: str = attr.ib(default=None)
    remove_guest_association: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("enforce_association_limit", "enforceAssociationLimit", bool),
            E("association_limit_hours", "associationLimitHours", int),
            E("access_level", "accessLevel", str),
            E("remove_guest_association", "removeGuestAssociation", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostRoutingPoliciesGetRequest(OCIRequest):
    """
    Get a flexible seating host’s routing policies The response is either a
    ``GroupFlexibleSeatingHostRoutingPoliciesGetResponse()`` or an ``ErrorResponse()``.


    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostRoutingPoliciesModifyRequest(OCIRequest):
    """
    Modify a flexible seating host’s routing policies The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        service_user_id: serviceUserId
        allow_emergency_calls: allowEmergencyCalls
        allow_calls_to_voice_portal: allowCallsToVoicePortal
    """

    service_user_id: str = attr.ib()
    allow_emergency_calls: bool = attr.ib(default=None)
    allow_calls_to_voice_portal: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("allow_emergency_calls", "allowEmergencyCalls", bool),
            E("allow_calls_to_voice_portal", "allowCallsToVoicePortal", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGetDefaultRequest(OCIRequest):
    """
    Request the default profile for a group.

    The response is either a ``GroupGetDefaultResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGetRequest(OCIRequest):
    """
    Get the profile for a group.

    The response is either a ``GroupGetResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupGetRequest14sp7()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGetRequest14sp7(OCIRequest):
    """
    Get the profile for a group.

    The response is either a ``GroupGetResponse14sp7()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGetUserServiceAssignedUserListRequest(OCIRequest):
    """
    Get the list of users assigned the user service or service pack.

    The response is either a ``GroupGetUserServiceAssignedUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: str = attr.ib(default=None)
    service_pack_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str),
            E("service_pack_name", "servicePackName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupNightForwardingGetRequest(OCIRequest):
    """
    Request to get the Group Night Forwarding group parameters.

    The response is either ``GroupGroupNightForwardingGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingAddOriginatorListRequest(OCIRequest):
    """
    Add originator(s) to a paging group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        originator_user_id: originatorUserId
    """

    service_user_id: str = attr.ib()
    originator_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "originator_user_id",
                "originatorUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingAddTargetListRequest(OCIRequest):
    """
    Add target(s) to a paging group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        target_user_id: targetUserId
    """

    service_user_id: str = attr.ib()
    target_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("target_user_id", "targetUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingDeleteInstanceRequest(OCIRequest):
    """
    Delete a Group Paging instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingDeleteOriginatorListRequest(OCIRequest):
    """
    Delete originator(s) from a paging group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        originator_user_id: originatorUserId
    """

    service_user_id: str = attr.ib()
    originator_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "originator_user_id",
                "originatorUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingDeleteTargetListRequest(OCIRequest):
    """
    Delete target(s) from a paging group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        target_user_id: targetUserId
    """

    service_user_id: str = attr.ib()
    target_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("target_user_id", "targetUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetInstanceListRequest(OCIRequest):
    """
    Get a list of Paging Groups instances within a group.

    The response is either ``GroupGroupPagingGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetInstanceRequest(OCIRequest):
    """
    Replaced By ``GroupGroupPagingGetInstanceRequest17sp3()`` Request to get all the
    information of a Group Paging instance.

    The response is either ``GroupGroupPagingGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetInstanceRequest17sp3(OCIRequest):
    """
    Request to get all the information of a Group Paging instance.

    The response is either ``GroupGroupPagingGetInstanceResponse17sp3()`` or
    ``ErrorResponse()``. Replaced by: ``GroupGroupPagingGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a Group Paging instance.

    The response is either ``GroupGroupPagingGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetOriginatorListRequest(OCIRequest):
    """
    Get a list of originators assigned to a paging group.

    The response is either a ``GroupGroupPagingGetOriginatorListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetTargetListRequest(OCIRequest):
    """
    Get a list of targets assigned to a paging group.

    The response is either a ``GroupGroupPagingGetTargetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingTargetsCapacityGetRequest(OCIRequest):
    """
    Request the maximum number of target users per paging group configured for a group.

    The response is either a ``GroupGroupPagingTargetsCapacityGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingTargetsCapacityModifyRequest(OCIRequest):
    """
    Modify the maximum number of target users per paging group configured for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        maximum_target_users: maximumTargetUsers
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    maximum_target_users: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("maximum_target_users", "maximumTargetUsers", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHolidayScheduleDeleteRequest(OCIRequest):
    """
    Delete a holiday schedule from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        holiday_schedule_name: holidayScheduleName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHolidayScheduleGetListRequest(OCIRequest):
    """
    Get a holiday schedule in a group.

    The response is either a ``GroupHolidayScheduleGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHolidayScheduleGetRequest(OCIRequest):
    """
    Get a holiday schedule in a group.

    The response is either a ``GroupHolidayScheduleGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        holiday_schedule_name: holidayScheduleName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupDeleteInstanceRequest(OCIRequest):
    """
    Delete a Hunt Group instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceListRequest(OCIRequest):
    """
    Get a list of Hunt Group instances within a group.

    The response is either ``GroupHuntGroupGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceRequest14(OCIRequest):
    """
    Request to get all the information of a Hunt Group instance.

    The response is either ``GroupHuntGroupGetInstanceResponse14()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceRequest17(OCIRequest):
    """
    Request to get all the information of a Hunt Group instance.

    The response is either ``GroupHuntGroupGetInstanceResponse17()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceRequest17sp3(OCIRequest):
    """
    Request to get all the information of a Hunt Group instance.

    The response is either ``GroupHuntGroupGetInstanceResponse17sp3()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceRequest17sp4(OCIRequest):
    """
    Request to get all the information of a Hunt Group instance.

    The response is either ``GroupHuntGroupGetInstanceResponse17sp4()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceRequest19(OCIRequest):
    """
    Request to get all the information of a Hunt Group instance.

    The response is either ``GroupHuntGroupGetInstanceResponse19()`` or
    ``ErrorResponse()``. Replaced by: ``GroupHuntGroupGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a Hunt Group instance.

    The response is either ``GroupHuntGroupGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``. Replaced by: ``GroupHuntGroupGetInstanceRequest20()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetInstanceRequest20(OCIRequest):
    """
    Request to get all the information of a Hunt Group instance.

    The response is either ``GroupHuntGroupGetInstanceResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupIMRNGetListRequest(OCIRequest):
    """
    Request a summary table of all DNs in a group IMRN pool.

    The response is either ``GroupIMRNGetListResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupIncomingCallingPlanGetListRequest(OCIRequest):
    """
    Request the group's incoming calling plan settings.

    The response is either a ``GroupIncomingCallingPlanGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallDeleteInstanceRequest(OCIRequest):
    """
    Request to delete an Instant Group Call service instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallGetInstanceListRequest(OCIRequest):
    """
    Request to get a list of Instant Group Call service instances within a group.

    The response is either ``GroupInstantGroupCallGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the service instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallGetInstanceRequest14(OCIRequest):
    """
    Request to get all the information of an Instant Group Call service instance.

    The response is either ``GroupInstantGroupCallGetInstanceResponse14()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallGetInstanceRequest17(OCIRequest):
    """
    Request to get all the information of an Instant Group Call service instance.

    The response is either ``GroupInstantGroupCallGetInstanceResponse17()`` or
    ``ErrorResponse()``. Replaced by: ``GroupInstantGroupCallGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of an Instant Group Call service instance.

    The response is either ``GroupInstantGroupCallGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupIntegratedIMPGetRequest(OCIRequest):
    """
    Get the Integrated IMP service attributes for the group.

    The response is either ``GroupIntegratedIMPGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupIntegratedIMPModifyRequest(OCIRequest):
    """
    Modify the Integrated IMP service attributes for the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_service_provider_setting: useServiceProviderSetting
        service_domain: serviceDomain
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_service_provider_setting: bool = attr.ib(default=None)
    service_domain: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_service_provider_setting", "useServiceProviderSetting", bool),
            E("service_domain", "serviceDomain", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInterceptGroupGetRequest(OCIRequest):
    """
    Get the group's intercept group service settings.

    The response is either a ``GroupInterceptGroupGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``GroupInterceptGroupGetRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInterceptGroupGetRequest16(OCIRequest):
    """
    Get the group's intercept group service settings.

    The response is either a ``GroupInterceptGroupGetResponse16()`` or an
    ``ErrorResponse()``.

    Replaced By: ``GroupInterceptGroupGetRequest16sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInterceptGroupGetRequest16sp1(OCIRequest):
    """
    Get the group's intercept group service settings.

    The response is either a ``GroupInterceptGroupGetResponse16sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInventoryReportGetRequest(OCIRequest):
    """
    Request the group's inventory report.

    The response is either a ``GroupInventoryReportGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        include_users: includeUsers
        include_services: includeServices
        include_dns: includeDns
        include_access_devices: includeAccessDevices
        include_departments: includeDepartments
        report_delivery_email_address: reportDeliveryEmailAddress
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    include_users: bool = attr.ib()
    include_services: bool = attr.ib()
    include_dns: bool = attr.ib()
    include_access_devices: bool = attr.ib()
    include_departments: bool = attr.ib()
    report_delivery_email_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("include_users", "includeUsers", bool, is_required=True),
            E("include_services", "includeServices", bool, is_required=True),
            E("include_dns", "includeDns", bool, is_required=True),
            E("include_access_devices", "includeAccessDevices", bool, is_required=True),
            E("include_departments", "includeDepartments", bool, is_required=True),
            E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupLDAPIntegrationGetDirectoryRequest(OCIRequest):
    """
    Get the LDAP directory attributes for a group.

    The response is either a ``GroupLDAPIntegrationGetDirectoryResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupLDAPIntegrationGetRequest(OCIRequest):
    """
    Request the group level data associated with LDAP Integration.

    The response is either a ``GroupLDAPIntegrationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupLDAPIntegrationModifyDirectoryRequest(OCIRequest):
    """
    Modify the LDAP directory attributes for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_level: useLevel
        server_net_address: serverNetAddress
        server_port: serverPort
        search_base: searchBase
        use_ssl: useSSL
        require_authentication: requireAuthentication
        authenticated_dn: authenticatedDN
        authenticated_password: authenticatedPassword
        is_sort_enabled: isSortEnabled
        is_paged_result_enabled: isPagedResultEnabled
        search_filter: searchFilter
        include_search_attribute_in_search_filter: includeSearchAttributeInSearchFilter
        column1_attribute_name: column1AttributeName
        column2_attribute_name: column2AttributeName
        column3_attribute_name: column3AttributeName
        column4_attribute_name: column4AttributeName
        column1_label: column1Label
        column2_label: column2Label
        column3_label: column3Label
        column4_label: column4Label
        search_column: searchColumn
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_level: str = attr.ib(default=None)
    server_net_address: str = attr.ib(default=None)
    server_port: int = attr.ib(default=None)
    search_base: str = attr.ib(default=None)
    use_ssl: bool = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    authenticated_dn: str = attr.ib(default=None)
    authenticated_password: str = attr.ib(default=None)
    is_sort_enabled: bool = attr.ib(default=None)
    is_paged_result_enabled: bool = attr.ib(default=None)
    search_filter: str = attr.ib(default=None)
    include_search_attribute_in_search_filter: bool = attr.ib(default=None)
    column1_attribute_name: str = attr.ib(default=None)
    column2_attribute_name: str = attr.ib(default=None)
    column3_attribute_name: str = attr.ib(default=None)
    column4_attribute_name: str = attr.ib(default=None)
    column1_label: str = attr.ib(default=None)
    column2_label: str = attr.ib(default=None)
    column3_label: str = attr.ib(default=None)
    column4_label: str = attr.ib(default=None)
    search_column: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_level", "useLevel", str),
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E("search_base", "searchBase", str),
            E("use_ssl", "useSSL", bool),
            E("require_authentication", "requireAuthentication", bool),
            E("authenticated_dn", "authenticatedDN", str),
            E("authenticated_password", "authenticatedPassword", str),
            E("is_sort_enabled", "isSortEnabled", bool),
            E("is_paged_result_enabled", "isPagedResultEnabled", bool),
            E("search_filter", "searchFilter", str),
            E(
                "include_search_attribute_in_search_filter",
                "includeSearchAttributeInSearchFilter",
                bool,
            ),
            E("column1_attribute_name", "column1AttributeName", str),
            E("column2_attribute_name", "column2AttributeName", str),
            E("column3_attribute_name", "column3AttributeName", str),
            E("column4_attribute_name", "column4AttributeName", str),
            E("column1_label", "column1Label", str),
            E("column2_label", "column2Label", str),
            E("column3_label", "column3Label", str),
            E("column4_label", "column4Label", str),
            E("search_column", "searchColumn", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupLDAPIntegrationModifyRequest(OCIRequest):
    """
    Modify the group level data associated with LDAP Integration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMWIDeliveryToMobileEndpointCustomTemplateDeleteRequest(OCIRequest):
    """
    Delete a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        language: language
        type: type
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMWIDeliveryToMobileEndpointCustomTemplateGetRequest(OCIRequest):
    """
    Request a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a
    ``GroupMWIDeliveryToMobileEndpointCustomTemplateGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        language: language
        type: type
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMWIDeliveryToMobileEndpointGetRequest(OCIRequest):
    """
    Requests group MWI custom notifications settings.

    The response is either a ``GroupMWIDeliveryToMobileEndpointGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingDeleteInstanceRequest(OCIRequest):
    """
    Delete a Meet-Me Conferencing bridge from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetInstanceListRequest(OCIRequest):
    """
    Get a list of Meet-Me Conferencing instances within a group.

    The response is either ``GroupMeetMeConferencingGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_name: departmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_name", "departmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetInstanceRequest(OCIRequest):
    """
    Request to get all the information of a Meet-Me Conferencing bridge.

    The response is either ``GroupMeetMeConferencingGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetInstanceRequest17sp3(OCIRequest):
    """
    Request to get all the information of a Meet-Me Conferencing bridge.

    The response is either ``GroupMeetMeConferencingGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetInstanceRequest17sp4(OCIRequest):
    """
    Request to get all the information of a Meet-Me Conferencing bridge.

    The response is either ``GroupMeetMeConferencingGetInstanceResponse17sp4()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetInstanceRequest18(OCIRequest):
    """
    Request to get all the information of a Meet-Me Conferencing bridge.

    The response is either ``GroupMeetMeConferencingGetInstanceResponse18()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetInstanceRequest19(OCIRequest):
    """
    Request to get all the information of a Meet-Me Conferencing bridge.

    The response is either ``GroupMeetMeConferencingGetInstanceResponse19()`` or
    ``ErrorResponse()``. Replaced by: ``GroupMeetMeConferencingGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a Meet-Me Conferencing bridge.

    The response is either ``GroupMeetMeConferencingGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetRequest(OCIRequest):
    """
    Request the group level data associated with Meet-Me Conferencing functions.

    The response is either a ``GroupMeetMeConferencingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetDepartmentListRequest(OCIRequest):
    """
    Returns a list of all departments that have a Music On Hold instance.

    The response is either ``GroupMusicOnHoldGetDepartmentListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceAssignListRequest(OCIRequest):
    """
    Assign a list of Network Classes of Service to a group.

    The Element defaultNetworkClassOfService is required only for the first assignment,
    for subsequent assignments it is optional.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E("default_network_class_of_service", "defaultNetworkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceAssignToAllUsersRequest(OCIRequest):
    """
    Assign a Network Classes of Service to all users with in a group.

    The Network Classes of Service must be currently assigned to the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceGetAssignedListRequest(OCIRequest):
    """
    Get a list of Network Classes of Service assigned to a group.

    The response is either a ``GroupNetworkClassOfServiceGetAssignedListResponse()`` or an
    ``ErorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceModifyDefaultRequest(OCIRequest):
    """
    Modifies the default Network Classes of Service of a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceUnassignListRequest(OCIRequest):
    """
    Unassign a list of Network Classes of Service from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E("default_network_class_of_service", "defaultNetworkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNewUserTemplateAssignUserServiceListRequest(OCIRequest):
    """
    Request to assign the user services and service packs to all new users created within
    the group after the completion of this request.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: List[str] = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str, is_array=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNewUserTemplateUnassignUserServiceListRequest(OCIRequest):
    """
    Requests to unassign the user services and service packs for all new users created
    within the group after the completion of this request.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: List[str] = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str, is_array=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOfficeZoneAssignListRequest(OCIRequest):
    """
    Assign a list of Office Zones to a group.

    The Element defaultOfficeZone is required only for the first assignment, for
    subsequent assignments it is optional.  Office Zones can only be assigned if the
    Location-Based Calling Restrictions has been authorized to the group otherwise the
    request will fail.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        office_zone_name: officeZoneName
        default_office_zone_name: defaultOfficeZoneName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    office_zone_name: List[str] = attr.ib(default=None)
    default_office_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("office_zone_name", "officeZoneName", str, is_array=True),
            E("default_office_zone_name", "defaultOfficeZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOfficeZoneGetAssignedListRequest(OCIRequest):
    """
    Get a list of Office Zones assigned to a group.

    The response is either a ``GroupOfficeZoneGetAssignedListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOfficeZoneUnassignListRequest(OCIRequest):
    """
    Unassign a list of OfficeZones from a group.

    Note: a new default must be provided if unassigning the current default.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        office_zone_name: officeZoneName
        default_office_zone_name: defaultOfficeZoneName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    office_zone_name: List[str] = attr.ib(default=None)
    default_office_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("office_zone_name", "officeZoneName", str, is_array=True),
            E("default_office_zone_name", "defaultOfficeZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanAuthorizationCodeGetListRequest(OCIRequest):
    """
    Request the list of authorization codes for a group default and it's departments.

    The response is either a
    ``GroupOutgoingCallingPlanAuthorizationCodeGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanCallMeNowGetListRequest(OCIRequest):
    """
    Request the Call Me Now call permissions for a group default and it's departments.

    The response is either a ``GroupOutgoingCallingPlanCallMeNowGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDigitPlanCallMeNowGetListRequest(OCIRequest):
    """
    Request the Call Me Now call permissions for digit patterns for a group default and
    it's departments.

    The response is either a
    ``GroupOutgoingCallingPlanDigitPlanCallMeNowGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDigitPlanOriginatingGetListRequest(OCIRequest):
    """
    Request the originating permissions for digit patterns for a group default and it's
    departments.

    The response is either a
    ``GroupOutgoingCallingPlanDigitPlanOriginatingGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDigitPlanRedirectingGetListRequest(OCIRequest):
    """
    Request the redirecting permissions for digit patterns for a group default and it's
    departments.

    The response is either a
    ``GroupOutgoingCallingPlanDigitPlanRedirectingGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanOriginatingGetListRequest(OCIRequest):
    """
    Request the originating permissions for a group default and it's departments.

    The response is either a ``GroupOutgoingCallingPlanOriginatingGetListResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPatternAddRequest(OCIRequest):
    """
    Add a new calling plan Pinhole digit string.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        digit_pattern: digitPattern
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    digit_pattern: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("digit_pattern", "digitPattern", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPatternDeleteListRequest(OCIRequest):
    """
    Delete one or more calling plan Pinhole digit strings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPatternGetListRequest(OCIRequest):
    """
    Get the list of calling plan Pinhole digit strings for a group.

    The response is either a
    ``GroupOutgoingCallingPlanPinholeDigitPatternGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPatternModifyRequest(OCIRequest):
    """
    Modify a calling plan Pinhole digit string.

    The name is a key; it cannot be changed.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        digit_pattern: digitPattern
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    digit_pattern: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("digit_pattern", "digitPattern", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListRequest(OCIRequest):
    """
    Request the Call Me Now permissions for Pinhole digit patterns for a group default and
    its departments.

    The response is either a
    ``GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListRequest(OCIRequest):
    """
    Request the originating permissions for Pinhole digit patterns for a group default and
    its departments.

    The response is either a
    ``GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListRequest(OCIRequest):
    """
    Request the redirecting permissions for Pinhole digit patterns for a group default and
    its departments.

    The response is either a
    ``GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanRedirectedGetListRequest(OCIRequest):
    """
    Request the call forwarded/transferred permissions for a group default and it's
    departments.

    The response is either a ``GroupOutgoingCallingPlanRedirectedGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanRedirectingGetListRequest(OCIRequest):
    """
    Request the initiating call forwards/transfer permissions for a group default and it's
    departments.

    The response is either a ``GroupOutgoingCallingPlanRedirectingGetListResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanTransferNumbersGetListRequest(OCIRequest):
    """
    Request the list of transfer numbers for a group default and it's departments.

    The response is either a ``GroupOutgoingCallingPlanTransferNumbersGetListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPasswordRulesGetRequest(OCIRequest):
    """
    Requests the group's password rules setting that is applicable to users within the
    group.

    The response is either ``GroupPasswordRulesGetResponse()`` or ``ErrorResponse()``.
    Repleced by: ``GroupPasswordRulesGetRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPasswordRulesGetRequest16(OCIRequest):
    """
    Requests the group's password rules setting that is applicable to users within the
    group.

    The response is either ``GroupPasswordRulesGetResponse16()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPasswordRulesModifyRequest(OCIRequest):
    """
    Request to modify the group's password rules setting that apply to the users within
    the group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_previous_passwords: disallowPreviousPasswords
        number_of_previous_passwords: numberOfPreviousPasswords
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    disallow_user_id: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    password_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)
    disallow_previous_passwords: bool = attr.ib(default=None)
    number_of_previous_passwords: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("disallow_user_id", "disallowUserId", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("password_expires_days", "passwordExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("disallow_previous_passwords", "disallowPreviousPasswords", bool),
            E("number_of_previous_passwords", "numberOfPreviousPasswords", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolicyGetRequest(OCIRequest):
    """
    Requests the Group's policy settings.

    The response is either ``GroupPolicyGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolicyGetRequest14sp1(OCIRequest):
    """
    Requests the Group's policy settings.

    The response is either ``GroupPolicyGetResponse14sp1()`` or ``ErrorResponse()``.

    Replaced By : ``GroupPolicyGetRequest14sp4()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolicyGetRequest14sp4(OCIRequest):
    """
    Requests the Group's policy settings.

    The response is either ``GroupPolicyGetResponse14sp4()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolicyGetRequest17(OCIRequest):
    """
    Requests the Group's policy settings.

    The response is either ``GroupPolicyGetResponse17()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolicyGetRequest20(OCIRequest):
    """
    Requests the Group's policy settings.

    The response is either ``GroupPolicyGetResponse20()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolicyModifyRequest(OCIRequest):
    """
    Request to modify the policies for a Group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        calling_plan_access: callingPlanAccess
        extension_access: extensionAccess
        ldap_integration_access: ldapIntegrationAccess
        voice_messaging_access: voiceMessagingAccess
        department_admin_user_access: departmentAdminUserAccess
        department_admin_trunk_group_access: departmentAdminTrunkGroupAccess
        department_admin_phone_number_extension_access:
            departmentAdminPhoneNumberExtensionAccess
        department_admin_calling_line_id_number_access:
            departmentAdminCallingLineIdNumberAccess
        user_authentication_access: userAuthenticationAccess
        user_group_directory_access: userGroupDirectoryAccess
        user_profile_access: userProfileAccess
        user_enhanced_call_log_access: userEnhancedCallLogAccess
        user_auto_attendant_name_dialing_access: userAutoAttendantNameDialingAccess
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    calling_plan_access: str = attr.ib(default=None)
    extension_access: str = attr.ib(default=None)
    ldap_integration_access: str = attr.ib(default=None)
    voice_messaging_access: str = attr.ib(default=None)
    department_admin_user_access: str = attr.ib(default=None)
    department_admin_trunk_group_access: str = attr.ib(default=None)
    department_admin_phone_number_extension_access: str = attr.ib(default=None)
    department_admin_calling_line_id_number_access: str = attr.ib(default=None)
    user_authentication_access: str = attr.ib(default=None)
    user_group_directory_access: str = attr.ib(default=None)
    user_profile_access: str = attr.ib(default=None)
    user_enhanced_call_log_access: str = attr.ib(default=None)
    user_auto_attendant_name_dialing_access: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("calling_plan_access", "callingPlanAccess", str),
            E("extension_access", "extensionAccess", str),
            E("ldap_integration_access", "ldapIntegrationAccess", str),
            E("voice_messaging_access", "voiceMessagingAccess", str),
            E("department_admin_user_access", "departmentAdminUserAccess", str),
            E(
                "department_admin_trunk_group_access",
                "departmentAdminTrunkGroupAccess",
                str,
            ),
            E(
                "department_admin_phone_number_extension_access",
                "departmentAdminPhoneNumberExtensionAccess",
                str,
            ),
            E(
                "department_admin_calling_line_id_number_access",
                "departmentAdminCallingLineIdNumberAccess",
                str,
            ),
            E("user_authentication_access", "userAuthenticationAccess", str),
            E("user_group_directory_access", "userGroupDirectoryAccess", str),
            E("user_profile_access", "userProfileAccess", str),
            E("user_enhanced_call_log_access", "userEnhancedCallLogAccess", str),
            E(
                "user_auto_attendant_name_dialing_access",
                "userAutoAttendantNameDialingAccess",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolycomPhoneServicesGetRequest(OCIRequest):
    """
    Request the group's Polycom Phone Services attributes.

    The response is either a ``GroupPolycomPhoneServicesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPolycomPhoneServicesModifyRequest(OCIRequest):
    """
    Modify the group's Polycom Phone Services attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        include_group_common_phone_list_in_directory:
            includeGroupCommonPhoneListInDirectory
        include_group_custom_contact_directory_in_directory:
            includeGroupCustomContactDirectoryInDirectory
        group_custom_contact_directory: groupCustomContactDirectory
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    include_group_common_phone_list_in_directory: bool = attr.ib(default=None)
    include_group_custom_contact_directory_in_directory: bool = attr.ib(default=None)
    group_custom_contact_directory: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "include_group_common_phone_list_in_directory",
                "includeGroupCommonPhoneListInDirectory",
                bool,
            ),
            E(
                "include_group_custom_contact_directory_in_directory",
                "includeGroupCustomContactDirectoryInDirectory",
                bool,
            ),
            E("group_custom_contact_directory", "groupCustomContactDirectory", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPortalPasscodeRulesGetRequest(OCIRequest):
    """
    Requests the group's passcode rules setting.

    The response is either ``GroupPortalPasscodeRulesGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPortalPasscodeRulesGetRequest19(OCIRequest):
    """
    Requests the group's passcode rules setting.

    The response is either ``GroupPortalPasscodeRulesGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPortalPasscodeRulesModifyRequest(OCIRequest):
    """
    Request to modify the group's passcode rules setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: numberOfRepeatedDigits
    disallowRepeatedPatterns disallowContiguousSequences numberOfAscendingDigits
    numberOfDescendingDigits numberOfPreviousPasscodes

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_rule_level: useRuleLevel
        disallow_repeated_digits: disallowRepeatedDigits
        number_of_repeated_digits: numberOfRepeatedDigits
        disallow_repeated_patterns: disallowRepeatedPatterns
        disallow_contiguous_sequences: disallowContiguousSequences
        number_of_ascending_digits: numberOfAscendingDigits
        number_of_descending_digits: numberOfDescendingDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        number_of_previous_passcodes: numberOfPreviousPasscodes
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_rule_level: str = attr.ib(default=None)
    disallow_repeated_digits: bool = attr.ib(default=None)
    number_of_repeated_digits: int = attr.ib(default=None)
    disallow_repeated_patterns: bool = attr.ib(default=None)
    disallow_contiguous_sequences: bool = attr.ib(default=None)
    number_of_ascending_digits: int = attr.ib(default=None)
    number_of_descending_digits: int = attr.ib(default=None)
    disallow_user_number: bool = attr.ib(default=None)
    disallow_reversed_user_number: bool = attr.ib(default=None)
    disallow_old_passcode: bool = attr.ib(default=None)
    number_of_previous_passcodes: int = attr.ib(default=None)
    disallow_reversed_old_passcode: bool = attr.ib(default=None)
    min_code_length: int = attr.ib(default=None)
    max_code_length: int = attr.ib(default=None)
    disable_login_after_max_failed_login_attempts: bool = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    expire_password: bool = attr.ib(default=None)
    passcode_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_rule_level", "useRuleLevel", str),
            E("disallow_repeated_digits", "disallowRepeatedDigits", bool),
            E("number_of_repeated_digits", "numberOfRepeatedDigits", int),
            E("disallow_repeated_patterns", "disallowRepeatedPatterns", bool),
            E("disallow_contiguous_sequences", "disallowContiguousSequences", bool),
            E("number_of_ascending_digits", "numberOfAscendingDigits", int),
            E("number_of_descending_digits", "numberOfDescendingDigits", int),
            E("disallow_user_number", "disallowUserNumber", bool),
            E("disallow_reversed_user_number", "disallowReversedUserNumber", bool),
            E("disallow_old_passcode", "disallowOldPasscode", bool),
            E("number_of_previous_passcodes", "numberOfPreviousPasscodes", int),
            E("disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool),
            E("min_code_length", "minCodeLength", int),
            E("max_code_length", "maxCodeLength", int),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPreAlertingAnnouncementGetRequest(OCIRequest):
    """
    Get the group�s PreAlertingservice settings.

    The response is either a ``GroupPreAlertingAnnouncementGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPreAlertingAnnouncementGetRequest20(OCIRequest):
    """
    Get the group’s PreAlertingservice settings.

    The response is either a ``GroupPreAlertingAnnouncementGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPreferredCarrierGroupGetRequest(OCIRequest):
    """
    Requests the currently configured carriers for a group.

    The response is either a ``GroupPreferredCarrierGroupGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRouteListEnterpriseTrunkNumberRangeAssignListRequest(OCIRequest):
    """
    Assign a list of service provider number ranges to a group.

    The number ranges must have previously been added to the service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        number_range_start: numberRangeStart
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    number_range_start: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("number_range_start", "numberRangeStart", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest(OCIRequest):
    """
    Request a list of number ranges that are assigned to a group and still available for
    assignment to users within the group.

    The response is either
    ``GroupRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest(OCIRequest):
    """
    Get the list of assigned and unassigned enterprise trunknumber ranges in a group.

    The response is either
    ``GroupRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRouteListEnterpriseTrunkNumberRangeUnassignListRequest(OCIRequest):
    """
    Unassign a list of service provider number ranges from a group.

    The number ranges then become available for assignment to other groups.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        number_range_start: numberRangeStart
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    number_range_start: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("number_range_start", "numberRangeStart", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointBouncedCallGetRequest(OCIRequest):
    """
    Get a route point's bounced call settings.

    The response is either a ``GroupRoutePointBouncedCallGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointBouncedCallModifyRequest(OCIRequest):
    """
    Modify a route point's bounced call settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        number_of_rings_before_bouncing_call: numberOfRingsBeforeBouncingCall
        enable_transfer: enableTransfer
        transfer_phone_number: transferPhoneNumber
        bounce_call_when_agent_unavailable: bounceCallWhenAgentUnavailable
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    number_of_rings_before_bouncing_call: int = attr.ib(default=None)
    enable_transfer: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    bounce_call_when_agent_unavailable: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "number_of_rings_before_bouncing_call",
                "numberOfRingsBeforeBouncingCall",
                int,
            ),
            E("enable_transfer", "enableTransfer", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E(
                "bounce_call_when_agent_unavailable",
                "bounceCallWhenAgentUnavailable",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointDeleteInstanceRequest(OCIRequest):
    """
    Delete a Route Point instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointDistinctiveRingingGetRequest(OCIRequest):
    """
    Get the distinctive ringing configuration values for route point.

    The response is either a ``GroupRoutePointDistinctiveRingingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointDistinctiveRingingModifyRequest(OCIRequest):
    """
    Modify the distinctive ringing configuration values for route point.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        enable_distinctive_ringing: enableDistinctiveRinging
        distinctive_ringing_ring_pattern: distinctiveRingingRingPattern
        distinctive_ringing_force_delivery_ring_pattern:
            distinctiveRingingForceDeliveryRingPattern
    """

    service_user_id: str = attr.ib()
    enable_distinctive_ringing: bool = attr.ib(default=None)
    distinctive_ringing_ring_pattern: str = attr.ib(default=None)
    distinctive_ringing_force_delivery_ring_pattern: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("enable_distinctive_ringing", "enableDistinctiveRinging", bool),
            E("distinctive_ringing_ring_pattern", "distinctiveRingingRingPattern", str),
            E(
                "distinctive_ringing_force_delivery_ring_pattern",
                "distinctiveRingingForceDeliveryRingPattern",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointExternalSystemAssignListRequest(OCIRequest):
    """
    Assign a list of route point external systems to a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        route_point_external_system: routePointExternalSystem
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    route_point_external_system: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "route_point_external_system",
                "routePointExternalSystem",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointExternalSystemGetAssignedListRequest(OCIRequest):
    """
    Requests the list of all Route Point External Systems assigned to a group.

    The response is either ``GroupRoutePointExternalSystemGetAssignedListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointExternalSystemUnassignListRequest(OCIRequest):
    """
    Unassign a list of route point external systems from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        route_point_external_system: routePointExternalSystem
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    route_point_external_system: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "route_point_external_system",
                "routePointExternalSystem",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointForcedForwardingGetRequest(OCIRequest):
    """
    Get a route point's forced forwarding settings.

    The response is either a ``GroupRoutePointForcedForwardingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointForcedForwardingGetRequest20(OCIRequest):
    """
    Get a route point's forced forwarding settings.

    The response is either a ``GroupRoutePointForcedForwardingGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetAnnouncementRequest(OCIRequest):
    """
    Get a route point's announcement settings.

    The response is either a ``GroupRoutePointGetAnnouncementResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``GroupRoutePointGetAnnouncementRequest19()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetAnnouncementRequest19(OCIRequest):
    """
    Get a route point's announcement settings.

    The response is either a ``GroupRoutePointGetAnnouncementResponse19()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetAnnouncementRequest20(OCIRequest):
    """
    Get a route point's announcement settings.

    The response is either a ``GroupRoutePointGetAnnouncementResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetDNISListRequest(OCIRequest):
    """
    Get a list of DNIS that are configured for a Route Point.

    The response is either ``GroupRoutePointGetDNISListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetFailoverPolicyRequest(OCIRequest):
    """
    Get the route point failover policy.

    The response is either a ``GroupRoutePointGetFailoverPolicyResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetInstanceRequest(OCIRequest):
    """
    Request to get all the information of a Route Point instance.

    The response is either ``GroupRoutePointGetInstanceResponse()`` or
    ``ErrorResponse()``. Replaced by: ``GroupRoutePointGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a Route Point instance.

    The response is either ``GroupRoutePointGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointHolidayServiceGetRequest(OCIRequest):
    """
    Get a route point's holiday service settings.

    The response is either a ``GroupRoutePointHolidayServiceGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointHolidayServiceGetRequest17sp1(OCIRequest):
    """
    Get a route point's holiday service settings.

    The response is either a ``GroupRoutePointHolidayServiceGetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointHolidayServiceGetRequest20(OCIRequest):
    """
    Get a route point's holiday service settings.

    The response is either a ``GroupRoutePointHolidayServiceGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointManualFailoverRequest(OCIRequest):
    """
    Initiate manual failover for the Route Point.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyDNISParametersRequest(OCIRequest):
    """
    Modify the setting that are configured for all the DNIS in a Route Point.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        display_dnis_number: displayDNISNumber
        display_dnis_name: displayDNISName
    """

    service_user_id: str = attr.ib()
    display_dnis_number: bool = attr.ib(default=None)
    display_dnis_name: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("display_dnis_number", "displayDNISNumber", bool),
            E("display_dnis_name", "displayDNISName", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyFailoverPolicyRequest(OCIRequest):
    """
    Modify the route point failover policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        enable_failover_support: enableFailoverSupport
        external_system: externalSystem
        failover_phone_number: failoverPhoneNumber
        per_call_enable_failover_support: perCallEnableFailoverSupport
        per_call_call_failure_timeout_seconds: perCallCallFailureTimeoutSeconds
        per_call_outbound_call_failure_timeout_seconds:
            perCallOutboundCallFailureTimeoutSeconds
        per_call_failover_phone_number: perCallFailoverPhoneNumber
    """

    service_user_id: str = attr.ib()
    enable_failover_support: bool = attr.ib(default=None)
    external_system: str = attr.ib(default=None)
    failover_phone_number: str = attr.ib(default=None)
    per_call_enable_failover_support: bool = attr.ib(default=None)
    per_call_call_failure_timeout_seconds: int = attr.ib(default=None)
    per_call_outbound_call_failure_timeout_seconds: int = attr.ib(default=None)
    per_call_failover_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("enable_failover_support", "enableFailoverSupport", bool),
            E("external_system", "externalSystem", str),
            E("failover_phone_number", "failoverPhoneNumber", str),
            E("per_call_enable_failover_support", "perCallEnableFailoverSupport", bool),
            E(
                "per_call_call_failure_timeout_seconds",
                "perCallCallFailureTimeoutSeconds",
                int,
            ),
            E(
                "per_call_outbound_call_failure_timeout_seconds",
                "perCallOutboundCallFailureTimeoutSeconds",
                int,
            ),
            E("per_call_failover_phone_number", "perCallFailoverPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointNightServiceGetRequest(OCIRequest):
    """
    Get a route point's night service settings.

    The response is either a ``GroupRoutePointNightServiceGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointNightServiceGetRequest17sp1(OCIRequest):
    """
    Get a route point's night service settings.

    The response is either a ``GroupRoutePointNightServiceGetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointNightServiceGetRequest20(OCIRequest):
    """
    Get a route point's night service settings.

    The response is either a ``GroupRoutePointNightServiceGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointOverflowGetRequest(OCIRequest):
    """
    Get a route point's overflow settings.

    The response is either a ``GroupRoutePointOverflowGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointOverflowGetRequest20(OCIRequest):
    """
    Get a route point's overflow settings.

    The response is either a ``GroupRoutePointOverflowGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointQueueCallDispositionCodeAddRequest(OCIRequest):
    """
    Add a Route Point Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
        is_active: isActive
        description: description
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointQueueCallDispositionCodeDeleteRequest(OCIRequest):
    """
    Delete a Route Point Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointQueueCallDispositionCodeGetListRequest(OCIRequest):
    """
    Get the list of Route Point Level and Organization Level Call Disposition Codes.

    The response is either ``GroupRoutePointQueueCallDispositionCodeGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointQueueCallDispositionCodeGetRequest(OCIRequest):
    """
    Get a Route Point Call Disposition Code.

    The response is either ``GroupRoutePointQueueCallDispositionCodeGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointQueueCallDispositionCodeModifyRequest(OCIRequest):
    """
    Modify a Route Point Call Disposition Code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        code: code
        is_active: isActive
        description: description
    """

    service_user_id: str = attr.ib()
    code: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("code", "code", str, is_required=True),
            E("is_active", "isActive", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointQueueCallDispositionCodeSettingsGetRequest(OCIRequest):
    """
    Request the queue level data associated with Route Point Call Disposition Code
    Settings.

    The response is either an
    ``GroupRoutePointQueueCallDispositionCodeSettingsGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutingProfileGetRequest(OCIRequest):
    """
    Request the routing profile for the group.

    The response is either a ``GroupRoutingProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutingProfileModifyRequest(OCIRequest):
    """
    Requests to modify the routing profile for a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        routing_profile: routingProfile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    routing_profile: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("routing_profile", "routingProfile", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleAddRequest(OCIRequest):
    """
    Add a group schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_name: scheduleName
        schedule_type: scheduleType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_name: str = attr.ib()
    schedule_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("schedule_name", "scheduleName", str, is_required=True),
            E("schedule_type", "scheduleType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleGetListRequest(OCIRequest):
    """
    Get the list of a group schedules.

    The list can be filtered by schedule type.

    The response is either a ``GroupScheduleGetListResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_type: scheduleType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("schedule_type", "scheduleType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleGetListRequest17sp1(OCIRequest):
    """
    Get the list of schedules viewable by a group.

    The list can be filtered by schedule type.

    The response is either a ``GroupScheduleGetListResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_type: scheduleType
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("schedule_type", "scheduleType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSeriesCompletionAddInstanceRequest(OCIRequest):
    """
    Adds a Series Completion group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        user_id: userId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("user_id", "userId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSeriesCompletionDeleteInstanceRequest(OCIRequest):
    """
    Deletes a Series Completion group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSeriesCompletionGetInstanceListRequest(OCIRequest):
    """
    Request to get a list of Series Completion instances within a group.

    The response is either ``GroupSeriesCompletionGetInstanceListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSeriesCompletionGetInstanceRequest(OCIRequest):
    """
    Gets a Series Completion group.

    The response is either ``GroupSeriesCompletionGetInstanceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceAssignListRequest(OCIRequest):
    """
    Assign one or more group services to the group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceGetAuthorizationListRequest(OCIRequest):
    """
    Requests the group's service authorization status.

    The response is either ``GroupServiceGetAuthorizationListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceGetAuthorizedListRequest(OCIRequest):
    """
    Requests the list of services and service packs authorized to a group.

    The response is either ``GroupServiceGetAuthorizedListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceInstancePrivacyGetRequest(OCIRequest):
    """
    Request the data associated with Privacy for a service instance.

    The response is either a ``GroupServiceInstancePrivacyGetResponse()``. Replaced by:
    ``GroupServiceInstancePrivacyGetRequest17sp4()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceInstancePrivacyGetRequest17sp4(OCIRequest):
    """
    Request the data associated with Privacy for a service instance.

    The response is either a ``GroupServiceInstancePrivacyGetResponse17sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceInstancePrivacyModifyRequest(OCIRequest):
    """
    Modify the data associated with Privacy for a service instance.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        enable_directory_privacy: enableDirectoryPrivacy
        enable_auto_attendant_extension_dialing_privacy:
            enableAutoAttendantExtensionDialingPrivacy
        enable_auto_attendant_name_dialing_privacy: enableAutoAttendantNameDialingPrivacy
    """

    service_user_id: str = attr.ib()
    enable_directory_privacy: bool = attr.ib(default=None)
    enable_auto_attendant_extension_dialing_privacy: bool = attr.ib(default=None)
    enable_auto_attendant_name_dialing_privacy: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("enable_directory_privacy", "enableDirectoryPrivacy", bool),
            E(
                "enable_auto_attendant_extension_dialing_privacy",
                "enableAutoAttendantExtensionDialingPrivacy",
                bool,
            ),
            E(
                "enable_auto_attendant_name_dialing_privacy",
                "enableAutoAttendantNameDialingPrivacy",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceIsAssignedRequest(OCIRequest):
    """
    Request to determine if a GroupService is assigned to the group.


    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServicePhoneNumberLookupRequest(OCIRequest):
    """
    Lookup if the given number is defined in the specified service in the group.

    The response is ``GroupServicePhoneNumberLookupResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_type: serviceType
        phone_number: phoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_type: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_type", "serviceType", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceScriptsGroupClearLogRequest(OCIRequest):
    """
    Clear the Service Script Group Log.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceScriptsGroupGetLogRequest(OCIRequest):
    """
    Request the group level data associated with Service Scripts Group Log.

    The response is either a ``GroupServiceScriptsGroupGetLogResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceScriptsGroupGetRequest(OCIRequest):
    """
    Request the group level data associated with Service Scripts Group Configuration.

    The response is either a ``GroupServiceScriptsGroupGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceUnassignListRequest(OCIRequest):
    """
    Unassign one or more of the group's assigned services.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_name: serviceName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_name", "serviceName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGetRequest(OCIRequest):
    """
    Get the session admission control capacity for the group.

    The response is either a ``GroupSessionAdmissionControlGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupDeleteListRequest(OCIRequest):
    """
    Request to delete one or more session admission control groups for the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupGetListRequest(OCIRequest):
    """
    Request to get the list of session admission control group for the group.

    The response is either a ``GroupSessionAdmissionControlGroupGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupGetRequest(OCIRequest):
    """
    Request to get a session admission control group for the group.

    The response is either a ``GroupSessionAdmissionControlGroupGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupGetRequest19sp1(OCIRequest):
    """
    Request to get a session admission control group for the group.

    The response is either a ``GroupSessionAdmissionControlGroupGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlModifyRequest(OCIRequest):
    """
    Request to modify session admission control capacity for the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        restrict_aggregate_sessions: restrictAggregateSessions
        max_sessions: maxSessions
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        count_intra_group_sessions: countIntraGroupSessions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    restrict_aggregate_sessions: bool = attr.ib(default=None)
    max_sessions: int = attr.ib(default=None)
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    count_intra_group_sessions: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("restrict_aggregate_sessions", "restrictAggregateSessions", bool),
            E("max_sessions", "maxSessions", int),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("count_intra_group_sessions", "countIntraGroupSessions", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupShInterfaceGetUserListRequest(OCIRequest):
    """
    Returns a list of all Public User Identities and associated data in a group.

    The response is either a ``GroupShInterfaceGetUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSpeedDial100GetRequest(OCIRequest):
    """
    Get the speed dial 100 service settings for a group.

    The response is either a ``GroupSpeedDial100GetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSpeedDial100GetRequest17sp1(OCIRequest):
    """
    Get the speed dial 100 service settings for a group.

    The response is either a ``GroupSpeedDial100GetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSpeedDial100ModifyRequest(OCIRequest):
    """
    Modify the speed dial 100 prefix setting for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        prefix: prefix
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    prefix: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("prefix", "prefix", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupThirdPartyVoiceMailSupportGetRequest(OCIRequest):
    """
    Request the group level data associated with Third-Party Voice Mail Support.

    The response is either a ``GroupThirdPartyVoiceMailSupportGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupThirdPartyVoiceMailSupportModifyRequest(OCIRequest):
    """
    Modify the Third Party Voice Mail Support settings for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        group_server: groupServer
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    group_server: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("group_server", "groupServer", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTimeScheduleDeleteRequest(OCIRequest):
    """
    Delete a time schedule from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        time_schedule_name: timeScheduleName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    time_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTimeScheduleGetListRequest(OCIRequest):
    """
    Request a list of all time schedules in a group.

    The response is either a ``GroupTimeScheduleGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTimeScheduleGetRequest(OCIRequest):
    """
    Request to get a group time schedule.

    The response is either a ``GroupTimeScheduleGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        time_schedule_name: timeScheduleName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    time_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupDeleteInstanceRequest(OCIRequest):
    """
    Delete a Trunk Group Instance from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetAvailableDetailListRequest(OCIRequest):
    """
    Requests the list of available trunk groups within a group.

    The response is either ``GroupTrunkGroupGetAvailableDetailListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceListRequest14(OCIRequest):
    """
    Get a list of Trunk Groups for the group or enterprise.

    It is possible to restrict the results to a particular department, or expand the list
    to the entire enterprise.

    The response is either a ``GroupTrunkGroupGetInstanceListResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
        include_enterprise_trunk_groups: includeEnterpriseTrunkGroups
        only_trunk_groups_with_device: onlyTrunkGroupsWithDevice
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)
    include_enterprise_trunk_groups: bool = attr.ib(default=None)
    only_trunk_groups_with_device: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
            E("include_enterprise_trunk_groups", "includeEnterpriseTrunkGroups", bool),
            E("only_trunk_groups_with_device", "onlyTrunkGroupsWithDevice", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceListRequest14sp4(OCIRequest):
    """
    Get a list of Trunk Groups for the group or enterprise.

    It is possible to restrict the results to a particular department, or expand the list
    to the entire enterprise.

    The response is either a ``GroupTrunkGroupGetInstanceListResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
        include_enterprise_trunk_groups: includeEnterpriseTrunkGroups
        only_trunk_groups_with_device: onlyTrunkGroupsWithDevice
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)
    include_enterprise_trunk_groups: bool = attr.ib(default=None)
    only_trunk_groups_with_device: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
            E("include_enterprise_trunk_groups", "includeEnterpriseTrunkGroups", bool),
            E("only_trunk_groups_with_device", "onlyTrunkGroupsWithDevice", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest14(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest14sp1(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse14sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetRequest(OCIRequest):
    """
    Get the maximum permissible active trunk group calls for the group.

    The response is either a ``GroupTrunkGroupGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetRequest14sp1(OCIRequest):
    """
    Get the maximum and bursting maximum permissible active trunk group calls for the
    group.

    The response is either a ``GroupTrunkGroupGetResponse14sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetRequest14sp9(OCIRequest):
    """
    Get the maximum and bursting maximum permissible active trunk group calls for the
    group.

    The response is either a ``GroupTrunkGroupGetResponse14sp9()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskAddRequest(OCIRequest):
    """
    Add a user creation task for a trunk group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        task_name: taskName
        user_id_format: userIdFormat
        user_id_domain: userIdDomain
        populate_extension: populateExtension
        line_port_format: linePortFormat
        line_port_domain: linePortDomain
        populate_contact: populateContact
        contact_format: contactFormat
        contact_domain: contactDomain
        user_phone_numbers: userPhoneNumbers
        user_extensions: userExtensions
        service_pack_name: servicePackName
        user_service: userService
    """

    service_user_id: str = attr.ib()
    task_name: str = attr.ib()
    user_id_format: str = attr.ib()
    user_id_domain: str = attr.ib()
    populate_extension: bool = attr.ib()
    line_port_format: str = attr.ib()
    line_port_domain: str = attr.ib()
    populate_contact: bool = attr.ib()
    contact_format: str = attr.ib(default=None)
    contact_domain: str = attr.ib(default=None)
    user_phone_numbers: str = attr.ib(default=None)
    user_extensions: str = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)
    user_service: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E("user_id_format", "userIdFormat", str, is_required=True),
            E("user_id_domain", "userIdDomain", str, is_required=True),
            E("populate_extension", "populateExtension", bool, is_required=True),
            E("line_port_format", "linePortFormat", str, is_required=True),
            E("line_port_domain", "linePortDomain", str, is_required=True),
            E("populate_contact", "populateContact", bool, is_required=True),
            E("contact_format", "contactFormat", str),
            E("contact_domain", "contactDomain", str),
            E("user_phone_numbers", "userPhoneNumbers", str, is_complex=True),  # unknown
            E("user_extensions", "userExtensions", str, is_complex=True),  # unknown
            E("service_pack_name", "servicePackName", str, is_array=True),
            E("user_service", "userService", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskDeleteRequest(OCIRequest):
    """
    Delete a user creation task for a trunk group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        task_name: taskName
    """

    service_user_id: str = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskGetListRequest(OCIRequest):
    """
    Get the list of user creation tasks for a trunk group.

    The response is either ``GroupTrunkGroupUserCreationTaskGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskGetRequest(OCIRequest):
    """
    Request the details of a specified user creation task for a trunk group.

    The response is either ``GroupTrunkGroupUserCreationTaskGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        task_name: taskName
    """

    service_user_id: str = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVirtualOnNetEnterpriseExtensionsDeleteUserRequest(OCIRequest):
    """
    Delete an existing Virtual On-Net user from a Group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        phone_number: phoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVirtualOnNetEnterpriseExtensionsGetUserRequest(OCIRequest):
    """
    Get an existing Virtual On-Net user from a Group.

    The response is either a ``GroupVirtualOnNetEnterpriseExtensionsGetUserResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        phone_number: phoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVirtualOnNetEnterpriseExtensionsModifyUserRequest(OCIRequest):
    """
    Modify an existing Virtual On-Net user of a Group.

    The serviceProviderId, groupId and phoneNumber combination uniquely identifies a
    Virtual On-Net User.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        phone_number: phoneNumber
        extension: extension
        first_name: firstName
        last_name: lastName
        calling_line_id_first_name: callingLineIdFirstName
        calling_line_id_last_name: callingLineIdLastName
        virtual_on_net_call_type_name: virtualOnNetCallTypeName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    phone_number: str = attr.ib()
    extension: str = attr.ib(default=None)
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    virtual_on_net_call_type_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("extension", "extension", str),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("virtual_on_net_call_type_name", "virtualOnNetCallTypeName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetPasscodeRulesRequest(OCIRequest):
    """
    Requests the group's voice portal passcode rules setting.

    The response is either ``GroupVoiceMessagingGroupGetPasscodeRulesResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupPortalPasscodeRulesGetRequest()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetRequest(OCIRequest):
    """
    Requests the group's Voice Messaging settings.

    The response is either ``GroupVoiceMessagingGroupGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalBrandingRequest(OCIRequest):
    """
    Get the group's voice portal branding settings.

    The response is either a ``GroupVoiceMessagingGroupGetVoicePortalBrandingResponse()``
    or an ``ErrorResponse()``.

    Replaced By: ``GroupVoiceMessagingGroupGetVoicePortalBrandingRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalBrandingRequest16(OCIRequest):
    """
    Get the group's voice portal branding settings.

    The response is either a
    ``GroupVoiceMessagingGroupGetVoicePortalBrandingResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalBrandingRequest20(OCIRequest):
    """
    Get the group's voice portal branding settings.

    The response is either a
    ``GroupVoiceMessagingGroupGetVoicePortalBrandingResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalRequest14(OCIRequest):
    """
    Requests the group's voice messaging settings The response is either
    ``GroupVoiceMessagingGroupGetVoicePortalResponse14()`` or ``ErrorResponse()``.

    Replaced by ``GroupVoiceMessagingGroupGetVoicePortalRequest15()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalRequest15(OCIRequest):
    """
    Request to get the group voice portal information for a voice messaging group.

    The response is either ``GroupVoiceMessagingGroupGetVoicePortalResponse15()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalRequest17(OCIRequest):
    """
    Request to get the group voice portal information for a voice messaging group.

    The response is either ``GroupVoiceMessagingGroupGetVoicePortalResponse17()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalRequest17sp4(OCIRequest):
    """
    Request to get the group voice portal information for a voice messaging group.

    The response is either ``GroupVoiceMessagingGroupGetVoicePortalResponse17sp4()`` or
    ``ErrorResponse()``. Replaced by:
    ``GroupVoiceMessagingGroupGetVoicePortalRequest19sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupGetVoicePortalRequest19sp1(OCIRequest):
    """
    Request to get the group voice portal information for a voice messaging group.

    The response is either ``GroupVoiceMessagingGroupGetVoicePortalResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupModifyPasscodeRulesRequest(OCIRequest):
    """
    Request to modify the group's voice portal passcode rules setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupPortalPasscodeRulesModifyRequest()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_rule_level: useRuleLevel
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_rule_level: str = attr.ib(default=None)
    disallow_repeated_digits: bool = attr.ib(default=None)
    disallow_user_number: bool = attr.ib(default=None)
    disallow_reversed_user_number: bool = attr.ib(default=None)
    disallow_old_passcode: bool = attr.ib(default=None)
    disallow_reversed_old_passcode: bool = attr.ib(default=None)
    min_code_length: int = attr.ib(default=None)
    max_code_length: int = attr.ib(default=None)
    disable_login_after_max_failed_login_attempts: bool = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    expire_password: bool = attr.ib(default=None)
    passcode_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_rule_level", "useRuleLevel", str),
            E("disallow_repeated_digits", "disallowRepeatedDigits", bool),
            E("disallow_user_number", "disallowUserNumber", bool),
            E("disallow_reversed_user_number", "disallowReversedUserNumber", bool),
            E("disallow_old_passcode", "disallowOldPasscode", bool),
            E("disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool),
            E("min_code_length", "minCodeLength", int),
            E("max_code_length", "maxCodeLength", int),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupModifyRequest(OCIRequest):
    """
    Request to modify the group's voice messaging settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_mail_server_setting: useMailServerSetting
        warn_caller_before_recording_voice_message: warnCallerBeforeRecordingVoiceMessage
        allow_users_configuring_advanced_settings: allowUsersConfiguringAdvancedSettings
        allow_compose_or_forward_message_to_entire_group:
            allowComposeOrForwardMessageToEntireGroup
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        real_delete_for_imap: realDeleteForImap
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_mail_server_setting: str = attr.ib(default=None)
    warn_caller_before_recording_voice_message: bool = attr.ib(default=None)
    allow_users_configuring_advanced_settings: bool = attr.ib(default=None)
    allow_compose_or_forward_message_to_entire_group: bool = attr.ib(default=None)
    mail_server_net_address: str = attr.ib(default=None)
    mail_server_protocol: str = attr.ib(default=None)
    real_delete_for_imap: bool = attr.ib(default=None)
    max_mailbox_length_minutes: int = attr.ib(default=None)
    does_message_age: bool = attr.ib(default=None)
    hold_period_days: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_mail_server_setting", "useMailServerSetting", str),
            E(
                "warn_caller_before_recording_voice_message",
                "warnCallerBeforeRecordingVoiceMessage",
                bool,
            ),
            E(
                "allow_users_configuring_advanced_settings",
                "allowUsersConfiguringAdvancedSettings",
                bool,
            ),
            E(
                "allow_compose_or_forward_message_to_entire_group",
                "allowComposeOrForwardMessageToEntireGroup",
                bool,
            ),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str),
            E("real_delete_for_imap", "realDeleteForImap", bool),
            E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int),
            E("does_message_age", "doesMessageAge", bool),
            E("hold_period_days", "holdPeriodDays", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceXmlDeleteInstanceRequest(OCIRequest):
    """
    Delete a VoiceXML instance from a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceXmlGetInstanceListRequest(OCIRequest):
    """
    Get a list of VoiceXML instances within a group.

    The response is either ``GroupVoiceXmlGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceXmlGetInstanceRequest(OCIRequest):
    """
    Request to get all the information of a VoiceXML instance.

    The response is either ``GroupVoiceXmlGetInstanceResponse()`` or ``ErrorResponse()``.
    Replaced by: ``GroupVoiceXmlGetInstanceRequest19sp1()``

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceXmlGetInstanceRequest19sp1(OCIRequest):
    """
    Request to get all the information of a VoiceXML instance.

    The response is either ``GroupVoiceXmlGetInstanceResponse19sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class LoginRequest13mp10(OCIRequest):
    """
    ``LoginRequest13mp10()`` is 2nd stage of the 2 stage OCI login process.

    The signedPassword is not required for external authentication login from a trusted
    host (ACL).

    Attributes:
        user_id: userId
        signed_password: signedPassword
    """

    user_id: str = attr.ib()
    signed_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("signed_password", "signedPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class LoginRequest14sp4(OCIRequest):
    """
    ``LoginRequest14sp4()`` is 2nd stage of the 2 stage OCI login process.

    The signedPassword is not required for external authentication login from a trusted
    host (ACL).

    Attributes:
        user_id: userId
        signed_password: signedPassword
        plain_text_password: plainTextPassword
    """

    user_id: str = attr.ib()
    signed_password: str = attr.ib(default=None)
    plain_text_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("signed_password", "signedPassword", str),
            E("plain_text_password", "plainTextPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class LogoutRequest(OCIRequest):
    """
    ``LogoutRequest()`` is sent when an OCI user logs out or when connection is lost.

    This command can be sent either to the server, or to the client from OCS. Response is
    either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        reason: reason
    """

    user_id: str = attr.ib()
    reason: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("reason", "reason", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class PasswordModifyRequest(OCIRequest):
    """
    Modify the password for a user/administrator.

    When oldPassword is specified, password rule applies.  If oldPassword in not
    specified, any password rule related to old password does not apply.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        old_password: oldPassword
        new_password: newPassword
    """

    user_id: str = attr.ib()
    old_password: str = attr.ib(default=None)
    new_password: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("old_password", "oldPassword", str),
            E("new_password", "newPassword", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class PrimaryInfoGetRequest(OCIRequest):
    """
    Requests information about the primary server for high-availability support.


    Attributes:
        is_private: isPrivate
        is_address_info_requested: isAddressInfoRequested
    """

    is_private: bool = attr.ib()
    is_address_info_requested: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_private", "isPrivate", bool, is_required=True),
            E(
                "is_address_info_requested",
                "isAddressInfoRequested",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class PublicClusterGetFullyQualifiedDomainNameRequest(OCIRequest):
    """
    Get the public cluster fully qualified domain name (FQDN).

    The response is either a ``PublicClusterGetFullyQualifiedDomainNameResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceCustomTagAddRequest(OCIRequest):
    """
    Request to add a static configuration tag for a service provider access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        tag_name: tagName
        tag_value: tagValue
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceCustomTagDeleteListRequest(OCIRequest):
    """
    Request to delete static configuration tags for a service provider access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        tag_name: tagName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    tag_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceCustomTagGetListRequest(OCIRequest):
    """
    Request to get the list of custom configuration tags managed by the Device Management
    System, on a per-device profile basis.

    The response is either ``ServiceProviderAccessDeviceCustomTagGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceCustomTagModifyRequest(OCIRequest):
    """
    Request to modify a static configuration tag for a service provider access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        tag_name: tagName
        tag_value: tagValue
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceDeleteRequest(OCIRequest):
    """
    Request to delete a specified service provider access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileGetListRequest(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device profile basis.

    The response is either ``ServiceProviderAccessDeviceFileGetListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderAccessDeviceFileGetListRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileGetListRequest14sp8(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device profile basis.

    The response is either ``ServiceProviderAccessDeviceFileGetListResponse14sp8()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileGetRequest(OCIRequest):
    """
    Request to get a service provider device profile file.

    The response is either ``ServiceProviderAccessDeviceFileGetResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderAccessDeviceFileGetRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        file_type: fileType
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    file_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileGetRequest14sp8(OCIRequest):
    """
    Request to get a service provider device profile file.

    The response is either ``ServiceProviderAccessDeviceFileGetResponse14sp8()`` or
    ``ErrorResponse()``. Replaced by: ``ServiceProviderAccessDeviceFileGetRequest16sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileGetRequest16sp1(OCIRequest):
    """
    Request to get a service provider device profile file.

    The response is either ``ServiceProviderAccessDeviceFileGetResponse16sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileGetRequest20(OCIRequest):
    """
    Request to get a service provider device profile file.

    The response is either ``ServiceProviderAccessDeviceFileGetResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        file_format: fileFormat
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceGetRequest14(OCIRequest):
    """
    Requests the configuration of a specified service provider access device.

    The response is either ``ServiceProviderAccessDeviceGetResponse14()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderAccessDeviceGetRequest14sp3()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceGetRequest14sp3(OCIRequest):
    """
    Requests the configuration of a specified service provider access device.

    The response is either ``ServiceProviderAccessDeviceGetResponse14sp3()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderAccessDeviceGetRequest14sp6()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceGetRequest14sp6(OCIRequest):
    """
    Requests the configuration of a specified service provider access device.

    The response is either ``ServiceProviderAccessDeviceGetResponse14sp6()`` or
    ``ErrorResponse()``. Replaced by: ``ServiceProviderAccessDeviceGetRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceGetRequest16(OCIRequest):
    """
    Requests the configuration of a specified service provider access device.

    The response is either ``ServiceProviderAccessDeviceGetResponse16()`` or
    ``ErrorResponse()``. Replaced by: ``ServiceProviderAccessDeviceGetRequest19()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceGetRequest18sp1(OCIRequest):
    """
    Requests the configuration of a specified service provider access device.

    The response is either ``ServiceProviderAccessDeviceGetResponse18sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceModifyUserRequest(OCIRequest):
    """
    Request to modify attributes for line/ports assigned on the service provider device
    profile.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode and ignored in AS data mode: privateIdentity

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        line_port: linePort
        private_identity: privateIdentity
        is_primary_line_port: isPrimaryLinePort
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    line_port: str = attr.ib()
    private_identity: str = attr.ib(default=None)
    is_primary_line_port: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("line_port", "linePort", str, is_required=True),
            E("private_identity", "privateIdentity", str),
            E("is_primary_line_port", "isPrimaryLinePort", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceResetRequest(OCIRequest):
    """
    Reset a specific service provider SIP device that supports the reset operation.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminAddRequest14(OCIRequest):
    """
    Add a service provider administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
        administrator_type: administratorType
    """

    service_provider_id: str = attr.ib()
    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    language: str = attr.ib(default=None)
    administrator_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str),
            E("language", "language", str),
            E("administrator_type", "administratorType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminDeleteRequest(OCIRequest):
    """
    Delete a service provider administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetListRequest14(OCIRequest):
    """
    Get a list of service provider administrators.

    The response is either a ``ServiceProviderAdminGetListResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest14(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse14()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest16sp1(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse16sp1()`` or
    ``ErrorResponse()``. Replaced by: ``ServiceProviderAdminGetPolicyRequest17()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest16sp2(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse16sp2()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest17(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse17()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest17sp1(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse17sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest17sp3(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse17sp3()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest18(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse18()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetPolicyRequest20(OCIRequest):
    """
    Requests the service provider administrator's policy settings.

    The response is either ``ServiceProviderAdminGetPolicyResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminGetRequest14(OCIRequest):
    """
    Get a service provider administrators profile.

    The response is either a ``ServiceProviderAdminGetResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminModifyPolicyRequest14(OCIRequest):
    """
    Request to modify the service provider administrator's policy settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The
    networkPolicyAccess is only modified for the enterprise administrator.  The following
    elements are only used in AS data mode: dialableCallerIDAccess
    verifyTranslationAndroutingAccess

    Attributes:
        user_id: userId
        profile_access: profileAccess
        group_access: groupAccess
        user_access: userAccess
        admin_access: adminAccess
        department_access: departmentAccess
        access_device_access: accessDeviceAccess
        phone_number_extension_access: phoneNumberExtensionAccess
        calling_line_id_number_access: callingLineIdNumberAccess
        service_access: serviceAccess
        service_pack_access: servicePackAccess
        session_admission_control_access: sessionAdmissionControlAccess
        web_branding_access: webBrandingAccess
        office_zone_access: officeZoneAccess
        communication_barring_access: communicationBarringAccess
        network_policy_access: networkPolicyAccess
        number_activation_access: numberActivationAccess
        dialable_caller_id_access: dialableCallerIDAccess
        verify_translation_and_routing_access: verifyTranslationAndRoutingAccess
    """

    user_id: str = attr.ib()
    profile_access: str = attr.ib(default=None)
    group_access: str = attr.ib(default=None)
    user_access: str = attr.ib(default=None)
    admin_access: str = attr.ib(default=None)
    department_access: str = attr.ib(default=None)
    access_device_access: str = attr.ib(default=None)
    phone_number_extension_access: str = attr.ib(default=None)
    calling_line_id_number_access: str = attr.ib(default=None)
    service_access: str = attr.ib(default=None)
    service_pack_access: str = attr.ib(default=None)
    session_admission_control_access: str = attr.ib(default=None)
    web_branding_access: str = attr.ib(default=None)
    office_zone_access: str = attr.ib(default=None)
    communication_barring_access: str = attr.ib(default=None)
    network_policy_access: str = attr.ib(default=None)
    number_activation_access: str = attr.ib(default=None)
    dialable_caller_id_access: str = attr.ib(default=None)
    verify_translation_and_routing_access: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("profile_access", "profileAccess", str),
            E("group_access", "groupAccess", str),
            E("user_access", "userAccess", str),
            E("admin_access", "adminAccess", str),
            E("department_access", "departmentAccess", str),
            E("access_device_access", "accessDeviceAccess", str),
            E("phone_number_extension_access", "phoneNumberExtensionAccess", str),
            E("calling_line_id_number_access", "callingLineIdNumberAccess", str),
            E("service_access", "serviceAccess", str),
            E("service_pack_access", "servicePackAccess", str),
            E("session_admission_control_access", "sessionAdmissionControlAccess", str),
            E("web_branding_access", "webBrandingAccess", str),
            E("office_zone_access", "officeZoneAccess", str),
            E("communication_barring_access", "communicationBarringAccess", str),
            E("network_policy_access", "networkPolicyAccess", str),
            E("number_activation_access", "numberActivationAccess", str),
            E("dialable_caller_id_access", "dialableCallerIDAccess", str),
            E(
                "verify_translation_and_routing_access",
                "verifyTranslationAndRoutingAccess",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdminModifyRequest(OCIRequest):
    """
    Modify a service provider administrator.

    Since old password is not specified here, any password rule related to old password
    does not apply.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
    """

    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    language: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str),
            E("language", "language", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdviceOfChargeGetRequest(OCIRequest):
    """
    Request to get the list of Advice of Charge service provider parameters.

    The response is either ``ServiceProviderAdviceOfChargeGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAdviceOfChargeModifyRequest(OCIRequest):
    """
    Modify the service provider level Advice Of Charge service provider settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_sp_level_ao_c_settings: useSPLevelAoCSettings
        delay_between_notification_seconds: delayBetweenNotificationSeconds
    """

    service_provider_id: str = attr.ib()
    use_sp_level_ao_c_settings: bool = attr.ib(default=None)
    delay_between_notification_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_sp_level_ao_c_settings", "useSPLevelAoCSettings", bool),
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAnswerConfirmationGetRequest(OCIRequest):
    """
    Get a service provider or enterprise's answer confirmation settings.

    The response is either a ``ServiceProviderAnswerConfirmationGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderAnswerConfirmationGetRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAnswerConfirmationGetRequest16(OCIRequest):
    """
    Get a service provider or enterprise's answer confirmation settings.

    The response is either a ``ServiceProviderAnswerConfirmationGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderApplicationServerSetGetRequest(OCIRequest):
    """
    Get the Application Server set for a service provider or enterprise.

    The response is either a ``ServiceProviderApplicationServerSetGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderApplicationServerSetModifyRequest(OCIRequest):
    """
    Modify the Application Server set assigned to the service provider or enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        application_server_set_name: applicationServerSetName
    """

    service_provider_id: str = attr.ib()
    application_server_set_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("application_server_set_name", "applicationServerSetName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksCommunicatorGetRequest(OCIRequest):
    """
    Request to get Configuration Server for a specified service provider.

    The response is either a ``ServiceProviderBroadWorksCommunicatorGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksCommunicatorModifyRequest(OCIRequest):
    """
    Request to modify the Configuration URL.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        configuration_server_url: configurationServerURL
    """

    service_provider_id: str = attr.ib(default=None)
    configuration_server_url: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str),
            E("configuration_server_url", "configurationServerURL", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityGetRequest(OCIRequest):
    """
    Get the service provider BroadWorks Mobility service settings.

    The response is either a ``ServiceProviderBroadWorksMobilityGetResponse()`` or an
    ``ErrorResponse()``. Replaced by:
    ``ServiceProviderBroadWorksMobilityGetRequest19sp1()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityGetRequest19sp1(OCIRequest):
    """
    Get the service provider BroadWorks Mobility service settings.

    The response is either a ``ServiceProviderBroadWorksMobilityGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberAddListRequest(OCIRequest):
    """
    Adds Mobile Subscriber Directory Numbers to a service provider.

    It is possible to add a single DN, or a list of DNs.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by
    ``ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberAddListRequest21()``.

    Attributes:
        service_provider_id: serviceProviderId
        mobile_subscriber_directory_number: mobileSubscriberDirectoryNumber
    """

    service_provider_id: str = attr.ib()
    mobile_subscriber_directory_number: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "mobile_subscriber_directory_number",
                "mobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberAddListRequest21(OCIRequest):
    """
    Adds Mobile Subscriber Directory Numbers to a service provider-mobile network
    combination.

    It is possible to add a single DN, or a list of DNs.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        mobile_network_name: mobileNetworkName
        mobile_subscriber_directory_number: mobileSubscriberDirectoryNumber
    """

    service_provider_id: str = attr.ib()
    mobile_network_name: str = attr.ib()
    mobile_subscriber_directory_number: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("mobile_network_name", "mobileNetworkName", str, is_required=True),
            E(
                "mobile_subscriber_directory_number",
                "mobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberDeleteListRequest(OCIRequest):
    """
    Deletes Mobile Subscriber Directory Numbers from a service provider.

    It is possible to delete either: a single number, or a list of numbers.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        mobile_subscriber_directory_number: mobileSubscriberDirectoryNumber
    """

    service_provider_id: str = attr.ib()
    mobile_subscriber_directory_number: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "mobile_subscriber_directory_number",
                "mobileSubscriberDirectoryNumber",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListRequest(OCIRequest):
    """
    Request a list of available Mobile Subscriber Directory Numbers not yet assigned to
    any group.

    This command is applicable only for service providers and will fail for enterprises.

    The response is either
    ``ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetAvailableListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityModifyRequest(OCIRequest):
    """
    Modify the service provider level BroadWorks Mobility service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_setting_level: useSettingLevel
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        enable_announcement_suppression: enableAnnouncementSuppression
    """

    service_provider_id: str = attr.ib()
    use_setting_level: str = attr.ib(default=None)
    enable_location_services: bool = attr.ib(default=None)
    enable_msrn_lookup: bool = attr.ib(default=None)
    enable_mobile_state_checking: bool = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)
    enable_announcement_suppression: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_setting_level", "useSettingLevel", str),
            E("enable_location_services", "enableLocationServices", bool),
            E("enable_msrn_lookup", "enableMSRNLookup", bool),
            E("enable_mobile_state_checking", "enableMobileStateChecking", bool),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
            E("enable_announcement_suppression", "enableAnnouncementSuppression", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCPEConfigRebuildDeviceConfigFileRequest(OCIRequest):
    """
    Rebuild the config file for a specified device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        force: force
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    force: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("force", "force", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCPEConfigReorderDeviceLinePortsRequest(OCIRequest):
    """
    Reorder the lines of a Service Provider device.

    You can not add or delete line ports, only re-ordering the list is allowed.  The
    ordered list of line ports can be obtained with the
    ``ServiceProviderAccessDeviceGetRequest()`` command.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        ordered_line_port_list: orderedLinePortList
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    ordered_line_port_list: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E(
                "ordered_line_port_list",
                "orderedLinePortList",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCPEConfigResetDeviceRequest(OCIRequest):
    """
    Reset a specific service provider or enterprise device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        force: force
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    force: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("force", "force", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest14(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest14sp1(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse14sp1()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest14sp4(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse14sp4()`` or
    an ``ErrorResponse()``.

    Replaced By : ``ServiceProviderCallProcessingGetPolicyRequest15()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest14sp7(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse14sp7()`` or
    an ``ErrorResponse()``.

    Replaced By: ``ServiceProviderCallProcessingGetPolicyRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest15(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse15()`` or an
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderCallProcessingGetPolicyRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest15sp2(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse15sp2()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest16(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest16sp2(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse16sp2()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest17(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest17sp3(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse17sp3()`` or
    an ``ErrorResponse()``. Replaced by
    ``ServiceProviderCallProcessingGetPolicyResponse17sp4()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest17sp4(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse17sp4()`` or
    an ``ErrorResponse()``.

    Replaced By : ``ServiceProviderCallProcessingGetPolicyRequest18sp1()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest18sp1(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse18sp1()`` or
    an ``ErrorResponse()``. Replaced by:
    ``ServiceProviderCallProcessingGetPolicyRequest19sp1()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingGetPolicyRequest19sp1(OCIRequest):
    """
    Request the service provider level data associated with Call Processing Policy.

    The response is either a ``ServiceProviderCallProcessingGetPolicyResponse18sp1()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingModifyPolicyRequest14(OCIRequest):
    """
    Modify the service provider level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    service_provider_id: str = attr.ib()
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_external_calls_via_private_dialing_plan: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    use_setting_level: str = attr.ib(default=None)
    conference_uri: str = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E("use_setting_level", "useSettingLevel", str),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCallProcessingModifyPolicyRequest15(OCIRequest):
    """
    Modify the service provider level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: useServiceProviderDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    enterpriseCallsCLIDPolicy groupCallsCLIDPolicy

    Attributes:
        service_provider_id: serviceProviderId
        use_service_provider_dclid_setting: useServiceProviderDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        use_setting_level: useSettingLevel
        conference_uri: conferenceURI
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        enable_dialable_caller_id: enableDialableCallerID
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        group_calls_clid_policy: groupCallsCLIDPolicy
    """

    service_provider_id: str = attr.ib()
    use_service_provider_dclid_setting: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    use_setting_level: str = attr.ib(default=None)
    conference_uri: str = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    group_calls_clid_policy: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "use_service_provider_dclid_setting",
                "useServiceProviderDCLIDSetting",
                bool,
            ),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E("use_setting_level", "useSettingLevel", str),
            E("conference_uri", "conferenceURI", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E("group_calls_clid_policy", "groupCallsCLIDPolicy", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringCriteriaAssignListRequest(OCIRequest):
    """
    Assign a list of Communication Barring Criteria to a service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        criteria_name: criteriaName
    """

    service_provider_id: str = attr.ib()
    criteria_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringCriteriaGetAssignedListRequest(OCIRequest):
    """
    Get a list of Communication Barring Criteria assigned to a service provider.

    The response is either a
    ``ServiceProviderCommunicationBarringCriteriaGetAssignedListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringCriteriaUnassignListRequest(OCIRequest):
    """
    Unassign a list of Communication Barring Criteria from a service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        criteria_name: criteriaName
    """

    service_provider_id: str = attr.ib()
    criteria_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringDigitPatternCriteriaAddRequest(OCIRequest):
    """
    Add a new Communication Barring Digit Pattern Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        description: description
        match_digit_pattern: matchDigitPattern
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    match_digit_pattern: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringDigitPatternCriteriaDeleteRequest(OCIRequest):
    """
    Delete an existing Communication Barring Digit Pattern Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringDigitPatternCriteriaGetListRequest(OCIRequest):
    """
    Get the list of all Digit Pattern Criteria defined for the service provider.

    The response is either a
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringDigitPatternCriteriaGetRequest(OCIRequest):
    """
    Get an existing Digit Pattern Criteria.

    The response is either a
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringDigitPatternCriteriaModifyRequest(OCIRequest):
    """
    Modify an existing Communication Barring Digit Pattern Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        new_name: newName
        description: description
        add_match_digit_pattern: addMatchDigitPattern
        delete_match_digit_pattern: deleteMatchDigitPattern
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    add_match_digit_pattern: List[str] = attr.ib(default=None)
    delete_match_digit_pattern: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("add_match_digit_pattern", "addMatchDigitPattern", str, is_array=True),
            E(
                "delete_match_digit_pattern",
                "deleteMatchDigitPattern",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringIncomingCriteriaAssignListRequest(OCIRequest):
    """
    Assign a list of Communication Barring Incoming Criteria to a service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        criteria_name: criteriaName
    """

    service_provider_id: str = attr.ib()
    criteria_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringIncomingCriteriaGetAssignedListRequest(OCIRequest):
    """
    Get a list of Communication Barring Incoming Criteria assigned to a service provider.

    The response is either a
    ``ServiceProviderCommunicationBarringIncomingCriteriaGetAssignedListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringIncomingCriteriaUnassignListRequest(OCIRequest):
    """
    Unassign a list of Communication Barring Incoming Criteria from a service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        criteria_name: criteriaName
    """

    service_provider_id: str = attr.ib()
    criteria_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileDeleteRequest(OCIRequest):
    """
    Deletes an existing Communication Barring Profile.

    Optionally, a new default profile can be chosen if the current default profile is
    being deleted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        default_profile: defaultProfile
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    default_profile: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("default_profile", "defaultProfile", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetCriteriaUsageListRequest(OCIRequest):
    """
    Get a list of Communication Barring profiles within a service provider that have a
    given Communication Barring Criteria assigned.

    The response is either a ServiceProviderCommunicationBarring
    ``ProfileGetCriteriaUsageListResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        criteria_name: criteriaName
    """

    service_provider_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest(OCIRequest):
    """
    Get the list of Profiles that use a specific Digit Pattern Criteria.

    The response is either a
    ``ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetIncomingCriteriaUsageListRequest(OCIRequest):
    """
    Get a list of Communication Barring profiles within a service provider that have a
    given Communication Barring Incoming Criteria assigned.

    The response is either a ServiceProviderCommunicationBarring
    ``ProfileGetIncomingCriteriaUsageListResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        criteria_name: criteriaName
    """

    service_provider_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetListRequest(OCIRequest):
    """
    Get the list of all Communication Barring Profiles.

    The response is either a
    ``ServiceProviderCommunicationBarringProfileGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetRequest(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a ``ServiceProviderCommunicationBarringProfileGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetRequest17sp3(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a
    ``ServiceProviderCommunicationBarringProfileGetResponse17sp3()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetRequest19sp1(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a
    ``ServiceProviderCommunicationBarringProfileGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileModifyDefaultRequest(OCIRequest):
    """
    Modifies the default Communication Barring Profile of a Service Provider.

    If a default has been previously selected, this command will swap the default profile
    with the profile provided.  Selecting a nil profile will cause the service provider to
    not have a default Communicaton Barring Profile.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDeleteRequest(OCIRequest):
    """
    Delete a service provider or enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDeviceManagementInProgressAndPendingEventCancelRequest(OCIRequest):
    """
    Cancel pending and in progress events.

    A list of individual events can be canceled.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        event_id: eventId
    """

    service_provider_id: str = attr.ib()
    event_id: List[int] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("event_id", "eventId", int, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDeviceProfileAuthenticationPasswordRulesGetRequest(OCIRequest):
    """
    Request to get the service provider level device profile authentication password rule
    settings.

    The response is either a
    ``ServiceProviderDeviceProfileAuthenticationPasswordRulesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDeviceProfileAuthenticationPasswordRulesModifyRequest(OCIRequest):
    """
    Request to modify the service provider level device profile authentication password
    rule settings.

    The useServiceProviderSettings element can only be modified by a system administrator
    or a provisioning administrator.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_service_provider_settings: useServiceProviderSettings
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        device_profile_authentication_lockout_type: deviceProfileAuthenticationLockoutType
        device_profile_temporary_lockout_threshold: deviceProfileTemporaryLockoutThreshold
        device_profile_wait_algorithm: deviceProfileWaitAlgorithm
        device_profile_lockout_fixed_minutes: deviceProfileLockoutFixedMinutes
        device_profile_permanent_lockout_threshold: deviceProfilePermanentLockoutThreshold
    """

    service_provider_id: str = attr.ib()
    use_service_provider_settings: bool = attr.ib(default=None)
    disallow_authentication_name: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    send_permanent_lockout_notification: bool = attr.ib(default=None)
    permanent_lockout_notify_email_address: str = attr.ib(default=None)
    device_profile_authentication_lockout_type: str = attr.ib(default=None)
    device_profile_temporary_lockout_threshold: int = attr.ib(default=None)
    device_profile_wait_algorithm: str = attr.ib(default=None)
    device_profile_lockout_fixed_minutes: str = attr.ib(default=None)
    device_profile_permanent_lockout_threshold: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_service_provider_settings", "useServiceProviderSettings", bool),
            E("disallow_authentication_name", "disallowAuthenticationName", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "device_profile_authentication_lockout_type",
                "deviceProfileAuthenticationLockoutType",
                str,
            ),
            E(
                "device_profile_temporary_lockout_threshold",
                "deviceProfileTemporaryLockoutThreshold",
                int,
            ),
            E("device_profile_wait_algorithm", "deviceProfileWaitAlgorithm", str),
            E(
                "device_profile_lockout_fixed_minutes",
                "deviceProfileLockoutFixedMinutes",
                str,
            ),
            E(
                "device_profile_permanent_lockout_threshold",
                "deviceProfilePermanentLockoutThreshold",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyAddAccessCodeRequest(OCIRequest):
    """
    Request to add a Service Provider level Dial Plan Access Code and its all attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        access_code: accessCode
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    service_provider_id: str = attr.ib()
    access_code: str = attr.ib()
    include_code_for_network_translations_and_routing: bool = attr.ib()
    include_code_for_screening_services: bool = attr.ib()
    enable_secondary_dial_tone: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
                is_required=True,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
                is_required=True,
            ),
            E(
                "enable_secondary_dial_tone",
                "enableSecondaryDialTone",
                bool,
                is_required=True,
            ),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyDeleteAccessCodeRequest(OCIRequest):
    """
    Request to delete a Service Provider level Dial Plan Access Code and its all
    attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        access_code: accessCode
    """

    service_provider_id: str = attr.ib()
    access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyGetAccessCodeListRequest(OCIRequest):
    """
    Request the Service Provider level data associated with Dial Plan Policy.

    The response is either a ``ServiceProviderDialPlanPolicyGetAccessCodeListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyGetAccessCodeRequest(OCIRequest):
    """
    Request access code data associated with Service Provider level Dial Plan Policy
    access codes.

    The response is either a ``ServiceProviderDialPlanPolicyGetAccessCodeResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        access_code: accessCode
    """

    service_provider_id: str = attr.ib()
    access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyGetRequest(OCIRequest):
    """
    Request the Service Provider level data associated with Dial Plan Policy.

    The response is either a ``ServiceProviderDialPlanPolicyGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``ServiceProviderDialPlanPolicyGetRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyGetRequest17(OCIRequest):
    """
    Request the Service Provider level data associated with Dial Plan Policy.

    The response is either a ``ServiceProviderDialPlanPolicyGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyModifyAccessCodeRequest(OCIRequest):
    """
    Request to modify a Service Provider level Dial Plan Access Code and its attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        access_code: accessCode
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    service_provider_id: str = attr.ib()
    access_code: str = attr.ib()
    include_code_for_network_translations_and_routing: bool = attr.ib(default=None)
    include_code_for_screening_services: bool = attr.ib(default=None)
    enable_secondary_dial_tone: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("access_code", "accessCode", str, is_required=True),
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
            ),
            E("enable_secondary_dial_tone", "enableSecondaryDialTone", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialPlanPolicyModifyRequest(OCIRequest):
    """
    Modify the Service Provider level data associated with Dial Plan Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        prefer_e164_number_format_for_callback_services:
            preferE164NumberFormatForCallbackServices
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    service_provider_id: str = attr.ib()
    requires_access_code_for_public_calls: bool = attr.ib(default=None)
    allow_e164_public_calls: bool = attr.ib(default=None)
    prefer_e164_number_format_for_callback_services: bool = attr.ib(default=None)
    public_digit_map: str = attr.ib(default=None)
    private_digit_map: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool),
            E(
                "prefer_e164_number_format_for_callback_services",
                "preferE164NumberFormatForCallbackServices",
                bool,
            ),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialableCallerIDCriteriaAddRequest(OCIRequest):
    """
    Add a new Dialable Caller ID Criteria.

    Criteria are added at the bottom of the list with the lowest priority.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    prefix_digits: str = attr.ib(default=None)
    match_call_type: List[str] = attr.ib(default=None)
    match_alternate_call_indicator: List[str] = attr.ib(default=None)
    match_local_category: bool = attr.ib()
    match_national_category: bool = attr.ib()
    match_interlata_category: bool = attr.ib()
    match_intralata_category: bool = attr.ib()
    match_international_category: bool = attr.ib()
    match_private_category: bool = attr.ib()
    match_emergency_category: bool = attr.ib()
    match_other_category: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialableCallerIDCriteriaDeleteRequest(OCIRequest):
    """
    Delete a Dialable Caller ID Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialableCallerIDCriteriaGetRequest(OCIRequest):
    """
    Get an existing Dialable Caller ID Criteria.

    The response is either a ``ServiceProviderDialableCallerIDCriteriaGetRequest()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialableCallerIDGetRequest(OCIRequest):
    """
    Get the service provider?s Dialable Caller ID settings and criteria list.

    The response is either a ``ServiceProviderDialableCallerIDGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDigitCollectionGetRequest13mp4(OCIRequest):
    """
    Request the service provider's digit collection attributes.

    The response is either a ``ServiceProviderDigitCollectionGetResponse13mp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDigitCollectionModifyRequest(OCIRequest):
    """
    Modifies the service provider's digit collection attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        access_code: accessCode
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    service_provider_id: str = attr.ib()
    access_code: str = attr.ib(default=None)
    public_digit_map: str = attr.ib(default=None)
    private_digit_map: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("access_code", "accessCode", str),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDnGetAvailableListRequest(OCIRequest):
    """
    Request a list of available DNs not yet assigned to any group.

    Dns assigned to the IMRN pool are not listed in the response.

    The response is either ``ServiceProviderDnGetAvailableListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDnGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all DNs in a service provider.

    Dns assigned to the IMRN pool are not listed in the response.

    The response is either ``ServiceProviderDnGetSummaryListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDomainAssignListRequest(OCIRequest):
    """
    Assign a list of domains to a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        domain: domain
    """

    service_provider_id: str = attr.ib()
    domain: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("domain", "domain", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDomainGetAssignedListRequest(OCIRequest):
    """
    Requests the list of all domains assigned to a service provider.

    The response is either ``ServiceProviderDomainGetAssignedListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDomainUnassignListRequest(OCIRequest):
    """
    Unassign a list of domains from a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        domain: domain
    """

    service_provider_id: str = attr.ib()
    domain: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("domain", "domain", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderEnhancedCallLogsGetRequest(OCIRequest):
    """
    Get the service provider's enhanced call log settings.

    The response is either a ``ServiceProviderEnhancedCallLogsGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderEnhancedCallLogsGetRequest17sp4(OCIRequest):
    """
    Get the service provider's enhanced call log settings.

    The response is either a ``ServiceProviderEnhancedCallLogsGetResponse17sp4()`` or an
    ``ErrorResponse()``. This command will return an ``ErrorResponse()`` if DBS is used as
    the call log server.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderEnhancedCallLogsModifyRequest(OCIRequest):
    """
    Modify the Service Provider level data associated with Enhanced Call Logs.

    Configures the maximum number of logged calls and maximum age of your user's call
    logs.  Log entries are deleted when either of the two limits is reached.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        max_logged_calls: maxLoggedCalls
        call_expiration_days: callExpirationDays
    """

    service_provider_id: str = attr.ib()
    max_logged_calls: int = attr.ib(default=None)
    call_expiration_days: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("max_logged_calls", "maxLoggedCalls", int),
            E("call_expiration_days", "callExpirationDays", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderExternalCustomRingbackGetRequest(OCIRequest):
    """
    Request the service provider level data associated with External Custom Ringback.

    The response is either a ``ServiceProviderExternalCustomRingbackGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderExternalCustomRingbackModifyRequest(OCIRequest):
    """
    Modify the service provider level data associated with External Custom Ringback.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        prefix_digits: prefixDigits
        server_net_address: serverNetAddress
        server_port: serverPort
        timeout_seconds: timeoutSeconds
    """

    service_provider_id: str = attr.ib()
    prefix_digits: str = attr.ib(default=None)
    server_net_address: str = attr.ib(default=None)
    server_port: int = attr.ib(default=None)
    timeout_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("prefix_digits", "prefixDigits", str),
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E("timeout_seconds", "timeoutSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFeatureAccessCodeGetListRequest(OCIRequest):
    """
    Get the list of feature access codes for a service provider or enterprise.

    The response is either a ``ServiceProviderFeatureAccessCodeGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFeatureAccessCodeGetListRequest20(OCIRequest):
    """
    Get the list of feature access codes for a service provider or enterprise.

    The response is either a ``ServiceProviderFeatureAccessCodeGetListResponse20()`` or an
    ``ErrorResponse()``. In release 20 the "Call Recording" FAC name is changed to "Call
    Recording - Start". Replaced by:
    ``ServiceProviderFeatureAccessCodeGetListRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFeatureAccessCodeGetListRequest21(OCIRequest):
    """
    Get the list of feature access codes for a service provider or enterprise.

    The response is either a ``ServiceProviderFeatureAccessCodeGetListResponse21()`` or an
    ``ErrorResponse()``. In release 20 the "Call Recording" FAC name is changed to "Call
    Recording - Start".

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFileRepositoryDeviceUserAddRequest(OCIRequest):
    """
    Add a new service provider file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        file_repository_name: fileRepositoryName
        user_name: userName
        password: password
        allow_put: allowPut
        allow_delete: allowDelete
        allow_get: allowGet
    """

    service_provider_id: str = attr.ib()
    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()
    password: str = attr.ib()
    allow_put: bool = attr.ib()
    allow_delete: bool = attr.ib()
    allow_get: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
            E("password", "password", str, is_required=True),
            E("allow_put", "allowPut", bool, is_required=True),
            E("allow_delete", "allowDelete", bool, is_required=True),
            E("allow_get", "allowGet", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFileRepositoryDeviceUserDeleteRequest(OCIRequest):
    """
    Delete a service provider file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        file_repository_name: fileRepositoryName
        user_name: userName
    """

    service_provider_id: str = attr.ib()
    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFileRepositoryDeviceUserGetListRequest(OCIRequest):
    """
    Request the list of service provider users for a file repository in the system.

    The response is either a ``ServiceProviderFileRepositoryDeviceUserGetListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        file_repository_name: fileRepositoryName
    """

    service_provider_id: str = attr.ib()
    file_repository_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFileRepositoryDeviceUserModifyRequest(OCIRequest):
    """
    Modify a service provider file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        file_repository_name: fileRepositoryName
        user_name: userName
        password: password
        allow_put: allowPut
        allow_delete: allowDelete
        allow_get: allowGet
    """

    service_provider_id: str = attr.ib()
    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()
    password: str = attr.ib(default=None)
    allow_put: bool = attr.ib(default=None)
    allow_delete: bool = attr.ib(default=None)
    allow_get: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
            E("password", "password", str),
            E("allow_put", "allowPut", bool),
            E("allow_delete", "allowDelete", bool),
            E("allow_get", "allowGet", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderGetDefaultRequest(OCIRequest):
    """
    Request the default profile for a service provider or enterprise.

    The response is either a ``ServiceProviderGetDefaultResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderGetRequest13mp2(OCIRequest):
    """
    Get the profile for a service provider or enterprise.

    The response is either a ``ServiceProviderGetResponse13mp2()`` or an
    ``ErrorResponse()``. Replaced by: ``ServiceProviderGetRequest17sp1()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderGetRequest17sp1(OCIRequest):
    """
    Get the profile for a service provider or enterprise.

    The response is either a ``ServiceProviderGetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderGroupPagingTargetsCapacityGetRequest(OCIRequest):
    """
    Request the maximum number of target users per paging group configured for a service
    provider.

    The response is either a ``ServiceProviderGroupPagingTargetsCapacityGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderGroupPagingTargetsCapacityModifyRequest(OCIRequest):
    """
    Modify the maximum number of target users per paging group configured for a service
    provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        maximum_target_users: maximumTargetUsers
    """

    service_provider_id: str = attr.ib()
    maximum_target_users: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("maximum_target_users", "maximumTargetUsers", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderIMRNGetListRequest(OCIRequest):
    """
    Returns a list of dns or dn ranges in a service provider IMRN pool.

    The response is either ``ServiceProviderIMRNGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderInCallServiceActivationGetRequest(OCIRequest):
    """
    Request the service provider's DTMF based in-call service activation trigger
    attributes.

    The response is either a ``ServiceProviderInCallServiceActivationGetResponse()`` or an
    ``ErrorResponse()``. Replaced by:
    ``ServiceProviderInCallServiceActivationGetRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderInCallServiceActivationGetRequest17(OCIRequest):
    """
    Request the service provider's DTMF based in-call service activation trigger
    attributes.

    The response is either a ``ServiceProviderInCallServiceActivationGetResponse17()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderInCallServiceActivationModifyRequest(OCIRequest):
    """
    Modifies the service provider's DTMF based in-call service activation trigger
    attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``ServiceProviderInCallServiceActivationModifyRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        activation_digits: activationDigits
    """

    service_provider_id: str = attr.ib()
    activation_digits: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("activation_digits", "activationDigits", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderInCallServiceActivationModifyRequest17(OCIRequest):
    """
    Modifies the service provider's DTMF based in-call service activation trigger
    attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        flash_activation_digits: flashActivationDigits
        call_transfer_activation_digits: callTransferActivationDigits
    """

    service_provider_id: str = attr.ib()
    flash_activation_digits: str = attr.ib(default=None)
    call_transfer_activation_digits: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("flash_activation_digits", "flashActivationDigits", str),
            E("call_transfer_activation_digits", "callTransferActivationDigits", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderIntegratedIMPGetRequest(OCIRequest):
    """
    Get the Integrated IMP service attributes for the service provider.

    The response is either ``ServiceProviderIntegratedIMPGetResponse()`` or
    ``ErrorResponse()``. Replaced by: ``ServiceProviderIntegratedIMPGetRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderIntegratedIMPGetRequest21(OCIRequest):
    """
    Get the Integrated IMP service attributes for the service provider.

    The response is either ``ServiceProviderIntegratedIMPGetResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderIntegratedIMPModifyRequest(OCIRequest):
    """
    Modify the Integrated IMP service attributes for the service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_system_service_domain: useSystemServiceDomain
        service_domain: serviceDomain
        service_port: servicePort
        use_system_messaging_server: useSystemMessagingServer
        provisioning_url: provisioningUrl
        provisioning_user_id: provisioningUserId
        provisioning_password: provisioningPassword
        bosh_url: boshURL
    """

    service_provider_id: str = attr.ib()
    use_system_service_domain: bool = attr.ib(default=None)
    service_domain: str = attr.ib(default=None)
    service_port: int = attr.ib(default=None)
    use_system_messaging_server: bool = attr.ib(default=None)
    provisioning_url: str = attr.ib(default=None)
    provisioning_user_id: str = attr.ib(default=None)
    provisioning_password: str = attr.ib(default=None)
    bosh_url: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_system_service_domain", "useSystemServiceDomain", bool),
            E("service_domain", "serviceDomain", str),
            E("service_port", "servicePort", int),
            E("use_system_messaging_server", "useSystemMessagingServer", bool),
            E("provisioning_url", "provisioningUrl", str),
            E("provisioning_user_id", "provisioningUserId", str),
            E("provisioning_password", "provisioningPassword", str),
            E("bosh_url", "boshURL", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderLDAPIntegrationGetDirectoryRequest(OCIRequest):
    """
    Get the LDAP directory attributes for a service provider.

    The response is either a ``ServiceProviderLDAPIntegrationGetDirectoryResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderLDAPIntegrationModifyDirectoryRequest(OCIRequest):
    """
    Modify the LDAP directory attributes for a service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        server_net_address: serverNetAddress
        server_port: serverPort
        search_base: searchBase
        use_ssl: useSSL
        require_authentication: requireAuthentication
        authenticated_dn: authenticatedDN
        authenticated_password: authenticatedPassword
        is_sort_enabled: isSortEnabled
        is_paged_result_enabled: isPagedResultEnabled
        search_filter: searchFilter
        include_search_attribute_in_search_filter: includeSearchAttributeInSearchFilter
        column1_attribute_name: column1AttributeName
        column2_attribute_name: column2AttributeName
        column3_attribute_name: column3AttributeName
        column4_attribute_name: column4AttributeName
        column1_label: column1Label
        column2_label: column2Label
        column3_label: column3Label
        column4_label: column4Label
        search_column: searchColumn
    """

    service_provider_id: str = attr.ib()
    server_net_address: str = attr.ib(default=None)
    server_port: int = attr.ib(default=None)
    search_base: str = attr.ib(default=None)
    use_ssl: bool = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    authenticated_dn: str = attr.ib(default=None)
    authenticated_password: str = attr.ib(default=None)
    is_sort_enabled: bool = attr.ib(default=None)
    is_paged_result_enabled: bool = attr.ib(default=None)
    search_filter: str = attr.ib(default=None)
    include_search_attribute_in_search_filter: bool = attr.ib(default=None)
    column1_attribute_name: str = attr.ib(default=None)
    column2_attribute_name: str = attr.ib(default=None)
    column3_attribute_name: str = attr.ib(default=None)
    column4_attribute_name: str = attr.ib(default=None)
    column1_label: str = attr.ib(default=None)
    column2_label: str = attr.ib(default=None)
    column3_label: str = attr.ib(default=None)
    column4_label: str = attr.ib(default=None)
    search_column: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E("search_base", "searchBase", str),
            E("use_ssl", "useSSL", bool),
            E("require_authentication", "requireAuthentication", bool),
            E("authenticated_dn", "authenticatedDN", str),
            E("authenticated_password", "authenticatedPassword", str),
            E("is_sort_enabled", "isSortEnabled", bool),
            E("is_paged_result_enabled", "isPagedResultEnabled", bool),
            E("search_filter", "searchFilter", str),
            E(
                "include_search_attribute_in_search_filter",
                "includeSearchAttributeInSearchFilter",
                bool,
            ),
            E("column1_attribute_name", "column1AttributeName", str),
            E("column2_attribute_name", "column2AttributeName", str),
            E("column3_attribute_name", "column3AttributeName", str),
            E("column4_attribute_name", "column4AttributeName", str),
            E("column1_label", "column1Label", str),
            E("column2_label", "column2Label", str),
            E("column3_label", "column3Label", str),
            E("column4_label", "column4Label", str),
            E("search_column", "searchColumn", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderLanguageAddRequest(OCIRequest):
    """
    Request to add a language for a service provder.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        language: language
    """

    service_provider_id: str = attr.ib()
    language: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("language", "language", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderLanguageDeleteRequest(OCIRequest):
    """
    Request to delete a language from a service provider supported languages.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        language: language
    """

    service_provider_id: str = attr.ib()
    language: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("language", "language", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderLanguageGetAvailableListRequest(OCIRequest):
    """
    Request the list of languages that a user or admin in a service provider is allowed to
    use.

    The list will either be the system or service provider languages list, depending on
    the useServiceProviderLanguages flag.

    The response is either a ``ServiceProviderLanguageGetAvailableListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderLanguageGetListRequest(OCIRequest):
    """
    Request the defined languages for a service provider.

    The response is either a ``ServiceProviderLanguageGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderLanguageModifyRequest(OCIRequest):
    """
    Request to modify a language properties for a service provider/enterprise.

    If the becomeDefaultLanguage element is present, the language in this request Becomes
    the default language for the service provider/enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        language: language
        become_default_language: becomeDefaultLanguage
    """

    service_provider_id: str = attr.ib()
    language: str = attr.ib()
    become_default_language: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("become_default_language", "becomeDefaultLanguage", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateDeleteRequest(OCIRequest):
    """
    Delete a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        language: language
        type: type
    """

    service_provider_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateGetRequest(OCIRequest):
    """
    Request a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a
    ``ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        language: language
        type: type
    """

    service_provider_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMWIDeliveryToMobileEndpointGetRequest(OCIRequest):
    """
    Request the service provider level data associated with MWI Delivery to Mobile
    Endpoint service.

    The response is either a ``ServiceProviderMWIDeliveryToMobileEndpointGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMaliciousCallTraceGetRequest(OCIRequest):
    """
    Get the service provider's Malicious Call Trace settings.

    The response is either a ``ServiceProviderMaliciousCallTraceGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMaliciousCallTraceModifyRequest(OCIRequest):
    """
    Modify the service provider's Malicious Call Trace settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_system_play_mct_warning_announcement: useSystemPlayMCTWarningAnnouncement
        play_mct_warning_announcement: playMCTWarningAnnouncement
    """

    service_provider_id: str = attr.ib()
    use_system_play_mct_warning_announcement: bool = attr.ib(default=None)
    play_mct_warning_announcement: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "use_system_play_mct_warning_announcement",
                "useSystemPlayMCTWarningAnnouncement",
                bool,
            ),
            E("play_mct_warning_announcement", "playMCTWarningAnnouncement", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMeetMeConferencingGetRequest(OCIRequest):
    """
    Request the service provider/enterprise level data associated with Meet-Me
    Conferencing functions.

    The response is either a ``ServiceProviderMeetMeConferencingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceAssignListRequest(OCIRequest):
    """
    Assign a list of Network Classes of Service to a service provider.

    The Element defaultNetworkClassOfService is required only for the first assignment,
    for subsequent assignments it is optional.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E("default_network_class_of_service", "defaultNetworkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceAssignListToAllGroupsRequest(OCIRequest):
    """
    Assign a list of Network Classes of Service to all groups with in a service provider.

    If it is the first assigned Network Class of Service in the group, it will be set as
    the default one.  The Network Classes of Service must be currently assigned to the
    service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceAssignToAllUsersRequest(OCIRequest):
    """
    Assign a Network Classes of Service to all users with in a service provider.

    This will also assign the Network Class of Service to all the groups in the service
    provider if it is not assigned yet.  If it is the first assigned Network Class of
    Service in the group, it will be set as the default one.  However, the Network Classes
    of Service must be currently assigned to the service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceGetAssignedListRequest(OCIRequest):
    """
    Get a list of Network Classes of Service assigned to a service provider.

    The response is either a
    ``ServiceProviderNetworkClassOfServiceGetAssignedListResponse()`` or an
    ``ErorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceModifyDefaultRequest(OCIRequest):
    """
    Modifies the default Network Classes of Service of a Service Provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceUnassignListRequest(OCIRequest):
    """
    Unassign a list of Network Classes of Service from a service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E("default_network_class_of_service", "defaultNetworkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNumberPortabilityQueryAddListRequest(OCIRequest):
    """
    Add a list of the Service Provider Number Portability Query Digit Patterns.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        digit_pattern: digitPattern
    """

    service_provider_id: str = attr.ib()
    digit_pattern: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("digit_pattern", "digitPattern", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNumberPortabilityQueryModifyRequest(OCIRequest):
    """
    Modify the Service Provider Number Portability Query information.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enable_number_portability_query_for_outgoing_calls:
            enableNumberPortabilityQueryForOutgoingCalls
        enable_number_portability_query_for_incoming_calls:
            enableNumberPortabilityQueryForIncomingCalls
        enable_number_portability_query_for_network_calls_only:
            enableNumberPortabilityQueryForNetworkCallsOnly
        delete_digit_pattern: deleteDigitPattern
    """

    service_provider_id: str = attr.ib()
    enable_number_portability_query_for_outgoing_calls: bool = attr.ib(default=None)
    enable_number_portability_query_for_incoming_calls: bool = attr.ib(default=None)
    enable_number_portability_query_for_network_calls_only: bool = attr.ib(default=None)
    delete_digit_pattern: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "enable_number_portability_query_for_outgoing_calls",
                "enableNumberPortabilityQueryForOutgoingCalls",
                bool,
            ),
            E(
                "enable_number_portability_query_for_incoming_calls",
                "enableNumberPortabilityQueryForIncomingCalls",
                bool,
            ),
            E(
                "enable_number_portability_query_for_network_calls_only",
                "enableNumberPortabilityQueryForNetworkCallsOnly",
                bool,
            ),
            E("delete_digit_pattern", "deleteDigitPattern", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderOfficeZoneAssignListRequest(OCIRequest):
    """
    Assign a list of Office Zones to a service provider.

    The Element defaultOfficeZone is required only for the first assignment, for
    subsequent assignments it is optional.  Office Zones can only be assigned if the
    Location-Based Calling Restrictions has been authorized to the service provider
    otherwise the request will fail.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        office_zone_name: officeZoneName
        default_office_zone_name: defaultOfficeZoneName
    """

    service_provider_id: str = attr.ib()
    office_zone_name: List[str] = attr.ib(default=None)
    default_office_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("office_zone_name", "officeZoneName", str, is_array=True),
            E("default_office_zone_name", "defaultOfficeZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderOfficeZoneGetAssignedListRequest(OCIRequest):
    """
    Get a list of Office Zones assigned to a service provider.

    The response is either a ``ServiceProviderOfficeZoneGetAssignedListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderOfficeZoneUnassignListRequest(OCIRequest):
    """
    Unassign a list of OfficeZones from a service provider.

    Note: a new default must be provided if unassigning the current default.  Office Zones
    can only be unassigned if the Location-Based Calling Restrictions has been authorized
    to the service provider otherwise the request will fail.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        office_zone_name: officeZoneName
        default_office_zone_name: defaultOfficeZoneName
    """

    service_provider_id: str = attr.ib()
    office_zone_name: List[str] = attr.ib(default=None)
    default_office_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("office_zone_name", "officeZoneName", str, is_array=True),
            E("default_office_zone_name", "defaultOfficeZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPasswordRulesGetRequest13mp2(OCIRequest):
    """
    Requests the service provider's password rules setting applicable to Administrators
    (Group and Department) and Users.

    The response is either ``ServiceProviderPasswordRulesGetResponse13mp2()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderPasswordRulesGetRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPasswordRulesGetRequest16(OCIRequest):
    """
    Requests the service provider's password rules setting applicable to Administrators
    (Group and Department) and Users.

    The response is either ``ServiceProviderPasswordRulesGetResponse16()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPasswordRulesModifyRequest(OCIRequest):
    """
    Request to modify the service provider's password rules settings setting applicable to
    Administrators (Group and Department) and Users.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``ServiceProviderPasswordRulesModifyRequest14sp3()``

    Attributes:
        service_provider_id: serviceProviderId
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
    """

    service_provider_id: str = attr.ib()
    rules_apply_to: str = attr.ib(default=None)
    allow_web_add_external_authentication_users: bool = attr.ib(default=None)
    disallow_user_id: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    password_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)
    disallow_rules_modification: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("rules_apply_to", "rulesApplyTo", str),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
            ),
            E("disallow_user_id", "disallowUserId", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("password_expires_days", "passwordExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("disallow_rules_modification", "disallowRulesModification", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPasswordRulesModifyRequest14sp3(OCIRequest):
    """
    Request to modify the service provider's password rules settings setting applicable to
    Administrators (Group and Department) and Users.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_previous_passwords: disallowPreviousPasswords
        number_of_previous_passwords: numberOfPreviousPasswords
    """

    service_provider_id: str = attr.ib()
    rules_apply_to: str = attr.ib(default=None)
    allow_web_add_external_authentication_users: bool = attr.ib(default=None)
    disallow_user_id: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    password_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)
    disallow_previous_passwords: bool = attr.ib(default=None)
    number_of_previous_passwords: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("rules_apply_to", "rulesApplyTo", str),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
            ),
            E("disallow_user_id", "disallowUserId", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("password_expires_days", "passwordExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("disallow_previous_passwords", "disallowPreviousPasswords", bool),
            E("number_of_previous_passwords", "numberOfPreviousPasswords", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPortalPasscodeRulesGetRequest(OCIRequest):
    """
    Requests the service provider's passcode rules setting.

    The response is either ``ServiceProviderPortalPasscodeRulesGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPortalPasscodeRulesGetRequest19(OCIRequest):
    """
    Requests the service provider's passcode rules setting.

    The response is either ``ServiceProviderPortalPasscodeRulesGetResponse19()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPortalPasscodeRulesModifyRequest(OCIRequest):
    """
    Request to modify the service provider's passcode rules setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: numberOfRepeatedDigits
    disallowRepeatedPatterns disallowContiguousSequences numberOfAscendingDigits
    numberOfDescendingDigits numberOfPreviousPasscodes

    Attributes:
        service_provider_id: serviceProviderId
        disallow_repeated_digits: disallowRepeatedDigits
        number_of_repeated_digits: numberOfRepeatedDigits
        disallow_repeated_patterns: disallowRepeatedPatterns
        disallow_contiguous_sequences: disallowContiguousSequences
        number_of_ascending_digits: numberOfAscendingDigits
        number_of_descending_digits: numberOfDescendingDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        number_of_previous_passcodes: numberOfPreviousPasscodes
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    service_provider_id: str = attr.ib()
    disallow_repeated_digits: bool = attr.ib(default=None)
    number_of_repeated_digits: int = attr.ib(default=None)
    disallow_repeated_patterns: bool = attr.ib(default=None)
    disallow_contiguous_sequences: bool = attr.ib(default=None)
    number_of_ascending_digits: int = attr.ib(default=None)
    number_of_descending_digits: int = attr.ib(default=None)
    disallow_user_number: bool = attr.ib(default=None)
    disallow_reversed_user_number: bool = attr.ib(default=None)
    disallow_old_passcode: bool = attr.ib(default=None)
    number_of_previous_passcodes: int = attr.ib(default=None)
    disallow_reversed_old_passcode: bool = attr.ib(default=None)
    min_code_length: int = attr.ib(default=None)
    max_code_length: int = attr.ib(default=None)
    disable_login_after_max_failed_login_attempts: bool = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    expire_password: bool = attr.ib(default=None)
    passcode_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("disallow_repeated_digits", "disallowRepeatedDigits", bool),
            E("number_of_repeated_digits", "numberOfRepeatedDigits", int),
            E("disallow_repeated_patterns", "disallowRepeatedPatterns", bool),
            E("disallow_contiguous_sequences", "disallowContiguousSequences", bool),
            E("number_of_ascending_digits", "numberOfAscendingDigits", int),
            E("number_of_descending_digits", "numberOfDescendingDigits", int),
            E("disallow_user_number", "disallowUserNumber", bool),
            E("disallow_reversed_user_number", "disallowReversedUserNumber", bool),
            E("disallow_old_passcode", "disallowOldPasscode", bool),
            E("number_of_previous_passcodes", "numberOfPreviousPasscodes", int),
            E("disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool),
            E("min_code_length", "minCodeLength", int),
            E("max_code_length", "maxCodeLength", int),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPreferredCarrierAddRequest(OCIRequest):
    """
    Add the country code preferred carriers for a service provider or enterprise.

    For each combination of service provider and country code, you can assign an intra-
    lata, inter-lata, and international carrier.  Each of the three types of carriers is
    optional.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Note: At the
    system level, more than one carrier may be assigned to each country code.  At the
    service provider level, you must choose from the carriers assigned at the system
    level.

    Attributes:
        service_provider_id: serviceProviderId
        country_code: countryCode
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    service_provider_id: str = attr.ib()
    country_code: str = attr.ib()
    intra_lata_carrier: str = attr.ib(default=None)
    inter_lata_carrier: str = attr.ib(default=None)
    international_carrier: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
            E("intra_lata_carrier", "intraLataCarrier", str),
            E("inter_lata_carrier", "interLataCarrier", str),
            E("international_carrier", "internationalCarrier", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPreferredCarrierDeleteRequest(OCIRequest):
    """
    Delete the country code preferred carriers for a service provider or enterprise.

    Note that this is different from unassigning all 3 types of carriers with the
    ``ServiceProviderPreferredCarrierModifyRequest()``.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. An
    ``ErrorResponse()`` will be returned if the country code preferred carriers were never
    added or were already deleted.

    Attributes:
        service_provider_id: serviceProviderId
        country_code: countryCode
    """

    service_provider_id: str = attr.ib()
    country_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPreferredCarrierGetAvailableCountryCodeListRequest(OCIRequest):
    """
    Requests the default country code and the list of unused country codes for a service
    provider / enterprise.

    The response is either a
    ``ServiceProviderPreferredCarrierGetAvailableCountryCodeListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPreferredCarrierGetCarrierListRequest(OCIRequest):
    """
    Requests the lists of carriers for a specified country code for a service provider /
    enterprise.

    The response is either a ``ServiceProviderPreferredCarrierGetCarrierListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        country_code: countryCode
    """

    service_provider_id: str = attr.ib()
    country_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPreferredCarrierGetListRequest(OCIRequest):
    """
    Requests a table of all the carriers defined in a specified service provider or
    enterprise.

    The response is either a ``ServiceProviderPreferredCarrierGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPreferredCarrierGetRequest(OCIRequest):
    """
    Requests the currently configured carriers for a specified country code for a service
    provider / enterprise.

    The response is either a ``ServiceProviderPreferredCarrierGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        country_code: countryCode
    """

    service_provider_id: str = attr.ib()
    country_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderPreferredCarrierModifyRequest(OCIRequest):
    """
    Modify the country code preferred carriers for a service provider or enterprise.

    For each combination of service provider and country code, you can assign an intra-
    lata, inter-lata, and international carrier.  Each of the 3 types of carriers is
    optional.  If an optional carrier is not specified, the assignment will not change.
    To clear a preferred carrier, set the value to an empty string.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Note: At the
    system level, more than one carrier may be assigned to each country code.  At the
    service provider level, you must choose from the carriers assigned at the system
    level.

    Attributes:
        service_provider_id: serviceProviderId
        country_code: countryCode
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    service_provider_id: str = attr.ib()
    country_code: str = attr.ib()
    intra_lata_carrier: str = attr.ib(default=None)
    inter_lata_carrier: str = attr.ib(default=None)
    international_carrier: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
            E("intra_lata_carrier", "intraLataCarrier", str),
            E("inter_lata_carrier", "interLataCarrier", str),
            E("international_carrier", "internationalCarrier", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRouteListEnterpriseTrunkNumberRangeActivateListRequest(OCIRequest):
    """
    Activate number ranges in a service provider.

    It is not an error to activate an already activated number range.  The command fails
    if executed when system level enterprise trunk number range activation is disabled.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        number_range_start: numberRangeStart
    """

    service_provider_id: str = attr.ib()
    number_range_start: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("number_range_start", "numberRangeStart", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRouteListEnterpriseTrunkNumberRangeDeactivateListRequest(OCIRequest):
    """
    Deactivate number ranges in a service provider.

    It is not an error to deactivate an already deactivated number range.  The command
    fails if executed when system level enterprise trunk number range activation is
    disabled.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        number_range_start: numberRangeStart
    """

    service_provider_id: str = attr.ib()
    number_range_start: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("number_range_start", "numberRangeStart", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRouteListEnterpriseTrunkNumberRangeDeleteListRequest(OCIRequest):
    """
    Delete number ranges from a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        number_range_start: numberRangeStart
    """

    service_provider_id: str = attr.ib()
    number_range_start: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("number_range_start", "numberRangeStart", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRouteListEnterpriseTrunkNumberRangeGetAvailableListRequest(OCIRequest):
    """
    Request a list of available number ranges not yet assigned to any group.

    The response is either
    ``ServiceProviderRouteListEnterpriseTrunkNumberRangeGetAvailableListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all enterprise trunk number ranges in the service provider.

    The response is either
    ``ServiceProviderRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRoutePointExternalSystemAssignListRequest(OCIRequest):
    """
    Assign a list of route point external systems to a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        route_point_external_system: routePointExternalSystem
    """

    service_provider_id: str = attr.ib()
    route_point_external_system: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "route_point_external_system",
                "routePointExternalSystem",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRoutePointExternalSystemGetAssignedListRequest(OCIRequest):
    """
    Requests the list of all Route Point External Systems assigned to a service provider.

    The response is either
    ``ServiceProviderRoutePointExternalSystemGetAssignedListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRoutePointExternalSystemUnassignListRequest(OCIRequest):
    """
    Unassign a list of route point external systems from a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        route_point_external_system: routePointExternalSystem
    """

    service_provider_id: str = attr.ib()
    route_point_external_system: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "route_point_external_system",
                "routePointExternalSystem",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRoutingProfileGetRequest(OCIRequest):
    """
    Request the routing profile for the service provider/enterprise.

    The response is either a ``ServiceProviderRoutingProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRoutingProfileModifyRequest(OCIRequest):
    """
    Requests to modify the routing profile for a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        routing_profile: routingProfile
    """

    service_provider_id: str = attr.ib()
    routing_profile: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("routing_profile", "routingProfile", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderSIPAuthenticationPasswordRulesGetRequest(OCIRequest):
    """
    Request to get the service provider level SIP authentication password rule settings.

    The response is either a
    ``ServiceProviderSIPAuthenticationPasswordRulesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderSIPAuthenticationPasswordRulesModifyRequest(OCIRequest):
    """
    Request to modify the service provider level SIP authentication password rule
    settings.

    The useServiceProviderSettings element can only be modified by a system administrator
    or a provisioning administrator.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_service_provider_settings: useServiceProviderSettings
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        endpoint_authentication_lockout_type: endpointAuthenticationLockoutType
        endpoint_temporary_lockout_threshold: endpointTemporaryLockoutThreshold
        endpoint_wait_algorithm: endpointWaitAlgorithm
        endpoint_lockout_fixed_minutes: endpointLockoutFixedMinutes
        endpoint_permanent_lockout_threshold: endpointPermanentLockoutThreshold
        trunk_group_authentication_lockout_type: trunkGroupAuthenticationLockoutType
        trunk_group_temporary_lockout_threshold: trunkGroupTemporaryLockoutThreshold
        trunk_group_wait_algorithm: trunkGroupWaitAlgorithm
        trunk_group_lockout_fixed_minutes: trunkGroupLockoutFixedMinutes
        trunk_group_permanent_lockout_threshold: trunkGroupPermanentLockoutThreshold
    """

    service_provider_id: str = attr.ib()
    use_service_provider_settings: bool = attr.ib(default=None)
    disallow_authentication_name: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    send_permanent_lockout_notification: bool = attr.ib(default=None)
    permanent_lockout_notify_email_address: str = attr.ib(default=None)
    endpoint_authentication_lockout_type: str = attr.ib(default=None)
    endpoint_temporary_lockout_threshold: int = attr.ib(default=None)
    endpoint_wait_algorithm: str = attr.ib(default=None)
    endpoint_lockout_fixed_minutes: str = attr.ib(default=None)
    endpoint_permanent_lockout_threshold: int = attr.ib(default=None)
    trunk_group_authentication_lockout_type: str = attr.ib(default=None)
    trunk_group_temporary_lockout_threshold: int = attr.ib(default=None)
    trunk_group_wait_algorithm: str = attr.ib(default=None)
    trunk_group_lockout_fixed_minutes: str = attr.ib(default=None)
    trunk_group_permanent_lockout_threshold: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_service_provider_settings", "useServiceProviderSettings", bool),
            E("disallow_authentication_name", "disallowAuthenticationName", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "endpoint_authentication_lockout_type",
                "endpointAuthenticationLockoutType",
                str,
            ),
            E(
                "endpoint_temporary_lockout_threshold",
                "endpointTemporaryLockoutThreshold",
                int,
            ),
            E("endpoint_wait_algorithm", "endpointWaitAlgorithm", str),
            E("endpoint_lockout_fixed_minutes", "endpointLockoutFixedMinutes", str),
            E(
                "endpoint_permanent_lockout_threshold",
                "endpointPermanentLockoutThreshold",
                int,
            ),
            E(
                "trunk_group_authentication_lockout_type",
                "trunkGroupAuthenticationLockoutType",
                str,
            ),
            E(
                "trunk_group_temporary_lockout_threshold",
                "trunkGroupTemporaryLockoutThreshold",
                int,
            ),
            E("trunk_group_wait_algorithm", "trunkGroupWaitAlgorithm", str),
            E("trunk_group_lockout_fixed_minutes", "trunkGroupLockoutFixedMinutes", str),
            E(
                "trunk_group_permanent_lockout_threshold",
                "trunkGroupPermanentLockoutThreshold",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleAddRequest(OCIRequest):
    """
    Add a service provider schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_name: scheduleName
        schedule_type: scheduleType
    """

    service_provider_id: str = attr.ib()
    schedule_name: str = attr.ib()
    schedule_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("schedule_name", "scheduleName", str, is_required=True),
            E("schedule_type", "scheduleType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleGetListRequest(OCIRequest):
    """
    Get the list of a service provider schedules.

    The list can be filtered by schedule type.

    The response is either a ``ServiceProviderScheduleGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_type: scheduleType
    """

    service_provider_id: str = attr.ib()
    schedule_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("schedule_type", "scheduleType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServiceGetAuthorizationListRequest(OCIRequest):
    """
    Requests the service provider's service authorization status.

    The response is either ``ServiceProviderServiceGetAuthorizationListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServiceGetUserAssignableListRequest(OCIRequest):
    """
    Requests the list of all user services assignable to users in the specified service
    provider.

    The response is either ``ServiceProviderServiceGetUserAssignableListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackAddServiceListRequest(OCIRequest):
    """
    Request to add services to a service pack if the pack has not been authorized to a
    group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_pack_name: servicePackName
        service_name: serviceName
    """

    service_provider_id: str = attr.ib()
    service_pack_name: str = attr.ib()
    service_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_pack_name", "servicePackName", str, is_required=True),
            E("service_name", "serviceName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackDeleteRequest(OCIRequest):
    """
    Request to delete a service pack from a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_pack_name: servicePackName
    """

    service_provider_id: str = attr.ib()
    service_pack_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_pack_name", "servicePackName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackGetDetailListRequest(OCIRequest):
    """
    Request to get a service pack details.

    The response is either ``ServiceProviderServicePackGetDetailListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_pack_name: servicePackName
    """

    service_provider_id: str = attr.ib()
    service_pack_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_pack_name", "servicePackName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackGetListRequest(OCIRequest):
    """
    Request to get a list of defined service packs for a service provider.

    The response is either ``ServiceProviderServicePackGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackGetServiceUsageListRequest(OCIRequest):
    """
    Request to get the list of service packs containing a specified service.

    The response is either ``ServiceProviderServicePackGetServiceUsageListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_name: serviceName
    """

    service_provider_id: str = attr.ib()
    service_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_name", "serviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackGetUtilizationListRequest(OCIRequest):
    """
    Request to get the service pack utilization for a service provider.

    For each service pack, a table of groups utilizing the pack is returned.

    The response is either ``ServiceProviderServicePackGetUtilizationListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskAddRequest(OCIRequest):
    """
    Create a service pack migration task.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``ServiceProviderServicePackMigrationTaskAddRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
        start_timestamp: startTimestamp
        max_duration_hours: maxDurationHours
        send_report_email: sendReportEmail
        report_delivery_email_address: reportDeliveryEmailAddress
        abort_on_error: abortOnError
        abort_error_threshold: abortErrorThreshold
        report_all_users: reportAllUsers
        automatically_increment_service_quantity: automaticallyIncrementServiceQuantity
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()
    start_timestamp: str = attr.ib()
    max_duration_hours: int = attr.ib()
    send_report_email: bool = attr.ib()
    report_delivery_email_address: str = attr.ib(default=None)
    abort_on_error: bool = attr.ib()
    abort_error_threshold: int = attr.ib(default=None)
    report_all_users: bool = attr.ib()
    automatically_increment_service_quantity: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E("start_timestamp", "startTimestamp", str, is_required=True),
            E("max_duration_hours", "maxDurationHours", int, is_required=True),
            E("send_report_email", "sendReportEmail", bool, is_required=True),
            E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
            E("abort_on_error", "abortOnError", bool, is_required=True),
            E("abort_error_threshold", "abortErrorThreshold", int),
            E("report_all_users", "reportAllUsers", bool, is_required=True),
            E(
                "automatically_increment_service_quantity",
                "automaticallyIncrementServiceQuantity",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskAddRequest21(OCIRequest):
    """
    Create a service pack migration task.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
        start_timestamp: startTimestamp
        expire_after_num_hours: expireAfterNumHours
        max_duration_hours: maxDurationHours
        send_report_email: sendReportEmail
        report_delivery_email_address: reportDeliveryEmailAddress
        abort_on_error: abortOnError
        abort_error_threshold: abortErrorThreshold
        report_all_users: reportAllUsers
        automatically_increment_service_quantity: automaticallyIncrementServiceQuantity
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()
    start_timestamp: str = attr.ib()
    expire_after_num_hours: int = attr.ib()
    max_duration_hours: int = attr.ib()
    send_report_email: bool = attr.ib()
    report_delivery_email_address: str = attr.ib(default=None)
    abort_on_error: bool = attr.ib()
    abort_error_threshold: int = attr.ib(default=None)
    report_all_users: bool = attr.ib()
    automatically_increment_service_quantity: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E("start_timestamp", "startTimestamp", str, is_required=True),
            E("expire_after_num_hours", "expireAfterNumHours", int, is_required=True),
            E("max_duration_hours", "maxDurationHours", int, is_required=True),
            E("send_report_email", "sendReportEmail", bool, is_required=True),
            E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
            E("abort_on_error", "abortOnError", bool, is_required=True),
            E("abort_error_threshold", "abortErrorThreshold", int),
            E("report_all_users", "reportAllUsers", bool, is_required=True),
            E(
                "automatically_increment_service_quantity",
                "automaticallyIncrementServiceQuantity",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskCopyRequest(OCIRequest):
    """
    Makes a copy of one or more existing service pack migration tasks.

    A copied task can be edited with other commands and scheduled for future execution.
    The name of the new task is chosen automatically.  The name will be "Copy (number) of
    taskName".

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
    """

    service_provider_id: str = attr.ib()
    task_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskDeleteRequest(OCIRequest):
    """
    Deletes a service pack migration task.

    It is not possible to delete a task while it is currently executing.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskGetListRequest(OCIRequest):
    """
    Requests a list of all service pack migration task for a service provider.

    The response is either ``ServiceProviderServicePackMigrationTaskGetListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderServicePackMigrationTaskGetListRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskGetListRequest21(OCIRequest):
    """
    Requests a list of all service pack migration tasks for a service provider.

    The response is either ``ServiceProviderServicePackMigrationTaskGetListResponse21()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskGetRequest(OCIRequest):
    """
    Requests the details of a specified service pack migration task.

    The response is either ``ServiceProviderServicePackMigrationTaskGetResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderServicePackMigrationTaskGetRequest14sp4()``

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskGetRequest14sp4(OCIRequest):
    """
    Requests the details of a specified service pack migration task.

    The response is either ``ServiceProviderServicePackMigrationTaskGetResponse14sp4()``
    or ``ErrorResponse()``.

    Replaced By: ``ServiceProviderServicePackMigrationTaskGetRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskGetRequest21(OCIRequest):
    """
    Requests the details of a specified service pack migration task.

    The response is either ``ServiceProviderServicePackMigrationTaskGetResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskModifyGroupListRequest(OCIRequest):
    """
    Replace the list of groups to be migrated for a specified service pack migration task.

    Modification is only allowed prior to task execution.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
        migrate_all_groups: migrateAllGroups
        group_id_list: groupIdList
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()
    migrate_all_groups: bool = attr.ib(default=None)
    group_id_list: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E("migrate_all_groups", "migrateAllGroups", bool),
            E("group_id_list", "groupIdList", str, is_complex=True),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskModifyRequest(OCIRequest):
    """
    Modify the properties of a specified service pack migration task.

    Modification is only allowed prior to task execution.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
        new_task_name: newTaskName
        start_timestamp: startTimestamp
        expire_after_num_hours: expireAfterNumHours
        max_duration_hours: maxDurationHours
        send_report_email: sendReportEmail
        report_delivery_email_address: reportDeliveryEmailAddress
        abort_on_error: abortOnError
        abort_error_threshold: abortErrorThreshold
        report_all_users: reportAllUsers
        automatically_increment_service_quantity: automaticallyIncrementServiceQuantity
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()
    new_task_name: str = attr.ib(default=None)
    start_timestamp: str = attr.ib(default=None)
    expire_after_num_hours: int = attr.ib(default=None)
    max_duration_hours: int = attr.ib(default=None)
    send_report_email: bool = attr.ib(default=None)
    report_delivery_email_address: str = attr.ib(default=None)
    abort_on_error: bool = attr.ib(default=None)
    abort_error_threshold: int = attr.ib(default=None)
    report_all_users: bool = attr.ib(default=None)
    automatically_increment_service_quantity: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E("new_task_name", "newTaskName", str),
            E("start_timestamp", "startTimestamp", str),
            E("expire_after_num_hours", "expireAfterNumHours", int),
            E("max_duration_hours", "maxDurationHours", int),
            E("send_report_email", "sendReportEmail", bool),
            E("report_delivery_email_address", "reportDeliveryEmailAddress", str),
            E("abort_on_error", "abortOnError", bool),
            E("abort_error_threshold", "abortErrorThreshold", int),
            E("report_all_users", "reportAllUsers", bool),
            E(
                "automatically_increment_service_quantity",
                "automaticallyIncrementServiceQuantity",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskTerminateRequest(OCIRequest):
    """
    Terminates a service pack migration task that is currently executing.

    Modification is only allowed prior to task execution.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePhoneNumberLookupRequest(OCIRequest):
    """
    Lookup if the given number is defined in the specified service in the service
    provider.

    The response is ``ServiceProviderServicePhoneNumberLookupResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_type: serviceType
        phone_number: phoneNumber
    """

    service_provider_id: str = attr.ib()
    service_type: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_type", "serviceType", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderSessionAdmissionControlGetRequest(OCIRequest):
    """
    Get the session admission control capacity for the service provider.

    The response is either a ``ServiceProviderSessionAdmissionControlGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderSessionAdmissionControlModifyRequest(OCIRequest):
    """
    Request to modify session admission control capacity for the service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        restrict_aggregate_sessions: restrictAggregateSessions
        max_sessions: maxSessions
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        count_intra_service_provider_sessions: countIntraServiceProviderSessions
    """

    service_provider_id: str = attr.ib()
    restrict_aggregate_sessions: bool = attr.ib(default=None)
    max_sessions: int = attr.ib(default=None)
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    count_intra_service_provider_sessions: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("restrict_aggregate_sessions", "restrictAggregateSessions", bool),
            E("max_sessions", "maxSessions", int),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E(
                "count_intra_service_provider_sessions",
                "countIntraServiceProviderSessions",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderSessionAdmissionControlWhiteListGetRequest(OCIRequest):
    """
    Request to get the Service Provider Session Admission White List information.

    The response is either a
    ``ServiceProviderSessionAdmissionControlWhiteListGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderSessionAdmissionControlWhiteListModifyRequest(OCIRequest):
    """
    Modify the Service Provider Session Admission Control White List information.

    The number of digit pattern entries is limited to 100.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        add_match_digit_pattern: addMatchDigitPattern
        delete_match_digit_pattern: deleteMatchDigitPattern
        enable_white_list: enableWhiteList
    """

    service_provider_id: str = attr.ib()
    add_match_digit_pattern: List[str] = attr.ib(default=None)
    delete_match_digit_pattern: List[str] = attr.ib(default=None)
    enable_white_list: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("add_match_digit_pattern", "addMatchDigitPattern", str, is_array=True),
            E(
                "delete_match_digit_pattern",
                "deleteMatchDigitPattern",
                str,
                is_array=True,
            ),
            E("enable_white_list", "enableWhiteList", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderTrunkGroupGetRequest(OCIRequest):
    """
    Get the maximum permissible active Trunk Group calls for the service provider.

    The response is either a ``ServiceProviderTrunkGroupGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderTrunkGroupGetRequest14sp1(OCIRequest):
    """
    Get the maximum and bursting maximum permissible active Trunk Group calls for the
    service provider.

    The response is either a ``ServiceProviderTrunkGroupGetResponse14sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupGetPasscodeRulesRequest(OCIRequest):
    """
    Requests the service provider's voice portal passcode rules setting.

    The response is either
    ``ServiceProviderVoiceMessagingGroupGetPasscodeRulesResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderPortalPasscodeRulesGetRequest()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupGetRequest(OCIRequest):
    """
    Requests the service provider's or enterprise's voice messaging settings.

    The response is either ``ServiceProviderVoiceMessagingGroupGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest(OCIRequest):
    """
    Get the service provider's voice portal branding settings.

    The response is either a
    ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest16(OCIRequest):
    """
    Get the service provider's voice portal branding settings.

    The response is either a
    ``ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupGetVoicePortalRequest(OCIRequest):
    """
    Requests the service provider's or enterprise's voice portal settings.

    The response is either ``ServiceProviderVoiceMessagingGroupGetVoicePortalResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupModifyPasscodeRulesRequest(OCIRequest):
    """
    Request to modify the service provider's voice portal passcode rules setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``ServiceProviderPortalPasscodeRulesModifyRequest()``

    Attributes:
        service_provider_id: serviceProviderId
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
    """

    service_provider_id: str = attr.ib()
    disallow_repeated_digits: bool = attr.ib(default=None)
    disallow_user_number: bool = attr.ib(default=None)
    disallow_reversed_user_number: bool = attr.ib(default=None)
    disallow_old_passcode: bool = attr.ib(default=None)
    disallow_reversed_old_passcode: bool = attr.ib(default=None)
    min_code_length: int = attr.ib(default=None)
    max_code_length: int = attr.ib(default=None)
    disable_login_after_max_failed_login_attempts: bool = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    expire_password: bool = attr.ib(default=None)
    passcode_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("disallow_repeated_digits", "disallowRepeatedDigits", bool),
            E("disallow_user_number", "disallowUserNumber", bool),
            E("disallow_reversed_user_number", "disallowReversedUserNumber", bool),
            E("disallow_old_passcode", "disallowOldPasscode", bool),
            E("disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool),
            E("min_code_length", "minCodeLength", int),
            E("max_code_length", "maxCodeLength", int),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupModifyRequest(OCIRequest):
    """
    Request to modify a service provider's or enterprise's voice messaging settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        delivery_from_address: deliveryFromAddress
        notification_from_address: notificationFromAddress
        voice_portal_lockout_from_address: voicePortalLockoutFromAddress
        use_system_default_delivery_from_address: useSystemDefaultDeliveryFromAddress
        use_system_default_notification_from_address:
            useSystemDefaultNotificationFromAddress
        use_system_default_voice_portal_lockout_from_address:
            useSystemDefaultVoicePortalLockoutFromAddress
    """

    service_provider_id: str = attr.ib()
    delivery_from_address: str = attr.ib(default=None)
    notification_from_address: str = attr.ib(default=None)
    voice_portal_lockout_from_address: str = attr.ib(default=None)
    use_system_default_delivery_from_address: bool = attr.ib(default=None)
    use_system_default_notification_from_address: bool = attr.ib(default=None)
    use_system_default_voice_portal_lockout_from_address: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("delivery_from_address", "deliveryFromAddress", str),
            E("notification_from_address", "notificationFromAddress", str),
            E("voice_portal_lockout_from_address", "voicePortalLockoutFromAddress", str),
            E(
                "use_system_default_delivery_from_address",
                "useSystemDefaultDeliveryFromAddress",
                bool,
            ),
            E(
                "use_system_default_notification_from_address",
                "useSystemDefaultNotificationFromAddress",
                bool,
            ),
            E(
                "use_system_default_voice_portal_lockout_from_address",
                "useSystemDefaultVoicePortalLockoutFromAddress",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupModifyVoicePortalRequest(OCIRequest):
    """
    Request to change the service provider's or enterprise's voice portal settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        voice_portal_scope: voicePortalScope
    """

    service_provider_id: str = attr.ib()
    voice_portal_scope: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("voice_portal_scope", "voicePortalScope", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderZoneCallingRestrictionsGetRequest(OCIRequest):
    """
    Gets the Service Provider/Enterprise level Zone Calling Restrictions Policies.

    The response is ``ServiceProviderZoneCallingRestrictionsGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
    """

    service_provider_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderZoneCallingRestrictionsModifyRequest(OCIRequest):
    """
    Modifies the Service Provider/Enterprise level Zone Calling Restrictions Policies.

    The response is ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enable_zone_calling_restrictions: enableZoneCallingRestrictions
        enable_origination_roaming_restrictions: enableOriginationRoamingRestrictions
        enable_emergency_origination_roaming_restrictions:
            enableEmergencyOriginationRoamingRestrictions
        enable_termination_roaming_restrictions: enableTerminationRoamingRestrictions
    """

    service_provider_id: str = attr.ib()
    enable_zone_calling_restrictions: bool = attr.ib(default=None)
    enable_origination_roaming_restrictions: bool = attr.ib(default=None)
    enable_emergency_origination_roaming_restrictions: bool = attr.ib(default=None)
    enable_termination_roaming_restrictions: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enable_zone_calling_restrictions", "enableZoneCallingRestrictions", bool),
            E(
                "enable_origination_roaming_restrictions",
                "enableOriginationRoamingRestrictions",
                bool,
            ),
            E(
                "enable_emergency_origination_roaming_restrictions",
                "enableEmergencyOriginationRoamingRestrictions",
                bool,
            ),
            E(
                "enable_termination_roaming_restrictions",
                "enableTerminationRoamingRestrictions",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemASRParametersGetRequest(OCIRequest):
    """
    Request to get the list of Application Server Registration system parameters.

    The response is either ``SystemASRParametersGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemASRParametersGetRequest14sp5()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemASRParametersGetRequest14sp5(OCIRequest):
    """
    Request to get the list of Application Server Registration system parameters.

    The response is either ``SystemASRParametersGetResponse14sp5()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemASRParametersGetRequest14sp7(OCIRequest):
    """
    Request to get the list of Application Server Registration system parameters.

    The response is either ``SystemASRParametersGetResponse14sp7()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemASRParametersModifyRequest(OCIRequest):
    """
    Request to modify Application Server Registration system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        max_transmissions: maxTransmissions
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        listening_port: listeningPort
        source_address: sourceAddress
    """

    max_transmissions: int = attr.ib(default=None)
    retransmission_delay_milli_seconds: int = attr.ib(default=None)
    listening_port: int = attr.ib(default=None)
    source_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_transmissions", "maxTransmissions", int),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
            ),
            E("listening_port", "listeningPort", int),
            E("source_address", "sourceAddress", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemASRParametersModifyRequest14sp7(OCIRequest):
    """
    Request to modify Application Server Registration system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        max_transmissions: maxTransmissions
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        listening_port: listeningPort
    """

    max_transmissions: int = attr.ib(default=None)
    retransmission_delay_milli_seconds: int = attr.ib(default=None)
    listening_port: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_transmissions", "maxTransmissions", int),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
            ),
            E("listening_port", "listeningPort", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceCustomTagAddRequest(OCIRequest):
    """
    Request to add a static configuration tag for a system access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        tag_name: tagName
        tag_value: tagValue
    """

    device_name: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceCustomTagDeleteListRequest(OCIRequest):
    """
    Request to delete static configuration tags for a system access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        tag_name: tagName
    """

    device_name: str = attr.ib()
    tag_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceCustomTagGetListRequest(OCIRequest):
    """
    Request to get the list of custom configuration tags managed by the Device Management
    System, on a per-device profile basis.

    The response is either ``SystemAccessDeviceCustomTagGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceCustomTagModifyRequest(OCIRequest):
    """
    Request to modify a static configuration tag for a system access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        tag_name: tagName
        tag_value: tagValue
    """

    device_name: str = attr.ib()
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceDeleteRequest(OCIRequest):
    """
    Request to delete a specified system access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileGetListRequest(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device profile basis.

    The response is either ``SystemAccessDeviceFileGetListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemAccessDeviceFileGetListRequest14sp8()``

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileGetListRequest14sp8(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device profile basis.

    The response is either ``SystemAccessDeviceFileGetListResponse14sp8()`` or
    ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileGetRequest(OCIRequest):
    """
    Request to get a device profile file.

    The response is either ``SystemAccessDeviceFileGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemAccessDeviceFileGetRequest14sp8()``

    Attributes:
        device_name: deviceName
        file_type: fileType
    """

    device_name: str = attr.ib()
    file_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileGetRequest14sp8(OCIRequest):
    """
    Request to get a device profile file.

    The response is either ``SystemAccessDeviceFileGetResponse14sp8()`` or
    ``ErrorResponse()``. Replaced by: ``SystemAccessDeviceFileGetRequest16sp1()``

    Attributes:
        device_name: deviceName
        file_format: fileFormat
    """

    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileGetRequest16sp1(OCIRequest):
    """
    Request to get a device profile file.

    The response is either ``SystemAccessDeviceFileGetResponse16sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        file_format: fileFormat
    """

    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileGetRequest20(OCIRequest):
    """
    Request to get a device profile file.

    The response is either ``SystemAccessDeviceFileGetResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        file_format: fileFormat
    """

    device_name: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetRequest(OCIRequest):
    """
    Requests the configuration of a specified system access device.

    The response is either ``SystemAccessDeviceGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemAccessDeviceGetRequest14sp3()``

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetRequest14sp3(OCIRequest):
    """
    Requests the configuration of a specified system access device.

    The response is either ``SystemAccessDeviceGetResponse14sp3()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemAccessDeviceGetRequest14sp6()``

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetRequest14sp6(OCIRequest):
    """
    Requests the configuration of a specified system access device.

    The response is either ``SystemAccessDeviceGetResponse14sp6()`` or
    ``ErrorResponse()``. Replaced by: ``SystemAccessDeviceGetRequest16()``

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetRequest16(OCIRequest):
    """
    Requests the configuration of a specified system access device.

    The response is either ``SystemAccessDeviceGetResponse16()`` or ``ErrorResponse()``.
    Replaced by: ``SystemAccessDeviceGetRequest19()``

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetRequest18sp1(OCIRequest):
    """
    Requests the configuration of a specified system access device.

    The response is either ``SystemAccessDeviceGetResponse18sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceModifyUserRequest(OCIRequest):
    """
    Request to modify attributes for line/ports assigned on the system device profile.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode and ignored in AS data mode: privateIdentity

    Attributes:
        device_name: deviceName
        line_port: linePort
        private_identity: privateIdentity
        is_primary_line_port: isPrimaryLinePort
    """

    device_name: str = attr.ib()
    line_port: str = attr.ib()
    private_identity: str = attr.ib(default=None)
    is_primary_line_port: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("line_port", "linePort", str, is_required=True),
            E("private_identity", "privateIdentity", str),
            E("is_primary_line_port", "isPrimaryLinePort", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceMonitorAddDeviceTypeRequest(OCIRequest):
    """
    Add a device type to be monitored.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        add_all_device_types: addAllDeviceTypes
        device_type: deviceType
    """

    add_all_device_types: bool = attr.ib(default=None)
    device_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("add_all_device_types", "addAllDeviceTypes", bool),
            E("device_type", "deviceType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceMonitorDeleteDeviceTypeRequest(OCIRequest):
    """
    Remove a device type to be monitored.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        delete_all_device_types: deleteAllDeviceTypes
        device_type: deviceType
    """

    delete_all_device_types: bool = attr.ib(default=None)
    device_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("delete_all_device_types", "deleteAllDeviceTypes", bool),
            E("device_type", "deviceType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceMonitorGetDeviceTypeListRequest(OCIRequest):
    """
    Get a list of monitored device types.

    The response is either a ``SystemAccessDeviceMonitorGetDeviceTypeListResponse()`` or
    an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceMonitorParametersGetRequest(OCIRequest):
    """
    Request to get the list of Access Device Monitor system parameters.

    The response is either ``SystemAccessDeviceMonitorParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceMonitorParametersModifyRequest(OCIRequest):
    """
    Request to modify Access Device Monitor system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        polling_interval_minutes: pollingIntervalMinutes
    """

    polling_interval_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("polling_interval_minutes", "pollingIntervalMinutes", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceResetRequest(OCIRequest):
    """
    Reset a specific system SIP device that supports the reset operation.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceTypeGetEnhancedConfigurableListRequest(OCIRequest):
    """
    Requests the list of device types supporting enhanced configuration.

    The response is either ``SystemAccessDeviceTypeGetEnhancedConfigurableListResponse()``
    or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceTypeGetListRequest(OCIRequest):
    """
    Requests the list of access device types.

    The response is either ``SystemAccessDeviceTypeGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingAddChargingFunctionElementServerRequest(OCIRequest):
    """
    Request to add a ChargingFunctionElement Server to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        address: address
        is_net_address_extended: isNetAddressExtended
        type: type
        description: description
    """

    address: str = attr.ib()
    is_net_address_extended: bool = attr.ib()
    type: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("address", "address", str, is_required=True),
            E("is_net_address_extended", "isNetAddressExtended", bool, is_required=True),
            E("type", "type", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingAddRadiusServerRequest(OCIRequest):
    """
    Request to add a Radius Server to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingDeleteChargingFunctionElementServerRequest(OCIRequest):
    """
    Request to delete a ChargingFunctionElementServer from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        address: address
    """

    address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("address", "address", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingDeleteRadiusServerRequest(OCIRequest):
    """
    Request to delete a Radius Server from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
    """

    net_address: str = attr.ib()
    port: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingGetChargingFunctionElementServerListRequest(OCIRequest):
    """
    Request to get a list of ChargingFunctionElementServers defined in the system.

    The response is either a
    ``SystemAccountingGetChargingFunctionElementServerListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingGetRadiusServerListRequest(OCIRequest):
    """
    Request to get a list of Radius Servers defined in the system.

    The response is either a ``SystemAccountingGetRadiusServerListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingInhibitedAttributeValuePairCodeAddRequest(OCIRequest):
    """
    Add an Attribute Value Pair (AVP) combination to disable.

    The AVP combination includes a diameter AVP and a vendor ID.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        attribute_value_pair_code: attributeValuePairCode
        vendor_id: vendorId
    """

    attribute_value_pair_code: int = attr.ib()
    vendor_id: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "attribute_value_pair_code",
                "attributeValuePairCode",
                int,
                is_required=True,
            ),
            E("vendor_id", "vendorId", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingInhibitedAttributeValuePairCodeDeleteRequest(OCIRequest):
    """
    Remove an Attribute Value Pair (AVP) combination from the list of disabled AVP codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        attribute_value_pair_code: attributeValuePairCode
        vendor_id: vendorId
    """

    attribute_value_pair_code: int = attr.ib()
    vendor_id: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "attribute_value_pair_code",
                "attributeValuePairCode",
                int,
                is_required=True,
            ),
            E("vendor_id", "vendorId", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingInhibitedAttributeValuePairCodeGetListRequest(OCIRequest):
    """
    Get a list of Attribute Value Pair (AVP) combinations that are disabled.

    The response is either a
    ``SystemAccountingInhibitedAttributeValuePairCodeGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingModifyChargingFunctionElementServerRequest(OCIRequest):
    """
    Request to modify a ChargingFunctionElementServer in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        address: address
        type: type
        description: description
    """

    address: str = attr.ib()
    type: str = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("address", "address", str, is_required=True),
            E("type", "type", str),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingModifyRadiusServerRequest(OCIRequest):
    """
    Request to modify a Radius Server in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccountingReorderChargingFunctionElementServerRequest(OCIRequest):
    """
    Reorder the charging function element servers.

    You can not add or delete addresses, only re-ordering the list is allowed.  The
    ordered list of addresses can be obtained with the
    ``SystemAccountingGetChargingFunctionElementServerListRequest()`` command.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        ordered_address_list: orderedAddressList
    """

    ordered_address_list: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "ordered_address_list",
                "orderedAddressList",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdminAddRequest(OCIRequest):
    """
    Add a system or provisioning administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
        admin_type: adminType
        read_only: readOnly
    """

    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib()
    language: str = attr.ib(default=None)
    admin_type: str = attr.ib()
    read_only: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str, is_required=True),
            E("language", "language", str),
            E("admin_type", "adminType", str, is_required=True),
            E("read_only", "readOnly", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdminDeleteRequest(OCIRequest):
    """
    Delete a system or provisioning administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdminGetListRequest(OCIRequest):
    """
    Get a list of system administrators.

    The response is either a ``SystemAdminGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdminGetRequest(OCIRequest):
    """
    Get a system or provisioning administrators profile.

    The response is either a ``SystemAdminGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdminModifyRequest(OCIRequest):
    """
    Modify a system or provisioning administrator.

    Since old password is not specified here, any password rule related to old password
    does not apply.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
    """

    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    language: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str),
            E("language", "language", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeCostInformationSourceAddRequest(OCIRequest):
    """
    Add a cost information source.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        peer_identity: peerIdentity
        priority: priority
    """

    peer_identity: str = attr.ib()
    priority: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("peer_identity", "peerIdentity", str, is_required=True),
            E("priority", "priority", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeCostInformationSourceDeleteRequest(OCIRequest):
    """
    Delete a cost information source.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        peer_identity: peerIdentity
    """

    peer_identity: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("peer_identity", "peerIdentity", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeCostInformationSourceGetListRequest(OCIRequest):
    """
    Get a list of cost information sources.

    The response is either ``SystemAdviceOfChargeCostInformationSourceGetListResponse()``
    or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeCostInformationSourceModifyRequest(OCIRequest):
    """
    Modify a cost information source.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        peer_identity: peerIdentity
        priority: priority
    """

    peer_identity: str = attr.ib()
    priority: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("peer_identity", "peerIdentity", str, is_required=True),
            E("priority", "priority", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeGetRequest(OCIRequest):
    """
    Request to get the list of Advice of Charge system parameters.

    The response is either ``SystemAdviceOfChargeGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeGetRequest19sp1(OCIRequest):
    """
    Request to get the list of Advice of Charge system parameters.

    The response is either ``SystemAdviceOfChargeGetResponse19sp1()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeModifyRequest(OCIRequest):
    """
    Request to modify Advice of Charge system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        delay_between_notification_seconds: delayBetweenNotificationSeconds
        incoming_aoc_handling: incomingAocHandling
        cost_information_source: costInformationSource
    """

    delay_between_notification_seconds: int = attr.ib(default=None)
    incoming_aoc_handling: str = attr.ib(default=None)
    cost_information_source: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
            ),
            E("incoming_aoc_handling", "incomingAocHandling", str),
            E("cost_information_source", "costInformationSource", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAdviceOfChargeModifyRequest19sp1(OCIRequest):
    """
    Request to modify Advice of Charge system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        delay_between_notification_seconds: delayBetweenNotificationSeconds
        incoming_aoc_handling: incomingAocHandling
        use_ocs_enquiry: useOCSEnquiry
        ocs_enquiry_type: OCSEnquiryType
    """

    delay_between_notification_seconds: int = attr.ib(default=None)
    incoming_aoc_handling: str = attr.ib(default=None)
    use_ocs_enquiry: bool = attr.ib(default=None)
    ocs_enquiry_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "delay_between_notification_seconds",
                "delayBetweenNotificationSeconds",
                int,
            ),
            E("incoming_aoc_handling", "incomingAocHandling", str),
            E("use_ocs_enquiry", "useOCSEnquiry", bool),
            E("ocs_enquiry_type", "OCSEnquiryType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAliasAddRequest(OCIRequest):
    """
    Add a system-level Application Server alias to the system.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        alias_net_address: aliasNetAddress
    """

    alias_net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("alias_net_address", "aliasNetAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAliasDeleteRequest(OCIRequest):
    """
    Delete a system-level Application Server alias from the system.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        alias_net_address: aliasNetAddress
    """

    alias_net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("alias_net_address", "aliasNetAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAliasGetListRequest(OCIRequest):
    """
    Requests the list of all system-level Application Server aliases.

    The response is either ``SystemAliasGetListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAnonymousCallRejectionGetRequest(OCIRequest):
    """
    Get Anonymous Call Rejection system parameters.

    The response is either a ``SystemAnonymousCallRejectionGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAnonymousCallRejectionModifyRequest(OCIRequest):
    """
    Modify a system Anonymous Call Rejection parameter.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        pai_required: paiRequired
        screen_only_local_calls: screenOnlyLocalCalls
    """

    pai_required: bool = attr.ib(default=None)
    screen_only_local_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pai_required", "paiRequired", bool),
            E("screen_only_local_calls", "screenOnlyLocalCalls", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemApplicationControllerAddRequest(OCIRequest):
    """
    Add an application controller, which is a server where remote application resides and
    controls the Route Point.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        subscriber_id: subscriberId
        channel_set_id: channelSetId
    """

    name: str = attr.ib()
    subscriber_id: str = attr.ib()
    channel_set_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("subscriber_id", "subscriberId", str, is_required=True),
            E("channel_set_id", "channelSetId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemApplicationControllerDeleteRequest(OCIRequest):
    """
    Delete an application controller.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemApplicationControllerGetListRequest(OCIRequest):
    """
    Get a list of application controllers that are configured for the system.

    The response is either ``SystemApplicationControllerGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAttendantConsoleGetRequest(OCIRequest):
    """
    Request to get the list of Attendant Console parameters.

    The response is either ``SystemAttendantConsoleGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAttendantConsoleModifyRequest(OCIRequest):
    """
    Modify Attendant Console settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        max_monitored_users: maxMonitoredUsers
    """

    max_monitored_users: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_monitored_users", "maxMonitoredUsers", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAuthenticationLockoutExportDataGetRequest(OCIRequest):
    """
    Request to export system wide authentication lockout data to a file.

    All locked out device profiles, sip endpoints, and sip trunk groups are returned.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        file_name: fileName
    """

    file_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_name", "fileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAuthenticationLockoutSettingsGetRequest(OCIRequest):
    """
    Request to get the authentication lockout settings in the system.

    The response is either a ``SystemAuthenticationLockoutSettingsResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAuthenticationLockoutSettingsModifyRequest(OCIRequest):
    """
    Request to modify the system level device password lockout settings The response is
    either ``SuccessResponse()`` or ``ErrorResponse()``.


    Attributes:
        counter_reset_interval_days: counterResetIntervalDays
        counter_reset_hour: counterResetHour
        counter_reset_minute: counterResetMinute
        emergency_sip_bypass_allowed: emergencySIPBypassAllowed
    """

    counter_reset_interval_days: int = attr.ib(default=None)
    counter_reset_hour: int = attr.ib(default=None)
    counter_reset_minute: int = attr.ib(default=None)
    emergency_sip_bypass_allowed: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("counter_reset_interval_days", "counterResetIntervalDays", int),
            E("counter_reset_hour", "counterResetHour", int),
            E("counter_reset_minute", "counterResetMinute", int),
            E("emergency_sip_bypass_allowed", "emergencySIPBypassAllowed", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackAddReleaseCauseListRequest(OCIRequest):
    """
    Adds automatic callback release cause to the releaseCause attribute.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        release_cause: releaseCause
    """

    release_cause: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("release_cause", "releaseCause", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackDeleteReleaseCauseListRequest(OCIRequest):
    """
    Deletes automatic callback release causes from the release cause attribute.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        release_cause: releaseCause
    """

    release_cause: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("release_cause", "releaseCause", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackGetReleaseCauseListRequest(OCIRequest):
    """
    Request the system's automatic callback attributes.

    The response is either a ``SystemAutomaticCallbackGetReleaseCauseListResponse()`` or
    an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackGetRequest(OCIRequest):
    """
    Request the system's automatic callback attributes.

    The response is either a ``SystemAutomaticCallbackGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemAutomaticCallbackGetRequest15()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackGetRequest15(OCIRequest):
    """
    Request the system's automatic callback attributes.

    The response is either a ``SystemAutomaticCallbackGetResponse15()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemAutomaticCallbackGetRequest15sp2()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackGetRequest15sp2(OCIRequest):
    """
    Request the system's automatic callback attributes.

    The response is either a ``SystemAutomaticCallbackGetResponse15sp2()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemAutomaticCallbackGetRequest17()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackGetRequest17(OCIRequest):
    """
    Request the system's automatic callback attributes.

    The response is either a ``SystemAutomaticCallbackGetResponse17()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackModifyRequest(OCIRequest):
    """
    Modifies the system's automatic callback attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``SystemAutomaticCallbackModifyRequest15()``

    Attributes:
        monitor_minutes: monitorMinutes
        wait_between_retry_originator_minutes: waitBetweenRetryOriginatorMinutes
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_callback_rings: maxCallbackRings
        max_retry_originator_minutes: maxRetryOriginatorMinutes
    """

    monitor_minutes: int = attr.ib(default=None)
    wait_between_retry_originator_minutes: int = attr.ib(default=None)
    max_monitors_per_originator: int = attr.ib(default=None)
    max_callback_rings: int = attr.ib(default=None)
    max_retry_originator_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("monitor_minutes", "monitorMinutes", int),
            E(
                "wait_between_retry_originator_minutes",
                "waitBetweenRetryOriginatorMinutes",
                int,
            ),
            E("max_monitors_per_originator", "maxMonitorsPerOriginator", int),
            E("max_callback_rings", "maxCallbackRings", int),
            E("max_retry_originator_minutes", "maxRetryOriginatorMinutes", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAutomaticCallbackModifyRequest15(OCIRequest):
    """
    Modifies the system's automatic callback attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        monitor_minutes: monitorMinutes
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_callback_rings: maxCallbackRings
        max_monitors_per_terminator: maxMonitorsPerTerminator
        terminator_idle_guard_seconds: terminatorIdleGuardSeconds
        callback_method: callbackMethod
        polling_interval_seconds: pollingIntervalSeconds
        activation_digit: activationDigit
    """

    monitor_minutes: int = attr.ib(default=None)
    max_monitors_per_originator: int = attr.ib(default=None)
    max_callback_rings: int = attr.ib(default=None)
    max_monitors_per_terminator: int = attr.ib(default=None)
    terminator_idle_guard_seconds: int = attr.ib(default=None)
    callback_method: str = attr.ib(default=None)
    polling_interval_seconds: int = attr.ib(default=None)
    activation_digit: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("monitor_minutes", "monitorMinutes", int),
            E("max_monitors_per_originator", "maxMonitorsPerOriginator", int),
            E("max_callback_rings", "maxCallbackRings", int),
            E("max_monitors_per_terminator", "maxMonitorsPerTerminator", int),
            E("terminator_idle_guard_seconds", "terminatorIdleGuardSeconds", int),
            E("callback_method", "callbackMethod", str),
            E("polling_interval_seconds", "pollingIntervalSeconds", int),
            E("activation_digit", "activationDigit", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBCCTAddOCIInterfaceAddressRequest(OCIRequest):
    """
    Add an OCI entry to the Broadworks Common Communication Transport (BCCT) protocol to
    interface mapping table.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        interface_net_address: interfaceNetAddress
    """

    interface_net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("interface_net_address", "interfaceNetAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBCCTDeleteOCIInterfaceAddressRequest(OCIRequest):
    """
    Delete an OCI entry in the Broadworks Common Communication Transport (BCCT) protocol
    to interface mapping table.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        interface_net_address: interfaceNetAddress
    """

    interface_net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("interface_net_address", "interfaceNetAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBCCTGetOCIInterfaceAddressListRequest(OCIRequest):
    """
    Get the OCI entries from the Broadworks Common Communication Transport (BCCT) protocol
    to interface mapping list.

    The response is ``SystemBCCTGetOCIInterfaceAddressListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadCloudGetRequest(OCIRequest):
    """
    Get the system interface attributes for Messaging Server.

    The response is either ``SystemBroadCloudGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadCloudModifyRequest(OCIRequest):
    """
    Modify the system interface attributes for Messaging Server.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        provisioning_url: provisioningUrl
        provisioning_user_id: provisioningUserId
        provisioning_password: provisioningPassword
        enable_synchronization: enableSynchronization
    """

    provisioning_url: str = attr.ib(default=None)
    provisioning_user_id: str = attr.ib(default=None)
    provisioning_password: str = attr.ib(default=None)
    enable_synchronization: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("provisioning_url", "provisioningUrl", str),
            E("provisioning_user_id", "provisioningUserId", str),
            E("provisioning_password", "provisioningPassword", str),
            E("enable_synchronization", "enableSynchronization", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobileManagerGetRequest(OCIRequest):
    """
    Get the BroadWorks Mobile Manager service system settings.

    The response is either ``SystemBroadWorksMobileManagerGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobileManagerModifyRequest(OCIRequest):
    """
    Modify the BroadWorks Mobile Manager service system settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        scf_api_net_address1: scfApiNetAddress1
        scf_api_net_address2: scfApiNetAddress2
        user_name: userName
        password: password
        email_from_address: emailFromAddress
        scf_ims_only: scfIMSOnly
        signaling_ip_address: signalingIPAddress
        signaling_port: signalingPort
    """

    scf_api_net_address1: str = attr.ib(default=None)
    scf_api_net_address2: str = attr.ib(default=None)
    user_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    email_from_address: str = attr.ib(default=None)
    scf_ims_only: bool = attr.ib(default=None)
    signaling_ip_address: str = attr.ib(default=None)
    signaling_port: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("scf_api_net_address1", "scfApiNetAddress1", str),
            E("scf_api_net_address2", "scfApiNetAddress2", str),
            E("user_name", "userName", str),
            E("password", "password", str),
            E("email_from_address", "emailFromAddress", str),
            E("scf_ims_only", "scfIMSOnly", bool),
            E("signaling_ip_address", "signalingIPAddress", str),
            E("signaling_port", "signalingPort", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityDeleteIMRNListRequest(OCIRequest):
    """
    Removes a BroadWorks Mobility IMRN number from the system.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        imrn_number: imrnNumber
    """

    imrn_number: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("imrn_number", "imrnNumber", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityDeleteMobileNetworkIMRNListRequest(OCIRequest):
    """
    Remove BroadWorks Mobility IMRN numbers from a Mobile Network.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        mobile_network_name: mobileNetworkName
        imrn_number: imrnNumber
    """

    mobile_network_name: str = attr.ib()
    imrn_number: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mobile_network_name", "mobileNetworkName", str, is_required=True),
            E("imrn_number", "imrnNumber", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityGetRequest(OCIRequest):
    """
    Get the broadworks mobility system parameters.

    The response is either a ``SystemBroadWorksMobilityGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemBroadWorksMobilityGetRequest17sp4()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityGetRequest17sp4(OCIRequest):
    """
    Get the broadworks mobility system parameters.

    The response is either a ``SystemBroadWorksMobilityGetResponse17sp4()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemBroadWorksMobilityGetRequest19sp1()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityGetRequest19sp1(OCIRequest):
    """
    Get the broadworks mobility system parameters.

    The response is either a ``SystemBroadWorksMobilityGetResponse19sp1()`` or an
    ``ErrorResponse()``. Replaced by ``SystemBroadWorksMobilityGetRequest21()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityGetRequest21(OCIRequest):
    """
    Get the broadworks mobility system parameters.

    The response is either a ``SystemBroadWorksMobilityGetResponse21()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityMobileNetworkAddRequest(OCIRequest):
    """
    Add a Mobile Network.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
        scf_signaling_net_address: scfSignalingNetAddress
        scf_signaling_port: scfSignalingPort
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
        enable_announcement_suppression: enableAnnouncementSuppression
        service_access_code_list_name: serviceAccessCodeListName
    """

    name: str = attr.ib()
    scf_signaling_net_address: str = attr.ib(default=None)
    scf_signaling_port: int = attr.ib(default=None)
    refresh_period_seconds: int = attr.ib()
    max_consecutive_failures: int = attr.ib()
    max_response_wait_time_milliseconds: int = attr.ib()
    enable_announcement_suppression: bool = attr.ib()
    service_access_code_list_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("scf_signaling_net_address", "scfSignalingNetAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
            E("refresh_period_seconds", "refreshPeriodSeconds", int, is_required=True),
            E(
                "max_consecutive_failures",
                "maxConsecutiveFailures",
                int,
                is_required=True,
            ),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
                is_required=True,
            ),
            E(
                "enable_announcement_suppression",
                "enableAnnouncementSuppression",
                bool,
                is_required=True,
            ),
            E("service_access_code_list_name", "serviceAccessCodeListName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityMobileNetworkDeleteRequest(OCIRequest):
    """
    Delete a Mobile Network.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityMobileNetworkGetListRequest(OCIRequest):
    """
    Get the list of Mobile Networks.

    The response is either ``SystemBroadWorksMobilityMobileNetworkGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityMobileNetworkGetRequest(OCIRequest):
    """
    Get a Mobile Network.

    The response is either ``SystemBroadWorksMobilityMobileNetworkGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityMobileNetworkModifyRequest(OCIRequest):
    """
    Modify a Mobile Network.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        scf_signaling_net_address: scfSignalingNetAddress
        scf_signaling_port: scfSignalingPort
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
        enable_announcement_suppression: enableAnnouncementSuppression
        service_access_code_list_name: serviceAccessCodeListName
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    scf_signaling_net_address: str = attr.ib(default=None)
    scf_signaling_port: int = attr.ib(default=None)
    refresh_period_seconds: int = attr.ib(default=None)
    max_consecutive_failures: int = attr.ib(default=None)
    max_response_wait_time_milliseconds: int = attr.ib(default=None)
    enable_announcement_suppression: bool = attr.ib(default=None)
    service_access_code_list_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("scf_signaling_net_address", "scfSignalingNetAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
            E("refresh_period_seconds", "refreshPeriodSeconds", int),
            E("max_consecutive_failures", "maxConsecutiveFailures", int),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
            ),
            E("enable_announcement_suppression", "enableAnnouncementSuppression", bool),
            E("service_access_code_list_name", "serviceAccessCodeListName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityModifyRequest(OCIRequest):
    """
    Modify the BroadWorks Mobility system parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``SystemBroadWorksMobilityModifyRequest17sp4()``.

    Attributes:
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        imrn_timeout_milliseconds: imrnTimeoutMilliseconds
        scf_signaling_ip_address: scfSignalingIPAddress
        scf_signaling_port: scfSignalingPort
    """

    enable_location_services: bool = attr.ib(default=None)
    enable_msrn_lookup: bool = attr.ib(default=None)
    enable_mobile_state_checking: bool = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)
    imrn_timeout_milliseconds: int = attr.ib(default=None)
    scf_signaling_ip_address: str = attr.ib(default=None)
    scf_signaling_port: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_location_services", "enableLocationServices", bool),
            E("enable_msrn_lookup", "enableMSRNLookup", bool),
            E("enable_mobile_state_checking", "enableMobileStateChecking", bool),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
            E("imrn_timeout_milliseconds", "imrnTimeoutMilliseconds", int),
            E("scf_signaling_ip_address", "scfSignalingIPAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityModifyRequest17sp4(OCIRequest):
    """
    Modify the BroadWorks Mobility system parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``SystemBroadWorksMobilityModifyRequest21()``.

    Attributes:
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        imrn_timeout_milliseconds: imrnTimeoutMilliseconds
        scf_signaling_net_address: scfSignalingNetAddress
        scf_signaling_port: scfSignalingPort
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
        enable_announcement_suppression: enableAnnouncementSuppression
    """

    enable_location_services: bool = attr.ib(default=None)
    enable_msrn_lookup: bool = attr.ib(default=None)
    enable_mobile_state_checking: bool = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)
    imrn_timeout_milliseconds: int = attr.ib(default=None)
    scf_signaling_net_address: str = attr.ib(default=None)
    scf_signaling_port: int = attr.ib(default=None)
    refresh_period_seconds: int = attr.ib(default=None)
    max_consecutive_failures: int = attr.ib(default=None)
    max_response_wait_time_milliseconds: int = attr.ib(default=None)
    enable_announcement_suppression: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_location_services", "enableLocationServices", bool),
            E("enable_msrn_lookup", "enableMSRNLookup", bool),
            E("enable_mobile_state_checking", "enableMobileStateChecking", bool),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
            E("imrn_timeout_milliseconds", "imrnTimeoutMilliseconds", int),
            E("scf_signaling_net_address", "scfSignalingNetAddress", str),
            E("scf_signaling_port", "scfSignalingPort", int),
            E("refresh_period_seconds", "refreshPeriodSeconds", int),
            E("max_consecutive_failures", "maxConsecutiveFailures", int),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
            ),
            E("enable_announcement_suppression", "enableAnnouncementSuppression", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityModifyRequest21(OCIRequest):
    """
    Modify the BroadWorks Mobility system parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        enable_location_services: enableLocationServices
        enable_msrn_lookup: enableMSRNLookup
        enable_mobile_state_checking: enableMobileStateChecking
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        imrn_timeout_milliseconds: imrnTimeoutMilliseconds
    """

    enable_location_services: bool = attr.ib(default=None)
    enable_msrn_lookup: bool = attr.ib(default=None)
    enable_mobile_state_checking: bool = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)
    imrn_timeout_milliseconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_location_services", "enableLocationServices", bool),
            E("enable_msrn_lookup", "enableMSRNLookup", bool),
            E("enable_mobile_state_checking", "enableMobileStateChecking", bool),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
            E("imrn_timeout_milliseconds", "imrnTimeoutMilliseconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeAddRequest(OCIRequest):
    """
    Add a system service access code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by
    ``SystemBroadWorksMobilityServiceAccessCodeAddRequest21()``.

    Attributes:
        service_access_code: serviceAccessCode
        country_code: countryCode
        description: description
    """

    service_access_code: str = attr.ib()
    country_code: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_access_code", "serviceAccessCode", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeAddRequest21(OCIRequest):
    """
    Add a service access code to a list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_access_code_list_name: serviceAccessCodeListName
        country_code: countryCode
        service_access_code: serviceAccessCode
        description: description
    """

    service_access_code_list_name: str = attr.ib()
    country_code: str = attr.ib()
    service_access_code: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_access_code_list_name",
                "serviceAccessCodeListName",
                str,
                is_required=True,
            ),
            E("country_code", "countryCode", str, is_required=True),
            E("service_access_code", "serviceAccessCode", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeDeleteRequest(OCIRequest):
    """
    Delete a system service access code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by
    ``SystemBroadWorksMobilityServiceAccessCodeDeleteRequest21()``.

    Attributes:
        country_code: countryCode
        service_access_code: serviceAccessCode
    """

    country_code: str = attr.ib()
    service_access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("service_access_code", "serviceAccessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeDeleteRequest21(OCIRequest):
    """
    Delete a service access code from a list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_access_code_list_name: serviceAccessCodeListName
        country_code: countryCode
        service_access_code: serviceAccessCode
    """

    service_access_code_list_name: str = attr.ib()
    country_code: str = attr.ib()
    service_access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_access_code_list_name",
                "serviceAccessCodeListName",
                str,
                is_required=True,
            ),
            E("country_code", "countryCode", str, is_required=True),
            E("service_access_code", "serviceAccessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeGetListRequest(OCIRequest):
    """
    Get a list of system service access codes.

    The response is either ``SystemBroadWorksMobilityServiceAccessCodeGetListResponse()``
    or ``ErrorResponse()``. Replaced by
    ``SystemBroadWorksMobilityServiceAccessCodeGetListRequest21()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeGetListRequest21(OCIRequest):
    """
    Get a list of system service access codes.

    The response is either
    ``SystemBroadWorksMobilityServiceAccessCodeGetListResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        service_access_code_list_name: serviceAccessCodeListName
    """

    service_access_code_list_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_access_code_list_name",
                "serviceAccessCodeListName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeListAddRequest(OCIRequest):
    """
    Add a Service Access Code list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeListDeleteRequest(OCIRequest):
    """
    Delete a Service Access Code list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeListGetListRequest(OCIRequest):
    """
    Get the list of Service Access Code lists.

    The response is either
    ``SystemBroadWorksMobilityServiceAccessCodeListGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeListModifyRequest(OCIRequest):
    """
    Modify a Service Access Code list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeListUsageGetRequest(OCIRequest):
    """
    Get all the Mobile Networks using a given Service Access Code list.

    The response is either
    ``SystemBroadWorksMobilityServiceAccessCodeListUsageGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_access_code_list_name: serviceAccessCodeListName
    """

    service_access_code_list_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_access_code_list_name",
                "serviceAccessCodeListName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeModifyRequest(OCIRequest):
    """
    Modify a system service access code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by
    ``SystemBroadWorksMobilityServiceAccessCodeModifyRequest21()``.

    Attributes:
        country_code: countryCode
        service_access_code: serviceAccessCode
        description: description
    """

    country_code: str = attr.ib()
    service_access_code: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("service_access_code", "serviceAccessCode", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityServiceAccessCodeModifyRequest21(OCIRequest):
    """
    Modify a service access code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_access_code_list_name: serviceAccessCodeListName
        country_code: countryCode
        service_access_code: serviceAccessCode
        description: description
    """

    service_access_code_list_name: str = attr.ib()
    country_code: str = attr.ib()
    service_access_code: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_access_code_list_name",
                "serviceAccessCodeListName",
                str,
                is_required=True,
            ),
            E("country_code", "countryCode", str, is_required=True),
            E("service_access_code", "serviceAccessCode", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksReceptionistEnterpriseGetRequest(OCIRequest):
    """
    Request to get the list of BroadWorks Receptionist - Enterprise parameters.

    The response is either ``SystemBroadWorksReceptionistEnterpriseGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksReceptionistEnterpriseModifyRequest(OCIRequest):
    """
    Request to modify BroadWorks Receptionist - Enterprise settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        max_monitored_users: maxMonitoredUsers
    """

    max_monitored_users: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_monitored_users", "maxMonitoredUsers", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBusyLampFieldGetRequest(OCIRequest):
    """
    Request the system level data associated with the Busy Lamp Field service.

    The response is either a ``SystemBusyLampFieldGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBusyLampFieldGetRequest18(OCIRequest):
    """
    Request the system level data associated with the Busy Lamp Field service.

    The response is either a ``SystemBusyLampFieldGetResponse18()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBusyLampFieldModifyRequest(OCIRequest):
    """
    Modify the system level data associated with the Busy Lamp Field Service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: forceUseOfTCP

    Attributes:
        display_local_user_identity_last_name_first: displayLocalUserIdentityLastNameFirst
        force_use_of_tcp: forceUseOfTCP
    """

    display_local_user_identity_last_name_first: bool = attr.ib(default=None)
    force_use_of_tcp: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "display_local_user_identity_last_name_first",
                "displayLocalUserIdentityLastNameFirst",
                bool,
            ),
            E("force_use_of_tcp", "forceUseOfTCP", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterBaseDataGetRequest(OCIRequest):
    """
    Requests the list of System Diameter base parameters.

    The response is either ``SystemBwDiameterBaseDataGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterBaseDataGetRequest17sp3(OCIRequest):
    """
    Requests the list of System Diameter base parameters.

    The response is either ``SystemBwDiameterBaseDataGetResponse17sp3()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterBaseDataModifyRequest(OCIRequest):
    """
    Modifies the System Diameter base parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        xs_realm: xsRealm
        xs_listening_port: xsListeningPort
        ps_realm: psRealm
        ps_listening_port: psListeningPort
        ps_relay_through_xs: psRelayThroughXs
        xs_relay_listening_port: xsRelayListeningPort
        tc_timer_seconds: tcTimerSeconds
        tw_timer_seconds: twTimerSeconds
        request_timer_seconds: requestTimerSeconds
        busy_peer_detection_outstanding_txn_count: busyPeerDetectionOutstandingTxnCount
        busy_peer_restore_outstanding_txn_count: busyPeerRestoreOutstandingTxnCount
        dynamic_entry_inactivity_timer_hours: dynamicEntryInactivityTimerHours
        advertised_offline_billing_application: advertisedOfflineBillingApplication
        advertised_online_billing_application: advertisedOnlineBillingApplication
    """

    xs_realm: str = attr.ib(default=None)
    xs_listening_port: int = attr.ib(default=None)
    ps_realm: str = attr.ib(default=None)
    ps_listening_port: int = attr.ib(default=None)
    ps_relay_through_xs: bool = attr.ib(default=None)
    xs_relay_listening_port: int = attr.ib(default=None)
    tc_timer_seconds: int = attr.ib(default=None)
    tw_timer_seconds: int = attr.ib(default=None)
    request_timer_seconds: int = attr.ib(default=None)
    busy_peer_detection_outstanding_txn_count: int = attr.ib(default=None)
    busy_peer_restore_outstanding_txn_count: int = attr.ib(default=None)
    dynamic_entry_inactivity_timer_hours: int = attr.ib(default=None)
    advertised_offline_billing_application: str = attr.ib(default=None)
    advertised_online_billing_application: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("xs_realm", "xsRealm", str),
            E("xs_listening_port", "xsListeningPort", int),
            E("ps_realm", "psRealm", str),
            E("ps_listening_port", "psListeningPort", int),
            E("ps_relay_through_xs", "psRelayThroughXs", bool),
            E("xs_relay_listening_port", "xsRelayListeningPort", int),
            E("tc_timer_seconds", "tcTimerSeconds", int),
            E("tw_timer_seconds", "twTimerSeconds", int),
            E("request_timer_seconds", "requestTimerSeconds", int),
            E(
                "busy_peer_detection_outstanding_txn_count",
                "busyPeerDetectionOutstandingTxnCount",
                int,
            ),
            E(
                "busy_peer_restore_outstanding_txn_count",
                "busyPeerRestoreOutstandingTxnCount",
                int,
            ),
            E(
                "dynamic_entry_inactivity_timer_hours",
                "dynamicEntryInactivityTimerHours",
                int,
            ),
            E(
                "advertised_offline_billing_application",
                "advertisedOfflineBillingApplication",
                str,
            ),
            E(
                "advertised_online_billing_application",
                "advertisedOnlineBillingApplication",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterPeerAddRequest(OCIRequest):
    """
    Add a static entry in the Diameter Peer Table.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        identity: identity
        ip_address: ipAddress
        port: port
        enabled: enabled
    """

    instance: str = attr.ib()
    identity: str = attr.ib()
    ip_address: str = attr.ib(default=None)
    port: int = attr.ib()
    enabled: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("identity", "identity", str, is_required=True),
            E("ip_address", "ipAddress", str),
            E("port", "port", int, is_required=True),
            E("enabled", "enabled", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterPeerDeleteRequest(OCIRequest):
    """
    Remove a Diameter peer.

    A peer cannot be removed if is referenced by a Realm Routing Table entry.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        identity: identity
    """

    instance: str = attr.ib()
    identity: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("identity", "identity", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterPeerGetListRequest(OCIRequest):
    """
    Requests the list of Diameter peers.

    The response is either ``SystemBwDiameterPeerGetListResponse()`` or
    ``ErrorResponse()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterPeerModifyRequest(OCIRequest):
    """
    Modifies the attributes of an entry in the Diameter Peer Table.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        identity: identity
        ip_address: ipAddress
        port: port
        enabled: enabled
    """

    instance: str = attr.ib()
    identity: str = attr.ib()
    ip_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("identity", "identity", str, is_required=True),
            E("ip_address", "ipAddress", str),
            E("port", "port", int),
            E("enabled", "enabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingPeerAddRequest(OCIRequest):
    """
    Add a Diameter routing peer.

    The realm must refer to a Diameter routing realm whose action is relay.  The
    destinationPeerIdentity must refer to an existing Diameter peer whose mode is active.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        realm: realm
        application_id: applicationId
        identity: identity
        priority: priority
        weight: weight
    """

    instance: str = attr.ib()
    realm: str = attr.ib()
    application_id: str = attr.ib()
    identity: str = attr.ib()
    priority: int = attr.ib()
    weight: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("realm", "realm", str, is_required=True),
            E("application_id", "applicationId", str, is_required=True),
            E("identity", "identity", str, is_required=True),
            E("priority", "priority", int, is_required=True),
            E("weight", "weight", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingPeerDeleteRequest(OCIRequest):
    """
    Remove a Diameter routing peer.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        realm: realm
        application_id: applicationId
        identity: identity
    """

    instance: str = attr.ib()
    realm: str = attr.ib()
    application_id: str = attr.ib()
    identity: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("realm", "realm", str, is_required=True),
            E("application_id", "applicationId", str, is_required=True),
            E("identity", "identity", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingPeerGetListRequest(OCIRequest):
    """
    Requests the list of Diameter routing peers associated with the specified realm.

    The response is either ``SystemBwDiameterRoutingPeerGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingPeerModifyRequest(OCIRequest):
    """
    Modify a Diameter routing peer.

    The realm must refer to a Diameter routing realm whose action is relay.  The
    destinationPeerIdentity must refer to an existing Diameter peer whose mode is active.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        realm: realm
        application_id: applicationId
        identity: identity
        priority: priority
        weight: weight
    """

    instance: str = attr.ib()
    realm: str = attr.ib()
    application_id: str = attr.ib()
    identity: str = attr.ib()
    priority: int = attr.ib(default=None)
    weight: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("realm", "realm", str, is_required=True),
            E("application_id", "applicationId", str, is_required=True),
            E("identity", "identity", str, is_required=True),
            E("priority", "priority", int),
            E("weight", "weight", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingRealmAddRequest(OCIRequest):
    """
    Add a static entry in the Realm Routing Table.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        realm: realm
        application_id: applicationId
        default: default
    """

    instance: str = attr.ib()
    realm: str = attr.ib()
    application_id: str = attr.ib()
    default: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("realm", "realm", str, is_required=True),
            E("application_id", "applicationId", str, is_required=True),
            E("default", "default", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingRealmDeleteRequest(OCIRequest):
    """
    Delete a static entry in the Realm Routing Table.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        realm: realm
        application_id: applicationId
    """

    instance: str = attr.ib()
    realm: str = attr.ib()
    application_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("realm", "realm", str, is_required=True),
            E("application_id", "applicationId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingRealmGetListRequest(OCIRequest):
    """
    Requests the list of Diameter routing realms.

    The response is either ``SystemBwDiameterRoutingRealmGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBwDiameterRoutingRealmModifyRequest(OCIRequest):
    """
    Modify a static entry in the Realm Routing Table.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        instance: instance
        realm: realm
        application_id: applicationId
        default: default
    """

    instance: str = attr.ib()
    realm: str = attr.ib()
    application_id: str = attr.ib()
    default: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("instance", "instance", str, is_required=True),
            E("realm", "realm", str, is_required=True),
            E("application_id", "applicationId", str, is_required=True),
            E("default", "default", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPAddACLEntryRequest14(OCIRequest):
    """
    Add an entry to the CAP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the CAP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPGetACLListRequest14(OCIRequest):
    """
    Get the CAP access control list.

    The response is either ``SystemCAPGetACLListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPModifyACLEntryRequest14(OCIRequest):
    """
    Modify an entry from the CAP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPParametersGetRequest(OCIRequest):
    """
    Request to get the list of CAP system parameters.

    The response is either ``SystemCAPParametersGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemCAPParametersGetRequest14sp3()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPParametersGetRequest14sp3(OCIRequest):
    """
    Request to get the list of CAP system parameters.

    The response is either ``SystemCAPParametersGetResponse14sp3()`` or
    ``ErrorResponse()``. Replaced by ``SystemCAPParametersGetRequest19()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPParametersGetRequest19(OCIRequest):
    """
    Request to get the list of CAP system parameters.

    The response is either ``SystemCAPParametersGetResponse19()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPParametersModifyRequest(OCIRequest):
    """
    Request to modify CAP system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by
    ``SystemCAPParametersModifyRequest19()``

    Attributes:
        server_port: serverPort
        max_client_connections: maxClientConnections
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_minutes: connectionPingIntervalMinutes
        ccc2_server_port: CCC2ServerPort
        ccc2_max_client_connections: CCC2MaxClientConnections
        cap_server_call_center_port: capServerCallCenterPort
        cap_server_call_center_max_client_connections:
            capServerCallCenterMaxClientConnections
    """

    server_port: int = attr.ib(default=None)
    max_client_connections: int = attr.ib(default=None)
    enable_connection_ping: bool = attr.ib(default=None)
    connection_ping_interval_minutes: int = attr.ib(default=None)
    ccc2_server_port: int = attr.ib(default=None)
    ccc2_max_client_connections: int = attr.ib(default=None)
    cap_server_call_center_port: int = attr.ib(default=None)
    cap_server_call_center_max_client_connections: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int),
            E("max_client_connections", "maxClientConnections", int),
            E("enable_connection_ping", "enableConnectionPing", bool),
            E("connection_ping_interval_minutes", "connectionPingIntervalMinutes", int),
            E("ccc2_server_port", "CCC2ServerPort", int),
            E("ccc2_max_client_connections", "CCC2MaxClientConnections", int),
            E("cap_server_call_center_port", "capServerCallCenterPort", int),
            E(
                "cap_server_call_center_max_client_connections",
                "capServerCallCenterMaxClientConnections",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCAPParametersModifyRequest19(OCIRequest):
    """
    Request to modify CAP system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        server_port: serverPort
        max_client_connections: maxClientConnections
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_minutes: connectionPingIntervalMinutes
        ccc2_server_port: CCC2ServerPort
        ccc2_max_client_connections: CCC2MaxClientConnections
    """

    server_port: int = attr.ib(default=None)
    max_client_connections: int = attr.ib(default=None)
    enable_connection_ping: bool = attr.ib(default=None)
    connection_ping_interval_minutes: int = attr.ib(default=None)
    ccc2_server_port: int = attr.ib(default=None)
    ccc2_max_client_connections: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int),
            E("max_client_connections", "maxClientConnections", int),
            E("enable_connection_ping", "enableConnectionPing", bool),
            E("connection_ping_interval_minutes", "connectionPingIntervalMinutes", int),
            E("ccc2_server_port", "CCC2ServerPort", int),
            E("ccc2_max_client_connections", "CCC2MaxClientConnections", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigAddFileServerRequest(OCIRequest):
    """
    Add a device CPE config file server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemCPEConfigAddFileServerRequest14sp6()``

    Attributes:
        device_type: deviceType
        ftp_host_net_address: ftpHostNetAddress
        ftp_user_id: ftpUserId
        ftp_user_password: ftpUserPassword
        cpe_file_directory: cpeFileDirectory
        passive_ftp: passiveFTP
    """

    device_type: str = attr.ib()
    ftp_host_net_address: str = attr.ib()
    ftp_user_id: str = attr.ib()
    ftp_user_password: str = attr.ib()
    cpe_file_directory: str = attr.ib(default=None)
    passive_ftp: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("ftp_host_net_address", "ftpHostNetAddress", str, is_required=True),
            E("ftp_user_id", "ftpUserId", str, is_required=True),
            E("ftp_user_password", "ftpUserPassword", str, is_required=True),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E("passive_ftp", "passiveFTP", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigAddFileServerRequest14sp6(OCIRequest):
    """
    Add a device CPE config file server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_repository_name: fileRepositoryName
        cpe_file_directory: cpeFileDirectory
        extended_capture_file_repository_name: extendedCaptureFileRepositoryName
    """

    device_type: str = attr.ib()
    file_repository_name: str = attr.ib()
    cpe_file_directory: str = attr.ib(default=None)
    extended_capture_file_repository_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E(
                "extended_capture_file_repository_name",
                "extendedCaptureFileRepositoryName",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigDeleteFileServerRequest(OCIRequest):
    """
    Delete a device CPE config file server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigGetFileServerListRequest(OCIRequest):
    """
    Requests the list of device CPE config file servers.

    The response is either ``SystemCPEConfigGetFileServerListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemCPEConfigGetFileServerListRequest14sp6()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigGetFileServerListRequest14sp6(OCIRequest):
    """
    Requests the list of device CPE config file servers.

    The response is either ``SystemCPEConfigGetFileServerListResponse14sp6()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigModifyFileServerRequest(OCIRequest):
    """
    Modify a device CPE config file server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemCPEConfigModifyFileServerRequest14sp6()``

    Attributes:
        device_type: deviceType
        ftp_host_net_address: ftpHostNetAddress
        ftp_user_id: ftpUserId
        ftp_user_password: ftpUserPassword
        cpe_file_directory: cpeFileDirectory
        passive_ftp: passiveFTP
    """

    device_type: str = attr.ib()
    ftp_host_net_address: str = attr.ib(default=None)
    ftp_user_id: str = attr.ib(default=None)
    ftp_user_password: str = attr.ib(default=None)
    cpe_file_directory: str = attr.ib(default=None)
    passive_ftp: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("ftp_host_net_address", "ftpHostNetAddress", str),
            E("ftp_user_id", "ftpUserId", str),
            E("ftp_user_password", "ftpUserPassword", str),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E("passive_ftp", "passiveFTP", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigModifyFileServerRequest14sp6(OCIRequest):
    """
    Modify a device CPE config file server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_repository_name: fileRepositoryName
        cpe_file_directory: cpeFileDirectory
        extended_capture_file_repository_name: extendedCaptureFileRepositoryName
    """

    device_type: str = attr.ib()
    file_repository_name: str = attr.ib(default=None)
    cpe_file_directory: str = attr.ib(default=None)
    extended_capture_file_repository_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_repository_name", "fileRepositoryName", str),
            E("cpe_file_directory", "cpeFileDirectory", str),
            E(
                "extended_capture_file_repository_name",
                "extendedCaptureFileRepositoryName",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigParametersGetRequest(OCIRequest):
    """
    Request to get the list of CPE Config system parameters.

    The response is either ``SystemCPEConfigParametersGetResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemCPEConfigParametersGetRequest14sp6()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigParametersGetRequest14sp6(OCIRequest):
    """
    Request to get the list of CPE Config system parameters.

    The response is either ``SystemCPEConfigParametersGetResponse14sp6()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigParametersGetRequest20(OCIRequest):
    """
    Request to get the list of CPE Config system parameters.

    The response is either ``SystemCPEConfigParametersGetResponse20()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigParametersGetRequest21(OCIRequest):
    """
    Request to get the list of CPE Config system parameters.

    The response is either ``SystemCPEConfigParametersGetResponse21()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigParametersModifyRequest(OCIRequest):
    """
    Request to modify CPE Config system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        enable_ip_device_management: enableIPDeviceManagement
        ftp_connect_timeout_seconds: ftpConnectTimeoutSeconds
        ftp_file_transfer_timeout_seconds: ftpFileTransferTimeoutSeconds
        pause_between_file_rebuild_milliseconds: pauseBetweenFileRebuildMilliseconds
        max_busy_time_minutes: maxBusyTimeMinutes
        device_access_app_server_cluster_name: deviceAccessAppServerClusterName
        file_rebuild_immediate: fileRebuildImmediate
        file_rebuild_daily: fileRebuildDaily
        file_rebuild_hourly: fileRebuildHourly
    """

    enable_ip_device_management: bool = attr.ib(default=None)
    ftp_connect_timeout_seconds: int = attr.ib(default=None)
    ftp_file_transfer_timeout_seconds: int = attr.ib(default=None)
    pause_between_file_rebuild_milliseconds: int = attr.ib(default=None)
    max_busy_time_minutes: int = attr.ib(default=None)
    device_access_app_server_cluster_name: str = attr.ib(default=None)
    file_rebuild_immediate: str = attr.ib(default=None)
    file_rebuild_daily: str = attr.ib(default=None)
    file_rebuild_hourly: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_ip_device_management", "enableIPDeviceManagement", bool),
            E("ftp_connect_timeout_seconds", "ftpConnectTimeoutSeconds", int),
            E("ftp_file_transfer_timeout_seconds", "ftpFileTransferTimeoutSeconds", int),
            E(
                "pause_between_file_rebuild_milliseconds",
                "pauseBetweenFileRebuildMilliseconds",
                int,
            ),
            E("max_busy_time_minutes", "maxBusyTimeMinutes", int),
            E(
                "device_access_app_server_cluster_name",
                "deviceAccessAppServerClusterName",
                str,
            ),
            E(
                "file_rebuild_immediate",
                "fileRebuildImmediate",
                str,
                is_complex=True,
            ),  # unknown
            E("file_rebuild_daily", "fileRebuildDaily", str, is_complex=True),  # unknown
            E(
                "file_rebuild_hourly",
                "fileRebuildHourly",
                str,
                is_complex=True,
            ),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigParametersModifyRequest20(OCIRequest):
    """
    Request to modify CPE Config system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        enable_ip_device_management: enableIPDeviceManagement
        ftp_connect_timeout_seconds: ftpConnectTimeoutSeconds
        ftp_file_transfer_timeout_seconds: ftpFileTransferTimeoutSeconds
        pause_between_file_rebuild_milliseconds: pauseBetweenFileRebuildMilliseconds
        max_busy_time_minutes: maxBusyTimeMinutes
        device_access_app_server_cluster_name: deviceAccessAppServerClusterName
    """

    enable_ip_device_management: bool = attr.ib(default=None)
    ftp_connect_timeout_seconds: int = attr.ib(default=None)
    ftp_file_transfer_timeout_seconds: int = attr.ib(default=None)
    pause_between_file_rebuild_milliseconds: int = attr.ib(default=None)
    max_busy_time_minutes: int = attr.ib(default=None)
    device_access_app_server_cluster_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_ip_device_management", "enableIPDeviceManagement", bool),
            E("ftp_connect_timeout_seconds", "ftpConnectTimeoutSeconds", int),
            E("ftp_file_transfer_timeout_seconds", "ftpFileTransferTimeoutSeconds", int),
            E(
                "pause_between_file_rebuild_milliseconds",
                "pauseBetweenFileRebuildMilliseconds",
                int,
            ),
            E("max_busy_time_minutes", "maxBusyTimeMinutes", int),
            E(
                "device_access_app_server_cluster_name",
                "deviceAccessAppServerClusterName",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigParametersModifyRequest21(OCIRequest):
    """
    Request to modify CPE Config system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        enable_ip_device_management: enableIPDeviceManagement
        ftp_connect_timeout_seconds: ftpConnectTimeoutSeconds
        ftp_file_transfer_timeout_seconds: ftpFileTransferTimeoutSeconds
        pause_between_file_rebuild_milliseconds: pauseBetweenFileRebuildMilliseconds
        device_access_app_server_cluster_name: deviceAccessAppServerClusterName
        min_time_between_reset_milliseconds: minTimeBetweenResetMilliseconds
        always_push_files_on_rebuild: alwaysPushFilesOnRebuild
        max_file_operation_retry_attempts: maxFileOperationRetryAttempts
        enable_auto_rebuild_config: enableAutoRebuildConfig
        event_queue_size: eventQueueSize
        allow_device_credentials_retrieval: allowDeviceCredentialsRetrieval
    """

    enable_ip_device_management: bool = attr.ib(default=None)
    ftp_connect_timeout_seconds: int = attr.ib(default=None)
    ftp_file_transfer_timeout_seconds: int = attr.ib(default=None)
    pause_between_file_rebuild_milliseconds: int = attr.ib(default=None)
    device_access_app_server_cluster_name: str = attr.ib(default=None)
    min_time_between_reset_milliseconds: int = attr.ib(default=None)
    always_push_files_on_rebuild: bool = attr.ib(default=None)
    max_file_operation_retry_attempts: int = attr.ib(default=None)
    enable_auto_rebuild_config: bool = attr.ib(default=None)
    event_queue_size: int = attr.ib(default=None)
    allow_device_credentials_retrieval: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_ip_device_management", "enableIPDeviceManagement", bool),
            E("ftp_connect_timeout_seconds", "ftpConnectTimeoutSeconds", int),
            E("ftp_file_transfer_timeout_seconds", "ftpFileTransferTimeoutSeconds", int),
            E(
                "pause_between_file_rebuild_milliseconds",
                "pauseBetweenFileRebuildMilliseconds",
                int,
            ),
            E(
                "device_access_app_server_cluster_name",
                "deviceAccessAppServerClusterName",
                str,
            ),
            E(
                "min_time_between_reset_milliseconds",
                "minTimeBetweenResetMilliseconds",
                int,
            ),
            E("always_push_files_on_rebuild", "alwaysPushFilesOnRebuild", bool),
            E("max_file_operation_retry_attempts", "maxFileOperationRetryAttempts", int),
            E("enable_auto_rebuild_config", "enableAutoRebuildConfig", bool),
            E("event_queue_size", "eventQueueSize", int),
            E(
                "allow_device_credentials_retrieval",
                "allowDeviceCredentialsRetrieval",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigRebuildConfigFileRequest(OCIRequest):
    """
    Rebuild the system default config file for the specified device type.

    If the device type is not specified, all files for all device types in the system are
    rebuilt.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        rebuild_type: rebuildType
        force: force
    """

    device_type: str = attr.ib(default=None)
    rebuild_type: str = attr.ib(default=None)
    force: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str),
            E("rebuild_type", "rebuildType", str),
            E("force", "force", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigRebuildDeviceConfigFileRequest(OCIRequest):
    """
    Rebuild the config file for a specified device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        force: force
    """

    device_name: str = attr.ib()
    force: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("force", "force", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigReorderDeviceLinePortsRequest(OCIRequest):
    """
    Reorder the lines of a System device.

    You can not add or delete line ports, only re-ordering the list is allowed.  The
    ordered list of line ports can be obtained with the
    ``SystemAccessDeviceGetRequest16()`` command.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        ordered_line_port_list: orderedLinePortList
    """

    device_name: str = attr.ib()
    ordered_line_port_list: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E(
                "ordered_line_port_list",
                "orderedLinePortList",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigResetDeviceRequest(OCIRequest):
    """
    Reset a specific system device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigResetDeviceTypeRequest(OCIRequest):
    """
    Reset all the devices of the specified device type in the system.

    If the device type is not specified, all device in the system are reset.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCPEConfigSetConfigFileRequest(OCIRequest):
    """
    Request to set a new system default configuration file for a device type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        config_file: configFile
    """

    device_type: str = attr.ib()
    config_file: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("config_file", "configFile", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingBrandingGetRequest(OCIRequest):
    """
    Request to get the system branding information.

    The response is either ``SystemCallCenterEnhancedReportingBrandingGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingDataTemplateGetListRequest(OCIRequest):
    """
    Request to get the list of data template and the corresponding information in the
    system.

    The response is either a
    ``SystemCallCenterEnhancedReportingDataTemplateGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingGetRequest(OCIRequest):
    """
    Request to get the call center enhanced reporting system settings.

    The response is either a ``SystemCallCenterEnhancedReportingGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingModifyRequest(OCIRequest):
    """
    Modify the system settings for call center enhanced reporting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        archive_reports: archiveReports
        report_application_url: reportApplicationURL
        repository_application_url: repositoryApplicationURL
    """

    archive_reports: bool = attr.ib(default=None)
    report_application_url: str = attr.ib(default=None)
    repository_application_url: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("archive_reports", "archiveReports", bool),
            E("report_application_url", "reportApplicationURL", str),
            E("repository_application_url", "repositoryApplicationURL", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingReportTemplateDeleteRequest(OCIRequest):
    """
    Request to delete a system level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingReportTemplateGetListRequest(OCIRequest):
    """
    Request to get system level call center report template list.

    The response is either a
    ``SystemCallCenterEnhancedReportingReportTemplateGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingReportTemplateGetRequest(OCIRequest):
    """
    Request to get a system level call center report template.

    The response is either a
    ``SystemCallCenterEnhancedReportingReportTemplateGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest(OCIRequest):
    """
    Request to get all the call center reporting scheduled report in the system that uses
    a given system level report template.

    The response is either a
    ``SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingScheduledTaskParametersGetRequest(OCIRequest):
    """
    Request to get the system settings for the call center enhanced reporting scheduling
    tasks.

    The response is either a
    ``SystemCallCenterEnhancedReportingScheduledTaskParametersGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingScheduledTaskParametersModifyRequest(OCIRequest):
    """
    Modify the system settings for the call center enhanced reporting scheduling tasks.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        scheduled_report_search_interval_minutes: scheduledReportSearchIntervalMinutes
        maximum_scheduled_reports_per_interval: maximumScheduledReportsPerInterval
        delete_scheduled_report_days_after_completion:
            deleteScheduledReportDaysAfterCompletion
    """

    scheduled_report_search_interval_minutes: int = attr.ib(default=None)
    maximum_scheduled_reports_per_interval: int = attr.ib(default=None)
    delete_scheduled_report_days_after_completion: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "scheduled_report_search_interval_minutes",
                "scheduledReportSearchIntervalMinutes",
                int,
            ),
            E(
                "maximum_scheduled_reports_per_interval",
                "maximumScheduledReportsPerInterval",
                int,
            ),
            E(
                "delete_scheduled_report_days_after_completion",
                "deleteScheduledReportDaysAfterCompletion",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterGetRequest(OCIRequest):
    """
    Request the system level data associated with Call Center.

    The response is either a ``SystemCallCenterGetResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``SystemCallCenterGetRequest14sp9()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterGetRequest14sp9(OCIRequest):
    """
    Request the system level data associated with Call Center.

    The response is either a ``SystemCallCenterGetResponse14sp9()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemCallCenterGetRequest16()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterGetRequest16(OCIRequest):
    """
    Request the system level data associated with Call Center.

    The response is either a ``SystemCallCenterGetResponse16()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemCallCenterGetRequest17()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterGetRequest17(OCIRequest):
    """
    Request the system level data associated with Call Center.

    The response is either a ``SystemCallCenterGetResponse17()`` or an
    ``ErrorResponse()``. Replaced by ``SystemCallCenterGetRequest17sp4()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterGetRequest17sp4(OCIRequest):
    """
    Request the system level data associated with Call Center.

    The response is either a ``SystemCallCenterGetResponse17sp4()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemCallCenterGetRequest19()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterGetRequest19(OCIRequest):
    """
    Request the system level data associated with Call Center.

    The response is either a ``SystemCallCenterGetResponse19()`` or an
    ``ErrorResponse()``. Replaced by ``SystemCallCenterGetRequest21()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterGetRequest21(OCIRequest):
    """
    Request the system level data associated with Call Center.

    The response is either a ``SystemCallCenterGetResponse21()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Call Center.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        default_from_address: defaultFromAddress
        statistics_sampling_period_minutes: statisticsSamplingPeriodMinutes
        default_enable_guard_timer: defaultEnableGuardTimer
        default_guard_timer_seconds: defaultGuardTimerSeconds
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        default_play_ring_when_offer_call: defaultPlayRingWhenOfferCall
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
        call_handling_sampling_period_minutes: callHandlingSamplingPeriodMinutes
        call_handling_minimum_sampling_size: callHandlingMinimumSamplingSize
        play_tone_to_agent_for_emergency_call: playToneToAgentForEmergencyCall
        emergency_call_clid_prefix: emergencyCallCLIDPrefix
        threshold_crossing_notification_email_guard_timer_seconds:
            thresholdCrossingNotificationEmailGuardTimerSeconds
        allow_agent_device_initiated_forward: allowAgentDeviceInitiatedForward
    """

    default_from_address: str = attr.ib(default=None)
    statistics_sampling_period_minutes: int = attr.ib(default=None)
    default_enable_guard_timer: bool = attr.ib(default=None)
    default_guard_timer_seconds: int = attr.ib(default=None)
    force_agent_unavailable_on_dnd_activation: bool = attr.ib(default=None)
    force_agent_unavailable_on_personal_calls: bool = attr.ib(default=None)
    force_agent_unavailable_on_bounced_call_limit: bool = attr.ib(default=None)
    number_consecutive_bounced_calls_to_force_agent_unavailable: int = attr.ib(default=None)
    force_agent_unavailable_on_not_reachable: bool = attr.ib(default=None)
    default_play_ring_when_offer_call: bool = attr.ib(default=None)
    uniform_call_distribution_policy_scope: str = attr.ib(default=None)
    call_handling_sampling_period_minutes: int = attr.ib(default=None)
    call_handling_minimum_sampling_size: int = attr.ib(default=None)
    play_tone_to_agent_for_emergency_call: bool = attr.ib(default=None)
    emergency_call_clid_prefix: str = attr.ib(default=None)
    threshold_crossing_notification_email_guard_timer_seconds: int = attr.ib(default=None)
    allow_agent_device_initiated_forward: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str),
            E(
                "statistics_sampling_period_minutes",
                "statisticsSamplingPeriodMinutes",
                int,
            ),
            E("default_enable_guard_timer", "defaultEnableGuardTimer", bool),
            E("default_guard_timer_seconds", "defaultGuardTimerSeconds", int),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
            E("default_play_ring_when_offer_call", "defaultPlayRingWhenOfferCall", bool),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
            ),
            E(
                "call_handling_sampling_period_minutes",
                "callHandlingSamplingPeriodMinutes",
                int,
            ),
            E(
                "call_handling_minimum_sampling_size",
                "callHandlingMinimumSamplingSize",
                int,
            ),
            E(
                "play_tone_to_agent_for_emergency_call",
                "playToneToAgentForEmergencyCall",
                bool,
            ),
            E("emergency_call_clid_prefix", "emergencyCallCLIDPrefix", str),
            E(
                "threshold_crossing_notification_email_guard_timer_seconds",
                "thresholdCrossingNotificationEmailGuardTimerSeconds",
                int,
            ),
            E(
                "allow_agent_device_initiated_forward",
                "allowAgentDeviceInitiatedForward",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterReportingServerGetListRequest(OCIRequest):
    """
    Request to get a list of Call Center Reporting Server.

    The response is either ``SystemCallCenterReportingServerGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallMeNowGetRequest(OCIRequest):
    """
    Request the system level data associated with Call Me Now service.

    The response is either a ``SystemCallMeNowGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallMeNowModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Call me now service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        passcode_length: passcodeLength
        passcode_timeout_seconds: passcodeTimeoutSeconds
    """

    passcode_length: int = attr.ib(default=None)
    passcode_timeout_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("passcode_length", "passcodeLength", int),
            E("passcode_timeout_seconds", "passcodeTimeoutSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallNotifyGetRequest(OCIRequest):
    """
    Request the system level data associated with Call Notify.

    The response is either a ``SystemCallNotifyGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallNotifyModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Call Notify.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        default_from_address: defaultFromAddress
        use_short_subject_line: useShortSubjectLine
        use_dn_in_mail_body: useDnInMailBody
    """

    default_from_address: str = attr.ib(default=None)
    use_short_subject_line: bool = attr.ib(default=None)
    use_dn_in_mail_body: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str),
            E("use_short_subject_line", "useShortSubjectLine", bool),
            E("use_dn_in_mail_body", "useDnInMailBody", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest14(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse14()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest14sp1(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse14sp1()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest14sp4(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse14sp4()`` or an
    ``ErrorResponse()``.

    Replaced By : ``SystemCallProcessingGetPolicyRequest15()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest14sp7(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse14sp7()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemCallProcessingGetPolicyRequest16()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest15(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse15()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemCallProcessingGetPolicyRequest16()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest15sp2(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse15sp2()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest16(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse16()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest16sp2(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse16sp2()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest17(OCIRequest):
    """
    The response is either a ``SystemCallProcessingGetPolicyResponse17()`` or an
    ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest17sp3(OCIRequest):
    """
    Request the system level data associated with Call Processing Policy.

    The response is either a ``SystemCallProcessingGetPolicyResponse17sp3()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest17sp4(OCIRequest):
    """
    The response is either a ``SystemCallProcessingGetPolicyResponse17sp4()`` or an
    ``ErrorResponse()``.

    Replaced By : ``SystemCallProcessingGetPolicyRequest18sp1()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest18sp1(OCIRequest):
    """
    The response is either a ``SystemCallProcessingGetPolicyResponse18sp1()`` or an
    ``ErrorResponse()``.

    Replaced by: ``SystemCallProcessingGetPolicyRequest19sp1()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingGetPolicyRequest19sp1(OCIRequest):
    """
    The response is either a ``SystemCallProcessingGetPolicyResponse19sp1()`` or an
    ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingModifyPolicyRequest14(OCIRequest):
    """
    Modify the system level data associated with Call Processing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By : ``SystemCallProcessingModifyPolicyRequest15()``

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_external_calls_via_private_dialing_plan:
            overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
    """

    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_external_calls_via_private_dialing_plan: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    conference_uri: str = attr.ib(default=None)
    max_conference_parties: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_external_calls_via_private_dialing_plan",
                "overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingModifyPolicyRequest15(OCIRequest):
    """
    Modify the system level data associated with Call Processing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: enableDialableCallerID
    allowConfigurableCLIDForRedirectingIdentity enterpriseCallsCLIDPolicy
    enterpriseGroupCallsCLIDPolicy serviceProviderGroupCallsCLIDPolicy

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        network_usage_selection: networkUsageSelection
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        conference_uri: conferenceURI
        max_conference_parties: maxConferenceParties
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        enable_dialable_caller_id: enableDialableCallerID
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
    """

    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    conference_uri: str = attr.ib(default=None)
    max_conference_parties: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E("conference_uri", "conferenceURI", str),
            E("max_conference_parties", "maxConferenceParties", int),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileAddRequest(OCIRequest):
    """
    Add a call processing policy profile to system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``SystemCallProcessingPolicyProfileAddRequest20()``.

    Attributes:
        name: name
        description: description
        assigned_subscriber_type: assignedSubscriberType
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    assigned_subscriber_type: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileAddRequest20(OCIRequest):
    """
    Add a call processing policy profile to system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        assigned_subscriber_type: assignedSubscriberType
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    assigned_subscriber_type: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileAddRequest21(OCIRequest):
    """
    Add a call processing policy profile to system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        assigned_subscriber_type: assignedSubscriberType
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    assigned_subscriber_type: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("assigned_subscriber_type", "assignedSubscriberType", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileAutoAttendantProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Auto Attendant
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileAutoAttendantProfileGetRequestResponse()`` or an
    ``ErrorResponse()``. The response contains the call processing policy profile setting
    for Auto Attendant.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileAutoAttendantProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileBroadWorksAnywhereProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile BroadWorks
    Anywhere subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileBroadWorksAnywhereProfileGetRequestResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileBroadWorksAnywhereProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileCallCenterProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Call Center
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileCallCenterProfileGetRequestResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileCallCenterProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileCollaborateProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Collaborate
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileCollaborateProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileCollaborateProfileModifyRequest(OCIRequest):
    """
    Request to get to modify the call processing policy profile collaborate subscriber
    type profile.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileDeleteRequest(OCIRequest):
    """
    Delete a call processing policy profile from system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileFindMeFollowMeProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Find-me/Follow-
    me subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileFindMeFollowMeProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileFindMeFollowMeProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileFlexibleSeatingHostProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Flexible Seating
    Host subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileFlexibleSeatingHostProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileFlexibleSeatingHostProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileGetAssignedNCOSListRequest(OCIRequest):
    """
    Request a list of NCOSs that have a given CallP Policy Profile assigned.

    The response is either a
    ``SystemCallProcessingPolicyProfileGetAssignedNCOSListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        profile_name: profileName
    """

    profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("profile_name", "profileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileGetListRequest(OCIRequest):
    """
    Get the list of all Call Processing Policy Profiles.

    The response is either a ``SystemCallProcessingPolicyProfileGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileGetRequest(OCIRequest):
    """
    Request to get a call processing policy profile in system.

    The response is either a ``SystemCallProcessingPolicyProfileGetResponse()`` or an
    ``ErrorResponse()``. Replaced by ``SystemCallProcessingPolicyProfileGetRequest20()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileGetRequest20(OCIRequest):
    """
    Request to get a call processing policy profile in system.

    The response is either a ``SystemCallProcessingPolicyProfileGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileGetRequest21(OCIRequest):
    """
    Request to get a call processing policy profile in system.

    The response is either a ``SystemCallProcessingPolicyProfileGetResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileGroupPagingProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Group Paging
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileGroupPagingProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileGroupPagingProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileHuntGroupProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Hunt Group
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileHuntGroupProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileHuntGroupProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileInstantGroupCallProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Instant Group
    Call subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileInstantGroupCallProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileInstantGroupCallProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileMeetMeConferencingProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Meet-Me
    Conferencing subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileMeetMeConferencingProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileMeetMeConferencingProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileRoutePointProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Route Point
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileRoutePointProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileRoutePointProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileTrunkGroupPilotProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Trunk Group
    Pilot user subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileTrunkGroupPilotProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileTrunkGroupPilotProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_media_policy: bool = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_media_policy", "useMediaPolicy", bool),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileUserProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile user subscriber
    type profile.

    The response is either a ``SystemCallProcessingPolicyProfileUserProfileGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileUserProfileModifyRequest(OCIRequest):
    """
    Modify a call processing policy profile user subscriber type profile in system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
        use_clid_policy: useCLIDPolicy
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
        enterprise_calls_clid_policy: enterpriseCallsCLIDPolicy
        enterprise_group_calls_clid_policy: enterpriseGroupCallsCLIDPolicy
        service_provider_group_calls_clid_policy: serviceProviderGroupCallsCLIDPolicy
        use_media_policy: useMediaPolicy
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_call_limits_policy: useCallLimitsPolicy
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_translation_routing_policy: useTranslationRoutingPolicy
        network_usage_selection: networkUsageSelection
        enable_enterprise_extension_dialing: enableEnterpriseExtensionDialing
        enforce_group_calling_line_identity_restriction:
            enforceGroupCallingLineIdentityRestriction
        enforce_enterprise_calling_line_identity_restriction:
            enforceEnterpriseCallingLineIdentityRestriction
        allow_enterprise_group_call_typing_for_private_dialing_plan:
            allowEnterpriseGroupCallTypingForPrivateDialingPlan
        allow_enterprise_group_call_typing_for_public_dialing_plan:
            allowEnterpriseGroupCallTypingForPublicDialingPlan
        override_clid_restriction_for_private_call_category:
            overrideCLIDRestrictionForPrivateCallCategory
        use_enterprise_clid_for_private_call_category:
            useEnterpriseCLIDForPrivateCallCategory
        use_incoming_clid_policy: useIncomingCLIDPolicy
        enable_dialable_caller_id: enableDialableCallerID
    """

    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_media_policy: bool = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_media_policy", "useMediaPolicy", bool),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileVoicePortalProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile Voice Portal
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileVoicePortalProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileVoicePortalProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileVoiceXMLProfileGetRequest(OCIRequest):
    """
    Request to get the configuration for a call processing policy profile VoiceXML
    subscriber type profile.

    The response is either a
    ``SystemCallProcessingPolicyProfileVoiceXMLProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    call_processing_policy_profile_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileVoiceXMLProfileModifyRequest(OCIRequest):
    call_processing_policy_profile_name: str = attr.ib()
    use_clid_policy: bool = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)
    enterprise_calls_clid_policy: str = attr.ib(default=None)
    enterprise_group_calls_clid_policy: str = attr.ib(default=None)
    service_provider_group_calls_clid_policy: str = attr.ib(default=None)
    use_call_limits_policy: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_translation_routing_policy: bool = attr.ib(default=None)
    network_usage_selection: str = attr.ib(default=None)
    enable_enterprise_extension_dialing: bool = attr.ib(default=None)
    enforce_group_calling_line_identity_restriction: bool = attr.ib(default=None)
    enforce_enterprise_calling_line_identity_restriction: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_private_dialing_plan: bool = attr.ib(default=None)
    allow_enterprise_group_call_typing_for_public_dialing_plan: bool = attr.ib(default=None)
    override_clid_restriction_for_private_call_category: bool = attr.ib(default=None)
    use_enterprise_clid_for_private_call_category: bool = attr.ib(default=None)
    use_incoming_clid_policy: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
                is_required=True,
            ),
            E("use_clid_policy", "useCLIDPolicy", bool),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
            E("enterprise_calls_clid_policy", "enterpriseCallsCLIDPolicy", str),
            E(
                "enterprise_group_calls_clid_policy",
                "enterpriseGroupCallsCLIDPolicy",
                str,
            ),
            E(
                "service_provider_group_calls_clid_policy",
                "serviceProviderGroupCallsCLIDPolicy",
                str,
            ),
            E("use_call_limits_policy", "useCallLimitsPolicy", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E("use_translation_routing_policy", "useTranslationRoutingPolicy", bool),
            E("network_usage_selection", "networkUsageSelection", str),
            E(
                "enable_enterprise_extension_dialing",
                "enableEnterpriseExtensionDialing",
                bool,
            ),
            E(
                "enforce_group_calling_line_identity_restriction",
                "enforceGroupCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "enforce_enterprise_calling_line_identity_restriction",
                "enforceEnterpriseCallingLineIdentityRestriction",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_private_dialing_plan",
                "allowEnterpriseGroupCallTypingForPrivateDialingPlan",
                bool,
            ),
            E(
                "allow_enterprise_group_call_typing_for_public_dialing_plan",
                "allowEnterpriseGroupCallTypingForPublicDialingPlan",
                bool,
            ),
            E(
                "override_clid_restriction_for_private_call_category",
                "overrideCLIDRestrictionForPrivateCallCategory",
                bool,
            ),
            E(
                "use_enterprise_clid_for_private_call_category",
                "useEnterpriseCLIDForPrivateCallCategory",
                bool,
            ),
            E("use_incoming_clid_policy", "useIncomingCLIDPolicy", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingAddPlatformRequest(OCIRequest):
    """
    Add a Call Recording platform.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        net_address: netAddress
        port: port
        media_stream: mediaStream
        transport_type: transportType
        description: description
    """

    name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib()
    media_stream: str = attr.ib()
    transport_type: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
            E("media_stream", "mediaStream", str, is_required=True),
            E("transport_type", "transportType", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingAddPlatformRequest19(OCIRequest):
    """
    Add a Call Recording platform.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        net_address: netAddress
        port: port
        media_stream: mediaStream
        transport_type: transportType
        description: description
        schema_version: schemaVersion
    """

    name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib()
    media_stream: str = attr.ib()
    transport_type: str = attr.ib()
    description: str = attr.ib(default=None)
    schema_version: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
            E("media_stream", "mediaStream", str, is_required=True),
            E("transport_type", "transportType", str, is_required=True),
            E("description", "description", str),
            E("schema_version", "schemaVersion", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingAddPlatformRequest20(OCIRequest):
    """
    Add a Call Recording platform.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        net_address: netAddress
        port: port
        media_stream: mediaStream
        transport_type: transportType
        description: description
        schema_version: schemaVersion
        support_video_recording: supportVideoRecording
    """

    name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib()
    media_stream: str = attr.ib()
    transport_type: str = attr.ib()
    description: str = attr.ib(default=None)
    schema_version: str = attr.ib()
    support_video_recording: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
            E("media_stream", "mediaStream", str, is_required=True),
            E("transport_type", "transportType", str, is_required=True),
            E("description", "description", str),
            E("schema_version", "schemaVersion", str, is_required=True),
            E(
                "support_video_recording",
                "supportVideoRecording",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingDeletePlatformRequest(OCIRequest):
    """
    Delete a Call Recording platform.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingGetPlatformListRequest(OCIRequest):
    """
    Get list of Call Recording platforms.

    The response is either ``SystemCallRecordingGetPlatformListResponse()`` or
    ``ErrorResponse()``. The possible values for "Support Video Rec" can be either true or
    false.  Schema version values include: 1.0, 2.0, 3.0
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingGetPlatformUsageRequest(OCIRequest):
    """
    Get the list of groups currently associated to the specified Call Recording platform.

    The response is either ``SystemCallRecordingGetPlatformUsageResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingGetRequest(OCIRequest):
    """
    Request the system level data associated with Call Recording.

    The response is either a ``SystemCallRecordingGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingModifyPlatformRequest(OCIRequest):
    """
    Modify the specified Call Recording platform.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        net_address: netAddress
        port: port
        media_stream: mediaStream
        become_system_default: becomeSystemDefault
        transport_type: transportType
        description: description
        schema_version: schemaVersion
        support_video_recording: supportVideoRecording
    """

    name: str = attr.ib()
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    media_stream: str = attr.ib(default=None)
    become_system_default: bool = attr.ib(default=None)
    transport_type: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    schema_version: str = attr.ib(default=None)
    support_video_recording: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("media_stream", "mediaStream", str),
            E("become_system_default", "becomeSystemDefault", bool),
            E("transport_type", "transportType", str),
            E("description", "description", str),
            E("schema_version", "schemaVersion", str),
            E("support_video_recording", "supportVideoRecording", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallRecordingModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Call Recording.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        continue_call_after_recording_failure: continueCallAfterRecordingFailure
        refresh_period_seconds: refreshPeriodSeconds
        max_consecutive_failures: maxConsecutiveFailures
        max_response_wait_time_milliseconds: maxResponseWaitTimeMilliseconds
        continue_call_after_video_recording_failure:
            continueCallAfterVideoRecordingFailure
    """

    continue_call_after_recording_failure: bool = attr.ib(default=None)
    refresh_period_seconds: int = attr.ib(default=None)
    max_consecutive_failures: int = attr.ib(default=None)
    max_response_wait_time_milliseconds: int = attr.ib(default=None)
    continue_call_after_video_recording_failure: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "continue_call_after_recording_failure",
                "continueCallAfterRecordingFailure",
                bool,
            ),
            E("refresh_period_seconds", "refreshPeriodSeconds", int),
            E("max_consecutive_failures", "maxConsecutiveFailures", int),
            E(
                "max_response_wait_time_milliseconds",
                "maxResponseWaitTimeMilliseconds",
                int,
            ),
            E(
                "continue_call_after_video_recording_failure",
                "continueCallAfterVideoRecordingFailure",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallReturnGetRequest(OCIRequest):
    """
    Request the system level data associated with Call Return.

    The response is either a ``SystemCallReturnGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallReturnModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Call Return.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        two_level_activation: twoLevelActivation
        provide_date: provideDate
        last_unanswered_call_only: lastUnansweredCallOnly
        confirmation_key: confirmationKey
        allow_restricted_number: allowRestrictedNumber
        delete_number_after_answered_call_return: deleteNumberAfterAnsweredCallReturn
    """

    two_level_activation: bool = attr.ib(default=None)
    provide_date: bool = attr.ib(default=None)
    last_unanswered_call_only: bool = attr.ib(default=None)
    confirmation_key: str = attr.ib(default=None)
    allow_restricted_number: bool = attr.ib(default=None)
    delete_number_after_answered_call_return: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("two_level_activation", "twoLevelActivation", bool),
            E("provide_date", "provideDate", bool),
            E("last_unanswered_call_only", "lastUnansweredCallOnly", bool),
            E("confirmation_key", "confirmationKey", str),
            E("allow_restricted_number", "allowRestrictedNumber", bool),
            E(
                "delete_number_after_answered_call_return",
                "deleteNumberAfterAnsweredCallReturn",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallTypeAddMappingRequest(OCIRequest):
    """
    Add a system call type mapping.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
        digit_map: digitMap
        call_type: callType
    """

    country_code: str = attr.ib()
    digit_map: str = attr.ib()
    call_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("digit_map", "digitMap", str, is_required=True),
            E("call_type", "callType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallTypeDeleteMappingRequest(OCIRequest):
    """
    Delete a system call type mapping.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
        digit_map: digitMap
    """

    country_code: str = attr.ib()
    digit_map: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("digit_map", "digitMap", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallTypeGetListRequest(OCIRequest):
    """
    Get a list of system call types.

    The response is either ``SystemCallTypeGetListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallTypeGetMappingListRequest(OCIRequest):
    """
    Get a list of system call type mappings.

    The response is either ``SystemCallTypeGetMappingListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
    """

    country_code: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallWaitingGetRequest(OCIRequest):
    """
    Request the system level data associated with Call Waiting.

    The response is either a ``SystemCallWaitingGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallWaitingModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Call Waiting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        play_distinctive_ringback: playDistinctiveRingback
    """

    play_distinctive_ringback: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_distinctive_ringback", "playDistinctiveRingback", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingNameRetrievalGetRequest14(OCIRequest):
    """
    Request the system's calling name retrieval attributes.

    The response is either a ``SystemCallingNameRetrievalGetResponse14()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingNameRetrievalGetRequest16sp1(OCIRequest):
    """
    Request the system's calling name retrieval attributes.

    The response is either a ``SystemCallingNameRetrievalGetResponse16sp1()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemCallingNameRetrievalGetRequest17sp4()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingNameRetrievalGetRequest17sp4(OCIRequest):
    """
    Request the system's calling name retrieval attributes.

    The response is either a ``SystemCallingNameRetrievalGetResponse17sp4()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingNameRetrievalGetRequest20(OCIRequest):
    """
    Request the system's calling name retrieval attributes.

    The response is either a ``SystemCallingNameRetrievalGetResponse20()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingNameRetrievalModifyRequest(OCIRequest):
    """
    Modifies the system's calling name retrieval attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        query_timer_milli_seconds: queryTimerMilliSeconds
        server_net_address: serverNetAddress
        server_port: serverPort
        server_transport_protocol: serverTransportProtocol
    """

    query_timer_milli_seconds: int = attr.ib(default=None)
    server_net_address: str = attr.ib(default=None)
    server_port: int = attr.ib(default=None)
    server_transport_protocol: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("query_timer_milli_seconds", "queryTimerMilliSeconds", int),
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E("server_transport_protocol", "serverTransportProtocol", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingNameRetrievalModifyRequest16sp1(OCIRequest):
    """
    Modifies the system's calling name retrieval attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        trigger_cnam_queries_for_all_network_calls: triggerCNAMQueriesForAllNetworkCalls
        trigger_cnam_queries_for_group_and_enterprise_calls:
            triggerCNAMQueriesForGroupAndEnterpriseCalls
        query_protocol: queryProtocol
        query_timeout_milliseconds: queryTimeoutMilliseconds
        sip_external_database_net_address: sipExternalDatabaseNetAddress
        sip_external_database_port: sipExternalDatabasePort
        sip_external_database_transport: sipExternalDatabaseTransport
        soap_external_database_net_address: soapExternalDatabaseNetAddress
        soap_supports_dnssrv: soapSupportsDNSSRV
        calling_name_source: callingNameSource
    """

    trigger_cnam_queries_for_all_network_calls: bool = attr.ib(default=None)
    trigger_cnam_queries_for_group_and_enterprise_calls: bool = attr.ib(default=None)
    query_protocol: str = attr.ib(default=None)
    query_timeout_milliseconds: int = attr.ib(default=None)
    sip_external_database_net_address: str = attr.ib(default=None)
    sip_external_database_port: int = attr.ib(default=None)
    sip_external_database_transport: str = attr.ib(default=None)
    soap_external_database_net_address: str = attr.ib(default=None)
    soap_supports_dnssrv: bool = attr.ib(default=None)
    calling_name_source: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trigger_cnam_queries_for_all_network_calls",
                "triggerCNAMQueriesForAllNetworkCalls",
                bool,
            ),
            E(
                "trigger_cnam_queries_for_group_and_enterprise_calls",
                "triggerCNAMQueriesForGroupAndEnterpriseCalls",
                bool,
            ),
            E("query_protocol", "queryProtocol", str),
            E("query_timeout_milliseconds", "queryTimeoutMilliseconds", int),
            E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
            E("sip_external_database_port", "sipExternalDatabasePort", int),
            E("sip_external_database_transport", "sipExternalDatabaseTransport", str),
            E(
                "soap_external_database_net_address",
                "soapExternalDatabaseNetAddress",
                str,
            ),
            E("soap_supports_dnssrv", "soapSupportsDNSSRV", bool),
            E("calling_name_source", "callingNameSource", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingNameRetrievalModifyRequest20(OCIRequest):
    """
    Modifies the system's calling name retrieval attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        trigger_cnam_queries_for_all_network_calls: triggerCNAMQueriesForAllNetworkCalls
        trigger_cnam_queries_for_group_and_enterprise_calls:
            triggerCNAMQueriesForGroupAndEnterpriseCalls
        query_protocol: queryProtocol
        query_timeout_milliseconds: queryTimeoutMilliseconds
        sip_external_database_net_address: sipExternalDatabaseNetAddress
        sip_external_database_port: sipExternalDatabasePort
        sip_external_database_transport: sipExternalDatabaseTransport
        soap_external_database_net_address: soapExternalDatabaseNetAddress
        calling_name_source: callingNameSource
        route_advance_timer: routeAdvanceTimer
        retry_failed_cnam_server_interval: retryFailedCNAMServerInterval
        ignore_restricted_presentation_indicator: ignoreRestrictedPresentationIndicator
        supports_dnssrv: supportsDNSSRV
    """

    trigger_cnam_queries_for_all_network_calls: bool = attr.ib(default=None)
    trigger_cnam_queries_for_group_and_enterprise_calls: bool = attr.ib(default=None)
    query_protocol: str = attr.ib(default=None)
    query_timeout_milliseconds: int = attr.ib(default=None)
    sip_external_database_net_address: str = attr.ib(default=None)
    sip_external_database_port: int = attr.ib(default=None)
    sip_external_database_transport: str = attr.ib(default=None)
    soap_external_database_net_address: str = attr.ib(default=None)
    calling_name_source: str = attr.ib(default=None)
    route_advance_timer: int = attr.ib(default=None)
    retry_failed_cnam_server_interval: int = attr.ib(default=None)
    ignore_restricted_presentation_indicator: bool = attr.ib(default=None)
    supports_dnssrv: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trigger_cnam_queries_for_all_network_calls",
                "triggerCNAMQueriesForAllNetworkCalls",
                bool,
            ),
            E(
                "trigger_cnam_queries_for_group_and_enterprise_calls",
                "triggerCNAMQueriesForGroupAndEnterpriseCalls",
                bool,
            ),
            E("query_protocol", "queryProtocol", str),
            E("query_timeout_milliseconds", "queryTimeoutMilliseconds", int),
            E("sip_external_database_net_address", "sipExternalDatabaseNetAddress", str),
            E("sip_external_database_port", "sipExternalDatabasePort", int),
            E("sip_external_database_transport", "sipExternalDatabaseTransport", str),
            E(
                "soap_external_database_net_address",
                "soapExternalDatabaseNetAddress",
                str,
            ),
            E("calling_name_source", "callingNameSource", str),
            E("route_advance_timer", "routeAdvanceTimer", int),
            E("retry_failed_cnam_server_interval", "retryFailedCNAMServerInterval", int),
            E(
                "ignore_restricted_presentation_indicator",
                "ignoreRestrictedPresentationIndicator",
                bool,
            ),
            E("supports_dnssrv", "supportsDNSSRV", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingPartyCategoryAddRequest(OCIRequest):
    """
    Add a Calling Party Category to system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        category: category
        cpc_value: cpcValue
        isup_oli_value: isupOliValue
        gtd_oli_value: gtdOliValue
        user_category: userCategory
        pay_phone: payPhone
        operator: operator
        default: default
        collect_call: collectCall
        web_display_key: webDisplayKey
    """

    category: str = attr.ib()
    cpc_value: str = attr.ib(default=None)
    isup_oli_value: int = attr.ib(default=None)
    gtd_oli_value: str = attr.ib(default=None)
    user_category: bool = attr.ib()
    pay_phone: bool = attr.ib()
    operator: bool = attr.ib()
    default: bool = attr.ib()
    collect_call: bool = attr.ib()
    web_display_key: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("category", "category", str, is_required=True),
            E("cpc_value", "cpcValue", str),
            E("isup_oli_value", "isupOliValue", int),
            E("gtd_oli_value", "gtdOliValue", str),
            E("user_category", "userCategory", bool, is_required=True),
            E("pay_phone", "payPhone", bool, is_required=True),
            E("operator", "operator", bool, is_required=True),
            E("default", "default", bool, is_required=True),
            E("collect_call", "collectCall", bool, is_required=True),
            E("web_display_key", "webDisplayKey", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingPartyCategoryDeleteRequest(OCIRequest):
    """
    Delete a Calling Party Category from system.

    The category cannot be deleted if it is the default or is in use by any users.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        category: category
    """

    category: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("category", "category", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingPartyCategoryGetListRequest(OCIRequest):
    """
    Get the list of all Calling Party Category in system.

    The response is either a ``SystemCallingPartyCategoryGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingPartyCategoryGetRequest(OCIRequest):
    """
    Get an existing Calling Party Category in system.

    The response is either a ``SystemCallingPartyCategoryGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        category: category
    """

    category: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("category", "category", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallingPartyCategoryModifyRequest(OCIRequest):
    """
    Modify a Calling Party Category in system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        category: category
        cpc_value: cpcValue
        isup_oli_value: isupOliValue
        gtd_oli_value: gtdOliValue
        user_category: userCategory
        pay_phone: payPhone
        operator: operator
        become_default: becomeDefault
        collect_call: collectCall
        web_display_key: webDisplayKey
    """

    category: str = attr.ib()
    cpc_value: str = attr.ib(default=None)
    isup_oli_value: int = attr.ib(default=None)
    gtd_oli_value: str = attr.ib(default=None)
    user_category: bool = attr.ib(default=None)
    pay_phone: bool = attr.ib(default=None)
    operator: bool = attr.ib(default=None)
    become_default: bool = attr.ib(default=None)
    collect_call: bool = attr.ib(default=None)
    web_display_key: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("category", "category", str, is_required=True),
            E("cpc_value", "cpcValue", str),
            E("isup_oli_value", "isupOliValue", int),
            E("gtd_oli_value", "gtdOliValue", str),
            E("user_category", "userCategory", bool),
            E("pay_phone", "payPhone", bool),
            E("operator", "operator", bool),
            E("become_default", "becomeDefault", bool),
            E("collect_call", "collectCall", bool),
            E("web_display_key", "webDisplayKey", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemClassmarkAddRequest(OCIRequest):
    """
    Add a Class Mark to system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        classmark: classmark
        value: value
        web_display_key: webDisplayKey
    """

    classmark: str = attr.ib()
    value: str = attr.ib()
    web_display_key: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("classmark", "classmark", str, is_required=True),
            E("value", "value", str, is_required=True),
            E("web_display_key", "webDisplayKey", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemClassmarkDeleteRequest(OCIRequest):
    """
    Delete a Class Mark from system.

    It cannot be deleted if it is in use by any users.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        classmark: classmark
    """

    classmark: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("classmark", "classmark", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemClassmarkGetListRequest(OCIRequest):
    """
    Get the list of all Class Mark in system.

    The response is either a ``SystemClassmarkGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemClassmarkModifyRequest(OCIRequest):
    """
    Modify a Class Mark in system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        classmark: classmark
        value: value
        web_display_key: webDisplayKey
    """

    classmark: str = attr.ib()
    value: str = attr.ib(default=None)
    web_display_key: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("classmark", "classmark", str, is_required=True),
            E("value", "value", str),
            E("web_display_key", "webDisplayKey", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemClientSessionParametersGetRequest(OCIRequest):
    """
    Request to get the list of Client Session (web and CLI) system parameters.

    The response is either ``SystemClientSessionParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemClientSessionParametersModifyRequest(OCIRequest):
    """
    Request to modify Client Session (web and CLI) system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        enable_inactivity_timeout: enableInactivityTimeout
        inactivity_timeout_minutes: inactivityTimeoutMinutes
    """

    enable_inactivity_timeout: bool = attr.ib(default=None)
    inactivity_timeout_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_inactivity_timeout", "enableInactivityTimeout", bool),
            E("inactivity_timeout_minutes", "inactivityTimeoutMinutes", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCodecAddRequest(OCIRequest):
    """
    Request to add a codec to the ordered list of codecs supported by the system.

    The ordered list of codecs is sent to MGCP devices when creating connections.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        codec: codec
    """

    codec: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("codec", "codec", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCodecDeleteRequest(OCIRequest):
    """
    Request to delete a supported codec from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        codec: codec
    """

    codec: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("codec", "codec", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCodecGetListRequest(OCIRequest):
    """
    Request to get the ordered list of supported codecs in the system.

    The ordered list of codecs is sent to MGCP devices when creating connections.

    The response is either a ``SystemCodecGetListResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCollaborateGetRequest(OCIRequest):
    """
    Request the system level data associated with collaborate services.

    The response is either a ``SystemCollaborateGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringAlternateCallIndicatorAddRequest(OCIRequest):
    """
    Add a Communication Barring Alternate Call Indicator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        alternate_call_indicator: alternateCallIndicator
        network_server_alternate_call_indicator: networkServerAlternateCallIndicator
    """

    alternate_call_indicator: str = attr.ib()
    network_server_alternate_call_indicator: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator",
                "alternateCallIndicator",
                str,
                is_required=True,
            ),
            E(
                "network_server_alternate_call_indicator",
                "networkServerAlternateCallIndicator",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringAlternateCallIndicatorDeleteRequest(OCIRequest):
    """
    Delete a Communication Barring Alternate Call Indicator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        alternate_call_indicator: alternateCallIndicator
    """

    alternate_call_indicator: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator",
                "alternateCallIndicator",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringAlternateCallIndicatorGetListRequest(OCIRequest):
    """
    Get all the Communication Barring Alternate Call Indicator defined in the system.

    The response is either a
    ``SystemCommunicationBarringAlternateCallIndicatorGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringAlternateCallIndicatorModifyRequest(OCIRequest):
    """
    Modify a Communication Barring Alternate Call Indicator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        alternate_call_indicator: alternateCallIndicator
        network_server_alternate_call_indicator: networkServerAlternateCallIndicator
    """

    alternate_call_indicator: str = attr.ib()
    network_server_alternate_call_indicator: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator",
                "alternateCallIndicator",
                str,
                is_required=True,
            ),
            E(
                "network_server_alternate_call_indicator",
                "networkServerAlternateCallIndicator",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCallTypeAddRequest(OCIRequest):
    """
    Add a Communication Barring Call Type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_type: callType
        network_server_call_type: networkServerCallType
    """

    call_type: str = attr.ib()
    network_server_call_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_type", "callType", str, is_required=True),
            E(
                "network_server_call_type",
                "networkServerCallType",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCallTypeDeleteRequest(OCIRequest):
    """
    Delete a Communication Barring Call Type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_type: callType
    """

    call_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_type", "callType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCallTypeGetListRequest(OCIRequest):
    """
    Get all the Communication Barring Call Types defined in the system.

    The response is either a ``SystemCommunicationBarringCallTypeGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCallTypeModifyRequest(OCIRequest):
    """
    Modify a Communication Barring Call Type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_type: callType
        network_server_call_type: networkServerCallType
    """

    call_type: str = attr.ib()
    network_server_call_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_type", "callType", str, is_required=True),
            E("network_server_call_type", "networkServerCallType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaAddRequest(OCIRequest):
    """
    Add a new Communication Barring Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``SystemCommunicationBarringCriteriaAddRequest17()``

    Attributes:
        name: name
        description: description
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_virtual_on_net_call_type: matchVirtualOnNetCallType
        match_public_network: matchPublicNetwork
        match_private_network: matchPrivateNetwork
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
        match_inter_network: matchInterNetwork
        match_inter_hosting_ne: matchInterHostingNE
        match_inter_as: matchInterAS
        match_intra_as: matchIntraAS
        match_charge_calls: matchChargeCalls
        match_no_charge_calls: matchNoChargeCalls
        match_group_calls: matchGroupCalls
        match_enterprise_calls: matchEnterpriseCalls
        match_network_calls: matchNetworkCalls
        match_network_url_calls: matchNetworkURLCalls
        match_repair_calls: matchRepairCalls
        match_emergency_calls: matchEmergencyCalls
        match_internal_calls: matchInternalCalls
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    match_call_type: List[str] = attr.ib(default=None)
    match_alternate_call_indicator: List[str] = attr.ib(default=None)
    match_virtual_on_net_call_type: List[str] = attr.ib(default=None)
    match_public_network: bool = attr.ib()
    match_private_network: bool = attr.ib()
    match_local_category: bool = attr.ib()
    match_national_category: bool = attr.ib()
    match_interlata_category: bool = attr.ib()
    match_intralata_category: bool = attr.ib()
    match_international_category: bool = attr.ib()
    match_private_category: bool = attr.ib()
    match_emergency_category: bool = attr.ib()
    match_other_category: bool = attr.ib()
    match_inter_network: bool = attr.ib()
    match_inter_hosting_ne: bool = attr.ib()
    match_inter_as: bool = attr.ib()
    match_intra_as: bool = attr.ib()
    match_charge_calls: bool = attr.ib()
    match_no_charge_calls: bool = attr.ib()
    match_group_calls: bool = attr.ib()
    match_enterprise_calls: bool = attr.ib()
    match_network_calls: bool = attr.ib()
    match_network_url_calls: bool = attr.ib()
    match_repair_calls: bool = attr.ib()
    match_emergency_calls: bool = attr.ib()
    match_internal_calls: bool = attr.ib()
    time_schedule: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E(
                "match_virtual_on_net_call_type",
                "matchVirtualOnNetCallType",
                str,
                is_array=True,
            ),
            E("match_public_network", "matchPublicNetwork", bool, is_required=True),
            E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
            E("match_inter_network", "matchInterNetwork", bool, is_required=True),
            E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
            E("match_inter_as", "matchInterAS", bool, is_required=True),
            E("match_intra_as", "matchIntraAS", bool, is_required=True),
            E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
            E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
            E("match_group_calls", "matchGroupCalls", bool, is_required=True),
            E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
            E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
            E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
            E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
            E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
            E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaAddRequest17(OCIRequest):
    """
    Add a new Communication Barring Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_virtual_on_net_call_type: matchVirtualOnNetCallType
        match_public_network: matchPublicNetwork
        match_private_network: matchPrivateNetwork
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
        match_inter_network: matchInterNetwork
        match_inter_hosting_ne: matchInterHostingNE
        match_inter_as: matchInterAS
        match_intra_as: matchIntraAS
        match_charge_calls: matchChargeCalls
        match_no_charge_calls: matchNoChargeCalls
        match_group_calls: matchGroupCalls
        match_enterprise_calls: matchEnterpriseCalls
        match_network_calls: matchNetworkCalls
        match_network_url_calls: matchNetworkURLCalls
        match_repair_calls: matchRepairCalls
        match_emergency_calls: matchEmergencyCalls
        match_internal_calls: matchInternalCalls
        match_location: matchLocation
        match_roaming: matchRoaming
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        match_number_portability_status: matchNumberPortabilityStatus
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    match_call_type: List[str] = attr.ib(default=None)
    match_alternate_call_indicator: List[str] = attr.ib(default=None)
    match_virtual_on_net_call_type: List[str] = attr.ib(default=None)
    match_public_network: bool = attr.ib()
    match_private_network: bool = attr.ib()
    match_local_category: bool = attr.ib()
    match_national_category: bool = attr.ib()
    match_interlata_category: bool = attr.ib()
    match_intralata_category: bool = attr.ib()
    match_international_category: bool = attr.ib()
    match_private_category: bool = attr.ib()
    match_emergency_category: bool = attr.ib()
    match_other_category: bool = attr.ib()
    match_inter_network: bool = attr.ib()
    match_inter_hosting_ne: bool = attr.ib()
    match_inter_as: bool = attr.ib()
    match_intra_as: bool = attr.ib()
    match_charge_calls: bool = attr.ib()
    match_no_charge_calls: bool = attr.ib()
    match_group_calls: bool = attr.ib()
    match_enterprise_calls: bool = attr.ib()
    match_network_calls: bool = attr.ib()
    match_network_url_calls: bool = attr.ib()
    match_repair_calls: bool = attr.ib()
    match_emergency_calls: bool = attr.ib()
    match_internal_calls: bool = attr.ib()
    match_location: str = attr.ib()
    match_roaming: str = attr.ib()
    time_schedule: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)
    match_number_portability_status: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E(
                "match_virtual_on_net_call_type",
                "matchVirtualOnNetCallType",
                str,
                is_array=True,
            ),
            E("match_public_network", "matchPublicNetwork", bool, is_required=True),
            E("match_private_network", "matchPrivateNetwork", bool, is_required=True),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
            E("match_inter_network", "matchInterNetwork", bool, is_required=True),
            E("match_inter_hosting_ne", "matchInterHostingNE", bool, is_required=True),
            E("match_inter_as", "matchInterAS", bool, is_required=True),
            E("match_intra_as", "matchIntraAS", bool, is_required=True),
            E("match_charge_calls", "matchChargeCalls", bool, is_required=True),
            E("match_no_charge_calls", "matchNoChargeCalls", bool, is_required=True),
            E("match_group_calls", "matchGroupCalls", bool, is_required=True),
            E("match_enterprise_calls", "matchEnterpriseCalls", bool, is_required=True),
            E("match_network_calls", "matchNetworkCalls", bool, is_required=True),
            E("match_network_url_calls", "matchNetworkURLCalls", bool, is_required=True),
            E("match_repair_calls", "matchRepairCalls", bool, is_required=True),
            E("match_emergency_calls", "matchEmergencyCalls", bool, is_required=True),
            E("match_internal_calls", "matchInternalCalls", bool, is_required=True),
            E("match_location", "matchLocation", str, is_required=True),
            E("match_roaming", "matchRoaming", str, is_required=True),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
            E(
                "match_number_portability_status",
                "matchNumberPortabilityStatus",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaDeleteRequest(OCIRequest):
    """
    Delete an existing Communication Barring Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaGetListRequest(OCIRequest):
    """
    Get the list of all Communication Barring Criteria.

    The response is either a ``SystemCommunicationBarringCriteriaGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaGetRequest(OCIRequest):
    """
    Get an existing Communication Barring Criteria.

    The response is either a ``SystemCommunicationBarringCriteriaGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemCommunicationBarringCriteriaGetRequest17()``

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaGetRequest17(OCIRequest):
    """
    Get an existing Communication Barring Criteria.

    The response is either a ``SystemCommunicationBarringCriteriaGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaGetRequest19sp1(OCIRequest):
    """
    Get an existing Communication Barring Criteria.

    The response is either a ``SystemCommunicationBarringCriteriaGetResponse19sp1()`` or
    an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringDigitPatternCriteriaAddRequest(OCIRequest):
    """
    Add a new Communication Barring Digit Pattern Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        match_digit_pattern: matchDigitPattern
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    match_digit_pattern: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("match_digit_pattern", "matchDigitPattern", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringDigitPatternCriteriaDeleteRequest(OCIRequest):
    """
    Delete an existing Communication Barring Digit Pattern Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringDigitPatternCriteriaGetListRequest(OCIRequest):
    """
    Get the list of all Digit Pattern Criteria defined at the system level.

    The response is either a
    ``SystemCommunicationBarringDigitPatternCriteriaGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringDigitPatternCriteriaGetRequest(OCIRequest):
    """
    Get an existing Communication Barring Digit Pattern Criteria.

    The response is either a
    ``SystemCommunicationBarringDigitPatternCriteriaGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringDigitPatternCriteriaModifyRequest(OCIRequest):
    """
    Modify an existing Communication Barring Digit Pattern Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        add_match_digit_pattern: addMatchDigitPattern
        delete_match_digit_pattern: deleteMatchDigitPattern
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    add_match_digit_pattern: List[str] = attr.ib(default=None)
    delete_match_digit_pattern: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("add_match_digit_pattern", "addMatchDigitPattern", str, is_array=True),
            E(
                "delete_match_digit_pattern",
                "deleteMatchDigitPattern",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringGetRequest(OCIRequest):
    """
    Request the system level data associated with Communication Barring.

    The response is either a ``SystemCommunicationBarringGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringIncomingCriteriaAddRequest(OCIRequest):
    """
    Add a new Communication Barring Incoming Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        match_number_portability_status: matchNumberPortabilityStatus
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    time_schedule: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)
    match_number_portability_status: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
            E(
                "match_number_portability_status",
                "matchNumberPortabilityStatus",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringIncomingCriteriaDeleteRequest(OCIRequest):
    """
    Delete an existing Communication Barring Incoming Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringIncomingCriteriaGetListRequest(OCIRequest):
    """
    Get the list of all Communication Barring Incoming Criteria.

    The response is either a
    ``SystemCommunicationBarringIncomingCriteriaGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringIncomingCriteriaGetRequest(OCIRequest):
    """
    Get an existing Communication Barring Incoming Criteria.

    The response is either a ``SystemCommunicationBarringIncomingCriteriaGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Communication Barring.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        direct_transfer_screening: directTransferScreening
    """

    direct_transfer_screening: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("direct_transfer_screening", "directTransferScreening", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileDeleteRequest(OCIRequest):
    """
    Delete an existing Communication Barring Profile.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetCriteriaUsageListRequest(OCIRequest):
    """
    Get the list of Communication Barring Proifles that uses a specific Communication
    Barring criteria.

    The response is either a
    ``SystemCommunicationBarringProfileGetCriteriaUsageListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest(OCIRequest):
    """
    Get the list of Profiles that use a specific Digit Pattern Criteria.

    The response is either a
    ``SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetIncomingCriteriaUsageListRequest(OCIRequest):
    """
    Get the list of Communication Barring Proifles that uses a specific Communication
    Barring Incoming criteria.

    The response is either a
    ``SystemCommunicationBarringProfileGetIncomingCriteriaUsageListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetListRequest(OCIRequest):
    """
    Get the list of all Communication Barring Profiles.

    The response is either a ``SystemCommunicationBarringProfileGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetRequest(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a ``SystemCommunicationBarringProfileGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemCommunicationBarringProfileGetRequest16()``

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetRequest16(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a ``SystemCommunicationBarringProfileGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetRequest17sp1(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a ``SystemCommunicationBarringProfileGetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetRequest17sp3(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a ``SystemCommunicationBarringProfileGetResponse17sp3()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileGetRequest19sp1(OCIRequest):
    """
    Get an existing Communication Barring Profile.

    The response is either a ``SystemCommunicationBarringProfileGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringServiceProviderGetCriteriaUsageListRequest(OCIRequest):
    """
    Get the list of Service Providers that use a specific Communication Barring Criteria.

    The response is either a
    ``SystemCommunicationBarringServiceProviderGetCriteriaUsageListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringServiceProviderGetIncomingCriteriaUsageListRequest(OCIRequest):
    """
    Get the list of Service Providers that use a specific Communication Barring Incoming
    Criteria.

    The response is either a
    ``SystemCommunicationBarringServiceProviderGetIncomingCriteriaUsageListResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringUserControlGetRequest(OCIRequest):
    """
    Gets the Communication Barring system level settings.

    The response is either ``SystemCommunicationBarringUserControlGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringUserControlModifyRequest(OCIRequest):
    """
    Modifies the system's Communication Barring User-Control settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        enable_lockout: enableLockout
        max_number_of_failed_attempts: maxNumberOfFailedAttempts
        lockout_minutes: lockoutMinutes
    """

    enable_lockout: bool = attr.ib(default=None)
    max_number_of_failed_attempts: int = attr.ib(default=None)
    lockout_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_lockout", "enableLockout", bool),
            E("max_number_of_failed_attempts", "maxNumberOfFailedAttempts", int),
            E("lockout_minutes", "lockoutMinutes", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableFileSystemGetRequest(OCIRequest):
    """
    Request to get the File System parameters.

    The response is either ``SystemConfigurableFileSystemGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableFileSystemModifyRequest(OCIRequest):
    """
    Request to modify File System parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        media_directory: mediaDirectory
        protocol_file: protocolFile
        protocol_web_dav: protocolWebDAV
    """

    media_directory: str = attr.ib(default=None)
    protocol_file: str = attr.ib(default=None)
    protocol_web_dav: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_directory", "mediaDirectory", str),
            E("protocol_file", "protocolFile", str, is_complex=True),  # unknown
            E("protocol_web_dav", "protocolWebDAV", str, is_complex=True),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableTreatmentAddRequest(OCIRequest):
    """
    Add a configurable treatment.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        treatment_id: treatmentId
        charge_indicator: chargeIndicator
        description: description
        access_sip_status_code: accessSIPStatusCode
        access_sip_status_message: accessSIPStatusMessage
        network_sip_status_code: networkSIPStatusCode
        network_sip_status_message: networkSIPStatusMessage
        q850_cause_value: q850CauseValue
        q850_text: q850Text
        access_treatment_audio_file: accessTreatmentAudioFile
        access_treatment_video_file: accessTreatmentVideoFile
        network_treatment_audio_file: networkTreatmentAudioFile
        network_treatment_video_file: networkTreatmentVideoFile
        cdr_termination_cause: cdrTerminationCause
        route_advance: routeAdvance
        internal_release_cause: internalReleaseCause
        access_send_reason_header: accessSendReasonHeader
        network_send_reason_header: networkSendReasonHeader
    """

    treatment_id: str = attr.ib()
    charge_indicator: str = attr.ib()
    description: str = attr.ib(default=None)
    access_sip_status_code: int = attr.ib(default=None)
    access_sip_status_message: str = attr.ib(default=None)
    network_sip_status_code: int = attr.ib(default=None)
    network_sip_status_message: str = attr.ib(default=None)
    q850_cause_value: int = attr.ib(default=None)
    q850_text: str = attr.ib(default=None)
    access_treatment_audio_file: str = attr.ib(default=None)
    access_treatment_video_file: str = attr.ib(default=None)
    network_treatment_audio_file: str = attr.ib(default=None)
    network_treatment_video_file: str = attr.ib(default=None)
    cdr_termination_cause: str = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    internal_release_cause: str = attr.ib(default=None)
    access_send_reason_header: bool = attr.ib(default=None)
    network_send_reason_header: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("treatment_id", "treatmentId", str, is_required=True),
            E("charge_indicator", "chargeIndicator", str, is_required=True),
            E("description", "description", str),
            E("access_sip_status_code", "accessSIPStatusCode", int),
            E("access_sip_status_message", "accessSIPStatusMessage", str),
            E("network_sip_status_code", "networkSIPStatusCode", int),
            E("network_sip_status_message", "networkSIPStatusMessage", str),
            E("q850_cause_value", "q850CauseValue", int),
            E("q850_text", "q850Text", str),
            E("access_treatment_audio_file", "accessTreatmentAudioFile", str),
            E("access_treatment_video_file", "accessTreatmentVideoFile", str),
            E("network_treatment_audio_file", "networkTreatmentAudioFile", str),
            E("network_treatment_video_file", "networkTreatmentVideoFile", str),
            E("cdr_termination_cause", "cdrTerminationCause", str),
            E("route_advance", "routeAdvance", bool),
            E("internal_release_cause", "internalReleaseCause", str),
            E("access_send_reason_header", "accessSendReasonHeader", bool),
            E("network_send_reason_header", "networkSendReasonHeader", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableTreatmentDeleteRequest(OCIRequest):
    """
    Delete a configurable treatment.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        treatment_id: treatmentId
    """

    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableTreatmentGetListRequest(OCIRequest):
    """
    Get a list of configurable treatments.

    The response is either a ``SystemConfigurableTreatmentGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableTreatmentGetRequest(OCIRequest):
    """
    Get all the attributes of a configurable treatment.

    The response is either a ``SystemConfigurableTreatmentGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemConfigurableTreatmentGetRequest16()``

    Attributes:
        treatment_id: treatmentId
    """

    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableTreatmentGetRequest16(OCIRequest):
    """
    Get all the attributes of a configurable treatment.

    The response is either a ``SystemConfigurableTreatmentGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        treatment_id: treatmentId
    """

    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConfigurableTreatmentModifyRequest(OCIRequest):
    """
    Modify the fields for a configurable treatment.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        treatment_id: treatmentId
        charge_indicator: chargeIndicator
        description: description
        access_sip_status_code: accessSIPStatusCode
        access_sip_status_message: accessSIPStatusMessage
        network_sip_status_code: networkSIPStatusCode
        network_sip_status_message: networkSIPStatusMessage
        q850_cause_value: q850CauseValue
        q850_text: q850Text
        access_treatment_audio_file: accessTreatmentAudioFile
        access_treatment_video_file: accessTreatmentVideoFile
        network_treatment_audio_file: networkTreatmentAudioFile
        network_treatment_video_file: networkTreatmentVideoFile
        cdr_termination_cause: cdrTerminationCause
        route_advance: routeAdvance
        internal_release_cause: internalReleaseCause
        access_send_reason_header: accessSendReasonHeader
        network_send_reason_header: networkSendReasonHeader
    """

    treatment_id: str = attr.ib()
    charge_indicator: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    access_sip_status_code: int = attr.ib(default=None)
    access_sip_status_message: str = attr.ib(default=None)
    network_sip_status_code: int = attr.ib(default=None)
    network_sip_status_message: str = attr.ib(default=None)
    q850_cause_value: int = attr.ib(default=None)
    q850_text: str = attr.ib(default=None)
    access_treatment_audio_file: str = attr.ib(default=None)
    access_treatment_video_file: str = attr.ib(default=None)
    network_treatment_audio_file: str = attr.ib(default=None)
    network_treatment_video_file: str = attr.ib(default=None)
    cdr_termination_cause: str = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    internal_release_cause: str = attr.ib(default=None)
    access_send_reason_header: bool = attr.ib(default=None)
    network_send_reason_header: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("treatment_id", "treatmentId", str, is_required=True),
            E("charge_indicator", "chargeIndicator", str),
            E("description", "description", str),
            E("access_sip_status_code", "accessSIPStatusCode", int),
            E("access_sip_status_message", "accessSIPStatusMessage", str),
            E("network_sip_status_code", "networkSIPStatusCode", int),
            E("network_sip_status_message", "networkSIPStatusMessage", str),
            E("q850_cause_value", "q850CauseValue", int),
            E("q850_text", "q850Text", str),
            E("access_treatment_audio_file", "accessTreatmentAudioFile", str),
            E("access_treatment_video_file", "accessTreatmentVideoFile", str),
            E("network_treatment_audio_file", "networkTreatmentAudioFile", str),
            E("network_treatment_video_file", "networkTreatmentVideoFile", str),
            E("cdr_termination_cause", "cdrTerminationCause", str),
            E("route_advance", "routeAdvance", bool),
            E("internal_release_cause", "internalReleaseCause", str),
            E("access_send_reason_header", "accessSendReasonHeader", bool),
            E("network_send_reason_header", "networkSendReasonHeader", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConnectedLineIdentificationPresentationGetRequest(OCIRequest):
    """
    Request the system level data associated with the COLP service.

    The response is either a
    ``SystemConnectedLineIdentificationPresentationGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemConnectedLineIdentificationPresentationModifyRequest(OCIRequest):
    """
    Modify the system level data associated with the COLP Service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        enforce_user_service_assignment: enforceUserServiceAssignment
    """

    enforce_user_service_assignment: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enforce_user_service_assignment", "enforceUserServiceAssignment", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCountryCodeAddRequest(OCIRequest):
    """
    Add a country code to the system.

    If ringPeriodMilliseconds is not specified, a default of 6000 milliseconds is assumed.
    If offHookWarningTimerSeconds is not specified, a default of 30 seconds is assumed.
    If enableNationalPrefix is not specified, a default of false is assumed.  If
    nationalPrefix is not specified, a default of null string is assumed.  If
    disableNationalPrefixForOffNetCalls is not specified, a default of false is assumed.
    The following elements are only used in AS data mode:
    disableNationalPrefixForOffNetCalls.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
        country_name: countryName
        ring_period_milliseconds: ringPeriodMilliseconds
        off_hook_warning_timer_seconds: offHookWarningTimerSeconds
        enable_national_prefix: enableNationalPrefix
        national_prefix: nationalPrefix
        max_call_waiting_tones: maxCallWaitingTones
        time_between_call_waiting_tones_milliseconds:
            timeBetweenCallWaitingTonesMilliseconds
        disable_national_prefix_for_off_net_calls: disableNationalPrefixForOffNetCalls
    """

    country_code: str = attr.ib()
    country_name: str = attr.ib()
    ring_period_milliseconds: int = attr.ib(default=None)
    off_hook_warning_timer_seconds: int = attr.ib(default=None)
    enable_national_prefix: bool = attr.ib(default=None)
    national_prefix: str = attr.ib(default=None)
    max_call_waiting_tones: int = attr.ib(default=None)
    time_between_call_waiting_tones_milliseconds: int = attr.ib(default=None)
    disable_national_prefix_for_off_net_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("country_name", "countryName", str, is_required=True),
            E("ring_period_milliseconds", "ringPeriodMilliseconds", int),
            E("off_hook_warning_timer_seconds", "offHookWarningTimerSeconds", int),
            E("enable_national_prefix", "enableNationalPrefix", bool),
            E("national_prefix", "nationalPrefix", str),
            E("max_call_waiting_tones", "maxCallWaitingTones", int),
            E(
                "time_between_call_waiting_tones_milliseconds",
                "timeBetweenCallWaitingTonesMilliseconds",
                int,
            ),
            E(
                "disable_national_prefix_for_off_net_calls",
                "disableNationalPrefixForOffNetCalls",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCountryCodeDeleteRequest(OCIRequest):
    """
    Delete a country code from the system.

    A country code cannot be deleted if it is the default country code or if any carriers
    or call type mappings are defined against it.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
    """

    country_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCountryCodeGetListRequest(OCIRequest):
    """
    Request data for all country codes.

    The response is either a ``SystemCountryCodeGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCountryCodeModifyRequest(OCIRequest):
    """
    Modify the attributes of a country code.

    If becomeDefaultCountryCode is true, the country code in this request becomes the
    default country code for the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
        ring_period_milliseconds: ringPeriodMilliseconds
        off_hook_warning_timer_seconds: offHookWarningTimerSeconds
        enable_national_prefix: enableNationalPrefix
        national_prefix: nationalPrefix
        become_default_country_code: becomeDefaultCountryCode
        max_call_waiting_tones: maxCallWaitingTones
        time_between_call_waiting_tones_milliseconds:
            timeBetweenCallWaitingTonesMilliseconds
        disable_national_prefix_for_off_net_calls: disableNationalPrefixForOffNetCalls
    """

    country_code: str = attr.ib()
    ring_period_milliseconds: int = attr.ib(default=None)
    off_hook_warning_timer_seconds: int = attr.ib(default=None)
    enable_national_prefix: bool = attr.ib(default=None)
    national_prefix: str = attr.ib(default=None)
    become_default_country_code: bool = attr.ib(default=None)
    max_call_waiting_tones: int = attr.ib(default=None)
    time_between_call_waiting_tones_milliseconds: int = attr.ib(default=None)
    disable_national_prefix_for_off_net_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("ring_period_milliseconds", "ringPeriodMilliseconds", int),
            E("off_hook_warning_timer_seconds", "offHookWarningTimerSeconds", int),
            E("enable_national_prefix", "enableNationalPrefix", bool),
            E("national_prefix", "nationalPrefix", str),
            E("become_default_country_code", "becomeDefaultCountryCode", bool),
            E("max_call_waiting_tones", "maxCallWaitingTones", int),
            E(
                "time_between_call_waiting_tones_milliseconds",
                "timeBetweenCallWaitingTonesMilliseconds",
                int,
            ),
            E(
                "disable_national_prefix_for_off_net_calls",
                "disableNationalPrefixForOffNetCalls",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCrInterfaceGetRequest(OCIRequest):
    """
    Gets the system level attributes of the Cr Interface.

    The response is either a ``SystemCrInterfaceGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCrInterfaceModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Cr Interface.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        cr_audit_enabled: crAuditEnabled
        cr_audit_interval_milliseconds: crAuditIntervalMilliseconds
        cr_audit_timeout_milliseconds: crAuditTimeoutMilliseconds
        cr_connection_enabled: crConnectionEnabled
        cr_connection_timeout_milliseconds: crConnectionTimeoutMilliseconds
    """

    cr_audit_enabled: bool = attr.ib(default=None)
    cr_audit_interval_milliseconds: int = attr.ib(default=None)
    cr_audit_timeout_milliseconds: int = attr.ib(default=None)
    cr_connection_enabled: bool = attr.ib(default=None)
    cr_connection_timeout_milliseconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("cr_audit_enabled", "crAuditEnabled", bool),
            E("cr_audit_interval_milliseconds", "crAuditIntervalMilliseconds", int),
            E("cr_audit_timeout_milliseconds", "crAuditTimeoutMilliseconds", int),
            E("cr_connection_enabled", "crConnectionEnabled", bool),
            E(
                "cr_connection_timeout_milliseconds",
                "crConnectionTimeoutMilliseconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCustomerOriginatedTraceGetRequest(OCIRequest):
    """
    Request the system level data associated with Customer Originated Trace.

    The response is either a ``SystemCustomerOriginatedTraceGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCustomerOriginatedTraceModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Customer Originated Trace.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        screen_malicious_callers: screenMaliciousCallers
    """

    screen_malicious_callers: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("screen_malicious_callers", "screenMaliciousCallers", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDTMFTransmissionGetRequest(OCIRequest):
    """
    Get the system DTMF transmission configurations.

    The response is either ``SystemDTMFTransmissionGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDTMFTransmissionModifyRequest(OCIRequest):
    """
    Modify the DTMF transmission settings.

    The response is either ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        transmission_method: transmissionMethod
        signaling_content_type: signalingContentType
    """

    transmission_method: str = attr.ib(default=None)
    signaling_content_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("transmission_method", "transmissionMethod", str),
            E("signaling_content_type", "signalingContentType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementAutoRebuildConfigGetListRequest(OCIRequest):
    """
    Request the list of OCI request prefixes including if they trigger DM automatic
    rebuild event or not.

    The response is either a ``SystemDeviceManagementAutoRebuildConfigGetListResponse()``
    or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementGetAccessDeviceCountForDeviceTypeRequest(OCIRequest):
    """
    Request the number of access device of a particular device type or all device types if
    deviceType is not specified.

    If countOnlyResetSupportedDevice is true, count only access devices if the device type
    supports reset.  Devices are counted only if their device type supports Device
    Management.  An error is returned if deviceType is specified but does not support
    device management.

    The response is either
    ``SystemDeviceManagementGetAccessDeviceCountForDeviceTypeResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        count_only_reset_supported_device: countOnlyResetSupportedDevice
    """

    device_type: str = attr.ib(default=None)
    count_only_reset_supported_device: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str),
            E(
                "count_only_reset_supported_device",
                "countOnlyResetSupportedDevice",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementGetEventStatusSummaryCountRequest(OCIRequest):
    """
    Request a summary table of the number of events in state 'Pending', 'Queued
    Internally', and 'Completed' in the system per action.

    One row is returned per action.  Actions are as per the
    DeviceManagementEventActionType (ex: Delete, Download, Rebuild, Reset, Upload). The
    state 'Queued Internally' includes total for events with status equal to 'Queued' and
    'In Progress' as per DeviceManagementEventStatus.

    The response is either ``SystemDeviceManagementGetEventStatusSummaryCountResponse()``
    or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementInProgressAndPendingEventCancelRequest(OCIRequest):
    """
    Cancel pending and in progress events.

    Either all events, multiple events, or a list of specified events can be canceled.
    When specifying multiple events, an event must meet all specified criteria to be
    canceled.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        cancel_all_events: cancelAllEvents
        cancel_multiple_events: cancelMultipleEvents
        event_id: eventId
    """

    cancel_all_events: str = attr.ib(default=None)
    cancel_multiple_events: str = attr.ib(default=None)
    event_id: List[int] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("cancel_all_events", "cancelAllEvents", str, is_complex=True),  # unknown
            E(
                "cancel_multiple_events",
                "cancelMultipleEvents",
                str,
                is_complex=True,
            ),  # unknown
            E("event_id", "eventId", int, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagAddRequest(OCIRequest):
    """
    Request to add a static configuration tag.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        system_default_tag_set: systemDefaultTagSet
        tag_set_name: tagSetName
        tag_name: tagName
        tag_value: tagValue
    """

    system_default_tag_set: bool = attr.ib(default=None)
    tag_set_name: str = attr.ib(default=None)
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_default_tag_set", "systemDefaultTagSet", bool),
            E("tag_set_name", "tagSetName", str),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagDeleteListRequest(OCIRequest):
    """
    Request to delete static configuration tags.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        system_default_tag_set: systemDefaultTagSet
        tag_set_name: tagSetName
        tag_name: tagName
    """

    system_default_tag_set: bool = attr.ib(default=None)
    tag_set_name: str = attr.ib(default=None)
    tag_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_default_tag_set", "systemDefaultTagSet", bool),
            E("tag_set_name", "tagSetName", str),
            E("tag_name", "tagName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagGetListRequest(OCIRequest):
    """
    Request to get the list of custom configuration tags managed by the Device Management
    System.

    The response is either ``SystemDeviceManagementTagGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        system_default_tag_set: systemDefaultTagSet
        tag_set_name: tagSetName
    """

    system_default_tag_set: bool = attr.ib(default=None)
    tag_set_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_default_tag_set", "systemDefaultTagSet", bool),
            E("tag_set_name", "tagSetName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagModifyRequest(OCIRequest):
    """
    Request to modify a static configuration tag.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        system_default_tag_set: systemDefaultTagSet
        tag_set_name: tagSetName
        tag_name: tagName
        tag_value: tagValue
    """

    system_default_tag_set: bool = attr.ib(default=None)
    tag_set_name: str = attr.ib(default=None)
    tag_name: str = attr.ib()
    tag_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_default_tag_set", "systemDefaultTagSet", bool),
            E("tag_set_name", "tagSetName", str),
            E("tag_name", "tagName", str, is_required=True),
            E("tag_value", "tagValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagSetAddRequest(OCIRequest):
    """
    Request to add a static configuration tag set.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        tag_set_name: tagSetName
    """

    tag_set_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("tag_set_name", "tagSetName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagSetDeleteRequest(OCIRequest):
    """
    Request to delete a static configuration tag set.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        tag_set_name: tagSetName
    """

    tag_set_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("tag_set_name", "tagSetName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagSetGetListRequest(OCIRequest):
    """
    Request to get the list of custom configuration tag sets managed by the Device
    Management System.

    The response is either ``SystemDeviceManagementTagSetGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementTagSetModifyRequest(OCIRequest):
    """
    Request to modify a static configuration tag set.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        tag_set_name: tagSetName
        new_tag_set_name: newTagSetName
    """

    tag_set_name: str = attr.ib()
    new_tag_set_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("tag_set_name", "tagSetName", str, is_required=True),
            E("new_tag_set_name", "newTagSetName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceProfileAuthenticationLockoutClearAllRequest(OCIRequest):
    """
    Request to clear all device password authentication lockouts in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceProfileAuthenticationPasswordRulesGetRequest(OCIRequest):
    """
    Request to get the system level device profile authentication password rule settings.

    The response is either a
    ``SystemDeviceProfileAuthenticationPasswordRulesGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceProfileAuthenticationPasswordRulesModifyRequest(OCIRequest):
    """
    Request to modify the system level device profile authentication password rule
    settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        device_profile_authentication_lockout_type: deviceProfileAuthenticationLockoutType
        device_profile_temporary_lockout_threshold: deviceProfileTemporaryLockoutThreshold
        device_profile_wait_algorithm: deviceProfileWaitAlgorithm
        device_profile_lockout_fixed_minutes: deviceProfileLockoutFixedMinutes
        device_profile_permanent_lockout_threshold: deviceProfilePermanentLockoutThreshold
    """

    disallow_authentication_name: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    send_permanent_lockout_notification: bool = attr.ib(default=None)
    permanent_lockout_notify_email_address: str = attr.ib(default=None)
    device_profile_authentication_lockout_type: str = attr.ib(default=None)
    device_profile_temporary_lockout_threshold: int = attr.ib(default=None)
    device_profile_wait_algorithm: str = attr.ib(default=None)
    device_profile_lockout_fixed_minutes: str = attr.ib(default=None)
    device_profile_permanent_lockout_threshold: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("disallow_authentication_name", "disallowAuthenticationName", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "device_profile_authentication_lockout_type",
                "deviceProfileAuthenticationLockoutType",
                str,
            ),
            E(
                "device_profile_temporary_lockout_threshold",
                "deviceProfileTemporaryLockoutThreshold",
                int,
            ),
            E("device_profile_wait_algorithm", "deviceProfileWaitAlgorithm", str),
            E(
                "device_profile_lockout_fixed_minutes",
                "deviceProfileLockoutFixedMinutes",
                str,
            ),
            E(
                "device_profile_permanent_lockout_threshold",
                "deviceProfilePermanentLockoutThreshold",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeExportRequest(OCIRequest):
    """
    Request to export an existing Device Type to a Device Type Archive File (DTAF).

    The response is either a ``SystemDeviceTypeExportResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetAvailableListRequest(OCIRequest):
    """
    Requests a list of non-obsolete Identity/device profile types defined in the system.

    It is possible to get either all conference device types or all non-conferernce types.
    This command is similar to the ``SystemSIPDeviceTypeGetListRequest()`` and
    ``SystemMGCPDeviceTypeGetListRequest()`` but gets both SIP and MGCP types.

    The response is either ``SystemDeviceTypeGetlAvailableListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        allow_conference: allowConference
        allow_music_on_hold: allowMusicOnHold
        only_conference: onlyConference
        only_video_capable: onlyVideoCapable
        only_optional_ip_address: onlyOptionalIpAddress
    """

    allow_conference: bool = attr.ib()
    allow_music_on_hold: bool = attr.ib()
    only_conference: bool = attr.ib()
    only_video_capable: bool = attr.ib()
    only_optional_ip_address: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_conference", "allowConference", bool, is_required=True),
            E("allow_music_on_hold", "allowMusicOnHold", bool, is_required=True),
            E("only_conference", "onlyConference", bool, is_required=True),
            E("only_video_capable", "onlyVideoCapable", bool, is_required=True),
            E(
                "only_optional_ip_address",
                "onlyOptionalIpAddress",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetAvailableListRequest14sp1(OCIRequest):
    """
    Requests a list of non-obsolete Identity/device profile types defined in the system.

    It is possible to get either all conference device types or all non-conferernce types.
    This command is similar to the ``SystemSIPDeviceTypeGetListRequest()`` and
    ``SystemMGCPDeviceTypeGetListRequest()`` but gets both SIP and MGCP types.

    The response is either ``SystemDeviceTypeGetlAvailableListResponse14sp1()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemDeviceTypeGetAvailableListRequest14sp3()``

    Attributes:
        allow_conference: allowConference
        allow_music_on_hold: allowMusicOnHold
        only_conference: onlyConference
        only_video_capable: onlyVideoCapable
        only_optional_ip_address: onlyOptionalIpAddress
    """

    allow_conference: bool = attr.ib()
    allow_music_on_hold: bool = attr.ib()
    only_conference: bool = attr.ib()
    only_video_capable: bool = attr.ib()
    only_optional_ip_address: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_conference", "allowConference", bool, is_required=True),
            E("allow_music_on_hold", "allowMusicOnHold", bool, is_required=True),
            E("only_conference", "onlyConference", bool, is_required=True),
            E("only_video_capable", "onlyVideoCapable", bool, is_required=True),
            E(
                "only_optional_ip_address",
                "onlyOptionalIpAddress",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetAvailableListRequest14sp3(OCIRequest):
    """
    Requests a list of non-obsolete Identity/device profile types defined in the system.

    It is possible to get either all conference device types or all non-conferernce types.
    This command is similar to the ``SystemSIPDeviceTypeGetListRequest()`` and
    ``SystemMGCPDeviceTypeGetListRequest()`` but gets both SIP and MGCP types.

    The response is either ``SystemDeviceTypeGetlAvailableListResponse14sp1()`` or
    ``ErrorResponse()``. Replaced by: ``SystemDeviceTypeGetAvailableListRequest19()``.

    Attributes:
        allow_conference: allowConference
        allow_music_on_hold: allowMusicOnHold
        only_conference: onlyConference
        only_video_capable: onlyVideoCapable
        only_optional_ip_address: onlyOptionalIpAddress
    """

    allow_conference: bool = attr.ib()
    allow_music_on_hold: bool = attr.ib()
    only_conference: bool = attr.ib()
    only_video_capable: bool = attr.ib()
    only_optional_ip_address: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_conference", "allowConference", bool, is_required=True),
            E("allow_music_on_hold", "allowMusicOnHold", bool, is_required=True),
            E("only_conference", "onlyConference", bool, is_required=True),
            E("only_video_capable", "onlyVideoCapable", bool, is_required=True),
            E(
                "only_optional_ip_address",
                "onlyOptionalIpAddress",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetAvailableListRequest19(OCIRequest):
    """
    Requests a list of non-obsolete Identity/device profile types defined in the system.

    It is possible to get either all conference device types or all non-conferernce types.
    This command is similar to the ``SystemSIPDeviceTypeGetListRequest()`` and
    ``SystemMGCPDeviceTypeGetListRequest()`` but gets both SIP and MGCP types.

    The response is either ``SystemDeviceTypeGetlAvailableListResponse19()`` or
    ``ErrorResponse()``.

    Attributes:
        allow_conference: allowConference
        allow_music_on_hold: allowMusicOnHold
        only_conference: onlyConference
        only_video_capable: onlyVideoCapable
        only_optional_ip_address: onlyOptionalIpAddress
    """

    allow_conference: bool = attr.ib()
    allow_music_on_hold: bool = attr.ib()
    only_conference: bool = attr.ib()
    only_video_capable: bool = attr.ib()
    only_optional_ip_address: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("allow_conference", "allowConference", bool, is_required=True),
            E("allow_music_on_hold", "allowMusicOnHold", bool, is_required=True),
            E("only_conference", "onlyConference", bool, is_required=True),
            E("only_video_capable", "onlyVideoCapable", bool, is_required=True),
            E(
                "only_optional_ip_address",
                "onlyOptionalIpAddress",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetRequest(OCIRequest):
    """
    Requests the information about the specified device type without regard to whether the
    type is SIP or MGCP.

    The response is either ``SystemDeviceTypeGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemDeviceTypeGetRequest14sp3()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetRequest14sp3(OCIRequest):
    """
    Requests the information about the specified device type without regard to whether the
    type is SIP or MGCP.

    The response is either ``SystemDeviceTypeGetResponse14sp3()`` or ``ErrorResponse()``.

    Replaced By: ``SystemDeviceTypeGetRequest14sp6()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetRequest14sp6(OCIRequest):
    """
    Requests the information about the specified device type without regard to whether the
    type is SIP or MGCP.

    The response is either ``SystemDeviceTypeGetResponse14sp6()`` or ``ErrorResponse()``.
    Replaced by: ``SystemDeviceTypeGetRequest16()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetRequest16(OCIRequest):
    """
    Requests the information about the specified device type without regard to whether the
    type is SIP or MGCP.

    The response is either ``SystemDeviceTypeGetResponse16()`` or ``ErrorResponse()``.
    Replaced by: ``SystemDeviceTypeGetRequest16sp1()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetRequest16sp1(OCIRequest):
    """
    Replaced By ``SystemDeviceTypeGetRequest18()``.

    Requests the information about the specified device type without regard to whether the
    type is SIP or MGCP.

    The response is either ``SystemDeviceTypeGetResponse16sp1()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetRequest18(OCIRequest):
    """
    Requests the information about the specified device type without regard to whether the
    type is SIP or MGCP.

    The response is either ``SystemDeviceTypeGetResponse18()`` or ``ErrorResponse()``.
    Note: The elements deviceTypeConfigurationOption applies to SIP device types only.
    Therefore, only present in the response when the device type is SIP. Replaced by:
    ``SystemSIPDeviceTypeGetRequest19()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeGetRequest19(OCIRequest):
    """
    Requests the information about the specified device type without regard to whether the
    type is SIP or MGCP.

    The response is either ``SystemDeviceTypeGetResponse19()`` or ``ErrorResponse()``.
    Note: The elements deviceTypeConfigurationOption and staticLineOrdering apply to SIP
    device types only.  Therefore, only present in the response when the device type is
    SIP.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceTypeImportRequest(OCIRequest):
    """
    Request to import a Device Type Archive File (DTAF) as a new Device Type.

    The URL supports the HTTP and the FILE protocols.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        file: file
    """

    file: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file", "file", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyAddAccessCodeRequest(OCIRequest):
    """
    Request to add a system-level Dial Plan Access Code and its all attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        access_code: accessCode
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    access_code: str = attr.ib()
    include_code_for_network_translations_and_routing: bool = attr.ib()
    include_code_for_screening_services: bool = attr.ib()
    enable_secondary_dial_tone: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_code", "accessCode", str, is_required=True),
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
                is_required=True,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
                is_required=True,
            ),
            E(
                "enable_secondary_dial_tone",
                "enableSecondaryDialTone",
                bool,
                is_required=True,
            ),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyDeleteAccessCodeRequest(OCIRequest):
    """
    Request to delete a system-level Dial Plan Access Code and its all attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        access_code: accessCode
    """

    access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_code", "accessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyGetAccessCodeListRequest(OCIRequest):
    """
    Request the system level Access Codes data associated with Dial Plan Policy.

    The response is either a ``SystemDialPlanPolicyGetAccessCodeListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyGetAccessCodeRequest(OCIRequest):
    """
    Request access code data associated with system level Dial Plan Policy access codes.

    The response is either a ``SystemDialPlanPolicyGetAccessCodeResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        access_code: accessCode
    """

    access_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_code", "accessCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyGetRequest(OCIRequest):
    """
    Request the system level data associated with Dial Plan Policy.

    The response is either a ``SystemDialPlanPolicyGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemDialPlanPolicyGetRequest17()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyGetRequest17(OCIRequest):
    """
    Request the system level data associated with Dial Plan Policy.

    The response is either a ``SystemDialPlanPolicyGetResponse17()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyModifyAccessCodeRequest(OCIRequest):
    """
    Request to modify a system-level Dial Plan Access Code and its attribues.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        access_code: accessCode
        include_code_for_network_translations_and_routing:
            includeCodeForNetworkTranslationsAndRouting
        include_code_for_screening_services: includeCodeForScreeningServices
        enable_secondary_dial_tone: enableSecondaryDialTone
        description: description
    """

    access_code: str = attr.ib()
    include_code_for_network_translations_and_routing: bool = attr.ib(default=None)
    include_code_for_screening_services: bool = attr.ib(default=None)
    enable_secondary_dial_tone: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_code", "accessCode", str, is_required=True),
            E(
                "include_code_for_network_translations_and_routing",
                "includeCodeForNetworkTranslationsAndRouting",
                bool,
            ),
            E(
                "include_code_for_screening_services",
                "includeCodeForScreeningServices",
                bool,
            ),
            E("enable_secondary_dial_tone", "enableSecondaryDialTone", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialPlanPolicyModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Dial Plan Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        requires_access_code_for_public_calls: requiresAccessCodeForPublicCalls
        allow_e164_public_calls: allowE164PublicCalls
        prefer_e164_number_format_for_callback_services:
            preferE164NumberFormatForCallbackServices
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    requires_access_code_for_public_calls: bool = attr.ib(default=None)
    allow_e164_public_calls: bool = attr.ib(default=None)
    prefer_e164_number_format_for_callback_services: bool = attr.ib(default=None)
    public_digit_map: str = attr.ib(default=None)
    private_digit_map: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "requires_access_code_for_public_calls",
                "requiresAccessCodeForPublicCalls",
                bool,
            ),
            E("allow_e164_public_calls", "allowE164PublicCalls", bool),
            E(
                "prefer_e164_number_format_for_callback_services",
                "preferE164NumberFormatForCallbackServices",
                bool,
            ),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialableCallerIDCriteriaAddRequest(OCIRequest):
    """
    Add a new Dialable Caller ID Criteria.

    Criteria are added at the bottom of the list with the lowest priority.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    prefix_digits: str = attr.ib(default=None)
    match_call_type: List[str] = attr.ib(default=None)
    match_alternate_call_indicator: List[str] = attr.ib(default=None)
    match_local_category: bool = attr.ib()
    match_national_category: bool = attr.ib()
    match_interlata_category: bool = attr.ib()
    match_intralata_category: bool = attr.ib()
    match_international_category: bool = attr.ib()
    match_private_category: bool = attr.ib()
    match_emergency_category: bool = attr.ib()
    match_other_category: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E("match_call_type", "matchCallType", str, is_array=True),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                str,
                is_array=True,
            ),
            E("match_local_category", "matchLocalCategory", bool, is_required=True),
            E(
                "match_national_category",
                "matchNationalCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_interlata_category",
                "matchInterlataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_intralata_category",
                "matchIntralataCategory",
                bool,
                is_required=True,
            ),
            E(
                "match_international_category",
                "matchInternationalCategory",
                bool,
                is_required=True,
            ),
            E("match_private_category", "matchPrivateCategory", bool, is_required=True),
            E(
                "match_emergency_category",
                "matchEmergencyCategory",
                bool,
                is_required=True,
            ),
            E("match_other_category", "matchOtherCategory", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialableCallerIDCriteriaDeleteRequest(OCIRequest):
    """
    Delete a Dialable Caller ID Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialableCallerIDCriteriaGetRequest(OCIRequest):
    """
    Get an existing Dialable Caller ID Criteria.

    The response is either a ``SystemDialableCallerIDCriteriaGetRequest()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialableCallerIDGetRequest(OCIRequest):
    """
    Get the system level Dialable Caller ID criteria list.

    The response is either a ``SystemDialableCallerIDGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDigitCollectionGetRequest13mp4(OCIRequest):
    """
    Request the system's digit collection attributes.

    The response is either a ``SystemDigitCollectionGetResponse13mp4()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDigitCollectionModifyRequest(OCIRequest):
    """
    Modifies the system's digit collection attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        access_code: accessCode
        public_digit_map: publicDigitMap
        private_digit_map: privateDigitMap
    """

    access_code: str = attr.ib(default=None)
    public_digit_map: str = attr.ib(default=None)
    private_digit_map: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("access_code", "accessCode", str),
            E("public_digit_map", "publicDigitMap", str),
            E("private_digit_map", "privateDigitMap", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDnGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all DNs in the system.

    The response is either ``SystemDnGetSummaryListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDnGetUtilizationListRequest(OCIRequest):
    """
    Request a list of DN utilizations by service providers.

    The response is either ``SystemDnUtilizationGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDnGetUtilizationRequest(OCIRequest):
    """
    Get the utilization of a single DN.

    The response is either ``SystemDnGetUtilizationResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemDnGetUtilizationRequest14sp3()``

    Attributes:
        phone_number: phoneNumber
    """

    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDnGetUtilizationRequest14sp3(OCIRequest):
    """
    Get the utilization of a single DN.

    The response is either ``SystemDnGetUtilizationResponse14sp3()`` or
    ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
    """

    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDomainAddRequest(OCIRequest):
    """
    Add a system domain to the system.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        domain: domain
    """

    domain: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("domain", "domain", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDomainDeleteRequest(OCIRequest):
    """
    Delete a system domain from the system.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        domain: domain
    """

    domain: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("domain", "domain", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDomainGetAssignedServiceProviderListRequest(OCIRequest):
    """
    Request a list of service providers that have a given domain assigned.

    The response is either ``SystemDomainGetAssignedServiceProviderListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        domain: domain
    """

    domain: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("domain", "domain", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDomainGetListRequest(OCIRequest):
    """
    Requests the list of all system-level domain names.

    The response is either ``SystemDomainGetListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDomainParametersGetRequest(OCIRequest):
    """
    Request to get the list of system Domain parameters.

    The response is either ``SystemDomainParametersGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDomainParametersModifyRequest(OCIRequest):
    """
    Request to modify system Domain parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        use_alias_for_domain: useAliasForDomain
        default_domain: defaultDomain
    """

    use_alias_for_domain: bool = attr.ib(default=None)
    default_domain: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_alias_for_domain", "useAliasForDomain", bool),
            E("default_domain", "defaultDomain", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemEmergencyZonesGetRequest(OCIRequest):
    """
    Request the system level data associated with Emergency Zones.

    The response is either a ``SystemEmergencyZonesGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemEmergencyZonesModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Emergency Zones.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        default_from_address: defaultFromAddress
    """

    default_from_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemEnhancedCallLogsGetRequest(OCIRequest):
    """
    Request the system level data associated with Enhanced Call Logs.

    The response is either a ``SystemEnhancedCallLogsGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemEnhancedCallLogsGetRequest17sp4(OCIRequest):
    """
    Request the system level data associated with Enhanced Call Logs.

    The response is either a ``SystemEnhancedCallLogsGetResponse17sp4()`` or an
    ``ErrorResponse()``. Replaced by:``SystemEnhancedCallLogsGetRequest20sp1()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemEnhancedCallLogsGetRequest20sp1(OCIRequest):
    """
    Request the system level data associated with Enhanced Call Logs.

    The response is either a ``SystemEnhancedCallLogsGetResponse20sp1()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemEnhancedCallLogsModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Enhanced Call Logs.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: isSendEnabled server1NetAddress
    server1SendPort server1RetrievePort server2NetAddress server2SendPort
    server2RetrievePort sharedSecret retransmissionDelayMilliSeconds maxTransmissions
    soapTimeoutSeconds useDBS eclQueryApplicationURL eclQueryDataRepositoryURL

    Attributes:
        is_send_enabled: isSendEnabled
        server1_net_address: server1NetAddress
        server1_send_port: server1SendPort
        server1_retrieve_port: server1RetrievePort
        server2_net_address: server2NetAddress
        server2_send_port: server2SendPort
        server2_retrieve_port: server2RetrievePort
        shared_secret: sharedSecret
        retransmission_delay_milli_seconds: retransmissionDelayMilliSeconds
        max_transmissions: maxTransmissions
        soap_timeout_seconds: soapTimeoutSeconds
        use_dbs: useDBS
        max_non_paged_response_size: maxNonPagedResponseSize
        ecl_query_application_url: eclQueryApplicationURL
        ecl_query_data_repository_url: eclQueryDataRepositoryURL
    """

    is_send_enabled: bool = attr.ib(default=None)
    server1_net_address: str = attr.ib(default=None)
    server1_send_port: int = attr.ib(default=None)
    server1_retrieve_port: int = attr.ib(default=None)
    server2_net_address: str = attr.ib(default=None)
    server2_send_port: int = attr.ib(default=None)
    server2_retrieve_port: int = attr.ib(default=None)
    shared_secret: str = attr.ib(default=None)
    retransmission_delay_milli_seconds: int = attr.ib(default=None)
    max_transmissions: int = attr.ib(default=None)
    soap_timeout_seconds: int = attr.ib(default=None)
    use_dbs: bool = attr.ib(default=None)
    max_non_paged_response_size: int = attr.ib(default=None)
    ecl_query_application_url: str = attr.ib(default=None)
    ecl_query_data_repository_url: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_send_enabled", "isSendEnabled", bool),
            E("server1_net_address", "server1NetAddress", str),
            E("server1_send_port", "server1SendPort", int),
            E("server1_retrieve_port", "server1RetrievePort", int),
            E("server2_net_address", "server2NetAddress", str),
            E("server2_send_port", "server2SendPort", int),
            E("server2_retrieve_port", "server2RetrievePort", int),
            E("shared_secret", "sharedSecret", str),
            E(
                "retransmission_delay_milli_seconds",
                "retransmissionDelayMilliSeconds",
                int,
            ),
            E("max_transmissions", "maxTransmissions", int),
            E("soap_timeout_seconds", "soapTimeoutSeconds", int),
            E("use_dbs", "useDBS", bool),
            E("max_non_paged_response_size", "maxNonPagedResponseSize", int),
            E("ecl_query_application_url", "eclQueryApplicationURL", str),
            E("ecl_query_data_repository_url", "eclQueryDataRepositoryURL", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExecutiveGetRequest(OCIRequest):
    """
    Request to get the Executive system parameters.

    The response is either ``SystemExecutiveGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExecutiveModifyRequest(OCIRequest):
    """
    Request to modify the Executive system parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        treat_virtual_on_net_calls_as_internal: treatVirtualOnNetCallsAsInternal
    """

    treat_virtual_on_net_calls_as_internal: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "treat_virtual_on_net_calls_as_internal",
                "treatVirtualOnNetCallsAsInternal",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExpensiveCallNotificationGetRequest(OCIRequest):
    """
    Request to get the expensive call notification service parameters.

    The response is either a ``SystemExpensiveCallNotificationGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExpensiveCallNotificationModifyRequest(OCIRequest):
    """
    Modify the expensive call notification service parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        enable_post_announcement_delay_timer: enablePostAnnouncementDelayTimer
        post_announcement_delay_seconds: postAnnouncementDelaySeconds
    """

    enable_post_announcement_delay_timer: bool = attr.ib(default=None)
    post_announcement_delay_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enable_post_announcement_delay_timer",
                "enablePostAnnouncementDelayTimer",
                bool,
            ),
            E("post_announcement_delay_seconds", "postAnnouncementDelaySeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExpensiveCallTypeAddRequest(OCIRequest):
    """
    Add an alternate call indicator to the list of expensive alternate call indicators.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        alternate_call_indicator: alternateCallIndicator
        treatment_audio_file: treatmentAudioFile
    """

    alternate_call_indicator: str = attr.ib()
    treatment_audio_file: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator",
                "alternateCallIndicator",
                str,
                is_required=True,
            ),
            E("treatment_audio_file", "treatmentAudioFile", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExpensiveCallTypeDeleteRequest(OCIRequest):
    """
    Delete an alternate call indicator from the list of expensive alternate call
    indicators.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        alternate_call_indicator: alternateCallIndicator
    """

    alternate_call_indicator: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator",
                "alternateCallIndicator",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExpensiveCallTypeGetListRequest(OCIRequest):
    """
    Request to get the list of expensive alternate call indicators in the system.

    The response is either a ``SystemExpensiveCallTypeGetListResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemExpensiveCallTypeGetListRequest16sp1()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExpensiveCallTypeGetListRequest16sp1(OCIRequest):
    """
    Request to get the list of expensive alternate call indicators in the system.

    The response is either a ``SystemExpensiveCallTypeGetListResponse16sp1()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExpensiveCallTypeModifyRequest(OCIRequest):
    """
    Modify an existing call indicator in the list of expensive alternate call indicators.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        alternate_call_indicator: alternateCallIndicator
        treatment_audio_file: treatmentAudioFile
    """

    alternate_call_indicator: str = attr.ib()
    treatment_audio_file: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "alternate_call_indicator",
                "alternateCallIndicator",
                str,
                is_required=True,
            ),
            E("treatment_audio_file", "treatmentAudioFile", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExportAddressingDataRequest(OCIRequest):
    """
    Request to export Application Server addressing data, such as DNs, extensions, alias
    and user ids to a file so they can be uploaded to a Network Server.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        file_name: fileName
    """

    file_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_name", "fileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExportBroadCloudDataRequest(OCIRequest):
    """
    Request to export all users that have BroadCloud services, such as user profile
    information and BroadCloud services related information for that user to a file so
    they can be uploaded to a Messaging Server.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        file_name: fileName
    """

    file_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_name", "fileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExportSubscriberRequest(OCIRequest):
    """
    Request subscribers be exported to files on the AS filesystem.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. *****
    Warning *****: This activity should only be done during non-busy hours on the
    secondary provisioning server because this may cause large amounts of data to be
    dumped to disk and it may take some time to execute.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExtensionLengthGetRequest(OCIRequest):
    """
    Request the system's extension range.

    The response is either a ``SystemExtensionLengthGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExtensionLengthModifyRequest(OCIRequest):
    """
    Modify the group's extension length range.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        min_extension_length: minExtensionLength
        max_extension_length: maxExtensionLength
    """

    min_extension_length: int = attr.ib(default=None)
    max_extension_length: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("min_extension_length", "minExtensionLength", int),
            E("max_extension_length", "maxExtensionLength", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalAuthenticationAddACLEntryRequest(OCIRequest):
    """
    Add an entry to the external authentication access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalAuthenticationAddACLEntryRequest14sp2(OCIRequest):
    """
    Add an entry to the external authentication access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalAuthenticationDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the external authentication access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalAuthenticationDeleteACLEntryRequest14sp2(OCIRequest):
    """
    Delete an entry from the external authentication access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalAuthenticationGetACLListRequest(OCIRequest):
    """
    Get the external authentication access control list.

    The response is either ``SystemExternalAuthenticationGetACLListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalAuthenticationModifyACLEntryRequest(OCIRequest):
    """
    Modify an entry from the external authentication access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalAuthenticationModifyACLEntryRequest14sp2(OCIRequest):
    """
    Modify an entry from the external authentication access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalEmergencyRoutingParametersGetRequest13mp13(OCIRequest):
    """
    Request to get the list of External Emergency Routing system parameters.

    The response is either ``SystemExternalEmergencyRoutingParametersGetResponse13mp13()``
    or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemExternalEmergencyRoutingParametersModifyRequest13mp13(OCIRequest):
    """
    Request to modify Call External Emergency Routing system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_uri: serviceURI
        default_emergency_number: defaultEmergencyNumber
        is_active: isActive
        supports_dnssrv: supportsDNSSRV
        connection_timeout_seconds: connectionTimeoutSeconds
    """

    service_uri: str = attr.ib(default=None)
    default_emergency_number: str = attr.ib(default=None)
    is_active: bool = attr.ib(default=None)
    supports_dnssrv: bool = attr.ib(default=None)
    connection_timeout_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_uri", "serviceURI", str),
            E("default_emergency_number", "defaultEmergencyNumber", str),
            E("is_active", "isActive", bool),
            E("supports_dnssrv", "supportsDNSSRV", bool),
            E("connection_timeout_seconds", "connectionTimeoutSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFeatureAccessCodeGetListRequest(OCIRequest):
    """
    Request to get list of default Feature Access Codes defined on system level.

    The response is either ``SystemFeatureAccessCodeGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFeatureAccessCodeGetListRequest20(OCIRequest):
    """
    Request to get list of default Feature Access Codes defined on system level.

    The response is either ``SystemFeatureAccessCodeGetListResponse20()`` or
    ``ErrorResponse()``. In release 20 the "Call Recording" FAC name is changed to "Call
    Recording - Start". Replaced by: ``SystemFeatureAccessCodeGetListRequest21()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFeatureAccessCodeGetListRequest21(OCIRequest):
    """
    Request to get list of default Feature Access Codes defined on system level.

    The response is either ``SystemFeatureAccessCodeGetListResponse20()`` or
    ``ErrorResponse()``. In release 20 the "Call Recording" FAC name is changed to "Call
    Recording - Start".
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileGetContentRequest(OCIRequest):
    """
    Requests the contents of a file.

    The response is either a ``SystemFileGetContentResponse()`` or an ``ErrorResponse()``.

    Attributes:
        file_name: fileName
    """

    file_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_name", "fileName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceDeleteRequest(OCIRequest):
    """
    Delete a file repository.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceGetListRequest(OCIRequest):
    """
    Request the list of file repositories in the system.

    The response is either a ``SystemFileRepositoryDeviceGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceGetRequest(OCIRequest):
    """
    Request to get the file repository information.

    The response is either ``SystemFileRepositoryDeviceGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceGetRequest16(OCIRequest):
    """
    Request to get the file repository information.

    The response is either ``SystemFileRepositoryDeviceGetResponse16()`` or
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceGetRequest20(OCIRequest):
    """
    Request to get the file repository information.

    The response is either ``SystemFileRepositoryDeviceGetResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceModifyRequest(OCIRequest):
    """
    Modify a file repository.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
        root_directory: rootDirectory
        secure: secure
        net_address: netAddress
        ftp_passive: ftpPassive
        protocol: protocol
        port: port
        ftp_remote_verification: ftpRemoteVerification
    """

    name: str = attr.ib()
    root_directory: str = attr.ib(default=None)
    secure: bool = attr.ib(default=None)
    net_address: str = attr.ib(default=None)
    ftp_passive: bool = attr.ib(default=None)
    protocol: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    ftp_remote_verification: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("root_directory", "rootDirectory", str),
            E("secure", "secure", bool),
            E("net_address", "netAddress", str),
            E("ftp_passive", "ftpPassive", bool),
            E("protocol", "protocol", str),
            E("port", "port", int),
            E("ftp_remote_verification", "ftpRemoteVerification", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceUserAddRequest(OCIRequest):
    """
    Add a new file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        file_repository_name: fileRepositoryName
        user_name: userName
        password: password
        allow_put: allowPut
        allow_delete: allowDelete
        allow_get: allowGet
    """

    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()
    password: str = attr.ib()
    allow_put: bool = attr.ib()
    allow_delete: bool = attr.ib()
    allow_get: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
            E("password", "password", str, is_required=True),
            E("allow_put", "allowPut", bool, is_required=True),
            E("allow_delete", "allowDelete", bool, is_required=True),
            E("allow_get", "allowGet", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceUserDeleteRequest(OCIRequest):
    """
    Delete a file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        file_repository_name: fileRepositoryName
        user_name: userName
    """

    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceUserGetListRequest(OCIRequest):
    """
    Request the list of users for a file repository in the system.

    The response is either a ``SystemFileRepositoryDeviceUserGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        file_repository_name: fileRepositoryName
    """

    file_repository_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceUserGetRequest(OCIRequest):
    """
    Request a user of a file repository in the system.

    The response is either a ``SystemFileRepositoryDeviceUserGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        file_repository_name: fileRepositoryName
        user_name: userName
    """

    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceUserModifyRequest(OCIRequest):
    """
    Modify a file repository user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        file_repository_name: fileRepositoryName
        user_name: userName
        password: password
        allow_put: allowPut
        allow_delete: allowDelete
        allow_get: allowGet
    """

    file_repository_name: str = attr.ib()
    user_name: str = attr.ib()
    password: str = attr.ib(default=None)
    allow_put: bool = attr.ib(default=None)
    allow_delete: bool = attr.ib(default=None)
    allow_get: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("file_repository_name", "fileRepositoryName", str, is_required=True),
            E("user_name", "userName", str, is_required=True),
            E("password", "password", str),
            E("allow_put", "allowPut", bool),
            E("allow_delete", "allowDelete", bool),
            E("allow_get", "allowGet", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGeographicRedundancyPeerSipConnectionMonitoringGetRequest(OCIRequest):
    """
    Request to get the list of Peer SIP Connection system parameters The response is a
    ``SystemGeographicRedundancyPeerSipConnectionMonitoringGetResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGeographicRedundancyPeerSipConnectionMonitoringModifyRequest(OCIRequest):
    """
    Modify the list of Peer SIP Connection Monitoring system parameters The response is
    either a ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        enabled: enabled
        heartbeat_interval: heartbeatInterval
        heartbeat_timeout: heartbeatTimeout
    """

    enabled: bool = attr.ib(default=None)
    heartbeat_interval: int = attr.ib(default=None)
    heartbeat_timeout: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enabled", "enabled", bool),
            E("heartbeat_interval", "heartbeatInterval", int),
            E("heartbeat_timeout", "heartbeatTimeout", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGeographicRedundancyProxyGetRequest(OCIRequest):
    """
    Request to get the list of Geographic Redundancy Proxy system parameters The response
    is a ``SystemGeographicRedundancyProxyGetResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGeographicRedundancyProxyModifyRequest(OCIRequest):
    """
    Modify the list of Geographic Redundancy Proxysystem parameters The response is either
    a ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        enabled: enabled
    """

    enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enabled", "enabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGeographicRedundancyUnreachableFromPrimaryGetUserListRequest(OCIRequest):
    """
    Get the list of users that are unreachable from the primary application server.

    The response is a
    ``SystemGeographicRedundancyUnreachableFromPrimaryGetUserListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGroupNightForwardingGetRequest(OCIRequest):
    """
    Request to get the Group Night Forwarding system parameters.

    The response is either ``SystemGroupNightForwardingGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGroupNightForwardingModifyRequest(OCIRequest):
    """
    Request to modify the Group Night Forwarding system parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        night_forward_group_calls_within_enterprise:
            nightForwardGroupCallsWithinEnterprise
    """

    night_forward_group_calls_within_enterprise: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "night_forward_group_calls_within_enterprise",
                "nightForwardGroupCallsWithinEnterprise",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHolidayScheduleDeleteRequest(OCIRequest):
    """
    Delete a system holiday schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        holiday_schedule_name: holidayScheduleName
    """

    holiday_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHolidayScheduleGetListRequest(OCIRequest):
    """
    Request a list of all system holiday schedules.

    The response is either a ``SystemHolidayScheduleGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHolidayScheduleGetRequest(OCIRequest):
    """
    Get a system holiday schedule.

    The response is either a ``SystemHolidayScheduleGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        holiday_schedule_name: holidayScheduleName
    """

    holiday_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHomeNetworkAddRequest(OCIRequest):
    """
    Add a Home Network.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        msc_address: mscAddress
    """

    msc_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("msc_address", "mscAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHomeNetworkDeleteRequest(OCIRequest):
    """
    Delete a Home Network.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        msc_address: mscAddress
    """

    msc_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("msc_address", "mscAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHuntGroupGetRequest(OCIRequest):
    """
    Request the system level data associated with Hunt Group.

    The response is either a ``SystemHuntGroupGetResponse()`` or an ``ErrorResponse()``.
    Replaced by: ``SystemHuntGroupGetRequest17()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHuntGroupGetRequest17(OCIRequest):
    """
    Request the system level data associated with Hunt Group.

    The response is either a ``SystemHuntGroupGetResponse()`` or an ``ErrorResponse()``.
    Replaced by ``SystemHuntGroupGetRequest21()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHuntGroupGetRequest21(OCIRequest):
    """
    Request the system level data associated with Hunt Group.

    The response is either a ``SystemHuntGroupGetResponse21()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHuntGroupModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Hunt Group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``SystemHuntGroupModifyRequest21()``

    Attributes:
        anonymous_instead_of_private_clid: anonymousInsteadOfPrivateCLID
        remove_hunt_group_name_from_clid: removeHuntGroupNameFromCLID
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
    """

    anonymous_instead_of_private_clid: bool = attr.ib(default=None)
    remove_hunt_group_name_from_clid: bool = attr.ib(default=None)
    uniform_call_distribution_policy_scope: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "anonymous_instead_of_private_clid",
                "anonymousInsteadOfPrivateCLID",
                bool,
            ),
            E("remove_hunt_group_name_from_clid", "removeHuntGroupNameFromCLID", bool),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHuntGroupModifyRequest21(OCIRequest):
    """
    Modify the system level data associated with Hunt Group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        remove_hunt_group_name_from_clid: removeHuntGroupNameFromCLID
        uniform_call_distribution_policy_scope: uniformCallDistributionPolicyScope
        allow_agent_device_initiated_forward: allowAgentDeviceInitiatedForward
    """

    remove_hunt_group_name_from_clid: bool = attr.ib(default=None)
    uniform_call_distribution_policy_scope: str = attr.ib(default=None)
    allow_agent_device_initiated_forward: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("remove_hunt_group_name_from_clid", "removeHuntGroupNameFromCLID", bool),
            E(
                "uniform_call_distribution_policy_scope",
                "uniformCallDistributionPolicyScope",
                str,
            ),
            E(
                "allow_agent_device_initiated_forward",
                "allowAgentDeviceInitiatedForward",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInCallServiceActivationGetRequest(OCIRequest):
    """
    Request the system's DTMF based in-call service activation trigger attributes.

    The response is either a ``SystemInCallServiceActivationGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemInCallServiceActivationGetRequest17()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInCallServiceActivationGetRequest17(OCIRequest):
    """
    Request the system's DTMF based in-call service activation trigger attributes.

    The response is either a ``SystemInCallServiceActivationGetResponse17()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInCallServiceActivationModifyRequest(OCIRequest):
    """
    Modifies the system's DTMF based in-call service activation trigger attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``SystemInCallServiceActivationModifyRequest17()``

    Attributes:
        default_activation_digits: defaultActivationDigits
    """

    default_activation_digits: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_activation_digits", "defaultActivationDigits", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInCallServiceActivationModifyRequest17(OCIRequest):
    """
    Modifies the system's DTMF based in-call service activation trigger attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        default_flash_activation_digits: defaultFlashActivationDigits
        default_call_transfer_activation_digits: defaultCallTransferActivationDigits
    """

    default_flash_activation_digits: str = attr.ib(default=None)
    default_call_transfer_activation_digits: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_flash_activation_digits", "defaultFlashActivationDigits", str),
            E(
                "default_call_transfer_activation_digits",
                "defaultCallTransferActivationDigits",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemIntegratedIMPGetRequest(OCIRequest):
    """
    Get the system Integrated IMP service attributes.

    The response is either ``SystemIntegratedIMPGetResponse()`` or ``ErrorResponse()``.
    Replaced by ``SystemIntegratedIMPGetRequest19()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemIntegratedIMPGetRequest19(OCIRequest):
    """
    Get the system Integrated IMP service attributes.

    The response is either ``SystemIntegratedIMPGetResponse19()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemIntegratedIMPGetRequest21(OCIRequest):
    """
    Get the system Integrated IMP service attributes.

    The response is either ``SystemIntegratedIMPGetResponse19()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemIntegratedIMPModifyRequest(OCIRequest):
    """
    Modify the system Integrated IMP service attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: boshURL

    Attributes:
        service_domain: serviceDomain
        service_port: servicePort
        add_service_provider_in_imp_user_id: addServiceProviderInIMPUserId
        bosh_url: boshURL
        allow_imp_password_retrieval: allowImpPasswordRetrieval
    """

    service_domain: str = attr.ib(default=None)
    service_port: int = attr.ib(default=None)
    add_service_provider_in_imp_user_id: bool = attr.ib(default=None)
    bosh_url: str = attr.ib(default=None)
    allow_imp_password_retrieval: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_domain", "serviceDomain", str),
            E("service_port", "servicePort", int),
            E(
                "add_service_provider_in_imp_user_id",
                "addServiceProviderInIMPUserId",
                bool,
            ),
            E("bosh_url", "boshURL", str),
            E("allow_imp_password_retrieval", "allowImpPasswordRetrieval", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemIntelligentNetworkServiceControlGetRequest14(OCIRequest):
    """
    Request the system level data associated with Intelligent Network Service Control.

    The response is either a ``SystemIntelligentNetworkServiceControlGetResponse14()`` or
    an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemIntelligentNetworkServiceControlModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Intelligent Network Service Control.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        pre_answer_action_timeout_seconds: preAnswerActionTimeoutSeconds
        msg_reject_no_voice_mail: msgRejectNoVoiceMail
        msg_reject_voice_mail: msgRejectVoiceMail
        msg_pre_answer_wait: msgPreAnswerWait
        msg_busy: msgBusy
        msg_release: msgRelease
        msg_no_answer: msgNoAnswer
        msg_ocp_reject: msgOCPReject
        msg_forward_loop: msgForwardLoop
        msg_temporarily_unavailable: msgTemporarilyUnavailable
    """

    pre_answer_action_timeout_seconds: int = attr.ib(default=None)
    msg_reject_no_voice_mail: str = attr.ib(default=None)
    msg_reject_voice_mail: str = attr.ib(default=None)
    msg_pre_answer_wait: str = attr.ib(default=None)
    msg_busy: str = attr.ib(default=None)
    msg_release: str = attr.ib(default=None)
    msg_no_answer: str = attr.ib(default=None)
    msg_ocp_reject: str = attr.ib(default=None)
    msg_forward_loop: str = attr.ib(default=None)
    msg_temporarily_unavailable: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("pre_answer_action_timeout_seconds", "preAnswerActionTimeoutSeconds", int),
            E("msg_reject_no_voice_mail", "msgRejectNoVoiceMail", str),
            E("msg_reject_voice_mail", "msgRejectVoiceMail", str),
            E("msg_pre_answer_wait", "msgPreAnswerWait", str),
            E("msg_busy", "msgBusy", str),
            E("msg_release", "msgRelease", str),
            E("msg_no_answer", "msgNoAnswer", str),
            E("msg_ocp_reject", "msgOCPReject", str),
            E("msg_forward_loop", "msgForwardLoop", str),
            E("msg_temporarily_unavailable", "msgTemporarilyUnavailable", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInterceptUserDeleteDnListRequest(OCIRequest):
    """
    Request to delete an Intercept User number(s) from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_numbers: phoneNumbers
    """

    phone_numbers: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_numbers", "phoneNumbers", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInterceptUserGetDnListRequest(OCIRequest):
    """
    Request to get a list of Intercept User dns defined in the system.

    The response is either a ``SystemInterceptUserGetDnListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInterceptUserGetRequest(OCIRequest):
    """
    Get the system-level intercept user service settings.

    The response is either a ``SystemInterceptUserGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInterceptUserModifyDnRequest(OCIRequest):
    """
    Request to modify a Intercept User number's description in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
        description: description
    """

    phone_number: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInterceptUserModifyRequest(OCIRequest):
    """
    Modify the system-level intercept user service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        emergency_and_repair_intercept: emergencyAndRepairIntercept
    """

    emergency_and_repair_intercept: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("emergency_and_repair_intercept", "emergencyAndRepairIntercept", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInventoryReportGetRequest(OCIRequest):
    """
    Request the system level data associated with Inventory Report.

    The response is either a ``SystemInventoryReportGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInventoryReportModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Inventory Report.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        default_from_address: defaultFromAddress
    """

    default_from_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("default_from_address", "defaultFromAddress", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLDAPIntegrationGetDirectoryRequest(OCIRequest):
    """
    Request the system level data associated with LDAP Integration.

    The response is either a ``SystemLDAPIntegrationGetDirectoryResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLDAPIntegrationModifyDirectoryRequest(OCIRequest):
    """
    Modify the system level data associated with LDAP Integration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        server_net_address: serverNetAddress
        server_port: serverPort
        search_base: searchBase
        use_ssl: useSSL
        require_authentication: requireAuthentication
        authenticated_dn: authenticatedDN
        authenticated_password: authenticatedPassword
        is_sort_enabled: isSortEnabled
        is_paged_result_enabled: isPagedResultEnabled
        search_filter: searchFilter
        include_search_attribute_in_search_filter: includeSearchAttributeInSearchFilter
        column1_attribute_name: column1AttributeName
        column2_attribute_name: column2AttributeName
        column3_attribute_name: column3AttributeName
        column4_attribute_name: column4AttributeName
        column1_label: column1Label
        column2_label: column2Label
        column3_label: column3Label
        column4_label: column4Label
        search_column: searchColumn
    """

    server_net_address: str = attr.ib(default=None)
    server_port: int = attr.ib(default=None)
    search_base: str = attr.ib(default=None)
    use_ssl: bool = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    authenticated_dn: str = attr.ib(default=None)
    authenticated_password: str = attr.ib(default=None)
    is_sort_enabled: bool = attr.ib(default=None)
    is_paged_result_enabled: bool = attr.ib(default=None)
    search_filter: str = attr.ib(default=None)
    include_search_attribute_in_search_filter: bool = attr.ib(default=None)
    column1_attribute_name: str = attr.ib(default=None)
    column2_attribute_name: str = attr.ib(default=None)
    column3_attribute_name: str = attr.ib(default=None)
    column4_attribute_name: str = attr.ib(default=None)
    column1_label: str = attr.ib(default=None)
    column2_label: str = attr.ib(default=None)
    column3_label: str = attr.ib(default=None)
    column4_label: str = attr.ib(default=None)
    search_column: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_net_address", "serverNetAddress", str),
            E("server_port", "serverPort", int),
            E("search_base", "searchBase", str),
            E("use_ssl", "useSSL", bool),
            E("require_authentication", "requireAuthentication", bool),
            E("authenticated_dn", "authenticatedDN", str),
            E("authenticated_password", "authenticatedPassword", str),
            E("is_sort_enabled", "isSortEnabled", bool),
            E("is_paged_result_enabled", "isPagedResultEnabled", bool),
            E("search_filter", "searchFilter", str),
            E(
                "include_search_attribute_in_search_filter",
                "includeSearchAttributeInSearchFilter",
                bool,
            ),
            E("column1_attribute_name", "column1AttributeName", str),
            E("column2_attribute_name", "column2AttributeName", str),
            E("column3_attribute_name", "column3AttributeName", str),
            E("column4_attribute_name", "column4AttributeName", str),
            E("column1_label", "column1Label", str),
            E("column2_label", "column2Label", str),
            E("column3_label", "column3Label", str),
            E("column4_label", "column4Label", str),
            E("search_column", "searchColumn", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLanguageAddRequest(OCIRequest):
    """
    Request to add a language to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        language: language
        locale: locale
        encoding: encoding
    """

    language: str = attr.ib()
    locale: str = attr.ib()
    encoding: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("language", "language", str, is_required=True),
            E("locale", "locale", str, is_required=True),
            E("encoding", "encoding", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLanguageDeleteRequest(OCIRequest):
    """
    Request to delete a language from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        language: language
    """

    language: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("language", "language", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLanguageGetListRequest(OCIRequest):
    """
    Request the defined languages in the system.

    The response is either a ``SystemLanguageGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLanguageModifyRequest(OCIRequest):
    """
    Request to modify a language properties in the system.

    If the becomeDefaultLanguage element is present, the language in this request becomes
    the default language for the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        language: language
        become_default_language: becomeDefaultLanguage
        locale: locale
        encoding: encoding
    """

    language: str = attr.ib()
    become_default_language: bool = attr.ib(default=None)
    locale: str = attr.ib(default=None)
    encoding: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("language", "language", str, is_required=True),
            E("become_default_language", "becomeDefaultLanguage", bool),
            E("locale", "locale", str),
            E("encoding", "encoding", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLegacyAutomaticCallbackGetLineTypeListRequest(OCIRequest):
    """
    Request the system's legacy automatic callback line type settings.

    The response is either a ``SystemLegacyAutomaticCallbackGetTypeLineListResponse()`` or
    an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLegacyAutomaticCallbackGetRequest(OCIRequest):
    """
    Request the system's legacy automatic callback attributes.

    The response is either a ``SystemLegacyAutomaticCallbackGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLegacyAutomaticCallbackModifyLineTypeRequest(OCIRequest):
    """
    Modifies the system's legacy automatic callback line type attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        line_type: lineType
        match_action: matchAction
        no_match_action: noMatchAction
    """

    line_type: str = attr.ib()
    match_action: str = attr.ib(default=None)
    no_match_action: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("line_type", "lineType", str, is_required=True),
            E("match_action", "matchAction", str),
            E("no_match_action", "noMatchAction", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLegacyAutomaticCallbackModifyRequest(OCIRequest):
    """
    Modifies the system's legacy automatic callback attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        max_monitors_per_originator: maxMonitorsPerOriginator
        max_monitors_per_terminator: maxMonitorsPerTerminator
        t2_minutes: t2Minutes
        t4_seconds: t4Seconds
        t5_seconds: t5Seconds
        t6_minutes: t6Minutes
        t7_minutes: t7Minutes
        t8_seconds: t8Seconds
        t_ring_seconds: tRingSeconds
        t10_o_minutes: t10OMinutes
        t10_t_minutes: t10TMinutes
    """

    max_monitors_per_originator: int = attr.ib(default=None)
    max_monitors_per_terminator: int = attr.ib(default=None)
    t2_minutes: int = attr.ib(default=None)
    t4_seconds: int = attr.ib(default=None)
    t5_seconds: int = attr.ib(default=None)
    t6_minutes: int = attr.ib(default=None)
    t7_minutes: int = attr.ib(default=None)
    t8_seconds: int = attr.ib(default=None)
    t_ring_seconds: int = attr.ib(default=None)
    t10_o_minutes: int = attr.ib(default=None)
    t10_t_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_monitors_per_originator", "maxMonitorsPerOriginator", int),
            E("max_monitors_per_terminator", "maxMonitorsPerTerminator", int),
            E("t2_minutes", "t2Minutes", int),
            E("t4_seconds", "t4Seconds", int),
            E("t5_seconds", "t5Seconds", int),
            E("t6_minutes", "t6Minutes", int),
            E("t7_minutes", "t7Minutes", int),
            E("t8_seconds", "t8Seconds", int),
            E("t_ring_seconds", "tRingSeconds", int),
            E("t10_o_minutes", "t10OMinutes", int),
            E("t10_t_minutes", "t10TMinutes", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLicensingGetRequest(OCIRequest):
    """
    Get all the licensing information.

    The response is either ``SystemLicensingGetResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemLicensingGetRequest14sp3()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLicensingGetRequest14sp3(OCIRequest):
    """
    Get all the licensing information.

    The response is either ``SystemLicensingGetResponse14sp3()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLicensingGetSystemLicenseListRequest(OCIRequest):
    """
    Request to get the list of system licenses in the system.

    The response is either a ``SystemLicensingGetSystemLicenseListResponse()`` or an
    ``ErrorResponse()``. Replaced by ``SystemLicensingGetSystemLicenseListRequest21()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLicensingGetSystemLicenseListRequest21(OCIRequest):
    """
    Request to get the list of system licenses in the system.

    The response is either a ``SystemLicensingGetSystemLicenseListResponse21()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLicensingReloadRequest(OCIRequest):
    """
    Load a new license file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLocationBasedCallingRestrictionsGetRequest(OCIRequest):
    """
    Gets system level the Location Based Calling Restrictions attributes.

    The response is either a ``SystemLocationBasedCallingRestrictionsGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLocationBasedCallingRestrictionsGetRequest17sp3(OCIRequest):
    """
    Gets system level the Location Based Calling Restrictions attributes.

    The response is either a ``SystemLocationBasedCallingRestrictionsGetResponse17sp3()``
    or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLocationBasedCallingRestrictionsModifyRequest(OCIRequest):
    """
    Modifies the system level Location Based Calling Restriction attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        physical_location_indicator: physicalLocationIndicator
        enforce_msc_validation: enforceMscValidation
        enable_office_zone_announcement: enableOfficeZoneAnnouncement
        enhance_office_zone: enhanceOfficeZone
    """

    physical_location_indicator: str = attr.ib(default=None)
    enforce_msc_validation: bool = attr.ib(default=None)
    enable_office_zone_announcement: bool = attr.ib(default=None)
    enhance_office_zone: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("physical_location_indicator", "physicalLocationIndicator", str),
            E("enforce_msc_validation", "enforceMscValidation", bool),
            E("enable_office_zone_announcement", "enableOfficeZoneAnnouncement", bool),
            E("enhance_office_zone", "enhanceOfficeZone", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMGCPDeviceTypeGetListRequest(OCIRequest):
    """
    Request to get the list of mgcp device types in the system.

    See Also: ``SystemDeviceTypeGetAvailableListRequest14sp3()``.

    The response is either ``SystemMGCPDeviceTypeGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMGCPDeviceTypeGetRequest(OCIRequest):
    """
    Request to get a mgcp device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemMGCPDeviceTypeGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMGCPDeviceTypeModifyRequest(OCIRequest):
    """
    Request to modify a mgcp device type.

    In release 14, this is limited to changing the obsolete flag.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMailParametersGetRequest(OCIRequest):
    """
    Request to get the list of Mail system parameters.

    The response is either ``SystemMailParametersGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMailParametersModifyRequest(OCIRequest):
    """
    Request to modify Mail system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        primary_server_net_address: primaryServerNetAddress
        secondary_server_net_address: secondaryServerNetAddress
        default_from_address: defaultFromAddress
        default_subject: defaultSubject
        support_dnssrv_for_mail_server_access: supportDNSSRVForMailServerAccess
    """

    primary_server_net_address: str = attr.ib(default=None)
    secondary_server_net_address: str = attr.ib(default=None)
    default_from_address: str = attr.ib(default=None)
    default_subject: str = attr.ib(default=None)
    support_dnssrv_for_mail_server_access: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("primary_server_net_address", "primaryServerNetAddress", str),
            E("secondary_server_net_address", "secondaryServerNetAddress", str),
            E("default_from_address", "defaultFromAddress", str),
            E("default_subject", "defaultSubject", str),
            E(
                "support_dnssrv_for_mail_server_access",
                "supportDNSSRVForMailServerAccess",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMaliciousCallTraceGetRequest(OCIRequest):
    """
    Get Malicious Call Trace system parameters and the list of users that use the
    Malicious Call Trace feature.

    The response is either a ``SystemMaliciousCallTraceGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMaliciousCallTraceGetUserListRequest(OCIRequest):
    """
    Request the list of users that use the Malicious Call Trace feature.

    The response is either a ``SystemMaliciousCallTraceGetUserListResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemMaliciousCallTraceGetRequest()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMaliciousCallTraceModifyRequest(OCIRequest):
    """
    Modify a Malicious Call Trace system parameter.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        play_mct_warning_announcement: playMCTWarningAnnouncement
    """

    play_mct_warning_announcement: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("play_mct_warning_announcement", "playMCTWarningAnnouncement", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaAddRequest(OCIRequest):
    """
    Request to add a Media to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        media_name: mediaName
        codec_name: codecName
        media_type: mediaType
        bandwidth_enforcement_type: bandwidthEnforcementType
        media_bandwidth: mediaBandwidth
    """

    media_name: str = attr.ib()
    codec_name: str = attr.ib()
    media_type: str = attr.ib()
    bandwidth_enforcement_type: str = attr.ib()
    media_bandwidth: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_name", "mediaName", str, is_required=True),
            E("codec_name", "codecName", str, is_required=True),
            E("media_type", "mediaType", str, is_required=True),
            E(
                "bandwidth_enforcement_type",
                "bandwidthEnforcementType",
                str,
                is_required=True,
            ),
            E("media_bandwidth", "mediaBandwidth", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaAddRequest16(OCIRequest):
    """
    Request to add a Media to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        media_name: mediaName
        codec_name: codecName
        media_type: mediaType
        bandwidth_enforcement_type: bandwidthEnforcementType
        media_bandwidth: mediaBandwidth
    """

    media_name: str = attr.ib()
    codec_name: str = attr.ib()
    media_type: str = attr.ib()
    bandwidth_enforcement_type: str = attr.ib()
    media_bandwidth: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_name", "mediaName", str, is_required=True),
            E("codec_name", "codecName", str, is_required=True),
            E("media_type", "mediaType", str, is_required=True),
            E(
                "bandwidth_enforcement_type",
                "bandwidthEnforcementType",
                str,
                is_required=True,
            ),
            E("media_bandwidth", "mediaBandwidth", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaDeleteRequest(OCIRequest):
    """
    Request to delete a Media from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        media_name: mediaName
    """

    media_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_name", "mediaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaGetListRequest(OCIRequest):
    """
    Request to get a list of media in the system.

    The response is either a ``SystemMediaGetListResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaModifyRequest(OCIRequest):
    """
    Request to modify a media.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        media_name: mediaName
        codec_name: codecName
        bandwidth_enforcement_type: bandwidthEnforcementType
        media_bandwidth: mediaBandwidth
    """

    media_name: str = attr.ib()
    codec_name: str = attr.ib(default=None)
    bandwidth_enforcement_type: str = attr.ib(default=None)
    media_bandwidth: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("media_name", "mediaName", str, is_required=True),
            E("codec_name", "codecName", str),
            E("bandwidth_enforcement_type", "bandwidthEnforcementType", str),
            E("media_bandwidth", "mediaBandwidth", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaServerAddRequest14(OCIRequest):
    """
    Request to add a Media Server to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaServerDeleteRequest(OCIRequest):
    """
    Request to delete a Media Server from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaServerGetListRequest(OCIRequest):
    """
    Request to get a list of Media Servers defined in the system.

    The response is either a ``SystemMediaServerGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaServerModifyRequest(OCIRequest):
    """
    Request to modify a Media Server in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaServerParametersGetRequest(OCIRequest):
    """
    Request to get the list of Media Server system parameters.

    The response is either ``SystemMediaServerParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaServerParametersModifyRequest(OCIRequest):
    """
    Request to modify Media Server system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        media_server_response_timer_milliseconds: mediaServerResponseTimerMilliseconds
        media_server_selection_route_timer_milliseconds:
            mediaServerSelectionRouteTimerMilliseconds
        use_static_media_server_device: useStaticMediaServerDevice
    """

    media_server_response_timer_milliseconds: int = attr.ib(default=None)
    media_server_selection_route_timer_milliseconds: int = attr.ib(default=None)
    use_static_media_server_device: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "media_server_response_timer_milliseconds",
                "mediaServerResponseTimerMilliseconds",
                int,
            ),
            E(
                "media_server_selection_route_timer_milliseconds",
                "mediaServerSelectionRouteTimerMilliseconds",
                int,
            ),
            E("use_static_media_server_device", "useStaticMediaServerDevice", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaSetAddRequest(OCIRequest):
    """
    Request to add a Media Set.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        set_name: setName
        media_name: mediaName
    """

    set_name: str = attr.ib()
    media_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("set_name", "setName", str, is_required=True),
            E("media_name", "mediaName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaSetDeleteRequest(OCIRequest):
    """
    Request to delete a Media Set.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        set_name: setName
    """

    set_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("set_name", "setName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaSetGetListRequest(OCIRequest):
    """
    Request to get the list of Media Sets in the system.

    The response is either a ``SystemMediaSetGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaSetGetRequest(OCIRequest):
    """
    Request to get a Media Set.

    The response is either a ``SystemMediaSetGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        set_name: setName
    """

    set_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("set_name", "setName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMeetMeConferencingGetRequest(OCIRequest):
    """
    Request the system level data associated with Meet-Me Conferencing functions.

    The response is either a ``SystemMeetMeConferencingGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMeetMeConferencingGetRequest17sp3(OCIRequest):
    """
    Request the system level data associated with Meet-Me Conferencing functions.

    The response is either a ``SystemMeetMeConferencingGetResponse17sp3()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMeetMeConferencingGetRequest18(OCIRequest):
    """
    Request the system level data associated with Meet-Me Conferencing functions.

    The response is either a ``SystemMeetMeConferencingGetResponse18()`` or an
    ``ErrorResponse()``. Replaced by ``SystemMeetMeConferencingGetRequest19()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMeetMeConferencingGetRequest19(OCIRequest):
    """
    Request the system level data associated with Meet-Me Conferencing functions.

    The response is either a ``SystemMeetMeConferencingGetResponse19()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMigratedUsersGetListRequest(OCIRequest):
    """
    Get a list of migrated users.

    The response is either ``SystemLicensingGetResponse14sp3()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMultimediaPolicyGetRequest(OCIRequest):
    """
    Request the system level data associated with Multimedia Policy.

    The response is either a ``SystemMultimediaPolicyGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMultimediaPolicyModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Multimedia Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        restrict_non_audio_video_media_types: restrictNonAudioVideoMediaTypes
    """

    restrict_non_audio_video_media_types: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "restrict_non_audio_video_media_types",
                "restrictNonAudioVideoMediaTypes",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMusicOnHoldGetRequest(OCIRequest):
    """
    Request the system level data associated with Music On Hold.

    The response is either a ``SystemMusicOnHoldGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMusicOnHoldModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Music On Hold.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        delay_milliseconds: delayMilliseconds
    """

    delay_milliseconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("delay_milliseconds", "delayMilliseconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceDeleteRequest(OCIRequest):
    """
    Delete a Network Class of Service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceGetAssignedServiceProviderListRequest(OCIRequest):
    """
    Request a list of service providers that have a given Network Class of Service
    assigned.

    The response is either a
    ``SystemNetworkClassOfServiceGetAssignedServiceProviderListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListRequest(OCIRequest):
    """
    Get the list of Network Classes of Service that contain a specific Communication
    Barring Profile.

    The response is either a
    ``SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceGetListRequest(OCIRequest):
    """
    Get the list of all Network Classes of Service.

    The response is either a ``SystemNetworkClassOfServiceGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceGetRequest(OCIRequest):
    """
    Get an existing Network Class of Service.

    The response is either a ``SystemNetworkClassOfServiceGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemNetworkClassOfServiceGetRequest17()``

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceGetRequest17(OCIRequest):
    """
    Get an existing Network Class of Service.

    The response is either a ``SystemNetworkClassOfServiceGetResponse17()`` or an
    ``ErrorResponse()``. Replaced by ``SystemNetworkClassOfServiceGetRequest19sp1()``

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceGetRequest19sp1(OCIRequest):
    """
    Get an existing Network Class of Service.

    The response is either a ``SystemNetworkClassOfServiceGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkDeviceMonitorParametersGetRequest(OCIRequest):
    """
    Request to get the list of Network Device Polling system parameters.

    The response is either ``SystemNetworkDeviceMonitorParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkDeviceMonitorParametersModifyRequest(OCIRequest):
    """
    Request to modify Network Device Polling system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        polling_interval_minutes: pollingIntervalMinutes
        failed_polling_interval_minutes: failedPollingIntervalMinutes
    """

    polling_interval_minutes: int = attr.ib(default=None)
    failed_polling_interval_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("polling_interval_minutes", "pollingIntervalMinutes", int),
            E("failed_polling_interval_minutes", "failedPollingIntervalMinutes", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkProgressionGetRequest(OCIRequest):
    """
    Request the system level data associated with network progression.

    The response is either a ``SystemNetworkProgressionGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkProgressionModifyRequest(OCIRequest):
    """
    Modify the system level data associated with network progression.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        is_active: isActive
        wait_period_seconds: waitPeriodSeconds
    """

    is_active: bool = attr.ib(default=None)
    wait_period_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool),
            E("wait_period_seconds", "waitPeriodSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkRoutingServerAddRequest(OCIRequest):
    """
    Request to add a routing Network Server to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        poll: poll
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib()
    poll: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str, is_required=True),
            E("poll", "poll", bool, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkRoutingServerDeleteRequest(OCIRequest):
    """
    Request to delete a routing Network Server from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkRoutingServerGetListRequest(OCIRequest):
    """
    Request to get a list of routing Network Servers defined in the system.

    The response is either a ``SystemNetworkRoutingServerGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkRoutingServerModifyRequest(OCIRequest):
    """
    Request to modify a routing Network Server in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        poll: poll
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    poll: bool = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str),
            E("poll", "poll", bool),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkServerSyncParametersGetRequest(OCIRequest):
    """
    Request to get the list of Network Server Sync system parameters.

    The response is either ``SystemNetworkServerSyncParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkServerSyncParametersGetRequest14sp2(OCIRequest):
    """
    Request to get the list of Network Server Sync system parameters.

    The response is either ``SystemNetworkServerSyncParametersGetResponse14sp2()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemNetworkServerSyncParametersGetRequest16()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkServerSyncParametersGetRequest16(OCIRequest):
    """
    Request to get the list of Network Server Sync system parameters.

    The response is either ``SystemNetworkServerSyncParametersGetResponse16()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemNetworkServerSyncParametersGetRequest17sp4()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkServerSyncParametersGetRequest17sp4(OCIRequest):
    """
    Request to get the list of Network Server Sync system parameters.

    The response is either ``SystemNetworkServerSyncParametersGetResponse17sp4()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkServerSyncParametersModifyRequest(OCIRequest):
    """
    Request to modify Network Server Sync system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: syncTrunkGroups

    Attributes:
        enable_sync: enableSync
        sync_line_ports: syncLinePorts
        sync_device_management_info: syncDeviceManagementInfo
        sync_trunk_groups: syncTrunkGroups
    """

    enable_sync: bool = attr.ib(default=None)
    sync_line_ports: bool = attr.ib(default=None)
    sync_device_management_info: bool = attr.ib(default=None)
    sync_trunk_groups: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_sync", "enableSync", bool),
            E("sync_line_ports", "syncLinePorts", bool),
            E("sync_device_management_info", "syncDeviceManagementInfo", bool),
            E("sync_trunk_groups", "syncTrunkGroups", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkSynchingServerAddRequest(OCIRequest):
    """
    Request to add a Network Server to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkSynchingServerDeleteRequest(OCIRequest):
    """
    Request to delete a Network Server from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkSynchingServerGetListRequest(OCIRequest):
    """
    Request to get a list of Network Servers defined in the system.

    The response is either a ``SystemNetworkSynchingServerGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkSynchingServerModifyRequest(OCIRequest):
    """
    Request to modify a Network Server in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        description: description
        become_preferred: becomePreferred
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    description: str = attr.ib(default=None)
    become_preferred: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("description", "description", str),
            E("become_preferred", "becomePreferred", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberActivationGetRequest(OCIRequest):
    """
    Request to get the Number Activation state.

    The response is either ``SystemNumberActivationGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberActivationGetRequest18sp1(OCIRequest):
    """
    Request to get the Number Activation state.

    The response is either ``SystemNumberActivationGetResponse18sp1()`` or
    ``ErrorResponse()``. Replaced by: ``SystemNumberActivationGetRequest21()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberActivationGetRequest21(OCIRequest):
    """
    Request to get the number activation state and enterprise trunk number range
    activation status.

    The response is either ``SystemNumberActivationGetResponse21()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberActivationModifyRequest(OCIRequest):
    """
    Request to modify system number activation setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        use_number_activation: useNumberActivation
    """

    use_number_activation: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_number_activation", "useNumberActivation", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberActivationModifyRequest18sp1(OCIRequest):
    """
    Request to modify system number activation and enterprise trunk number range
    activation setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    element values are only applicable in AS data mode: numberActivationMode = Group And
    User Activation Enabled will raise an error in HSS data mode.

    Attributes:
        number_activation_mode: numberActivationMode
        enable_enterprise_trunk_number_range_activation:
            enableEnterpriseTrunkNumberRangeActivation
    """

    number_activation_mode: str = attr.ib(default=None)
    enable_enterprise_trunk_number_range_activation: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("number_activation_mode", "numberActivationMode", str),
            E(
                "enable_enterprise_trunk_number_range_activation",
                "enableEnterpriseTrunkNumberRangeActivation",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryDigitPatternAddRequest(OCIRequest):
    """
    Request to add a System Number Portability Query Status Digit Pattern mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        digit_pattern: digitPattern
        status: status
    """

    digit_pattern: str = attr.ib()
    status: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("digit_pattern", "digitPattern", str, is_required=True),
            E("status", "status", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryDigitPatternDeleteListRequest(OCIRequest):
    """
    Request to delete a list of System Number Portability Status Digit Pattern mappings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        digit_pattern: digitPattern
    """

    digit_pattern: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("digit_pattern", "digitPattern", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryDigitPatternGetRequest(OCIRequest):
    """
    Request to get a System Number Portability Status Digit Pattern mapping.

    The response is either a ``SystemNumberPortabilityQueryDigitPatternGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        digit_pattern: digitPattern
    """

    digit_pattern: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("digit_pattern", "digitPattern", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryDigitPatternModifyRequest(OCIRequest):
    """
    Request to modify a System Number Portability Status Digit Pattern mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        digit_pattern: digitPattern
        new_digit_pattern: newDigitPattern
        status: status
    """

    digit_pattern: str = attr.ib()
    new_digit_pattern: str = attr.ib(default=None)
    status: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("digit_pattern", "digitPattern", str, is_required=True),
            E("new_digit_pattern", "newDigitPattern", str),
            E("status", "status", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryGetRequest(OCIRequest):
    """
    Get system Number Portability Query Parameters.

    The response is either ``SystemNumberPortabilityQueryGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryModifyRequest(OCIRequest):
    """
    Modify system Number Portability Query Parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        continue_call_as_dialed_on_timeout_or_error: continueCallAsDialedOnTimeoutOrError
        number_portability_name_lookup_timeout_milliseconds:
            numberPortabilityNameLookupTimeoutMilliseconds
    """

    continue_call_as_dialed_on_timeout_or_error: bool = attr.ib(default=None)
    number_portability_name_lookup_timeout_milliseconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "continue_call_as_dialed_on_timeout_or_error",
                "continueCallAsDialedOnTimeoutOrError",
                bool,
            ),
            E(
                "number_portability_name_lookup_timeout_milliseconds",
                "numberPortabilityNameLookupTimeoutMilliseconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryStatusAddRequest(OCIRequest):
    """
    Add a system number portability status information.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        status: status
        treatment_file_name: treatmentFileName
    """

    status: str = attr.ib()
    treatment_file_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status", "status", str, is_required=True),
            E("treatment_file_name", "treatmentFileName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryStatusDeleteListRequest(OCIRequest):
    """
    Delete a list of system number portability query statuses.

    The number of status entries is limited to 100.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        status: status
    """

    status: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status", "status", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryStatusGetListRequest(OCIRequest):
    """
    Get a list system Number Portability Query Statuses.

    The response is either ``SystemNumberPortabilityQueryStatusGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryStatusGetRequest(OCIRequest):
    """
    Get information for a system Number Portability Query Status.

    The response is either ``SystemNumberPortabilityQueryStatusGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        status: status
    """

    status: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status", "status", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryStatusModifyRequest(OCIRequest):
    """
    Modify the system number portability status information.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        status_name: statusName
        new_status_name: newStatusName
        treatment_file_name: treatmentFileName
    """

    status_name: str = attr.ib()
    new_status_name: str = attr.ib(default=None)
    treatment_file_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status_name", "statusName", str, is_required=True),
            E("new_status_name", "newStatusName", str),
            E("treatment_file_name", "treatmentFileName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIAddACLEntryRequest(OCIRequest):
    """
    Add an entry to the OCI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlAddACLEntryRequest(OCIRequest):
    """
    Add an entry to the OCI call control access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationAddACLEntryRequest(OCIRequest):
    """
    Add an entry to the OCI call control application access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
        net_address: netAddress
        description: description
    """

    application_id: str = attr.ib()
    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationAddRequest(OCIRequest):
    """
    Add an application to the OCI call control application list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
        enable_system_wide: enableSystemWide
        description: description
    """

    application_id: str = attr.ib()
    enable_system_wide: bool = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
            E("enable_system_wide", "enableSystemWide", bool, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationAddRequest14sp9(OCIRequest):
    """
    Add an application to the OCI call control application list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
        enable_system_wide: enableSystemWide
        notification_timeout_seconds: notificationTimeoutSeconds
        description: description
    """

    application_id: str = attr.ib()
    enable_system_wide: bool = attr.ib()
    notification_timeout_seconds: int = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
            E("enable_system_wide", "enableSystemWide", bool, is_required=True),
            E(
                "notification_timeout_seconds",
                "notificationTimeoutSeconds",
                int,
                is_required=True,
            ),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationAddRequest17(OCIRequest):
    """
    Add an application to the OCI call control application list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
        enable_system_wide: enableSystemWide
        notification_timeout_seconds: notificationTimeoutSeconds
        description: description
        max_event_channels_per_set: maxEventChannelsPerSet
    """

    application_id: str = attr.ib()
    enable_system_wide: bool = attr.ib()
    notification_timeout_seconds: int = attr.ib()
    description: str = attr.ib(default=None)
    max_event_channels_per_set: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
            E("enable_system_wide", "enableSystemWide", bool, is_required=True),
            E(
                "notification_timeout_seconds",
                "notificationTimeoutSeconds",
                int,
                is_required=True,
            ),
            E("description", "description", str),
            E(
                "max_event_channels_per_set",
                "maxEventChannelsPerSet",
                int,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the OCI call control application access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
        net_address: netAddress
    """

    application_id: str = attr.ib()
    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationDeleteRequest(OCIRequest):
    """
    Delete an entry from the OCI call control application list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
    """

    application_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationGetACLListRequest(OCIRequest):
    """
    Get the OCI call control access control list.

    The response is either ``SystemOCICallControlApplicationGetACLListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
    """

    application_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationGetListRequest(OCIRequest):
    """
    Get the OCI call control application list.

    The response is either ``SystemOCICallControlApplicationGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationModifyACLEntryRequest(OCIRequest):
    """
    Modify an entry from the call control access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
        net_address: netAddress
        description: description
    """

    application_id: str = attr.ib()
    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlApplicationModifyRequest(OCIRequest):
    """
    Modify an application from the OCI call control application list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        application_id: applicationId
        enable_system_wide: enableSystemWide
        notification_timeout_seconds: notificationTimeoutSeconds
        description: description
        max_event_channels_per_set: maxEventChannelsPerSet
    """

    application_id: str = attr.ib()
    enable_system_wide: bool = attr.ib(default=None)
    notification_timeout_seconds: int = attr.ib(default=None)
    description: str = attr.ib(default=None)
    max_event_channels_per_set: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("application_id", "applicationId", str, is_required=True),
            E("enable_system_wide", "enableSystemWide", bool),
            E("notification_timeout_seconds", "notificationTimeoutSeconds", int),
            E("description", "description", str),
            E("max_event_channels_per_set", "maxEventChannelsPerSet", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the OCI call control access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlGetACLListRequest(OCIRequest):
    """
    Get the OCI call control access control list.

    The response is either ``SystemOCICallControlGetACLListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCICallControlModifyACLEntryRequest(OCIRequest):
    """
    Modify an entry from the call control access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the OCI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIGetACLListRequest(OCIRequest):
    """
    Get the OCI access control list.

    The response is either ``SystemOCIGetACLListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIModifyACLEntryRequest(OCIRequest):
    """
    Modify an entry in the OCI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingAddACLEntryRequest13mp9(OCIRequest):
    """
    Add an entry to the OCI Reporting Access Control List.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
        restrict_messages: restrictMessages
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)
    restrict_messages: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
            E("restrict_messages", "restrictMessages", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingAddMessageNameListRequest(OCIRequest):
    """
    Add a list of reported messages for a host in the OCI Reporting Access Control List.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        message_name_starts_with: messageNameStartsWith
    """

    net_address: str = attr.ib()
    message_name_starts_with: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E(
                "message_name_starts_with",
                "messageNameStartsWith",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the OCI Reporting Access Control List.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingDeleteMessageNameListRequest(OCIRequest):
    """
    Delete a list of reported messages from a host in the OCI Reporting Access Control
    List.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        delete_all_message_names: deleteAllMessageNames
        message_name_starts_with: messageNameStartsWith
    """

    net_address: str = attr.ib()
    delete_all_message_names: bool = attr.ib(default=None)
    message_name_starts_with: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("delete_all_message_names", "deleteAllMessageNames", bool),
            E("message_name_starts_with", "messageNameStartsWith", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingGetACLListRequest(OCIRequest):
    """
    Get the OCI Reporting Access Control List.

    The response is either a ``SystemOCIReportingACLListGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingGetMessageNameListRequest(OCIRequest):
    """
    Get a list of restricted messages from a host in the OCI Reporting Access Control
    List.

    The response is either a ``SystemOCIReportingGetMessageNameListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingModifyACLEntryRequest(OCIRequest):
    """
    Modify the description on an entry in the OCI Reporting Access Control List.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
        restrict_messages: restrictMessages
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)
    restrict_messages: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
            E("restrict_messages", "restrictMessages", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingParametersGetRequest(OCIRequest):
    """
    Request to get the list of OCIReporting system parameters.

    The response is either ``SystemOCIReportingParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingParametersGetRequest14sp1(OCIRequest):
    """
    Request to get the list of OCIReporting system parameters.

    The response is either ``SystemOCIReportingParametersGetResponse14sp1()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOCIReportingParametersModifyRequest(OCIRequest):
    """
    Request to modify OCI Reporting system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        server_port: serverPort
        enable_connection_ping: enableConnectionPing
        connection_ping_interval_seconds: connectionPingIntervalSeconds
        alter_passwords: alterPasswords
        enable_public_identity_reporting: enablePublicIdentityReporting
    """

    server_port: int = attr.ib(default=None)
    enable_connection_ping: bool = attr.ib(default=None)
    connection_ping_interval_seconds: int = attr.ib(default=None)
    alter_passwords: bool = attr.ib(default=None)
    enable_public_identity_reporting: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int),
            E("enable_connection_ping", "enableConnectionPing", bool),
            E("connection_ping_interval_seconds", "connectionPingIntervalSeconds", int),
            E("alter_passwords", "alterPasswords", bool),
            E("enable_public_identity_reporting", "enablePublicIdentityReporting", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOfficeZoneAddRequest(OCIRequest):
    """
    Add a new Office Zone.

    The zoneList is an ordered list with the first member being of the highest priority.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        office_zone_name: officeZoneName
        description: description
        zone_name: zoneName
        primary_zone_name: primaryZoneName
    """

    office_zone_name: str = attr.ib()
    description: str = attr.ib(default=None)
    zone_name: List[str] = attr.ib()
    primary_zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("office_zone_name", "officeZoneName", str, is_required=True),
            E("description", "description", str),
            E("zone_name", "zoneName", str, is_required=True, is_array=True),
            E("primary_zone_name", "primaryZoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOfficeZoneDeleteRequest(OCIRequest):
    """
    Delete an Office Zone.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        office_zone_name: officeZoneName
    """

    office_zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("office_zone_name", "officeZoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOfficeZoneGetAssignedServiceProviderListRequest(OCIRequest):
    """
    Request a list of service providers that have a given Office Zone assigned.

    The response is either a ``SystemOfficeZoneGetAssignedServiceProviderListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        office_zone_name: officeZoneName
    """

    office_zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("office_zone_name", "officeZoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOfficeZoneGetListRequest(OCIRequest):
    """
    Get the list of all Office Zones.

    The response is either a ``SystemOfficeZoneGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOfficeZoneGetRequest(OCIRequest):
    """
    Get an existing Office Zone.

    The response is either a ``SystemOfficeZoneGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        office_zone_name: officeZoneName
    """

    office_zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("office_zone_name", "officeZoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOfficeZoneGetZoneUsageListRequest(OCIRequest):
    """
    Get the list of Office Zones that contain a specific Zone.

    The response is either a ``SystemOfficeZoneGetZoneUsageListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        zone_name: zoneName
    """

    zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOutgoingCallingPlanCallTypeAddMappingRequest(OCIRequest):
    """
    Add a system outgoing calling plan call type mapping.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
        digit_map: digitMap
        call_type: callType
    """

    country_code: str = attr.ib()
    digit_map: str = attr.ib()
    call_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("digit_map", "digitMap", str, is_required=True),
            E("call_type", "callType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOutgoingCallingPlanCallTypeDeleteMappingRequest(OCIRequest):
    """
    Delete a system outgoing calling plan call type mapping.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
        digit_map: digitMap
    """

    country_code: str = attr.ib()
    digit_map: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str, is_required=True),
            E("digit_map", "digitMap", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOutgoingCallingPlanCallTypeGetListRequest(OCIRequest):
    """
    Request to get the list of call types of outgoing calling plan Response is
    ``SystemOutgoingCallingPlanCallTypeGetListRequest()`` or ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOutgoingCallingPlanCallTypeGetMappingListRequest(OCIRequest):
    """
    Get a list of system outgoing calling plan call type mappings.

    The response is either ``SystemOutgoingCallingPlanCallTypeGetMappingListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        country_code: countryCode
    """

    country_code: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("country_code", "countryCode", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOutgoingCallingPlanGetRequest(OCIRequest):
    """
    Request the system level data associated with Outgoing Calling Plan.

    The response is either a ``SystemOutgoingCallingPlanGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOutgoingCallingPlanGetRequest17sp3(OCIRequest):
    """
    Request the system level data associated with Outgoing Calling Plan.

    The response is either a ``SystemOutgoingCallingPlanGetResponse17sp3()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOutgoingCallingPlanModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Outgoing Calling Plan.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        direct_transfer_screening: directTransferScreening
        enable_enhanced_toll_call_typing: enableEnhancedTollCallTyping
    """

    direct_transfer_screening: bool = attr.ib(default=None)
    enable_enhanced_toll_call_typing: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("direct_transfer_screening", "directTransferScreening", bool),
            E("enable_enhanced_toll_call_typing", "enableEnhancedTollCallTyping", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPasswordRulesGetRequest13mp2(OCIRequest):
    """
    Requests the system's password rules setting applicable to System administrator,
    Provisioning Administrator, and/or Service Provider Administrator, Group
    Administrator, Department Administrator, user.

    The response is either ``SystemPasswordRulesGetResponse13mp2()`` or
    ``ErrorResponse()``.

    Replaced By : ``SystemPasswordRulesGetRequest16()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPasswordRulesGetRequest16(OCIRequest):
    """
    Requests the system's password rules setting applicable to System administrator,
    Provisioning Administrator, and/or Service Provider Administrator, Group
    Administrator, Department Administrator, user.

    The response is either ``SystemPasswordRulesGetResponse16()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPasswordRulesModifyRequest(OCIRequest):
    """
    Request to modify the system providers password rule setting applicable to System
    Adminstrator, Provisioning Administrator, and/or Service Provider Administrator, Group
    Administrator, Department Administrator, User.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemPasswordRulesModifyRequest14sp3()``

    Attributes:
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_rules_modification: disallowRulesModification
    """

    rules_apply_to: str = attr.ib(default=None)
    allow_web_add_external_authentication_users: bool = attr.ib(default=None)
    disallow_user_id: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    password_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)
    disallow_rules_modification: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("rules_apply_to", "rulesApplyTo", str),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
            ),
            E("disallow_user_id", "disallowUserId", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("password_expires_days", "passwordExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("disallow_rules_modification", "disallowRulesModification", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPasswordRulesModifyRequest14sp3(OCIRequest):
    """
    Request to modify the system providers password rule setting applicable to System
    Adminstrator, Provisioning Administrator, and/or Service Provider Administrator, Group
    Administrator, Department Administrator, User.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        rules_apply_to: rulesApplyTo
        allow_web_add_external_authentication_users:
            allowWebAddExternalAuthenticationUsers
        disallow_user_id: disallowUserId
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        max_failed_login_attempts: maxFailedLoginAttempts
        password_expires_days: passwordExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        disallow_previous_passwords: disallowPreviousPasswords
        number_of_previous_passwords: numberOfPreviousPasswords
    """

    rules_apply_to: str = attr.ib(default=None)
    allow_web_add_external_authentication_users: bool = attr.ib(default=None)
    disallow_user_id: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    password_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)
    disallow_previous_passwords: bool = attr.ib(default=None)
    number_of_previous_passwords: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("rules_apply_to", "rulesApplyTo", str),
            E(
                "allow_web_add_external_authentication_users",
                "allowWebAddExternalAuthenticationUsers",
                bool,
            ),
            E("disallow_user_id", "disallowUserId", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("password_expires_days", "passwordExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("disallow_previous_passwords", "disallowPreviousPasswords", bool),
            E("number_of_previous_passwords", "numberOfPreviousPasswords", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPerformanceMeasurementGenerateReportRequest(OCIRequest):
    """
    Generate a performance measurements report.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPerformanceMeasurementReportingAddFileServerRequest(OCIRequest):
    """
    Add a performance measurements reporting ftp server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        ftp_host_net_address: ftpHostNetAddress
        ftp_user_id: ftpUserId
        ftp_user_password: ftpUserPassword
        passive_ftp: passiveFTP
    """

    ftp_host_net_address: str = attr.ib()
    ftp_user_id: str = attr.ib()
    ftp_user_password: str = attr.ib()
    passive_ftp: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("ftp_host_net_address", "ftpHostNetAddress", str, is_required=True),
            E("ftp_user_id", "ftpUserId", str, is_required=True),
            E("ftp_user_password", "ftpUserPassword", str, is_required=True),
            E("passive_ftp", "passiveFTP", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPerformanceMeasurementReportingDeleteFileServerRequest(OCIRequest):
    """
    Delete a performance measurements reporting ftp server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        ftp_host_net_address: ftpHostNetAddress
    """

    ftp_host_net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("ftp_host_net_address", "ftpHostNetAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPerformanceMeasurementReportingGetFileServerListRequest(OCIRequest):
    """
    Requests the list performance measurements reporting ftp servers.

    The response is either
    ``SystemPerformanceMeasurementReportingGetFileServerListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPerformanceMeasurementReportingGetRequest(OCIRequest):
    """
    Requests the performance measurements reporting settings.

    The response is either ``SystemPerformanceMeasurementReportingGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPerformanceMeasurementReportingModifyFileServerRequest(OCIRequest):
    """
    Modify a performance measurements reporting ftp server.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        ftp_host_net_address: ftpHostNetAddress
        passive_ftp: passiveFTP
    """

    ftp_host_net_address: str = attr.ib()
    passive_ftp: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("ftp_host_net_address", "ftpHostNetAddress", str, is_required=True),
            E("passive_ftp", "passiveFTP", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPerformanceMeasurementReportingModifyRequest(OCIRequest):
    """
    Modify the performance measurements reporting settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        is_active: isActive
        reporting_interval: reportingInterval
        reset_measurements_after_each_report: resetMeasurementsAfterEachReport
        report_enterprise: reportEnterprise
        report_service_provider: reportServiceProvider
        report_device: reportDevice
    """

    is_active: bool = attr.ib(default=None)
    reporting_interval: int = attr.ib(default=None)
    reset_measurements_after_each_report: bool = attr.ib(default=None)
    report_enterprise: bool = attr.ib(default=None)
    report_service_provider: bool = attr.ib(default=None)
    report_device: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool),
            E("reporting_interval", "reportingInterval", int),
            E(
                "reset_measurements_after_each_report",
                "resetMeasurementsAfterEachReport",
                bool,
            ),
            E("report_enterprise", "reportEnterprise", bool),
            E("report_service_provider", "reportServiceProvider", bool),
            E("report_device", "reportDevice", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPersonalAssistantGetRequest(OCIRequest):
    """
    Get system Personal Assistant Parameters.

    The response is either ``SystemPersonalAssistantGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPersonalAssistantModifyRequest(OCIRequest):
    """
    Modify system Personal Assistant Parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        transfer_to_attendant_key: transferToAttendantKey
        transfer_to_voice_messaging_key: transferToVoiceMessagingKey
    """

    transfer_to_attendant_key: str = attr.ib(default=None)
    transfer_to_voice_messaging_key: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("transfer_to_attendant_key", "transferToAttendantKey", str),
            E("transfer_to_voice_messaging_key", "transferToVoiceMessagingKey", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPhysicalLocationGetRequest(OCIRequest):
    """
    Request to get the list of Physical Location system parameters.

    The response is either ``SystemPhysicalLocationGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPhysicalLocationModifyRequest(OCIRequest):
    """
    Request to modify Physical Location system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        always_allow_emergency_calls: alwaysAllowEmergencyCalls
    """

    always_allow_emergency_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("always_allow_emergency_calls", "alwaysAllowEmergencyCalls", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest14(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse14()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest14sp1(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse14sp1()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemPolicyGetDefaultRequest14sp4()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest14sp4(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse14sp4()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest16sp1(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse16sp1()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest16sp2(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse16sp2()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest17(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse17()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest17sp1(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse17sp1()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest17sp3(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse17sp3()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest18(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse18()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest19sp1(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse19sp1()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyGetDefaultRequest20(OCIRequest):
    """
    Requests the system's default policy settings.

    The response is either ``SystemPolicyGetDefaultResponse20()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPolicyModifyDefaultRequest14(OCIRequest):
    """
    Request to modify the system's default policy settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: GroupAdminDialableCallerIDAccess
    ServiceProviderAdminDialableCallerIDAccess
    GroupAdminCommunicationBarringUserProfileAccess (This element is only used for groups
    in an Enterprise) GroupAdminVerifyTranslationAndRoutingAccess
    ServiceProviderVerifyTranslationAndRoutingAccess The following elements are only used
    in HSS data mode: serviceProviderAdminCommunicationBarringAccess

    Attributes:
        group_calling_plan_access: groupCallingPlanAccess
        group_extension_access: groupExtensionAccess
        group_ldap_integration_access: groupLDAPIntegrationAccess
        group_voice_messaging_access: groupVoiceMessagingAccess
        group_department_admin_user_access: groupDepartmentAdminUserAccess
        group_department_admin_trunk_group_access: groupDepartmentAdminTrunkGroupAccess
        group_department_admin_phone_number_extension_access:
            groupDepartmentAdminPhoneNumberExtensionAccess
        group_department_admin_calling_line_id_number_access:
            groupDepartmentAdminCallingLineIdNumberAccess
        group_user_authentication_access: groupUserAuthenticationAccess
        group_user_group_directory_access: groupUserGroupDirectoryAccess
        group_user_profile_access: groupUserProfileAccess
        group_user_enhanced_call_logs_access: groupUserEnhancedCallLogsAccess
        group_user_auto_attendant_name_dialing_access:
            groupUserAutoAttendantNameDialingAccess
        group_admin_profile_access: groupAdminProfileAccess
        group_admin_user_access: groupAdminUserAccess
        group_admin_admin_access: groupAdminAdminAccess
        group_admin_department_access: groupAdminDepartmentAccess
        group_admin_access_device_access: groupAdminAccessDeviceAccess
        group_admin_enhanced_service_instance_access:
            groupAdminEnhancedServiceInstanceAccess
        group_admin_feature_access_code_access: groupAdminFeatureAccessCodeAccess
        group_admin_phone_number_extension_access: groupAdminPhoneNumberExtensionAccess
        group_admin_calling_line_id_number_access: groupAdminCallingLineIdNumberAccess
        group_admin_service_access: groupAdminServiceAccess
        group_admin_trunk_group_access: groupAdminTrunkGroupAccess
        group_admin_verify_translation_and_routing_access:
            groupAdminVerifyTranslationAndRoutingAccess
        group_admin_session_admission_control_access:
            groupAdminSessionAdmissionControlAccess
        group_admin_dialable_caller_id_access: groupAdminDialableCallerIDAccess
        group_admin_office_zone_access: groupAdminOfficeZoneAccess
        group_admin_number_activation_access: groupAdminNumberActivationAccess
        group_admin_communication_barring_user_profile_access:
            groupAdminCommunicationBarringUserProfileAccess
        service_provider_admin_profile_access: serviceProviderAdminProfileAccess
        service_provider_admin_group_access: serviceProviderAdminGroupAccess
        service_provider_admin_user_access: serviceProviderAdminUserAccess
        service_provider_admin_admin_access: serviceProviderAdminAdminAccess
        service_provider_admin_department_access: ServiceProviderAdminDepartmentAccess
        service_provider_admin_access_device_access:
            serviceProviderAdminAccessDeviceAccess
        service_provider_admin_phone_number_extension_access:
            serviceProviderAdminPhoneNumberExtensionAccess
        service_provider_admin_calling_line_id_number_access:
            serviceProviderAdminCallingLineIdNumberAccess
        service_provider_admin_service_access: serviceProviderAdminServiceAccess
        service_provider_admin_service_pack_access: serviceProviderAdminServicePackAccess
        service_provider_admin_session_admission_control_access:
            serviceProviderAdminSessionAdmissionControlAccess
        service_provider_admin_verify_translation_and_routing_access:
            serviceProviderAdminVerifyTranslationAndRoutingAccess
        service_provider_admin_web_branding_access: serviceProviderAdminWebBrandingAccess
        service_provider_admin_office_zone_access: serviceProviderAdminOfficeZoneAccess
        service_provider_admin_communication_barring_access:
            serviceProviderAdminCommunicationBarringAccess
        enterprise_admin_network_policy_access: enterpriseAdminNetworkPolicyAccess
        service_provider_admin_dialable_caller_id_access:
            serviceProviderAdminDialableCallerIDAccess
        enterprise_admin_number_activation_access: enterpriseAdminNumberActivationAccess
    """

    group_calling_plan_access: str = attr.ib(default=None)
    group_extension_access: str = attr.ib(default=None)
    group_ldap_integration_access: str = attr.ib(default=None)
    group_voice_messaging_access: str = attr.ib(default=None)
    group_department_admin_user_access: str = attr.ib(default=None)
    group_department_admin_trunk_group_access: str = attr.ib(default=None)
    group_department_admin_phone_number_extension_access: str = attr.ib(default=None)
    group_department_admin_calling_line_id_number_access: str = attr.ib(default=None)
    group_user_authentication_access: str = attr.ib(default=None)
    group_user_group_directory_access: str = attr.ib(default=None)
    group_user_profile_access: str = attr.ib(default=None)
    group_user_enhanced_call_logs_access: str = attr.ib(default=None)
    group_user_auto_attendant_name_dialing_access: str = attr.ib(default=None)
    group_admin_profile_access: str = attr.ib(default=None)
    group_admin_user_access: str = attr.ib(default=None)
    group_admin_admin_access: str = attr.ib(default=None)
    group_admin_department_access: str = attr.ib(default=None)
    group_admin_access_device_access: str = attr.ib(default=None)
    group_admin_enhanced_service_instance_access: str = attr.ib(default=None)
    group_admin_feature_access_code_access: str = attr.ib(default=None)
    group_admin_phone_number_extension_access: str = attr.ib(default=None)
    group_admin_calling_line_id_number_access: str = attr.ib(default=None)
    group_admin_service_access: str = attr.ib(default=None)
    group_admin_trunk_group_access: str = attr.ib(default=None)
    group_admin_verify_translation_and_routing_access: str = attr.ib(default=None)
    group_admin_session_admission_control_access: str = attr.ib(default=None)
    group_admin_dialable_caller_id_access: str = attr.ib(default=None)
    group_admin_office_zone_access: str = attr.ib(default=None)
    group_admin_number_activation_access: str = attr.ib(default=None)
    group_admin_communication_barring_user_profile_access: str = attr.ib(default=None)
    service_provider_admin_profile_access: str = attr.ib(default=None)
    service_provider_admin_group_access: str = attr.ib(default=None)
    service_provider_admin_user_access: str = attr.ib(default=None)
    service_provider_admin_admin_access: str = attr.ib(default=None)
    service_provider_admin_department_access: str = attr.ib(default=None)
    service_provider_admin_access_device_access: str = attr.ib(default=None)
    service_provider_admin_phone_number_extension_access: str = attr.ib(default=None)
    service_provider_admin_calling_line_id_number_access: str = attr.ib(default=None)
    service_provider_admin_service_access: str = attr.ib(default=None)
    service_provider_admin_service_pack_access: str = attr.ib(default=None)
    service_provider_admin_session_admission_control_access: str = attr.ib(default=None)
    service_provider_admin_verify_translation_and_routing_access: str = attr.ib(default=None)
    service_provider_admin_web_branding_access: str = attr.ib(default=None)
    service_provider_admin_office_zone_access: str = attr.ib(default=None)
    service_provider_admin_communication_barring_access: str = attr.ib(default=None)
    enterprise_admin_network_policy_access: str = attr.ib(default=None)
    service_provider_admin_dialable_caller_id_access: str = attr.ib(default=None)
    enterprise_admin_number_activation_access: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("group_calling_plan_access", "groupCallingPlanAccess", str),
            E("group_extension_access", "groupExtensionAccess", str),
            E("group_ldap_integration_access", "groupLDAPIntegrationAccess", str),
            E("group_voice_messaging_access", "groupVoiceMessagingAccess", str),
            E(
                "group_department_admin_user_access",
                "groupDepartmentAdminUserAccess",
                str,
            ),
            E(
                "group_department_admin_trunk_group_access",
                "groupDepartmentAdminTrunkGroupAccess",
                str,
            ),
            E(
                "group_department_admin_phone_number_extension_access",
                "groupDepartmentAdminPhoneNumberExtensionAccess",
                str,
            ),
            E(
                "group_department_admin_calling_line_id_number_access",
                "groupDepartmentAdminCallingLineIdNumberAccess",
                str,
            ),
            E("group_user_authentication_access", "groupUserAuthenticationAccess", str),
            E("group_user_group_directory_access", "groupUserGroupDirectoryAccess", str),
            E("group_user_profile_access", "groupUserProfileAccess", str),
            E(
                "group_user_enhanced_call_logs_access",
                "groupUserEnhancedCallLogsAccess",
                str,
            ),
            E(
                "group_user_auto_attendant_name_dialing_access",
                "groupUserAutoAttendantNameDialingAccess",
                str,
            ),
            E("group_admin_profile_access", "groupAdminProfileAccess", str),
            E("group_admin_user_access", "groupAdminUserAccess", str),
            E("group_admin_admin_access", "groupAdminAdminAccess", str),
            E("group_admin_department_access", "groupAdminDepartmentAccess", str),
            E("group_admin_access_device_access", "groupAdminAccessDeviceAccess", str),
            E(
                "group_admin_enhanced_service_instance_access",
                "groupAdminEnhancedServiceInstanceAccess",
                str,
            ),
            E(
                "group_admin_feature_access_code_access",
                "groupAdminFeatureAccessCodeAccess",
                str,
            ),
            E(
                "group_admin_phone_number_extension_access",
                "groupAdminPhoneNumberExtensionAccess",
                str,
            ),
            E(
                "group_admin_calling_line_id_number_access",
                "groupAdminCallingLineIdNumberAccess",
                str,
            ),
            E("group_admin_service_access", "groupAdminServiceAccess", str),
            E("group_admin_trunk_group_access", "groupAdminTrunkGroupAccess", str),
            E(
                "group_admin_verify_translation_and_routing_access",
                "groupAdminVerifyTranslationAndRoutingAccess",
                str,
            ),
            E(
                "group_admin_session_admission_control_access",
                "groupAdminSessionAdmissionControlAccess",
                str,
            ),
            E(
                "group_admin_dialable_caller_id_access",
                "groupAdminDialableCallerIDAccess",
                str,
            ),
            E("group_admin_office_zone_access", "groupAdminOfficeZoneAccess", str),
            E(
                "group_admin_number_activation_access",
                "groupAdminNumberActivationAccess",
                str,
            ),
            E(
                "group_admin_communication_barring_user_profile_access",
                "groupAdminCommunicationBarringUserProfileAccess",
                str,
            ),
            E(
                "service_provider_admin_profile_access",
                "serviceProviderAdminProfileAccess",
                str,
            ),
            E(
                "service_provider_admin_group_access",
                "serviceProviderAdminGroupAccess",
                str,
            ),
            E(
                "service_provider_admin_user_access",
                "serviceProviderAdminUserAccess",
                str,
            ),
            E(
                "service_provider_admin_admin_access",
                "serviceProviderAdminAdminAccess",
                str,
            ),
            E(
                "service_provider_admin_department_access",
                "ServiceProviderAdminDepartmentAccess",
                str,
            ),
            E(
                "service_provider_admin_access_device_access",
                "serviceProviderAdminAccessDeviceAccess",
                str,
            ),
            E(
                "service_provider_admin_phone_number_extension_access",
                "serviceProviderAdminPhoneNumberExtensionAccess",
                str,
            ),
            E(
                "service_provider_admin_calling_line_id_number_access",
                "serviceProviderAdminCallingLineIdNumberAccess",
                str,
            ),
            E(
                "service_provider_admin_service_access",
                "serviceProviderAdminServiceAccess",
                str,
            ),
            E(
                "service_provider_admin_service_pack_access",
                "serviceProviderAdminServicePackAccess",
                str,
            ),
            E(
                "service_provider_admin_session_admission_control_access",
                "serviceProviderAdminSessionAdmissionControlAccess",
                str,
            ),
            E(
                "service_provider_admin_verify_translation_and_routing_access",
                "serviceProviderAdminVerifyTranslationAndRoutingAccess",
                str,
            ),
            E(
                "service_provider_admin_web_branding_access",
                "serviceProviderAdminWebBrandingAccess",
                str,
            ),
            E(
                "service_provider_admin_office_zone_access",
                "serviceProviderAdminOfficeZoneAccess",
                str,
            ),
            E(
                "service_provider_admin_communication_barring_access",
                "serviceProviderAdminCommunicationBarringAccess",
                str,
            ),
            E(
                "enterprise_admin_network_policy_access",
                "enterpriseAdminNetworkPolicyAccess",
                str,
            ),
            E(
                "service_provider_admin_dialable_caller_id_access",
                "serviceProviderAdminDialableCallerIDAccess",
                str,
            ),
            E(
                "enterprise_admin_number_activation_access",
                "enterpriseAdminNumberActivationAccess",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPortalAPIAddACLEntryRequest(OCIRequest):
    """
    Add an entry to the Portal API access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPortalAPIDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the Portal API access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPortalAPIGetACLListRequest(OCIRequest):
    """
    Get the Portal API access control list.

    The response is either ``SystemPortalAPIGetACLListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPortalAPIModifyACLEntryRequest(OCIRequest):
    """
    Modify an entry within the Portal API access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPortalPasscodeRulesGetRequest(OCIRequest):
    """
    Requests the system passcode rules setting.

    The response is either ``SystemPortalPasscodeRulesGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPortalPasscodeRulesGetRequest19(OCIRequest):
    """
    Requests the system passcode rules setting.

    The response is either ``SystemPortalPasscodeRulesGetResponse19()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPortalPasscodeRulesModifyRequest(OCIRequest):
    """
    Request to modify the system passcode rules setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: numberOfRepeatedDigits
    disallowRepeatedPatterns disallowContiguousSequences numberOfAscendingDigits
    numberOfDescendingDigits numberOfPreviousPasscodes

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        number_of_repeated_digits: numberOfRepeatedDigits
        disallow_repeated_patterns: disallowRepeatedPatterns
        disallow_contiguous_sequences: disallowContiguousSequences
        number_of_ascending_digits: numberOfAscendingDigits
        number_of_descending_digits: numberOfDescendingDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        number_of_previous_passcodes: numberOfPreviousPasscodes
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        default_password: defaultPassword
    """

    disallow_repeated_digits: bool = attr.ib(default=None)
    number_of_repeated_digits: int = attr.ib(default=None)
    disallow_repeated_patterns: bool = attr.ib(default=None)
    disallow_contiguous_sequences: bool = attr.ib(default=None)
    number_of_ascending_digits: int = attr.ib(default=None)
    number_of_descending_digits: int = attr.ib(default=None)
    disallow_user_number: bool = attr.ib(default=None)
    disallow_reversed_user_number: bool = attr.ib(default=None)
    disallow_old_passcode: bool = attr.ib(default=None)
    number_of_previous_passcodes: int = attr.ib(default=None)
    disallow_reversed_old_passcode: bool = attr.ib(default=None)
    min_code_length: int = attr.ib(default=None)
    max_code_length: int = attr.ib(default=None)
    disable_login_after_max_failed_login_attempts: bool = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    expire_password: bool = attr.ib(default=None)
    passcode_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)
    default_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("disallow_repeated_digits", "disallowRepeatedDigits", bool),
            E("number_of_repeated_digits", "numberOfRepeatedDigits", int),
            E("disallow_repeated_patterns", "disallowRepeatedPatterns", bool),
            E("disallow_contiguous_sequences", "disallowContiguousSequences", bool),
            E("number_of_ascending_digits", "numberOfAscendingDigits", int),
            E("number_of_descending_digits", "numberOfDescendingDigits", int),
            E("disallow_user_number", "disallowUserNumber", bool),
            E("disallow_reversed_user_number", "disallowReversedUserNumber", bool),
            E("disallow_old_passcode", "disallowOldPasscode", bool),
            E("number_of_previous_passcodes", "numberOfPreviousPasscodes", int),
            E("disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool),
            E("min_code_length", "minCodeLength", int),
            E("max_code_length", "maxCodeLength", int),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("default_password", "defaultPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPreferredCarrierAddRequest(OCIRequest):
    """
    Add a carrier to the system.

    More than one carrier may be assigned to each country code.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        carrier: carrier
        cic: cic
        country_code: countryCode
        is_intra_lata: isIntraLata
        is_inter_lata: isInterLata
        is_international: isInternational
    """

    carrier: str = attr.ib()
    cic: str = attr.ib()
    country_code: str = attr.ib()
    is_intra_lata: bool = attr.ib()
    is_inter_lata: bool = attr.ib()
    is_international: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("carrier", "carrier", str, is_required=True),
            E("cic", "cic", str, is_required=True),
            E("country_code", "countryCode", str, is_required=True),
            E("is_intra_lata", "isIntraLata", bool, is_required=True),
            E("is_inter_lata", "isInterLata", bool, is_required=True),
            E("is_international", "isInternational", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPreferredCarrierDeleteRequest(OCIRequest):
    """
    Delete a carrier from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. An
    ``ErrorResponse()`` is returned if the carrier is in use, or if the carrier didn't
    exist prior to deletion..

    Attributes:
        carrier: carrier
    """

    carrier: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("carrier", "carrier", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPreferredCarrierGetListRequest(OCIRequest):
    """
    Requests a table of all the carriers defined in the system.

    The response is either a ``SystemPreferredCarrierGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPreferredCarrierGetRequest(OCIRequest):
    """
    Requests the attributes of carrier.

    The response is either a ``SystemPreferreredCarrierGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        carrier: carrier
    """

    carrier: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("carrier", "carrier", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPreferredCarrierModifyRequest(OCIRequest):
    """
    Modify the attributes of a carrier.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. An
    ``ErrorResponse()`` is returned if countryCode modification is attempted while the
    carrier is assigned to a service provider.  An ``ErrorResponse()`` is returned if an
    attempt to set isIntraLata to false is made while the carrier is used as an intra-LATA
    carrier.  An ``ErrorResponse()`` is returned if an attempt to set isInternational to
    false is made while the carrier is used as an international carrier.

    Attributes:
        carrier: carrier
        cic: cic
        country_code: countryCode
        is_intra_lata: isIntraLata
        is_inter_lata: isInterLata
        is_international: isInternational
    """

    carrier: str = attr.ib()
    cic: str = attr.ib(default=None)
    country_code: str = attr.ib(default=None)
    is_intra_lata: bool = attr.ib(default=None)
    is_inter_lata: bool = attr.ib(default=None)
    is_international: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("carrier", "carrier", str, is_required=True),
            E("cic", "cic", str),
            E("country_code", "countryCode", str),
            E("is_intra_lata", "isIntraLata", bool),
            E("is_inter_lata", "isInterLata", bool),
            E("is_international", "isInternational", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemProvisioningValidationGetRequest(OCIRequest):
    """
    Request to get the system's provisioning validation attributes.

    The response is either a ``SystemProvisioningValidationGetResponse()`` or and
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemProvisioningValidationGetRequest14sp2(OCIRequest):
    """
    Request to get the system's provisioning validation attributes.

    The response is either a ``SystemProvisioningValidationGetResponse14sp2()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemProvisioningValidationModifyRequest(OCIRequest):
    """
    Request to modify the system's provisioning validation attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        is_active: isActive
        is_network_server_query_active: isNetworkServerQueryActive
        timeout_seconds: timeoutSeconds
    """

    is_active: bool = attr.ib(default=None)
    is_network_server_query_active: bool = attr.ib(default=None)
    timeout_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool),
            E("is_network_server_query_active", "isNetworkServerQueryActive", bool),
            E("timeout_seconds", "timeoutSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRedundancyParametersGetRequest(OCIRequest):
    """
    Replaced By ``SystemRedundancyParametersGetRequest16sp2()`` Request to get the list of
    Redundancy system parameters.

    The response is either ``SystemRedundancyParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRedundancyParametersGetRequest16sp2(OCIRequest):
    """
    Request to get the list of Redundancy system parameters.

    The response is either ``SystemRedundancyParametersGetResponse16sp2()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRedundancyParametersModifyRequest(OCIRequest):
    """
    Request to modify Redundancy system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        roll_back_timer_minutes: rollBackTimerMinutes
        send_sip_option_message_upon_migration: sendSipOptionMessageUponMigration
    """

    roll_back_timer_minutes: int = attr.ib(default=None)
    send_sip_option_message_upon_migration: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("roll_back_timer_minutes", "rollBackTimerMinutes", int),
            E(
                "send_sip_option_message_upon_migration",
                "sendSipOptionMessageUponMigration",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoamingNetworkAddRequest(OCIRequest):
    """
    Add a Roaming Network.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        msc_address: mscAddress
        network_translation_index: networkTranslationIndex
    """

    msc_address: str = attr.ib()
    network_translation_index: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("msc_address", "mscAddress", str, is_required=True),
            E("network_translation_index", "networkTranslationIndex", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoamingNetworkDeleteRequest(OCIRequest):
    """
    Delete a Roaming Network.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        msc_address: mscAddress
    """

    msc_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("msc_address", "mscAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoamingNetworkModifyRequest(OCIRequest):
    """
    Modify a Roaming Network.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        msc_address: mscAddress
        network_translation_index: networkTranslationIndex
    """

    msc_address: str = attr.ib()
    network_translation_index: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("msc_address", "mscAddress", str, is_required=True),
            E("network_translation_index", "networkTranslationIndex", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRouteListEnterpriseTrunkNumberRangeGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all enterprise trunk number ranges in the system.

    The response is either
    ``SystemRouteListEnterpriseTrunkNumberRangeGetSummaryListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemAddRequest(OCIRequest):
    """
    Add an Route Point External System, which is a cluster of Application Controllers.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemApplicationControllerAddListRequest(OCIRequest):
    """
    Add an application controller to Route Point External System.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        application_controller: applicationController
    """

    name: str = attr.ib()
    application_controller: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("application_controller", "applicationController", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemApplicationControllerDeleteListRequest(OCIRequest):
    """
    Delete an application controller for Route Point External System.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        application_controller: applicationController
    """

    name: str = attr.ib()
    application_controller: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("application_controller", "applicationController", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemApplicationControllerGetRequest(OCIRequest):
    """
    Get a list of Application Controllers assigned to the Route Point External Systems
    specified.

    The response is either
    ``SystemRoutePointExternalSystemApplicationControllerGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        external_system: externalSystem
    """

    external_system: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("external_system", "externalSystem", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemDeleteRequest(OCIRequest):
    """
    Delete an Route Point External System.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
    """

    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemGetListRequest(OCIRequest):
    """
    Get a list of Route Point External Systems that are configured for the system.

    The response is either ``SystemRoutePointExternalSystemGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemGetRoutePointListRequest(OCIRequest):
    """
    Get a list of Route Points that are using the specified Route Point External System.

    The response is either a ``SystemRoutePointExternalSystemGetRoutePointListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        route_point_external_system: routePointExternalSystem
    """

    route_point_external_system: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "route_point_external_system",
                "routePointExternalSystem",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutePointExternalSystemModifyRequest(OCIRequest):
    """
    Modify an Route Point External System.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingAddRouteDeviceRequest14(OCIRequest):
    """
    Request to add a routing device to a route.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_name: routeName
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        description: description
    """

    route_name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_name", "routeName", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingAddRouteRequest(OCIRequest):
    """
    Request to add a route to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_name: routeName
    """

    route_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_name", "routeName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingAddTranslationRequest(OCIRequest):
    """
    Request to add a digit routing table entry to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        digits: digits
        route_name: routeName
    """

    digits: str = attr.ib()
    route_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("digits", "digits", str, is_required=True),
            E("route_name", "routeName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingDeleteRouteDeviceRequest(OCIRequest):
    """
    Request to delete a routing device from a route.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_name: routeName
        net_address: netAddress
        port: port
    """

    route_name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_name", "routeName", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingDeleteRouteRequest(OCIRequest):
    """
    Request to delete a route from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_name: routeName
    """

    route_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_name", "routeName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingDeleteTranslationRequest(OCIRequest):
    """
    Request to delete a digit routing table entry from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        digits: digits
    """

    digits: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("digits", "digits", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingGetRequest(OCIRequest):
    """
    Request the system's general routing attributes.

    The response is either a ``SystemRoutingGetResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingGetRouteDeviceListRequest(OCIRequest):
    """
    Request to get a list of devices for a route.

    The response is either a ``SystemRoutingGetRouteDeviceListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        route_name: routeName
    """

    route_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_name", "routeName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingGetRouteListRequest(OCIRequest):
    """
    Request to get a list of routes in the system.

    The response is either a ``SystemRoutingGetRouteListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingGetTranslationListRequest(OCIRequest):
    """
    Request to get the system digit routing table.

    The response is either a ``SystemRoutingGetTranslationListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingModifyRequest(OCIRequest):
    """
    Modifies the system's general routing attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        is_route_round_robin: isRouteRoundRobin
        route_timer_seconds: routeTimerSeconds
        dns_resolved_address_selection_policy: dnsResolvedAddressSelectionPolicy
        stateful_expiration_minutes: statefulExpirationMinutes
        max_addresses_per_hostname: maxAddressesPerHostname
        max_addresses_during_setup: maxAddressesDuringSetup
    """

    is_route_round_robin: bool = attr.ib(default=None)
    route_timer_seconds: int = attr.ib(default=None)
    dns_resolved_address_selection_policy: str = attr.ib(default=None)
    stateful_expiration_minutes: int = attr.ib(default=None)
    max_addresses_per_hostname: int = attr.ib(default=None)
    max_addresses_during_setup: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_route_round_robin", "isRouteRoundRobin", bool),
            E("route_timer_seconds", "routeTimerSeconds", int),
            E(
                "dns_resolved_address_selection_policy",
                "dnsResolvedAddressSelectionPolicy",
                str,
            ),
            E("stateful_expiration_minutes", "statefulExpirationMinutes", int),
            E("max_addresses_per_hostname", "maxAddressesPerHostname", int),
            E("max_addresses_during_setup", "maxAddressesDuringSetup", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingModifyRouteDeviceRequest(OCIRequest):
    """
    Request to modify a routing device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_name: routeName
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        description: description
    """

    route_name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_name", "routeName", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingModifyTranslationRequest(OCIRequest):
    """
    Request to modify a digit routing table entry in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        digits: digits
        route_name: routeName
    """

    digits: str = attr.ib()
    route_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("digits", "digits", str, is_required=True),
            E("route_name", "routeName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoutingProfileGetListRequest(OCIRequest):
    """
    Request to get the list of system routing profiles.

    The response is either a ``SystemRoutingProfileGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAddACLEntryRequest14(OCIRequest):
    """
    Add an entry to the SIP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    transport_protocol: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("transport_protocol", "transportProtocol", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAddACLEntryRequest14sp2(OCIRequest):
    """
    Add an entry to the SIP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    transport_protocol: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("transport_protocol", "transportProtocol", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAddContentTypeRequest(OCIRequest):
    """
    Add a content type for the SIP interface.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        content_type: contentType
        interface: interface
    """

    content_type: str = attr.ib()
    interface: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("content_type", "contentType", str, is_required=True),
            E("interface", "interface", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAuthenticationLockoutClearAllRequest(OCIRequest):
    """
    Request to clear all sip authentication lockouts (both endpoint and trunk group) in
    the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAuthenticationPasswordRulesGetRequest(OCIRequest):
    """
    Request to get the system level SIP authentication password rule settings.

    The response is either a ``SystemSIPAuthenticationPasswordRulesGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAuthenticationPasswordRulesModifyRequest(OCIRequest):
    """
    Request to modify the system level SIP authentication password rule settings The
    response is either ``SuccessResponse()`` or ``ErrorResponse()``.


    Attributes:
        disallow_authentication_name: disallowAuthenticationName
        disallow_old_password: disallowOldPassword
        disallow_reversed_old_password: disallowReversedOldPassword
        restrict_min_digits: restrictMinDigits
        min_digits: minDigits
        restrict_min_upper_case_letters: restrictMinUpperCaseLetters
        min_upper_case_letters: minUpperCaseLetters
        restrict_min_lower_case_letters: restrictMinLowerCaseLetters
        min_lower_case_letters: minLowerCaseLetters
        restrict_min_non_alphanumeric_characters: restrictMinNonAlphanumericCharacters
        min_non_alphanumeric_characters: minNonAlphanumericCharacters
        min_length: minLength
        send_permanent_lockout_notification: sendPermanentLockoutNotification
        permanent_lockout_notify_email_address: permanentLockoutNotifyEmailAddress
        endpoint_authentication_lockout_type: endpointAuthenticationLockoutType
        endpoint_temporary_lockout_threshold: endpointTemporaryLockoutThreshold
        endpoint_wait_algorithm: endpointWaitAlgorithm
        endpoint_lockout_fixed_minutes: endpointLockoutFixedMinutes
        endpoint_permanent_lockout_threshold: endpointPermanentLockoutThreshold
        trunk_group_authentication_lockout_type: trunkGroupAuthenticationLockoutType
        trunk_group_temporary_lockout_threshold: trunkGroupTemporaryLockoutThreshold
        trunk_group_wait_algorithm: trunkGroupWaitAlgorithm
        trunk_group_lockout_fixed_minutes: trunkGroupLockoutFixedMinutes
        trunk_group_permanent_lockout_threshold: trunkGroupPermanentLockoutThreshold
    """

    disallow_authentication_name: bool = attr.ib(default=None)
    disallow_old_password: bool = attr.ib(default=None)
    disallow_reversed_old_password: bool = attr.ib(default=None)
    restrict_min_digits: bool = attr.ib(default=None)
    min_digits: int = attr.ib(default=None)
    restrict_min_upper_case_letters: bool = attr.ib(default=None)
    min_upper_case_letters: int = attr.ib(default=None)
    restrict_min_lower_case_letters: bool = attr.ib(default=None)
    min_lower_case_letters: int = attr.ib(default=None)
    restrict_min_non_alphanumeric_characters: bool = attr.ib(default=None)
    min_non_alphanumeric_characters: int = attr.ib(default=None)
    min_length: int = attr.ib(default=None)
    send_permanent_lockout_notification: bool = attr.ib(default=None)
    permanent_lockout_notify_email_address: str = attr.ib(default=None)
    endpoint_authentication_lockout_type: str = attr.ib(default=None)
    endpoint_temporary_lockout_threshold: int = attr.ib(default=None)
    endpoint_wait_algorithm: str = attr.ib(default=None)
    endpoint_lockout_fixed_minutes: str = attr.ib(default=None)
    endpoint_permanent_lockout_threshold: int = attr.ib(default=None)
    trunk_group_authentication_lockout_type: str = attr.ib(default=None)
    trunk_group_temporary_lockout_threshold: int = attr.ib(default=None)
    trunk_group_wait_algorithm: str = attr.ib(default=None)
    trunk_group_lockout_fixed_minutes: str = attr.ib(default=None)
    trunk_group_permanent_lockout_threshold: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("disallow_authentication_name", "disallowAuthenticationName", bool),
            E("disallow_old_password", "disallowOldPassword", bool),
            E("disallow_reversed_old_password", "disallowReversedOldPassword", bool),
            E("restrict_min_digits", "restrictMinDigits", bool),
            E("min_digits", "minDigits", int),
            E("restrict_min_upper_case_letters", "restrictMinUpperCaseLetters", bool),
            E("min_upper_case_letters", "minUpperCaseLetters", int),
            E("restrict_min_lower_case_letters", "restrictMinLowerCaseLetters", bool),
            E("min_lower_case_letters", "minLowerCaseLetters", int),
            E(
                "restrict_min_non_alphanumeric_characters",
                "restrictMinNonAlphanumericCharacters",
                bool,
            ),
            E("min_non_alphanumeric_characters", "minNonAlphanumericCharacters", int),
            E("min_length", "minLength", int),
            E(
                "send_permanent_lockout_notification",
                "sendPermanentLockoutNotification",
                bool,
            ),
            E(
                "permanent_lockout_notify_email_address",
                "permanentLockoutNotifyEmailAddress",
                str,
            ),
            E(
                "endpoint_authentication_lockout_type",
                "endpointAuthenticationLockoutType",
                str,
            ),
            E(
                "endpoint_temporary_lockout_threshold",
                "endpointTemporaryLockoutThreshold",
                int,
            ),
            E("endpoint_wait_algorithm", "endpointWaitAlgorithm", str),
            E("endpoint_lockout_fixed_minutes", "endpointLockoutFixedMinutes", str),
            E(
                "endpoint_permanent_lockout_threshold",
                "endpointPermanentLockoutThreshold",
                int,
            ),
            E(
                "trunk_group_authentication_lockout_type",
                "trunkGroupAuthenticationLockoutType",
                str,
            ),
            E(
                "trunk_group_temporary_lockout_threshold",
                "trunkGroupTemporaryLockoutThreshold",
                int,
            ),
            E("trunk_group_wait_algorithm", "trunkGroupWaitAlgorithm", str),
            E("trunk_group_lockout_fixed_minutes", "trunkGroupLockoutFixedMinutes", str),
            E(
                "trunk_group_permanent_lockout_threshold",
                "trunkGroupPermanentLockoutThreshold",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the SIP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeleteACLEntryRequest14sp2(OCIRequest):
    """
    Delete an entry from the SIP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeleteContentTypeRequest(OCIRequest):
    """
    Delete a content type for the SIP interface.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        content_type: contentType
    """

    content_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("content_type", "contentType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceFileApplyExtendedCaptureToAllDeviceProfilesRequest(OCIRequest):
    """
    Request to apply an extended file capture value to all the profile instances
    associated to a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        extended_capture_on_upload_from_device: extendedCaptureOnUploadFromDevice
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    extended_capture_on_upload_from_device: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E(
                "extended_capture_on_upload_from_device",
                "extendedCaptureOnUploadFromDevice",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeDeleteRequest(OCIRequest):
    """
    Request to delete a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileDeleteRequest(OCIRequest):
    """
    Request to delete a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeFileDeleteRequest14sp8()``

    Attributes:
        device_type: deviceType
        file_type: fileType
    """

    device_type: str = attr.ib()
    file_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileDeleteRequest14sp8(OCIRequest):
    """
    Request to delete a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetListRequest(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device type basis.

    The response is either ``SystemSIPDeviceTypeFileGetListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeFileGetListRequest14sp8()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetListRequest14sp8(OCIRequest):
    """
    Request to get the list of device files managed by the Device Management System, on a
    per-device type basis.

    The response is either ``SystemSIPDeviceTypeFileGetListResponse14sp8()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetRequest(OCIRequest):
    """
    Request to get a sip device type file.

    The response is either ``SystemSIPDeviceTypeFileGetResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeFileGetRequest14sp8()``

    Attributes:
        device_type: deviceType
        file_type: fileType
    """

    device_type: str = attr.ib()
    file_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetRequest14sp8(OCIRequest):
    """
    Request to get a sip device type file.

    The response is either ``SystemSIPDeviceTypeFileGetResponse14sp8()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetRequest16sp1(OCIRequest):
    """
    Replaced By ``SystemSIPDeviceTypeFileGetRequest18()``.

    Request to get a sip device type file.

    The response is either ``SystemSIPDeviceTypeFileGetResponse16sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetRequest18(OCIRequest):
    """
    Request to get a sip device type file.

    The response is either ``SystemSIPDeviceTypeFileGetResponse18()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetRequest19(OCIRequest):
    """
    Request to get a sip device type file.

    The response is either ``SystemSIPDeviceTypeFileGetResponse19()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileGetRequest20(OCIRequest):
    """
    Request to get a sip device type file.

    The response is either ``SystemSIPDeviceTypeFileGetResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest14sp1(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse14sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest14sp2(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse14sp2()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeGetRequest14sp3()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest14sp3(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse14sp3()`` or
    ``ErrorResponse()``. Replaced by: ``SystemSIPDeviceTypeGetRequest14sp6()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest14sp6(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse14sp6()`` or
    ``ErrorResponse()``.

    Replaced By : ``SystemSIPDeviceTypeGetRequest15()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest15(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse15()`` or ``ErrorResponse()``.

    Replaced By : ``SystemSIPDeviceTypeGetRequest16()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest16(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse16()`` or ``ErrorResponse()``.
    Replaced by: ``SystemSIPDeviceTypeGetRequest16sp1()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest16sp1(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse16sp1()`` or
    ``ErrorResponse()``. Replaced by: ``SystemSIPDeviceTypeGetRequest17()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest17(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse17()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest17sp4(OCIRequest):
    """
    Replaced By ``SystemSIPDeviceTypeGetRequest18()``.

    Request to get a sip device type.  See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse17sp4()`` or
    ``ErrorResponse()``. Replaced by: ``SystemSIPDeviceTypeGetRequest18()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest18(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse18()`` or ``ErrorResponse()``.
    Replaced by: ``SystemSIPDeviceTypeGetRequest19()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest18sp1(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse18sp1()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest19(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse19()`` or ``ErrorResponse()``.
    Replaced by: ``SystemSIPDeviceTypeGetRequest19sp1()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest19sp1(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse19sp1()`` or
    ``ErrorResponse()``. Replaced by: ``SystemSIPDeviceTypeGetRequest20()``

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest20(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse20()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetRequest21(OCIRequest):
    """
    Request to get a sip device type.

    See Also: ``SystemDeviceTypeGetRequest()``

    The response is either ``SystemSIPDeviceTypeGetResponse21()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeLanguageMappingGetListRequest(OCIRequest):
    """
    Request to get the list of device language names mapped to BroadWorks language names,
    per-device type.

    The response is either ``SystemSIPDeviceTypeLanguageMappingGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeServiceGetRequest(OCIRequest):
    """
    Request to get the list of BroadWorks services that can be integrated to a device type
    and the level of integration for this device type.

    The response is either ``SystemSIPDeviceTypeServiceGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
    """

    device_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeServiceModifyRequest(OCIRequest):
    """
    Request to set the level of integration that a device type has in relation to
    BroadWorks services.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        supports_polycom_phone_services: supportsPolycomPhoneServices
    """

    device_type: str = attr.ib()
    supports_polycom_phone_services: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("supports_polycom_phone_services", "supportsPolycomPhoneServices", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDiversionReasonGetRequest(OCIRequest):
    """
    Request to get the list of SIP Diversion Cause values.

    The response is either a ``SystemSIPDiversionReasonGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDiversionReasonModifyRequest(OCIRequest):
    """
    Request to modify the SIP cause value for a given diversion reason.

    The response is either a ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        diversion_reason: diversionReason
        cause_value: causeValue
    """

    diversion_reason: str = attr.ib()
    cause_value: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("diversion_reason", "diversionReason", str, is_required=True),
            E("cause_value", "causeValue", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPGetACLListRequest(OCIRequest):
    """
    Get the SIP access control list.

    The response is either ``SystemSIPGetACLListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPGetContentTypeListRequest(OCIRequest):
    """
    Get the content type list for the SIP interface.

    The response is either ``SystemSIPGetContentTypeListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPModifyACLEntryRequest(OCIRequest):
    """
    Modify an entry from the SIP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    transport_protocol: str = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("transport_protocol", "transportProtocol", str),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPModifyACLEntryRequest14sp2(OCIRequest):
    """
    Modify an entry from the SIP access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    transport_protocol: str = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("transport_protocol", "transportProtocol", str),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPModifyContentTypeRequest(OCIRequest):
    """
    Modify an content type for the SIP interface.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        content_type: contentType
        interface: interface
    """

    content_type: str = attr.ib()
    interface: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("content_type", "contentType", str, is_required=True),
            E("interface", "interface", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIAddACLEntryRequest(OCIRequest):
    """
    Add an entry to the SMDI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIAddACLEntryRequest14sp2(OCIRequest):
    """
    Add an entry to the SMDI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIDeleteACLEntryRequest(OCIRequest):
    """
    Delete an entry from the SMDI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIDeleteACLEntryRequest14sp2(OCIRequest):
    """
    Delete an entry from the SMDI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIGetACLListRequest(OCIRequest):
    """
    Get the SMDI access control list.

    The response is either ``SystemSMDIGetACLListResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskAddServerRequest(OCIRequest):
    """
    Request to add a SMDI Server to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        net_address: netAddress
        port: port
        description: description
    """

    device_name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskAddServerRouteRequest(OCIRequest):
    """
    Request to add a SMDI Server route to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_destination: routeDestination
        device_name: deviceName
    """

    route_destination: str = attr.ib()
    device_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_destination", "routeDestination", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskDeleteServerRequest(OCIRequest):
    """
    Request to delete a SMDI Server from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
    """

    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskDeleteServerRouteRequest(OCIRequest):
    """
    Request to delete a SMDI Server route from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_destination: routeDestination
    """

    route_destination: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_destination", "routeDestination", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskGetServerListRequest(OCIRequest):
    """
    Request to get a list of SMDI Servers defined in the system.

    The response is either a ``SystemSMDIMessageDeskGetServerListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskGetServerRouteListRequest(OCIRequest):
    """
    Request to get a list of SMDI Servers routes in the system.

    The response is either a ``SystemSMDIMessageDeskGetServerRouteListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskModifyServerRequest(OCIRequest):
    """
    Request to modify a SMDI Server in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        net_address: netAddress
        port: port
        description: description
    """

    device_name: str = attr.ib()
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIMessageDeskModifyServerRouteRequest(OCIRequest):
    """
    Replace the list of devices associated with a SMDI server route destination.

    There must be at least one device in the list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        route_destination: routeDestination
        device_name_list: deviceNameList
    """

    route_destination: str = attr.ib()
    device_name_list: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("route_destination", "routeDestination", str, is_required=True),
            E("device_name_list", "deviceNameList", str, is_complex=True),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIModifyACLEntryRequest(OCIRequest):
    """
    Modify an entry from the SMDI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIModifyACLEntryRequest14sp2(OCIRequest):
    """
    Modify an entry from the SMDI access control list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        description: description
    """

    net_address: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIParametersGetRequest(OCIRequest):
    """
    Request to get the list of SMDI system parameters.

    The response is either ``SystemSMDIParametersGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMDIParametersModifyRequest(OCIRequest):
    """
    Request to modify SMDI system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        enable_smdi: enableSMDI
        listening_port: listeningPort
        max_connections: maxConnections
    """

    enable_smdi: bool = attr.ib(default=None)
    listening_port: int = attr.ib(default=None)
    max_connections: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enable_smdi", "enableSMDI", bool),
            E("listening_port", "listeningPort", int),
            E("max_connections", "maxConnections", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMPPGetRequest(OCIRequest):
    """
    Request the system level data associated with SMPP external interface.

    The response is either a ``SystemSMPPGetResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``SystemSMPPGetRequest14sp5()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMPPGetRequest14sp5(OCIRequest):
    """
    Request the system level data associated with SMPP external interface.

    The response is either a ``SystemSMPPGetResponse14sp5()`` or an ``ErrorResponse()``.
    Replaced by: ``SystemSMPPGetRequest21()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMPPGetRequest21(OCIRequest):
    """
    Request the system level data associated with SMPP external interface.

    The response is either a ``SystemSMPPGetResponse21()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSMPPModifyRequest(OCIRequest):
    """
    Request to modify the system level data associated with the SMPP external interface.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        primary_smpp_server_net_address: primarySMPPServerNetAddress
        primary_smpp_port: primarySMPPPort
        secondary_smpp_server_net_address: secondarySMPPServerNetAddress
        secondary_smpp_port: secondarySMPPPort
        system_id: systemId
        password: password
        version: version
        system_type: systemType
        enable_mwi_customized_message: enableMWICustomizedMessage
        support_message_payload: supportMessagePayload
        max_short_message_length: maxShortMessageLength
        use_gsm_mwi_ucs2_encoding: useGsmMwiUcs2Encoding
    """

    primary_smpp_server_net_address: str = attr.ib(default=None)
    primary_smpp_port: int = attr.ib(default=None)
    secondary_smpp_server_net_address: str = attr.ib(default=None)
    secondary_smpp_port: int = attr.ib(default=None)
    system_id: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    version: str = attr.ib(default=None)
    system_type: str = attr.ib(default=None)
    enable_mwi_customized_message: bool = attr.ib(default=None)
    support_message_payload: bool = attr.ib(default=None)
    max_short_message_length: int = attr.ib(default=None)
    use_gsm_mwi_ucs2_encoding: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("primary_smpp_server_net_address", "primarySMPPServerNetAddress", str),
            E("primary_smpp_port", "primarySMPPPort", int),
            E("secondary_smpp_server_net_address", "secondarySMPPServerNetAddress", str),
            E("secondary_smpp_port", "secondarySMPPPort", int),
            E("system_id", "systemId", str),
            E("password", "password", str),
            E("version", "version", str),
            E("system_type", "systemType", str),
            E("enable_mwi_customized_message", "enableMWICustomizedMessage", bool),
            E("support_message_payload", "supportMessagePayload", bool),
            E("max_short_message_length", "maxShortMessageLength", int),
            E("use_gsm_mwi_ucs2_encoding", "useGsmMwiUcs2Encoding", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleAddRequest(OCIRequest):
    """
    Add a system schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        schedule_name: scheduleName
        schedule_type: scheduleType
    """

    schedule_name: str = attr.ib()
    schedule_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_name", "scheduleName", str, is_required=True),
            E("schedule_type", "scheduleType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleGetListRequest(OCIRequest):
    """
    Get the list of a system schedules.

    The list can be filtered by schedule type.

    The response is either a ``SystemScheduleGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        schedule_type: scheduleType
    """

    schedule_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_type", "scheduleType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationDeleteClassificationRequest(OCIRequest):
    """
    Delete a System Security Classification The response is either a ``SuccessResponse()``
    or an ``ErrorResponse()``.


    Attributes:
        security_classification_name: securityClassificationName
    """

    security_classification_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "security_classification_name",
                "securityClassificationName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationGetClassificationRequest(OCIRequest):
    """
    Get a system Security Classification.

    The response is either ``SystemSecurityClassificationGetClassificationResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        security_classification_name: securityClassificationName
    """

    security_classification_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "security_classification_name",
                "securityClassificationName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationGetRequest(OCIRequest):
    """
    Get a system Security Classifications parameters.

    The response is either ``SystemSecurityClassificationGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationGetRequest21(OCIRequest):
    """
    Get system Security Classifications parameters.

    The response is either ``SystemSecurityClassificationGetResponse21()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationModifyRequest(OCIRequest):
    """
    Modify security classification parameters.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. NOTE: The
    security classifications must be specified in order of priority.  The command fails if
    all the security classifications defined for the system are not provided.

    Attributes:
        meet_me_annc_threshold: meetMeAnncThreshold
        play_trunk_user_security_classification_announcement:
            playTrunkUserSecurityClassificationAnnouncement
        security_classification_name: securityClassificationName
    """

    meet_me_annc_threshold: int = attr.ib(default=None)
    play_trunk_user_security_classification_announcement: bool = attr.ib(default=None)
    security_classification_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("meet_me_annc_threshold", "meetMeAnncThreshold", int),
            E(
                "play_trunk_user_security_classification_announcement",
                "playTrunkUserSecurityClassificationAnnouncement",
                bool,
            ),
            E(
                "security_classification_name",
                "securityClassificationName",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSelectiveServicesGetRequest(OCIRequest):
    """
    Request the system level data associated with Selective Services.

    The response is either a ``SystemSelectiveServicesGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSelectiveServicesGetRequest18sp1(OCIRequest):
    """
    Request the system level data associated with Selective Services.

    The response is either a ``SystemSelectiveServicesGetResponse18sp1()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSelectiveServicesModifyRequest(OCIRequest):
    """
    Modify the system level data associated with ``SystemSelectiveServicesRequest()``.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        schedule_combination: scheduleCombination
        screen_private_number: screenPrivateNumber
    """

    schedule_combination: str = attr.ib(default=None)
    screen_private_number: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("schedule_combination", "scheduleCombination", str),
            E("screen_private_number", "screenPrivateNumber", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServerAddressesGetRequest(OCIRequest):
    """
    Request to get the list of Server Addresses.

    The response is either ``SystemServerAddressesGetResponse()`` or ``ErrorResponse()``.
    See also: ``PrimaryInfoGetRequest()``
    ``PublicClusterGetFullyQualifiedDomainNameRequest()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServerAddressesModifyRequest(OCIRequest):
    """
    Request to modify Server Addresses.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        web_server_cluster_public_fqdn: webServerClusterPublicFQDN
        application_server_cluster_primary_public_fqdn:
            applicationServerClusterPrimaryPublicFQDN
        application_server_cluster_secondary_public_fqdn:
            applicationServerClusterSecondaryPublicFQDN
        application_server_cluster_primary_private_fqdn:
            applicationServerClusterPrimaryPrivateFQDN
        application_server_cluster_secondary_private_fqdn:
            applicationServerClusterSecondaryPrivateFQDN
    """

    web_server_cluster_public_fqdn: str = attr.ib(default=None)
    application_server_cluster_primary_public_fqdn: str = attr.ib(default=None)
    application_server_cluster_secondary_public_fqdn: str = attr.ib(default=None)
    application_server_cluster_primary_private_fqdn: str = attr.ib(default=None)
    application_server_cluster_secondary_private_fqdn: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("web_server_cluster_public_fqdn", "webServerClusterPublicFQDN", str),
            E(
                "application_server_cluster_primary_public_fqdn",
                "applicationServerClusterPrimaryPublicFQDN",
                str,
            ),
            E(
                "application_server_cluster_secondary_public_fqdn",
                "applicationServerClusterSecondaryPublicFQDN",
                str,
            ),
            E(
                "application_server_cluster_primary_private_fqdn",
                "applicationServerClusterPrimaryPrivateFQDN",
                str,
            ),
            E(
                "application_server_cluster_secondary_private_fqdn",
                "applicationServerClusterSecondaryPrivateFQDN",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceActivationAccessCodeGetRequest(OCIRequest):
    """
    Get the Service Activation Access Code system parameters.

    The response is either a ``SystemServiceActivationAccessCodeGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceActivationAccessCodeModifyRequest(OCIRequest):
    """
    Request to modify Service Activation Access Code system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        is_active: isActive
        terminating_access_code: terminatingAccessCode
        redirecting_access_code: redirectingAccessCode
        click_to_dial_access_code: clickToDialAccessCode
    """

    is_active: bool = attr.ib(default=None)
    terminating_access_code: str = attr.ib(default=None)
    redirecting_access_code: str = attr.ib(default=None)
    click_to_dial_access_code: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool),
            E("terminating_access_code", "terminatingAccessCode", str),
            E("redirecting_access_code", "redirectingAccessCode", str),
            E("click_to_dial_access_code", "clickToDialAccessCode", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceCodeAddRequest(OCIRequest):
    """
    Request to add a service code for the purpose of providing free format routable
    strings for dialing The response is either ``SuccessResponse()`` or
    ``ErrorResponse()``.


    Attributes:
        service_code: serviceCode
        description: description
    """

    service_code: str = attr.ib()
    description: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_code", "serviceCode", str, is_required=True),
            E("description", "description", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceCodeDeleteRequest(OCIRequest):
    """
    Request to delete a service code for the purpose of providing free format routable
    strings for dialing The response is either ``SuccessResponse()`` or
    ``ErrorResponse()``.


    Attributes:
        service_code: serviceCode
    """

    service_code: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_code", "serviceCode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceCodeModifyRequest(OCIRequest):
    """
    Request to modify service code.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_code: serviceCode
        description: description
    """

    service_code: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_code", "serviceCode", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceControlParametersGetRequest(OCIRequest):
    """
    Request to get the list of Service Control system parameters.

    The response is either ``SystemServiceControlParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceControlParametersModifyRequest(OCIRequest):
    """
    Request to modify Service Control system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        server_port: serverPort
        max_client_connections: maxClientConnections
    """

    server_port: int = attr.ib(default=None)
    max_client_connections: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("server_port", "serverPort", int),
            E("max_client_connections", "maxClientConnections", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServicePackMigrationGetRequest(OCIRequest):
    """
    Get system level Service Pack Migration parameters.

    The response is either a ``SystemServicePackMigrationGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServicePackMigrationModifyRequest(OCIRequest):
    """
    Modify system level settings for Service Pack Migration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        max_simultaneous_migration_tasks: maxSimultaneousMigrationTasks
    """

    max_simultaneous_migration_tasks: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_simultaneous_migration_tasks", "maxSimultaneousMigrationTasks", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServicePhoneNumberLookupRequest(OCIRequest):
    """
    Lookup if the given number is defined in the specified service in the system.

    The response is ``SystemServicePhoneNumberLookupResponse()``.

    Attributes:
        service_type: serviceType
        phone_number: phoneNumber
    """

    service_type: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_type", "serviceType", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSessionAdmissionControlGetRequest(OCIRequest):
    """
    Get the session admission control settings for the system.

    The response is either a ``SystemSessionAdmissionControlGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSessionAdmissionControlModifyRequest(OCIRequest):
    """
    Modify the session admission control settings for the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        count_long_connections_to_media_server: countLongConnectionsToMediaServer
        sac_handling_for_mo_h: sacHandlingForMoH
        block_vm_deposit_due_to_sac_limits: blockVMDepositDueToSACLimits
    """

    count_long_connections_to_media_server: bool = attr.ib(default=None)
    sac_handling_for_mo_h: str = attr.ib(default=None)
    block_vm_deposit_due_to_sac_limits: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "count_long_connections_to_media_server",
                "countLongConnectionsToMediaServer",
                bool,
            ),
            E("sac_handling_for_mo_h", "sacHandlingForMoH", str),
            E(
                "block_vm_deposit_due_to_sac_limits",
                "blockVMDepositDueToSACLimits",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSessionAuditGetRequest(OCIRequest):
    """
    Request the system level data associated with session audit.

    The response is either a ``SystemSessionAuditGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemSessionAuditGetRequest14sp3()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSessionAuditGetRequest14sp3(OCIRequest):
    """
    Request the system level data associated with session audit.

    The response is either a ``SystemSessionAuditGetResponse14sp3()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSessionAuditGetRequest17sp3(OCIRequest):
    """
    Request the system level data associated with session audit.

    The response is either a ``SystemSessionAuditGetResponse17sp3()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSessionAuditModifyRequest(OCIRequest):
    """
    Modify the system level data associated with session sudit.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``SystemSessionAuditModifyRequest14sp3()``

    Attributes:
        is_active: isActive
        interval_seconds: intervalSeconds
        timeout_period_seconds: timeoutPeriodSeconds
    """

    is_active: bool = attr.ib(default=None)
    interval_seconds: int = attr.ib(default=None)
    timeout_period_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_active", "isActive", bool),
            E("interval_seconds", "intervalSeconds", int),
            E("timeout_period_seconds", "timeoutPeriodSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSessionAuditModifyRequest14sp3(OCIRequest):
    """
    Modify the system level data associated with session audit.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        is_audit_active: isAuditActive
        audit_interval_seconds: auditIntervalSeconds
        audit_timeout_seconds: auditTimeoutSeconds
        release_call_on_audit_failure: releaseCallOnAuditFailure
        is_sip_refresh_allowed_on_audit: isSIPRefreshAllowedOnAudit
        allow_update_for_sip_refresh: allowUpdateForSIPRefresh
        is_sip_session_timer_active: isSIPSessionTimerActive
        sip_session_expires_minimum_seconds: sipSessionExpiresMinimumSeconds
        enforce_sip_session_expires_maximum: enforceSIPSessionExpiresMaximum
        sip_session_expires_maximum_seconds: sipSessionExpiresMaximumSeconds
        sip_session_expires_timer_seconds: sipSessionExpiresTimerSeconds
        always_use_session_timer_when_supported: alwaysUseSessionTimerWhenSupported
        preferred_session_timer_refresher: preferredSessionTimerRefresher
        enable_emergency_call_alarm_timer: enableEmergencyCallAlarmTimer
        emergency_call_alarm_minutes: emergencyCallAlarmMinutes
        enable_emergency_call_cleanup_timer: enableEmergencyCallCleanupTimer
        emergency_call_cleanup_minutes: emergencyCallCleanupMinutes
    """

    is_audit_active: bool = attr.ib(default=None)
    audit_interval_seconds: int = attr.ib(default=None)
    audit_timeout_seconds: int = attr.ib(default=None)
    release_call_on_audit_failure: bool = attr.ib(default=None)
    is_sip_refresh_allowed_on_audit: bool = attr.ib(default=None)
    allow_update_for_sip_refresh: bool = attr.ib(default=None)
    is_sip_session_timer_active: bool = attr.ib(default=None)
    sip_session_expires_minimum_seconds: int = attr.ib(default=None)
    enforce_sip_session_expires_maximum: bool = attr.ib(default=None)
    sip_session_expires_maximum_seconds: int = attr.ib(default=None)
    sip_session_expires_timer_seconds: int = attr.ib(default=None)
    always_use_session_timer_when_supported: bool = attr.ib(default=None)
    preferred_session_timer_refresher: str = attr.ib(default=None)
    enable_emergency_call_alarm_timer: bool = attr.ib(default=None)
    emergency_call_alarm_minutes: int = attr.ib(default=None)
    enable_emergency_call_cleanup_timer: bool = attr.ib(default=None)
    emergency_call_cleanup_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_audit_active", "isAuditActive", bool),
            E("audit_interval_seconds", "auditIntervalSeconds", int),
            E("audit_timeout_seconds", "auditTimeoutSeconds", int),
            E("release_call_on_audit_failure", "releaseCallOnAuditFailure", bool),
            E("is_sip_refresh_allowed_on_audit", "isSIPRefreshAllowedOnAudit", bool),
            E("allow_update_for_sip_refresh", "allowUpdateForSIPRefresh", bool),
            E("is_sip_session_timer_active", "isSIPSessionTimerActive", bool),
            E(
                "sip_session_expires_minimum_seconds",
                "sipSessionExpiresMinimumSeconds",
                int,
            ),
            E(
                "enforce_sip_session_expires_maximum",
                "enforceSIPSessionExpiresMaximum",
                bool,
            ),
            E(
                "sip_session_expires_maximum_seconds",
                "sipSessionExpiresMaximumSeconds",
                int,
            ),
            E("sip_session_expires_timer_seconds", "sipSessionExpiresTimerSeconds", int),
            E(
                "always_use_session_timer_when_supported",
                "alwaysUseSessionTimerWhenSupported",
                bool,
            ),
            E(
                "preferred_session_timer_refresher",
                "preferredSessionTimerRefresher",
                str,
            ),
            E(
                "enable_emergency_call_alarm_timer",
                "enableEmergencyCallAlarmTimer",
                bool,
            ),
            E("emergency_call_alarm_minutes", "emergencyCallAlarmMinutes", int),
            E(
                "enable_emergency_call_cleanup_timer",
                "enableEmergencyCallCleanupTimer",
                bool,
            ),
            E("emergency_call_cleanup_minutes", "emergencyCallCleanupMinutes", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemShInterfaceParametersGetRequest(OCIRequest):
    """
    Retrieves the Sh Interface system parameters.

    The response is either a ``SystemShInterfaceParametersGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemShInterfaceParametersGetRequest17(OCIRequest):
    """
    Retrieves the Sh Interface system parameters.

    The response is either a ``SystemShInterfaceParametersGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemShInterfaceParametersModifyRequest(OCIRequest):
    """
    Modifies the Sh Interface system parameters.

    This request must be submitted on both nodes in the redundant Application Server
    cluster in order for the changes to take effect on each node without requiring a
    restart.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        hss_realm: hssRealm
        request_timeout_seconds: requestTimeoutSeconds
        public_identity_refresh_delay_seconds: publicIdentityRefreshDelaySeconds
    """

    hss_realm: str = attr.ib(default=None)
    request_timeout_seconds: int = attr.ib(default=None)
    public_identity_refresh_delay_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("hss_realm", "hssRealm", str),
            E("request_timeout_seconds", "requestTimeoutSeconds", int),
            E(
                "public_identity_refresh_delay_seconds",
                "publicIdentityRefreshDelaySeconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemShInterfaceParametersModifyRequest17(OCIRequest):
    """
    Modifies the Sh Interface system parameters.

    This request must be submitted on both nodes in the redundant Application Server
    cluster in order for the changes to take effect on each node without requiring a
    restart.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        hss_realm: hssRealm
        public_identity_refresh_delay_seconds: publicIdentityRefreshDelaySeconds
    """

    hss_realm: str = attr.ib(default=None)
    public_identity_refresh_delay_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("hss_realm", "hssRealm", str),
            E(
                "public_identity_refresh_delay_seconds",
                "publicIdentityRefreshDelaySeconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemShInterfaceRefreshTaskGetRequest(OCIRequest):
    """
    Retrieves the status of the system refresh task on the local Application Server node.

    The response is either a ``SystemShInterfaceRefreshTaskGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemShInterfaceRefreshTaskStartRequest(OCIRequest):
    """
    Dispatches the system refresh task on the local Application Server node.

    At most one instance of the system refresh task may run on an Application Server node
    at a given point in time.  If the system refresh task is already running when this
    request is made, an ``ErrorResponse()`` is returned.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemShInterfaceRefreshTaskTerminateRequest(OCIRequest):
    """
    Terminates the system refresh task in progress on the local Application Server node.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSoftwareVersionGetRequest(OCIRequest):
    """
    Requests the software version of the Application Server.

    The response is either ``SystemSoftwareVersionGetResponse()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSpeedDial100GetRequest(OCIRequest):
    """
    Get the speed dial 100 system-wide default setting.

    The response is either a ``SystemSpeedDial100GetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSpeedDial100GetRequest17sp1(OCIRequest):
    """
    Get the speed dial 100 system-wide default setting.

    The response is either a ``SystemSpeedDial100GetResponse17sp1()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSpeedDial100ModifyRequest(OCIRequest):
    """
    Modify the speed dial 100 system-wide default prefix setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        prefix: prefix
    """

    prefix: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("prefix", "prefix", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemStateOrProvinceGetListRequest(OCIRequest):
    """
    Requests the list of state and province names.

    The response is either ``SystemStateOrProvinceGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemSubscriberGetCallProcessingParametersRequest14sp3()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest14sp3(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse14sp3()`` or an
    ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest14sp7(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse14sp7()`` or an
    ``ErrorResponse()``.

    Replaced By : ``SystemSubscriberGetCallProcessingParametersRequest15sp2()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest15(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse15()`` or an
    ``ErrorResponse()``.

    Replaced By: ``SystemSubscriberGetCallProcessingParametersRequest15sp2()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest15sp2(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse15sp2()`` or an
    ``ErrorResponse()``.

    Replaced by: ``SystemSubscriberGetCallProcessingParametersRequest17()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest17(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse17()`` or an
    ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest17sp3(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse17sp3()`` or an
    ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest17sp4(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse17sp4()`` or an
    ``ErrorResponse()``.

    Replaced by ``SystemSubscriberGetCallProcessingParametersRequest18sp1()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetCallProcessingParametersRequest18sp1(OCIRequest):
    """
    Get the system call processing configuration for all subscribers The response is
    either a ``SystemSubscriberGetCallProcessingParametersResponse18sp1()`` or an
    ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetLoginParametersRequest(OCIRequest):
    """
    Get the system login configuration for all subscribers.

    The response is either a ``SystemSubscriberGetLoginParametersResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberGetProvisioningParametersRequest(OCIRequest):
    """
    Get the system provisioning configuration for all subscribers The response is either a
    ``SystemSubscriberGetProvisioningParametersResponse()`` or an ``ErrorResponse()``.

    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberModifyCallProcessingParametersRequest(OCIRequest):
    """
    Modify the system call processing configuration for all subscribers.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``SystemSubscriberModifyCallProcessingParametersRequest14sp7()``

    Attributes:
        user_calling_line_id_selection: userCallingLineIdSelection
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
    """

    user_calling_line_id_selection: str = attr.ib(default=None)
    is_extended_calling_line_id_active: bool = attr.ib(default=None)
    is_ring_time_out_active: bool = attr.ib(default=None)
    ring_timeout_seconds: int = attr.ib(default=None)
    allow_emergency_remote_office_originations: bool = attr.ib(default=None)
    max_no_answer_number_of_rings: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_calling_line_id_selection", "userCallingLineIdSelection", str),
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
            ),
            E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberModifyCallProcessingParametersRequest14sp7(OCIRequest):
    """
    Modify the system call processing configuration for all subscribers.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        is_extended_calling_line_id_active: isExtendedCallingLineIdActive
        is_ring_time_out_active: isRingTimeOutActive
        ring_timeout_seconds: ringTimeoutSeconds
        allow_emergency_remote_office_originations: allowEmergencyRemoteOfficeOriginations
        max_no_answer_number_of_rings: maxNoAnswerNumberOfRings
        incoming_call_to_user_alias_mode: incomingCallToUserAliasMode
        bypass_termination_loop_detection: bypassTerminationLoopDetection
        honor_clid_blocking_for_emergency_calls: honorCLIDBlockingForEmergencyCalls
        use_unicode_identity_name: useUnicodeIdentityName
    """

    is_extended_calling_line_id_active: bool = attr.ib(default=None)
    is_ring_time_out_active: bool = attr.ib(default=None)
    ring_timeout_seconds: int = attr.ib(default=None)
    allow_emergency_remote_office_originations: bool = attr.ib(default=None)
    max_no_answer_number_of_rings: int = attr.ib(default=None)
    incoming_call_to_user_alias_mode: str = attr.ib(default=None)
    bypass_termination_loop_detection: bool = attr.ib(default=None)
    honor_clid_blocking_for_emergency_calls: bool = attr.ib(default=None)
    use_unicode_identity_name: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "is_extended_calling_line_id_active",
                "isExtendedCallingLineIdActive",
                bool,
            ),
            E("is_ring_time_out_active", "isRingTimeOutActive", bool),
            E("ring_timeout_seconds", "ringTimeoutSeconds", int),
            E(
                "allow_emergency_remote_office_originations",
                "allowEmergencyRemoteOfficeOriginations",
                bool,
            ),
            E("max_no_answer_number_of_rings", "maxNoAnswerNumberOfRings", int),
            E("incoming_call_to_user_alias_mode", "incomingCallToUserAliasMode", str),
            E(
                "bypass_termination_loop_detection",
                "bypassTerminationLoopDetection",
                bool,
            ),
            E(
                "honor_clid_blocking_for_emergency_calls",
                "honorCLIDBlockingForEmergencyCalls",
                bool,
            ),
            E("use_unicode_identity_name", "useUnicodeIdentityName", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberModifyLoginParametersRequest(OCIRequest):
    """
    Modify the system login configuration for all subscribers The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        max_failed_login_attempts: maxFailedLoginAttempts
        min_login_id_length: minLoginIdLength
    """

    max_failed_login_attempts: int = attr.ib(default=None)
    min_login_id_length: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("min_login_id_length", "minLoginIdLength", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSubscriberModifyProvisioningParametersRequest(OCIRequest):
    """
    Modify the system provisioning configuration for all subscribers.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        configurable_clid_normalization: configurableCLIDNormalization
    """

    configurable_clid_normalization: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("configurable_clid_normalization", "configurableCLIDNormalization", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemServiceCallProcessingPoliciesGetRequest(OCIRequest):
    """
    Request the data associated with Call Processing Policy for system service instances.

    The response is either ``SystemSystemServiceCallProcessingPoliciesGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemServiceCallProcessingPoliciesModifyRequest(OCIRequest):
    """
    Request the data associated with Call Processing Policy for system service instances.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
    """

    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemServiceDnGetAvailableListRequest(OCIRequest):
    """
    Request a list of system service DNs not yet in use.

    The response is either ``SystemSystemServiceDnGetAvailableListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemServiceDnGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all System Service DNs.

    The response is either ``SystemSystemServiceDnGetSummaryListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemServiceDnGetUsageListRequest(OCIRequest):
    """
    Request a list of System Service DN utilization.

    The response is either ``SystemSystemServiceDnGetUsageListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemVoicePortalDeleteRequest(OCIRequest):
    """
    Request to delete a system voice portal instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        system_voice_portal_id: systemVoicePortalId
    """

    system_voice_portal_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_voice_portal_id", "systemVoicePortalId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemVoicePortalGetListRequest(OCIRequest):
    """
    Request to get the list of the system voice portals.

    The response is either SystemSystemVoicePortalGetListResponce or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemVoicePortalGetRequest(OCIRequest):
    """
    Request to get a system voice portal instance.

    The response is either ``SystemSystemVoicePortalGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        system_voice_portal_id: systemVoicePortalId
    """

    system_voice_portal_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_voice_portal_id", "systemVoicePortalId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyIMPGetRequest(OCIRequest):
    """
    Get the system Third-Party IMP service attributes.

    The response is either ``SystemThirdPartyIMPGetResponse()`` or ``ErrorResponse()``.
    Replaced by ``SystemThirdPartyIMPGetRequest19()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyIMPGetRequest19(OCIRequest):
    """
    Get the system Third-Party IMP service attributes.

    The response is either ``SystemThirdPartyIMPGetResponse19()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyIMPModifyRequest(OCIRequest):
    """
    Modify the system Third-Party IMP service attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: boshURL

    Attributes:
        service_net_address: serviceNetAddress
        service_port: servicePort
        bosh_url: boshURL
    """

    service_net_address: str = attr.ib(default=None)
    service_port: int = attr.ib(default=None)
    bosh_url: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_net_address", "serviceNetAddress", str),
            E("service_port", "servicePort", int),
            E("bosh_url", "boshURL", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyVoiceMailSupportAddDnRequest(OCIRequest):
    """
    Request to add a ThirdPartyVoiceMailSupport User DN to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
        description: description
    """

    phone_number: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyVoiceMailSupportDeleteDnRequest(OCIRequest):
    """
    Request to delete a ThirdPartyVoiceMailSupport User DN from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
    """

    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyVoiceMailSupportGetRequest(OCIRequest):
    """
    Request the system level data associated with Third-party Voice Mail Support.

    The response is either a ``SystemThirdPartyVoiceMailSupportGetResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyVoiceMailSupportGetRequest17sp4(OCIRequest):
    """
    Request the system level data associated with Third-party Voice Mail Support.

    The response is either a ``SystemThirdPartyVoiceMailSupportGetResponse17sp4()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyVoiceMailSupportModifyDnRequest(OCIRequest):
    """
    Request to modify a ThirdPartyVoiceMailSupport User DN and description in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
        description: description
    """

    phone_number: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyVoiceMailSupportModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Third-party Voice Mail Support.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode:
    stripDiversionOnVMDestinationRetrieval

    Attributes:
        override_alt_caller_id_for_vm_retrieval: overrideAltCallerIdForVMRetrieval
        strip_diversion_on_vm_destination_retrieval:
            stripDiversionOnVMDestinationRetrieval
    """

    override_alt_caller_id_for_vm_retrieval: bool = attr.ib(default=None)
    strip_diversion_on_vm_destination_retrieval: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "override_alt_caller_id_for_vm_retrieval",
                "overrideAltCallerIdForVMRetrieval",
                bool,
            ),
            E(
                "strip_diversion_on_vm_destination_retrieval",
                "stripDiversionOnVMDestinationRetrieval",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTimeScheduleDeleteRequest(OCIRequest):
    """
    Delete a system time schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        time_schedule_name: timeScheduleName
    """

    time_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTimeScheduleGetListRequest(OCIRequest):
    """
    Request a list of all system time schedules.

    The response is either a ``SystemTimeScheduleGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTimeScheduleGetRequest(OCIRequest):
    """
    Request to get a system time schedule.

    The response is either a ``SystemTimeScheduleGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        time_schedule_name: timeScheduleName
    """

    time_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTimeZoneGetListRequest(OCIRequest):
    """
    Requests the list of time zone names.

    The response is either ``SystemTimeZoneGetListResponse()`` or ``ErrorResponse()``.
    Replaced by ``SystemTimeZoneGetListRequest20()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTimeZoneGetListRequest20(OCIRequest):
    """
    Requests the configured time zone of the server processing the request and the list of
    time zone names.

    The response is either ``SystemTimeZoneGetListResponse20()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingAccessSIPStatusAddRequest(OCIRequest):
    """
    Add an Access SIP Status Code Mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        sip_status_code: sipStatusCode
        treatment_id: treatmentId
    """

    sip_status_code: int = attr.ib()
    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("sip_status_code", "sipStatusCode", int, is_required=True),
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingAccessSIPStatusDeleteRequest(OCIRequest):
    """
    Delete an Access SIP Status Code mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        sip_status_code: sipStatusCode
    """

    sip_status_code: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("sip_status_code", "sipStatusCode", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingAccessSIPStatusGetListRequest(OCIRequest):
    """
    Requests a table of all the existing Access Side SIP Status Code Mappings in the
    system.

    The response is either an ``SystemTreatmentMappingAccessSIPStatusGetListResponse()``
    or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingAccessSIPStatusModifyRequest(OCIRequest):
    """
    Modify the fields for an Access SIP Status Code mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        sip_status_code: sipStatusCode
        treatment_id: treatmentId
    """

    sip_status_code: int = attr.ib()
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("sip_status_code", "sipStatusCode", int, is_required=True),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingCallBlockingServiceAddRequest(OCIRequest):
    """
    Add a Call Blocking Service mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_blocking_service: callBlockingService
        treatment_id: treatmentId
    """

    call_blocking_service: str = attr.ib()
    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_blocking_service", "callBlockingService", str, is_required=True),
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingCallBlockingServiceDeleteRequest(OCIRequest):
    """
    Delete a Call Blocking Service mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_blocking_service: callBlockingService
    """

    call_blocking_service: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_blocking_service", "callBlockingService", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingCallBlockingServiceGetListRequest(OCIRequest):
    """
    Requests a table of all the existing Call Blocking Service Mappings in the system.

    The response is either a
    ``SystemTreatmentMappingCallBlockingServicesGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingCallBlockingServiceGetListRequest19sp1(OCIRequest):
    """
    Requests a table of all the existing Call Blocking Service Mappings in the system.

    The response is either a
    ``SystemTreatmentMappingCallBlockingServicesGetListResponse19sp1()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingCallBlockingServiceModifyRequest(OCIRequest):
    """
    Modify the fields for a Call Blocking Service mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        call_blocking_service: callBlockingService
        treatment_id: treatmentId
    """

    call_blocking_service: str = attr.ib()
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("call_blocking_service", "callBlockingService", str, is_required=True),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingInternalReleaseCauseAddRequest(OCIRequest):
    """
    Add an Internal Release Cause mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        internal_release_cause: internalReleaseCause
        treatment_id: treatmentId
    """

    internal_release_cause: str = attr.ib()
    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("internal_release_cause", "internalReleaseCause", str, is_required=True),
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingInternalReleaseCauseDeleteRequest(OCIRequest):
    """
    Delete an Internal Release Cause mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        internal_release_cause: internalReleaseCause
    """

    internal_release_cause: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("internal_release_cause", "internalReleaseCause", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingInternalReleaseCauseGetListRequest(OCIRequest):
    """
    Requests a table of all the Internal Release Cause mappings in the system.

    The response is either a
    ``SystemTreatmentMappingInternalReleaseCauseGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingInternalReleaseCauseModifyRequest(OCIRequest):
    """
    Modify the fields for an Internal Release Cause mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        internal_release_cause: internalReleaseCause
        treatment_id: treatmentId
    """

    internal_release_cause: str = attr.ib()
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("internal_release_cause", "internalReleaseCause", str, is_required=True),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkSIPStatusAddRequest(OCIRequest):
    """
    Add a Network SIP Status Code mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        sip_status_code: sipStatusCode
        treatment_id: treatmentId
    """

    sip_status_code: int = attr.ib()
    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("sip_status_code", "sipStatusCode", int, is_required=True),
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkSIPStatusDeleteRequest(OCIRequest):
    """
    Delete a Network SIP Status Code mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        sip_status_code: sipStatusCode
    """

    sip_status_code: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("sip_status_code", "sipStatusCode", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkSIPStatusGetListRequest(OCIRequest):
    """
    Requests a table of all the existing Network SIP Status Code Mappings in the system.

    The response is either an
    ``SystemTreatmentMappingNetworkSIPStatusCodeGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkSIPStatusModifyRequest(OCIRequest):
    """
    Modify the fields for a Network SIP Status Code mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        sip_status_code: sipStatusCode
        treatment_id: treatmentId
    """

    sip_status_code: int = attr.ib()
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("sip_status_code", "sipStatusCode", int, is_required=True),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkServerTreatmentAddRequest(OCIRequest):
    """
    Add a Network Server Treatment mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        ns_treatment: nsTreatment
        treatment_id: treatmentId
    """

    ns_treatment: str = attr.ib()
    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("ns_treatment", "nsTreatment", str, is_required=True),
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkServerTreatmentDeleteRequest(OCIRequest):
    """
    Delete a NS Treatment mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        ns_treatment: nsTreatment
    """

    ns_treatment: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("ns_treatment", "nsTreatment", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkServerTreatmentGetListRequest(OCIRequest):
    """
    Requests a table of all the existing NS Treatment Mappings in the system.

    The response is either a
    ``SystemTreatmentMappingNetworkServerTreatmentGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingNetworkServerTreatmentModifyRequest(OCIRequest):
    """
    Modify the fields for a Network Server Treatment mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        ns_treatment: nsTreatment
        treatment_id: treatmentId
    """

    ns_treatment: str = attr.ib()
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("ns_treatment", "nsTreatment", str, is_required=True),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingQ850CauseAddRequest(OCIRequest):
    """
    Add a Q850 Cause Value mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        q850_cause_value: q850CauseValue
        treatment_id: treatmentId
    """

    q850_cause_value: int = attr.ib()
    treatment_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("q850_cause_value", "q850CauseValue", int, is_required=True),
            E("treatment_id", "treatmentId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingQ850CauseDeleteRequest(OCIRequest):
    """
    Delete a Q850 Cause Value mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        q850_cause_value: q850CauseValue
    """

    q850_cause_value: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("q850_cause_value", "q850CauseValue", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingQ850CauseGetListRequest(OCIRequest):
    """
    Requests a table of all the existing Q850 Cause Value Mappings in the system.

    The response is either a ``SystemTreatmentMappingQ850CauseGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTreatmentMappingQ850CauseModifyRequest(OCIRequest):
    """
    Modify the fields for a Q850CauseValue mapping.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        q850_cause_value: q850CauseValue
        treatment_id: treatmentId
    """

    q850_cause_value: int = attr.ib()
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("q850_cause_value", "q850CauseValue", int, is_required=True),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupGetRequest(OCIRequest):
    """
    Request the system level data associated with the Trunk Group service.

    The response is either ``SystemTrunkGroupGetResponse()`` or ``ErrorResponse()``.
    Replaced by ``SystemTrunkGroupGetRequest19sp1()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupGetRequest19sp1(OCIRequest):
    """
    Request the system level data associated with the Trunk Group service.

    The response is either ``SystemTrunkGroupGetResponse19sp1()`` or ``ErrorResponse()``.
    Replaced by: ``SystemTrunkGroupGetRequest21()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupGetRequest21(OCIRequest):
    """
    Request the system level data associated with the Trunk Group service.

    The response is either ``SystemTrunkGroupGetResponse21()`` or ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupModifyRequest(OCIRequest):
    """
    Modify the system level data associated with the Trunk Group Service.

    Following attributes are only used in IMS mode.  The values are saved if specified not
    in IMS mode: implicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        enforce_clid_service_assignment_for_pilot_user:
            enforceCLIDServiceAssignmentForPilotUser
        terminate_unreachable_trigger_detection_on_receipt_of18x:
            terminateUnreachableTriggerDetectionOnReceiptOf18x
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        enforce_out_of_dialog_pbx_redirection_policies:
            enforceOutOfDialogPBXRedirectionPolicies
        unscreened_redirection_handling: unscreenedRedirectionHandling
        enable_holdover_of_highwater_call_counts: enableHoldoverOfHighwaterCallCounts
        holdover_period: holdoverPeriod
        time_zone_offset_minutes: timeZoneOffsetMinutes
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        out_of_dialog_pbx_redirection_clid_mapping: outOfDialogPBXRedirectionCLIDMapping
        enforce_out_of_dialog_pbx_redirection_trunk_group_capacity:
            enforceOutOfDialogPBXRedirectionTrunkGroupCapacity
        implicit_registration_set_support_policy: implicitRegistrationSetSupportPolicy
        sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            sipIdentityForPilotAndProxyTrunkModesPolicy
        support_connected_identity_policy: supportConnectedIdentityPolicy
    """

    enforce_clid_service_assignment_for_pilot_user: bool = attr.ib(default=None)
    terminate_unreachable_trigger_detection_on_receipt_of18x: bool = attr.ib(default=None)
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib(default=None)
    enforce_out_of_dialog_pbx_redirection_policies: bool = attr.ib(default=None)
    unscreened_redirection_handling: str = attr.ib(default=None)
    enable_holdover_of_highwater_call_counts: bool = attr.ib(default=None)
    holdover_period: int = attr.ib(default=None)
    time_zone_offset_minutes: int = attr.ib(default=None)
    clid_source_for_screened_calls_policy: str = attr.ib(default=None)
    user_lookup_policy: str = attr.ib(default=None)
    out_of_dialog_pbx_redirection_clid_mapping: str = attr.ib(default=None)
    enforce_out_of_dialog_pbx_redirection_trunk_group_capacity: bool = attr.ib(default=None)
    implicit_registration_set_support_policy: str = attr.ib(default=None)
    sip_identity_for_pilot_and_proxy_trunk_modes_policy: str = attr.ib(default=None)
    support_connected_identity_policy: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "enforce_clid_service_assignment_for_pilot_user",
                "enforceCLIDServiceAssignmentForPilotUser",
                bool,
            ),
            E(
                "terminate_unreachable_trigger_detection_on_receipt_of18x",
                "terminateUnreachableTriggerDetectionOnReceiptOf18x",
                bool,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
            ),
            E(
                "enforce_out_of_dialog_pbx_redirection_policies",
                "enforceOutOfDialogPBXRedirectionPolicies",
                bool,
            ),
            E("unscreened_redirection_handling", "unscreenedRedirectionHandling", str),
            E(
                "enable_holdover_of_highwater_call_counts",
                "enableHoldoverOfHighwaterCallCounts",
                bool,
            ),
            E("holdover_period", "holdoverPeriod", int),
            E("time_zone_offset_minutes", "timeZoneOffsetMinutes", int),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
            ),
            E("user_lookup_policy", "userLookupPolicy", str),
            E(
                "out_of_dialog_pbx_redirection_clid_mapping",
                "outOfDialogPBXRedirectionCLIDMapping",
                str,
            ),
            E(
                "enforce_out_of_dialog_pbx_redirection_trunk_group_capacity",
                "enforceOutOfDialogPBXRedirectionTrunkGroupCapacity",
                bool,
            ),
            E(
                "implicit_registration_set_support_policy",
                "implicitRegistrationSetSupportPolicy",
                str,
            ),
            E(
                "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "sipIdentityForPilotAndProxyTrunkModesPolicy",
                str,
            ),
            E(
                "support_connected_identity_policy",
                "supportConnectedIdentityPolicy",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupOptionsMessageResponseStatusCodeAddListRequest(OCIRequest):
    """
    Add a list of system level successful SIP OPTIONS message respoonse status codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        status_code: statusCode
    """

    status_code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status_code", "statusCode", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupOptionsMessageResponseStatusCodeDeleteListRequest(OCIRequest):
    """
    Delete a list of system level successful SIP OPTIONS message respoonse status codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        status_code: statusCode
    """

    status_code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("status_code", "statusCode", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupOptionsMessageResponseStatusCodeGetListRequest(OCIRequest):
    """
    Get the list of system level successful SIP OPTIONS message respoonse status codes.

    The response is either
    ``SystemTrunkGroupOptionsMessageResponseStatusCodeGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupUserCreationTaskGetListRequest(OCIRequest):
    """
    Get the list of user creation tasks in the system.

    The response is either ``SystemTrunkGroupUserCreationTaskGetListResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTrunkGroupUserCreationTaskGetListRequest14sp4(OCIRequest):
    """
    Get the list of user creation tasks in the system.

    The response is either ``SystemTrunkGroupUserCreationTaskGetListResponse14sp4()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTwoStageDialingAddDnRequest(OCIRequest):
    """
    Request to add Two Stage Dialing number to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
        description: description
    """

    phone_number: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTwoStageDialingDeleteDnRequest(OCIRequest):
    """
    Request to delete a Two Stage Dialing number from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
    """

    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTwoStageDialingModifyDnRequest(OCIRequest):
    """
    Request to modify a Two Stage Dialing number's description in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
        description: description
    """

    phone_number: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVideoServerAddRequest(OCIRequest):
    """
    Request to add a video server to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVideoServerDeleteRequest(OCIRequest):
    """
    Request to delete a video server from the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
    """

    net_address: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVideoServerGetListRequest(OCIRequest):
    """
    Request to get a list of video servers defined in the system.

    The response is either a ``SystemVideoServerGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVideoServerModifyRequest(OCIRequest):
    """
    Request to modify a video server in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        net_address: netAddress
        port: port
        transport_protocol: transportProtocol
        description: description
    """

    net_address: str = attr.ib()
    port: int = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int),
            E("transport_protocol", "transportProtocol", str),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVideoServerParametersGetRequest(OCIRequest):
    """
    Request to get the list of video server system parameters.

    The response is either ``SystemVideoServerParametersGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVideoServerParametersModifyRequest(OCIRequest):
    """
    Request to modify video server system parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        video_server_response_timer_milliseconds: videoServerResponseTimerMilliseconds
        video_server_selection_route_timer_milliseconds:
            videoServerSelectionRouteTimerMilliseconds
        use_static_video_server_device: useStaticVideoServerDevice
    """

    video_server_response_timer_milliseconds: int = attr.ib(default=None)
    video_server_selection_route_timer_milliseconds: int = attr.ib(default=None)
    use_static_video_server_device: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "video_server_response_timer_milliseconds",
                "videoServerResponseTimerMilliseconds",
                int,
            ),
            E(
                "video_server_selection_route_timer_milliseconds",
                "videoServerSelectionRouteTimerMilliseconds",
                int,
            ),
            E("use_static_video_server_device", "useStaticVideoServerDevice", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVirtualOnNetCallTypeAddRequest(OCIRequest):
    """
    Add a Virtual On-Net Call Type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        virtual_on_net_call_type_name: virtualOnNetCallTypeName
        virtual_on_net_call_type_cdr_value: virtualOnNetCallTypeCdrValue
    """

    virtual_on_net_call_type_name: str = attr.ib()
    virtual_on_net_call_type_cdr_value: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "virtual_on_net_call_type_name",
                "virtualOnNetCallTypeName",
                str,
                is_required=True,
            ),
            E(
                "virtual_on_net_call_type_cdr_value",
                "virtualOnNetCallTypeCdrValue",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVirtualOnNetCallTypeDeleteRequest(OCIRequest):
    """
    Delete a Virtual On-Net Call Type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        virtual_on_net_call_type_name: virtualOnNetCallTypeName
    """

    virtual_on_net_call_type_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "virtual_on_net_call_type_name",
                "virtualOnNetCallTypeName",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVirtualOnNetCallTypeGetListRequest(OCIRequest):
    """
    Get the list Virtual On-Net Call Types in the system.

    The response is either a ``SystemVirtualOnNetCallTypeGetListResponse()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVirtualOnNetCallTypeModifyRequest(OCIRequest):
    """
    Modify a Virtual On-Net Call Type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        virtual_on_net_call_type_name: virtualOnNetCallTypeName
        virtual_on_net_call_type_cdr_value: virtualOnNetCallTypeCdrValue
    """

    virtual_on_net_call_type_name: str = attr.ib()
    virtual_on_net_call_type_cdr_value: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "virtual_on_net_call_type_name",
                "virtualOnNetCallTypeName",
                str,
                is_required=True,
            ),
            E("virtual_on_net_call_type_cdr_value", "virtualOnNetCallTypeCdrValue", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessageSummaryUpdateGetRequest(OCIRequest):
    """
    Requests system voice mail message summary update parameter settings.

    The response is either ``SystemVoiceMessageSummaryUpdateGetResponse()`` or
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessageSummaryUpdateModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Voice Messaging.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        send_saved_and_urgent_mwi_on_notification: sendSavedAndUrgentMWIOnNotification
        send_message_summary_update_on_register: sendMessageSummaryUpdateOnRegister
        min_time_between_mwi_on_register: minTimeBetweenMWIOnRegister
    """

    send_saved_and_urgent_mwi_on_notification: bool = attr.ib(default=None)
    send_message_summary_update_on_register: bool = attr.ib(default=None)
    min_time_between_mwi_on_register: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "send_saved_and_urgent_mwi_on_notification",
                "sendSavedAndUrgentMWIOnNotification",
                bool,
            ),
            E(
                "send_message_summary_update_on_register",
                "sendMessageSummaryUpdateOnRegister",
                bool,
            ),
            E("min_time_between_mwi_on_register", "minTimeBetweenMWIOnRegister", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetPasscodeRulesRequest14(OCIRequest):
    """
    Requests the system voice portal passcode rules setting.

    The response is either ``SystemVoiceMessagingGroupGetPasscodeRulesResponse14()`` or
    ``ErrorResponse()``.

    Replaced By: ``SystemPortalPasscodeRulesGetRequest()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetRequest14(OCIRequest):
    """
    Request the system level data associated with Voice Messaging.

    The response is either a ``SystemVoiceMessagingGroupGetResponse14()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetRequest16(OCIRequest):
    """
    Request the system level data associated with Voice Messaging.

    The response is either a ``SystemVoiceMessagingGroupGetResponse16()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetRequest16sp2(OCIRequest):
    """
    Request the system level data associated with Voice Messaging.

    The response is either a ``SystemVoiceMessagingGroupGetResponse16sp2()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetRequest20(OCIRequest):
    """
    Request the system level data associated with Voice Messaging.

    The response is either a ``SystemVoiceMessagingGroupGetResponse20()`` or an
    ``ErrorResponse()``. Replaced by: ``SystemVoiceMessagingGroupGetRequest21()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetRequest21(OCIRequest):
    """
    Request the system level data associated with Voice Messaging.

    The response is either a ``SystemVoiceMessagingGroupGetResponse21()`` or an
    ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetVoicePortalMenusRequest14(OCIRequest):
    """
    Requests the system voice portal Menus setting.

    The response is either ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse14()`` or
    ``ErrorResponse()``.

    Attributes:
        get_default_menu_keys: getDefaultMenuKeys
    """

    get_default_menu_keys: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("get_default_menu_keys", "getDefaultMenuKeys", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetVoicePortalMenusRequest18(OCIRequest):
    """
    Requests the system voice portal Menus setting.

    The response is either ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse18()`` or
    ``ErrorResponse()``. Replaced by
    ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest19()``

    Attributes:
        get_default_menu_keys: getDefaultMenuKeys
    """

    get_default_menu_keys: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("get_default_menu_keys", "getDefaultMenuKeys", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetVoicePortalMenusRequest18sp1(OCIRequest):
    """
    Requests the system voice portal Menus setting.

    The response is either ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse18sp1()``
    or ``ErrorResponse()``. Replaced by
    ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest19sp1()``

    Attributes:
        get_default_menu_keys: getDefaultMenuKeys
    """

    get_default_menu_keys: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("get_default_menu_keys", "getDefaultMenuKeys", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetVoicePortalMenusRequest19(OCIRequest):
    """
    Requests the system voice portal Menus setting.

    The response is either ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19()`` or
    ``ErrorResponse()``. Replaced by
    ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest19sp1()``

    Attributes:
        get_default_menu_keys: getDefaultMenuKeys
    """

    get_default_menu_keys: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("get_default_menu_keys", "getDefaultMenuKeys", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetVoicePortalMenusRequest19sp1(OCIRequest):
    """
    Requests the system voice portal Menus setting.

    The response is either ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse19sp1()``
    or ``ErrorResponse()``. Replaced by
    ``SystemVoiceMessagingGroupGetVoicePortalMenusRequest20()``

    Attributes:
        get_default_menu_keys: getDefaultMenuKeys
    """

    get_default_menu_keys: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("get_default_menu_keys", "getDefaultMenuKeys", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetVoicePortalMenusRequest20(OCIRequest):
    """
    Requests the system voice portal Menus setting.

    The response is either ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        get_default_menu_keys: getDefaultMenuKeys
    """

    get_default_menu_keys: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("get_default_menu_keys", "getDefaultMenuKeys", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupGetVoicePortalMenusRequest21(OCIRequest):
    """
    Requests the system voice portal Menus setting.

    The response is either ``SystemVoiceMessagingGroupGetVoicePortalMenusResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        get_default_menu_keys: getDefaultMenuKeys
    """

    get_default_menu_keys: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("get_default_menu_keys", "getDefaultMenuKeys", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupModifyPasscodeRulesRequest(OCIRequest):
    """
    Request to modify the system voice portal passcode rules setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemPortalPasscodeRulesModifyRequest()``

    Attributes:
        disallow_repeated_digits: disallowRepeatedDigits
        disallow_user_number: disallowUserNumber
        disallow_reversed_user_number: disallowReversedUserNumber
        disallow_old_passcode: disallowOldPasscode
        disallow_reversed_old_passcode: disallowReversedOldPasscode
        min_code_length: minCodeLength
        max_code_length: maxCodeLength
        disable_login_after_max_failed_login_attempts:
            disableLoginAfterMaxFailedLoginAttempts
        max_failed_login_attempts: maxFailedLoginAttempts
        expire_password: expirePassword
        passcode_expires_days: passcodeExpiresDays
        send_login_disabled_notify_email: sendLoginDisabledNotifyEmail
        login_disabled_notify_email_address: loginDisabledNotifyEmailAddress
        default_password: defaultPassword
    """

    disallow_repeated_digits: bool = attr.ib(default=None)
    disallow_user_number: bool = attr.ib(default=None)
    disallow_reversed_user_number: bool = attr.ib(default=None)
    disallow_old_passcode: bool = attr.ib(default=None)
    disallow_reversed_old_passcode: bool = attr.ib(default=None)
    min_code_length: int = attr.ib(default=None)
    max_code_length: int = attr.ib(default=None)
    disable_login_after_max_failed_login_attempts: bool = attr.ib(default=None)
    max_failed_login_attempts: int = attr.ib(default=None)
    expire_password: bool = attr.ib(default=None)
    passcode_expires_days: int = attr.ib(default=None)
    send_login_disabled_notify_email: bool = attr.ib(default=None)
    login_disabled_notify_email_address: str = attr.ib(default=None)
    default_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("disallow_repeated_digits", "disallowRepeatedDigits", bool),
            E("disallow_user_number", "disallowUserNumber", bool),
            E("disallow_reversed_user_number", "disallowReversedUserNumber", bool),
            E("disallow_old_passcode", "disallowOldPasscode", bool),
            E("disallow_reversed_old_passcode", "disallowReversedOldPasscode", bool),
            E("min_code_length", "minCodeLength", int),
            E("max_code_length", "maxCodeLength", int),
            E(
                "disable_login_after_max_failed_login_attempts",
                "disableLoginAfterMaxFailedLoginAttempts",
                bool,
            ),
            E("max_failed_login_attempts", "maxFailedLoginAttempts", int),
            E("expire_password", "expirePassword", bool),
            E("passcode_expires_days", "passcodeExpiresDays", int),
            E("send_login_disabled_notify_email", "sendLoginDisabledNotifyEmail", bool),
            E(
                "login_disabled_notify_email_address",
                "loginDisabledNotifyEmailAddress",
                str,
            ),
            E("default_password", "defaultPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Voice Messaging.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        real_delete_for_imap: realDeleteForImap
        use_dn_in_mail_body: useDnInMailBody
        use_short_subject_line: useShortSubjectLine
        max_greeting_length_minutes: maxGreetingLengthMinutes
        max_message_length_minutes: maxMessageLengthMinutes
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        default_delivery_from_address: defaultDeliveryFromAddress
        default_notification_from_address: defaultNotificationFromAddress
        default_voice_portal_lockout_from_address: defaultVoicePortalLockoutFromAddress
        use_outgoing_mwi_on_smdi: useOutgoingMWIOnSMDI
        mwi_delay_in_seconds: mwiDelayInSeconds
        voice_portal_scope: voicePortalScope
        network_wide_messaging: networkWideMessaging
        use_external_routing: useExternalRouting
        default_external_routing_address: defaultExternalRoutingAddress
    """

    real_delete_for_imap: bool = attr.ib(default=None)
    use_dn_in_mail_body: bool = attr.ib(default=None)
    use_short_subject_line: bool = attr.ib(default=None)
    max_greeting_length_minutes: int = attr.ib(default=None)
    max_message_length_minutes: int = attr.ib(default=None)
    max_mailbox_length_minutes: int = attr.ib(default=None)
    does_message_age: bool = attr.ib(default=None)
    hold_period_days: int = attr.ib(default=None)
    mail_server_net_address: str = attr.ib(default=None)
    mail_server_protocol: str = attr.ib(default=None)
    default_delivery_from_address: str = attr.ib(default=None)
    default_notification_from_address: str = attr.ib(default=None)
    default_voice_portal_lockout_from_address: str = attr.ib(default=None)
    use_outgoing_mwi_on_smdi: bool = attr.ib(default=None)
    mwi_delay_in_seconds: int = attr.ib(default=None)
    voice_portal_scope: str = attr.ib(default=None)
    network_wide_messaging: bool = attr.ib(default=None)
    use_external_routing: bool = attr.ib(default=None)
    default_external_routing_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("real_delete_for_imap", "realDeleteForImap", bool),
            E("use_dn_in_mail_body", "useDnInMailBody", bool),
            E("use_short_subject_line", "useShortSubjectLine", bool),
            E("max_greeting_length_minutes", "maxGreetingLengthMinutes", int),
            E("max_message_length_minutes", "maxMessageLengthMinutes", int),
            E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int),
            E("does_message_age", "doesMessageAge", bool),
            E("hold_period_days", "holdPeriodDays", int),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str),
            E("default_delivery_from_address", "defaultDeliveryFromAddress", str),
            E(
                "default_notification_from_address",
                "defaultNotificationFromAddress",
                str,
            ),
            E(
                "default_voice_portal_lockout_from_address",
                "defaultVoicePortalLockoutFromAddress",
                str,
            ),
            E("use_outgoing_mwi_on_smdi", "useOutgoingMWIOnSMDI", bool),
            E("mwi_delay_in_seconds", "mwiDelayInSeconds", int),
            E("voice_portal_scope", "voicePortalScope", str),
            E("network_wide_messaging", "networkWideMessaging", bool),
            E("use_external_routing", "useExternalRouting", bool),
            E("default_external_routing_address", "defaultExternalRoutingAddress", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupModifyRequest16(OCIRequest):
    """
    Modify the system level data associated with Voice Messaging.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: realDeleteForImap useDnInMailBody
    useShortSubjectLine maxMessageLengthMinutes maxMailboxLengthMinutes doesMessageAge
    holdPeriodDays mailServerNetAddress mailServerProtocol defaultDeliveryFromAddress
    defaultNotificationFromAddress useOutgoingMWIOnSMDI mwiDelayInSeconds voicePortalScope
    enterpriseVoicePortalLicensed networkWideMessaging useExternalRouting
    defaultExternalRoutingAddress vmOnlySystem
    clientInitiatedMailServerSessionTimeoutMinutes recordingAudioFileFormat

    Attributes:
        real_delete_for_imap: realDeleteForImap
        use_dn_in_mail_body: useDnInMailBody
        use_short_subject_line: useShortSubjectLine
        max_message_length_minutes: maxMessageLengthMinutes
        max_mailbox_length_minutes: maxMailboxLengthMinutes
        does_message_age: doesMessageAge
        hold_period_days: holdPeriodDays
        mail_server_net_address: mailServerNetAddress
        mail_server_protocol: mailServerProtocol
        default_delivery_from_address: defaultDeliveryFromAddress
        default_notification_from_address: defaultNotificationFromAddress
        default_voice_portal_lockout_from_address: defaultVoicePortalLockoutFromAddress
        use_outgoing_mwi_on_smdi: useOutgoingMWIOnSMDI
        mwi_delay_in_seconds: mwiDelayInSeconds
        voice_portal_scope: voicePortalScope
        network_wide_messaging: networkWideMessaging
        use_external_routing: useExternalRouting
        default_external_routing_address: defaultExternalRoutingAddress
        vm_only_system: vmOnlySystem
        client_initiated_mail_server_session_timeout_minutes:
            clientInitiatedMailServerSessionTimeoutMinutes
        recording_audio_file_format: recordingAudioFileFormat
    """

    real_delete_for_imap: bool = attr.ib(default=None)
    use_dn_in_mail_body: bool = attr.ib(default=None)
    use_short_subject_line: bool = attr.ib(default=None)
    max_message_length_minutes: int = attr.ib(default=None)
    max_mailbox_length_minutes: int = attr.ib(default=None)
    does_message_age: bool = attr.ib(default=None)
    hold_period_days: int = attr.ib(default=None)
    mail_server_net_address: str = attr.ib(default=None)
    mail_server_protocol: str = attr.ib(default=None)
    default_delivery_from_address: str = attr.ib(default=None)
    default_notification_from_address: str = attr.ib(default=None)
    default_voice_portal_lockout_from_address: str = attr.ib(default=None)
    use_outgoing_mwi_on_smdi: bool = attr.ib(default=None)
    mwi_delay_in_seconds: int = attr.ib(default=None)
    voice_portal_scope: str = attr.ib(default=None)
    network_wide_messaging: bool = attr.ib(default=None)
    use_external_routing: bool = attr.ib(default=None)
    default_external_routing_address: str = attr.ib(default=None)
    vm_only_system: bool = attr.ib(default=None)
    client_initiated_mail_server_session_timeout_minutes: int = attr.ib(default=None)
    recording_audio_file_format: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("real_delete_for_imap", "realDeleteForImap", bool),
            E("use_dn_in_mail_body", "useDnInMailBody", bool),
            E("use_short_subject_line", "useShortSubjectLine", bool),
            E("max_message_length_minutes", "maxMessageLengthMinutes", int),
            E("max_mailbox_length_minutes", "maxMailboxLengthMinutes", int),
            E("does_message_age", "doesMessageAge", bool),
            E("hold_period_days", "holdPeriodDays", int),
            E("mail_server_net_address", "mailServerNetAddress", str),
            E("mail_server_protocol", "mailServerProtocol", str),
            E("default_delivery_from_address", "defaultDeliveryFromAddress", str),
            E(
                "default_notification_from_address",
                "defaultNotificationFromAddress",
                str,
            ),
            E(
                "default_voice_portal_lockout_from_address",
                "defaultVoicePortalLockoutFromAddress",
                str,
            ),
            E("use_outgoing_mwi_on_smdi", "useOutgoingMWIOnSMDI", bool),
            E("mwi_delay_in_seconds", "mwiDelayInSeconds", int),
            E("voice_portal_scope", "voicePortalScope", str),
            E("network_wide_messaging", "networkWideMessaging", bool),
            E("use_external_routing", "useExternalRouting", bool),
            E("default_external_routing_address", "defaultExternalRoutingAddress", str),
            E("vm_only_system", "vmOnlySystem", bool),
            E(
                "client_initiated_mail_server_session_timeout_minutes",
                "clientInitiatedMailServerSessionTimeoutMinutes",
                int,
            ),
            E("recording_audio_file_format", "recordingAudioFileFormat", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupModifyVoicePortalMenusRequest(OCIRequest):
    """
    Request to modify the system voice portal menus setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        change_extended_away_greeting_menu_keys: changeExtendedAwayGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
    """

    use_voice_portal_customization: bool = attr.ib(default=None)
    voice_portal_main_menu_keys: str = attr.ib(default=None)
    voice_messaging_menu_keys: str = attr.ib(default=None)
    play_greeting_menu_keys: str = attr.ib(default=None)
    change_busy_or_no_answer_greeting_menu_keys: str = attr.ib(default=None)
    change_extended_away_greeting_menu_keys: str = attr.ib(default=None)
    record_new_greeting_or_personalized_name_menu_keys: str = attr.ib(default=None)
    delete_all_messages_menu_keys: str = attr.ib(default=None)
    comm_pilot_express_profile_menu_keys: str = attr.ib(default=None)
    personalized_name_menu_keys: str = attr.ib(default=None)
    call_forwarding_options_menu_keys: str = attr.ib(default=None)
    change_call_forwarding_destination_menu_keys: str = attr.ib(default=None)
    voice_portal_calling_menu_keys: str = attr.ib(default=None)
    hoteling_menu_keys: str = attr.ib(default=None)
    passcode_menu_keys: str = attr.ib(default=None)
    play_messages_menu_keys: str = attr.ib(default=None)
    play_message_menu_keys: str = attr.ib(default=None)
    additional_message_options_menu_keys: str = attr.ib(default=None)
    forward_or_compose_message_menu_keys: str = attr.ib(default=None)
    reply_message_menu_keys: str = attr.ib(default=None)
    send_to_distribution_list_menu_keys: str = attr.ib(default=None)
    select_distribution_list_menu_keys: str = attr.ib(default=None)
    review_selected_distribution_list_menu_keys: str = attr.ib(default=None)
    send_message_to_selected_distribution_list_menu_keys: str = attr.ib(default=None)
    send_to_all_group_members_menu_keys: str = attr.ib(default=None)
    send_to_person_menu_keys: str = attr.ib(default=None)
    change_current_introduction_or_message_or_reply_menu_keys: str = attr.ib(default=None)
    voice_portal_login_menu_keys: str = attr.ib(default=None)
    fax_messaging_menu_keys: str = attr.ib(default=None)
    message_deposit_menu_keys: str = attr.ib(default=None)
    disable_message_deposit_menu_keys: str = attr.ib(default=None)
    greeting_only_forwarding_destination_menu_keys: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_voice_portal_customization", "useVoicePortalCustomization", bool),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_extended_away_greeting_menu_keys",
                "changeExtendedAwayGreetingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E("hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True),  # unknown
            E("passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVoiceMessagingGroupModifyVoicePortalMenusRequest19(OCIRequest):
    """
    Request to modify the system voice portal menus setting.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        use_voice_portal_customization: useVoicePortalCustomization
        voice_portal_main_menu_keys: voicePortalMainMenuKeys
        announcement_menu_keys: announcementMenuKeys
        announcement_recording_menu_keys: announcementRecordingMenuKeys
        greetings_menu_keys: greetingsMenuKeys
        conference_greeting_menu_keys: conferenceGreetingMenuKeys
        voice_messaging_menu_keys: voiceMessagingMenuKeys
        play_greeting_menu_keys: playGreetingMenuKeys
        change_busy_or_no_answer_greeting_menu_keys: changeBusyOrNoAnswerGreetingMenuKeys
        change_extended_away_greeting_menu_keys: changeExtendedAwayGreetingMenuKeys
        record_new_greeting_or_personalized_name_menu_keys:
            recordNewGreetingOrPersonalizedNameMenuKeys
        delete_all_messages_menu_keys: deleteAllMessagesMenuKeys
        comm_pilot_express_profile_menu_keys: commPilotExpressProfileMenuKeys
        personalized_name_menu_keys: personalizedNameMenuKeys
        call_forwarding_options_menu_keys: callForwardingOptionsMenuKeys
        change_call_forwarding_destination_menu_keys:
            changeCallForwardingDestinationMenuKeys
        voice_portal_calling_menu_keys: voicePortalCallingMenuKeys
        hoteling_menu_keys: hotelingMenuKeys
        passcode_menu_keys: passcodeMenuKeys
        play_messages_menu_keys: playMessagesMenuKeys
        play_message_menu_keys: playMessageMenuKeys
        additional_message_options_menu_keys: additionalMessageOptionsMenuKeys
        forward_or_compose_message_menu_keys: forwardOrComposeMessageMenuKeys
        reply_message_menu_keys: replyMessageMenuKeys
        send_to_distribution_list_menu_keys: sendToDistributionListMenuKeys
        select_distribution_list_menu_keys: selectDistributionListMenuKeys
        review_selected_distribution_list_menu_keys:
            reviewSelectedDistributionListMenuKeys
        send_message_to_selected_distribution_list_menu_keys:
            sendMessageToSelectedDistributionListMenuKeys
        send_to_all_group_members_menu_keys: sendToAllGroupMembersMenuKeys
        send_to_person_menu_keys: sendToPersonMenuKeys
        change_current_introduction_or_message_or_reply_menu_keys:
            changeCurrentIntroductionOrMessageOrReplyMenuKeys
        voice_portal_login_menu_keys: voicePortalLoginMenuKeys
        fax_messaging_menu_keys: faxMessagingMenuKeys
        message_deposit_menu_keys: messageDepositMenuKeys
        disable_message_deposit_menu_keys: disableMessageDepositMenuKeys
        greeting_only_forwarding_destination_menu_keys:
            greetingOnlyForwardingDestinationMenuKeys
        personal_assistant_menu_keys: personalAssistantMenuKeys
    """

    use_voice_portal_customization: bool = attr.ib(default=None)
    voice_portal_main_menu_keys: str = attr.ib(default=None)
    announcement_menu_keys: str = attr.ib(default=None)
    announcement_recording_menu_keys: str = attr.ib(default=None)
    greetings_menu_keys: str = attr.ib(default=None)
    conference_greeting_menu_keys: str = attr.ib(default=None)
    voice_messaging_menu_keys: str = attr.ib(default=None)
    play_greeting_menu_keys: str = attr.ib(default=None)
    change_busy_or_no_answer_greeting_menu_keys: str = attr.ib(default=None)
    change_extended_away_greeting_menu_keys: str = attr.ib(default=None)
    record_new_greeting_or_personalized_name_menu_keys: str = attr.ib(default=None)
    delete_all_messages_menu_keys: str = attr.ib(default=None)
    comm_pilot_express_profile_menu_keys: str = attr.ib(default=None)
    personalized_name_menu_keys: str = attr.ib(default=None)
    call_forwarding_options_menu_keys: str = attr.ib(default=None)
    change_call_forwarding_destination_menu_keys: str = attr.ib(default=None)
    voice_portal_calling_menu_keys: str = attr.ib(default=None)
    hoteling_menu_keys: str = attr.ib(default=None)
    passcode_menu_keys: str = attr.ib(default=None)
    play_messages_menu_keys: str = attr.ib(default=None)
    play_message_menu_keys: str = attr.ib(default=None)
    additional_message_options_menu_keys: str = attr.ib(default=None)
    forward_or_compose_message_menu_keys: str = attr.ib(default=None)
    reply_message_menu_keys: str = attr.ib(default=None)
    send_to_distribution_list_menu_keys: str = attr.ib(default=None)
    select_distribution_list_menu_keys: str = attr.ib(default=None)
    review_selected_distribution_list_menu_keys: str = attr.ib(default=None)
    send_message_to_selected_distribution_list_menu_keys: str = attr.ib(default=None)
    send_to_all_group_members_menu_keys: str = attr.ib(default=None)
    send_to_person_menu_keys: str = attr.ib(default=None)
    change_current_introduction_or_message_or_reply_menu_keys: str = attr.ib(default=None)
    voice_portal_login_menu_keys: str = attr.ib(default=None)
    fax_messaging_menu_keys: str = attr.ib(default=None)
    message_deposit_menu_keys: str = attr.ib(default=None)
    disable_message_deposit_menu_keys: str = attr.ib(default=None)
    greeting_only_forwarding_destination_menu_keys: str = attr.ib(default=None)
    personal_assistant_menu_keys: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("use_voice_portal_customization", "useVoicePortalCustomization", bool),
            E(
                "voice_portal_main_menu_keys",
                "voicePortalMainMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "announcement_menu_keys",
                "announcementMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "announcement_recording_menu_keys",
                "announcementRecordingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "greetings_menu_keys",
                "greetingsMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "conference_greeting_menu_keys",
                "conferenceGreetingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "voice_messaging_menu_keys",
                "voiceMessagingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "play_greeting_menu_keys",
                "playGreetingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_busy_or_no_answer_greeting_menu_keys",
                "changeBusyOrNoAnswerGreetingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_extended_away_greeting_menu_keys",
                "changeExtendedAwayGreetingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "record_new_greeting_or_personalized_name_menu_keys",
                "recordNewGreetingOrPersonalizedNameMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "delete_all_messages_menu_keys",
                "deleteAllMessagesMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "comm_pilot_express_profile_menu_keys",
                "commPilotExpressProfileMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "personalized_name_menu_keys",
                "personalizedNameMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "call_forwarding_options_menu_keys",
                "callForwardingOptionsMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_call_forwarding_destination_menu_keys",
                "changeCallForwardingDestinationMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "voice_portal_calling_menu_keys",
                "voicePortalCallingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E("hoteling_menu_keys", "hotelingMenuKeys", str, is_complex=True),  # unknown
            E("passcode_menu_keys", "passcodeMenuKeys", str, is_complex=True),  # unknown
            E(
                "play_messages_menu_keys",
                "playMessagesMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "play_message_menu_keys",
                "playMessageMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "additional_message_options_menu_keys",
                "additionalMessageOptionsMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "forward_or_compose_message_menu_keys",
                "forwardOrComposeMessageMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "reply_message_menu_keys",
                "replyMessageMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_to_distribution_list_menu_keys",
                "sendToDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "select_distribution_list_menu_keys",
                "selectDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "review_selected_distribution_list_menu_keys",
                "reviewSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_message_to_selected_distribution_list_menu_keys",
                "sendMessageToSelectedDistributionListMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_to_all_group_members_menu_keys",
                "sendToAllGroupMembersMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "send_to_person_menu_keys",
                "sendToPersonMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "change_current_introduction_or_message_or_reply_menu_keys",
                "changeCurrentIntroductionOrMessageOrReplyMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "voice_portal_login_menu_keys",
                "voicePortalLoginMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "fax_messaging_menu_keys",
                "faxMessagingMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "message_deposit_menu_keys",
                "messageDepositMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "disable_message_deposit_menu_keys",
                "disableMessageDepositMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "greeting_only_forwarding_destination_menu_keys",
                "greetingOnlyForwardingDestinationMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
            E(
                "personal_assistant_menu_keys",
                "personalAssistantMenuKeys",
                str,
                is_complex=True,
            ),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingRestrictionsZoneAddRequest(OCIRequest):
    """
    Add a zone.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``SystemZoneAddRequest()``

    Attributes:
        zone_name: zoneName
        physical_location: physicalLocation
    """

    zone_name: str = attr.ib()
    physical_location: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("physical_location", "physicalLocation", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingRestrictionsZoneDeleteRequest(OCIRequest):
    """
    Deletes a zone from the system The response is either a ``SuccessResponse()`` or an
    ``ErrorResponse()``.

    Replaced by: ``SystemZoneDeleteRequest()``

    Attributes:
        zone_name: zoneName
    """

    zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingRestrictionsZoneGetListRequest(OCIRequest):
    """
    Gets a list of all zones defined in the system The response is
    ``SystemZoneCallingRestrictionsZoneGetListResponse()`` or an ``ErrorResponse()``.

    Replaced by: ``SystemZoneGetListRequest()``
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingRestrictionsZoneModifyRequest(OCIRequest):
    """
    Modifies attributes of a zone in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``SystemZonePhysicalLocationAddListRequest()`` and
    ``SystemZonePhysicalLocationDeleteListRequest()``

    Attributes:
        zone_name: zoneName
        physical_location: physicalLocation
    """

    zone_name: str = attr.ib()
    physical_location: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("physical_location", "physicalLocation", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingZonePhysicalLocationGetRequest(OCIRequest):
    """
    Returns a zone calling physical location for a given zone.

    Response is ``SystemZoneCallingZonePhysicalLocationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        zone_name: zoneName
    """

    zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingZonePhysicalLocationModifyRequest(OCIRequest):
    """
    Modifies a zone calling physical location for a given zone.

    Response is a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        zone_name: zoneName
        physical_location: physicalLocation
    """

    zone_name: str = attr.ib()
    physical_location: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("physical_location", "physicalLocation", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneDeleteRequest(OCIRequest):
    """
    Delete a Zone.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        zone_name: zoneName
    """

    zone_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneGetListRequest(OCIRequest):
    """
    Get the list of all Zones.

    The response is either a ``SystemZoneGetListResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneLocationBasedPhysicalLocationAddListRequest(OCIRequest):
    """
    Adds a list of physical locations to a zone The response is ``SuccessResponse()`` or
    an ``ErrorResponse()``.


    Attributes:
        zone_name: zoneName
        physical_location: physicalLocation
    """

    zone_name: str = attr.ib()
    physical_location: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("physical_location", "physicalLocation", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneLocationBasedPhysicalLocationDeleteListRequest(OCIRequest):
    """
    Deletes a list of physical addresses from a zone The response is ``SuccessResponse()``
    or an ``ErrorResponse()``.


    Attributes:
        zone_name: zoneName
        physical_location: physicalLocation
    """

    zone_name: str = attr.ib()
    physical_location: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("physical_location", "physicalLocation", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class TutorialFlagGetRequest(OCIRequest):
    """
    Get the tutorial flag setting for a user or admin.

    The response is either a ``TutorialFlagGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class TutorialFlagModifyRequest(OCIRequest):
    """
    Modify the tutorial flag setting for a user or admin.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable_tutorial: enableTutorial
    """

    user_id: str = attr.ib()
    enable_tutorial: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable_tutorial", "enableTutorial", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAdviceOfChargeGetRequest(OCIRequest):
    """
    Request the user level data associated with Advice Of Charge.

    The response is either a ``UserAdviceOfChargeGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAdviceOfChargeModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Advice of Charge.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        aoc_type: aocType
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    aoc_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("aoc_type", "aocType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAlternateNumbersGetRequest(OCIRequest):
    """
    Request the user level data associated with Alternate Numbers.

    The response is either a ``UserAlternateNumbersGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAlternateNumbersGetRequest17(OCIRequest):
    """
    Request the user level data associated with Alternate Numbers.

    The response is either a ``UserAlternateNumbersGetResponse17()`` or an
    ``ErrorResponse()``. Replaced by: ``UserAlternateNumbersGetRequest21()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAlternateNumbersGetRequest21(OCIRequest):
    """
    Request the user level data associated with alternate numbers.

    The response is either a ``UserAlternateNumbersGetResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnnouncementFileGetAvailableListRequest(OCIRequest):
    """
    Get the list of available announcement files for a User from the Announcement
    Repository, for Virtual subscribers the list will also include the announcements for
    it's group.


    Attributes:
        user_id: userId
        announcement_file_type: announcementFileType
    """

    user_id: str = attr.ib()
    announcement_file_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("announcement_file_type", "announcementFileType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnonymousCallRejectionGetRequest(OCIRequest):
    """
    Request the user level data associated with Anonymous Call Rejection.

    The response is either a ``UserAnonymousCallRejectionGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnonymousCallRejectionModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Anonymous Call Rejection.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAssignedServicesGetListRequest(OCIRequest):
    """
    Get the list of assigned User and Group Services for the specified user.

    The response is either an ``UserAssignedServicesGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAttendantConsoleAddUserListRequest(OCIRequest):
    """
    Add users to the Attendant Console monitored users list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        monitored_user_id: monitoredUserId
    """

    user_id: str = attr.ib()
    monitored_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "monitored_user_id",
                "monitoredUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAttendantConsoleDeleteUserListRequest(OCIRequest):
    """
    Remove users from the Attendant Console monitored users list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        monitored_user_id: monitoredUserId
    """

    user_id: str = attr.ib()
    monitored_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "monitored_user_id",
                "monitoredUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAttendantConsoleGetRequest(OCIRequest):
    """
    Request user's attendant console settings.

    The response is either a ``UserAttendantConsoleGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAttendantConsoleGetRequest14sp2(OCIRequest):
    """
    Request user's attendant console settings.

    The response is either a ``UserAttendantConsoleGetResponse14sp2()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAuthenticationGetRequest(OCIRequest):
    """
    Get the user's authentication service information.

    The response is either a ``UserAuthenticationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAuthenticationModifyRequest(OCIRequest):
    """
    Modify the user's authentication service information.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        user_name: userName
        new_password: newPassword
        password: password
    """

    user_id: str = attr.ib()
    user_name: str = attr.ib(default=None)
    new_password: str = attr.ib(default=None)
    password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("user_name", "userName", str),
            E("new_password", "newPassword", str),
            E("password", "password", str, is_complex=True),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAutomaticCallbackGetRequest(OCIRequest):
    """
    Request the user level data associated with Automatic Callback.

    The response is either a ``UserAutomaticCallbackGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAutomaticCallbackModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Automatic Callback.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAutomaticHoldRetrieveGetRequest(OCIRequest):
    """
    Request the user level data associated with Automatic Hold/Retrieve.

    The response is either a ``UserAutomaticHoldRetrieveGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAutomaticHoldRetrieveModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Automatic Hold/Retrieve.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        recall_timer_seconds: recallTimerSeconds
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    recall_timer_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("recall_timer_seconds", "recallTimerSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBargeInExemptGetRequest(OCIRequest):
    """
    Request the user level data associated with Barge In Exempt.

    The response is either a ``UserBargeInExemptGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBargeInExemptModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Barge In Exempt.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBasicCallLogsGetListRequest(OCIRequest):
    """
    Request user's call logs.

    If the callLogType is not specified, all types of calls are returned.

    The response is either a ``UserBasicCallLogsGetListResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserBasicCallLogsGetListRequest14sp4()``

    Attributes:
        user_id: userId
        call_log_type: callLogType
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBasicCallLogsGetListRequest14sp4(OCIRequest):
    """
    Request user's call logs.

    If the callLogType is not specified, all types of calls are returned.

    The response is either a ``UserBasicCallLogsGetListResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        call_log_type: callLogType
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereAddPhoneNumberRequest(OCIRequest):
    """
    Add a broadworks Anywhere phone number.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        description: description
        is_active: isActive
        outbound_alternate_number: outboundAlternateNumber
        broadworks_call_control: broadworksCallControl
        use_diversion_inhibitor: useDiversionInhibitor
        answer_confirmation_required: answerConfirmationRequired
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    description: str = attr.ib(default=None)
    is_active: bool = attr.ib()
    outbound_alternate_number: str = attr.ib(default=None)
    broadworks_call_control: bool = attr.ib()
    use_diversion_inhibitor: bool = attr.ib()
    answer_confirmation_required: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("description", "description", str),
            E("is_active", "isActive", bool, is_required=True),
            E("outbound_alternate_number", "outboundAlternateNumber", str),
            E(
                "broadworks_call_control",
                "broadworksCallControl",
                bool,
                is_required=True,
            ),
            E(
                "use_diversion_inhibitor",
                "useDiversionInhibitor",
                bool,
                is_required=True,
            ),
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereDeletePhoneNumberRequest(OCIRequest):
    """
    Delete a broadworks anywhere phone number.

    Also deletes all the selective criteria for the phone number.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereDeleteSelectiveCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's BroadWorks Anywhere phone number.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereGetAvailablePortalListRequest(OCIRequest):
    """
    Get a list of all the available BroadWorks Anywhere portal instances for a specific
    user The response is either ``UserBroadWorksAnywhereGetAvailableListResponse()`` or
    ``ErrorResponse()``.


    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereGetPhoneNumberRequest(OCIRequest):
    """
    Get a broadworks anywhere phone number The response is
    ``UserBroadWorksAnywhereGetPhoneNumberResponse()``.


    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereGetRequest(OCIRequest):
    """
    Get the list of all the BroadWorks Anywhere phone numbers for the user.

    The response is either a ``UserBroadWorksAnywhereGetResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``UserBroadWorksAnywhereGetRequest16sp2()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereGetRequest16sp2(OCIRequest):
    """
    Get the list of all the BroadWorks Anywhere phone numbers for the user.

    The response is either a ``UserBroadWorksAnywhereGetResponse16sp2()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereGetSelectiveCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's BroadWorks Anywhere phone number.

    The response is either a ``UserBroadWorksAnywhereGetSelectiveCriteriaResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereGetSelectiveCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's BroadWorks Anywhere phone number.

    The response is either a ``UserBroadWorksAnywhereGetSelectiveCriteriaResponse16()`` or
    an ``ErrorResponse()``. Replaced by:
    ``UserBroadWorksAnywhereGetSelectiveCriteriaRequest21()``

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereGetSelectiveCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's BroadWorks Anywhere phone number.

    The response is either a ``UserBroadWorksAnywhereGetSelectiveCriteriaResponse21()`` or
    an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereModifyRequest(OCIRequest):
    """
    Request to modify the user-level settings for the BroadWorks Anywhere service for a
    specified user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        alert_all_locations_for_click_to_dial_calls: alertAllLocationsForClickToDialCalls
        alert_all_locations_for_group_paging_calls: alertAllLocationsForGroupPagingCalls
    """

    user_id: str = attr.ib()
    alert_all_locations_for_click_to_dial_calls: bool = attr.ib(default=None)
    alert_all_locations_for_group_paging_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "alert_all_locations_for_click_to_dial_calls",
                "alertAllLocationsForClickToDialCalls",
                bool,
            ),
            E(
                "alert_all_locations_for_group_paging_calls",
                "alertAllLocationsForGroupPagingCalls",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksCommunicatorGetRequest(OCIRequest):
    """
    Request to get the Configuration Server for a specified user.

    The response is either a ``UserBroadWorksCommunicatorGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityGetRequest(OCIRequest):
    """
    Get the user's broadworks mobility service settings.

    The response is either a ``UserBroadWorksMobilityGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityGetRequest21(OCIRequest):
    """
    Get the user's BroadWorks Mobility service settings.

    The response is either a ``UserBroadWorksMobilityGetResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityMobileIdentityDeleteRequest(OCIRequest):
    """
    Delete a mobile identity from the user's list of mobile identities.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. When a
    delete request is attempted on the primary mobile identity, the delete will fail
    unless it is the last mobile identity in the user’s list.

    Attributes:
        user_id: userId
        mobile_number: mobileNumber
    """

    user_id: str = attr.ib()
    mobile_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("mobile_number", "mobileNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityMobileIdentityGetRequest(OCIRequest):
    """
    Get the settings for a user's specified mobile identity.

    The response is either a ``UserBroadWorksMobilityMobileIdentityGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        mobile_number: mobileNumber
    """

    user_id: str = attr.ib()
    mobile_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("mobile_number", "mobileNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityModifyRequest(OCIRequest):
    """
    Modify the user's broadworks mobility service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        phones_to_ring: phonesToRing
        mobile_phone_number: mobilePhoneNumber
        alert_click_to_dial_calls: alertClickToDialCalls
        alert_group_paging_calls: alertGroupPagingCalls
        enable_diversion_inhibitor: enableDiversionInhibitor
        require_answer_confirmation: requireAnswerConfirmation
        broadworks_call_control: broadworksCallControl
        use_setting_level: useSettingLevel
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    phones_to_ring: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    alert_click_to_dial_calls: bool = attr.ib(default=None)
    alert_group_paging_calls: bool = attr.ib(default=None)
    enable_diversion_inhibitor: bool = attr.ib(default=None)
    require_answer_confirmation: bool = attr.ib(default=None)
    broadworks_call_control: bool = attr.ib(default=None)
    use_setting_level: str = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("phones_to_ring", "phonesToRing", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("alert_click_to_dial_calls", "alertClickToDialCalls", bool),
            E("alert_group_paging_calls", "alertGroupPagingCalls", bool),
            E("enable_diversion_inhibitor", "enableDiversionInhibitor", bool),
            E("require_answer_confirmation", "requireAnswerConfirmation", bool),
            E("broadworks_call_control", "broadworksCallControl", bool),
            E("use_setting_level", "useSettingLevel", str),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityModifyRequest20(OCIRequest):
    """
    Modify the user's broadworks mobility service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. If the
    request modifies the mobilePhoneNumber and the new number does not belong to the
    appropriate Mobile Subscriber Directory Numbers pool, the request is rejected.  For a
    service provider the number must belong to the group Mobile Subscriber Directory
    Numbers pool.  For an enterprise user, the number must belong to the enterprise Mobile
    Subscriber Directory Numbers pool.  If the request is executed by a user and modifies
    the mobilePhoneNumber, the request is rejected.

    Attributes:
        user_id: userId
        is_active: isActive
        phones_to_ring: phonesToRing
        mobile_phone_number: mobilePhoneNumber
        alert_click_to_dial_calls: alertClickToDialCalls
        alert_group_paging_calls: alertGroupPagingCalls
        enable_diversion_inhibitor: enableDiversionInhibitor
        require_answer_confirmation: requireAnswerConfirmation
        broadworks_call_control: broadworksCallControl
        use_setting_level: useSettingLevel
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    phones_to_ring: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    alert_click_to_dial_calls: bool = attr.ib(default=None)
    alert_group_paging_calls: bool = attr.ib(default=None)
    enable_diversion_inhibitor: bool = attr.ib(default=None)
    require_answer_confirmation: bool = attr.ib(default=None)
    broadworks_call_control: bool = attr.ib(default=None)
    use_setting_level: str = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("phones_to_ring", "phonesToRing", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("alert_click_to_dial_calls", "alertClickToDialCalls", bool),
            E("alert_group_paging_calls", "alertGroupPagingCalls", bool),
            E("enable_diversion_inhibitor", "enableDiversionInhibitor", bool),
            E("require_answer_confirmation", "requireAnswerConfirmation", bool),
            E("broadworks_call_control", "broadworksCallControl", bool),
            E("use_setting_level", "useSettingLevel", str),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistEnterpriseAddUserListRequest(OCIRequest):
    """
    Add users to the BroadWorks Receptionist - Enterprise monitored user list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        monitored_user_id: monitoredUserId
    """

    user_id: str = attr.ib()
    monitored_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "monitored_user_id",
                "monitoredUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistEnterpriseDeleteUserListRequest(OCIRequest):
    """
    Remove selected users from the BroadWorks Receptionist - Enterprise monitored user
    list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        monitored_user_id: monitoredUserId
    """

    user_id: str = attr.ib()
    monitored_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "monitored_user_id",
                "monitoredUserId",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistEnterpriseGetRequest(OCIRequest):
    """
    Request the monitored users list for the BroadWorks Receptionist - Enterprise service.

    The response is either a ``UserBroadWorksReceptionistEnterpriseGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistOfficeGetRequest(OCIRequest):
    """
    Request the Receptionist Office parameters.

    The response is either a ``UserBroadWorksReceptionistOfficeGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistSmallBusinessGetRequest(OCIRequest):
    """
    Request the Receptionist Small Business parameters.

    The response is either a ``UserBroadWorksReceptionistSmallBusinessGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBusyLampFieldGetRequest(OCIRequest):
    """
    Request the settings for the busy lamp field service.

    The response is either a ``UserBusyLampFieldGetResponse()`` or an ``ErrorResponse()``.
    Replaced by: ``UserBusyLampFieldGetRequest16sp2()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBusyLampFieldGetRequest16sp2(OCIRequest):
    """
    Request the settings for the busy lamp field service.

    The response is either a ``UserBusyLampFieldGetResponse16sp2()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterAddSupervisedAgentListRequest(OCIRequest):
    """
    Assign agent(s) to a call center supervisor.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        supervisor_user_id: supervisorUserId
        service_user_id: serviceUserId
        agent_user_id: agentUserId
    """

    supervisor_user_id: str = attr.ib()
    service_user_id: str = attr.ib()
    agent_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterAgentDetailsGetRequest(OCIRequest):
    """
    Request to get the detail information of a Call Center Agent.

    Administrator, supervisor and agent itself can send this command.

    The response is either ``UserCallCenterAgentDetailsGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        agent_user_id: agentUserId
    """

    agent_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_user_id", "agentUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterAgentSignOutRequest(OCIRequest):
    """
    This request signs-out a call center agent.

    Administrator, supervisor and agent itself can sign-out an agent.  An empty OCI table
    in OCI-P response indicates success and the agent has been signed out.  This sign-out
    command will fail if the agent is the last signed-in agent of any standard or premium
    call center to which she is currently joined.  If the sign-out fails, the OCI-P
    response will contain a list of Call Centers for which the agent is the last signed-in
    agent.  If this special logic is not needed, ``UserCallCenterModifyRequest19()`` can
    still be used to change the agents ACD state without checking if the agent is the last
    signed-in agent.

    The response is either a ``UserCallCenterAgentSignOutResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        agent_user_id: agentUserId
    """

    agent_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_user_id", "agentUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterCallDispositionCodeGetAvailableListRequest(OCIRequest):
    """
    Get the list of available Call Center Call Disposition Codes to be used by a client.

    The response is either ``UserCallCenterCallDispositionCodeGetAvailableListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterDeleteSupervisedAgentListRequest(OCIRequest):
    """
    Delete agent(s) from a call center supervisor.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        supervisor_user_id: supervisorUserId
        service_user_id: serviceUserId
        agent_user_id: agentUserId
    """

    supervisor_user_id: str = attr.ib()
    service_user_id: str = attr.ib()
    agent_user_id: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterEnhancedReportingScheduledReportDeleteRequest(OCIRequest):
    """
    Request to delete a call center reporting scheduled report created by a supervisor.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        supervisor_user_id: supervisorUserId
        name: name
    """

    supervisor_user_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterEnhancedReportingScheduledReportGetRequest(OCIRequest):
    """
    Request to get a call center reporting scheduled report created by supervisor.

    The response is either a
    ``UserCallCenterEnhancedReportingScheduledReportGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        supervisor_user_id: supervisorUserId
        name: name
    """

    supervisor_user_id: str = attr.ib()
    name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
            E("name", "name", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetAgentSupervisorListRequest(OCIRequest):
    """
    Get a list of supervisors for an agent on a given call center.

    The response is either a ``UserCallCenterGetAgentSupervisorListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        agent_user_id: agentUserId
        service_user_id: serviceUserId
    """

    agent_user_id: str = attr.ib()
    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_user_id", "agentUserId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetAvailableCallCenterListRequest(OCIRequest):
    """
    This request gets a list of all call centers which the user can be assigned to as an
    agent.

    Some of the call centers may already have the user as an agent.  It is the clients
    responsibility to discard the call centers that the user is already an agent of.

    The response is either a ``UserCallCenterGetAvailableCallCenterListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetAvailableDNISListRequest(OCIRequest):
    """
    Request a list of available DNIS for agent to select.

    The response is either ``UserCallCenterGetAvailableDNISListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        agent_user_id: agentUserId
    """

    agent_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_user_id", "agentUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetListRequest(OCIRequest):
    """
    Get the list of call centers the specified user belongs to.

    The response is either a ``UserCallCenterGetListResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserCallCenterGetRequest()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetRequest(OCIRequest):
    """
    Get the user's ACD state and the list of call centers the specified user belongs to.

    The response is either a ``UserCallCenterGetResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserCallCenterGetRequest16()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetRequest16(OCIRequest):
    """
    Get the user's call center settings and the list of call centers the specified user
    belongs to.

    The response is either a ``UserCallCenterGetResponse16()`` or an ``ErrorResponse()``.
    Replaced by: ``UserCallCenterGetRequest17()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetRequest17(OCIRequest):
    """
    Get the user's call center settings and the list of call centers the specified user
    belongs to.

    The response is either a ``UserCallCenterGetResponse17()`` or an ``ErrorResponse()``.
    Replaced by ``UserCallCenterGetRequest17sp4()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetRequest17sp4(OCIRequest):
    """
    Get the user's call center settings and the list of call centers the specified user
    belongs to.

    The response is either a ``UserCallCenterGetResponse17sp4()`` or an
    ``ErrorResponse()``. Replaced by ``UserCallCenterGetRequest19()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetRequest19(OCIRequest):
    """
    Get the user's call center settings and the list of call centers the specified user
    belongs to.

    The response is either a ``UserCallCenterGetResponse19()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetSupervisorCallCenterListRequest(OCIRequest):
    """
    Get a list of call centers the user is assigned to as a supervisor.

    The response is either a ``UserCallCenterGetSupervisorCallCenterListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        supervisor_user_id: supervisorUserId
    """

    supervisor_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterMonitoringGetRequest(OCIRequest):
    """
    Request the user's Call Center Monitoring settings.

    The response is either a ``UserCallCenterMonitoringGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterMonitoringModifyRequest(OCIRequest):
    """
    Modify the user's Call Center Monitoring settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        play_tone_to_agent_for_silent_monitoring: playToneToAgentForSilentMonitoring
    """

    user_id: str = attr.ib()
    play_tone_to_agent_for_silent_monitoring: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "play_tone_to_agent_for_silent_monitoring",
                "playToneToAgentForSilentMonitoring",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingAlwaysGetRequest(OCIRequest):
    """
    Request the user level data associated with Call Forwarding Always.

    The response is either a ``UserCallForwardingAlwaysGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingAlwaysModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Call Forwarding Always.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        is_ring_splash_active: isRingSplashActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    is_ring_splash_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("is_ring_splash_active", "isRingSplashActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingBusyGetRequest(OCIRequest):
    """
    Request the user level data associated with Call Forwarding Busy.

    The response is either a ``UserCallForwardingBusyGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingBusyModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Call Forwarding Busy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingNoAnswerGetRequest13mp16(OCIRequest):
    """
    Request the user level data associated with Call Forwarding No Answer.

    The response is either a ``UserCallForwardingNoAnswerGetResponse13mp16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingNoAnswerModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Call Forwarding No Answer.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        number_of_rings: numberOfRings
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    number_of_rings: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("number_of_rings", "numberOfRings", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingNotReachableGetRequest(OCIRequest):
    """
    Request the user level data associated with Call Forwarding Not Reachable.

    The response is either a ``UserCallForwardingNotReachableGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingNotReachableModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Call Forwarding Not Reachable.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's call forwarding selective service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's call forwarding selective service.

    The response is either a ``UserCallForwardingSelectiveGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveGetCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's call forwarding selective service.

    The response is either a ``UserCallForwardingSelectiveGetCriteriaResponse16()`` or an
    ``ErrorResponse()``. Replaced by:
    ``UserCallForwardingSelectiveGetCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveGetCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's call forwarding selective service.

    The response is either a ``UserCallForwardingSelectiveGetCriteriaResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveGetRequest(OCIRequest):
    """
    Get the user's call forwarding selective service setting.

    The response is either a ``UserCallForwardingSelectiveGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveGetRequest16(OCIRequest):
    """
    Get the user's call forwarding selective service setting.

    The response is either a ``UserCallForwardingSelectiveGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallLogsClearRequest(OCIRequest):
    """
    Clear a user's call logs associated with Basic Call Logs and Enhanced Call Logs
    features.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserCallLogsClearRequest14sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallLogsClearRequest14sp4(OCIRequest):
    """
    Clear a user's call logs associated with Basic Call Logs and Enhanced Call Logs
    features.

    The calls logs are deleted from both Basic Call Logs and Enhanced Call Logs if both
    features are assigned.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        delete_all_call_logs: deleteAllCallLogs
        delete_specified_call_logs: deleteSpecifiedCallLogs
    """

    user_id: str = attr.ib()
    delete_all_call_logs: bool = attr.ib(default=None)
    delete_specified_call_logs: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("delete_all_call_logs", "deleteAllCallLogs", bool),
            E(
                "delete_specified_call_logs",
                "deleteSpecifiedCallLogs",
                str,
                is_complex=True,
            ),  # unknown
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallMeNowDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's call me now service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallMeNowGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's call me now service.

    The response is either a ``UserCallMeNowGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallMeNowGetRequest(OCIRequest):
    """
    Get the user's call me now service setting.

    The response is either a ``UserCallMeNowGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's call notify service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's call notify service.

    The response is either a ``UserCallNotifyGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyGetCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's call notify service.

    The response is either a ``UserCallNotifyGetCriteriaResponse16()`` or an
    ``ErrorResponse()``. Replaced by: ``UserCallNotifyGetCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyGetCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's call notify service.

    The response is either a ``UserCallNotifyGetCriteriaResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyGetRequest(OCIRequest):
    """
    Get the user's call notify service setting.

    The response is either a ``UserCallNotifyGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallParkGetRequest(OCIRequest):
    """
    Identifies which Call Park group the user belongs to if any and the list of users in
    the group.

    The response is either ``UserCallParkGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallPickupGetRequest(OCIRequest):
    """
    Gets the details of the Call Pickup group that a user belongs to (if any).

    Any user can only belong to one Call Pickup group.

    The response is either ``UserCallPickupGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallPoliciesGetRequest(OCIRequest):
    """
    Request the user level data associated with Call Policies.

    The response is either a ``UserCallPoliciesGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallPoliciesGetRequest17(OCIRequest):
    """
    Request the user level data associated with Call Policies.

    The response is either a ``UserCallPoliciesGetResponse17()`` or an
    ``ErrorResponse()``. Replaced by: ``UserCallPoliciesGetRequest19sp1()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallPoliciesGetRequest19sp1(OCIRequest):
    """
    Request the user level data associated with Call Policies.

    The response is either a ``UserCallPoliciesGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallPoliciesModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Call Policies.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        redirected_calls_colp_privacy: redirectedCallsCOLPPrivacy
        call_being_forwarded_response_call_type: callBeingForwardedResponseCallType
        calling_line_identity_for_redirected_calls: callingLineIdentityForRedirectedCalls
    """

    user_id: str = attr.ib()
    redirected_calls_colp_privacy: str = attr.ib(default=None)
    call_being_forwarded_response_call_type: str = attr.ib(default=None)
    calling_line_identity_for_redirected_calls: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("redirected_calls_colp_privacy", "redirectedCallsCOLPPrivacy", str),
            E(
                "call_being_forwarded_response_call_type",
                "callBeingForwardedResponseCallType",
                str,
            ),
            E(
                "calling_line_identity_for_redirected_calls",
                "callingLineIdentityForRedirectedCalls",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest14(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest14sp1(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse14sp1()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserCallProcessingGetPolicyRequest14sp7()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest14sp7(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse14sp7()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest16(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest16sp2(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse16()`` or an
    ``ErrorResponse()``. Replaced by: ``UserCallProcessingGetPolicyRequest17sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest17(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest17sp3(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse17sp3()`` or an
    ``ErrorResponse()``. Replaced by: UserCallProcessingGetPolicyRequest17Sp4

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest17sp4(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse17sp4()`` or an
    ``ErrorResponse()``. Replaced by: ``UserCallProcessingGetPolicyRequest18()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest18(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse18()`` or an
    ``ErrorResponse()``. Replaced by: ``UserCallProcessingGetPolicyRequest19sp1()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingGetPolicyRequest19sp1(OCIRequest):
    """
    Request the user level data associated with Call Processing Policy.

    The response is either a ``UserCallProcessingGetPolicyResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingModifyPolicyRequest14(OCIRequest):
    """
    Modify the user level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserCallProcessingModifyPolicyRequest14sp7()``

    Attributes:
        user_id: userId
        use_user_setting: useUserSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
    """

    user_id: str = attr.ib()
    use_user_setting: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_user_setting", "useUserSetting", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallProcessingModifyPolicyRequest14sp7(OCIRequest):
    """
    Modify the user level data associated with Call Procesing Policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    useUserCLIDSetting attribute controls the CLID settings (clidPolicy,
    emergencyClidPolicy, allowAlternateNumbersForRedirectingIdentity, useGroupName,
    allowConfigurableCLIDForRedirectingIdentity, allowDepartmentCLIDNameOverride) The
    useUserMediaSetting attribute controls the Media settings (medisPolicySelection,
    supportedMediaSetName) The useUserCallLimitsSetting attribute controls the Call Limits
    setting (useMaxSimultaneousCalls, maxSimultaneousCalls, useMaxSimultaneousVideoCalls,
    maxSimultaneousVideoCalls, useMaxCallTimeForAnsweredCalls,
    maxCallTimeForAnsweredCallsMinutes, useMaxCallTimeForUnansweredCalls,
    maxCallTimeForUnansweredCallsMinutes, useMaxConcurrentRedirectedCalls,
    useMaxFindMeFollowMeDepth, maxRedirectionDepth,
    useMaxConcurrentFindMeFollowMeInvocations, maxConcurrentFindMeFollowMeInvocations) The
    useUserDCLIDSetting controls the Dialable Caller ID settings (enableDialableCallerID)
    The following elements are only used in AS data mode: useUserDCLIDSetting
    enableDialableCallerID allowConfigurableCLIDForRedirectingIdentity
    allowDepartmentCLIDNameOverride

    Attributes:
        user_id: userId
        use_user_clid_setting: useUserCLIDSetting
        use_user_media_setting: useUserMediaSetting
        use_user_call_limits_setting: useUserCallLimitsSetting
        use_user_dclid_setting: useUserDCLIDSetting
        use_max_simultaneous_calls: useMaxSimultaneousCalls
        max_simultaneous_calls: maxSimultaneousCalls
        use_max_simultaneous_video_calls: useMaxSimultaneousVideoCalls
        max_simultaneous_video_calls: maxSimultaneousVideoCalls
        use_max_call_time_for_answered_calls: useMaxCallTimeForAnsweredCalls
        max_call_time_for_answered_calls_minutes: maxCallTimeForAnsweredCallsMinutes
        use_max_call_time_for_unanswered_calls: useMaxCallTimeForUnansweredCalls
        max_call_time_for_unanswered_calls_minutes: maxCallTimeForUnansweredCallsMinutes
        media_policy_selection: mediaPolicySelection
        supported_media_set_name: supportedMediaSetName
        use_max_concurrent_redirected_calls: useMaxConcurrentRedirectedCalls
        max_concurrent_redirected_calls: maxConcurrentRedirectedCalls
        use_max_find_me_follow_me_depth: useMaxFindMeFollowMeDepth
        max_find_me_follow_me_depth: maxFindMeFollowMeDepth
        max_redirection_depth: maxRedirectionDepth
        use_max_concurrent_find_me_follow_me_invocations:
            useMaxConcurrentFindMeFollowMeInvocations
        max_concurrent_find_me_follow_me_invocations:
            maxConcurrentFindMeFollowMeInvocations
        clid_policy: clidPolicy
        emergency_clid_policy: emergencyClidPolicy
        allow_alternate_numbers_for_redirecting_identity:
            allowAlternateNumbersForRedirectingIdentity
        use_group_name: useGroupName
        enable_dialable_caller_id: enableDialableCallerID
        block_calling_name_for_external_calls: blockCallingNameForExternalCalls
        allow_configurable_clid_for_redirecting_identity:
            allowConfigurableCLIDForRedirectingIdentity
        allow_department_clid_name_override: allowDepartmentCLIDNameOverride
    """

    user_id: str = attr.ib()
    use_user_clid_setting: bool = attr.ib(default=None)
    use_user_media_setting: bool = attr.ib(default=None)
    use_user_call_limits_setting: bool = attr.ib(default=None)
    use_user_dclid_setting: bool = attr.ib(default=None)
    use_max_simultaneous_calls: bool = attr.ib(default=None)
    max_simultaneous_calls: int = attr.ib(default=None)
    use_max_simultaneous_video_calls: bool = attr.ib(default=None)
    max_simultaneous_video_calls: int = attr.ib(default=None)
    use_max_call_time_for_answered_calls: bool = attr.ib(default=None)
    max_call_time_for_answered_calls_minutes: int = attr.ib(default=None)
    use_max_call_time_for_unanswered_calls: bool = attr.ib(default=None)
    max_call_time_for_unanswered_calls_minutes: int = attr.ib(default=None)
    media_policy_selection: str = attr.ib(default=None)
    supported_media_set_name: str = attr.ib(default=None)
    use_max_concurrent_redirected_calls: bool = attr.ib(default=None)
    max_concurrent_redirected_calls: int = attr.ib(default=None)
    use_max_find_me_follow_me_depth: bool = attr.ib(default=None)
    max_find_me_follow_me_depth: int = attr.ib(default=None)
    max_redirection_depth: int = attr.ib(default=None)
    use_max_concurrent_find_me_follow_me_invocations: bool = attr.ib(default=None)
    max_concurrent_find_me_follow_me_invocations: int = attr.ib(default=None)
    clid_policy: str = attr.ib(default=None)
    emergency_clid_policy: str = attr.ib(default=None)
    allow_alternate_numbers_for_redirecting_identity: bool = attr.ib(default=None)
    use_group_name: bool = attr.ib(default=None)
    enable_dialable_caller_id: bool = attr.ib(default=None)
    block_calling_name_for_external_calls: bool = attr.ib(default=None)
    allow_configurable_clid_for_redirecting_identity: bool = attr.ib(default=None)
    allow_department_clid_name_override: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_user_clid_setting", "useUserCLIDSetting", bool),
            E("use_user_media_setting", "useUserMediaSetting", bool),
            E("use_user_call_limits_setting", "useUserCallLimitsSetting", bool),
            E("use_user_dclid_setting", "useUserDCLIDSetting", bool),
            E("use_max_simultaneous_calls", "useMaxSimultaneousCalls", bool),
            E("max_simultaneous_calls", "maxSimultaneousCalls", int),
            E("use_max_simultaneous_video_calls", "useMaxSimultaneousVideoCalls", bool),
            E("max_simultaneous_video_calls", "maxSimultaneousVideoCalls", int),
            E(
                "use_max_call_time_for_answered_calls",
                "useMaxCallTimeForAnsweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_answered_calls_minutes",
                "maxCallTimeForAnsweredCallsMinutes",
                int,
            ),
            E(
                "use_max_call_time_for_unanswered_calls",
                "useMaxCallTimeForUnansweredCalls",
                bool,
            ),
            E(
                "max_call_time_for_unanswered_calls_minutes",
                "maxCallTimeForUnansweredCallsMinutes",
                int,
            ),
            E("media_policy_selection", "mediaPolicySelection", str),
            E("supported_media_set_name", "supportedMediaSetName", str),
            E(
                "use_max_concurrent_redirected_calls",
                "useMaxConcurrentRedirectedCalls",
                bool,
            ),
            E("max_concurrent_redirected_calls", "maxConcurrentRedirectedCalls", int),
            E("use_max_find_me_follow_me_depth", "useMaxFindMeFollowMeDepth", bool),
            E("max_find_me_follow_me_depth", "maxFindMeFollowMeDepth", int),
            E("max_redirection_depth", "maxRedirectionDepth", int),
            E(
                "use_max_concurrent_find_me_follow_me_invocations",
                "useMaxConcurrentFindMeFollowMeInvocations",
                bool,
            ),
            E(
                "max_concurrent_find_me_follow_me_invocations",
                "maxConcurrentFindMeFollowMeInvocations",
                int,
            ),
            E("clid_policy", "clidPolicy", str),
            E("emergency_clid_policy", "emergencyClidPolicy", str),
            E(
                "allow_alternate_numbers_for_redirecting_identity",
                "allowAlternateNumbersForRedirectingIdentity",
                bool,
            ),
            E("use_group_name", "useGroupName", bool),
            E("enable_dialable_caller_id", "enableDialableCallerID", bool),
            E(
                "block_calling_name_for_external_calls",
                "blockCallingNameForExternalCalls",
                bool,
            ),
            E(
                "allow_configurable_clid_for_redirecting_identity",
                "allowConfigurableCLIDForRedirectingIdentity",
                bool,
            ),
            E(
                "allow_department_clid_name_override",
                "allowDepartmentCLIDNameOverride",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallRecordingGetRequest(OCIRequest):
    """
    Get the Call Recording attributes for a user.

    The response is either a ``UserCallRecordingGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallRecordingGetRequest20(OCIRequest):
    """
    Get the Call Recording attributes for a user.

    The response is either a ``UserCallRecordingGetResponse20()`` or an
    ``ErrorResponse()``. The following parameters are not returned for service instance: -
    pauseResumeNotification - enableCallRecordingAnnouncement -
    enableRecordCallRepeatWarningTone - recordCallRepeatWarningToneTimerSeconds

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallRecordingModifyRequest(OCIRequest):
    """
    Modify the Call Recording attributes for a user.

    The recording options "Always with Pause/Resume", "On Demand", and "On Demand with
    User Initiated Start" are not accepted for service instances.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following parameters are not accepted for service instance: - pauseResumeNotification
    - enableCallRecordingAnnouncement - enableRecordCallRepeatWarningTone -
    recordCallRepeatWarningToneTimerSeconds The enableVoiceMailRecording parameter is only
    applicable if the Voice Messaging User service is assigned to the user.  This applies
    to both users and service instances.

    Attributes:
        user_id: userId
        recording_option: recordingOption
        pause_resume_notification: pauseResumeNotification
        enable_call_recording_announcement: enableCallRecordingAnnouncement
        enable_record_call_repeat_warning_tone: enableRecordCallRepeatWarningTone
        record_call_repeat_warning_tone_timer_seconds:
            recordCallRepeatWarningToneTimerSeconds
        enable_voice_mail_recording: enableVoiceMailRecording
    """

    user_id: str = attr.ib()
    recording_option: str = attr.ib(default=None)
    pause_resume_notification: str = attr.ib(default=None)
    enable_call_recording_announcement: bool = attr.ib(default=None)
    enable_record_call_repeat_warning_tone: bool = attr.ib(default=None)
    record_call_repeat_warning_tone_timer_seconds: int = attr.ib(default=None)
    enable_voice_mail_recording: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("recording_option", "recordingOption", str),
            E("pause_resume_notification", "pauseResumeNotification", str),
            E(
                "enable_call_recording_announcement",
                "enableCallRecordingAnnouncement",
                bool,
            ),
            E(
                "enable_record_call_repeat_warning_tone",
                "enableRecordCallRepeatWarningTone",
                bool,
            ),
            E(
                "record_call_repeat_warning_tone_timer_seconds",
                "recordCallRepeatWarningToneTimerSeconds",
                int,
            ),
            E("enable_voice_mail_recording", "enableVoiceMailRecording", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallToNumberGetAvailableListRequest(OCIRequest):
    """
    Request to get the user available Call to Number List information.

    The response is either a ``UserCallToNumberGetAvailableListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallTransferGetRequest(OCIRequest):
    """
    Request the user level data associated with Call Transfer.

    The response is either a ``UserCallTransferGetResponse()`` or an ``ErrorResponse()``.

    Replaced By: UserCallTransferGetRequest14Sp4

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallTransferGetRequest14sp4(OCIRequest):
    """
    Request the user level data associated with Call Transfer.

    The response is either a ``UserCallTransferGetResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallTransferModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Call Transfer.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_recall_active: isRecallActive
        recall_number_of_rings: recallNumberOfRings
        use_diversion_inhibitor_for_blind_transfer: useDiversionInhibitorForBlindTransfer
        use_diversion_inhibitor_for_consultative_calls:
            useDiversionInhibitorForConsultativeCalls
        enable_busy_camp_on: enableBusyCampOn
        busy_camp_on_seconds: busyCampOnSeconds
    """

    user_id: str = attr.ib()
    is_recall_active: bool = attr.ib(default=None)
    recall_number_of_rings: int = attr.ib(default=None)
    use_diversion_inhibitor_for_blind_transfer: bool = attr.ib(default=None)
    use_diversion_inhibitor_for_consultative_calls: bool = attr.ib(default=None)
    enable_busy_camp_on: bool = attr.ib(default=None)
    busy_camp_on_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_recall_active", "isRecallActive", bool),
            E("recall_number_of_rings", "recallNumberOfRings", int),
            E(
                "use_diversion_inhibitor_for_blind_transfer",
                "useDiversionInhibitorForBlindTransfer",
                bool,
            ),
            E(
                "use_diversion_inhibitor_for_consultative_calls",
                "useDiversionInhibitorForConsultativeCalls",
                bool,
            ),
            E("enable_busy_camp_on", "enableBusyCampOn", bool),
            E("busy_camp_on_seconds", "busyCampOnSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallWaitingGetRequest(OCIRequest):
    """
    Request the user level data associated with Call Waiting.

    The response is either a ``UserCallWaitingGetResponse()`` or an ``ErrorResponse()``.
    Replaced by: ``UserCallWaitingGetRequest17sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallWaitingGetRequest17sp4(OCIRequest):
    """
    Request the user level data associated with Call Waiting.

    The response is either a ``UserCallWaitingGetResponse17sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallWaitingModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Call Waiting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: disableCallingLineIdDelivery

    Attributes:
        user_id: userId
        is_active: isActive
        disable_calling_line_id_delivery: disableCallingLineIdDelivery
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    disable_calling_line_id_delivery: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("disable_calling_line_id_delivery", "disableCallingLineIdDelivery", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingLineIDBlockingOverrideGetRequest(OCIRequest):
    """
    Request the user level data associated with Calling Line ID Blocking Override.

    The response is either a ``UserCallingLineIDBlockingOverrideGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingLineIDBlockingOverrideModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Calling Line ID Blocking Override.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingLineIDDeliveryBlockingGetRequest(OCIRequest):
    """
    Request the user level data associated with Calling Line ID Delivery Blocking.

    The response is either a ``UserCallingLineIDDeliveryBlockingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingLineIDDeliveryBlockingModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Calling Line ID Delivery Blocking.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingNameDeliveryGetRequest(OCIRequest):
    """
    Request the user level data associated with Calling Name Delivery.

    The response is either a ``UserCallingNameDeliveryGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingNameDeliveryModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Calling Name Delivery.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active_for_external_calls: isActiveForExternalCalls
        is_active_for_internal_calls: isActiveForInternalCalls
    """

    user_id: str = attr.ib()
    is_active_for_external_calls: bool = attr.ib(default=None)
    is_active_for_internal_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active_for_external_calls", "isActiveForExternalCalls", bool),
            E("is_active_for_internal_calls", "isActiveForInternalCalls", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingNameRetrievalGetRequest(OCIRequest):
    """
    Request the user level data associated with Calling Name Retrieval.

    The response is either a ``UserCallingNameRetrievalGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingNameRetrievalModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Calling Name Retrieval.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingNumberDeliveryGetRequest(OCIRequest):
    """
    Request the user level data associated with Calling Name Delivery.

    The response is either a ``UserCallingNumberDeliveryGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingNumberDeliveryModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Calling Number Delivery.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active_for_external_calls: isActiveForExternalCalls
        is_active_for_internal_calls: isActiveForInternalCalls
    """

    user_id: str = attr.ib()
    is_active_for_external_calls: bool = attr.ib(default=None)
    is_active_for_internal_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active_for_external_calls", "isActiveForExternalCalls", bool),
            E("is_active_for_internal_calls", "isActiveForInternalCalls", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingPartyCategoryGetRequest(OCIRequest):
    """
    Request the user level data associated with Calling Party Category.

    The response is either a ``UserCallingPartyCategoryGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingPartyCategoryGetRequest16(OCIRequest):
    """
    Request the user level data associated with Calling Party Category.

    The response is either a ``UserCallingPartyCategoryGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingPartyCategoryModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Calling Party Category.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        category: category
    """

    user_id: str = attr.ib()
    category: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("category", "category", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallingPartyCategoryModifyRequest16(OCIRequest):
    """
    Modify the user level data associated with Calling Party Category.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        category: category
    """

    user_id: str = attr.ib()
    category: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("category", "category", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserChargeNumberGetRequest(OCIRequest):
    """
    Request the user level data associated with Charge Number.

    The response is either a ``UserChargeNumberGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserChargeNumberGetRequest14sp9(OCIRequest):
    """
    Request the user level data associated with Charge Number.

    The response is either a ``UserChargeNumberGetResponse14sp9()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserChargeNumberModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Charge Number.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        use_charge_number_for_enhanced_translations:
            useChargeNumberForEnhancedTranslations
        send_charge_number_to_network: sendChargeNumberToNetwork
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib(default=None)
    use_charge_number_for_enhanced_translations: bool = attr.ib(default=None)
    send_charge_number_to_network: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str),
            E(
                "use_charge_number_for_enhanced_translations",
                "useChargeNumberForEnhancedTranslations",
                bool,
            ),
            E("send_charge_number_to_network", "sendChargeNumberToNetwork", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserClassmarkGetRequest(OCIRequest):
    """
    Request the Class Mark data associated with User.

    The response is either a ``UserClassmarkGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserClassmarkModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Class Mark.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        classmark: classmark
    """

    user_id: str = attr.ib()
    classmark: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("classmark", "classmark", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateBridgeGetRequest(OCIRequest):
    """
    Request the collaborate bridged assigned to the user.

    The user can only be assigned to one collaborate bridge at any given time.

    The response is either ``UserCollaborateBridgeGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateDeleteRoomRequest(OCIRequest):
    """
    Request to delete a collaborate room.

    The request only applies to project rooms and instant rooms.  The request fails when
    deleting a collaborate My Room.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_id: roomId
    """

    user_id: str = attr.ib()
    room_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_id", "roomId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateInstantRoomAddRequest(OCIRequest):
    """
    Request to add collaborate instant room.

    The response is either a ``UserCollaborateInstantRoomAddResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_name: roomName
        use_room_id_as_room_name: useRoomIdAsRoomName
    """

    user_id: str = attr.ib()
    room_name: str = attr.ib(default=None)
    use_room_id_as_room_name: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_name", "roomName", str),
            E("use_room_id_as_room_name", "useRoomIdAsRoomName", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateInstantRoomGetRequest(OCIRequest):
    """
    Request the collaborate room settings for an instant room.

    The request fails when requesting collaborate room settings for My Room or project
    rooms.

    The response is either ``UserCollaboratInstantRoomGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_id: roomId
    """

    user_id: str = attr.ib()
    room_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_id", "roomId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateInstantRoomParametersGetRequest(OCIRequest):
    """
    Request collaborate instant room settings.

    The response is either ``UserCollaborateInstantRoomParametersGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateInstantRoomParametersModifyRequest(OCIRequest):
    """
    Request to modify collaborate instant room settings.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        attendee_notification: attendeeNotification
        end_collaborate_room_session_on_owner_exit: endCollaborateRoomSessionOnOwnerExit
        owner_required: ownerRequired
    """

    user_id: str = attr.ib()
    attendee_notification: str = attr.ib(default=None)
    end_collaborate_room_session_on_owner_exit: bool = attr.ib(default=None)
    owner_required: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("attendee_notification", "attendeeNotification", str),
            E(
                "end_collaborate_room_session_on_owner_exit",
                "endCollaborateRoomSessionOnOwnerExit",
                bool,
            ),
            E("owner_required", "ownerRequired", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateMyRoomGetRequest(OCIRequest):
    """
    Request collaborate room settings for MyRoom.

    The response is either ``UserCollaboratMyRoomGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateMyRoomModifyRequest(OCIRequest):
    """
    Request to modify collaborate room settings for MyRoom.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_name: roomName
        attendee_notification: attendeeNotification
        end_collaborate_room_session_on_owner_exit: endCollaborateRoomSessionOnOwnerExit
        owner_required: ownerRequired
    """

    user_id: str = attr.ib()
    room_name: str = attr.ib(default=None)
    attendee_notification: str = attr.ib(default=None)
    end_collaborate_room_session_on_owner_exit: bool = attr.ib(default=None)
    owner_required: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_name", "roomName", str),
            E("attendee_notification", "attendeeNotification", str),
            E(
                "end_collaborate_room_session_on_owner_exit",
                "endCollaborateRoomSessionOnOwnerExit",
                bool,
            ),
            E("owner_required", "ownerRequired", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateProjectRoomGetRequest(OCIRequest):
    """
    Request collaborate room settings for a project room.

    The request fails when requesting collaborate room settings for instant rooms or My
    Room.

    The response is either ``UserCollaboratProjectRoomGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_id: roomId
    """

    user_id: str = attr.ib()
    room_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_id", "roomId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateRoomIDRegenerateRequest(OCIRequest):
    """
    Request to regenerate collaborate room id for MyRoom and project room.

    The request fails when requesting to regenerate room ID for an instant room.

    The response is either a ``UserCollaborateRoomIDRegenerateResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_id: roomId
    """

    user_id: str = attr.ib()
    room_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_id", "roomId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateRoomListGetRequest(OCIRequest):
    """
    Request the list of collaborate room instances for this specific user.

    The response is either a ``UserCollaborateRoomListGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommPilotCallManagerGetRequest(OCIRequest):
    """
    Request the user level data associated with CommPilot Call Manager.

    The response is either a ``UserCommPilotCallManagerGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommPilotCallManagerModifyRequest(OCIRequest):
    """
    Modify the user level data associated with CommPilot Call Manager.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        launch_on_login: launchOnLogin
    """

    user_id: str = attr.ib()
    launch_on_login: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("launch_on_login", "launchOnLogin", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommPilotExpressGetRequest(OCIRequest):
    """
    Get the user's commPilot express service setting.

    The response is either a ``UserCommPilotExpressGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommPilotExpressSRGetRequest13mp16(OCIRequest):
    """
    Get the user's commPilot express SR service setting.

    The response is either a ``UserCommPilotExpressSRGetResponse13mp16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommunicationBarringAuthorizationCodeDeleteListRequest(OCIRequest):
    """
    Delete a list of Communication Barring Authorization codes from a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        code: code
    """

    user_id: str = attr.ib()
    code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("code", "code", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommunicationBarringAuthorizationCodeGetListRequest(OCIRequest):
    """
    Get a list of Communication Barring Authorization Code for a user.

    The response is either a
    ``UserCommunicationBarringAuthorizationCodeGetListResponse()`` or an
    ``ErorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommunicationBarringGetRequest(OCIRequest):
    """
    Gets the Communication Barring settings for a user.

    The response is either a ``UserCommunicationBarringGetResponse()`` or an
    ``ErrorResponse()``. This command only applies to groups in an Enterprise.  This
    command will fail for groups in a Service Provider.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommunicationBarringModifyRequest(OCIRequest):
    """
    Modify the Communication Barring settings for a user.

    If useDefaultServiceProviderProfile is set to false, a profile name must be present.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. This command
    only applies to groups in an Enterprise.  This command will fail for groups in a
    Service Provider.

    Attributes:
        user_id: userId
        use_group_setting: useGroupSetting
        profile_name: profileName
    """

    user_id: str = attr.ib()
    use_group_setting: bool = attr.ib(default=None)
    profile_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_group_setting", "useGroupSetting", bool),
            E("profile_name", "profileName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommunicationBarringUserControlGetRequest(OCIRequest):
    """
    Lists the Communication Barring profiles available to a user and indicates which
    profile if any is currently active for the user.

    .

    The response is either ``UserCommunicationBarringUserControlGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommunicationBarringUserControlModifyRequest(OCIRequest):
    """
    Enabling a profile automatically disables the currently active profile.

    Also allows the passcode for the service to be modified and the lockout to be reset.
    Admins only need to populate the newPasscode field when changing the passcode.  Users
    must populate both the oldPasscode and new Passcode fields when changing the passcode.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable_profile: enableProfile
        old_passcode: oldPasscode
        new_passcode: newPasscode
        reset_lockout: resetLockout
    """

    user_id: str = attr.ib()
    enable_profile: int = attr.ib(default=None)
    old_passcode: str = attr.ib(default=None)
    new_passcode: str = attr.ib(default=None)
    reset_lockout: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable_profile", "enableProfile", int),
            E("old_passcode", "oldPasscode", str),
            E("new_passcode", "newPasscode", str),
            E("reset_lockout", "resetLockout", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserConnectedLineIdentificationRestrictionGetRequest(OCIRequest):
    """
    Request the user level data associated with Connected Line ID Restriction.

    The response is either a ``UserConnectedLineIdentificationRestrictionGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserConnectedLineIdentificationRestrictionModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Connected Line ID Restriction.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's custom ringback service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserGetCriteriaListRequest(OCIRequest):
    """
    Get the user's custom ringback service criteria listing.

    The response is either a ``UserCustomRingbackUserGetCriteriaListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's custom ringback service.

    The response is either a ``UserCustomRingbackUserGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: UserCustomRingbackUserGetCriteriaRequest15Sp2

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserGetCriteriaRequest15sp2(OCIRequest):
    """
    Get a criteria for the user's custom ringback service.

    The response is either a ``UserCustomRingbackUserGetCriteriaResponse15sp2()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserCustomRingbackUserGetCriteriaRequest16()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserGetCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's custom ringback service.

    The response is either a ``UserCustomRingbackUserGetCriteriaResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserGetCriteriaRequest20(OCIRequest):
    """
    Get a criteria for the user's custom ringback service.

    The response is either a ``UserCustomRingbackUserGetCriteriaResponse20()`` or an
    ``ErrorResponse()``. Replaced by: ``UserCustomRingbackUserGetCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserGetCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's custom ringback service.

    The response is either a ``UserCustomRingbackUserGetCriteriaResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDeleteRequest(OCIRequest):
    """
    Request to delete a user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDevicePoliciesGetRequest(OCIRequest):
    """
    Request the user level data associated with Device Policy.

    The response is either a ``UserDevicePoliciesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDevicePoliciesGetRequest19sp1(OCIRequest):
    """
    Request the user level data associated with Device Policy.

    The response is either a ``UserDevicePoliciesGetResponse19sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDevicePoliciesGetRequest20(OCIRequest):
    """
    Request the user level data associated with Device Policy.

    The response is either a ``UserDevicePoliciesGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDevicePoliciesGetRequest21(OCIRequest):
    """
    Request the user level data associated with Device Policy.

    The response is either a ``UserDevicePoliciesGetResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDevicePoliciesModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Device Policy.

    enableDeviceFeatureSynchronization can be configured regardless of lineMode, but is
    ignored by the application server in Multiple User Shared mode.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        line_mode: lineMode
        enable_device_feature_synchronization: enableDeviceFeatureSynchronization
        enable_dnd: enableDnd
        enable_call_forwarding_always: enableCallForwardingAlways
        enable_call_forwarding_busy: enableCallForwardingBusy
        enable_call_forwarding_no_answer: enableCallForwardingNoAnswer
        enable_acd: enableAcd
        enable_executive: enableExecutive
        enable_executive_assistant: enableExecutiveAssistant
        enable_security_classification: enableSecurityClassification
        enable_call_recording: enableCallRecording
        enable_call_decline: enableCallDecline
    """

    user_id: str = attr.ib()
    line_mode: str = attr.ib(default=None)
    enable_device_feature_synchronization: bool = attr.ib(default=None)
    enable_dnd: bool = attr.ib(default=None)
    enable_call_forwarding_always: bool = attr.ib(default=None)
    enable_call_forwarding_busy: bool = attr.ib(default=None)
    enable_call_forwarding_no_answer: bool = attr.ib(default=None)
    enable_acd: bool = attr.ib(default=None)
    enable_executive: bool = attr.ib(default=None)
    enable_executive_assistant: bool = attr.ib(default=None)
    enable_security_classification: bool = attr.ib(default=None)
    enable_call_recording: bool = attr.ib(default=None)
    enable_call_decline: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("line_mode", "lineMode", str),
            E(
                "enable_device_feature_synchronization",
                "enableDeviceFeatureSynchronization",
                bool,
            ),
            E("enable_dnd", "enableDnd", bool),
            E("enable_call_forwarding_always", "enableCallForwardingAlways", bool),
            E("enable_call_forwarding_busy", "enableCallForwardingBusy", bool),
            E("enable_call_forwarding_no_answer", "enableCallForwardingNoAnswer", bool),
            E("enable_acd", "enableAcd", bool),
            E("enable_executive", "enableExecutive", bool),
            E("enable_executive_assistant", "enableExecutiveAssistant", bool),
            E("enable_security_classification", "enableSecurityClassification", bool),
            E("enable_call_recording", "enableCallRecording", bool),
            E("enable_call_decline", "enableCallDecline", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDirectedCallPickupWithBargeInGetRequest(OCIRequest):
    """
    Request the user level data associated with Directed Call Pickup With Barge In.

    The response is either a ``UserDirectedCallPickupWithBargeInGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDirectedCallPickupWithBargeInGetRequest14sp7(OCIRequest):
    """
    Request the user level data associated with Directed Call Pickup With Barge In.

    The response is either a ``UserDirectedCallPickupWithBargeInGetResponse14sp7()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDirectedCallPickupWithBargeInModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Directed Call Pickup With Barge In.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable_barge_in_warning_tone: enableBargeInWarningTone
        enable_automatic_target_selection: enableAutomaticTargetSelection
    """

    user_id: str = attr.ib()
    enable_barge_in_warning_tone: bool = attr.ib(default=None)
    enable_automatic_target_selection: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable_barge_in_warning_tone", "enableBargeInWarningTone", bool),
            E(
                "enable_automatic_target_selection",
                "enableAutomaticTargetSelection",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDnGetActivationListRequest(OCIRequest):
    """
    Request to get a list of DNs associated with a user and their activation state.

    The response is either ``UserDnGetActivationListResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDoNotDisturbGetRequest(OCIRequest):
    """
    Request the user level data associated with Do Not Disturb.

    The response is either a ``UserDoNotDisturbGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDoNotDisturbModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Do Not Disturb.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        is_active: isActive
        ring_splash: ringSplash
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    ring_splash: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("ring_splash", "ringSplash", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDualModeVCCGetRequest(OCIRequest):
    """
    Request to get the user level Dual Mode VCC service attributes Response is either
    ``UserDualModeVCCGetResponse()`` or ``ErrorResponse()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserDualModeVCCModifyRequest(OCIRequest):
    """
    Request to modify the user level IN Integration service attributes Response is either
    ``UserINIntegrationGetResponse()`` or ``ErrorResponse()``

    Attributes:
        user_id: userId
        subscriber_user_name: subscriberUserName
        subscriber_password: subscriberPassword
    """

    user_id: str = attr.ib()
    subscriber_user_name: str = attr.ib(default=None)
    subscriber_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("subscriber_user_name", "subscriberUserName", str),
            E("subscriber_password", "subscriberPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserEnhancedCallLogsGetListRequest(OCIRequest):
    """
    Request user's call logs.

    It is possible to get a subset of the total list of calls by specifying a starting
    offset and the number of calls to get.  If the callLogType is not specified, all types
    of calls are returned.

    The response is either a ``UserEnhancedCallLogsGetListResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserEnhancedCallLogsGetListRequest14sp4()``

    Attributes:
        user_id: userId
        call_log_type: callLogType
        starting_offset: startingOffset
        num_calls: numCalls
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    starting_offset: int = attr.ib()
    num_calls: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E("starting_offset", "startingOffset", int, is_required=True),
            E("num_calls", "numCalls", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserEnhancedCallLogsGetListRequest14sp4(OCIRequest):
    """
    Request user's call logs.

    It is possible to get a subset of the total list of calls by specifying a starting
    offset and the number of calls to get.  If the callLogType is not specified, all types
    of calls are returned.

    The response is either a ``UserEnhancedCallLogsGetListResponse14sp4()`` or an
    ``ErrorResponse()``. Replaced by: ``UserEnhancedCallLogsGetListRequest16()``

    Attributes:
        user_id: userId
        call_log_type: callLogType
        starting_offset: startingOffset
        num_calls: numCalls
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    starting_offset: int = attr.ib()
    num_calls: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E("starting_offset", "startingOffset", int, is_required=True),
            E("num_calls", "numCalls", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveAssistantGetRequest(OCIRequest):
    """
    Get the setting of an executive assistant.

    The response is either ``UserExecutiveAssistantGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveDeleteFilteringSelectiveCriteriaRequest(OCIRequest):
    """
    Delete a filtering criteria from an executive user.

    Both executive and the executive assistant can run this command.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveGetAssistantRequest(OCIRequest):
    """
    Get the assistant setting and the list of assistants assigned to an executive.

    The response is either ``UserExecutiveGetAssistantsResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveGetFilteringRequest(OCIRequest):
    """
    Get the filtering setting and the list of filtering criteria defined for an executive
    user.

    Both executive and the executive assistant can run this command.

    The response is either ``UserExecutiveGetFilteringResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveGetFilteringSelectiveCriteriaRequest(OCIRequest):
    """
    Get a filtering criteria for an executive user.

    Both executive and the executive assistant can run this command.

    The response is either ``UserExecutiveGetSelectiveCriteriaResponse()`` or
    ``ErrorResponse()``. Replaced by:
    ``UserExecutiveGetFilteringSelectiveCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveGetFilteringSelectiveCriteriaRequest21(OCIRequest):
    """
    Get a filtering criteria for an executive user.

    Both executive and the executive assistant can run this command.

    The response is either ``UserExecutiveGetSelectiveCriteriaResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveGetScreeningAlertingRequest(OCIRequest):
    """
    Get the screening and alerting setting of an executive.

    Both executive and the executive assistant can run this command.

    The response is either ``UserExecutiveGetScreeningAlertingResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveModifyScreeningAlertingRequest(OCIRequest):
    """
    Modify the screening and alerting setting of an executive.

    Both executive and the executive assistant can run this command.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable_screening: enableScreening
        screening_alert_type: screeningAlertType
        alert_broad_works_mobility_location: alertBroadWorksMobilityLocation
        alert_broad_works_anywhere_locations: alertBroadWorksAnywhereLocations
        alert_shared_call_appearance_locations: alertSharedCallAppearanceLocations
        alerting_mode: alertingMode
        alerting_calling_line_id_name_mode: alertingCallingLineIdNameMode
        alerting_custom_calling_line_id_name: alertingCustomCallingLineIdName
        unicode_alerting_custom_calling_line_id_name:
            unicodeAlertingCustomCallingLineIdName
        alerting_calling_line_id_phone_number_mode: alertingCallingLineIdPhoneNumberMode
        alerting_custom_calling_line_id_phone_number:
            alertingCustomCallingLineIdPhoneNumber
        call_push_recall_number_of_rings: callPushRecallNumberOfRings
        next_assistant_number_of_rings: nextAssistantNumberOfRings
        enable_rollover: enableRollover
        rollover_wait_time_seconds: rolloverWaitTimeSeconds
        rollover_action: rolloverAction
        rollover_forward_to_phone_number: rolloverForwardToPhoneNumber
    """

    user_id: str = attr.ib()
    enable_screening: bool = attr.ib(default=None)
    screening_alert_type: str = attr.ib(default=None)
    alert_broad_works_mobility_location: bool = attr.ib(default=None)
    alert_broad_works_anywhere_locations: bool = attr.ib(default=None)
    alert_shared_call_appearance_locations: bool = attr.ib(default=None)
    alerting_mode: str = attr.ib(default=None)
    alerting_calling_line_id_name_mode: str = attr.ib(default=None)
    alerting_custom_calling_line_id_name: str = attr.ib(default=None)
    unicode_alerting_custom_calling_line_id_name: str = attr.ib(default=None)
    alerting_calling_line_id_phone_number_mode: str = attr.ib(default=None)
    alerting_custom_calling_line_id_phone_number: str = attr.ib(default=None)
    call_push_recall_number_of_rings: int = attr.ib(default=None)
    next_assistant_number_of_rings: int = attr.ib(default=None)
    enable_rollover: bool = attr.ib(default=None)
    rollover_wait_time_seconds: int = attr.ib(default=None)
    rollover_action: str = attr.ib(default=None)
    rollover_forward_to_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable_screening", "enableScreening", bool),
            E("screening_alert_type", "screeningAlertType", str),
            E(
                "alert_broad_works_mobility_location",
                "alertBroadWorksMobilityLocation",
                bool,
            ),
            E(
                "alert_broad_works_anywhere_locations",
                "alertBroadWorksAnywhereLocations",
                bool,
            ),
            E(
                "alert_shared_call_appearance_locations",
                "alertSharedCallAppearanceLocations",
                bool,
            ),
            E("alerting_mode", "alertingMode", str),
            E(
                "alerting_calling_line_id_name_mode",
                "alertingCallingLineIdNameMode",
                str,
            ),
            E(
                "alerting_custom_calling_line_id_name",
                "alertingCustomCallingLineIdName",
                str,
            ),
            E(
                "unicode_alerting_custom_calling_line_id_name",
                "unicodeAlertingCustomCallingLineIdName",
                str,
            ),
            E(
                "alerting_calling_line_id_phone_number_mode",
                "alertingCallingLineIdPhoneNumberMode",
                str,
            ),
            E(
                "alerting_custom_calling_line_id_phone_number",
                "alertingCustomCallingLineIdPhoneNumber",
                str,
            ),
            E("call_push_recall_number_of_rings", "callPushRecallNumberOfRings", int),
            E("next_assistant_number_of_rings", "nextAssistantNumberOfRings", int),
            E("enable_rollover", "enableRollover", bool),
            E("rollover_wait_time_seconds", "rolloverWaitTimeSeconds", int),
            E("rollover_action", "rolloverAction", str),
            E("rollover_forward_to_phone_number", "rolloverForwardToPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExternalCallingLineIDDeliveryGetRequest(OCIRequest):
    """
    Request the user level data associated with External Calling Line ID Delivery.

    The response is either a ``UserExternalCallingLineIDDeliveryGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExternalCallingLineIDDeliveryModifyRequest(OCIRequest):
    """
    Modify the user level data associated with External Calling Line ID Delivery.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExternalCustomRingbackGetRequest(OCIRequest):
    """
    Request the user level data associated with External Custom Ringback.

    The response is either a ``UserExternalCustomRingbackGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExternalCustomRingbackModifyRequest(OCIRequest):
    """
    Modify the user level data associated with External Custom Ringback.

    The user SIP URI, when selected, it replaces the SP address, port and prefix.  The
    user SIP URI, if selected, is the Request URI of the SIP INVITE sent to the external
    server.  When the service provider data is used instead, the Request URI is
    constructed using the prefix, address, port and the user DN. The timeout value is the
    only SP configuration used when the user SIP URI is selected.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        use_setting_level: useSettingLevel
        sip_request_uri: sipRequestURI
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    use_setting_level: str = attr.ib(default=None)
    sip_request_uri: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("use_setting_level", "useSettingLevel", str),
            E("sip_request_uri", "sipRequestURI", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFaxMessagingGetRequest(OCIRequest):
    """
    Request the user level data associated with Fax Messaging.

    The response is either a ``UserFaxMessagingGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFaxMessagingGetRequest17(OCIRequest):
    """
    Request the user level data associated with Fax Messaging.

    The response is either a ``UserFaxMessagingGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFaxMessagingGetRequest17sp1(OCIRequest):
    """
    Request the user level data associated with Fax Messaging.

    The response is either a ``UserFaxMessagingGetResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFeatureAccessCodeGetListRequest(OCIRequest):
    """
    Get the list of feature access codes for a user.

    The response is either a ``UserFeatureAccessCodeGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFeatureAccessCodeGetListRequest20(OCIRequest):
    """
    Get the list of feature access codes for a user.

    The response is either a ``UserFeatureAccessCodeGetListResponse20()`` or an
    ``ErrorResponse()``. In release 20 the "Call Recording" FAC name is changed to "Call
    Recording Start". Replaced by: ``UserFeatureAccessCodeGetListRequest21()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFeatureAccessCodeGetListRequest21(OCIRequest):
    """
    Get the list of feature access codes for a user.

    The response is either a ``UserFeatureAccessCodeGetListResponse20()`` or an
    ``ErrorResponse()``. In release 20 the "Call Recording" FAC name is changed to "Call
    Recording Start".

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFlexibleSeatingGuestGetRequest(OCIRequest):
    """
    Request the user level data associated with flexible seating guest.

    The response is either a ``UserFlexibleSeatingGuestGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetLoginInfoRequest(OCIRequest):
    """
    ``UserGetLoginInfoRequest()`` is used to access login information for a user either by
    a userId or dn.

    The phone number may be any DN associated with a user.

    The response is a ``UserGetLoginInfoResponse()`` or an ``ErrorResponse()``

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str),
            E("phone_number", "phoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRegistrationListRequest(OCIRequest):
    """
    Request to get a list of registrations for a user.

    The response is either a ``UserGetRegistrationListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest14(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse14()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest14sp4(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse14sp4()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest14sp9(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse14sp4()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest15sp2(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse15sp2()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest17(OCIRequest):
    """
    Replaced By ``UserGetRequest17sp4()`` Request to get the user information.

    The response is either ``UserGetResponse17()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest17sp3(OCIRequest):
    """
    Replaced By ``UserGetRequest18()`` Request to get the user information.

    The response is either ``UserGetResponse17sp3()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest17sp4(OCIRequest):
    """
    Replaced By ``UserGetRequest18()`` Request to get the user information.

    The response is either ``UserGetResponse17sp4()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest18(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse18()`` or ``ErrorResponse()``. Replaced by:
    ``UserGetRequest19()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest19(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse19()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest20(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse20()`` or ``ErrorResponse()``. Replaced by:
    ``UserGetRequest21()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetRequest21(OCIRequest):
    """
    Request to get the user information.

    The response is either ``UserGetResponse21()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGroupNightForwardingGetRequest(OCIRequest):
    """
    Request to get the Group Night Forwarding user parameters.

    The response is either ``UserGroupNightForwardingGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGroupNightForwardingModifyRequest(OCIRequest):
    """
    Request to modify the Group Night Forwarding user parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        night_forwarding: nightForwarding
    """

    user_id: str = attr.ib()
    night_forwarding: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("night_forwarding", "nightForwarding", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGroupPagingGetListRequest(OCIRequest):
    """
    Get the list of all the Paging Groups a user was assigned as an originator.

    The response is either a ``UserGroupPagingGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHolidayScheduleDeleteRequest(OCIRequest):
    """
    Delete a holiday schedule from a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        holiday_schedule_name: holidayScheduleName
    """

    user_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHolidayScheduleGetListRequest(OCIRequest):
    """
    Get a holiday schedule list for a user.

    The response is either a ``UserHolidayScheduleGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHolidayScheduleGetRequest(OCIRequest):
    """
    Get a holiday schedule a user.

    The response is either a ``UserHolidayScheduleGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        holiday_schedule_name: holidayScheduleName
    """

    user_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingGuestGetRequest14(OCIRequest):
    """
    Request the user level data associated with Hoteling Guest.

    The response is either a ``UserHotelingGuestGetResponse14()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingGuestGetRequest14sp2(OCIRequest):
    """
    Request the user level data associated with Hoteling Guest.

    The response is either a ``UserHotelingGuestGetResponse14()`` or an
    ``ErrorResponse()``. Replaced by: ``UserHotelingGuestGetRequest14sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingGuestGetRequest14sp4(OCIRequest):
    """
    Request the user level data associated with Hoteling Guest.

    The response is either a ``UserHotelingGuestGetResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingGuestModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Hoteling Guest.

    There is no provisioning error will be given when setting hostUserId to not nil value
    while Hoteling Guest feature is not active.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``UserHotelingGuestModifyRequest21()``

    Attributes:
        user_id: userId
        is_active: isActive
        enable_association_limit: enableAssociationLimit
        association_limit_hours: associationLimitHours
        host_user_id: hostUserId
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    enable_association_limit: bool = attr.ib(default=None)
    association_limit_hours: int = attr.ib(default=None)
    host_user_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("enable_association_limit", "enableAssociationLimit", bool),
            E("association_limit_hours", "associationLimitHours", int),
            E("host_user_id", "hostUserId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingGuestModifyRequest21(OCIRequest):
    """
    Modify the user level data associated with Hoteling Guest.

    Provisioning error will be given when setting hostUserId to not nil value while
    Hoteling Guest feature is not active.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        enable_association_limit: enableAssociationLimit
        association_limit_hours: associationLimitHours
        host_user_id: hostUserId
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    enable_association_limit: bool = attr.ib(default=None)
    association_limit_hours: int = attr.ib(default=None)
    host_user_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("enable_association_limit", "enableAssociationLimit", bool),
            E("association_limit_hours", "associationLimitHours", int),
            E("host_user_id", "hostUserId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingHostGetRequest14(OCIRequest):
    """
    Request the user level data associated with Hoteling Host.

    The response is either a ``UserHotelingHostGetResponse14()`` or an
    ``ErrorResponse()``. Replaced by: ``UserHotelingHostGetRequest14sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingHostGetRequest14sp4(OCIRequest):
    """
    Request the user level data associated with Hoteling Host.

    The response is either a ``UserHotelingHostGetResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingHostGetRequest17(OCIRequest):
    """
    Request the user level data associated with Hoteling Host.

    The response is either a ``UserHotelingHostGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingHostModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Hoteling Host.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        enforce_association_limit: enforceAssociationLimit
        association_limit_hours: associationLimitHours
        access_level: accessLevel
        remove_guest_association: removeGuestAssociation
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    enforce_association_limit: bool = attr.ib(default=None)
    association_limit_hours: int = attr.ib(default=None)
    access_level: str = attr.ib(default=None)
    remove_guest_association: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("enforce_association_limit", "enforceAssociationLimit", bool),
            E("association_limit_hours", "associationLimitHours", int),
            E("access_level", "accessLevel", str),
            E("remove_guest_association", "removeGuestAssociation", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserINIntegrationGetRequest(OCIRequest):
    """
    Request to get the user level IN Integration service attributes Response is either
    ``UserINIntegrationGetResponse()`` or ``ErrorResponse()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserINIntegrationModifyRequest(OCIRequest):
    """
    Request to modify the user level IN Integration service attributes Response is either
    ``SuccessResponse()`` or ``ErrorResponse()``

    Attributes:
        user_id: userId
        originating_service_key: originatingServiceKey
        terminating_service_key: terminatingServiceKey
    """

    user_id: str = attr.ib()
    originating_service_key: int = attr.ib(default=None)
    terminating_service_key: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("originating_service_key", "originatingServiceKey", int),
            E("terminating_service_key", "terminatingServiceKey", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInCallServiceActivationGetRequest(OCIRequest):
    """
    Request the user level data associated with In-Call Service Activation.

    The response is either a ``UserInCallServiceActivationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInCallServiceActivationModifyRequest(OCIRequest):
    """
    Modify the user level data associated with In-Call Service Activation.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserIncomingCallingPlanGetRequest(OCIRequest):
    """
    Request the user's incoming calling plan settings.

    The response is either a ``UserIncomingCallingPlanGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserIntegratedIMPGeneratePasswordRequest(OCIRequest):
    """
    Generate a new IMP password for the user.

    The new generated password is synchronized to the service Messaging Server.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserIntegratedIMPGetRequest(OCIRequest):
    """
    Get the Integrated IMP specific service attribute for the user.

    The response is either ``UserIMPGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserIntegratedIMPModifyRequest(OCIRequest):
    """
    Modifies the Integrated IMP specific service attribute for the user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserIntelligentNetworkServiceControlGetRequest(OCIRequest):
    """
    Request the user level data associated with Intelligent Network Service Control.

    The response is either a ``UserIntelligentNetworkServiceControlGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserIntelligentNetworkServiceControlModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Intelligent Network Service Control.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        pre_answer_actions_enabled: preAnswerActionsEnabled
    """

    user_id: str = attr.ib()
    pre_answer_actions_enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("pre_answer_actions_enabled", "preAnswerActionsEnabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInterceptUserGetRequest(OCIRequest):
    """
    Get the user's intercept user service settings.

    The response is either a ``UserInterceptUserGetResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserInterceptUserGetRequest16()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInterceptUserGetRequest16(OCIRequest):
    """
    Get the user's intercept user service settings.

    The response is either a ``UserInterceptUserGetResponse16()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserInterceptUserGetRequest16sp1()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInterceptUserGetRequest16sp1(OCIRequest):
    """
    Get the user's intercept user service settings.

    The response is either a ``UserInterceptUserGetResponse16sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInternalCallingLineIDDeliveryGetRequest(OCIRequest):
    """
    Request the user level data associated with Internal Calling Line ID Delivery.

    The response is either a ``UserInternalCallingLineIDDeliveryGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInternalCallingLineIDDeliveryModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Internal Calling Line ID Delivery.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserLDAPIntegrationGetDirectoryEntryRequest(OCIRequest):
    """
    Request one LDAP entry for a user.

    The response is either a ``UserLDAPIntegrationGetDirectoryEntryResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        entry_name: entryName
    """

    user_id: str = attr.ib()
    entry_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("entry_name", "entryName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserLegacyAutomaticCallbackGetRequest(OCIRequest):
    """
    Request the user level data associated with Legacy Automatic Callback.

    The response is either a ``UserLegacyAutomaticCallbackGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserLegacyAutomaticCallbackModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Legacy Automatic Callback.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserLinePortGetListRequest(OCIRequest):
    """
    Request to get all user's configured line ports.


    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMWIDeliveryToMobileEndpointGetRequest(OCIRequest):
    """
    Request the user level data associated with MWI Delivery to Mobile Endpoint service.

    The response is either a ``UserMWIDeliveryToMobileEndpointGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMWIDeliveryToMobileEndpointModifyRequest(OCIRequest):
    """
    Request to modify the user level data associated with MWI Delivery to Mobile Endpoint
    service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        mobile_phone_number: mobilePhoneNumber
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("mobile_phone_number", "mobilePhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMaliciousCallTraceGetRequest(OCIRequest):
    """
    Request the user level data associated with Malicious Call Trace.

    The response is either a ``UserMaliciousCallTraceGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetBridgeListRequest(OCIRequest):
    """
    Get the list of Meet-Me Conferencing bridges for which the user is a host.

    The response is either ``UserMeetMeConferencingGetBridgeListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceListRequest(OCIRequest):
    """
    Get the list of all conferences for which user is a host or a delegate.

    The response is either ``UserMeetMeConferencingGetConferenceListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        bridge_id: bridgeId
    """

    user_id: str = attr.ib()
    bridge_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("bridge_id", "bridgeId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceRecordingListRequest(OCIRequest):
    """
    Get the list of recordings of the conferences owned by the host.

    The response is either ``UserMeetMeConferencingGetConferenceRecordingListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserModifyUserIdRequest(OCIRequest):
    """
    Modify the user id of a real or virtual user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        new_user_id: newUserId
    """

    user_id: str = attr.ib()
    new_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("new_user_id", "newUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldGetRequest(OCIRequest):
    """
    Request the user level data associated with Music On Hold.

    The response is either a ``UserMusicOnHoldGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Music On Hold.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldUserGetRequest(OCIRequest):
    """
    Request the user level data associated with Music On Hold User.

    The response is either a ``UserMusicOnHoldUserGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserMusicOnHoldUserGetRequest16()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldUserGetRequest16(OCIRequest):
    """
    Request the user level data associated with Music On Hold User.

    The response is either a ``UserMusicOnHoldUserGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldUserGetRequest20(OCIRequest):
    """
    Request the user level data associated with Music On Hold User.

    The response is either a ``UserMusicOnHoldUserGetResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserNetworkConferencingGetRequest(OCIRequest):
    """
    Request the Network-Based Conferencing data for a specified user.

    The response is either a ``UserNetworkConferencingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserNumberPortabilityAnnouncementGetRequest(OCIRequest):
    """
    Get the Number Portability Announcement attributes for the user.

    The response is either ``UserNumberPortabilityAnnouncementGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserNumberPortabilityAnnouncementModifyRequest(OCIRequest):
    """
    Modify the Number Portability Announcement attributes for the user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable: enable
    """

    user_id: str = attr.ib()
    enable: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable", "enable", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOCICallControlApplicationGetListRequest(OCIRequest):
    """
    Get the OCI call control application list that can be used by the user.

    The response is either ``UserOCICallControlApplicationGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanAuthorizationCodeDeleteListRequest(OCIRequest):
    """
    Delete a list of authorization codes from a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        code: code
    """

    user_id: str = attr.ib()
    code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("code", "code", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanAuthorizationCodeGetListRequest(OCIRequest):
    """
    Request the list of authorization codes for a user.

    The response is either a ``UserOutgoingCallingPlanAuthorizationCodeGetListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanAuthorizationCodeGetRequest(OCIRequest):
    """
    Request the authorization code setting for a user.

    The response is either a ``UserOutgoingCallingPlanAuthorizationCodeGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanAuthorizationCodeModifyRequest(OCIRequest):
    """
    Modify the authorization setting for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanCallMeNowGetRequest(OCIRequest):
    """
    Request the Call Me Now call permissions for a user.

    The response is either a ``UserOutgoingCallingPlanCallMeNowGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanDigitPlanCallMeNowGetRequest(OCIRequest):
    """
    Request the Call Me Now call permissions for digit patterns for a user.

    The response is either a ``UserOutgoingCallingPlanDigitPlanCallMeNowGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanDigitPlanOriginatingGetRequest(OCIRequest):
    """
    Request the originating permissions for digit patterns for a user.

    The response is either a ``UserOutgoingCallingPlanDigitPlanOriginatingGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanDigitPlanRedirectingGetRequest(OCIRequest):
    """
    Request the redirecting permissions for digit patterns for a user.

    The response is either a ``UserOutgoingCallingPlanDigitPlanRedirectingGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanOriginatingGetRequest(OCIRequest):
    """
    Request the originating permissions for a user.

    The response is either a ``UserOutgoingCallingPlanOriginatingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetRequest(OCIRequest):
    """
    Request the Call Me Now permissions for Pinhole digit patterns for a user.

    The response is either a
    ``UserOutgoingCallingPlanPinholeDigitPlanCallMeNowgGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetRequest(OCIRequest):
    """
    Request the originating permissions for Pinhole digit patterns for a user.

    The response is either a
    ``UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetRequest(OCIRequest):
    """
    Request the redirecting permissions for Pinhole digit patterns for a user.

    The response is either a
    ``UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanRedirectedGetRequest(OCIRequest):
    """
    Request the call forwarded/transferred permissions for a user.

    The response is either a ``UserOutgoingCallingPlanRedirectedGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanRedirectingGetRequest(OCIRequest):
    """
    Request the initiating call forwards/transfer permissions for a user.

    The response is either a ``UserOutgoingCallingPlanRedirectingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanSustainedAuthorizationCodeGetRequest(OCIRequest):
    """
    Request the sustained authorization code setting for a user.

    The response is either a
    ``UserOutgoingCallingPlanSustainedAuthorizationCodeGetResponse()`` or an
    ``ErrorResponse()``. Engineering Note: This command is used internally by Call
    Processing.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanSustainedAuthorizationCodeModifyRequest(OCIRequest):
    """
    Modify or clear the sustained authorization code for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        code: code
    """

    user_id: str = attr.ib()
    code: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("code", "code", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanTransferNumbersGetRequest(OCIRequest):
    """
    Request the transfer numbers for a user.

    The response is either a ``UserOutgoingCallingPlanTransferNumbersGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutlookIntegrationGetRequest(OCIRequest):
    """
    Request the user level data associated with Outlook Integration.

    The response is either a ``UserOutlookIntegrationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutlookIntegrationModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Outlook Integration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        contact_retrieval_selection: contactRetrievalSelection
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    contact_retrieval_selection: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("contact_retrieval_selection", "contactRetrievalSelection", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPasswordInfoGetRequest(OCIRequest):
    """
    Request the user's Web password information.

    The response is either a ``UserPasswordInfoGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantCallToNumberGetListRequest(OCIRequest):
    """
    Request to get the user assigned Call to Number List information.

    The response is either a ``UserPersonalAssistantCallToNumberGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantExclusionNumberAddRequest(OCIRequest):
    """
    Add a User Personal Assistant Exclusion Number.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        exclusion_number: exclusionNumber
        description: description
    """

    user_id: str = attr.ib()
    exclusion_number: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("exclusion_number", "exclusionNumber", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantExclusionNumberDeleteListRequest(OCIRequest):
    """
    Delete a list of User Personal Assistant Exclusion Number.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        exclusion_number: exclusionNumber
    """

    user_id: str = attr.ib()
    exclusion_number: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "exclusion_number",
                "exclusionNumber",
                str,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantExclusionNumberGetRequest(OCIRequest):
    """
    Get a Personal Assistant Exclusion Number.

    The response is either ``UserPersonalAssistantExclusionNumberGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        exclusion_number: exclusionNumber
    """

    user_id: str = attr.ib()
    exclusion_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("exclusion_number", "exclusionNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantExclusionNumberModifyRequest(OCIRequest):
    """
    Modify an existing User Personal Assistant Exclusion Number description.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        exclusion_number: exclusionNumber
        description: description
    """

    user_id: str = attr.ib()
    exclusion_number: str = attr.ib()
    description: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("exclusion_number", "exclusionNumber", str, is_required=True),
            E("description", "description", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantGetRequest(OCIRequest):
    """
    Request to get the User Personal Assistant information.

    The response is either a ``UserPersonalAssistantGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantModifyRequest(OCIRequest):
    """
    Modify the User Personal Assistant information.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        presence: presence
        enable_transfer_to_attendant: enableTransferToAttendant
        attendant_number: attendantNumber
        enable_ring_splash: enableRingSplash
        enable_expiration_time: enableExpirationTime
        expiration_time: expirationTime
    """

    user_id: str = attr.ib()
    presence: str = attr.ib(default=None)
    enable_transfer_to_attendant: bool = attr.ib(default=None)
    attendant_number: str = attr.ib(default=None)
    enable_ring_splash: bool = attr.ib(default=None)
    enable_expiration_time: bool = attr.ib(default=None)
    expiration_time: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("presence", "presence", str),
            E("enable_transfer_to_attendant", "enableTransferToAttendant", bool),
            E("attendant_number", "attendantNumber", str),
            E("enable_ring_splash", "enableRingSplash", bool),
            E("enable_expiration_time", "enableExpirationTime", bool),
            E("expiration_time", "expirationTime", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalPhoneListDeleteListRequest(OCIRequest):
    """
    Delete one or more entries from a user's personal phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        entry_name: entryName
    """

    user_id: str = attr.ib()
    entry_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("entry_name", "entryName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalPhoneListModifyRequest(OCIRequest):
    """
    Modify an entry in a user's personal phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        entry_name: entryName
        new_entry_name: newEntryName
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    entry_name: str = attr.ib()
    new_entry_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("entry_name", "entryName", str, is_required=True),
            E("new_entry_name", "newEntryName", str),
            E("phone_number", "phoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPhoneDirectoryGetSearchedListRequest(OCIRequest):
    """
    Request a table containing the phone directory for a user.

    If the specified user is part of an enterprise, the directory includes all users in
    the enterprise and all entries in the enterprise common phone list and the common
    phone list of the specified user's group.  If the specified user is part of a service
    provider, the directory includes all users in the user's group and all entries in the
    common phone list of the specified user's group.  It is possible to search the
    directory for names containing a specified search string.  The search includes matches
    on first name or last name or common phone list names.

    The response is either ``UserPhoneDirectoryGetSearchedListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        name_search_string: nameSearchString
    """

    user_id: str = attr.ib()
    name_search_string: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("name_search_string", "nameSearchString", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPhysicalLocationGetRequest(OCIRequest):
    """
    Request the user level data associated with Physical Location.

    The response is either a ``UserPhysicalLocationGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPhysicalLocationModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Physical Location.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPolycomPhoneServicesGetPrimaryEndpointListRequest(OCIRequest):
    """
    Request the user's list of device profiles on which the user is the primary user.

    The response is either a ``UserPolycomPhoneServicesGetPrimaryEndpointListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPortalPasscodeGetInfoRequest(OCIRequest):
    """
    Request the user's portal passcode information.

    The response is either a ``UserPortalPasscodeGetInfoResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPortalPasscodeModifyRequest(OCIRequest):
    """
    Modify the user's Portal passcode The response is either a ``SuccessResponse()`` or an
    ``ErrorResponse()``.


    Attributes:
        user_id: userId
        old_passcode: oldPasscode
        new_passcode: newPasscode
    """

    user_id: str = attr.ib()
    old_passcode: str = attr.ib(default=None)
    new_passcode: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("old_passcode", "oldPasscode", str),
            E("new_passcode", "newPasscode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's pre-alerting service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's pre-alerting service.

    The response is either a ``UserPreAlertingAnnouncementGetCriteriaResponse()`` or an
    ``ErrorResponse()``. Replaced by:
    ``UserPreAlertingAnnouncementGetCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementGetCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's pre-alerting service.

    The response is either a ``UserPreAlertingAnnouncementGetCriteriaResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementGetRequest(OCIRequest):
    """
    Get the user's pre-alerting service setting.

    The response is either a ``UserPreAlertingAnnouncementGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementGetRequest20(OCIRequest):
    """
    Get the user's pre-alerting service setting.

    The response is either a ``UserPreAlertingAnnouncementGetResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreferredCarrierUserGetRequest(OCIRequest):
    """
    Requests the currently configured preferred carriers for a user.

    The response is either a ``UserPreferredCarrierUserGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrepaidGetRequest(OCIRequest):
    """
    Request the user level data associated with Prepaid.

    The response is either a ``UserPrepaidGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrepaidModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Prepaid.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrimaryEndpointAdvancedSettingGetRequest(OCIRequest):
    """
    Get the Users Primary Endpoint setting.

    The response is either a ``UserPrimaryEndpointAdvancedSettingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrimaryEndpointAdvancedSettingModifyRequest(OCIRequest):
    """
    Modify the Users Primary Endpoint line control settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        allow_origination: allowOrigination
        allow_termination: allowTermination
    """

    user_id: str = attr.ib()
    allow_origination: bool = attr.ib(default=None)
    allow_termination: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("allow_origination", "allowOrigination", bool),
            E("allow_termination", "allowTermination", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's priority alert service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertGetCriteriaListRequest(OCIRequest):
    """
    Get the user's priority alert criteria listing.

    The response is either a ``UserPriorityAlertGetCriteriaListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's priority alert service.

    The response is either a ``UserPriorityAlertGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertGetCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's priority alert service.

    The response is either a ``UserPriorityAlertGetCriteriaResponse16()`` or an
    ``ErrorResponse()``. Replaced by: ``UserPriorityAlertGetCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertGetCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's priority alert service.

    The response is either a ``UserPriorityAlertGetCriteriaResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrivacyGetRequest(OCIRequest):
    """
    Request the user level data associated with Privacy.

    The response is either a ``UserPrivacyGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrivacyGetRequest13mp17(OCIRequest):
    """
    Request the user level data associated with Privacy.

    This command is supported for regular users only.

    The response is either a ``UserPrivacyGetResponse13mp17()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPushToTalkGetRequest(OCIRequest):
    """
    Request the push to talk service setting.

    The response is either a ``UserPushToTalkGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserRemoteOfficeGetRequest(OCIRequest):
    """
    Request the user level data associated with Remote Office.

    The response is either a ``UserRemoteOfficeGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserRemoteOfficeModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Remote Office.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        remote_office_phone_number: remoteOfficePhoneNumber
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    remote_office_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("remote_office_phone_number", "remoteOfficePhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserRouteListGetRequest(OCIRequest):
    """
    Get the route list setting and the list of number ranges assigned to a user.

    The response is either ``UserRouteListGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserRoutePointCallDispositionCodeGetAvailableListRequest(OCIRequest):
    """
    Get the list of available Route Point Call Disposition Codes to be used by a client.

    The response is either ``UserRoutePointCallDispositionCodeGetAvailableListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
    """

    service_user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserRoutePointSupervisorGetListRequest(OCIRequest):
    """
    Get a list of Route Point supervisors assigned to a user.

    The response is either a ``UserRoutePointSupervisorGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSMDIMessageDeskAddServerRequest(OCIRequest):
    """
    Request to add a SMDI Server for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        device_name: deviceName
        net_address: netAddress
        port: port
    """

    user_id: str = attr.ib()
    device_name: str = attr.ib()
    net_address: str = attr.ib()
    port: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("net_address", "netAddress", str, is_required=True),
            E("port", "port", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSMDIMessageDeskDeleteServerListRequest(OCIRequest):
    """
    Request to delete a list of SMDI Servers for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        device_name: deviceName
    """

    user_id: str = attr.ib()
    device_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSMDIMessageDeskGetRequest(OCIRequest):
    """
    Get the user's SMDI Message Desk service personal setting.

    The response is either a ``UserSMDIMessageDeskGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSMDIMessageDeskGetServerListRequest(OCIRequest):
    """
    Request to get a list of SMDI Servers defined for a user.

    The response is either a ``UserSMDIMessageDeskGetServerListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSMDIMessageDeskModifyRequest(OCIRequest):
    """
    Modify the user's SMDI Message Desk service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        message_desk_number: messageDeskNumber
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    message_desk_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("message_desk_number", "messageDeskNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleAddRequest(OCIRequest):
    """
    Add a user schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_name: scheduleName
        schedule_type: scheduleType
    """

    user_id: str = attr.ib()
    schedule_name: str = attr.ib()
    schedule_type: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("schedule_name", "scheduleName", str, is_required=True),
            E("schedule_type", "scheduleType", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleGetListRequest(OCIRequest):
    """
    Get the list of a user schedules.

    The list can be filtered by schedule type.

    The response is either a ``UserScheduleGetListResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_type: scheduleType
    """

    user_id: str = attr.ib()
    schedule_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("schedule_type", "scheduleType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleGetListRequest17sp1(OCIRequest):
    """
    Get the list of schedules viewable by a User.

    The list can be filtered by schedule type.

    The response is either a ``UserScheduleGetListResponse17sp1()`` or an
    ``ErrorResponse()``. This command is authorized to user who is Executive-Assistant of
    the Executive.

    Attributes:
        user_id: userId
        schedule_type: scheduleType
    """

    user_id: str = attr.ib()
    schedule_type: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("schedule_type", "scheduleType", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSecurityClassificationGetRequest(OCIRequest):
    """
    Get a user's Security Classifications configuration.

    The response is either ``UserSecurityClassificationGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSecurityClassificationModifyRequest(OCIRequest):
    """
    Modify a user's Security Classification configuration The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        user_id: userId
        security_classification: securityClassification
    """

    user_id: str = attr.ib()
    security_classification: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "security_classification",
                "securityClassification",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's selective call acceptance service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceGetCriteriaListRequest(OCIRequest):
    """
    Get the user's selective call acceptance criteria listing.

    The response is either a ``UserSelectiveCallAcceptanceGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's selective call acceptance service.

    The response is either a ``UserSelectiveCallAcceptanceGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceGetCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's selective call acceptance service.

    The response is either a ``UserSelectiveCallAcceptanceGetCriteriaResponse16()`` or an
    ``ErrorResponse()``. Replaced by:
    ``UserSelectiveCallAcceptanceGetCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceGetCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's selective call acceptance service.

    The response is either a ``UserSelectiveCallAcceptanceGetCriteriaResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's selective call rejection service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionGetCriteriaListRequest(OCIRequest):
    """
    Get the user's selective call rejection criteria listing.

    The response is either a ``UserSelectiveCallRejectionGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's selective call rejection service.

    The response is either a ``UserSelectiveCallRejectionGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionGetCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's selective call rejection service.

    The response is either a ``UserSelectiveCallRejectionGetCriteriaResponse16()`` or an
    ``ErrorResponse()``. Replaced by:
    ``UserSelectiveCallRejectionGetCriteriaRequest16sp1()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionGetCriteriaRequest16sp1(OCIRequest):
    """
    Get a criteria for the user's selective call rejection service.

    The response is either a ``UserSelectiveCallRejectionGetCriteriaResponse16sp1()`` or
    an ``ErrorResponse()``. Replaced by:
    ``UserSelectiveCallRejectionGetCriteriaRequest21()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionGetCriteriaRequest21(OCIRequest):
    """
    Get a criteria for the user's selective call rejection service.

    The response is either a ``UserSelectiveCallRejectionGetCriteriaResponse21()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's sequential ring service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's sequential ring service.

    The response is either a ``UserSequentialRingGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingGetCriteriaRequest16(OCIRequest):
    """
    Get a criteria for the user's sequential ring service.

    The response is either a ``UserSequentialRingGetCriteriaResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingGetRequest13mp16(OCIRequest):
    """
    Get the user's sequential ring service setting.

    The response is either a ``UserSequentialRingGetResponse13mp16()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserSequentialRingGetRequest14sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingGetRequest14sp4(OCIRequest):
    """
    Get the user's sequential ring service setting.

    The response is either a ``UserSequentialRingGetResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSeriesCompletionGetRequest(OCIRequest):
    """
    Gets the details of the Series Completion group that a user belongs to (if any).

    Any user can only belong to one Series Completion group.

    The response is either ``UserSeriesCompletionGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceAssignListRequest(OCIRequest):
    """
    Request to assign the user services and service packs for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    user_id: str = attr.ib()
    service_name: List[str] = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("service_name", "serviceName", str, is_array=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceGetAssignmentListRequest(OCIRequest):
    """
    Requests the user's service and service pack assignment list with status.

    The response is either ``UserServiceGetAssignmentListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceIsAssignedRequest(OCIRequest):
    """
    Request to determine if a UserService or service pack is assigned to the user.


    Attributes:
        user_id: userId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    user_id: str = attr.ib()
    service_name: str = attr.ib(default=None)
    service_pack_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("service_name", "serviceName", str),
            E("service_pack_name", "servicePackName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceScriptsUserClearLogRequest(OCIRequest):
    """
    Clear the Service Script User Log.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceScriptsUserGetLogRequest(OCIRequest):
    """
    Request the user level data associated Service Scripts User Log.

    The response is either a ``UserServiceScriptsGetUserLogResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceScriptsUserGetRequest(OCIRequest):
    """
    Request the user level data associated with Service Scripts User Configuration.

    The response is either a ``UserServiceScriptsUserGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceUnassignListRequest(OCIRequest):
    """
    Requests to unassign the user services and service packs for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        service_name: serviceName
        service_pack_name: servicePackName
    """

    user_id: str = attr.ib()
    service_name: List[str] = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("service_name", "serviceName", str, is_array=True),
            E("service_pack_name", "servicePackName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserShInterfaceGetUserIdDataRequest(OCIRequest):
    """
    Returns the Sh non-transparent data stored against a userId.

    The response is either a ``UserShInterfaceGetUserIdDataResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceGetRequest14(OCIRequest):
    """
    Get the user's Shared Call Appearance service setting.

    The response is either a ``UserSharedCallAppearanceGetResponse14()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserSharedCallAppearanceGetRequest14sp2()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceGetRequest14sp2(OCIRequest):
    """
    Get the user's Shared Call Appearance service setting.

    The response is either a ``UserSharedCallAppearanceGetResponse14sp2()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceGetRequest16sp2(OCIRequest):
    """
    Get the user's Shared Call Appearance service setting.

    The response is either a ``UserSharedCallAppearanceGetResponse16sp2()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceModifyRequest(OCIRequest):
    """
    Modify the user's Shared Call Appearance service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: enableCallParkNotification

    Attributes:
        user_id: userId
        alert_all_appearances_for_click_to_dial_calls:
            alertAllAppearancesForClickToDialCalls
        alert_all_appearances_for_group_paging_calls:
            alertAllAppearancesForGroupPagingCalls
        allow_sca_call_retrieve: allowSCACallRetrieve
        multiple_call_arrangement_is_active: multipleCallArrangementIsActive
        allow_bridging_between_locations: allowBridgingBetweenLocations
        bridge_warning_tone: bridgeWarningTone
        enable_call_park_notification: enableCallParkNotification
    """

    user_id: str = attr.ib()
    alert_all_appearances_for_click_to_dial_calls: bool = attr.ib(default=None)
    alert_all_appearances_for_group_paging_calls: bool = attr.ib(default=None)
    allow_sca_call_retrieve: bool = attr.ib(default=None)
    multiple_call_arrangement_is_active: bool = attr.ib(default=None)
    allow_bridging_between_locations: bool = attr.ib(default=None)
    bridge_warning_tone: str = attr.ib(default=None)
    enable_call_park_notification: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "alert_all_appearances_for_click_to_dial_calls",
                "alertAllAppearancesForClickToDialCalls",
                bool,
            ),
            E(
                "alert_all_appearances_for_group_paging_calls",
                "alertAllAppearancesForGroupPagingCalls",
                bool,
            ),
            E("allow_sca_call_retrieve", "allowSCACallRetrieve", bool),
            E(
                "multiple_call_arrangement_is_active",
                "multipleCallArrangementIsActive",
                bool,
            ),
            E("allow_bridging_between_locations", "allowBridgingBetweenLocations", bool),
            E("bridge_warning_tone", "bridgeWarningTone", str),
            E("enable_call_park_notification", "enableCallParkNotification", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyAddPhoneNumberRequest(OCIRequest):
    """
    Add a new phone number and set the answer confirmation setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        answer_confirmation_required: answerConfirmationRequired
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    answer_confirmation_required: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's simultaneous ring family service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyDeletePhoneNumberRequest(OCIRequest):
    """
    Delete the phone number specified.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's simultaneous ring family service.

    The response is either a ``UserSimultaneousRingFamilyGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyGetPhoneNumberRequest(OCIRequest):
    """
    Get the answer confirmation setting for the phone number specified.

    The response is either a ``UserSimultaneousRingFamilyGetPhoneNumberResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyGetRequest(OCIRequest):
    """
    Get the user's simultaneous ring service family setting.

    The response is either a ``UserSimultaneousRingFamilyGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserSimultaneousRingFamilyGetRequest14sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyGetRequest14sp4(OCIRequest):
    """
    Get the user's simultaneous ring service Family setting.

    The response is either a ``UserSimultaneousRingFamilyGetResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyGetRequest17(OCIRequest):
    """
    Get the user's simultaneous ring family service setting.

    The response is either a ``UserSimultaneousRingFamilyGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyModifyPhoneNumberRequest(OCIRequest):
    """
    Modify the require confirmation setting for the destination.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        answer_confirmation_required: answerConfirmationRequired
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    answer_confirmation_required: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("answer_confirmation_required", "answerConfirmationRequired", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyModifyRequest14sp4(OCIRequest):
    """
    Modify the user's simultaneous ring family service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        incoming_calls: incomingCalls
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    incoming_calls: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("incoming_calls", "incomingCalls", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalAddPhoneNumberRequest(OCIRequest):
    """
    Add a new phone number and set the answer confirmation setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        answer_confirmation_required: answerConfirmationRequired
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    answer_confirmation_required: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E(
                "answer_confirmation_required",
                "answerConfirmationRequired",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalDeleteCriteriaRequest(OCIRequest):
    """
    Delete a criteria from the user's simultaneous ring personal service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalDeletePhoneNumberRequest(OCIRequest):
    """
    Delete the phone number specified.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalGetCriteriaRequest(OCIRequest):
    """
    Get a criteria for the user's simultaneous ring personal service.

    The response is either a ``UserSimultaneousRingPersonalGetCriteriaResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalGetPhoneNumberRequest(OCIRequest):
    """
    Get the answer confirmation setting for the phone number specified.

    The response is either a ``UserSimultaneousRingPersonalGetPhoneNumberResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalGetRequest(OCIRequest):
    """
    Get the user's simultaneous ring service personal setting.

    The response is either a ``UserSimultaneousRingPersonalGetResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserSimultaneousRingPersonalGetRequest14sp4()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalGetRequest14sp4(OCIRequest):
    """
    Get the user's simultaneous ring service personal setting.

    The response is either a ``UserSimultaneousRingPersonalGetResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalGetRequest17(OCIRequest):
    """
    Get the user's simultaneous ring personal service setting.

    The response is either a ``UserSimultaneousRingPersonalGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalModifyPhoneNumberRequest(OCIRequest):
    """
    Modify the require confirmation setting for the destination.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        answer_confirmation_required: answerConfirmationRequired
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    answer_confirmation_required: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("answer_confirmation_required", "answerConfirmationRequired", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalModifyRequest14sp4(OCIRequest):
    """
    Modify the user's simultaneous ring personal service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        incoming_calls: incomingCalls
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    incoming_calls: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("incoming_calls", "incomingCalls", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSingleSignOnCreateDeviceTokenRequest(OCIRequest):
    """
    This command allows a BroadWorks or Third-Party Client Application to create a Single
    Sign-On token for a device of a user.

    The token is created only if: 1. the specified user is the owner of a lineport on the
    specified device (including a trunk user on a trunk device). 2. and, the specified
    device is not in locked state.  3. and, the device type of the device does support
    Device Management.

    The response is either ``UserSingleSignOnCreateDeviceTokenResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        device_level: deviceLevel
        device_name: deviceName
    """

    user_id: str = attr.ib()
    device_level: str = attr.ib()
    device_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("device_level", "deviceLevel", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial100DeleteListRequest(OCIRequest):
    """
    Delete one or more speed dial 100 settings for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        speed_code: speedCode
    """

    user_id: str = attr.ib()
    speed_code: List[int] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("speed_code", "speedCode", int, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial100GetListRequest(OCIRequest):
    """
    Get the speed dial 100 settings for a user.

    The response is either a ``UserSpeedDial100GetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial100GetListRequest17sp1(OCIRequest):
    """
    Get the speed dial 100 settings for a user.

    The response is either a ``UserSpeedDial100GetListResponse17sp1()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial100GetRequest(OCIRequest):
    """
    Get speed dial 100 settings for a speed code.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        speed_code: speedCode
    """

    user_id: str = attr.ib()
    speed_code: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("speed_code", "speedCode", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial8GetListRequest(OCIRequest):
    """
    Get the speed dial 8 settings for a user.

    The response is either a ``UserSpeedDial8GetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserThirdPartyVoiceMailSupportGetRequest13mp16(OCIRequest):
    """
    Request the user level data associated with Third-Party Voice Mail Support.

    The response is either a ``UserThirdPartyVoiceMailSupportGetResponse13mp16()`` or an
    ``ErrorResponse()``. Replaced by: ``UserThirdPartyVoiceMailSupportGetRequest17()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserThirdPartyVoiceMailSupportGetRequest17(OCIRequest):
    """
    Request the user level data associated with Third-Party Voice Mail Support.

    The response is either a ``UserThirdPartyVoiceMailSupportGetResponse17()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserThirdPartyVoiceMailSupportModifyRequest(OCIRequest):
    """
    Modify the Third Party Voice Mail Support settings for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        busy_redirect_to_voice_mail: busyRedirectToVoiceMail
        no_answer_redirect_to_voice_mail: noAnswerRedirectToVoiceMail
        server_selection: serverSelection
        user_server: userServer
        mailbox_id_type: mailboxIdType
        mailbox_url: mailboxURL
        no_answer_number_of_rings: noAnswerNumberOfRings
        always_redirect_to_voice_mail: alwaysRedirectToVoiceMail
        out_of_primary_zone_redirect_to_voice_mail: outOfPrimaryZoneRedirectToVoiceMail
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    busy_redirect_to_voice_mail: bool = attr.ib(default=None)
    no_answer_redirect_to_voice_mail: bool = attr.ib(default=None)
    server_selection: str = attr.ib(default=None)
    user_server: str = attr.ib(default=None)
    mailbox_id_type: str = attr.ib(default=None)
    mailbox_url: str = attr.ib(default=None)
    no_answer_number_of_rings: int = attr.ib(default=None)
    always_redirect_to_voice_mail: bool = attr.ib(default=None)
    out_of_primary_zone_redirect_to_voice_mail: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("busy_redirect_to_voice_mail", "busyRedirectToVoiceMail", bool),
            E("no_answer_redirect_to_voice_mail", "noAnswerRedirectToVoiceMail", bool),
            E("server_selection", "serverSelection", str),
            E("user_server", "userServer", str),
            E("mailbox_id_type", "mailboxIdType", str),
            E("mailbox_url", "mailboxURL", str),
            E("no_answer_number_of_rings", "noAnswerNumberOfRings", int),
            E("always_redirect_to_voice_mail", "alwaysRedirectToVoiceMail", bool),
            E(
                "out_of_primary_zone_redirect_to_voice_mail",
                "outOfPrimaryZoneRedirectToVoiceMail",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserTimeScheduleDeleteRequest(OCIRequest):
    """
    Delete a user time schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        time_schedule_name: timeScheduleName
    """

    user_id: str = attr.ib()
    time_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserTimeScheduleGetListRequest(OCIRequest):
    """
    Get all time schedules for a user.

    This includes the user's personal schedules and user's group's schedules.

    The response is either a ``UserTimeScheduleGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserTimeScheduleGetRequest(OCIRequest):
    """
    Request to get a user time schedule.

    The response is either a ``UserTimeScheduleGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        time_schedule_name: timeScheduleName
    """

    user_id: str = attr.ib()
    time_schedule_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserTwoStageDialingModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Two Stage Dialing.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        allow_activation_with_user_addresses: allowActivationWithUserAddresses
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    allow_activation_with_user_addresses: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "allow_activation_with_user_addresses",
                "allowActivationWithUserAddresses",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVideoAddOnGetRequest14(OCIRequest):
    """
    Get the user's Video Add-On service setting.

    The response is either a ``UserVideoAddOnGetResponse14()`` or an ``ErrorResponse()``.
    Replaced by: ``UserVideoAddOnGetRequest19()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVideoAddOnGetRequest19(OCIRequest):
    """
    Get the user's Video Add-On service setting.

    The response is either a ``UserVideoAddOnGetResponse19()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserAddAliasListRequest(OCIRequest):
    """
    Add one or more voice mail aliases to a users voice message.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserDeleteAliasListRequest(OCIRequest):
    """
    Delete one or more voice mail aliases from a users voice message.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
    """

    user_id: str = attr.ib()
    phone_number: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetAdvancedVoiceManagementRequest(OCIRequest):
    """
    Get the user's voice messaging advanced voice management service setting.

    The response is either a
    ``UserVoiceMessagingUserGetAdvancedVoiceManagementResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserVoiceMessagingUserGetAdvancedVoiceManagementRequest14sp3()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetAdvancedVoiceManagementRequest14sp3(OCIRequest):
    """
    Get the user's voice messaging advanced voice management service setting.

    The response is either a
    ``UserVoiceMessagingUserGetAdvancedVoiceManagementResponse14sp3()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetAliasListRequest(OCIRequest):
    """
    Get the voice mail aliases for a users voice message.

    The response is either a ``UserVoiceMessagingUserGetAliasListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetDistributionListRequest(OCIRequest):
    """
    Get a voice mail distribution list for a users voice message.

    The response is either ``UserVoiceMessagingUserGetDistributionListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        list_id: listId
    """

    user_id: str = attr.ib()
    list_id: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("list_id", "listId", int, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetGreetingRequest13mp16(OCIRequest):
    """
    Get the user's voice messaging greeting information.

    The response is either a ``UserVoiceMessagingUserGetGreetingResponse13mp16()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserVoiceMessagingUserGetGreetingRequest16()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetGreetingRequest16(OCIRequest):
    """
    Get the user's voice messaging greeting information.

    The response is either a ``UserVoiceMessagingUserGetGreetingResponse16()`` or an
    ``ErrorResponse()``. This request is replaced by:
    ``UserVoiceMessagingUserGetGreetingRequest18()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetGreetingRequest18(OCIRequest):
    """
    Get the user's voice messaging greeting information.

    The response is either a ``UserVoiceMessagingUserGetGreetingResponse18()`` or an
    ``ErrorResponse()``. Replaced by ``UserVoiceMessagingUserGetGreetingRequest18sp1()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetGreetingRequest18sp1(OCIRequest):
    """
    Get the user's voice messaging greeting information.

    The response is either a ``UserVoiceMessagingUserGetGreetingResponse18sp1()`` or an
    ``ErrorResponse()``. Replaced by ``UserVoiceMessagingUserGetGreetingRequest20()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetGreetingRequest20(OCIRequest):
    """
    Get the user's voice messaging greeting information.

    The response is either a ``UserVoiceMessagingUserGetGreetingResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetOutgoingSMDIMWIRequest(OCIRequest):
    """
    Get the user's voice messaging outgoing SMDI message waiting indicator service
    setting.

    The response is either a ``UserVoiceMessagingUserGetOutgoingSMDIMWIResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetVoiceManagementRequest13mp8(OCIRequest):
    """
    Get the user's voice messaging voice management service settings.

    The response is either a ``UserVoiceMessagingUserGetVoiceManagementResponse13mp8()``
    or an ``ErrorResponse()``. Replaced by:
    ``UserVoiceMessagingUserGetVoiceManagementRequest17()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetVoiceManagementRequest17(OCIRequest):
    """
    Get the user's voice messaging voice management service settings.

    The response is either a ``UserVoiceMessagingUserGetVoiceManagementResponse17()`` or
    an ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetVoicePortalPasswordInfoRequest(OCIRequest):
    """
    Request the user's voice portal password information.

    The response is either a
    ``UserVoiceMessagingUserGetVoicePortalPasswordInfoResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserPortalPasscodeGetInfoRequest()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetVoicePortalRequest(OCIRequest):
    """
    Get the user's voice messaging voice portal settings.

    The response is either a ``UserVoiceMessagingUserGetVoicePortalResponse()`` or an
    ``ErrorResponse()``.

    Replaced By: ``UserVoiceMessagingUserGetVoicePortalRequest16()``

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetVoicePortalRequest16(OCIRequest):
    """
    Get the user's voice messaging voice portal settings.

    The response is either a ``UserVoiceMessagingUserGetVoicePortalResponse16()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserGetVoicePortalRequest20(OCIRequest):
    """
    Get the user's voice messaging voice portal settings.

    The response is either a ``UserVoiceMessagingUserGetVoicePortalResponse20()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyAdvancedVoiceManagementRequest(OCIRequest):
    """
    Modify the user's voice messaging advanced voice management service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        mail_server_selection: mailServerSelection
        group_mail_server_email_address: groupMailServerEmailAddress
        group_mail_server_user_id: groupMailServerUserId
        group_mail_server_password: groupMailServerPassword
        use_group_default_mail_server_full_mailbox_limit:
            useGroupDefaultMailServerFullMailboxLimit
        group_mail_server_full_mailbox_limit: groupMailServerFullMailboxLimit
        personal_mail_server_net_address: personalMailServerNetAddress
        personal_mail_server_protocol: personalMailServerProtocol
        personal_mail_server_real_delete_for_imap: personalMailServerRealDeleteForImap
        personal_mail_server_email_address: personalMailServerEmailAddress
        personal_mail_server_user_id: personalMailServerUserId
        personal_mail_server_password: personalMailServerPassword
    """

    user_id: str = attr.ib()
    mail_server_selection: str = attr.ib(default=None)
    group_mail_server_email_address: str = attr.ib(default=None)
    group_mail_server_user_id: str = attr.ib(default=None)
    group_mail_server_password: str = attr.ib(default=None)
    use_group_default_mail_server_full_mailbox_limit: bool = attr.ib(default=None)
    group_mail_server_full_mailbox_limit: int = attr.ib(default=None)
    personal_mail_server_net_address: str = attr.ib(default=None)
    personal_mail_server_protocol: str = attr.ib(default=None)
    personal_mail_server_real_delete_for_imap: bool = attr.ib(default=None)
    personal_mail_server_email_address: str = attr.ib(default=None)
    personal_mail_server_user_id: str = attr.ib(default=None)
    personal_mail_server_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("mail_server_selection", "mailServerSelection", str),
            E("group_mail_server_email_address", "groupMailServerEmailAddress", str),
            E("group_mail_server_user_id", "groupMailServerUserId", str),
            E("group_mail_server_password", "groupMailServerPassword", str),
            E(
                "use_group_default_mail_server_full_mailbox_limit",
                "useGroupDefaultMailServerFullMailboxLimit",
                bool,
            ),
            E(
                "group_mail_server_full_mailbox_limit",
                "groupMailServerFullMailboxLimit",
                int,
            ),
            E("personal_mail_server_net_address", "personalMailServerNetAddress", str),
            E("personal_mail_server_protocol", "personalMailServerProtocol", str),
            E(
                "personal_mail_server_real_delete_for_imap",
                "personalMailServerRealDeleteForImap",
                bool,
            ),
            E(
                "personal_mail_server_email_address",
                "personalMailServerEmailAddress",
                str,
            ),
            E("personal_mail_server_user_id", "personalMailServerUserId", str),
            E("personal_mail_server_password", "personalMailServerPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyVoiceManagementRequest(OCIRequest):
    """
    Modify the user's voice messaging voice management service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        processing: processing
        voice_message_delivery_email_address: voiceMessageDeliveryEmailAddress
        use_phone_message_waiting_indicator: usePhoneMessageWaitingIndicator
        send_voice_message_notify_email: sendVoiceMessageNotifyEmail
        voice_message_notify_email_address: voiceMessageNotifyEmailAddress
        send_carbon_copy_voice_message: sendCarbonCopyVoiceMessage
        voice_message_carbon_copy_email_address: voiceMessageCarbonCopyEmailAddress
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
        always_redirect_to_voice_mail: alwaysRedirectToVoiceMail
        busy_redirect_to_voice_mail: busyRedirectToVoiceMail
        no_answer_redirect_to_voice_mail: noAnswerRedirectToVoiceMail
        out_of_primary_zone_redirect_to_voice_mail: outOfPrimaryZoneRedirectToVoiceMail
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    processing: str = attr.ib(default=None)
    voice_message_delivery_email_address: str = attr.ib(default=None)
    use_phone_message_waiting_indicator: bool = attr.ib(default=None)
    send_voice_message_notify_email: bool = attr.ib(default=None)
    voice_message_notify_email_address: str = attr.ib(default=None)
    send_carbon_copy_voice_message: bool = attr.ib(default=None)
    voice_message_carbon_copy_email_address: str = attr.ib(default=None)
    transfer_on_zero_to_phone_number: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    always_redirect_to_voice_mail: bool = attr.ib(default=None)
    busy_redirect_to_voice_mail: bool = attr.ib(default=None)
    no_answer_redirect_to_voice_mail: bool = attr.ib(default=None)
    out_of_primary_zone_redirect_to_voice_mail: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("processing", "processing", str),
            E(
                "voice_message_delivery_email_address",
                "voiceMessageDeliveryEmailAddress",
                str,
            ),
            E(
                "use_phone_message_waiting_indicator",
                "usePhoneMessageWaitingIndicator",
                bool,
            ),
            E("send_voice_message_notify_email", "sendVoiceMessageNotifyEmail", bool),
            E(
                "voice_message_notify_email_address",
                "voiceMessageNotifyEmailAddress",
                str,
            ),
            E("send_carbon_copy_voice_message", "sendCarbonCopyVoiceMessage", bool),
            E(
                "voice_message_carbon_copy_email_address",
                "voiceMessageCarbonCopyEmailAddress",
                str,
            ),
            E("transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("always_redirect_to_voice_mail", "alwaysRedirectToVoiceMail", bool),
            E("busy_redirect_to_voice_mail", "busyRedirectToVoiceMail", bool),
            E("no_answer_redirect_to_voice_mail", "noAnswerRedirectToVoiceMail", bool),
            E(
                "out_of_primary_zone_redirect_to_voice_mail",
                "outOfPrimaryZoneRedirectToVoiceMail",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyVoicePortalPasswordRequest(OCIRequest):
    """
    Modify the user's Voice Portal password The response is either a ``SuccessResponse()``
    or an ``ErrorResponse()``.

    Engineering Note: This command is used internally by Call Processing.

    Replaced By: ``UserPortalPasscodeModifyRequest()``

    Attributes:
        user_id: userId
        old_password: oldPassword
        new_password: newPassword
    """

    user_id: str = attr.ib()
    old_password: str = attr.ib(default=None)
    new_password: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("old_password", "oldPassword", str),
            E("new_password", "newPassword", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoicePortalCallingGetRequest(OCIRequest):
    """
    Request the user level data associated with Voice Portal Calling.

    The response is either a ``UserVoicePortalCallingGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoicePortalCallingModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Voice Portal Calling.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserZoneCallingRestrictionsGetRequest(OCIRequest):
    """
    Gets the home zone for a user The response is either a
    ``UserZoneCallingRestrictionsGetResponse()`` or an ``ErrorResponse()``.


    Attributes:
        user_id: userId
    """

    user_id: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserZoneCallingRestrictionsModifyRequest(OCIRequest):
    """
    Modify the home zone for a user The response is either a ``SuccessResponse()`` or an
    ``ErrorResponse()``.


    Attributes:
        user_id: userId
        home_zone_name: homeZoneName
    """

    user_id: str = attr.ib()
    home_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("home_zone_name", "homeZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class VerifySessionIsValidRequest(OCIRequest):
    """
    Query the provisioning server to verify the session is authorized.

    Most applications should not need this command, because the provisioning server
    verifies the session is authorized for all commands.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.
    """

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return ()


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileModifyRequest(OCIRequest):
    """
    Modifies an existing Call Center Agent Threshold Profile in the Enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        profile_name: profileName
        new_profile_name: newProfileName
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address_list: notificationEmailAddressList
        agent_user_id_list: agentUserIdList
    """

    service_provider_id: str = attr.ib()
    profile_name: str = attr.ib()
    new_profile_name: str = attr.ib(default=None)
    profile_description: str = attr.ib(default=None)
    threshold_current_call_state_idle_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_idle_time_red: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_red: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_yellow: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_red: int = attr.ib(default=None)
    threshold_average_busy_in_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_in_time_red: int = attr.ib(default=None)
    threshold_average_busy_out_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_out_time_red: int = attr.ib(default=None)
    threshold_average_wrap_up_time_yellow: int = attr.ib(default=None)
    threshold_average_wrap_up_time_red: int = attr.ib(default=None)
    enable_notification_email: bool = attr.ib(default=None)
    notification_email_address_list: "OCI.CallCenterAgentThresholdProfileReplacementNotificationEmailList" = attr.ib(default=None)
    agent_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("new_profile_name", "newProfileName", str),
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E("enable_notification_email", "enableNotificationEmail", bool),
            E(
                "notification_email_address_list",
                "notificationEmailAddressList",
                OCI.CallCenterAgentThresholdProfileReplacementNotificationEmailList,
                is_complex=True,
            ),
            E(
                "agent_user_id_list",
                "agentUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentUnavailableCodeSettingsModifyRequest(OCIRequest):
    """
    Modify the enterprise level data associated with Call Center Agents Unavailable Code
    Settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enable_agent_unavailable_codes: enableAgentUnavailableCodes
        default_agent_unavailable_code_on_dnd: defaultAgentUnavailableCodeOnDND
        default_agent_unavailable_code_on_personal_calls:
            defaultAgentUnavailableCodeOnPersonalCalls
        default_agent_unavailable_code_on_consecutive_bounces:
            defaultAgentUnavailableCodeOnConsecutiveBounces
        default_agent_unavailable_code_on_not_reachable:
            defaultAgentUnavailableCodeOnNotReachable
        force_use_of_agent_unavailable_codes: forceUseOfAgentUnavailableCodes
        default_agent_unavailable_code: defaultAgentUnavailableCode
        code_state_list: codeStateList
    """

    service_provider_id: str = attr.ib()
    enable_agent_unavailable_codes: bool = attr.ib(default=None)
    default_agent_unavailable_code_on_dnd: str = attr.ib(default=None)
    default_agent_unavailable_code_on_personal_calls: str = attr.ib(default=None)
    default_agent_unavailable_code_on_consecutive_bounces: str = attr.ib(default=None)
    default_agent_unavailable_code_on_not_reachable: str = attr.ib(default=None)
    force_use_of_agent_unavailable_codes: bool = attr.ib(default=None)
    default_agent_unavailable_code: str = attr.ib(default=None)
    code_state_list: List[OCI.CallCenterAgentUnavailableCodeStateModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enable_agent_unavailable_codes", "enableAgentUnavailableCodes", bool),
            E(
                "default_agent_unavailable_code_on_dnd",
                "defaultAgentUnavailableCodeOnDND",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_personal_calls",
                "defaultAgentUnavailableCodeOnPersonalCalls",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_consecutive_bounces",
                "defaultAgentUnavailableCodeOnConsecutiveBounces",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_not_reachable",
                "defaultAgentUnavailableCodeOnNotReachable",
                str,
            ),
            E(
                "force_use_of_agent_unavailable_codes",
                "forceUseOfAgentUnavailableCodes",
                bool,
            ),
            E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
            E(
                "code_state_list",
                "codeStateList",
                OCI.CallCenterAgentUnavailableCodeStateModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCallDispositionCodeModifyActiveListRequest(OCIRequest):
    """
    Request to set the active status of Call Center Call Disposition Codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        call_disposition_code_activation: callDispositionCodeActivation
    """

    service_provider_id: str = attr.ib()
    call_disposition_code_activation: List[OCI.CallDispositionCodeActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "call_disposition_code_activation",
                "callDispositionCodeActivation",
                OCI.CallDispositionCodeActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCurrentAndPastAgentGetListRequest(OCIRequest):
    """
    Request to all the current and past agents in the enterprise.

    The searchCriteriaExactUserGroup does not apply to past agents.

    The response is either ``EnterpriseCallCenterCurrentAndPastAgentGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterCurrentAndPastCallCenterGetListRequest(OCIRequest):
    """
    Request to get all the current and past call centers for the enterprise.

    The searchCriteriaExactUserGroup does not apply to past call centers.

    The response is either
    ``EnterpriseCallCenterCurrentAndPastCallCenterGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        is_premium_only: isPremiumOnly
        response_size_limit: responseSizeLimit
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_call_center_name: searchCriteriaCallCenterName
    """

    service_provider_id: str = attr.ib()
    is_premium_only: bool = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_call_center_name: "OCI.SearchCriteriaCallCenterName" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("is_premium_only", "isPremiumOnly", bool),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_call_center_name",
                "searchCriteriaCallCenterName",
                OCI.SearchCriteriaCallCenterName,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingBrandingModifyRequest(OCIRequest):
    """
    Request to modify the enterprise branding configuration.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        branding_choice: brandingChoice
        branding_file: brandingFile
    """

    service_provider_id: str = attr.ib()
    branding_choice: str = attr.ib(default=None)
    branding_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("branding_choice", "brandingChoice", str),
            E("branding_file", "brandingFile", OCI.LabeledFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingReportTemplateAddRequest(OCIRequest):
    """
    Request to add an Enterprise level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        description: description
        data_template: dataTemplate
        filter_number: filterNumber
        xslt_template: xsltTemplate
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        call_completion_threshold_param: callCompletionThresholdParam
        short_duration_threshold_param: shortDurationThresholdParam
        service_level_threshold_param: serviceLevelThresholdParam
        service_level_inclusions_param: serviceLevelInclusionsParam
        service_level_objective_threshold_param: serviceLevelObjectiveThresholdParam
        abandoned_call_threshold_param: abandonedCallThresholdParam
        service_level_threshold_param_number: serviceLevelThresholdParamNumber
        abandoned_call_threshold_param_number: abandonedCallThresholdParamNumber
        filter_value: filterValue
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    data_template: str = attr.ib()
    filter_number: int = attr.ib(default=None)
    xslt_template: "OCI.LabeledFileResource" = attr.ib()
    scope: str = attr.ib()
    is_enabled: bool = attr.ib()
    is_realtime_report: bool = attr.ib(default=None)
    call_completion_threshold_param: str = attr.ib(default=None)
    short_duration_threshold_param: str = attr.ib(default=None)
    service_level_threshold_param: str = attr.ib(default=None)
    service_level_inclusions_param: str = attr.ib(default=None)
    service_level_objective_threshold_param: str = attr.ib(default=None)
    abandoned_call_threshold_param: str = attr.ib(default=None)
    service_level_threshold_param_number: int = attr.ib(default=None)
    abandoned_call_threshold_param_number: int = attr.ib(default=None)
    filter_value: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("data_template", "dataTemplate", str, is_required=True),
            E("filter_number", "filterNumber", int),
            E(
                "xslt_template",
                "xsltTemplate",
                OCI.LabeledFileResource,
                is_complex=True,
                is_required=True,
            ),
            E("scope", "scope", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("call_completion_threshold_param", "callCompletionThresholdParam", str),
            E("short_duration_threshold_param", "shortDurationThresholdParam", str),
            E("service_level_threshold_param", "serviceLevelThresholdParam", str),
            E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
            E(
                "service_level_objective_threshold_param",
                "serviceLevelObjectiveThresholdParam",
                str,
            ),
            E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
            E(
                "service_level_threshold_param_number",
                "serviceLevelThresholdParamNumber",
                int,
            ),
            E(
                "abandoned_call_threshold_param_number",
                "abandonedCallThresholdParamNumber",
                int,
            ),
            E("filter_value", "filterValue", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingReportTemplateModifyRequest(OCIRequest):
    """
    Request to modify an enterprise level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        new_name: newName
        description: description
        xslt_template: xsltTemplate
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        filter_number: filterNumber
        filter_value: filterValue
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    xslt_template: "OCI.LabeledFileResource" = attr.ib(default=None)
    scope: str = attr.ib(default=None)
    is_enabled: bool = attr.ib(default=None)
    is_realtime_report: bool = attr.ib(default=None)
    filter_number: int = attr.ib(default=None)
    filter_value: "OCI.CallCenterReportDataTemplateQueryFilterValueReplacementList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("xslt_template", "xsltTemplate", OCI.LabeledFileResource, is_complex=True),
            E("scope", "scope", str),
            E("is_enabled", "isEnabled", bool),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("filter_number", "filterNumber", int),
            E(
                "filter_value",
                "filterValue",
                OCI.CallCenterReportDataTemplateQueryFilterValueReplacementList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterModifyRoutingPolicyRequest(OCIRequest):
    """
    Modify the enterprise call center routing policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        routing_policy: routingPolicy
        routing_priority_order: routingPriorityOrder
    """

    service_provider_id: str = attr.ib()
    routing_policy: str = attr.ib(default=None)
    routing_priority_order: List[OCI.CallCenterRoutingPriorityOrder] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("routing_policy", "routingPolicy", str),
            E(
                "routing_priority_order",
                "routingPriorityOrder",
                OCI.CallCenterRoutingPriorityOrder,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCommonPhoneListAddListRequest(OCIRequest):
    """
    Add one or more entries to an enterprise's common phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        entry: entry
    """

    service_provider_id: str = attr.ib()
    entry: List[OCI.PhoneListEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "entry",
                "entry",
                OCI.PhoneListEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCommonPhoneListGetListRequest(OCIRequest):
    """
    Get an enterprise's common phone list.

    The response is either a ``EnterpriseCommonPhoneListGetListResponse()`` or an
    ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. In all cases, if a responseSizeLimit is specified and the number
    of matching results is more than this limit, then an ``ErrorResponse()`` is returned.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_enterprise_common_phone_list_name:
            searchCriteriaEnterpriseCommonPhoneListName
        search_criteria_enterprise_common_phone_list_number:
            searchCriteriaEnterpriseCommonPhoneListNumber
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_enterprise_common_phone_list_name: List[OCI.SearchCriteriaEnterpriseCommonPhoneListName] = attr.ib(default=None)
    search_criteria_enterprise_common_phone_list_number: List[OCI.SearchCriteriaEnterpriseCommonPhoneListNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_enterprise_common_phone_list_name",
                "searchCriteriaEnterpriseCommonPhoneListName",
                OCI.SearchCriteriaEnterpriseCommonPhoneListName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_enterprise_common_phone_list_number",
                "searchCriteriaEnterpriseCommonPhoneListNumber",
                OCI.SearchCriteriaEnterpriseCommonPhoneListNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseDepartmentAddRequest(OCIRequest):
    """
    Add a department to enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        enterprise_id: enterpriseId
        department_name: departmentName
        parent_department_key: parentDepartmentKey
    """

    enterprise_id: str = attr.ib()
    department_name: str = attr.ib()
    parent_department_key: "OCI.EnterpriseDepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
            E(
                "parent_department_key",
                "parentDepartmentKey",
                OCI.EnterpriseDepartmentKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseDepartmentModifyRequest(OCIRequest):
    """
    Modify a department of an enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        enterprise_id: enterpriseId
        department_name: departmentName
        new_department_name: newDepartmentName
        new_parent_department_key: newParentDepartmentKey
    """

    enterprise_id: str = attr.ib()
    department_name: str = attr.ib()
    new_department_name: str = attr.ib(default=None)
    new_parent_department_key: "OCI.EnterpriseDepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
            E("new_department_name", "newDepartmentName", str),
            E(
                "new_parent_department_key",
                "newParentDepartmentKey",
                OCI.EnterpriseDepartmentKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListRequest(OCIRequest):
    """
    Request to get the list of all available trunk groups defined in an enterprise.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a
    ``EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_trunk_group_name: searchCriteriaTrunkGroupName
        search_criteria_group_id: searchCriteriaGroupId
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_trunk_group_name: List[OCI.SearchCriteriaTrunkGroupName] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_trunk_group_name",
                "searchCriteriaTrunkGroupName",
                OCI.SearchCriteriaTrunkGroupName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGetAvailableDeviceListRequest(OCIRequest):
    """
    Request to get the list of devices can be assigned to session admission control group
    for the enterprise.

    The response is either an
    ``EnterpriseSessionAdmissionControlGetAvailableDeviceListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_device_type: searchCriteriaExactDeviceType
        search_criteria_exact_device_level: searchCriteriaExactDeviceLevel
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_device_type: "OCI.SearchCriteriaExactDeviceType" = attr.ib(default=None)
    search_criteria_exact_device_level: "OCI.SearchCriteriaExactDeviceLevel" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_device_type",
                "searchCriteriaExactDeviceType",
                OCI.SearchCriteriaExactDeviceType,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_level",
                "searchCriteriaExactDeviceLevel",
                OCI.SearchCriteriaExactDeviceLevel,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListRequest(OCIRequest):
    """
    Request the list of Virtual On-Net users in an Enterprise.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a
    ``EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_virtual_on_net_call_type_name:
            searchCriteriaExactVirtualOnNetCallTypeName
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_virtual_on_net_call_type_name: "OCI.SearchCriteriaExactVirtualOnNetCallTypeName" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_virtual_on_net_call_type_name",
                "searchCriteriaExactVirtualOnNetCallTypeName",
                OCI.SearchCriteriaExactVirtualOnNetCallTypeName,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNAddPolicyRequest(OCIRequest):
    """
    Add the enterprise level data associated with a Voice VPN location code.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        location_dialing_code: locationDialingCode
        min_extension_length: minExtensionLength
        max_extension_length: maxExtensionLength
        description: description
        route_group_id: routeGroupId
        policy_selection: policySelection
        digit_manipulation: digitManipulation
        treatment_id: treatmentId
    """

    service_provider_id: str = attr.ib()
    location_dialing_code: str = attr.ib()
    min_extension_length: int = attr.ib()
    max_extension_length: int = attr.ib()
    description: str = attr.ib(default=None)
    route_group_id: str = attr.ib(default=None)
    policy_selection: str = attr.ib()
    digit_manipulation: List[OCI.EnterpriseVoiceVPNDigitManipulation] = attr.ib(default=None)
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("location_dialing_code", "locationDialingCode", str, is_required=True),
            E("min_extension_length", "minExtensionLength", int, is_required=True),
            E("max_extension_length", "maxExtensionLength", int, is_required=True),
            E("description", "description", str),
            E("route_group_id", "routeGroupId", str),
            E("policy_selection", "policySelection", str, is_required=True),
            E(
                "digit_manipulation",
                "digitManipulation",
                OCI.EnterpriseVoiceVPNDigitManipulation,
                is_complex=True,
                is_array=True,
            ),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNGetPolicyListRequest(OCIRequest):
    """
    Request the list of Voice VPN locations.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``EnterpriseVoiceVPNGetPolicyListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_exact_policy_selection: searchCriteriaExactPolicySelection
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_exact_policy_selection: "OCI.SearchCriteriaExactPolicySelection" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_policy_selection",
                "searchCriteriaExactPolicySelection",
                OCI.SearchCriteriaExactPolicySelection,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseVoiceVPNModifyPolicyRequest(OCIRequest):
    """
    Modify the enterprise level data associated with a Voice VPN location code.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        location_dialing_code: locationDialingCode
        min_extension_length: minExtensionLength
        max_extension_length: maxExtensionLength
        description: description
        route_group_id: routeGroupId
        policy_selection: policySelection
        digit_manipulation: digitManipulation
        treatment_id: treatmentId
    """

    service_provider_id: str = attr.ib()
    location_dialing_code: str = attr.ib()
    min_extension_length: int = attr.ib(default=None)
    max_extension_length: int = attr.ib(default=None)
    description: str = attr.ib(default=None)
    route_group_id: str = attr.ib(default=None)
    policy_selection: str = attr.ib(default=None)
    digit_manipulation: List[OCI.EnterpriseVoiceVPNDigitManipulation] = attr.ib(default=None)
    treatment_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("location_dialing_code", "locationDialingCode", str, is_required=True),
            E("min_extension_length", "minExtensionLength", int),
            E("max_extension_length", "maxExtensionLength", int),
            E("description", "description", str),
            E("route_group_id", "routeGroupId", str),
            E("policy_selection", "policySelection", str),
            E(
                "digit_manipulation",
                "digitManipulation",
                OCI.EnterpriseVoiceVPNDigitManipulation,
                is_complex=True,
                is_array=True,
            ),
            E("treatment_id", "treatmentId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceAddRequest14(OCIRequest):
    """
    Request to add a group access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_provisioning_password: mobilityManagerProvisioningPassword
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        access_device_credentials: accessDeviceCredentials
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    device_type: str = attr.ib()
    protocol: str = attr.ib(default=None)
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    outbound_proxy_server_net_address: str = attr.ib(default=None)
    stun_server_net_address: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    serial_number: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    physical_location: str = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    mobility_manager_provisioning_url: str = attr.ib(default=None)
    mobility_manager_provisioning_user_name: str = attr.ib(default=None)
    mobility_manager_provisioning_password: str = attr.ib(default=None)
    mobility_manager_default_originating_service_key: int = attr.ib(default=None)
    mobility_manager_default_terminating_service_key: int = attr.ib(default=None)
    use_custom_user_name_password: bool = attr.ib(default=None)
    access_device_credentials: "OCI.DeviceManagementUserNamePassword16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_provisioning_password",
                "mobilityManagerProvisioningPassword",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E(
                "access_device_credentials",
                "accessDeviceCredentials",
                OCI.DeviceManagementUserNamePassword16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceAvailablePortGetListRequest(OCIRequest):
    """
    Request to get the list of available ports in a device.

    The response is either ``GroupAccessDeviceAvailablePortGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        access_device: accessDevice
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileModifyRequest(OCIRequest):
    """
    Request to modify a specified group access device file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupAccessDeviceFileModifyRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        file_type: fileType
        file_source: fileSource
        upload_file: uploadFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    file_type: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceFileModifyRequest14sp8(OCIRequest):
    """
    Request to modify a specified group access device file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: extendedCaptureEnabled

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        file_format: fileFormat
        file_source: fileSource
        upload_file: uploadFile
        extended_capture_enabled: extendedCaptureEnabled
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    extended_capture_enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E("extended_capture_enabled", "extendedCaptureEnabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetListRequest(OCIRequest):
    """
    Requests the list of access devices in a group.

    The response is either ``GroupAccessDeviceGetListResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_exact_device_type: searchCriteriaExactDeviceType
        search_criteria_access_device_version: searchCriteriaAccessDeviceVersion
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_exact_device_type: "OCI.SearchCriteriaExactDeviceType" = attr.ib(default=None)
    search_criteria_access_device_version: List[OCI.SearchCriteriaAccessDeviceVersion] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_device_type",
                "searchCriteriaExactDeviceType",
                OCI.SearchCriteriaExactDeviceType,
                is_complex=True,
            ),
            E(
                "search_criteria_access_device_version",
                "searchCriteriaAccessDeviceVersion",
                OCI.SearchCriteriaAccessDeviceVersion,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceModifyRequest14(OCIRequest):
    """
    Request to modify a specified group access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        configuration_mode: configurationMode
        configuration_file: configurationFile
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_provisioning_password: mobilityManagerProvisioningPassword
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        access_device_credentials: accessDeviceCredentials
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    protocol: str = attr.ib(default=None)
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    outbound_proxy_server_net_address: str = attr.ib(default=None)
    stun_server_net_address: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    serial_number: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    configuration_mode: str = attr.ib(default=None)
    configuration_file: "OCI.FileResource" = attr.ib(default=None)
    physical_location: str = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    mobility_manager_provisioning_url: str = attr.ib(default=None)
    mobility_manager_provisioning_user_name: str = attr.ib(default=None)
    mobility_manager_provisioning_password: str = attr.ib(default=None)
    mobility_manager_default_originating_service_key: int = attr.ib(default=None)
    mobility_manager_default_terminating_service_key: int = attr.ib(default=None)
    use_custom_user_name_password: bool = attr.ib(default=None)
    access_device_credentials: "OCI.DeviceManagementUserNamePassword16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E("configuration_mode", "configurationMode", str),
            E(
                "configuration_file",
                "configurationFile",
                OCI.FileResource,
                is_complex=True,
            ),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_provisioning_password",
                "mobilityManagerProvisioningPassword",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E(
                "access_device_credentials",
                "accessDeviceCredentials",
                OCI.DeviceManagementUserNamePassword16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccountAuthorizationCodesAddListRequest(OCIRequest):
    """
    Add a list of account/authorization codes to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code_entry: codeEntry
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code_entry: List[OCI.AccountAuthorizationCodeEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "code_entry",
                "codeEntry",
                OCI.AccountAuthorizationCodeEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccountAuthorizationCodesModifyRequest(OCIRequest):
    """
    Change the group's account/authorization codes setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code_type: codeType
        number_of_digits: numberOfDigits
        allow_local_and_toll_free_calls: allowLocalAndTollFreeCalls
        mandatory_usage_user_id_list: mandatoryUsageUserIdList
        optional_usage_user_id_list: optionalUsageUserIdList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code_type: str = attr.ib(default=None)
    number_of_digits: int = attr.ib(default=None)
    allow_local_and_toll_free_calls: bool = attr.ib(default=None)
    mandatory_usage_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    optional_usage_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("code_type", "codeType", str),
            E("number_of_digits", "numberOfDigits", int),
            E("allow_local_and_toll_free_calls", "allowLocalAndTollFreeCalls", bool),
            E(
                "mandatory_usage_user_id_list",
                "mandatoryUsageUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E(
                "optional_usage_user_id_list",
                "optionalUsageUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAddRequest(OCIRequest):
    """
    Add a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        default_domain: defaultDomain
        user_limit: userLimit
        group_name: groupName
        calling_line_id_name: callingLineIdName
        time_zone: timeZone
        location_dialing_code: locationDialingCode
        contact: contact
        address: address
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    default_domain: str = attr.ib()
    user_limit: int = attr.ib()
    group_name: str = attr.ib(default=None)
    calling_line_id_name: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    location_dialing_code: str = attr.ib(default=None)
    contact: "OCI.Contact" = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("default_domain", "defaultDomain", str, is_required=True),
            E("user_limit", "userLimit", int, is_required=True),
            E("group_name", "groupName", str),
            E("calling_line_id_name", "callingLineIdName", str),
            E("time_zone", "timeZone", str),
            E("location_dialing_code", "locationDialingCode", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAnnouncementFileAddRequest(OCIRequest):
    """
    Add an announcement to the group announcement repository The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        announcement_file_name: announcementFileName
        announcement_file: announcementFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    announcement_file_name: str = attr.ib()
    announcement_file: "OCI.LabeledMediaFileResource" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("announcement_file_name", "announcementFileName", str, is_required=True),
            E(
                "announcement_file",
                "announcementFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAnnouncementFileDeleteListRequest(OCIRequest):
    """
    Delete one or more announcements from the group announcement repository The response
    is either a ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        announcement_file_key: announcementFileKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    announcement_file_key: List[OCI.AnnouncementFileKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "announcement_file_key",
                "announcementFileKey",
                OCI.AnnouncementFileKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAnnouncementFileGetListRequest(OCIRequest):
    """
    Get the list of available announcement files for a Group.

    The response is either a ``GroupAnnouncementFileGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        announcement_file_type: announcementFileType
        include_announcement_table: includeAnnouncementTable
        response_size_limit: responseSizeLimit
        search_criteria_announcement_file_name: searchCriteriaAnnouncementFileName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    announcement_file_type: str = attr.ib(default=None)
    include_announcement_table: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_announcement_file_name: List[OCI.SearchCriteriaAnnouncementFileName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("announcement_file_type", "announcementFileType", str),
            E(
                "include_announcement_table",
                "includeAnnouncementTable",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_announcement_file_name",
                "searchCriteriaAnnouncementFileName",
                OCI.SearchCriteriaAnnouncementFileName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAnnouncementFileGetRequest(OCIRequest):
    """
    Request to get the announcement repository file information.

    The response is either ``GroupAnnouncementFileGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        announcement_file_key: announcementFileKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    announcement_file_key: "OCI.AnnouncementFileKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "announcement_file_key",
                "announcementFileKey",
                OCI.AnnouncementFileKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAnnouncementFileModifyRequest(OCIRequest):
    """
    Modify an existing announcement in the group repository The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        announcement_file_key: announcementFileKey
        new_announcement_file_name: newAnnouncementFileName
        announcement_file: announcementFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    announcement_file_key: "OCI.AnnouncementFileKey" = attr.ib()
    new_announcement_file_name: str = attr.ib(default=None)
    announcement_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "announcement_file_key",
                "announcementFileKey",
                OCI.AnnouncementFileKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_announcement_file_name", "newAnnouncementFileName", str),
            E(
                "announcement_file",
                "announcementFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Auto Attendant instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of BroadWorks Anywhere instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCPEConfigSetConfigFileRequest(OCIRequest):
    """
    Request to set a new group default configuration file for a device type.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        config_file: configFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    config_file: "OCI.FileResource" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E(
                "config_file",
                "configFile",
                OCI.FileResource,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementModifyInstanceRequest(OCIRequest):
    """
    Modifies a Call Capacity Management group.

    Replaces the entire list of users in the group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        max_active_calls_allowed: maxActiveCallsAllowed
        max_incoming_active_calls_allowed: maxIncomingActiveCallsAllowed
        max_outgoing_active_calls_allowed: maxOutgoingActiveCallsAllowed
        become_default_group_for_new_users: becomeDefaultGroupForNewUsers
        user_id_list: userIdList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    max_active_calls_allowed: int = attr.ib(default=None)
    max_incoming_active_calls_allowed: int = attr.ib(default=None)
    max_outgoing_active_calls_allowed: int = attr.ib(default=None)
    become_default_group_for_new_users: bool = attr.ib(default=None)
    user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("max_active_calls_allowed", "maxActiveCallsAllowed", int),
            E("max_incoming_active_calls_allowed", "maxIncomingActiveCallsAllowed", int),
            E("max_outgoing_active_calls_allowed", "maxOutgoingActiveCallsAllowed", int),
            E(
                "become_default_group_for_new_users",
                "becomeDefaultGroupForNewUsers",
                bool,
            ),
            E("user_id_list", "userIdList", OCI.ReplacementUserIdList, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddAgentListRequest(OCIRequest):
    """
    Add agent(s) to a call center.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. If the skill
    level is not present for skill based premium call centers, the users will be set to
    skill level 1.

    Attributes:
        service_user_id: serviceUserId
        agent_user_id: agentUserId
        agent_skill_list: agentSkillList
    """

    service_user_id: str = attr.ib()
    agent_user_id: List[str] = attr.ib(default=None)
    agent_skill_list: List[OCI.CallCenterSkillAgentList] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "agent_skill_list",
                "agentSkillList",
                OCI.CallCenterSkillAgentList,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddDNISRequest(OCIRequest):
    """
    Add a Call Center DNIS The response is either a ``SuccessResponse()`` or an
    ``ErrorResponse()``.


    Attributes:
        dnis_key: dnisKey
        dnis_phone_number: dnisPhoneNumber
        extension: extension
        use_custom_clid_settings: useCustomCLIDSettings
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        use_custom_dnis_announcement_settings: useCustomDnisAnnouncementSettings
        priority: priority
        allow_outgoing_acd_call: allowOutgoingACDCall
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    dnis_phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    use_custom_clid_settings: bool = attr.ib()
    calling_line_id_phone_number: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    use_custom_dnis_announcement_settings: bool = attr.ib()
    priority: str = attr.ib()
    allow_outgoing_acd_call: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E("dnis_phone_number", "dnisPhoneNumber", str),
            E("extension", "extension", str),
            E(
                "use_custom_clid_settings",
                "useCustomCLIDSettings",
                bool,
                is_required=True,
            ),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E(
                "use_custom_dnis_announcement_settings",
                "useCustomDnisAnnouncementSettings",
                bool,
                is_required=True,
            ),
            E("priority", "priority", str, is_required=True),
            E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileModifyRequest(OCIRequest):
    """
    Modifies an existing Call Center Agent Threshold Profile in the Group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        profile_name: profileName
        new_profile_name: newProfileName
        profile_description: profileDescription
        threshold_current_call_state_idle_time_yellow:
            thresholdCurrentCallStateIdleTimeYellow
        threshold_current_call_state_idle_time_red: thresholdCurrentCallStateIdleTimeRed
        threshold_current_call_state_on_call_time_yellow:
            thresholdCurrentCallStateOnCallTimeYellow
        threshold_current_call_state_on_call_time_red:
            thresholdCurrentCallStateOnCallTimeRed
        threshold_current_agent_state_unavailable_time_yellow:
            thresholdCurrentAgentStateUnavailableTimeYellow
        threshold_current_agent_state_unavailable_time_red:
            thresholdCurrentAgentStateUnavailableTimeRed
        threshold_average_busy_in_time_yellow: thresholdAverageBusyInTimeYellow
        threshold_average_busy_in_time_red: thresholdAverageBusyInTimeRed
        threshold_average_busy_out_time_yellow: thresholdAverageBusyOutTimeYellow
        threshold_average_busy_out_time_red: thresholdAverageBusyOutTimeRed
        threshold_average_wrap_up_time_yellow: thresholdAverageWrapUpTimeYellow
        threshold_average_wrap_up_time_red: thresholdAverageWrapUpTimeRed
        enable_notification_email: enableNotificationEmail
        notification_email_address_list: notificationEmailAddressList
        agent_user_id_list: agentUserIdList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    profile_name: str = attr.ib()
    new_profile_name: str = attr.ib(default=None)
    profile_description: str = attr.ib(default=None)
    threshold_current_call_state_idle_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_idle_time_red: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_yellow: int = attr.ib(default=None)
    threshold_current_call_state_on_call_time_red: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_yellow: int = attr.ib(default=None)
    threshold_current_agent_state_unavailable_time_red: int = attr.ib(default=None)
    threshold_average_busy_in_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_in_time_red: int = attr.ib(default=None)
    threshold_average_busy_out_time_yellow: int = attr.ib(default=None)
    threshold_average_busy_out_time_red: int = attr.ib(default=None)
    threshold_average_wrap_up_time_yellow: int = attr.ib(default=None)
    threshold_average_wrap_up_time_red: int = attr.ib(default=None)
    enable_notification_email: bool = attr.ib(default=None)
    notification_email_address_list: "OCI.CallCenterAgentThresholdProfileReplacementNotificationEmailList" = attr.ib(default=None)
    agent_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("profile_name", "profileName", str, is_required=True),
            E("new_profile_name", "newProfileName", str),
            E("profile_description", "profileDescription", str),
            E(
                "threshold_current_call_state_idle_time_yellow",
                "thresholdCurrentCallStateIdleTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_idle_time_red",
                "thresholdCurrentCallStateIdleTimeRed",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_yellow",
                "thresholdCurrentCallStateOnCallTimeYellow",
                int,
            ),
            E(
                "threshold_current_call_state_on_call_time_red",
                "thresholdCurrentCallStateOnCallTimeRed",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_yellow",
                "thresholdCurrentAgentStateUnavailableTimeYellow",
                int,
            ),
            E(
                "threshold_current_agent_state_unavailable_time_red",
                "thresholdCurrentAgentStateUnavailableTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_in_time_yellow",
                "thresholdAverageBusyInTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_in_time_red",
                "thresholdAverageBusyInTimeRed",
                int,
            ),
            E(
                "threshold_average_busy_out_time_yellow",
                "thresholdAverageBusyOutTimeYellow",
                int,
            ),
            E(
                "threshold_average_busy_out_time_red",
                "thresholdAverageBusyOutTimeRed",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_yellow",
                "thresholdAverageWrapUpTimeYellow",
                int,
            ),
            E(
                "threshold_average_wrap_up_time_red",
                "thresholdAverageWrapUpTimeRed",
                int,
            ),
            E("enable_notification_email", "enableNotificationEmail", bool),
            E(
                "notification_email_address_list",
                "notificationEmailAddressList",
                OCI.CallCenterAgentThresholdProfileReplacementNotificationEmailList,
                is_complex=True,
            ),
            E(
                "agent_user_id_list",
                "agentUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentUnavailableCodeSettingsModifyRequest(OCIRequest):
    """
    Modify the group level data associated with Call Center Agents Unavailable Code
    Settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enable_agent_unavailable_codes: enableAgentUnavailableCodes
        default_agent_unavailable_code_on_dnd: defaultAgentUnavailableCodeOnDND
        default_agent_unavailable_code_on_personal_calls:
            defaultAgentUnavailableCodeOnPersonalCalls
        default_agent_unavailable_code_on_consecutive_bounces:
            defaultAgentUnavailableCodeOnConsecutiveBounces
        default_agent_unavailable_code_on_not_reachable:
            defaultAgentUnavailableCodeOnNotReachable
        force_use_of_agent_unavailable_codes: forceUseOfAgentUnavailableCodes
        default_agent_unavailable_code: defaultAgentUnavailableCode
        code_state_list: codeStateList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enable_agent_unavailable_codes: bool = attr.ib(default=None)
    default_agent_unavailable_code_on_dnd: str = attr.ib(default=None)
    default_agent_unavailable_code_on_personal_calls: str = attr.ib(default=None)
    default_agent_unavailable_code_on_consecutive_bounces: str = attr.ib(default=None)
    default_agent_unavailable_code_on_not_reachable: str = attr.ib(default=None)
    force_use_of_agent_unavailable_codes: bool = attr.ib(default=None)
    default_agent_unavailable_code: str = attr.ib(default=None)
    code_state_list: List[OCI.CallCenterAgentUnavailableCodeStateModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enable_agent_unavailable_codes", "enableAgentUnavailableCodes", bool),
            E(
                "default_agent_unavailable_code_on_dnd",
                "defaultAgentUnavailableCodeOnDND",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_personal_calls",
                "defaultAgentUnavailableCodeOnPersonalCalls",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_consecutive_bounces",
                "defaultAgentUnavailableCodeOnConsecutiveBounces",
                str,
            ),
            E(
                "default_agent_unavailable_code_on_not_reachable",
                "defaultAgentUnavailableCodeOnNotReachable",
                str,
            ),
            E(
                "force_use_of_agent_unavailable_codes",
                "forceUseOfAgentUnavailableCodes",
                bool,
            ),
            E("default_agent_unavailable_code", "defaultAgentUnavailableCode", str),
            E(
                "code_state_list",
                "codeStateList",
                OCI.CallCenterAgentUnavailableCodeStateModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCallDispositionCodeModifyActiveListRequest(OCIRequest):
    """
    Request to set the active status of Call Center Call Disposition Codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        call_disposition_code_activation: callDispositionCodeActivation
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    call_disposition_code_activation: List[OCI.CallDispositionCodeActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "call_disposition_code_activation",
                "callDispositionCodeActivation",
                OCI.CallDispositionCodeActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCurrentAndPastAgentGetListRequest(OCIRequest):
    """
    Request to get all the current and past agents for the group.

    The response is either ``GroupCallCenterCurrentAndPastAgentGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterCurrentAndPastCallCenterGetListRequest(OCIRequest):
    """
    Request to get all the current and past call centers for the group.

    The response is either ``GroupCallCenterCurrentAndPastCallCenterGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        is_premium_only: isPremiumOnly
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_call_center_name: searchCriteriaCallCenterName
    """

    service_provider_id: str = attr.ib()
    is_premium_only: bool = attr.ib(default=None)
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_name: "OCI.SearchCriteriaCallCenterName" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("is_premium_only", "isPremiumOnly", bool),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_name",
                "searchCriteriaCallCenterName",
                OCI.SearchCriteriaCallCenterName,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterDeleteDNISRequest(OCIRequest):
    """
    Delete a call center's DNIS.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingBrandingModifyRequest(OCIRequest):
    """
    Request to modify the group branding configuration.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        branding_choice: brandingChoice
        branding_file: brandingFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    branding_choice: str = attr.ib(default=None)
    branding_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("branding_choice", "brandingChoice", str),
            E("branding_file", "brandingFile", OCI.LabeledFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingReportTemplateAddRequest(OCIRequest):
    """
    Request to add a group level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        description: description
        data_template: dataTemplate
        filter_number: filterNumber
        xslt_template: xsltTemplate
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        call_completion_threshold_param: callCompletionThresholdParam
        short_duration_threshold_param: shortDurationThresholdParam
        service_level_threshold_param: serviceLevelThresholdParam
        service_level_inclusions_param: serviceLevelInclusionsParam
        service_level_objective_threshold_param: serviceLevelObjectiveThresholdParam
        abandoned_call_threshold_param: abandonedCallThresholdParam
        service_level_threshold_param_number: serviceLevelThresholdParamNumber
        abandoned_call_threshold_param_number: abandonedCallThresholdParamNumber
        filter_value: filterValue
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    data_template: str = attr.ib()
    filter_number: int = attr.ib(default=None)
    xslt_template: "OCI.LabeledFileResource" = attr.ib()
    scope: str = attr.ib()
    is_enabled: bool = attr.ib()
    is_realtime_report: bool = attr.ib(default=None)
    call_completion_threshold_param: str = attr.ib(default=None)
    short_duration_threshold_param: str = attr.ib(default=None)
    service_level_threshold_param: str = attr.ib(default=None)
    service_level_inclusions_param: str = attr.ib(default=None)
    service_level_objective_threshold_param: str = attr.ib(default=None)
    abandoned_call_threshold_param: str = attr.ib(default=None)
    service_level_threshold_param_number: int = attr.ib(default=None)
    abandoned_call_threshold_param_number: int = attr.ib(default=None)
    filter_value: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("data_template", "dataTemplate", str, is_required=True),
            E("filter_number", "filterNumber", int),
            E(
                "xslt_template",
                "xsltTemplate",
                OCI.LabeledFileResource,
                is_complex=True,
                is_required=True,
            ),
            E("scope", "scope", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("call_completion_threshold_param", "callCompletionThresholdParam", str),
            E("short_duration_threshold_param", "shortDurationThresholdParam", str),
            E("service_level_threshold_param", "serviceLevelThresholdParam", str),
            E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
            E(
                "service_level_objective_threshold_param",
                "serviceLevelObjectiveThresholdParam",
                str,
            ),
            E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
            E(
                "service_level_threshold_param_number",
                "serviceLevelThresholdParamNumber",
                int,
            ),
            E(
                "abandoned_call_threshold_param_number",
                "abandonedCallThresholdParamNumber",
                int,
            ),
            E("filter_value", "filterValue", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingReportTemplateModifyRequest(OCIRequest):
    """
    Request to modify a group level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        description: description
        xslt_template: xsltTemplate
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        filter_number: filterNumber
        filter_value: filterValue
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    xslt_template: "OCI.LabeledFileResource" = attr.ib(default=None)
    scope: str = attr.ib(default=None)
    is_enabled: bool = attr.ib(default=None)
    is_realtime_report: bool = attr.ib(default=None)
    filter_number: int = attr.ib(default=None)
    filter_value: "OCI.CallCenterReportDataTemplateQueryFilterValueReplacementList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("xslt_template", "xsltTemplate", OCI.LabeledFileResource, is_complex=True),
            E("scope", "scope", str),
            E("is_enabled", "isEnabled", bool),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("filter_number", "filterNumber", int),
            E(
                "filter_value",
                "filterValue",
                OCI.CallCenterReportDataTemplateQueryFilterValueReplacementList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDNISAgentListRequest(OCIRequest):
    """
    Get a list of agent who selected the DNIS as the outgoing call.

    The response is either ``GroupCallCenterGetDNISAgentListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDNISAnnouncementRequest(OCIRequest):
    """
    Get a call center's DNIS Announcements The response is either a
    ``GroupCallCenterGetDNISAnnouncementRequest()`` or an ``ErrorResponse()``.

    Replaced by ``GroupCallCenterGetDNISAnnouncementRequest17sp4()``

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDNISAnnouncementRequest17sp4(OCIRequest):
    """
    Get a call center's DNIS Announcements The response is either a
    ``GroupCallCenterGetDNISAnnouncementRequest17sp4()`` or an ``ErrorResponse()``.

    Replaced by: ``GroupCallCenterGetDNISAnnouncementRequest19()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDNISAnnouncementRequest19(OCIRequest):
    """
    Get a call center's DNIS Announcements The response is either a
    ``GroupCallCenterGetDNISAnnouncementRequest19()`` or an ``ErrorResponse()``.


    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDNISAnnouncementRequest20(OCIRequest):
    """
    Get a call center's DNIS Announcements The response is either a
    ``GroupCallCenterGetDNISAnnouncementRequest20()`` or an ``ErrorResponse()``.


    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetDNISRequest(OCIRequest):
    """
    Get a call center's DNIS.

    The response is either a ``GroupCallCenterGetDNISRequest()`` or an
    ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetInstanceStatisticsRequest14sp9(OCIRequest):
    """
    Get Call Center queue and agent statistics.

    The response is either ``GroupCallCenterGetInstanceStatisticsResponse14sp9()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        statistics_range: statisticsRange
    """

    service_user_id: str = attr.ib()
    statistics_range: "OCI.CallCenterStatisticsRange" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "statistics_range",
                "statisticsRange",
                OCI.CallCenterStatisticsRange,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Call Center instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyAnnouncementRequest(OCIRequest):
    """
    Modify a call center's announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        entrance_message_selection: entranceMessageSelection
        entrance_message_audio_file: entranceMessageAudioFile
        entrance_message_video_file: entranceMessageVideoFile
        periodic_comfort_message_selection: periodicComfortMessageSelection
        periodic_comfort_message_audio_file: periodicComfortMessageAudioFile
        periodic_comfort_message_video_file: periodicComfortMessageVideoFile
        on_hold_message_selection: onHoldMessageSelection
        on_hold_message_audio_file: onHoldMessageAudioFile
        on_hold_message_video_file: onHoldMessageVideoFile
    """

    service_user_id: str = attr.ib()
    entrance_message_selection: str = attr.ib(default=None)
    entrance_message_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    entrance_message_video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    periodic_comfort_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    periodic_comfort_message_video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    on_hold_message_selection: str = attr.ib(default=None)
    on_hold_message_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    on_hold_message_video_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("entrance_message_selection", "entranceMessageSelection", str),
            E(
                "entrance_message_audio_file",
                "entranceMessageAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file",
                "entranceMessageVideoFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_selection",
                "periodicComfortMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_audio_file",
                "periodicComfortMessageAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file",
                "periodicComfortMessageVideoFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E("on_hold_message_selection", "onHoldMessageSelection", str),
            E(
                "on_hold_message_audio_file",
                "onHoldMessageAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "on_hold_message_video_file",
                "onHoldMessageVideoFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyAnnouncementRequest14sp6(OCIRequest):
    """
    Modify a call center's announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterModifyAnnouncementRequest16()``

    Attributes:
        service_user_id: serviceUserId
        entrance_message_selection: entranceMessageSelection
        entrance_message_audio_file: entranceMessageAudioFile
        entrance_message_video_file: entranceMessageVideoFile
        periodic_comfort_message_selection: periodicComfortMessageSelection
        periodic_comfort_message_audio_file: periodicComfortMessageAudioFile
        periodic_comfort_message_video_file: periodicComfortMessageVideoFile
        on_hold_source: onHoldSource
        on_hold_use_alternate_source_for_internal_calls:
            onHoldUseAlternateSourceForInternalCalls
        on_hold_internal_source: onHoldInternalSource
    """

    service_user_id: str = attr.ib()
    entrance_message_selection: str = attr.ib(default=None)
    entrance_message_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    entrance_message_video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    periodic_comfort_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    periodic_comfort_message_video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    on_hold_source: "OCI.CallCenterMusicOnHoldSourceModify" = attr.ib(default=None)
    on_hold_use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    on_hold_internal_source: "OCI.CallCenterMusicOnHoldSourceModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("entrance_message_selection", "entranceMessageSelection", str),
            E(
                "entrance_message_audio_file",
                "entranceMessageAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file",
                "entranceMessageVideoFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_selection",
                "periodicComfortMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_audio_file",
                "periodicComfortMessageAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file",
                "periodicComfortMessageVideoFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "on_hold_source",
                "onHoldSource",
                OCI.CallCenterMusicOnHoldSourceModify,
                is_complex=True,
            ),
            E(
                "on_hold_use_alternate_source_for_internal_calls",
                "onHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "on_hold_internal_source",
                "onHoldInternalSource",
                OCI.CallCenterMusicOnHoldSourceModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyDNISRequest(OCIRequest):
    """
    Modify a call center's DNIS settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
        new_dnis_name: newDNISName
        dnis_phone_number: dnisPhoneNumber
        extension: extension
        use_custom_clid_settings: useCustomCLIDSettings
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        use_custom_dnis_announcement_settings: useCustomDnisAnnouncementSettings
        priority: priority
        allow_outgoing_acd_call: allowOutgoingACDCall
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    new_dnis_name: str = attr.ib(default=None)
    dnis_phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    use_custom_clid_settings: bool = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    use_custom_dnis_announcement_settings: bool = attr.ib(default=None)
    priority: str = attr.ib(default=None)
    allow_outgoing_acd_call: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E("new_dnis_name", "newDNISName", str),
            E("dnis_phone_number", "dnisPhoneNumber", str),
            E("extension", "extension", str),
            E("use_custom_clid_settings", "useCustomCLIDSettings", bool),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E(
                "use_custom_dnis_announcement_settings",
                "useCustomDnisAnnouncementSettings",
                bool,
            ),
            E("priority", "priority", str),
            E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceWeightedCallDistributionRequest(OCIRequest):
    """
    Request to modify the weighted call distribution of a Call Center instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        agent_weight: agentWeight
    """

    service_user_id: str = attr.ib()
    agent_weight: List[OCI.HuntAgentWeight] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "agent_weight",
                "agentWeight",
                OCI.HuntAgentWeight,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyRoutingPolicyRequest(OCIRequest):
    """
    Modify the group call center routing policy.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        routing_policy: routingPolicy
        routing_priority_order: routingPriorityOrder
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    routing_policy: str = attr.ib(default=None)
    routing_priority_order: List[OCI.CallCenterRoutingPriorityOrder] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("routing_policy", "routingPolicy", str),
            E(
                "routing_priority_order",
                "routingPriorityOrder",
                OCI.CallCenterRoutingPriorityOrder,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifySupervisorListRequest(OCIRequest):
    """
    Replaces a list of users as supervisors for a call center.

    Also allows the modification of the reporting server URL address.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Element
    "reportingServerURL"" will always be ignored.

    Replaced By: ``GroupCallCenterSupervisorReportingModifyRequest()``

    Attributes:
        service_user_id: serviceUserId
        reporting_server_url: reportingServerURL
        supervisor_user_id_list: supervisorUserIdList
    """

    service_user_id: str = attr.ib()
    reporting_server_url: str = attr.ib(default=None)
    supervisor_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("reporting_server_url", "reportingServerURL", str),
            E(
                "supervisor_user_id_list",
                "supervisorUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifySupervisorListRequest16(OCIRequest):
    """
    Request to modify the supervisor list for a call center.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        supervisor_user_id_list: supervisorUserIdList
    """

    service_user_id: str = attr.ib()
    supervisor_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "supervisor_user_id_list",
                "supervisorUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueCallDispositionCodeSettingsModifyRequest(OCIRequest):
    """
    Modify the enterprise level data associated with Call Center Agents Unavailable Code
    Settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        enable_call_disposition_codes: enableCallDispositionCodes
        include_organization_codes: includeOrganizationCodes
        force_use_of_call_disposition_codes: forceUseOfCallDispositionCodes
        default_call_disposition_code: defaultCallDispositionCode
        call_disposition_code_activation: callDispositionCodeActivation
    """

    service_user_id: str = attr.ib()
    enable_call_disposition_codes: bool = attr.ib(default=None)
    include_organization_codes: bool = attr.ib(default=None)
    force_use_of_call_disposition_codes: bool = attr.ib(default=None)
    default_call_disposition_code: "OCI.CallDispositionCodeWithLevel" = attr.ib(default=None)
    call_disposition_code_activation: List[OCI.CallDispositionCodeActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("enable_call_disposition_codes", "enableCallDispositionCodes", bool),
            E("include_organization_codes", "includeOrganizationCodes", bool),
            E(
                "force_use_of_call_disposition_codes",
                "forceUseOfCallDispositionCodes",
                bool,
            ),
            E(
                "default_call_disposition_code",
                "defaultCallDispositionCode",
                OCI.CallDispositionCodeWithLevel,
                is_complex=True,
            ),
            E(
                "call_disposition_code_activation",
                "callDispositionCodeActivation",
                OCI.CallDispositionCodeActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterQueueThresholdsModifyRequest(OCIRequest):
    """
    Modify a call center's queue Thresholds settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        threshold_current_calls_in_queue_yellow: thresholdCurrentCallsInQueueYellow
        threshold_current_calls_in_queue_red: thresholdCurrentCallsInQueueRed
        threshold_current_longest_waiting_call_yellow:
            thresholdCurrentLongestWaitingCallYellow
        threshold_current_longest_waiting_call_red: thresholdCurrentLongestWaitingCallRed
        threshold_average_estimated_wait_time_yellow:
            thresholdAverageEstimatedWaitTimeYellow
        threshold_average_estimated_wait_time_red: thresholdAverageEstimatedWaitTimeRed
        threshold_average_handling_time_yellow: thresholdAverageHandlingTimeYellow
        threshold_average_handling_time_red: thresholdAverageHandlingTimeRed
        threshold_average_speed_of_answer_yellow: thresholdAverageSpeedOfAnswerYellow
        threshold_average_speed_of_answer_red: thresholdAverageSpeedOfAnswerRed
        enable_notification_email: enableNotificationEmail
        notification_email_address_list: notificationEmailAddressList
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    threshold_current_calls_in_queue_yellow: int = attr.ib(default=None)
    threshold_current_calls_in_queue_red: int = attr.ib(default=None)
    threshold_current_longest_waiting_call_yellow: int = attr.ib(default=None)
    threshold_current_longest_waiting_call_red: int = attr.ib(default=None)
    threshold_average_estimated_wait_time_yellow: int = attr.ib(default=None)
    threshold_average_estimated_wait_time_red: int = attr.ib(default=None)
    threshold_average_handling_time_yellow: int = attr.ib(default=None)
    threshold_average_handling_time_red: int = attr.ib(default=None)
    threshold_average_speed_of_answer_yellow: int = attr.ib(default=None)
    threshold_average_speed_of_answer_red: int = attr.ib(default=None)
    enable_notification_email: bool = attr.ib(default=None)
    notification_email_address_list: "OCI.CallCenterQueueThresholdReplacementNotificationEmailList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "threshold_current_calls_in_queue_yellow",
                "thresholdCurrentCallsInQueueYellow",
                int,
            ),
            E(
                "threshold_current_calls_in_queue_red",
                "thresholdCurrentCallsInQueueRed",
                int,
            ),
            E(
                "threshold_current_longest_waiting_call_yellow",
                "thresholdCurrentLongestWaitingCallYellow",
                int,
            ),
            E(
                "threshold_current_longest_waiting_call_red",
                "thresholdCurrentLongestWaitingCallRed",
                int,
            ),
            E(
                "threshold_average_estimated_wait_time_yellow",
                "thresholdAverageEstimatedWaitTimeYellow",
                int,
            ),
            E(
                "threshold_average_estimated_wait_time_red",
                "thresholdAverageEstimatedWaitTimeRed",
                int,
            ),
            E(
                "threshold_average_handling_time_yellow",
                "thresholdAverageHandlingTimeYellow",
                int,
            ),
            E(
                "threshold_average_handling_time_red",
                "thresholdAverageHandlingTimeRed",
                int,
            ),
            E(
                "threshold_average_speed_of_answer_yellow",
                "thresholdAverageSpeedOfAnswerYellow",
                int,
            ),
            E(
                "threshold_average_speed_of_answer_red",
                "thresholdAverageSpeedOfAnswerRed",
                int,
            ),
            E("enable_notification_email", "enableNotificationEmail", bool),
            E(
                "notification_email_address_list",
                "notificationEmailAddressList",
                OCI.CallCenterQueueThresholdReplacementNotificationEmailList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterSupervisorReportingModifyRequest(OCIRequest):
    """
    Replaces a list of users as supervisors for a call center.

    Also allows the modification of the reporting server URL address.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterModifySupervisorListRequest16()``

    Attributes:
        service_user_id: serviceUserId
        reporting_server_name: reportingServerName
        supervisor_user_id_list: supervisorUserIdList
    """

    service_user_id: str = attr.ib()
    reporting_server_name: str = attr.ib(default=None)
    supervisor_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "supervisor_user_id_list",
                "supervisorUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkModifyInstanceRequest(OCIRequest):
    """
    Modifies a Call Park group.

    Replaces the entire list of users in the group.  The users are in the list are in the
    order they will try to be parked on.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: recallAlternateUserId recallTo

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        user_id_list: userIdList
        recall_alternate_user_id: recallAlternateUserId
        recall_to: recallTo
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    recall_alternate_user_id: str = attr.ib(default=None)
    recall_to: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("user_id_list", "userIdList", OCI.ReplacementUserIdList, is_complex=True),
            E("recall_alternate_user_id", "recallAlternateUserId", str),
            E("recall_to", "recallTo", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallPickupModifyInstanceRequest(OCIRequest):
    """
    Modifies a Call Pickup group.

    Replaces the entire list of users in the group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        user_id_list: userIdList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("user_id_list", "userIdList", OCI.ReplacementUserIdList, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommonPhoneListAddListRequest(OCIRequest):
    """
    Add one or more entries to a group's common phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        entry: entry
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    entry: List[OCI.PhoneListEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "entry",
                "entry",
                OCI.PhoneListEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommonPhoneListGetListRequest(OCIRequest):
    """
    Get a group's common phone list.

    The response is either a ``GroupCommonPhoneListGetListResponse()`` or an
    ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. In all cases, if a responseSizeLimit is specified and the number
    of matching results is more than this limit, then an ``ErrorResponse()`` is returned.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_group_common_phone_list_name:
            searchCriteriaGroupCommonPhoneListName
        search_criteria_group_common_phone_list_number:
            searchCriteriaGroupCommonPhoneListNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_group_common_phone_list_name: List[OCI.SearchCriteriaGroupCommonPhoneListName] = attr.ib(default=None)
    search_criteria_group_common_phone_list_number: List[OCI.SearchCriteriaGroupCommonPhoneListNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_group_common_phone_list_name",
                "searchCriteriaGroupCommonPhoneListName",
                OCI.SearchCriteriaGroupCommonPhoneListName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_common_phone_list_number",
                "searchCriteriaGroupCommonPhoneListNumber",
                OCI.SearchCriteriaGroupCommonPhoneListNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommunicationBarringAuthorizationCodeAddListRequest(OCIRequest):
    """
    Add a list of Communication Barring Authorization codes to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    code: List[OCI.CommunicationBarringAuthorizationCodeEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "code",
                "code",
                OCI.CommunicationBarringAuthorizationCodeEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCommunicationBarringProfileModifyListRequest(OCIRequest):
    """
    Assign a replacement list of Communication Barring Profiles to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. This command
    only applies to groups in an Enterprise.  This command will fail for groups in a
    Service Provider.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        profile_name: profileName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    profile_name: "OCI.CommunicationBarringProfileReplacementList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "profile_name",
                "profileName",
                OCI.CommunicationBarringProfileReplacementList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryAddRequest17(OCIRequest):
    """
    Adds a Custom Contact Directory to a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        entry: entry
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    entry: List[OCI.CustomContactDirectoryEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "entry",
                "entry",
                OCI.CustomContactDirectoryEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryModifyRequest(OCIRequest):
    """
    Adds a Custom Contact Directory to a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replace by:
    ``GroupCustomContactDirectoryModifyRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        user_id_list: userIdList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("user_id_list", "userIdList", OCI.ReplacementUserIdList, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentAddRequest(OCIRequest):
    """
    Add a department to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callingLineIdName
    caliingLineIdPhoneNumber

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_name: departmentName
        parent_department_key: parentDepartmentKey
        calling_line_id_name: callingLineIdName
        calling_line_id_phone_number: callingLineIdPhoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_name: str = attr.ib()
    parent_department_key: "OCI.DepartmentKey" = attr.ib(default=None)
    calling_line_id_name: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
            E(
                "parent_department_key",
                "parentDepartmentKey",
                OCI.DepartmentKey,
                is_complex=True,
            ),
            E("calling_line_id_name", "callingLineIdName", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentAdminAddRequest(OCIRequest):
    """
    Add a department administrator to a group department.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        department_key: departmentKey
        user_id: userId
        first_name: firstName
        last_name: lastName
        password: password
        language: language
    """

    department_key: "OCI.GroupDepartmentKey" = attr.ib()
    user_id: str = attr.ib()
    first_name: str = attr.ib(default=None)
    last_name: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    language: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_key",
                "departmentKey",
                OCI.GroupDepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E("user_id", "userId", str, is_required=True),
            E("first_name", "firstName", str),
            E("last_name", "lastName", str),
            E("password", "password", str),
            E("language", "language", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentAdminGetListRequest(OCIRequest):
    """
    Get a list of department administrators for the department.

    The response is either a ``GroupDepartmentAdminGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        department_key: departmentKey
    """

    department_key: "OCI.GroupDepartmentKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "department_key",
                "departmentKey",
                OCI.GroupDepartmentKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDepartmentModifyRequest(OCIRequest):
    """
    Modify a department of a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callingLineIdName
    caliingLineIdPhoneNumber

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_name: departmentName
        new_department_name: newDepartmentName
        new_parent_department_key: newParentDepartmentKey
        calling_line_id_name: callingLineIdName
        calling_line_id_phone_number: callingLineIdPhoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_name: str = attr.ib()
    new_department_name: str = attr.ib(default=None)
    new_parent_department_key: "OCI.DepartmentKey" = attr.ib(default=None)
    calling_line_id_name: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_name", "departmentName", str, is_required=True),
            E("new_department_name", "newDepartmentName", str),
            E(
                "new_parent_department_key",
                "newParentDepartmentKey",
                OCI.DepartmentKey,
                is_complex=True,
            ),
            E("calling_line_id_name", "callingLineIdName", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceManagementEventGetListRequest(OCIRequest):
    """
    Request device management's events for a specific queue.

    It is possible to restrict the number of rows returned using responseSizeLimit.  If
    eventQueueType is not specified, the events from all the event queues are returned.

    The response is either a ``GroupDeviceManagementEventGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        event_queue_type: eventQueueType
        response_size_limit: responseSizeLimit
        search_criteria_exact_device_management_event_status_in_progress_or_pending:
            searchCriteriaExactDeviceManagementEventStatusInProgressOrPending
        search_criteria_exact_device_management_event_status_completed:
            searchCriteriaExactDeviceManagementEventStatusCompleted
        search_criteria_exact_device_management_event_action:
            searchCriteriaExactDeviceManagementEventAction
        search_criteria_exact_device_management_event_level:
            searchCriteriaExactDeviceManagementEventLevel
        search_criteria_exact_device_management_event_type:
            searchCriteriaExactDeviceManagementEventType
        search_criteria_device_management_event_additional_info:
            searchCriteriaDeviceManagementEventAdditionalInfo
        search_criteria_device_management_event_login_id:
            searchCriteriaDeviceManagementEventLoginId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    event_queue_type: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_exact_device_management_event_status_in_progress_or_pending: "OCI.SearchCriteriaExactDeviceManagementEventStatusInProgressOrPending" = attr.ib(default=None)
    search_criteria_exact_device_management_event_status_completed: "OCI.SearchCriteriaExactDeviceManagementEventStatusCompleted" = attr.ib(default=None)
    search_criteria_exact_device_management_event_action: "OCI.SearchCriteriaExactDeviceManagementEventAction" = attr.ib(default=None)
    search_criteria_exact_device_management_event_level: "OCI.SearchCriteriaExactDeviceManagementEventLevel" = attr.ib(default=None)
    search_criteria_exact_device_management_event_type: "OCI.SearchCriteriaExactDeviceManagementEventType" = attr.ib(default=None)
    search_criteria_device_management_event_additional_info: List[OCI.SearchCriteriaDeviceManagementEventAdditionalInfo] = attr.ib(default=None)
    search_criteria_device_management_event_login_id: List[OCI.SearchCriteriaDeviceManagementEventLoginId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("event_queue_type", "eventQueueType", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_exact_device_management_event_status_in_progress_or_pending",
                "searchCriteriaExactDeviceManagementEventStatusInProgressOrPending",
                OCI.SearchCriteriaExactDeviceManagementEventStatusInProgressOrPending,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_status_completed",
                "searchCriteriaExactDeviceManagementEventStatusCompleted",
                OCI.SearchCriteriaExactDeviceManagementEventStatusCompleted,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_action",
                "searchCriteriaExactDeviceManagementEventAction",
                OCI.SearchCriteriaExactDeviceManagementEventAction,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_level",
                "searchCriteriaExactDeviceManagementEventLevel",
                OCI.SearchCriteriaExactDeviceManagementEventLevel,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_type",
                "searchCriteriaExactDeviceManagementEventType",
                OCI.SearchCriteriaExactDeviceManagementEventType,
                is_complex=True,
            ),
            E(
                "search_criteria_device_management_event_additional_info",
                "searchCriteriaDeviceManagementEventAdditionalInfo",
                OCI.SearchCriteriaDeviceManagementEventAdditionalInfo,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_management_event_login_id",
                "searchCriteriaDeviceManagementEventLoginId",
                OCI.SearchCriteriaDeviceManagementEventLoginId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileModifyRequest(OCIRequest):
    """
    Request to modify a specified device type file for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupDeviceTypeFileModifyRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        file_type: fileType
        file_source: fileSource
        upload_file: uploadFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    file_type: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDeviceTypeFileModifyRequest14sp8(OCIRequest):
    """
    Request to modify a specified device type file for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_type: deviceType
        file_format: fileFormat
        file_source: fileSource
        upload_file: uploadFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_type: str = attr.ib()
    file_format: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialableCallerIDCriteriaModifyRequest(OCIRequest):
    """
    Modify a Dialable Caller ID Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    prefix_digits: str = attr.ib(default=None)
    match_call_type: "OCI.ReplacementCommunicationBarringCallTypeList" = attr.ib(default=None)
    match_alternate_call_indicator: "OCI.ReplacementCommunicationBarringAlternateCallIndicatorList" = attr.ib(default=None)
    match_local_category: bool = attr.ib(default=None)
    match_national_category: bool = attr.ib(default=None)
    match_interlata_category: bool = attr.ib(default=None)
    match_intralata_category: bool = attr.ib(default=None)
    match_international_category: bool = attr.ib(default=None)
    match_private_category: bool = attr.ib(default=None)
    match_emergency_category: bool = attr.ib(default=None)
    match_other_category: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E(
                "match_call_type",
                "matchCallType",
                OCI.ReplacementCommunicationBarringCallTypeList,
                is_complex=True,
            ),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                OCI.ReplacementCommunicationBarringAlternateCallIndicatorList,
                is_complex=True,
            ),
            E("match_local_category", "matchLocalCategory", bool),
            E("match_national_category", "matchNationalCategory", bool),
            E("match_interlata_category", "matchInterlataCategory", bool),
            E("match_intralata_category", "matchIntralataCategory", bool),
            E("match_international_category", "matchInternationalCategory", bool),
            E("match_private_category", "matchPrivateCategory", bool),
            E("match_emergency_category", "matchEmergencyCategory", bool),
            E("match_other_category", "matchOtherCategory", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDialableCallerIDModifyRequest(OCIRequest):
    """
    Modify the group�s Dialable Caller ID settings and criteria list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_group_criteria: useGroupCriteria
        ns_screening_failure_policy: nsScreeningFailurePolicy
        criteria_priority_order: criteriaPriorityOrder
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_group_criteria: bool = attr.ib(default=None)
    ns_screening_failure_policy: str = attr.ib(default=None)
    criteria_priority_order: List[OCI.DialableCallerIDCriteriaPriorityOrder] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_group_criteria", "useGroupCriteria", bool),
            E("ns_screening_failure_policy", "nsScreeningFailurePolicy", str),
            E(
                "criteria_priority_order",
                "criteriaPriorityOrder",
                OCI.DialableCallerIDCriteriaPriorityOrder,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDirectoryNumberHuntingModifyRequest(OCIRequest):
    """
    Replaces a list of users as agents for a directory number hunting group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        agent_user_id_list: agentUserIdList
        use_terminate_call_to_agent_first: useTerminateCallToAgentFirst
        use_original_agent_services_for_busy_and_no_answer_calls:
            useOriginalAgentServicesForBusyAndNoAnswerCalls
    """

    service_user_id: str = attr.ib()
    agent_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    use_terminate_call_to_agent_first: bool = attr.ib(default=None)
    use_original_agent_services_for_busy_and_no_answer_calls: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "agent_user_id_list",
                "agentUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("use_terminate_call_to_agent_first", "useTerminateCallToAgentFirst", bool),
            E(
                "use_original_agent_services_for_busy_and_no_answer_calls",
                "useOriginalAgentServicesForBusyAndNoAnswerCalls",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnActivateListRequest(OCIRequest):
    """
    Activate a list of assigned DNs on a group.

    It is possible to activate either: a single DN, or a list of DNs, or a range of DNs,
    or any combination thereof.  It is not an error to activate an already activated DN

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        phone_number: phoneNumber
        dn_range: dnRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnAssignListRequest(OCIRequest):
    """
    Assign a list of service provider DNs to a group.

    It is possible to assign either: a single DN, or a list of DNs, or a range of DNs, or
    any combination thereof.  The DNs must have previously been added to the service
    provider or enterprise.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        phone_number: phoneNumber
        dn_range: dnRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnDeactivateListRequest(OCIRequest):
    """
    Deactivate a list of activated DNs on a group.

    The DNs then become available for activation again.  It is possible to deactivate
    either: a single DN, or a list of DNs, or a range of DNs, or any combination thereof.
    It is not an error to deactivate an already deactivated DN.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        phone_number: phoneNumber
        dn_range: dnRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnListAssignDepartmentRequest(OCIRequest):
    """
    Assign a list of group DNs to a department.

    If the department is not specified, this will make the DNs become unassigned from any
    department.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_key: departmentKey
        phone_number: phoneNumber
        dn_range: dnRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_key: "OCI.DepartmentKey" = attr.ib(default=None)
    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_key", "departmentKey", OCI.DepartmentKey, is_complex=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnUnassignListRequest(OCIRequest):
    """
    Unassign a list of service provider DNs from a group.

    The DNs then become available for assignment to other groups.  It is possible to
    unassign either: a single DN, or a list of DNs, or a range of DNs, or any combination
    thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        phone_number: phoneNumber
        dn_range: dnRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEmergencyZonesAddHomeZoneListRequest(OCIRequest):
    """
    Add a list of home zones and/or home zone ranges to the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_ip_address: homeZoneIpAddress
        home_zone_ip_address_range: homeZoneIpAddressRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_ip_address: List[str] = attr.ib(default=None)
    home_zone_ip_address_range: List[OCI.IPAddressRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("home_zone_ip_address", "homeZoneIpAddress", str, is_array=True),
            E(
                "home_zone_ip_address_range",
                "homeZoneIpAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEmergencyZonesDeleteHomeZoneListRequest(OCIRequest):
    """
    Delete a list of home zones and/or home zone ranges to the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        home_zone_ip_address: homeZoneIpAddress
        home_zone_ip_address_range: homeZoneIpAddressRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    home_zone_ip_address: List[str] = attr.ib(default=None)
    home_zone_ip_address_range: List[OCI.IPAddressRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("home_zone_ip_address", "homeZoneIpAddress", str, is_array=True),
            E(
                "home_zone_ip_address_range",
                "homeZoneIpAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkGetAvailableTrunkGroupListRequest(OCIRequest):
    """
    Request to get the list of all available trunk groups defined in a group.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``GroupEnterpriseTrunkGetAvailableTrunkGroupListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_trunk_group_name: searchCriteriaTrunkGroupName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_trunk_group_name: List[OCI.SearchCriteriaTrunkGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_trunk_group_name",
                "searchCriteriaTrunkGroupName",
                OCI.SearchCriteriaTrunkGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupExchangeIntegrationModifyRequest(OCIRequest):
    """
    Modify the group level configuration for Exchange Integration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enable_exchange_integration: enableExchangeIntegration
        exchange_url: exchangeURL
        exchange_credentials: exchangeCredentials
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enable_exchange_integration: bool = attr.ib(default=None)
    exchange_url: str = attr.ib(default=None)
    exchange_credentials: "OCI.ExchangeUserNamePassword" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enable_exchange_integration", "enableExchangeIntegration", bool),
            E("exchange_url", "exchangeURL", str),
            E(
                "exchange_credentials",
                "exchangeCredentials",
                OCI.ExchangeUserNamePassword,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeModifyListRequest(OCIRequest):
    """
    Modify a list of feature access codes for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``GroupFeatureAccessCodeModifyRequest()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        feature_access_code: featureAccessCode
        restore_default_codes: restoreDefaultCodes
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    feature_access_code: List[OCI.FeatureAccessCodeEntry] = attr.ib(default=None)
    restore_default_codes: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
            E("restore_default_codes", "restoreDefaultCodes", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeModifyRequest(OCIRequest):
    """
    Modify group FAC code level and the list of feature access codes for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Note: choice
    element is only valid when useFeatureAccessCodeLevel is set to "Group", otherwise an
    ``ErrorResponse()`` will be returned.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_feature_access_code_level: useFeatureAccessCodeLevel
        restore_default_codes: restoreDefaultCodes
        feature_access_code: featureAccessCode
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_feature_access_code_level: str = attr.ib(default=None)
    restore_default_codes: bool = attr.ib(default=None)
    feature_access_code: List[OCI.FeatureAccessCodeEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_feature_access_code_level", "useFeatureAccessCodeLevel", str),
            E("restore_default_codes", "restoreDefaultCodes", bool),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeModifyRequest20(OCIRequest):
    """
    Modify group FAC code level and the list of feature access codes for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Note: choice
    element is only valid when useFeatureAccessCodeLevel is set to "Group", otherwise an
    ``ErrorResponse()`` will be returned.  In release 20 the "Call Recording" FAC name is
    changed to "Call Recording - Start". Replaced by:
    ``GroupFeatureAccessCodeModifyRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_feature_access_code_level: useFeatureAccessCodeLevel
        restore_default_codes: restoreDefaultCodes
        feature_access_code: featureAccessCode
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_feature_access_code_level: str = attr.ib(default=None)
    restore_default_codes: bool = attr.ib(default=None)
    feature_access_code: List[OCI.FeatureAccessCodeEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_feature_access_code_level", "useFeatureAccessCodeLevel", str),
            E("restore_default_codes", "restoreDefaultCodes", bool),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFeatureAccessCodeModifyRequest21(OCIRequest):
    """
    Modify group FAC code level and the list of feature access codes for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Note: choice
    element is only valid when useFeatureAccessCodeLevel is set to "Group", otherwise an
    ``ErrorResponse()`` will be returned.  In release 20 the "Call Recording" FAC name is
    changed to "Call Recording - Start".

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_feature_access_code_level: useFeatureAccessCodeLevel
        restore_default_codes: restoreDefaultCodes
        feature_access_code: featureAccessCode
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_feature_access_code_level: str = attr.ib(default=None)
    restore_default_codes: bool = attr.ib(default=None)
    feature_access_code: List[OCI.FeatureAccessCodeModifyEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_feature_access_code_level", "useFeatureAccessCodeLevel", str),
            E("restore_default_codes", "restoreDefaultCodes", bool),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeModifyEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeAddAlertingGroupSelectiveCriteriaRequest(OCIRequest):
    """
    Add a criteria to the Find-me/Follow-me alerting group.

    For the callToNumber, the extension and number elements are not used and the only
    types accepted for each number are Primary and Alternates.  If other type is specified
    the command fails.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Find-me/Follow-me instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeModifyAlertingGroupRequest(OCIRequest):
    """
    Modify a Find-me/Follow-me alerting group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
        new_alerting_group_name: newAlertingGroupName
        alerting_group_description: alertingGroupDescription
        use_diversion_inhibitor: useDiversionInhibitor
        answer_confirmation_required: answerConfirmationRequired
        number_of_rings: numberOfRings
        phone_number_or_user_list: phoneNumberOrUserList
        criteria_activation: criteriaActivation
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()
    new_alerting_group_name: str = attr.ib(default=None)
    alerting_group_description: str = attr.ib(default=None)
    use_diversion_inhibitor: bool = attr.ib(default=None)
    answer_confirmation_required: bool = attr.ib(default=None)
    number_of_rings: int = attr.ib(default=None)
    phone_number_or_user_list: "OCI.FindMeFollowMeAlertingGroupReplacementOutgoingDNSIPURIorUserIdList" = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
            E("new_alerting_group_name", "newAlertingGroupName", str),
            E("alerting_group_description", "alertingGroupDescription", str),
            E("use_diversion_inhibitor", "useDiversionInhibitor", bool),
            E("answer_confirmation_required", "answerConfirmationRequired", bool),
            E("number_of_rings", "numberOfRings", int),
            E(
                "phone_number_or_user_list",
                "phoneNumberOrUserList",
                OCI.FindMeFollowMeAlertingGroupReplacementOutgoingDNSIPURIorUserIdList,
                is_complex=True,
            ),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of flexible seating host instances.

    Host cannot be disabled when a flexible seating guest is associated.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGetListInServiceProviderRequest(OCIRequest):
    """
    Request the list of groups in a service provider or enterprise.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``GroupGetListInServiceProviderResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGetListInSystemRequest(OCIRequest):
    """
    Request the list of groups in the system.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``GroupGetListInSystemResponse()`` or an ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
        search_criteria_exact_service_provider: searchCriteriaExactServiceProvider
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)
    search_criteria_exact_service_provider: "OCI.SearchCriteriaExactServiceProvider" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_service_provider",
                "searchCriteriaExactServiceProvider",
                OCI.SearchCriteriaExactServiceProvider,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupNightForwardingModifyRequest(OCIRequest):
    """
    Request to modify the Group Night Forwarding group parameters.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        night_forwarding: nightForwarding
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        forward_to_phone_number: forwardToPhoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    night_forwarding: str = attr.ib(default=None)
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("night_forwarding", "nightForwarding", str),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Group Paging instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingModifyOriginatorListRequest(OCIRequest):
    """
    Request to modify the originator list for a paging group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        originator_user_id_list: originatorUserIdList
    """

    service_user_id: str = attr.ib()
    originator_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "originator_user_id_list",
                "originatorUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingModifyTargetListRequest(OCIRequest):
    """
    Request to modify the target list for a paging group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        target_user_id_list: targetUserIdList
    """

    service_user_id: str = attr.ib()
    target_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "target_user_id_list",
                "targetUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHolidayScheduleAddRequest(OCIRequest):
    """
    Add a holiday schedule to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        holiday_schedule_name: holidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()
    holiday01: "OCI.Holiday" = attr.ib(default=None)
    holiday02: "OCI.Holiday" = attr.ib(default=None)
    holiday03: "OCI.Holiday" = attr.ib(default=None)
    holiday04: "OCI.Holiday" = attr.ib(default=None)
    holiday05: "OCI.Holiday" = attr.ib(default=None)
    holiday06: "OCI.Holiday" = attr.ib(default=None)
    holiday07: "OCI.Holiday" = attr.ib(default=None)
    holiday08: "OCI.Holiday" = attr.ib(default=None)
    holiday09: "OCI.Holiday" = attr.ib(default=None)
    holiday10: "OCI.Holiday" = attr.ib(default=None)
    holiday11: "OCI.Holiday" = attr.ib(default=None)
    holiday12: "OCI.Holiday" = attr.ib(default=None)
    holiday13: "OCI.Holiday" = attr.ib(default=None)
    holiday14: "OCI.Holiday" = attr.ib(default=None)
    holiday15: "OCI.Holiday" = attr.ib(default=None)
    holiday16: "OCI.Holiday" = attr.ib(default=None)
    holiday17: "OCI.Holiday" = attr.ib(default=None)
    holiday18: "OCI.Holiday" = attr.ib(default=None)
    holiday19: "OCI.Holiday" = attr.ib(default=None)
    holiday20: "OCI.Holiday" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHolidayScheduleModifyRequest(OCIRequest):
    """
    Modify a holiday schedule in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        holiday_schedule_name: holidayScheduleName
        new_holiday_schedule_name: newHolidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()
    new_holiday_schedule_name: str = attr.ib(default=None)
    holiday01: "OCI.Holiday" = attr.ib(default=None)
    holiday02: "OCI.Holiday" = attr.ib(default=None)
    holiday03: "OCI.Holiday" = attr.ib(default=None)
    holiday04: "OCI.Holiday" = attr.ib(default=None)
    holiday05: "OCI.Holiday" = attr.ib(default=None)
    holiday06: "OCI.Holiday" = attr.ib(default=None)
    holiday07: "OCI.Holiday" = attr.ib(default=None)
    holiday08: "OCI.Holiday" = attr.ib(default=None)
    holiday09: "OCI.Holiday" = attr.ib(default=None)
    holiday10: "OCI.Holiday" = attr.ib(default=None)
    holiday11: "OCI.Holiday" = attr.ib(default=None)
    holiday12: "OCI.Holiday" = attr.ib(default=None)
    holiday13: "OCI.Holiday" = attr.ib(default=None)
    holiday14: "OCI.Holiday" = attr.ib(default=None)
    holiday15: "OCI.Holiday" = attr.ib(default=None)
    holiday16: "OCI.Holiday" = attr.ib(default=None)
    holiday17: "OCI.Holiday" = attr.ib(default=None)
    holiday18: "OCI.Holiday" = attr.ib(default=None)
    holiday19: "OCI.Holiday" = attr.ib(default=None)
    holiday20: "OCI.Holiday" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("new_holiday_schedule_name", "newHolidayScheduleName", str),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Hunt Group instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupModifyInstanceWeightedCallDistributionRequest(OCIRequest):
    """
    Request to modify the weighted call distribution of a Hunt Group instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. NOTE: Prior to
    release 14, any agents who were not in the list kept their existing weight setting.
    In release 14, any agents who are not in the list will have their weight set to 0.

    Attributes:
        service_user_id: serviceUserId
        agent_weight: agentWeight
    """

    service_user_id: str = attr.ib()
    agent_weight: List[OCI.HuntAgentWeight] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "agent_weight",
                "agentWeight",
                OCI.HuntAgentWeight,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupIMRNAssignListRequest(OCIRequest):
    """
    Assign a list of group DNs to the IMRN pool.

    It is possible to assign either: a single DN, or a list of DNs, or a range of DNs, or
    any combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        imrn: imrn
        imrn_range: imrnRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    imrn: List[str] = attr.ib(default=None)
    imrn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("imrn", "imrn", str, is_array=True),
            E("imrn_range", "imrnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupIMRNUnassignListRequest(OCIRequest):
    """
    Unassign a list of group DNs from the group IMRN pool.

    The DNs then become available for assignment to users.  It is possible to delete
    either: a single DN, or a list of DNs, or a range of DNs, or any combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        imrn: imrn
        imrn_range: imrnRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    imrn: List[str] = attr.ib(default=None)
    imrn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("imrn", "imrn", str, is_array=True),
            E("imrn_range", "imrnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Instant Group Call service instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInterceptGroupModifyRequest(OCIRequest):
    """
    Modify the group's intercept group service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupInterceptGroupModifyRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    announcement_selection: str = attr.ib(default=None)
    audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    play_new_phone_number: bool = attr.ib(default=None)
    new_phone_number: str = attr.ib(default=None)
    transfer_on_zero_to_phone_number: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("announcement_selection", "announcementSelection", str),
            E("audio_file", "audioFile", OCI.LabeledFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledFileResource, is_complex=True),
            E("play_new_phone_number", "playNewPhoneNumber", bool),
            E("new_phone_number", "newPhoneNumber", str),
            E("transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInterceptGroupModifyRequest16(OCIRequest):
    """
    Modify the group's intercept group service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
        reroute_outbound_calls: rerouteOutboundCalls
        outbound_reroute_phone_number: outboundReroutePhoneNumber
        allow_outbound_local_calls: allowOutboundLocalCalls
        inbound_call_mode: inboundCallMode
        alternate_blocking_announcement: alternateBlockingAnnouncement
        route_to_voice_mail: routeToVoiceMail
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    announcement_selection: str = attr.ib(default=None)
    audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    play_new_phone_number: bool = attr.ib(default=None)
    new_phone_number: str = attr.ib(default=None)
    transfer_on_zero_to_phone_number: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    reroute_outbound_calls: bool = attr.ib(default=None)
    outbound_reroute_phone_number: str = attr.ib(default=None)
    allow_outbound_local_calls: bool = attr.ib(default=None)
    inbound_call_mode: str = attr.ib(default=None)
    alternate_blocking_announcement: bool = attr.ib(default=None)
    route_to_voice_mail: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("announcement_selection", "announcementSelection", str),
            E("audio_file", "audioFile", OCI.LabeledMediaFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledMediaFileResource, is_complex=True),
            E("play_new_phone_number", "playNewPhoneNumber", bool),
            E("new_phone_number", "newPhoneNumber", str),
            E("transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("reroute_outbound_calls", "rerouteOutboundCalls", bool),
            E("outbound_reroute_phone_number", "outboundReroutePhoneNumber", str),
            E("allow_outbound_local_calls", "allowOutboundLocalCalls", bool),
            E("inbound_call_mode", "inboundCallMode", str),
            E("alternate_blocking_announcement", "alternateBlockingAnnouncement", bool),
            E("route_to_voice_mail", "routeToVoiceMail", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMWIDeliveryToMobileEndpointModifyRequest(OCIRequest):
    """
    Modify the group level MWI custom notifications settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. If the
    request is executed by a group administrator and modifies the useSettingLevel, the
    request is rejected.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        use_setting_level: useSettingLevel
        template_activation: templateActivation
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    use_setting_level: str = attr.ib(default=None)
    template_activation: List[OCI.MWIDeliveryToMobileEndpointTemplateActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("use_setting_level", "useSettingLevel", str),
            E(
                "template_activation",
                "templateActivation",
                OCI.MWIDeliveryToMobileEndpointTemplateActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Meet-Me Conferencing instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingModifyRequest(OCIRequest):
    """
    Modify the group level data associated with Meet-Me Conferencing functions.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        allocated_ports: allocatedPorts
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    allocated_ports: "OCI.MeetMeConferencingConferencePorts" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupModifyRequest(OCIRequest):
    """
    Modify the profile for a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        default_domain: defaultDomain
        user_limit: userLimit
        group_name: groupName
        calling_line_id_name: callingLineIdName
        calling_line_id_phone_number: callingLineIdPhoneNumber
        time_zone: timeZone
        location_dialing_code: locationDialingCode
        contact: contact
        address: address
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    default_domain: str = attr.ib(default=None)
    user_limit: int = attr.ib(default=None)
    group_name: str = attr.ib(default=None)
    calling_line_id_name: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    location_dialing_code: str = attr.ib(default=None)
    contact: "OCI.Contact" = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("default_domain", "defaultDomain", str),
            E("user_limit", "userLimit", int),
            E("group_name", "groupName", str),
            E("calling_line_id_name", "callingLineIdName", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("time_zone", "timeZone", str),
            E("location_dialing_code", "locationDialingCode", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldAddInstanceRequest14sp6(OCIRequest):
    """
    Add a Music on Hold Instance to a department.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupMusicOnHoldAddInstanceRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib()
    is_active_during_call_hold: bool = attr.ib()
    is_active_during_call_park: bool = attr.ib()
    is_active_during_busy_camp_on: bool = attr.ib()
    source: "OCI.MusicOnHoldSourceAdd" = attr.ib()
    use_alternate_source_for_internal_calls: bool = attr.ib()
    internal_source: "OCI.MusicOnHoldSourceAdd" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceAdd,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceAdd,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldAddInstanceRequest16(OCIRequest):
    """
    Add a Music on Hold Instance to a department.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib()
    is_active_during_call_hold: bool = attr.ib()
    is_active_during_call_park: bool = attr.ib()
    is_active_during_busy_camp_on: bool = attr.ib()
    source: "OCI.MusicOnHoldSourceAdd16" = attr.ib()
    use_alternate_source_for_internal_calls: bool = attr.ib()
    internal_source: "OCI.MusicOnHoldSourceAdd16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceAdd16,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceAdd16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldAddInstanceRequest20(OCIRequest):
    """
    Add a Music on Hold Instance to a department.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``GroupMusicOnHoldAddInstanceRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib()
    is_active_during_call_hold: bool = attr.ib()
    is_active_during_call_park: bool = attr.ib()
    is_active_during_busy_camp_on: bool = attr.ib()
    source: "OCI.MusicOnHoldSourceAdd20" = attr.ib()
    use_alternate_source_for_internal_calls: bool = attr.ib()
    internal_source: "OCI.MusicOnHoldSourceAdd20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceAdd20,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceAdd20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldAddInstanceRequest21(OCIRequest):
    """
    Add a Music on Hold Instance to a department.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib()
    is_active_during_call_hold: bool = attr.ib()
    is_active_during_call_park: bool = attr.ib()
    is_active_during_busy_camp_on: bool = attr.ib()
    source: "OCI.MusicOnHoldSourceAdd21" = attr.ib()
    use_alternate_source_for_internal_calls: bool = attr.ib()
    internal_source: "OCI.MusicOnHoldSourceAdd21" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E(
                "source",
                "source",
                OCI.MusicOnHoldSourceAdd21,
                is_complex=True,
                is_required=True,
            ),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
                is_required=True,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceAdd21,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldDeleteInstanceRequest(OCIRequest):
    """
    Delete a Music On Hold department instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetInstanceRequest14(OCIRequest):
    """
    Get a Music On Hold data for a group or department instance.

    The response is either ``GroupMusicOnHoldGetInstanceResponse14()`` or
    ``ErrorResponse()``.

    Replaced By: GroupMusicOnHoldGetInstanceRequest14Sp4

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetInstanceRequest14sp4(OCIRequest):
    """
    Get a Music On Hold data for a group or department instance.

    The response is either ``GroupMusicOnHoldGetInstanceResponse14sp4()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetInstanceRequest14sp6(OCIRequest):
    """
    Get a Music On Hold data for a group or department instance.

    The response is either ``GroupMusicOnHoldGetInstanceResponse14sp6()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupMusicOnHoldGetInstanceRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetInstanceRequest16(OCIRequest):
    """
    Get a Music On Hold data for a group or department instance.

    The response is either ``GroupMusicOnHoldGetInstanceResponse16()`` or
    ``ErrorResponse()``. Replaced by: ``GroupMusicOnHoldGetInstanceRequest19()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetInstanceRequest19(OCIRequest):
    """
    Get a Music On Hold data for a group or department instance.

    The response is either ``GroupMusicOnHoldGetInstanceResponse19()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetInstanceRequest20(OCIRequest):
    """
    Get a Music On Hold data for a group or department instance.

    The response is either ``GroupMusicOnHoldGetInstanceResponse20()`` or
    ``ErrorResponse()``. Replaced by: ``GroupMusicOnHoldGetInstanceRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldGetInstanceRequest21(OCIRequest):
    """
    Get a Music On Hold data for a group or department instance.

    The response is either ``GroupMusicOnHoldGetInstanceResponse21()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldModifyInstanceRequest14sp6(OCIRequest):
    """
    Modify data for a group or department Music On Hold Instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupMusicOnHoldModifyInstanceRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    is_active_during_call_hold: bool = attr.ib(default=None)
    is_active_during_call_park: bool = attr.ib(default=None)
    is_active_during_busy_camp_on: bool = attr.ib(default=None)
    source: "OCI.MusicOnHoldSourceModify" = attr.ib(default=None)
    use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    internal_source: "OCI.MusicOnHoldSourceModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("is_active_during_call_hold", "isActiveDuringCallHold", bool),
            E("is_active_during_call_park", "isActiveDuringCallPark", bool),
            E("is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool),
            E("source", "source", OCI.MusicOnHoldSourceModify, is_complex=True),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldModifyInstanceRequest16(OCIRequest):
    """
    Modify data for a group or department Music On Hold Instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    is_active_during_call_hold: bool = attr.ib(default=None)
    is_active_during_call_park: bool = attr.ib(default=None)
    is_active_during_busy_camp_on: bool = attr.ib(default=None)
    source: "OCI.MusicOnHoldSourceModify16" = attr.ib(default=None)
    use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    internal_source: "OCI.MusicOnHoldSourceModify16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("is_active_during_call_hold", "isActiveDuringCallHold", bool),
            E("is_active_during_call_park", "isActiveDuringCallPark", bool),
            E("is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool),
            E("source", "source", OCI.MusicOnHoldSourceModify16, is_complex=True),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceModify16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldModifyInstanceRequest20(OCIRequest):
    """
    Modify data for a group or department Music On Hold Instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``GroupMusicOnHoldModifyInstanceRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    is_active_during_call_hold: bool = attr.ib(default=None)
    is_active_during_call_park: bool = attr.ib(default=None)
    is_active_during_busy_camp_on: bool = attr.ib(default=None)
    source: "OCI.MusicOnHoldSourceModify20" = attr.ib(default=None)
    use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    internal_source: "OCI.MusicOnHoldSourceModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("is_active_during_call_hold", "isActiveDuringCallHold", bool),
            E("is_active_during_call_park", "isActiveDuringCallPark", bool),
            E("is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool),
            E("source", "source", OCI.MusicOnHoldSourceModify20, is_complex=True),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldModifyInstanceRequest21(OCIRequest):
    """
    Modify data for a group or department Music On Hold Instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    is_active_during_call_hold: bool = attr.ib(default=None)
    is_active_during_call_park: bool = attr.ib(default=None)
    is_active_during_busy_camp_on: bool = attr.ib(default=None)
    source: "OCI.MusicOnHoldSourceModify21" = attr.ib(default=None)
    use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    internal_source: "OCI.MusicOnHoldSourceModify21" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("is_active_during_call_hold", "isActiveDuringCallHold", bool),
            E("is_active_during_call_park", "isActiveDuringCallPark", bool),
            E("is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool),
            E("source", "source", OCI.MusicOnHoldSourceModify21, is_complex=True),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldSourceModify21,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceAssignListRequest21(OCIRequest):
    """
    Assign a list of Network Classes of Service to a group.

    A default Network Class of Service must be specified unless there is already one
    assigned to the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: "OCI.DefaultNetworkClassOfService" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E(
                "default_network_class_of_service",
                "defaultNetworkClassOfService",
                OCI.DefaultNetworkClassOfService,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceUnassignListRequest21(OCIRequest):
    """
    Unassign a list of Network Classes of Service from a group.

    If the default Network Class of Service is being unassigned, a new one must be
    specified unless there are no more Network Classes of Service assigned to the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: "OCI.DefaultNetworkClassOfService" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E(
                "default_network_class_of_service",
                "defaultNetworkClassOfService",
                OCI.DefaultNetworkClassOfService,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDepartmentAuthorizationCodeAddListRequest(OCIRequest):
    """
    Add a list of authorization codes to the group's default or a department.

    When department is not specified, it is for the group default.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_key: departmentKey
        code_entry: codeEntry
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_key: "OCI.DepartmentKey" = attr.ib(default=None)
    code_entry: List[OCI.OutgoingCallingPlanAuthorizationCodeEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_key", "departmentKey", OCI.DepartmentKey, is_complex=True),
            E(
                "code_entry",
                "codeEntry",
                OCI.OutgoingCallingPlanAuthorizationCodeEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDepartmentAuthorizationCodeDeleteListRequest(OCIRequest):
    """
    Delete a list of authorization codes from the group's default or a department.

    When department is not specified, it is for the group default.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_key: departmentKey
        code: code
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_key: "OCI.DepartmentKey" = attr.ib(default=None)
    code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_key", "departmentKey", OCI.DepartmentKey, is_complex=True),
            E("code", "code", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListRequest(OCIRequest):
    """
    Request the list of authorization codes for a group default or a department.

    When department is not specified, it is for the group default.

    The response is either a
    ``GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department_key: departmentKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department_key: "OCI.DepartmentKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department_key", "departmentKey", OCI.DepartmentKey, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPreferredCarrierGroupModifyRequest(OCIRequest):
    """
    Modifies the currently configured carriers for a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    intra_lata_carrier: "OCI.GroupPreferredCarrierNameModify" = attr.ib(default=None)
    inter_lata_carrier: "OCI.GroupPreferredCarrierNameModify" = attr.ib(default=None)
    international_carrier: "OCI.GroupPreferredCarrierNameModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "intra_lata_carrier",
                "intraLataCarrier",
                OCI.GroupPreferredCarrierNameModify,
                is_complex=True,
            ),
            E(
                "inter_lata_carrier",
                "interLataCarrier",
                OCI.GroupPreferredCarrierNameModify,
                is_complex=True,
            ),
            E(
                "international_carrier",
                "internationalCarrier",
                OCI.GroupPreferredCarrierNameModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointAddDNISRequest(OCIRequest):
    """
    Add a Route Point DNIS.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
        dnis_phone_number: dnisPhoneNumber
        extension: extension
        use_custom_clid_settings: useCustomCLIDSettings
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        use_custom_dnis_announcement_settings: useCustomDnisAnnouncementSettings
        allow_outgoing_acd_call: allowOutgoingACDCall
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    dnis_phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    use_custom_clid_settings: bool = attr.ib()
    calling_line_id_phone_number: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    use_custom_dnis_announcement_settings: bool = attr.ib()
    allow_outgoing_acd_call: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E("dnis_phone_number", "dnisPhoneNumber", str),
            E("extension", "extension", str),
            E(
                "use_custom_clid_settings",
                "useCustomCLIDSettings",
                bool,
                is_required=True,
            ),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E(
                "use_custom_dnis_announcement_settings",
                "useCustomDnisAnnouncementSettings",
                bool,
                is_required=True,
            ),
            E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointDeleteDNISRequest(OCIRequest):
    """
    Delete a route point's DNIS.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointExternalSystemGetAssignedRoutePointListRequest(OCIRequest):
    """
    Request a list of route points within in a group that have a given external system
    assigned.

    The response is either
    ``GroupRoutePointExternalSystemGetAssignedRoutePointListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        external_system: externalSystem
        response_size_limit: responseSizeLimit
        search_criteria_route_point_name: searchCriteriaRoutePointName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    external_system: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_route_point_name: List[OCI.SearchCriteriaRoutePointName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("external_system", "externalSystem", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_route_point_name",
                "searchCriteriaRoutePointName",
                OCI.SearchCriteriaRoutePointName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetDNISAgentListRequest(OCIRequest):
    """
    Get a list of agent who selected the DNIS as the outgoing call.

    The response is either ``GroupRoutePointGetDNISAgentListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetDNISAnnouncementRequest(OCIRequest):
    """
    Get a route point's DNIS Announcements The response is either a
    ``GroupRoutePointGetDNISAnnouncementResponse()`` or an ``ErrorResponse()``.

    Replaced by: ``GroupRoutePointGetDNISAnnouncementRequest19()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetDNISAnnouncementRequest19(OCIRequest):
    """
    Get a route point's DNIS Announcements The response is either a
    ``GroupRoutePointGetDNISAnnouncementResponse19()`` or an ``ErrorResponse()``.


    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetDNISAnnouncementRequest20(OCIRequest):
    """
    Get a route point's DNIS Announcements The response is either a
    ``GroupRoutePointGetDNISAnnouncementResponse20()`` or an ``ErrorResponse()``.


    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetDNISRequest(OCIRequest):
    """
    Get a route point's DNIS.

    The response is either a ``GroupRoutePointGetDNISResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
    """

    dnis_key: "OCI.DNISKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointGetInstanceListRequest(OCIRequest):
    """
    Get a list of Route Point instances within a group.

    It is possible to search by various criteria to restrict the number of rows returned.

    The response is either ``GroupRoutePointGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
        response_size_limit: responseSizeLimit
        search_criteria_route_point_name: searchCriteriaRoutePointName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_route_point_name: List[OCI.SearchCriteriaRoutePointName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_route_point_name",
                "searchCriteriaRoutePointName",
                OCI.SearchCriteriaRoutePointName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of Route Point instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyDNISRequest(OCIRequest):
    """
    Modify a route point's DNIS settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
        new_dnis_name: newDNISName
        dnis_phone_number: dnisPhoneNumber
        extension: extension
        use_custom_clid_settings: useCustomCLIDSettings
        calling_line_id_phone_number: callingLineIdPhoneNumber
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        use_custom_dnis_announcement_settings: useCustomDnisAnnouncementSettings
        allow_outgoing_acd_call: allowOutgoingACDCall
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    new_dnis_name: str = attr.ib(default=None)
    dnis_phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    use_custom_clid_settings: bool = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    use_custom_dnis_announcement_settings: bool = attr.ib(default=None)
    allow_outgoing_acd_call: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E("new_dnis_name", "newDNISName", str),
            E("dnis_phone_number", "dnisPhoneNumber", str),
            E("extension", "extension", str),
            E("use_custom_clid_settings", "useCustomCLIDSettings", bool),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E(
                "use_custom_dnis_announcement_settings",
                "useCustomDnisAnnouncementSettings",
                bool,
            ),
            E("allow_outgoing_acd_call", "allowOutgoingACDCall", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointQueueCallDispositionCodeSettingsModifyRequest(OCIRequest):
    """
    Modify the queue level data associated with Route Point Agents Unavailable Code
    Settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        enable_call_disposition_codes: enableCallDispositionCodes
        include_organization_codes: includeOrganizationCodes
        force_use_of_call_disposition_codes: forceUseOfCallDispositionCodes
        default_call_disposition_code: defaultCallDispositionCode
        call_disposition_code_activation: callDispositionCodeActivation
    """

    service_user_id: str = attr.ib()
    enable_call_disposition_codes: bool = attr.ib(default=None)
    include_organization_codes: bool = attr.ib(default=None)
    force_use_of_call_disposition_codes: bool = attr.ib(default=None)
    default_call_disposition_code: "OCI.CallDispositionCodeWithLevel" = attr.ib(default=None)
    call_disposition_code_activation: List[OCI.CallDispositionCodeActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("enable_call_disposition_codes", "enableCallDispositionCodes", bool),
            E("include_organization_codes", "includeOrganizationCodes", bool),
            E(
                "force_use_of_call_disposition_codes",
                "forceUseOfCallDispositionCodes",
                bool,
            ),
            E(
                "default_call_disposition_code",
                "defaultCallDispositionCode",
                OCI.CallDispositionCodeWithLevel,
                is_complex=True,
            ),
            E(
                "call_disposition_code_activation",
                "callDispositionCodeActivation",
                OCI.CallDispositionCodeActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleAddEventRequest(OCIRequest):
    """
    Add an event to group schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_key: scheduleKey
        event_name: eventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    start_date: str = attr.ib()
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib()
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleDeleteEventListRequest(OCIRequest):
    """
    Delete a list of events from a group schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_key: scheduleKey
        event_name: eventName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleDeleteListRequest(OCIRequest):
    """
    Delete a list of group schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_key: scheduleKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_key: List[OCI.ScheduleKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleGetEventListRequest(OCIRequest):
    """
    Get the list of events of a group schedule.

    The response is either a ``GroupScheduleGetEventListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_key: scheduleKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleGetEventRequest(OCIRequest):
    """
    Get an event from a group schedule.

    The response is either a ``GroupScheduleGetEventResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_key: scheduleKey
        event_name: eventName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleModifyEventRequest(OCIRequest):
    """
    Modify an event of a group schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_key: scheduleKey
        event_name: eventName
        new_event_name: newEventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    new_event_name: str = attr.ib(default=None)
    start_date: str = attr.ib(default=None)
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib(default=None)
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("new_event_name", "newEventName", str),
            E("start_date", "startDate", str),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupScheduleModifyRequest(OCIRequest):
    """
    Modify a group schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        schedule_key: scheduleKey
        new_schedule_name: newScheduleName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    new_schedule_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_schedule_name", "newScheduleName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSeriesCompletionModifyInstanceRequest(OCIRequest):
    """
    Modifies a Series Completion group.

    Replaces the entire list of users in the group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        user_id_list: userIdList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("user_id_list", "userIdList", OCI.ReplacementUserIdList, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceScriptsGroupModifyRequest(OCIRequest):
    """
    Modify the group level data associated with Service Scripts Configuration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        script_file: scriptFile
        script_url: scriptUrl
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    script_file: "OCI.ServiceScriptsFileResource" = attr.ib(default=None)
    script_url: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "script_file",
                "scriptFile",
                OCI.ServiceScriptsFileResource,
                is_complex=True,
            ),
            E("script_url", "scriptUrl", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGetAvailableDeviceListRequest(OCIRequest):
    """
    Request to get the list of devices can be assigned to session admission control group
    for the group.

    The response is either an
    ``GroupSessionAdmissionControlGetAvailableDeviceListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_exact_device_type: searchCriteriaExactDeviceType
        search_criteria_exact_device_level: searchCriteriaExactDeviceLevel
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_exact_device_type: "OCI.SearchCriteriaExactDeviceType" = attr.ib(default=None)
    search_criteria_exact_device_level: "OCI.SearchCriteriaExactDeviceLevel" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_device_type",
                "searchCriteriaExactDeviceType",
                OCI.SearchCriteriaExactDeviceType,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_level",
                "searchCriteriaExactDeviceLevel",
                OCI.SearchCriteriaExactDeviceLevel,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupAddDeviceListRequest(OCIRequest):
    """
    Request to add one ore more devices to a group level session admission control group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        devices: devices
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    devices: List[OCI.AccessDevice] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "devices",
                "devices",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupAddRequest(OCIRequest):
    """
    Request to add a session admission control group for the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        become_default_group: becomeDefaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    max_session: int = attr.ib()
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    reserved_session: int = attr.ib()
    reserved_user_originating_sessions: int = attr.ib(default=None)
    reserved_user_terminating_sessions: int = attr.ib(default=None)
    become_default_group: bool = attr.ib()
    count_intra_sac_group_sessions: bool = attr.ib()
    devices: List[OCI.AccessDevice] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("become_default_group", "becomeDefaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E("devices", "devices", OCI.AccessDevice, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupAddRequest19sp1(OCIRequest):
    """
    Request to add a session admission control group for the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        become_default_group: becomeDefaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
        block_emergency_and_repair_calls_due_to_sac_limits:
            blockEmergencyAndRepairCallsDueToSACLimits
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    max_session: int = attr.ib()
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    reserved_session: int = attr.ib()
    reserved_user_originating_sessions: int = attr.ib(default=None)
    reserved_user_terminating_sessions: int = attr.ib(default=None)
    become_default_group: bool = attr.ib()
    count_intra_sac_group_sessions: bool = attr.ib()
    devices: List[OCI.AccessDevice] = attr.ib(default=None)
    block_emergency_and_repair_calls_due_to_sac_limits: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("become_default_group", "becomeDefaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E("devices", "devices", OCI.AccessDevice, is_complex=True, is_array=True),
            E(
                "block_emergency_and_repair_calls_due_to_sac_limits",
                "blockEmergencyAndRepairCallsDueToSACLimits",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupDeleteDeviceListRequest(OCIRequest):
    """
    Request to delete one or more devices from a group level session admission control
    group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        devices: devices
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    devices: List[OCI.AccessDevice] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "devices",
                "devices",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTimeScheduleAddRequest(OCIRequest):
    """
    Add a time schedule to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        time_schedule_name: timeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    time_schedule_name: str = attr.ib()
    time_interval01: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval02: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval03: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval04: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval05: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval06: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval07: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval08: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval09: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval10: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval11: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval12: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval13: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval14: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval15: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval16: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval17: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval18: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval19: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval20: "OCI.TimeInterval" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTimeScheduleModifyRequest(OCIRequest):
    """
    Modify a specified time schedule in a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        time_schedule_name: timeScheduleName
        new_time_schedule_name: newTimeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    time_schedule_name: str = attr.ib()
    new_time_schedule_name: str = attr.ib(default=None)
    time_interval01: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval02: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval03: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval04: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval05: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval06: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval07: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval08: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval09: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval10: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval11: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval12: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval13: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval14: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval15: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval16: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval17: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval18: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval19: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval20: "OCI.TimeInterval" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("new_time_schedule_name", "newTimeScheduleName", str),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupDeleteInstanceRequest14sp4(OCIRequest):
    """
    Delete a Trunk Group Instance from a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest14sp4(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest14sp5(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse14sp5()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name".

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest14sp9(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse14sp9()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name".

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest15(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse15()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name".

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest15sp2(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse15sp2()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name".

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest17(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse17()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name".

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest17sp3(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse17sp3()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name".
    Replaced by: ``GroupTrunkGroupGetInstanceRequest17sp4()``

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest17sp4(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse17sp4()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address".

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest19(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse19()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address". Replaced by
    ``GroupTrunkGroupGetInstanceRequest19sp1()``.

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest19V2(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse19V2()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address". Replaced by
    GroupTrunkGroupGetInstanceRequest19sp1V2.

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest19sp1(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse19sp1()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address". Replaced by
    GroupTrunkGroupGetInstanceRequest19sp1V2.

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest20sp1(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse20sp1()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address". Replaced by:
    ``GroupTrunkGroupGetInstanceRequest21()``

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceRequest21(OCIRequest):
    """
    Get a Trunk Group Instance's profile.

    The response is either a ``GroupTrunkGroupGetInstanceResponse21()`` or an
    ``ErrorResponse()``. The response contains a hosted user table with column headings:
    "User Id", "Last Name", "First Name", "Hiragana Last Name", "Hiragana First Name",
    "Phone Number", "Extension", "Department", "Email Address".

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupModifyInstanceRequest14sp4(OCIRequest):
    """
    Modify a Trunk Group Instance in a group.

    The access device cannot be modified or cleared if there are any users assigned to the
    Trunk Group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        new_name: newName
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id_list: hostedUserIdList
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        use_pilot_user_calling_line_identity: usePilotUserCallingLineIdentity
        use_pilot_user_charge_number: usePilotUserChargeNumber
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    new_name: str = attr.ib(default=None)
    pilot_user_id: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib(default=None)
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib(default=None)
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    unreachable_destination_trap_initial_calls: int = attr.ib(default=None)
    unreachable_destination_trap_offset_calls: int = attr.ib(default=None)
    invitation_timeout: int = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib(default=None)
    include_dtg_identity: bool = attr.ib(default=None)
    enable_network_address_identity: bool = attr.ib(default=None)
    allow_unscreened_calls: bool = attr.ib(default=None)
    allow_unscreened_emergency_calls: bool = attr.ib(default=None)
    use_pilot_user_calling_line_identity: bool = attr.ib(default=None)
    use_pilot_user_charge_number: bool = attr.ib(default=None)
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_name", "newName", str),
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
            ),
            E("invitation_timeout", "invitationTimeout", int),
            E("require_authentication", "requireAuthentication", bool),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E(
                "hosted_user_id_list",
                "hostedUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E("include_trunk_group_identity", "includeTrunkGroupIdentity", bool),
            E("include_dtg_identity", "includeDtgIdentity", bool),
            E("enable_network_address_identity", "enableNetworkAddressIdentity", bool),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool),
            E("allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool),
            E(
                "use_pilot_user_calling_line_identity",
                "usePilotUserCallingLineIdentity",
                bool,
            ),
            E("use_pilot_user_charge_number", "usePilotUserChargeNumber", bool),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupModifyInstanceRequest15(OCIRequest):
    """
    Modify a Trunk Group Instance in a group.

    The access device cannot be modified or cleared if there are any users assigned to the
    Trunk Group.  The command will fail if enableNetworkAddressIdentity is set and
    administrator is not System/Provisioning level administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``GroupTrunkGroupModifyInstanceRequest19sp1()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        new_name: newName
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id_list: hostedUserIdList
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    new_name: str = attr.ib(default=None)
    pilot_user_id: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib(default=None)
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib(default=None)
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib(default=None)
    allow_termination_to_dtg_identity: bool = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib(default=None)
    include_dtg_identity: bool = attr.ib(default=None)
    include_trunk_group_identity_for_network_calls: bool = attr.ib(default=None)
    include_otg_identity_for_network_calls: bool = attr.ib(default=None)
    enable_network_address_identity: bool = attr.ib(default=None)
    allow_unscreened_calls: bool = attr.ib(default=None)
    allow_unscreened_emergency_calls: bool = attr.ib(default=None)
    pilot_user_calling_line_identity_policy: str = attr.ib(default=None)
    pilot_user_charge_number_policy: str = attr.ib(default=None)
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib(default=None)
    prefix_enabled: bool = attr.ib(default=None)
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib(default=None)
    send_continuous_options_message: bool = attr.ib(default=None)
    continuous_options_sending_interval_seconds: int = attr.ib(default=None)
    failure_options_sending_interval_seconds: int = attr.ib(default=None)
    failure_threshold_counter: int = attr.ib(default=None)
    success_threshold_counter: int = attr.ib(default=None)
    invite_failure_threshold_counter: int = attr.ib(default=None)
    invite_failure_threshold_window_seconds: int = attr.ib(default=None)
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib(default=None)
    use_system_calling_line_asserted_identity_policy: bool = attr.ib(default=None)
    pilot_user_call_optimization_policy: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_name", "newName", str),
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int),
            E("require_authentication", "requireAuthentication", bool),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E(
                "hosted_user_id_list",
                "hostedUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
            ),
            E("include_trunk_group_identity", "includeTrunkGroupIdentity", bool),
            E("include_dtg_identity", "includeDtgIdentity", bool),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
            ),
            E("enable_network_address_identity", "enableNetworkAddressIdentity", bool),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool),
            E("allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
            ),
            E("pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool),
            E("prefix_enabled", "prefixEnabled", bool),
            E("prefix", "prefix", str),
            E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool),
            E("send_continuous_options_message", "sendContinuousOptionsMessage", bool),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
            ),
            E("failure_threshold_counter", "failureThresholdCounter", int),
            E("success_threshold_counter", "successThresholdCounter", int),
            E("invite_failure_threshold_counter", "inviteFailureThresholdCounter", int),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupModifyInstanceRequest19sp1(OCIRequest):
    """
    Modify a Trunk Group Instance in a group.

    The access device cannot be modified or cleared if there are any users assigned to the
    Trunk Group.  The command will fail if enableNetworkAddressIdentity is set and
    administrator is not System/Provisioning level administrator.  Following attributes
    are only used in IMS mode: implicitRegistrationSetSupportPolicy
    useSystemImplicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy
    useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``GroupTrunkGroupModifyInstanceRequest20sp1()``

    Attributes:
        trunk_group_key: trunkGroupKey
        new_name: newName
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id_list: hostedUserIdList
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
        implicit_registration_set_support_policy: implicitRegistrationSetSupportPolicy
        use_system_implicit_registration_set_support_policy:
            useSystemImplicitRegistrationSetSupportPolicy
        sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            sipIdentityForPilotAndProxyTrunkModesPolicy
        use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy
        use_system_support_connected_identity_policy:
            useSystemSupportConnectedIdentityPolicy
        support_connected_identity_policy: supportConnectedIdentityPolicy
        use_system_options_message_response_status_codes:
            useSystemOptionsMessageResponseStatusCodes
        delete_options_message_response_status_code:
            deleteOptionsMessageResponseStatusCode
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    new_name: str = attr.ib(default=None)
    pilot_user_id: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib(default=None)
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib(default=None)
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib(default=None)
    allow_termination_to_dtg_identity: bool = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib(default=None)
    include_dtg_identity: bool = attr.ib(default=None)
    include_trunk_group_identity_for_network_calls: bool = attr.ib(default=None)
    include_otg_identity_for_network_calls: bool = attr.ib(default=None)
    enable_network_address_identity: bool = attr.ib(default=None)
    allow_unscreened_calls: bool = attr.ib(default=None)
    allow_unscreened_emergency_calls: bool = attr.ib(default=None)
    pilot_user_calling_line_identity_for_external_calls_policy: str = attr.ib(default=None)
    pilot_user_charge_number_policy: str = attr.ib(default=None)
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib(default=None)
    prefix_enabled: bool = attr.ib(default=None)
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib(default=None)
    send_continuous_options_message: bool = attr.ib(default=None)
    continuous_options_sending_interval_seconds: int = attr.ib(default=None)
    failure_options_sending_interval_seconds: int = attr.ib(default=None)
    failure_threshold_counter: int = attr.ib(default=None)
    success_threshold_counter: int = attr.ib(default=None)
    invite_failure_threshold_counter: int = attr.ib(default=None)
    invite_failure_threshold_window_seconds: int = attr.ib(default=None)
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib(default=None)
    use_system_calling_line_asserted_identity_policy: bool = attr.ib(default=None)
    pilot_user_call_optimization_policy: str = attr.ib(default=None)
    clid_source_for_screened_calls_policy: str = attr.ib(default=None)
    use_system_clid_source_for_screened_calls_policy: bool = attr.ib(default=None)
    user_lookup_policy: str = attr.ib(default=None)
    use_system_user_lookup_policy: bool = attr.ib(default=None)
    pilot_user_calling_line_identity_for_emergency_calls_policy: str = attr.ib(default=None)
    implicit_registration_set_support_policy: str = attr.ib(default=None)
    use_system_implicit_registration_set_support_policy: bool = attr.ib(default=None)
    sip_identity_for_pilot_and_proxy_trunk_modes_policy: str = attr.ib(default=None)
    use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy: bool = attr.ib(default=None)
    use_system_support_connected_identity_policy: bool = attr.ib(default=None)
    support_connected_identity_policy: str = attr.ib(default=None)
    use_system_options_message_response_status_codes: bool = attr.ib(default=None)
    delete_options_message_response_status_code: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_name", "newName", str),
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int),
            E("require_authentication", "requireAuthentication", bool),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E(
                "hosted_user_id_list",
                "hostedUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
            ),
            E("include_trunk_group_identity", "includeTrunkGroupIdentity", bool),
            E("include_dtg_identity", "includeDtgIdentity", bool),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
            ),
            E("enable_network_address_identity", "enableNetworkAddressIdentity", bool),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool),
            E("allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
            ),
            E("pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool),
            E("prefix_enabled", "prefixEnabled", bool),
            E("prefix", "prefix", str),
            E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool),
            E("send_continuous_options_message", "sendContinuousOptionsMessage", bool),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
            ),
            E("failure_threshold_counter", "failureThresholdCounter", int),
            E("success_threshold_counter", "successThresholdCounter", int),
            E("invite_failure_threshold_counter", "inviteFailureThresholdCounter", int),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
            ),
            E("user_lookup_policy", "userLookupPolicy", str),
            E("use_system_user_lookup_policy", "useSystemUserLookupPolicy", bool),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
            ),
            E(
                "implicit_registration_set_support_policy",
                "implicitRegistrationSetSupportPolicy",
                str,
            ),
            E(
                "use_system_implicit_registration_set_support_policy",
                "useSystemImplicitRegistrationSetSupportPolicy",
                bool,
            ),
            E(
                "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "sipIdentityForPilotAndProxyTrunkModesPolicy",
                str,
            ),
            E(
                "use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy",
                bool,
            ),
            E(
                "use_system_support_connected_identity_policy",
                "useSystemSupportConnectedIdentityPolicy",
                bool,
            ),
            E(
                "support_connected_identity_policy",
                "supportConnectedIdentityPolicy",
                str,
            ),
            E(
                "use_system_options_message_response_status_codes",
                "useSystemOptionsMessageResponseStatusCodes",
                bool,
            ),
            E(
                "delete_options_message_response_status_code",
                "deleteOptionsMessageResponseStatusCode",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupModifyInstanceRequest20sp1(OCIRequest):
    """
    Modify a Trunk Group Instance in a group.

    The access device cannot be modified or cleared if there are any users assigned to the
    Trunk Group.  The command will fail if enableNetworkAddressIdentity is set and
    administrator is not System/Provisioning level administrator.  Following attributes
    are only used in IMS mode: implicitRegistrationSetSupportPolicy
    useSystemImplicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy
    useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        new_name: newName
        pilot_user_id: pilotUserId
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id_list: hostedUserIdList
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
        implicit_registration_set_support_policy: implicitRegistrationSetSupportPolicy
        use_system_implicit_registration_set_support_policy:
            useSystemImplicitRegistrationSetSupportPolicy
        sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            sipIdentityForPilotAndProxyTrunkModesPolicy
        use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy
        use_system_support_connected_identity_policy:
            useSystemSupportConnectedIdentityPolicy
        support_connected_identity_policy: supportConnectedIdentityPolicy
        use_system_options_message_response_status_codes:
            useSystemOptionsMessageResponseStatusCodes
        delete_options_message_response_status_code:
            deleteOptionsMessageResponseStatusCode
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    new_name: str = attr.ib(default=None)
    pilot_user_id: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib(default=None)
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib(default=None)
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib(default=None)
    allow_termination_to_dtg_identity: bool = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib(default=None)
    include_dtg_identity: bool = attr.ib(default=None)
    include_trunk_group_identity_for_network_calls: bool = attr.ib(default=None)
    include_otg_identity_for_network_calls: bool = attr.ib(default=None)
    enable_network_address_identity: bool = attr.ib(default=None)
    allow_unscreened_calls: bool = attr.ib(default=None)
    allow_unscreened_emergency_calls: bool = attr.ib(default=None)
    pilot_user_calling_line_identity_for_external_calls_policy: str = attr.ib(default=None)
    pilot_user_charge_number_policy: str = attr.ib(default=None)
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib(default=None)
    prefix_enabled: bool = attr.ib(default=None)
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib(default=None)
    send_continuous_options_message: bool = attr.ib(default=None)
    continuous_options_sending_interval_seconds: int = attr.ib(default=None)
    failure_options_sending_interval_seconds: int = attr.ib(default=None)
    failure_threshold_counter: int = attr.ib(default=None)
    success_threshold_counter: int = attr.ib(default=None)
    invite_failure_threshold_counter: int = attr.ib(default=None)
    invite_failure_threshold_window_seconds: int = attr.ib(default=None)
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib(default=None)
    use_system_calling_line_asserted_identity_policy: bool = attr.ib(default=None)
    pilot_user_call_optimization_policy: str = attr.ib(default=None)
    clid_source_for_screened_calls_policy: str = attr.ib(default=None)
    use_system_clid_source_for_screened_calls_policy: bool = attr.ib(default=None)
    user_lookup_policy: str = attr.ib(default=None)
    use_system_user_lookup_policy: bool = attr.ib(default=None)
    pilot_user_calling_line_identity_for_emergency_calls_policy: str = attr.ib(default=None)
    implicit_registration_set_support_policy: str = attr.ib(default=None)
    use_system_implicit_registration_set_support_policy: bool = attr.ib(default=None)
    sip_identity_for_pilot_and_proxy_trunk_modes_policy: str = attr.ib(default=None)
    use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy: bool = attr.ib(default=None)
    use_system_support_connected_identity_policy: bool = attr.ib(default=None)
    support_connected_identity_policy: str = attr.ib(default=None)
    use_system_options_message_response_status_codes: bool = attr.ib(default=None)
    delete_options_message_response_status_code: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_name", "newName", str),
            E("pilot_user_id", "pilotUserId", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int),
            E("require_authentication", "requireAuthentication", bool),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E(
                "hosted_user_id_list",
                "hostedUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
            ),
            E("include_trunk_group_identity", "includeTrunkGroupIdentity", bool),
            E("include_dtg_identity", "includeDtgIdentity", bool),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
            ),
            E("enable_network_address_identity", "enableNetworkAddressIdentity", bool),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool),
            E("allow_unscreened_emergency_calls", "allowUnscreenedEmergencyCalls", bool),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
            ),
            E("pilot_user_charge_number_policy", "pilotUserChargeNumberPolicy", str),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool),
            E("prefix_enabled", "prefixEnabled", bool),
            E("prefix", "prefix", str),
            E("stateful_rerouting_enabled", "statefulReroutingEnabled", bool),
            E("send_continuous_options_message", "sendContinuousOptionsMessage", bool),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
            ),
            E("failure_threshold_counter", "failureThresholdCounter", int),
            E("success_threshold_counter", "successThresholdCounter", int),
            E("invite_failure_threshold_counter", "inviteFailureThresholdCounter", int),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
            ),
            E("user_lookup_policy", "userLookupPolicy", str),
            E("use_system_user_lookup_policy", "useSystemUserLookupPolicy", bool),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
            ),
            E(
                "implicit_registration_set_support_policy",
                "implicitRegistrationSetSupportPolicy",
                str,
            ),
            E(
                "use_system_implicit_registration_set_support_policy",
                "useSystemImplicitRegistrationSetSupportPolicy",
                bool,
            ),
            E(
                "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "sipIdentityForPilotAndProxyTrunkModesPolicy",
                str,
            ),
            E(
                "use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy",
                bool,
            ),
            E(
                "use_system_support_connected_identity_policy",
                "useSystemSupportConnectedIdentityPolicy",
                bool,
            ),
            E(
                "support_connected_identity_policy",
                "supportConnectedIdentityPolicy",
                str,
            ),
            E(
                "use_system_options_message_response_status_codes",
                "useSystemOptionsMessageResponseStatusCodes",
                bool,
            ),
            E(
                "delete_options_message_response_status_code",
                "deleteOptionsMessageResponseStatusCode",
                str,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupModifyRequest(OCIRequest):
    """
    Modify the maximum and bursting maximum permissible active Trunk Group calls for the
    group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        max_active_calls: maxActiveCalls
        bursting_max_active_calls: burstingMaxActiveCalls
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    max_active_calls: "OCI.UnboundedNonNegativeInt" = attr.ib(default=None)
    bursting_max_active_calls: "OCI.UnboundedNonNegativeInt" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "max_active_calls",
                "maxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
            ),
            E(
                "bursting_max_active_calls",
                "burstingMaxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupModifyRequest14sp9(OCIRequest):
    """
    Modify the maximum and bursting maximum permissible active Trunk Group calls for the
    group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        max_active_calls: maxActiveCalls
        bursting_max_active_calls: burstingMaxActiveCalls
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    max_active_calls: int = attr.ib(default=None)
    bursting_max_active_calls: "OCI.UnboundedNonNegativeInt" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("max_active_calls", "maxActiveCalls", int),
            E(
                "bursting_max_active_calls",
                "burstingMaxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupOptionsMessageResponseStatusCodeAddListRequest(OCIRequest):
    """
    Add a list of trunk group level successful SIP OPTIONS message respoonse status codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        status_code: statusCode
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    status_code: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("status_code", "statusCode", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupSecurityClassificationGetRequest(OCIRequest):
    """
    Get a trunk group's Security Classifications configuration.

    The response is either ``GroupTrunkGroupSecurityClassificationGetResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupSecurityClassificationModifyRequest(OCIRequest):
    """
    Modify a trunk group's Security Classification configuration The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        trunk_group_key: trunkGroupKey
        default_security_classification: defaultSecurityClassification
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    default_security_classification: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "default_security_classification",
                "defaultSecurityClassification",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskAddRequest14sp4(OCIRequest):
    """
    Add a user creation task for a trunk group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        task_name: taskName
        user_id_format: userIdFormat
        user_id_domain: userIdDomain
        populate_extension: populateExtension
        line_port_format: linePortFormat
        line_port_domain: linePortDomain
        populate_contact: populateContact
        contact_format: contactFormat
        contact_domain: contactDomain
        user_phone_numbers: userPhoneNumbers
        user_extensions: userExtensions
        service_pack_name: servicePackName
        user_service: userService
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    task_name: str = attr.ib()
    user_id_format: str = attr.ib()
    user_id_domain: str = attr.ib()
    populate_extension: bool = attr.ib()
    line_port_format: str = attr.ib()
    line_port_domain: str = attr.ib()
    populate_contact: bool = attr.ib()
    contact_format: str = attr.ib(default=None)
    contact_domain: str = attr.ib(default=None)
    user_phone_numbers: str = attr.ib(default=None)
    user_extensions: str = attr.ib(default=None)
    service_pack_name: List[str] = attr.ib(default=None)
    user_service: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("task_name", "taskName", str, is_required=True),
            E("user_id_format", "userIdFormat", str, is_required=True),
            E("user_id_domain", "userIdDomain", str, is_required=True),
            E("populate_extension", "populateExtension", bool, is_required=True),
            E("line_port_format", "linePortFormat", str, is_required=True),
            E("line_port_domain", "linePortDomain", str, is_required=True),
            E("populate_contact", "populateContact", bool, is_required=True),
            E("contact_format", "contactFormat", str),
            E("contact_domain", "contactDomain", str),
            E("user_phone_numbers", "userPhoneNumbers", str, is_complex=True),  # unknown
            E("user_extensions", "userExtensions", str, is_complex=True),  # unknown
            E("service_pack_name", "servicePackName", str, is_array=True),
            E("user_service", "userService", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskDeleteRequest14sp4(OCIRequest):
    """
    Delete a user creation task for a trunk group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        task_name: taskName
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskGetListRequest14sp4(OCIRequest):
    """
    Get the list of user creation tasks for a trunk group.

    The response is either ``GroupTrunkGroupUserCreationTaskGetListResponse14sp4()`` or
    ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupUserCreationTaskGetRequest14sp4(OCIRequest):
    """
    Request the details of a specified user creation task for a trunk group.

    The response is either ``GroupTrunkGroupUserCreationTaskGetResponse14sp4()`` or
    ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        task_name: taskName
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    task_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("task_name", "taskName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVirtualOnNetEnterpriseExtensionsGetUserListRequest(OCIRequest):
    """
    Request the list of Virtual On-Net users in a Group.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a
    ``GroupVirtualOnNetEnterpriseExtensionsGetUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_virtual_on_net_call_type_name:
            searchCriteriaExactVirtualOnNetCallTypeName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_virtual_on_net_call_type_name: "OCI.SearchCriteriaExactVirtualOnNetCallTypeName" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_virtual_on_net_call_type_name",
                "searchCriteriaExactVirtualOnNetCallTypeName",
                OCI.SearchCriteriaExactVirtualOnNetCallTypeName,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupModifyVoicePortalBrandingRequest(OCIRequest):
    """
    Modify the group's voice portal branding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupVoiceMessagingGroupModifyVoicePortalBrandingRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file: voicePortalGreetingFile
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    voice_portal_greeting_selection: str = attr.ib(default=None)
    voice_portal_greeting_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    voice_messaging_greeting_selection: str = attr.ib(default=None)
    voice_messaging_greeting_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("voice_portal_greeting_selection", "voicePortalGreetingSelection", str),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupModifyVoicePortalBrandingRequest16(OCIRequest):
    """
    Modify the group's voice portal branding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file: voicePortalGreetingFile
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    voice_portal_greeting_selection: str = attr.ib(default=None)
    voice_portal_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    voice_messaging_greeting_selection: str = attr.ib(default=None)
    voice_messaging_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("voice_portal_greeting_selection", "voicePortalGreetingSelection", str),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupModifyVoicePortalBrandingRequest20(OCIRequest):
    """
    Modify the group's voice portal branding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file: voicePortalGreetingFile
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    voice_portal_greeting_selection: str = attr.ib(default=None)
    voice_portal_greeting_file: "OCI.AnnouncementFileKey" = attr.ib(default=None)
    voice_messaging_greeting_selection: str = attr.ib(default=None)
    voice_messaging_greeting_file: "OCI.AnnouncementFileKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("voice_portal_greeting_selection", "voicePortalGreetingSelection", str),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.AnnouncementFileKey,
                is_complex=True,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.AnnouncementFileKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceXmlModifyActiveInstanceListRequest(OCIRequest):
    """
    Request to set the active status of VoiceXML instances.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_activation: serviceActivation
    """

    service_activation: List[OCI.ServiceActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "service_activation",
                "serviceActivation",
                OCI.ServiceActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceAddRequest14(OCIRequest):
    """
    Request to add a service provider access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_provisioning_password: mobilityManagerProvisioningPassword
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        access_device_credentials: accessDeviceCredentials
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    device_type: str = attr.ib()
    protocol: str = attr.ib(default=None)
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    outbound_proxy_server_net_address: str = attr.ib(default=None)
    stun_server_net_address: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    serial_number: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    physical_location: str = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    mobility_manager_provisioning_url: str = attr.ib(default=None)
    mobility_manager_provisioning_user_name: str = attr.ib(default=None)
    mobility_manager_provisioning_password: str = attr.ib(default=None)
    mobility_manager_default_originating_service_key: int = attr.ib(default=None)
    mobility_manager_default_terminating_service_key: int = attr.ib(default=None)
    use_custom_user_name_password: bool = attr.ib(default=None)
    access_device_credentials: "OCI.DeviceManagementUserNamePassword16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_provisioning_password",
                "mobilityManagerProvisioningPassword",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E(
                "access_device_credentials",
                "accessDeviceCredentials",
                OCI.DeviceManagementUserNamePassword16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileModifyRequest(OCIRequest):
    """
    Request to modify a specified service provider/enterprise access device file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``ServiceProviderAccessDeviceFileModifyRequest14sp8()``

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        file_type: fileType
        file_source: fileSource
        upload_file: uploadFile
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    file_type: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceFileModifyRequest14sp8(OCIRequest):
    """
    Request to modify a specified service provider/enterprise access device file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: extendedCaptureEnabled

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        file_format: fileFormat
        file_source: fileSource
        upload_file: uploadFile
        extended_capture_enabled: extendedCaptureEnabled
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    file_format: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    extended_capture_enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E("extended_capture_enabled", "extendedCaptureEnabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceGetListRequest(OCIRequest):
    """
    Requests the list of access devices in a service provider.

    The response is either ``ServiceProviderAccessDeviceGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_exact_device_type: searchCriteriaExactDeviceType
        search_criteria_access_device_version: searchCriteriaAccessDeviceVersion
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_exact_device_type: "OCI.SearchCriteriaExactDeviceType" = attr.ib(default=None)
    search_criteria_access_device_version: List[OCI.SearchCriteriaAccessDeviceVersion] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_device_type",
                "searchCriteriaExactDeviceType",
                OCI.SearchCriteriaExactDeviceType,
                is_complex=True,
            ),
            E(
                "search_criteria_access_device_version",
                "searchCriteriaAccessDeviceVersion",
                OCI.SearchCriteriaAccessDeviceVersion,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceModifyRequest14(OCIRequest):
    """
    Request to modify a specified service provider access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_provisioning_password: mobilityManagerProvisioningPassword
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        access_device_credentials: accessDeviceCredentials
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    protocol: str = attr.ib(default=None)
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    outbound_proxy_server_net_address: str = attr.ib(default=None)
    stun_server_net_address: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    serial_number: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    physical_location: str = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    mobility_manager_provisioning_url: str = attr.ib(default=None)
    mobility_manager_provisioning_user_name: str = attr.ib(default=None)
    mobility_manager_provisioning_password: str = attr.ib(default=None)
    mobility_manager_default_originating_service_key: int = attr.ib(default=None)
    mobility_manager_default_terminating_service_key: int = attr.ib(default=None)
    use_custom_user_name_password: bool = attr.ib(default=None)
    access_device_credentials: "OCI.DeviceManagementUserNamePassword16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_provisioning_password",
                "mobilityManagerProvisioningPassword",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E(
                "access_device_credentials",
                "accessDeviceCredentials",
                OCI.DeviceManagementUserNamePassword16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAddRequest13mp2(OCIRequest):
    """
    Add a service provider or enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        is_enterprise: isEnterprise
        use_custom_routing_profile: useCustomRoutingProfile
        service_provider_id: serviceProviderId
        default_domain: defaultDomain
        service_provider_name: serviceProviderName
        support_email: supportEmail
        contact: contact
        address: address
    """

    is_enterprise: bool = attr.ib(default=None)
    use_custom_routing_profile: bool = attr.ib(default=None)
    service_provider_id: str = attr.ib()
    default_domain: str = attr.ib()
    service_provider_name: str = attr.ib(default=None)
    support_email: str = attr.ib(default=None)
    contact: "OCI.Contact" = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_enterprise", "isEnterprise", bool),
            E("use_custom_routing_profile", "useCustomRoutingProfile", bool),
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("default_domain", "defaultDomain", str, is_required=True),
            E("service_provider_name", "serviceProviderName", str),
            E("support_email", "supportEmail", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAnswerConfirmationModifyRequest(OCIRequest):
    """
    Modify a service provider or enterprise's answer confirmation settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``ServiceProviderAnswerConfirmationModifyRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        announcement_message_selection: announcementMessageSelection
        confirmation_message_audio_file: confirmationMessageAudioFile
        confirmation_timout_seconds: confirmationTimoutSeconds
    """

    service_provider_id: str = attr.ib()
    announcement_message_selection: str = attr.ib(default=None)
    confirmation_message_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    confirmation_timout_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("announcement_message_selection", "announcementMessageSelection", str),
            E(
                "confirmation_message_audio_file",
                "confirmationMessageAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E("confirmation_timout_seconds", "confirmationTimoutSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAnswerConfirmationModifyRequest16(OCIRequest):
    """
    Modify a service provider or enterprise's answer confirmation settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        announcement_message_selection: announcementMessageSelection
        confirmation_message_audio_file: confirmationMessageAudioFile
        confirmation_timout_seconds: confirmationTimoutSeconds
    """

    service_provider_id: str = attr.ib()
    announcement_message_selection: str = attr.ib(default=None)
    confirmation_message_audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    confirmation_timout_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("announcement_message_selection", "announcementMessageSelection", str),
            E(
                "confirmation_message_audio_file",
                "confirmationMessageAudioFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E("confirmation_timout_seconds", "confirmationTimoutSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all Mobile Subscriber Directory Numbers in a service
    provider.

    This command is applicable only for service providers and will fail for enterprises.

    The response is either
    ``ServiceProviderBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_mobile_subscriber_directory_number:
            searchCriteriaMobileSubscriberDirectoryNumber
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_mobile_network: searchCriteriaExactMobileNetwork
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mobile_subscriber_directory_number: List[OCI.SearchCriteriaMobileSubscriberDirectoryNumber] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_mobile_network: "OCI.SearchCriteriaExactMobileNetwork" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_mobile_subscriber_directory_number",
                "searchCriteriaMobileSubscriberDirectoryNumber",
                OCI.SearchCriteriaMobileSubscriberDirectoryNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_mobile_network",
                "searchCriteriaExactMobileNetwork",
                OCI.SearchCriteriaExactMobileNetwork,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListRequest(OCIRequest):
    """
    Get an existing Digit Pattern Criteria.

    The response is either a
    ``ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        response_size_limit: responseSizeLimit
        search_criteria_digit_pattern: searchCriteriaDigitPattern
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_digit_pattern: List[OCI.SearchCriteriaDigitPattern] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_digit_pattern",
                "searchCriteriaDigitPattern",
                OCI.SearchCriteriaDigitPattern,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileAddRequest(OCIRequest):
    """
    Add a new Communication Barring Profile.

    The priorities for OriginatingRules, RedirectingRules and IncomingRules are
    requantized to consecutive integers as part of the add.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        become_default: becomeDefault
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib()
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule] = attr.ib(default=None)
    redirecting_default_action: str = attr.ib()
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule] = attr.ib(default=None)
    incoming_default_action: str = attr.ib()
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: List[OCI.CommunicationBarringIncomingRule] = attr.ib(default=None)
    become_default: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E("become_default", "becomeDefault", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileAddRequest17sp3(OCIRequest):
    """
    Add a new Communication Barring Profile.

    The priorities for OriginatingRules, RedirectingRules, CallMeNowRules and
    IncomingRules are requantized to consecutive integers as part of the add.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callMeNowDefaultAction, use value
    "Block" in HSS data mode callMeNowDefaultCallTimeout callMeNowRule

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        become_default: becomeDefault
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib()
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule] = attr.ib(default=None)
    redirecting_default_action: str = attr.ib()
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule] = attr.ib(default=None)
    call_me_now_default_action: str = attr.ib()
    call_me_now_default_call_timeout: int = attr.ib(default=None)
    call_me_now_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule] = attr.ib(default=None)
    incoming_default_action: str = attr.ib()
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: List[OCI.CommunicationBarringIncomingRule] = attr.ib(default=None)
    become_default: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E("become_default", "becomeDefault", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileAddRequest19sp1(OCIRequest):
    """
    Add a new Communication Barring Profile.

    The priorities for OriginatingRules, RedirectingRules, CallMeNowRules and
    IncomingRules are requantized to consecutive integers as part of the add.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callMeNowDefaultAction, use value
    "Block" in HSS data mode callMeNowDefaultCallTimeout callMeNowRule
    applyToAttendedCallTransfers, use value "false" in HSS data mode

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        become_default: becomeDefault
        apply_to_attended_call_transfers: applyToAttendedCallTransfers
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib()
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule] = attr.ib(default=None)
    redirecting_default_action: str = attr.ib()
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule] = attr.ib(default=None)
    call_me_now_default_action: str = attr.ib()
    call_me_now_default_call_timeout: int = attr.ib(default=None)
    call_me_now_rule: List[OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule] = attr.ib(default=None)
    incoming_default_action: str = attr.ib()
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: List[OCI.CommunicationBarringIncomingRule19sp1] = attr.ib(default=None)
    become_default: bool = attr.ib()
    apply_to_attended_call_transfers: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.ServiceProviderCommunicationBarringHierarchicalCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule19sp1,
                is_complex=True,
                is_array=True,
            ),
            E("become_default", "becomeDefault", bool, is_required=True),
            E(
                "apply_to_attended_call_transfers",
                "applyToAttendedCallTransfers",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileGetAssignedGroupListRequest(OCIRequest):
    """
    Get a list of groups within a service provider that have a given Communication Barring
    Profile assigned.

    The response is either a
    ``ServiceProviderCommunicationBarringProfileGetAssignedGroupListResponse()`` or an
    ``ErorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        profile: profile
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
    """

    service_provider_id: str = attr.ib()
    profile: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("profile", "profile", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDeviceManagementEventGetListRequest(OCIRequest):
    """
    Request device management's events for a specific queue.

    It is possible to restrict the number of rows returned using responseSizeLimit.  If
    eventQueueType is not specified, the events from all the event queues are returned.

    The response is either a ``ServiceProviderDeviceManagementEventGetListResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        event_queue_type: eventQueueType
        response_size_limit: responseSizeLimit
        search_criteria_exact_device_management_event_status_in_progress_or_pending:
            searchCriteriaExactDeviceManagementEventStatusInProgressOrPending
        search_criteria_exact_device_management_event_status_completed:
            searchCriteriaExactDeviceManagementEventStatusCompleted
        search_criteria_exact_device_management_event_action:
            searchCriteriaExactDeviceManagementEventAction
        search_criteria_exact_device_management_event_level:
            searchCriteriaExactDeviceManagementEventLevel
        search_criteria_exact_device_management_event_type:
            searchCriteriaExactDeviceManagementEventType
        search_criteria_device_management_event_additional_info:
            searchCriteriaDeviceManagementEventAdditionalInfo
        search_criteria_device_management_event_login_id:
            searchCriteriaDeviceManagementEventLoginId
    """

    service_provider_id: str = attr.ib()
    event_queue_type: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_exact_device_management_event_status_in_progress_or_pending: "OCI.SearchCriteriaExactDeviceManagementEventStatusInProgressOrPending" = attr.ib(default=None)
    search_criteria_exact_device_management_event_status_completed: "OCI.SearchCriteriaExactDeviceManagementEventStatusCompleted" = attr.ib(default=None)
    search_criteria_exact_device_management_event_action: "OCI.SearchCriteriaExactDeviceManagementEventAction" = attr.ib(default=None)
    search_criteria_exact_device_management_event_level: "OCI.SearchCriteriaExactDeviceManagementEventLevel" = attr.ib(default=None)
    search_criteria_exact_device_management_event_type: "OCI.SearchCriteriaExactDeviceManagementEventType" = attr.ib(default=None)
    search_criteria_device_management_event_additional_info: List[OCI.SearchCriteriaDeviceManagementEventAdditionalInfo] = attr.ib(default=None)
    search_criteria_device_management_event_login_id: List[OCI.SearchCriteriaDeviceManagementEventLoginId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("event_queue_type", "eventQueueType", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_exact_device_management_event_status_in_progress_or_pending",
                "searchCriteriaExactDeviceManagementEventStatusInProgressOrPending",
                OCI.SearchCriteriaExactDeviceManagementEventStatusInProgressOrPending,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_status_completed",
                "searchCriteriaExactDeviceManagementEventStatusCompleted",
                OCI.SearchCriteriaExactDeviceManagementEventStatusCompleted,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_action",
                "searchCriteriaExactDeviceManagementEventAction",
                OCI.SearchCriteriaExactDeviceManagementEventAction,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_level",
                "searchCriteriaExactDeviceManagementEventLevel",
                OCI.SearchCriteriaExactDeviceManagementEventLevel,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_type",
                "searchCriteriaExactDeviceManagementEventType",
                OCI.SearchCriteriaExactDeviceManagementEventType,
                is_complex=True,
            ),
            E(
                "search_criteria_device_management_event_additional_info",
                "searchCriteriaDeviceManagementEventAdditionalInfo",
                OCI.SearchCriteriaDeviceManagementEventAdditionalInfo,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_management_event_login_id",
                "searchCriteriaDeviceManagementEventLoginId",
                OCI.SearchCriteriaDeviceManagementEventLoginId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialableCallerIDCriteriaModifyRequest(OCIRequest):
    """
    Modify a Dialable Caller ID Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        new_name: newName
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    prefix_digits: str = attr.ib(default=None)
    match_call_type: "OCI.ReplacementCommunicationBarringCallTypeList" = attr.ib(default=None)
    match_alternate_call_indicator: "OCI.ReplacementCommunicationBarringAlternateCallIndicatorList" = attr.ib(default=None)
    match_local_category: bool = attr.ib(default=None)
    match_national_category: bool = attr.ib(default=None)
    match_interlata_category: bool = attr.ib(default=None)
    match_intralata_category: bool = attr.ib(default=None)
    match_international_category: bool = attr.ib(default=None)
    match_private_category: bool = attr.ib(default=None)
    match_emergency_category: bool = attr.ib(default=None)
    match_other_category: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E(
                "match_call_type",
                "matchCallType",
                OCI.ReplacementCommunicationBarringCallTypeList,
                is_complex=True,
            ),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                OCI.ReplacementCommunicationBarringAlternateCallIndicatorList,
                is_complex=True,
            ),
            E("match_local_category", "matchLocalCategory", bool),
            E("match_national_category", "matchNationalCategory", bool),
            E("match_interlata_category", "matchInterlataCategory", bool),
            E("match_intralata_category", "matchIntralataCategory", bool),
            E("match_international_category", "matchInternationalCategory", bool),
            E("match_private_category", "matchPrivateCategory", bool),
            E("match_emergency_category", "matchEmergencyCategory", bool),
            E("match_other_category", "matchOtherCategory", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDialableCallerIDModifyRequest(OCIRequest):
    """
    Modify the service provider?s Dialable Caller ID settings and criteria list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        use_service_provider_criteria: useServiceProviderCriteria
        ns_screening_failure_policy: nsScreeningFailurePolicy
        criteria_priority_order: criteriaPriorityOrder
    """

    service_provider_id: str = attr.ib()
    use_service_provider_criteria: bool = attr.ib(default=None)
    ns_screening_failure_policy: str = attr.ib(default=None)
    criteria_priority_order: List[OCI.DialableCallerIDCriteriaPriorityOrder] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("use_service_provider_criteria", "useServiceProviderCriteria", bool),
            E("ns_screening_failure_policy", "nsScreeningFailurePolicy", str),
            E(
                "criteria_priority_order",
                "criteriaPriorityOrder",
                OCI.DialableCallerIDCriteriaPriorityOrder,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDnAddListRequest(OCIRequest):
    """
    Adds DNs to a service provider.

    It is possible to add either: a single DN, or a list of DNs, or a range of DNs, or any
    combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        phone_number: phoneNumber
        dn_range: dnRange
    """

    service_provider_id: str = attr.ib()
    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDnDeleteListRequest(OCIRequest):
    """
    Deletes DNs from a service provider.

    It is possible to delete either: a single DN, or a list of DNs, or a range of DNs, or
    any combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        phone_number: phoneNumber
        dn_range: dnRange
    """

    service_provider_id: str = attr.ib()
    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderDomainGetAssignedGroupListRequest(OCIRequest):
    """
    Requests a list of groups within a service provider that have a given domain assigned.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``ServiceProviderDomainGetAssignedGroupListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        domain: domain
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
    """

    service_provider_id: str = attr.ib()
    domain: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("domain", "domain", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFeatureAccessCodeModifyListRequest(OCIRequest):
    """
    Modify a list of feature access codes for a service provider or enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        feature_access_code: featureAccessCode
    """

    service_provider_id: str = attr.ib()
    feature_access_code: List[OCI.FeatureAccessCodeEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFeatureAccessCodeModifyListRequest20(OCIRequest):
    """
    Modify a list of feature access codes for a service provider or enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. In release
    20 the "Call Recording" FAC name is changed to "Call Recording - Start". Replaced by:
    ``ServiceProviderFeatureAccessCodeModifyListRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        feature_access_code: featureAccessCode
    """

    service_provider_id: str = attr.ib()
    feature_access_code: List[OCI.FeatureAccessCodeEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderFeatureAccessCodeModifyListRequest21(OCIRequest):
    """
    Modify a list of feature access codes for a service provider or enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. In release
    20 the "Call Recording" FAC name is changed to "Call Recording - Start".

    Attributes:
        service_provider_id: serviceProviderId
        feature_access_code: featureAccessCode
    """

    service_provider_id: str = attr.ib()
    feature_access_code: List[OCI.FeatureAccessCodeModifyEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeModifyEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderGetListRequest(OCIRequest):
    """
    Request a list of service providers and/or enterprises in the system.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``ServiceProviderGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        is_enterprise: isEnterprise
        response_size_limit: responseSizeLimit
        search_criteria_service_provider_id: searchCriteriaServiceProviderId
        search_criteria_service_provider_name: searchCriteriaServiceProviderName
    """

    is_enterprise: bool = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_service_provider_id: List[OCI.SearchCriteriaServiceProviderId] = attr.ib(default=None)
    search_criteria_service_provider_name: List[OCI.SearchCriteriaServiceProviderName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("is_enterprise", "isEnterprise", bool),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_service_provider_id",
                "searchCriteriaServiceProviderId",
                OCI.SearchCriteriaServiceProviderId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_service_provider_name",
                "searchCriteriaServiceProviderName",
                OCI.SearchCriteriaServiceProviderName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderIMRNAssignListRequest(OCIRequest):
    """
    Assign a list of service provider DNs to the IMRN pool.

    It is possible to assign either: a single DN, or a list of DNs, or a range of DNs, or
    any combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        imrn: imrn
        imrn_range: imrnRange
    """

    service_provider_id: str = attr.ib()
    imrn: List[str] = attr.ib(default=None)
    imrn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("imrn", "imrn", str, is_array=True),
            E("imrn_range", "imrnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderIMRNUnassignListRequest(OCIRequest):
    """
    Unassign a list of service provider DNs from the service provider IMRN pool.

    The DNs then become available for assignment to groups.  It is possible to delete
    either: a single DN, or a list of DNs, or a range of DNs, or any combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        imrn: imrn
        imrn_range: imrnRange
    """

    service_provider_id: str = attr.ib()
    imrn: List[str] = attr.ib(default=None)
    imrn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("imrn", "imrn", str, is_array=True),
            E("imrn_range", "imrnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMWIDeliveryToMobileEndpointModifyRequest(OCIRequest):
    """
    Modify the service provider level MWI custom notifications settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        template_activation: templateActivation
    """

    service_provider_id: str = attr.ib()
    template_activation: List[OCI.MWIDeliveryToMobileEndpointTemplateActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "template_activation",
                "templateActivation",
                OCI.MWIDeliveryToMobileEndpointTemplateActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMeetMeConferencingModifyRequest(OCIRequest):
    """
    Modify the service provider/enterprise level data associated with Meet-Me Conferencing
    functions.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        allocated_ports: allocatedPorts
    """

    service_provider_id: str = attr.ib()
    allocated_ports: "OCI.MeetMeConferencingConferencePorts" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderModifyRequest(OCIRequest):
    """
    Modify the profile for a service provider or enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        default_domain: defaultDomain
        service_provider_name: serviceProviderName
        support_email: supportEmail
        contact: contact
        address: address
        use_service_provider_languages: useServiceProviderLanguages
    """

    service_provider_id: str = attr.ib()
    default_domain: str = attr.ib(default=None)
    service_provider_name: str = attr.ib(default=None)
    support_email: str = attr.ib(default=None)
    contact: "OCI.Contact" = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)
    use_service_provider_languages: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("default_domain", "defaultDomain", str),
            E("service_provider_name", "serviceProviderName", str),
            E("support_email", "supportEmail", str),
            E("contact", "contact", OCI.Contact, is_complex=True),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("use_service_provider_languages", "useServiceProviderLanguages", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceAssignListRequest21(OCIRequest):
    """
    Assign a list of Network Classes of Service to a service provider.

    A default Network Class of Service must be specified unless there is already one
    assigned to the service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: "OCI.DefaultNetworkClassOfService" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E(
                "default_network_class_of_service",
                "defaultNetworkClassOfService",
                OCI.DefaultNetworkClassOfService,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceGetAssignedGroupListRequest(OCIRequest):
    """
    Get a list of groups within a service provider that have a given Network Class of
    Service assigned.

    The response is either a
    ``ServiceProviderNetworkClassOfServiceGetAssignedGroupListResponse()`` or an
    ``ErorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNetworkClassOfServiceUnassignListRequest21(OCIRequest):
    """
    Unassign a list of Network Classes of Service from a service provider.

    If the default Network Class of Service is being unassigned, a new one must be
    specified unless there are no more Network Classes of Service assigned to the service
    provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        network_class_of_service: networkClassOfService
        default_network_class_of_service: defaultNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    network_class_of_service: List[str] = attr.ib(default=None)
    default_network_class_of_service: "OCI.DefaultNetworkClassOfService" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("network_class_of_service", "networkClassOfService", str, is_array=True),
            E(
                "default_network_class_of_service",
                "defaultNetworkClassOfService",
                OCI.DefaultNetworkClassOfService,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderNumberPortabilityQueryGetRequest(OCIRequest):
    """
    Request to get the Service Provider Number Portability Query Digit Pattern Trigger
    List information.

    The response is either a ``ServiceProviderNumberPortabilityQueryGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        include_digit_patterns: includeDigitPatterns
        search_criteria_service_provider_number_portability_query_digit_pattern:
            searchCriteriaServiceProviderNumberPortabilityQueryDigitPattern
        response_size_limit: responseSizeLimit
    """

    service_provider_id: str = attr.ib()
    include_digit_patterns: bool = attr.ib()
    search_criteria_service_provider_number_portability_query_digit_pattern: List[OCI.SearchCriteriaServiceProviderNumberPortabilityQueryDigitPattern] = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("include_digit_patterns", "includeDigitPatterns", bool, is_required=True),
            E(
                "search_criteria_service_provider_number_portability_query_digit_pattern",
                "searchCriteriaServiceProviderNumberPortabilityQueryDigitPattern",
                OCI.SearchCriteriaServiceProviderNumberPortabilityQueryDigitPattern,
                is_complex=True,
                is_array=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderOfficeZoneGetAssignedGroupListRequest(OCIRequest):
    """
    Get a list of groups within a service provider that have a given Office Zone assigned.

    The response is either a ``ServiceProviderOfficeZoneGetAssignedGroupListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        office_zone_name: officeZoneName
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
    """

    service_provider_id: str = attr.ib()
    office_zone_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("office_zone_name", "officeZoneName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRouteListEnterpriseTrunkNumberRangeAddListRequest(OCIRequest):
    """
    Add number ranges to a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        number_range: numberRange
    """

    service_provider_id: str = attr.ib()
    number_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "number_range",
                "numberRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderRoutePointExternalSystemGetAssignedGroupListRequest(OCIRequest):
    """
    Requests a list of groups within a service provider that have a given external system
    assigned.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a
    ``ServiceProviderRoutePointExternalSystemGetAssignedGroupListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        external_system: externalSystem
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
    """

    service_provider_id: str = attr.ib()
    external_system: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("external_system", "externalSystem", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleAddEventRequest(OCIRequest):
    """
    Add an event to service provider schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_key: scheduleKey
        event_name: eventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    service_provider_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    start_date: str = attr.ib()
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib()
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleDeleteEventListRequest(OCIRequest):
    """
    Delete a list of events from a service provider schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_key: scheduleKey
        event_name: eventName
    """

    service_provider_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleDeleteListRequest(OCIRequest):
    """
    Delete a list of service provider schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_key: scheduleKey
    """

    service_provider_id: str = attr.ib()
    schedule_key: List[OCI.ScheduleKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleGetEventListRequest(OCIRequest):
    """
    Get the list of events of a service provider schedule.

    The response is either a ``ServiceProviderScheduleGetEventListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_key: scheduleKey
    """

    service_provider_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleGetEventRequest(OCIRequest):
    """
    Get an event from a service provider schedule.

    The response is either a ``ServiceProviderScheduleGetEventResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_key: scheduleKey
        event_name: eventName
    """

    service_provider_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleModifyEventRequest(OCIRequest):
    """
    Modify an event of a service provider schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_key: scheduleKey
        event_name: eventName
        new_event_name: newEventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    service_provider_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    new_event_name: str = attr.ib(default=None)
    start_date: str = attr.ib(default=None)
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib(default=None)
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("new_event_name", "newEventName", str),
            E("start_date", "startDate", str),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderScheduleModifyRequest(OCIRequest):
    """
    Modify a service provider schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        schedule_key: scheduleKey
        new_schedule_name: newScheduleName
    """

    service_provider_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    new_schedule_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_schedule_name", "newScheduleName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackAddRequest(OCIRequest):
    """
    Request to add a service pack to a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_pack_name: servicePackName
        service_pack_description: servicePackDescription
        is_available_for_use: isAvailableForUse
        service_pack_quantity: servicePackQuantity
        service_name: serviceName
    """

    service_provider_id: str = attr.ib()
    service_pack_name: str = attr.ib()
    service_pack_description: str = attr.ib(default=None)
    is_available_for_use: bool = attr.ib()
    service_pack_quantity: "OCI.UnboundedPositiveInt" = attr.ib()
    service_name: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_pack_name", "servicePackName", str, is_required=True),
            E("service_pack_description", "servicePackDescription", str),
            E("is_available_for_use", "isAvailableForUse", bool, is_required=True),
            E(
                "service_pack_quantity",
                "servicePackQuantity",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("service_name", "serviceName", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskGetAvailableGroupListRequest(OCIRequest):
    """
    Requests a list of groups to migrate.

    The response is either
    ``ServiceProviderServicePackMigrationTaskGetAvailabeGroupListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskModifyAssignmentListRequest(OCIRequest):
    """
    Replace the list of services and packs to be assigned to users during the service pack
    migration.

    Modification is only allowed prior to task execution.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
        user_service_name_list: userServiceNameList
        service_pack_name_list: servicePackNameList
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()
    user_service_name_list: "OCI.ReplacementUserServiceList" = attr.ib(default=None)
    service_pack_name_list: "OCI.ReplacementServicePackNameList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E(
                "user_service_name_list",
                "userServiceNameList",
                OCI.ReplacementUserServiceList,
                is_complex=True,
            ),
            E(
                "service_pack_name_list",
                "servicePackNameList",
                OCI.ReplacementServicePackNameList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskModifyRemovalListRequest(OCIRequest):
    """
    Replace the list of services and packs to be removed from users during the service
    pack migration.

    Modification is only allowed prior to task execution.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
        user_service_name_list: userServiceNameList
        service_pack_name_list: servicePackNameList
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()
    user_service_name_list: "OCI.ReplacementUserServiceList" = attr.ib(default=None)
    service_pack_name_list: "OCI.ReplacementServicePackNameList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E(
                "user_service_name_list",
                "userServiceNameList",
                OCI.ReplacementUserServiceList,
                is_complex=True,
            ),
            E(
                "service_pack_name_list",
                "servicePackNameList",
                OCI.ReplacementServicePackNameList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackMigrationTaskModifyUserSelectionRequest(OCIRequest):
    """
    Replace the list of services and packs used to select which users will be migrated.

    Modification is only allowed prior to task execution.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        task_name: taskName
        user_selection_type: userSelectionType
        user_service_name_list: userServiceNameList
        service_pack_name_list: servicePackNameList
    """

    service_provider_id: str = attr.ib()
    task_name: str = attr.ib()
    user_selection_type: str = attr.ib(default=None)
    user_service_name_list: "OCI.ReplacementUserServiceList" = attr.ib(default=None)
    service_pack_name_list: "OCI.ReplacementServicePackNameList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("task_name", "taskName", str, is_required=True),
            E("user_selection_type", "userSelectionType", str),
            E(
                "user_service_name_list",
                "userServiceNameList",
                OCI.ReplacementUserServiceList,
                is_complex=True,
            ),
            E(
                "service_pack_name_list",
                "servicePackNameList",
                OCI.ReplacementServicePackNameList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServicePackModifyRequest(OCIRequest):
    """
    Requests to modify a service pack for a service provider.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        service_pack_name: servicePackName
        new_service_pack_name: newServicePackName
        service_pack_description: servicePackDescription
        is_available_for_use: isAvailableForUse
        service_pack_quantity: servicePackQuantity
    """

    service_provider_id: str = attr.ib()
    service_pack_name: str = attr.ib()
    new_service_pack_name: str = attr.ib(default=None)
    service_pack_description: str = attr.ib(default=None)
    is_available_for_use: bool = attr.ib(default=None)
    service_pack_quantity: "OCI.UnboundedPositiveInt" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("service_pack_name", "servicePackName", str, is_required=True),
            E("new_service_pack_name", "newServicePackName", str),
            E("service_pack_description", "servicePackDescription", str),
            E("is_available_for_use", "isAvailableForUse", bool),
            E(
                "service_pack_quantity",
                "servicePackQuantity",
                OCI.UnboundedPositiveInt,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderTrunkGroupModifyRequest(OCIRequest):
    """
    Modify the maximum and bursting maximum permissible active Trunk Group calls for the
    service provider.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        max_active_calls: maxActiveCalls
        bursting_max_active_calls: burstingMaxActiveCalls
    """

    service_provider_id: str = attr.ib()
    max_active_calls: "OCI.UnboundedNonNegativeInt" = attr.ib(default=None)
    bursting_max_active_calls: "OCI.UnboundedNonNegativeInt" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "max_active_calls",
                "maxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
            ),
            E(
                "bursting_max_active_calls",
                "burstingMaxActiveCalls",
                OCI.UnboundedNonNegativeInt,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupModifyVoicePortalBrandingRequest(OCIRequest):
    """
    Modify the service provider's voice portal branding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By:
    ``ServiceProviderVoiceMessagingGroupModifyVoicePortalBrandingRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file: voicePortalGreetingFile
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    service_provider_id: str = attr.ib()
    voice_portal_greeting_selection: str = attr.ib(default=None)
    voice_portal_greeting_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    voice_messaging_greeting_selection: str = attr.ib(default=None)
    voice_messaging_greeting_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("voice_portal_greeting_selection", "voicePortalGreetingSelection", str),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderVoiceMessagingGroupModifyVoicePortalBrandingRequest16(OCIRequest):
    """
    Modify the service provider's voice portal branding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        voice_portal_greeting_selection: voicePortalGreetingSelection
        voice_portal_greeting_file: voicePortalGreetingFile
        voice_messaging_greeting_selection: voiceMessagingGreetingSelection
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    service_provider_id: str = attr.ib()
    voice_portal_greeting_selection: str = attr.ib(default=None)
    voice_portal_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    voice_messaging_greeting_selection: str = attr.ib(default=None)
    voice_messaging_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("voice_portal_greeting_selection", "voicePortalGreetingSelection", str),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "voice_messaging_greeting_selection",
                "voiceMessagingGreetingSelection",
                str,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceAddRequest(OCIRequest):
    """
    Request to add a system-level access device.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        device_type: deviceType
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_provisioning_password: mobilityManagerProvisioningPassword
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        access_device_credentials: accessDeviceCredentials
    """

    device_name: str = attr.ib()
    device_type: str = attr.ib()
    protocol: str = attr.ib(default=None)
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    outbound_proxy_server_net_address: str = attr.ib(default=None)
    stun_server_net_address: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    serial_number: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    physical_location: str = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    mobility_manager_provisioning_url: str = attr.ib(default=None)
    mobility_manager_provisioning_user_name: str = attr.ib(default=None)
    mobility_manager_provisioning_password: str = attr.ib(default=None)
    mobility_manager_default_originating_service_key: int = attr.ib(default=None)
    mobility_manager_default_terminating_service_key: int = attr.ib(default=None)
    use_custom_user_name_password: bool = attr.ib(default=None)
    access_device_credentials: "OCI.DeviceManagementUserNamePassword16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("device_type", "deviceType", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_provisioning_password",
                "mobilityManagerProvisioningPassword",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E(
                "access_device_credentials",
                "accessDeviceCredentials",
                OCI.DeviceManagementUserNamePassword16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileModifyRequest(OCIRequest):
    """
    Request to modify a specified system access device file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``SystemAccessDeviceFileModifyRequest14sp8()``

    Attributes:
        device_name: deviceName
        file_type: fileType
        file_source: fileSource
        upload_file: uploadFile
    """

    device_name: str = attr.ib()
    file_type: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceFileModifyRequest14sp8(OCIRequest):
    """
    Request to modify a specified system access device file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: extendedCaptureEnabled

    Attributes:
        device_name: deviceName
        file_format: fileFormat
        file_source: fileSource
        upload_file: uploadFile
        extended_capture_enabled: extendedCaptureEnabled
    """

    device_name: str = attr.ib()
    file_format: str = attr.ib()
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    extended_capture_enabled: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E("extended_capture_enabled", "extendedCaptureEnabled", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetAllRequest(OCIRequest):
    """
    Requests the list of all access devices in the entire system.

    Prior to release 14, this functionality was provided with the
    ``SystemAccessDeviceGetListRequest()``.

    The response is either ``SystemAccessDeviceGetAllResponse()`` or ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_device_type: searchCriteriaExactDeviceType
        search_criteria_exact_device_service_provider:
            searchCriteriaExactDeviceServiceProvider
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_device_type: "OCI.SearchCriteriaExactDeviceType" = attr.ib(default=None)
    search_criteria_exact_device_service_provider: "OCI.SearchCriteriaExactDeviceServiceProvider" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_device_type",
                "searchCriteriaExactDeviceType",
                OCI.SearchCriteriaExactDeviceType,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_service_provider",
                "searchCriteriaExactDeviceServiceProvider",
                OCI.SearchCriteriaExactDeviceServiceProvider,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetListRequest14(OCIRequest):
    """
    Requests the list of access devices defined at the System-level.

    Prior to release 14, this command requested a list of all devices in the entire
    system.  That functionality is now moved to the ``SystemAccessDeviceGetAllRequest()``.

    The response is either ``SystemAccessDeviceGetListResponse14()`` or
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_exact_device_type: searchCriteriaExactDeviceType
        search_criteria_access_device_version: searchCriteriaAccessDeviceVersion
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_exact_device_type: "OCI.SearchCriteriaExactDeviceType" = attr.ib(default=None)
    search_criteria_access_device_version: List[OCI.SearchCriteriaAccessDeviceVersion] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_device_type",
                "searchCriteriaExactDeviceType",
                OCI.SearchCriteriaExactDeviceType,
                is_complex=True,
            ),
            E(
                "search_criteria_access_device_version",
                "searchCriteriaAccessDeviceVersion",
                OCI.SearchCriteriaAccessDeviceVersion,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceGetUserListRequest(OCIRequest):
    """
    Requests the users associated with a specified system access device.

    The response is either ``SystemAccessDeviceGetUserListResponse()`` or
    ``ErrorResponse()``. The following elements are only used in HSS data mode and ignored
    in AS data mode: searchCriteriaAccessDeviceEndpointPrivateIdentity

    Attributes:
        device_name: deviceName
        response_size_limit: responseSizeLimit
        search_criteria_line_port_user_part: searchCriteriaLinePortUserPart
        search_criteria_line_port_domain: searchCriteriaLinePortDomain
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_service_provider: searchCriteriaExactServiceProvider
        search_criteria_exact_endpoint_type: searchCriteriaExactEndpointType
        search_criteria_exact_user_type: searchCriteriaExactUserType
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_port_number: searchCriteriaExactPortNumber
        search_criteria_access_device_endpoint_private_identity:
            searchCriteriaAccessDeviceEndpointPrivateIdentity
    """

    device_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_line_port_user_part: List[OCI.SearchCriteriaLinePortUserPart] = attr.ib(default=None)
    search_criteria_line_port_domain: List[OCI.SearchCriteriaLinePortDomain] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_service_provider: "OCI.SearchCriteriaExactServiceProvider" = attr.ib(default=None)
    search_criteria_exact_endpoint_type: "OCI.SearchCriteriaExactEndpointType" = attr.ib(default=None)
    search_criteria_exact_user_type: "OCI.SearchCriteriaExactUserType" = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_port_number: "OCI.SearchCriteriaExactPortNumber" = attr.ib(default=None)
    search_criteria_access_device_endpoint_private_identity: List[OCI.SearchCriteriaAccessDeviceEndpointPrivateIdentity] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_line_port_user_part",
                "searchCriteriaLinePortUserPart",
                OCI.SearchCriteriaLinePortUserPart,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_domain",
                "searchCriteriaLinePortDomain",
                OCI.SearchCriteriaLinePortDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_service_provider",
                "searchCriteriaExactServiceProvider",
                OCI.SearchCriteriaExactServiceProvider,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_endpoint_type",
                "searchCriteriaExactEndpointType",
                OCI.SearchCriteriaExactEndpointType,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_type",
                "searchCriteriaExactUserType",
                OCI.SearchCriteriaExactUserType,
                is_complex=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_port_number",
                "searchCriteriaExactPortNumber",
                OCI.SearchCriteriaExactPortNumber,
                is_complex=True,
            ),
            E(
                "search_criteria_access_device_endpoint_private_identity",
                "searchCriteriaAccessDeviceEndpointPrivateIdentity",
                OCI.SearchCriteriaAccessDeviceEndpointPrivateIdentity,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemAccessDeviceModifyRequest(OCIRequest):
    """
    Request to modify a specified system access device.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        device_name: deviceName
        protocol: protocol
        net_address: netAddress
        port: port
        outbound_proxy_server_net_address: outboundProxyServerNetAddress
        stun_server_net_address: stunServerNetAddress
        mac_address: macAddress
        serial_number: serialNumber
        description: description
        physical_location: physicalLocation
        transport_protocol: transportProtocol
        mobility_manager_provisioning_url: mobilityManagerProvisioningURL
        mobility_manager_provisioning_user_name: mobilityManagerProvisioningUserName
        mobility_manager_provisioning_password: mobilityManagerProvisioningPassword
        mobility_manager_default_originating_service_key:
            mobilityManagerDefaultOriginatingServiceKey
        mobility_manager_default_terminating_service_key:
            mobilityManagerDefaultTerminatingServiceKey
        use_custom_user_name_password: useCustomUserNamePassword
        access_device_credentials: accessDeviceCredentials
    """

    device_name: str = attr.ib()
    protocol: str = attr.ib(default=None)
    net_address: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    outbound_proxy_server_net_address: str = attr.ib(default=None)
    stun_server_net_address: str = attr.ib(default=None)
    mac_address: str = attr.ib(default=None)
    serial_number: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    physical_location: str = attr.ib(default=None)
    transport_protocol: str = attr.ib(default=None)
    mobility_manager_provisioning_url: str = attr.ib(default=None)
    mobility_manager_provisioning_user_name: str = attr.ib(default=None)
    mobility_manager_provisioning_password: str = attr.ib(default=None)
    mobility_manager_default_originating_service_key: int = attr.ib(default=None)
    mobility_manager_default_terminating_service_key: int = attr.ib(default=None)
    use_custom_user_name_password: bool = attr.ib(default=None)
    access_device_credentials: "OCI.DeviceManagementUserNamePassword16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_name", "deviceName", str, is_required=True),
            E("protocol", "protocol", str),
            E("net_address", "netAddress", str),
            E("port", "port", int),
            E("outbound_proxy_server_net_address", "outboundProxyServerNetAddress", str),
            E("stun_server_net_address", "stunServerNetAddress", str),
            E("mac_address", "macAddress", str),
            E("serial_number", "serialNumber", str),
            E("description", "description", str),
            E("physical_location", "physicalLocation", str),
            E("transport_protocol", "transportProtocol", str),
            E(
                "mobility_manager_provisioning_url",
                "mobilityManagerProvisioningURL",
                str,
            ),
            E(
                "mobility_manager_provisioning_user_name",
                "mobilityManagerProvisioningUserName",
                str,
            ),
            E(
                "mobility_manager_provisioning_password",
                "mobilityManagerProvisioningPassword",
                str,
            ),
            E(
                "mobility_manager_default_originating_service_key",
                "mobilityManagerDefaultOriginatingServiceKey",
                int,
            ),
            E(
                "mobility_manager_default_terminating_service_key",
                "mobilityManagerDefaultTerminatingServiceKey",
                int,
            ),
            E("use_custom_user_name_password", "useCustomUserNamePassword", bool),
            E(
                "access_device_credentials",
                "accessDeviceCredentials",
                OCI.DeviceManagementUserNamePassword16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityAddIMRNListRequest(OCIRequest):
    """
    Adds BroadWorks Mobility IMRN numbers to the system.

    It is possible to add either: a single number, a list of numbers, or a range of
    numbers, or any combination thereof.

    The response is either a ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        imrn_number: imrnNumber
        number_range: numberRange
    """

    imrn_number: List[str] = attr.ib(default=None)
    number_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("imrn_number", "imrnNumber", str, is_array=True),
            E(
                "number_range",
                "numberRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityAddMobileNetworkIMRNListRequest(OCIRequest):
    """
    Adds BroadWorks Mobility IMRN numbers to a Mobile Network.

    It is possible to add either: a single number, a list of numbers, or a range of
    numbers, or any combination thereof.

    The response is either a ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        mobile_network_name: mobileNetworkName
        imrn_number: imrnNumber
        number_range: numberRange
    """

    mobile_network_name: str = attr.ib()
    imrn_number: List[str] = attr.ib(default=None)
    number_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mobile_network_name", "mobileNetworkName", str, is_required=True),
            E("imrn_number", "imrnNumber", str, is_array=True),
            E(
                "number_range",
                "numberRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityGetIMRNListRequest(OCIRequest):
    """
    Request to get the list of BroadWorks Mobility IMRN numbers defined in the system.

    The response is either a ``SystemBroadWorksMobilityGetIMRNListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        search_criteria_imrn: searchCriteriaIMRN
    """

    search_criteria_imrn: List[OCI.SearchCriteriaIMRN] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "search_criteria_imrn",
                "searchCriteriaIMRN",
                OCI.SearchCriteriaIMRN,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityGetMobileNetworkIMRNListRequest(OCIRequest):
    """
    Get a list of BroadWorks Mobility IMRN numbers from a Mobile Network.

    The response is either a
    ``SystemBroadWorksMobilityGetMobileNetworkIMRNListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        mobile_network_name: mobileNetworkName
        search_criteria_imrn: searchCriteriaIMRN
    """

    mobile_network_name: str = attr.ib()
    search_criteria_imrn: List[OCI.SearchCriteriaIMRN] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("mobile_network_name", "mobileNetworkName", str, is_required=True),
            E(
                "search_criteria_imrn",
                "searchCriteriaIMRN",
                OCI.SearchCriteriaIMRN,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListRequest(OCIRequest):
    """
    Request a summary table of all Mobile Subscriber Directory Numbers in a system.

    The response is either
    ``SystemBroadWorksMobilityMobileSubscriberDirectoryNumberGetSummaryListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_mobile_subscriber_directory_number:
            searchCriteriaMobileSubscriberDirectoryNumber
        search_criteria_exact_mobile_network: searchCriteriaExactMobileNetwork
        search_criteria_service_provider_id: searchCriteriaServiceProviderId
        search_criteria_exact_organization_type: searchCriteriaExactOrganizationType
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_mobile_subscriber_directory_number: List[OCI.SearchCriteriaMobileSubscriberDirectoryNumber] = attr.ib(default=None)
    search_criteria_exact_mobile_network: "OCI.SearchCriteriaExactMobileNetwork" = attr.ib(default=None)
    search_criteria_service_provider_id: List[OCI.SearchCriteriaServiceProviderId] = attr.ib(default=None)
    search_criteria_exact_organization_type: "OCI.SearchCriteriaExactOrganizationType" = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_mobile_subscriber_directory_number",
                "searchCriteriaMobileSubscriberDirectoryNumber",
                OCI.SearchCriteriaMobileSubscriberDirectoryNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_mobile_network",
                "searchCriteriaExactMobileNetwork",
                OCI.SearchCriteriaExactMobileNetwork,
                is_complex=True,
            ),
            E(
                "search_criteria_service_provider_id",
                "searchCriteriaServiceProviderId",
                OCI.SearchCriteriaServiceProviderId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_organization_type",
                "searchCriteriaExactOrganizationType",
                OCI.SearchCriteriaExactOrganizationType,
                is_complex=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingBrandingModifyRequest(OCIRequest):
    """
    Request to modify the system branding configuration.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        branding_choice: brandingChoice
        custom_branding_file: customBrandingFile
    """

    branding_choice: str = attr.ib(default=None)
    custom_branding_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("branding_choice", "brandingChoice", str),
            E(
                "custom_branding_file",
                "customBrandingFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingReportTemplateAddRequest(OCIRequest):
    """
    Request to add a system level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        data_template: dataTemplate
        filter_number: filterNumber
        xslt_template: xsltTemplate
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        call_completion_threshold_param: callCompletionThresholdParam
        short_duration_threshold_param: shortDurationThresholdParam
        service_level_threshold_param: serviceLevelThresholdParam
        service_level_inclusions_param: serviceLevelInclusionsParam
        service_level_objective_threshold_param: serviceLevelObjectiveThresholdParam
        abandoned_call_threshold_param: abandonedCallThresholdParam
        service_level_threshold_param_number: serviceLevelThresholdParamNumber
        abandoned_call_threshold_param_number: abandonedCallThresholdParamNumber
        filter_value: filterValue
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    data_template: str = attr.ib()
    filter_number: int = attr.ib(default=None)
    xslt_template: "OCI.LabeledFileResource" = attr.ib()
    scope: str = attr.ib()
    is_enabled: bool = attr.ib()
    is_realtime_report: bool = attr.ib(default=None)
    call_completion_threshold_param: str = attr.ib(default=None)
    short_duration_threshold_param: str = attr.ib(default=None)
    service_level_threshold_param: str = attr.ib(default=None)
    service_level_inclusions_param: str = attr.ib(default=None)
    service_level_objective_threshold_param: str = attr.ib(default=None)
    abandoned_call_threshold_param: str = attr.ib(default=None)
    service_level_threshold_param_number: int = attr.ib(default=None)
    abandoned_call_threshold_param_number: int = attr.ib(default=None)
    filter_value: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E("data_template", "dataTemplate", str, is_required=True),
            E("filter_number", "filterNumber", int),
            E(
                "xslt_template",
                "xsltTemplate",
                OCI.LabeledFileResource,
                is_complex=True,
                is_required=True,
            ),
            E("scope", "scope", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("call_completion_threshold_param", "callCompletionThresholdParam", str),
            E("short_duration_threshold_param", "shortDurationThresholdParam", str),
            E("service_level_threshold_param", "serviceLevelThresholdParam", str),
            E("service_level_inclusions_param", "serviceLevelInclusionsParam", str),
            E(
                "service_level_objective_threshold_param",
                "serviceLevelObjectiveThresholdParam",
                str,
            ),
            E("abandoned_call_threshold_param", "abandonedCallThresholdParam", str),
            E(
                "service_level_threshold_param_number",
                "serviceLevelThresholdParamNumber",
                int,
            ),
            E(
                "abandoned_call_threshold_param_number",
                "abandonedCallThresholdParamNumber",
                int,
            ),
            E("filter_value", "filterValue", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingReportTemplateModifyRequest(OCIRequest):
    """
    Request to modify a system level call center report template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        xslt_template: xsltTemplate
        scope: scope
        is_enabled: isEnabled
        is_realtime_report: isRealtimeReport
        filter_number: filterNumber
        filter_value: filterValue
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    xslt_template: "OCI.LabeledFileResource" = attr.ib(default=None)
    scope: str = attr.ib(default=None)
    is_enabled: bool = attr.ib(default=None)
    is_realtime_report: bool = attr.ib(default=None)
    filter_number: int = attr.ib(default=None)
    filter_value: "OCI.CallCenterReportDataTemplateQueryFilterValueReplacementList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("xslt_template", "xsltTemplate", OCI.LabeledFileResource, is_complex=True),
            E("scope", "scope", str),
            E("is_enabled", "isEnabled", bool),
            E("is_realtime_report", "isRealtimeReport", bool),
            E("filter_number", "filterNumber", int),
            E(
                "filter_value",
                "filterValue",
                OCI.CallCenterReportDataTemplateQueryFilterValueReplacementList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingScheduledReportGetActiveListRequest(OCIRequest):
    """
    Request to get the list of all active call center reporting scheduled reports in the
    system.

    The response is either a
    ``SystemCallCenterEnhancedReportingScheduledReportGetActiveListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_call_center_scheduled_report_service_provider:
            searchCriteriaExactCallCenterScheduledReportServiceProvider
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_call_center_report_template_name:
            searchCriteriaCallCenterReportTemplateName
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_service_provider: "OCI.SearchCriteriaExactCallCenterScheduledReportServiceProvider" = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_call_center_report_template_name: List[OCI.SearchCriteriaCallCenterReportTemplateName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_service_provider",
                "searchCriteriaExactCallCenterScheduledReportServiceProvider",
                OCI.SearchCriteriaExactCallCenterScheduledReportServiceProvider,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_call_center_report_template_name",
                "searchCriteriaCallCenterReportTemplateName",
                OCI.SearchCriteriaCallCenterReportTemplateName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingScheduledReportGetCompletedListRequest(OCIRequest):
    """
    Request to get the list of all completed call center reporting scheduled reports in
    the system.

    The response is either a
    ``SystemCallCenterEnhancedReportingScheduledReportGetCompletedListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_call_center_scheduled_report_service_provider:
            searchCriteriaExactCallCenterScheduledReportServiceProvider
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_call_center_report_template_name:
            searchCriteriaCallCenterReportTemplateName
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_service_provider: "OCI.SearchCriteriaExactCallCenterScheduledReportServiceProvider" = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_call_center_report_template_name: List[OCI.SearchCriteriaCallCenterReportTemplateName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_service_provider",
                "searchCriteriaExactCallCenterScheduledReportServiceProvider",
                OCI.SearchCriteriaExactCallCenterScheduledReportServiceProvider,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_call_center_report_template_name",
                "searchCriteriaCallCenterReportTemplateName",
                OCI.SearchCriteriaCallCenterReportTemplateName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallCenterEnhancedReportingScheduledReportGetListRequest(OCIRequest):
    """
    Request to get the list of all call center reporting scheduled reports in the system.

    The response is either an
    ``SystemCallCenterEnhancedReportingScheduledReportGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_call_center_scheduled_report_service_provider:
            searchCriteriaExactCallCenterScheduledReportServiceProvider
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_call_center_report_template_name:
            searchCriteriaCallCenterReportTemplateName
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_service_provider: "OCI.SearchCriteriaExactCallCenterScheduledReportServiceProvider" = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_call_center_report_template_name: List[OCI.SearchCriteriaCallCenterReportTemplateName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_service_provider",
                "searchCriteriaExactCallCenterScheduledReportServiceProvider",
                OCI.SearchCriteriaExactCallCenterScheduledReportServiceProvider,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_call_center_report_template_name",
                "searchCriteriaCallCenterReportTemplateName",
                OCI.SearchCriteriaCallCenterReportTemplateName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileModifyRequest(OCIRequest):
    """
    Modify a call processing policy profile in system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``SystemCallProcessingPolicyProfileModifyRequest20()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        assigned_subscriber_type_list: assignedSubscriberTypeList
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    assigned_subscriber_type_list: "OCI.ReplacementCallProcessingPolicyProfileSubscriberTypeList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E(
                "assigned_subscriber_type_list",
                "assignedSubscriberTypeList",
                OCI.ReplacementCallProcessingPolicyProfileSubscriberTypeList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileModifyRequest20(OCIRequest):
    """
    Modify a call processing policy profile in system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        assigned_subscriber_type_list: assignedSubscriberTypeList
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    assigned_subscriber_type_list: "OCI.ReplacementCallProcessingPolicyProfileSubscriberTypeList20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E(
                "assigned_subscriber_type_list",
                "assignedSubscriberTypeList",
                OCI.ReplacementCallProcessingPolicyProfileSubscriberTypeList20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCallProcessingPolicyProfileModifyRequest21(OCIRequest):
    """
    Modify a call processing policy profile in system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        assigned_subscriber_type_list: assignedSubscriberTypeList
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    assigned_subscriber_type_list: "OCI.ReplacementCallProcessingPolicyProfileSubscriberTypeList21" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E(
                "assigned_subscriber_type_list",
                "assignedSubscriberTypeList",
                OCI.ReplacementCallProcessingPolicyProfileSubscriberTypeList21,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemClassmarkGetUtilizationListRequest(OCIRequest):
    """
    Get the list of all users associated with a Class Mark in system.

    It is possible to search by various criteria.  Multiple search criteria are logically
    ANDed together.

    The response is either a ``SystemClassmarkGetUtilizationListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        classmark: classmark
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_service_provider_id: searchCriteriaExactServiceProviderId
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    classmark: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_service_provider_id: "OCI.SearchCriteriaExactServiceProvider" = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("classmark", "classmark", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_service_provider_id",
                "searchCriteriaExactServiceProviderId",
                OCI.SearchCriteriaExactServiceProvider,
                is_complex=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCollaborateModifyRequest(OCIRequest):
    """
    Modify the system level data associated with collaborate services.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        collaborate_room_id_length: collaborateRoomIdLength
        instant_room_idle_timeout_seconds: instantRoomIdleTimeoutSeconds
        collaborate_room_maximum_duration_minutes: collaborateRoomMaximumDurationMinutes
        support_outdial: supportOutdial
        max_collaborate_room_participants: maxCollaborateRoomParticipants
        collaborate_active_talker_refresh_interval_seconds:
            collaborateActiveTalkerRefreshIntervalSeconds
        terminate_collaborate_after_grace_period: terminateCollaborateAfterGracePeriod
        collaborate_grace_period: collaborateGracePeriod
        enable_active_collaborate_notification: enableActiveCollaborateNotification
        collaborate_from_address: collaborateFromAddress
    """

    collaborate_room_id_length: int = attr.ib(default=None)
    instant_room_idle_timeout_seconds: int = attr.ib(default=None)
    collaborate_room_maximum_duration_minutes: int = attr.ib(default=None)
    support_outdial: bool = attr.ib(default=None)
    max_collaborate_room_participants: int = attr.ib(default=None)
    collaborate_active_talker_refresh_interval_seconds: int = attr.ib(default=None)
    terminate_collaborate_after_grace_period: bool = attr.ib(default=None)
    collaborate_grace_period: "OCI.CollaborateGracePeriodDuration" = attr.ib(default=None)
    enable_active_collaborate_notification: bool = attr.ib(default=None)
    collaborate_from_address: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("collaborate_room_id_length", "collaborateRoomIdLength", int),
            E("instant_room_idle_timeout_seconds", "instantRoomIdleTimeoutSeconds", int),
            E(
                "collaborate_room_maximum_duration_minutes",
                "collaborateRoomMaximumDurationMinutes",
                int,
            ),
            E("support_outdial", "supportOutdial", bool),
            E(
                "max_collaborate_room_participants",
                "maxCollaborateRoomParticipants",
                int,
            ),
            E(
                "collaborate_active_talker_refresh_interval_seconds",
                "collaborateActiveTalkerRefreshIntervalSeconds",
                int,
            ),
            E(
                "terminate_collaborate_after_grace_period",
                "terminateCollaborateAfterGracePeriod",
                bool,
            ),
            E(
                "collaborate_grace_period",
                "collaborateGracePeriod",
                OCI.CollaborateGracePeriodDuration,
                is_complex=True,
            ),
            E(
                "enable_active_collaborate_notification",
                "enableActiveCollaborateNotification",
                bool,
            ),
            E("collaborate_from_address", "collaborateFromAddress", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringCriteriaModifyRequest(OCIRequest):
    """
    Modify an existing Communication Barring Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_virtual_on_net_call_type: matchVirtualOnNetCallType
        match_public_network: matchPublicNetwork
        match_private_network: matchPrivateNetwork
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
        match_inter_network: matchInterNetwork
        match_inter_hosting_ne: matchInterHostingNE
        match_inter_as: matchInterAS
        match_intra_as: matchIntraAS
        match_charge_calls: matchChargeCalls
        match_no_charge_calls: matchNoChargeCalls
        match_group_calls: matchGroupCalls
        match_enterprise_calls: matchEnterpriseCalls
        match_network_calls: matchNetworkCalls
        match_network_url_calls: matchNetworkURLCalls
        match_repair_calls: matchRepairCalls
        match_emergency_calls: matchEmergencyCalls
        match_internal_calls: matchInternalCalls
        match_location: matchLocation
        match_roaming: matchRoaming
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        match_number_portability_status: matchNumberPortabilityStatus
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    match_call_type: "OCI.ReplacementCommunicationBarringCallTypeList" = attr.ib(default=None)
    match_alternate_call_indicator: "OCI.ReplacementCommunicationBarringAlternateCallIndicatorList" = attr.ib(default=None)
    match_virtual_on_net_call_type: "OCI.ReplacementVirtualOnNetCallTypeNameList" = attr.ib(default=None)
    match_public_network: bool = attr.ib(default=None)
    match_private_network: bool = attr.ib(default=None)
    match_local_category: bool = attr.ib(default=None)
    match_national_category: bool = attr.ib(default=None)
    match_interlata_category: bool = attr.ib(default=None)
    match_intralata_category: bool = attr.ib(default=None)
    match_international_category: bool = attr.ib(default=None)
    match_private_category: bool = attr.ib(default=None)
    match_emergency_category: bool = attr.ib(default=None)
    match_other_category: bool = attr.ib(default=None)
    match_inter_network: bool = attr.ib(default=None)
    match_inter_hosting_ne: bool = attr.ib(default=None)
    match_inter_as: bool = attr.ib(default=None)
    match_intra_as: bool = attr.ib(default=None)
    match_charge_calls: bool = attr.ib(default=None)
    match_no_charge_calls: bool = attr.ib(default=None)
    match_group_calls: bool = attr.ib(default=None)
    match_enterprise_calls: bool = attr.ib(default=None)
    match_network_calls: bool = attr.ib(default=None)
    match_network_url_calls: bool = attr.ib(default=None)
    match_repair_calls: bool = attr.ib(default=None)
    match_emergency_calls: bool = attr.ib(default=None)
    match_internal_calls: bool = attr.ib(default=None)
    match_location: str = attr.ib(default=None)
    match_roaming: str = attr.ib(default=None)
    time_schedule: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)
    match_number_portability_status: "OCI.ReplacementNumberPortabilityStatusList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E(
                "match_call_type",
                "matchCallType",
                OCI.ReplacementCommunicationBarringCallTypeList,
                is_complex=True,
            ),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                OCI.ReplacementCommunicationBarringAlternateCallIndicatorList,
                is_complex=True,
            ),
            E(
                "match_virtual_on_net_call_type",
                "matchVirtualOnNetCallType",
                OCI.ReplacementVirtualOnNetCallTypeNameList,
                is_complex=True,
            ),
            E("match_public_network", "matchPublicNetwork", bool),
            E("match_private_network", "matchPrivateNetwork", bool),
            E("match_local_category", "matchLocalCategory", bool),
            E("match_national_category", "matchNationalCategory", bool),
            E("match_interlata_category", "matchInterlataCategory", bool),
            E("match_intralata_category", "matchIntralataCategory", bool),
            E("match_international_category", "matchInternationalCategory", bool),
            E("match_private_category", "matchPrivateCategory", bool),
            E("match_emergency_category", "matchEmergencyCategory", bool),
            E("match_other_category", "matchOtherCategory", bool),
            E("match_inter_network", "matchInterNetwork", bool),
            E("match_inter_hosting_ne", "matchInterHostingNE", bool),
            E("match_inter_as", "matchInterAS", bool),
            E("match_intra_as", "matchIntraAS", bool),
            E("match_charge_calls", "matchChargeCalls", bool),
            E("match_no_charge_calls", "matchNoChargeCalls", bool),
            E("match_group_calls", "matchGroupCalls", bool),
            E("match_enterprise_calls", "matchEnterpriseCalls", bool),
            E("match_network_calls", "matchNetworkCalls", bool),
            E("match_network_url_calls", "matchNetworkURLCalls", bool),
            E("match_repair_calls", "matchRepairCalls", bool),
            E("match_emergency_calls", "matchEmergencyCalls", bool),
            E("match_internal_calls", "matchInternalCalls", bool),
            E("match_location", "matchLocation", str),
            E("match_roaming", "matchRoaming", str),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
            E(
                "match_number_portability_status",
                "matchNumberPortabilityStatus",
                OCI.ReplacementNumberPortabilityStatusList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringDigitPatternCriteriaGetPatternListRequest(OCIRequest):
    """
    Get an existing Digit Pattern Criteria.

    The response is either a
    ``SystemCommunicationBarringDigitPatternCriteriaGetPatternListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        name: name
        response_size_limit: responseSizeLimit
        search_criteria_digit_pattern: searchCriteriaDigitPattern
    """

    name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_digit_pattern: List[OCI.SearchCriteriaDigitPattern] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_digit_pattern",
                "searchCriteriaDigitPattern",
                OCI.SearchCriteriaDigitPattern,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringIncomingCriteriaModifyRequest(OCIRequest):
    """
    Modify an existing Communication Barring Incoming Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        match_number_portability_status: matchNumberPortabilityStatus
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    time_schedule: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)
    match_number_portability_status: "OCI.ReplacementNumberPortabilityStatusList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("time_schedule", "timeSchedule", str),
            E("holiday_schedule", "holidaySchedule", str),
            E(
                "match_number_portability_status",
                "matchNumberPortabilityStatus",
                OCI.ReplacementNumberPortabilityStatusList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileAddRequest(OCIRequest):
    """
    Add a new Communication Barring Profile.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib()
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: List[OCI.CommunicationBarringOriginatingRule] = attr.ib(default=None)
    redirecting_default_action: str = attr.ib()
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: List[OCI.CommunicationBarringRedirectingRule] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileAddRequest17sp1(OCIRequest):
    """
    Add a new Communication Barring Profile.

    The priorities for IncomingRules are requantized to consecutive integers as part of
    the add.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in HSS data mode: incomingDefaultAction
    incomingDefaultCallTimeout incomingRule

    Attributes:
        name: name
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib()
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: List[OCI.CommunicationBarringOriginatingRule] = attr.ib(default=None)
    redirecting_default_action: str = attr.ib()
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: List[OCI.CommunicationBarringRedirectingRule] = attr.ib(default=None)
    incoming_default_action: str = attr.ib()
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: List[OCI.CommunicationBarringIncomingRule] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileAddRequest17sp3(OCIRequest):
    """
    Add a new Communication Barring Profile.

    The priorities for IncomingRules are requantized to consecutive integers as part of
    the add.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callMeNowDefaultAction, use value
    "Block" in HSS data mode callMeNowDefaultCallTimeout callMeNowRule

    Attributes:
        name: name
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib()
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: List[OCI.CommunicationBarringOriginatingRule] = attr.ib(default=None)
    redirecting_default_action: str = attr.ib()
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: List[OCI.CommunicationBarringRedirectingRule] = attr.ib(default=None)
    incoming_default_action: str = attr.ib()
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: List[OCI.CommunicationBarringIncomingRule] = attr.ib(default=None)
    call_me_now_default_action: str = attr.ib()
    call_me_now_default_call_timeout: int = attr.ib(default=None)
    call_me_now_rule: List[OCI.CommunicationBarringCallMeNowRule] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.CommunicationBarringCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileAddRequest19sp1(OCIRequest):
    """
    Add a new Communication Barring Profile.

    The priorities for IncomingRules are requantized to consecutive integers as part of
    the add.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callMeNowDefaultAction, use value
    "Block" in HSS data mode callMeNowDefaultCallTimeout callMeNowRule
    applyToAttendedCallTransfers, use value "false" in HSS data mode

    Attributes:
        name: name
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        apply_to_attended_call_transfers: applyToAttendedCallTransfers
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib()
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: List[OCI.CommunicationBarringOriginatingRule] = attr.ib(default=None)
    redirecting_default_action: str = attr.ib()
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: List[OCI.CommunicationBarringRedirectingRule] = attr.ib(default=None)
    incoming_default_action: str = attr.ib()
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: List[OCI.CommunicationBarringIncomingRule19sp1] = attr.ib(default=None)
    call_me_now_default_action: str = attr.ib()
    call_me_now_default_call_timeout: int = attr.ib(default=None)
    call_me_now_rule: List[OCI.CommunicationBarringCallMeNowRule] = attr.ib(default=None)
    apply_to_attended_call_transfers: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "originating_default_action",
                "originatingDefaultAction",
                str,
                is_required=True,
            ),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.CommunicationBarringOriginatingRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "redirecting_default_action",
                "redirectingDefaultAction",
                str,
                is_required=True,
            ),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.CommunicationBarringRedirectingRule,
                is_complex=True,
                is_array=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str, is_required=True),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.CommunicationBarringIncomingRule19sp1,
                is_complex=True,
                is_array=True,
            ),
            E(
                "call_me_now_default_action",
                "callMeNowDefaultAction",
                str,
                is_required=True,
            ),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.CommunicationBarringCallMeNowRule,
                is_complex=True,
                is_array=True,
            ),
            E(
                "apply_to_attended_call_transfers",
                "applyToAttendedCallTransfers",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementAutoRebuildConfigModifyListRequest(OCIRequest):
    """
    Request to enable or disable automatic trigger of DM events for OCI request prefixes,
    regardless of the request's version.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        auto_rebuild_config_entry: autoRebuildConfigEntry
    """

    auto_rebuild_config_entry: List[OCI.DeviceManagementAutoRebuildConfigEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "auto_rebuild_config_entry",
                "autoRebuildConfigEntry",
                OCI.DeviceManagementAutoRebuildConfigEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceManagementEventGetListRequest(OCIRequest):
    """
    Request device management's events for a specific queue.

    It is possible to restrict the number of rows returned using responseSizeLimit.  If
    eventQueueType is not specified, the events from all the event queues are returned.

    The response is either a ``SystemDeviceManagementEventGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        event_queue_type: eventQueueType
        response_size_limit: responseSizeLimit
        search_criteria_exact_device_management_event_status_in_progress_or_pending:
            searchCriteriaExactDeviceManagementEventStatusInProgressOrPending
        search_criteria_exact_device_management_event_status_completed:
            searchCriteriaExactDeviceManagementEventStatusCompleted
        search_criteria_exact_device_management_event_action:
            searchCriteriaExactDeviceManagementEventAction
        search_criteria_exact_device_management_event_level:
            searchCriteriaExactDeviceManagementEventLevel
        search_criteria_exact_device_management_event_type:
            searchCriteriaExactDeviceManagementEventType
        search_criteria_device_management_event_additional_info:
            searchCriteriaDeviceManagementEventAdditionalInfo
        search_criteria_device_management_event_login_id:
            searchCriteriaDeviceManagementEventLoginId
    """

    event_queue_type: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_exact_device_management_event_status_in_progress_or_pending: "OCI.SearchCriteriaExactDeviceManagementEventStatusInProgressOrPending" = attr.ib(default=None)
    search_criteria_exact_device_management_event_status_completed: "OCI.SearchCriteriaExactDeviceManagementEventStatusCompleted" = attr.ib(default=None)
    search_criteria_exact_device_management_event_action: "OCI.SearchCriteriaExactDeviceManagementEventAction" = attr.ib(default=None)
    search_criteria_exact_device_management_event_level: "OCI.SearchCriteriaExactDeviceManagementEventLevel" = attr.ib(default=None)
    search_criteria_exact_device_management_event_type: "OCI.SearchCriteriaExactDeviceManagementEventType" = attr.ib(default=None)
    search_criteria_device_management_event_additional_info: List[OCI.SearchCriteriaDeviceManagementEventAdditionalInfo] = attr.ib(default=None)
    search_criteria_device_management_event_login_id: List[OCI.SearchCriteriaDeviceManagementEventLoginId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("event_queue_type", "eventQueueType", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_exact_device_management_event_status_in_progress_or_pending",
                "searchCriteriaExactDeviceManagementEventStatusInProgressOrPending",
                OCI.SearchCriteriaExactDeviceManagementEventStatusInProgressOrPending,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_status_completed",
                "searchCriteriaExactDeviceManagementEventStatusCompleted",
                OCI.SearchCriteriaExactDeviceManagementEventStatusCompleted,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_action",
                "searchCriteriaExactDeviceManagementEventAction",
                OCI.SearchCriteriaExactDeviceManagementEventAction,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_level",
                "searchCriteriaExactDeviceManagementEventLevel",
                OCI.SearchCriteriaExactDeviceManagementEventLevel,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_device_management_event_type",
                "searchCriteriaExactDeviceManagementEventType",
                OCI.SearchCriteriaExactDeviceManagementEventType,
                is_complex=True,
            ),
            E(
                "search_criteria_device_management_event_additional_info",
                "searchCriteriaDeviceManagementEventAdditionalInfo",
                OCI.SearchCriteriaDeviceManagementEventAdditionalInfo,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_management_event_login_id",
                "searchCriteriaDeviceManagementEventLoginId",
                OCI.SearchCriteriaDeviceManagementEventLoginId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceProfileAuthenticationLockoutClearRequest(OCIRequest):
    """
    Request to clear device profile authentication lockouts in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        access_device: accessDevice
    """

    access_device: List[OCI.AccessDeviceKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDeviceKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDeviceProfileAuthenticationLockoutGetRequest(OCIRequest):
    """
    Request to get device password authentication lockout data in the system.

    The response is either a ``SystemDeviceProfileAuthenticationLockoutGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_service_provider_id: searchCriteriaServiceProviderId
        search_criteria_exact_organization_type: searchCriteriaExactOrganizationType
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_exact_device_type: searchCriteriaExactDeviceType
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_service_provider_id: List[OCI.SearchCriteriaServiceProviderId] = attr.ib(default=None)
    search_criteria_exact_organization_type: "OCI.SearchCriteriaExactOrganizationType" = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_exact_device_type: "OCI.SearchCriteriaExactDeviceType" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_service_provider_id",
                "searchCriteriaServiceProviderId",
                OCI.SearchCriteriaServiceProviderId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_organization_type",
                "searchCriteriaExactOrganizationType",
                OCI.SearchCriteriaExactOrganizationType,
                is_complex=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_device_type",
                "searchCriteriaExactDeviceType",
                OCI.SearchCriteriaExactDeviceType,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialableCallerIDCriteriaModifyRequest(OCIRequest):
    """
    Modify a Dialable Caller ID Criteria.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        prefix_digits: prefixDigits
        match_call_type: matchCallType
        match_alternate_call_indicator: matchAlternateCallIndicator
        match_local_category: matchLocalCategory
        match_national_category: matchNationalCategory
        match_interlata_category: matchInterlataCategory
        match_intralata_category: matchIntralataCategory
        match_international_category: matchInternationalCategory
        match_private_category: matchPrivateCategory
        match_emergency_category: matchEmergencyCategory
        match_other_category: matchOtherCategory
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    prefix_digits: str = attr.ib(default=None)
    match_call_type: "OCI.ReplacementCommunicationBarringCallTypeList" = attr.ib(default=None)
    match_alternate_call_indicator: "OCI.ReplacementCommunicationBarringAlternateCallIndicatorList" = attr.ib(default=None)
    match_local_category: bool = attr.ib(default=None)
    match_national_category: bool = attr.ib(default=None)
    match_interlata_category: bool = attr.ib(default=None)
    match_intralata_category: bool = attr.ib(default=None)
    match_international_category: bool = attr.ib(default=None)
    match_private_category: bool = attr.ib(default=None)
    match_emergency_category: bool = attr.ib(default=None)
    match_other_category: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("prefix_digits", "prefixDigits", str),
            E(
                "match_call_type",
                "matchCallType",
                OCI.ReplacementCommunicationBarringCallTypeList,
                is_complex=True,
            ),
            E(
                "match_alternate_call_indicator",
                "matchAlternateCallIndicator",
                OCI.ReplacementCommunicationBarringAlternateCallIndicatorList,
                is_complex=True,
            ),
            E("match_local_category", "matchLocalCategory", bool),
            E("match_national_category", "matchNationalCategory", bool),
            E("match_interlata_category", "matchInterlataCategory", bool),
            E("match_intralata_category", "matchIntralataCategory", bool),
            E("match_international_category", "matchInternationalCategory", bool),
            E("match_private_category", "matchPrivateCategory", bool),
            E("match_emergency_category", "matchEmergencyCategory", bool),
            E("match_other_category", "matchOtherCategory", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemDialableCallerIDModifyRequest(OCIRequest):
    """
    Modify the system level Dialable Caller ID criteria list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        criteria_priority_order: criteriaPriorityOrder
    """

    criteria_priority_order: List[OCI.DialableCallerIDCriteriaPriorityOrder] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "criteria_priority_order",
                "criteriaPriorityOrder",
                OCI.DialableCallerIDCriteriaPriorityOrder,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemEndpointGetListRequest(OCIRequest):
    """
    Request to search endpoints in the system.

    The response is either ``SystemEndpointGetListResponse()`` or ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_service_provider_id: searchCriteriaServiceProviderId
        search_criteria_exact_organization_type: searchCriteriaExactOrganizationType
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_line_port_user_part: searchCriteriaLinePortUserPart
        search_criteria_line_port_domain: searchCriteriaLinePortDomain
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_device_type: searchCriteriaDeviceType
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_service_provider_id: List[OCI.SearchCriteriaServiceProviderId] = attr.ib(default=None)
    search_criteria_exact_organization_type: "OCI.SearchCriteriaExactOrganizationType" = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_line_port_user_part: List[OCI.SearchCriteriaLinePortUserPart] = attr.ib(default=None)
    search_criteria_line_port_domain: List[OCI.SearchCriteriaLinePortDomain] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_device_type: List[OCI.SearchCriteriaDeviceType] = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_service_provider_id",
                "searchCriteriaServiceProviderId",
                OCI.SearchCriteriaServiceProviderId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_organization_type",
                "searchCriteriaExactOrganizationType",
                OCI.SearchCriteriaExactOrganizationType,
                is_complex=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_user_part",
                "searchCriteriaLinePortUserPart",
                OCI.SearchCriteriaLinePortUserPart,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_domain",
                "searchCriteriaLinePortDomain",
                OCI.SearchCriteriaLinePortDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_type",
                "searchCriteriaDeviceType",
                OCI.SearchCriteriaDeviceType,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFeatureAccessCodeModifyListRequest(OCIRequest):
    """
    Modify default Feature Access Codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        feature_access_code: featureAccessCode
    """

    feature_access_code: List[OCI.FeatureAccessCodeEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFeatureAccessCodeModifyListRequest20(OCIRequest):
    """
    Modify default Feature Access Codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. In release
    20 the "Call Recording" FAC name is changed to "Call Recording - Start". Replaced by:
    ``SystemFeatureAccessCodeModifyListRequest21()``

    Attributes:
        feature_access_code: featureAccessCode
    """

    feature_access_code: List[OCI.FeatureAccessCodeEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFeatureAccessCodeModifyListRequest21(OCIRequest):
    """
    Modify default Feature Access Codes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. In release
    20 the "Call Recording" FAC name is changed to "Call Recording - Start".

    Attributes:
        feature_access_code: featureAccessCode
    """

    feature_access_code: List[OCI.FeatureAccessCodeModifyEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.FeatureAccessCodeModifyEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceAddRequest(OCIRequest):
    """
    Add a new file repository.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
        root_directory: rootDirectory
        port: port
        protocol_web_dav: protocolWebDAV
        protocol_ftp: protocolFTP
    """

    name: str = attr.ib()
    root_directory: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    protocol_web_dav: "OCI.FileRepositoryProtocolWebDAV" = attr.ib(default=None)
    protocol_ftp: "OCI.FileRepositoryProtocolFTP" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("root_directory", "rootDirectory", str),
            E("port", "port", int),
            E(
                "protocol_web_dav",
                "protocolWebDAV",
                OCI.FileRepositoryProtocolWebDAV,
                is_complex=True,
            ),
            E(
                "protocol_ftp",
                "protocolFTP",
                OCI.FileRepositoryProtocolFTP,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceAddRequest16(OCIRequest):
    """
    Add a new file repository.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
        root_directory: rootDirectory
        port: port
        protocol_web_dav: protocolWebDAV
        protocol_ftp: protocolFTP
    """

    name: str = attr.ib()
    root_directory: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    protocol_web_dav: "OCI.FileRepositoryProtocolWebDAV" = attr.ib(default=None)
    protocol_ftp: "OCI.FileRepositoryProtocolFTP16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("root_directory", "rootDirectory", str),
            E("port", "port", int),
            E(
                "protocol_web_dav",
                "protocolWebDAV",
                OCI.FileRepositoryProtocolWebDAV,
                is_complex=True,
            ),
            E(
                "protocol_ftp",
                "protocolFTP",
                OCI.FileRepositoryProtocolFTP16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemFileRepositoryDeviceAddRequest20(OCIRequest):
    """
    Add a new file repository.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        name: name
        root_directory: rootDirectory
        port: port
        protocol_web_dav: protocolWebDAV
        protocol_ftp: protocolFTP
    """

    name: str = attr.ib()
    root_directory: str = attr.ib(default=None)
    port: int = attr.ib(default=None)
    protocol_web_dav: "OCI.FileRepositoryProtocolWebDAV20" = attr.ib(default=None)
    protocol_ftp: "OCI.FileRepositoryProtocolFTP16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("root_directory", "rootDirectory", str),
            E("port", "port", int),
            E(
                "protocol_web_dav",
                "protocolWebDAV",
                OCI.FileRepositoryProtocolWebDAV20,
                is_complex=True,
            ),
            E(
                "protocol_ftp",
                "protocolFTP",
                OCI.FileRepositoryProtocolFTP16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemGetRegistrationContactListRequest(OCIRequest):
    """
    Get the list of registration contacts.

    This request handles all levels of administration privileges.  The content of the
    response will only contain items within the scope of the requester's login id.  At the
    system level any of the choice parameters may be specified to filter the registrations
    listed.  At the service provider level the serviceProviderId must be specified for the
    service provider and group options.  When using the userId or linePort options the
    specified value must be valid for that service provider login.  At the group level the
    servicProviderId and the groupId must be specified for the group option.  When using
    the userId or linePort options the specified value must be valid for that group login.
    The serviceProviderId option is not valid at the group level.  At the user level when
    using the userId or linePort options the specified value must be valid for that user
    login.  The serviceProviderId and groupId options are not valid at the user level.

    The response is either ``SystemGetRegistrationContactListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        svc_provider_id: svcProviderId
        group_id: groupId
        user_id: userId
        line_port: linePort
        device_level: deviceLevel
        device_name: deviceName
        device_type: deviceType
        search_criteria_registration_uri: searchCriteriaRegistrationURI
        search_criteria_sip_contact: searchCriteriaSIPContact
        endpoint_type: endpointType
        expired: expired
    """

    service_provider_id: str = attr.ib(default=None)
    svc_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    user_id: str = attr.ib(default=None)
    line_port: str = attr.ib(default=None)
    device_level: str = attr.ib(default=None)
    device_name: str = attr.ib(default=None)
    device_type: str = attr.ib(default=None)
    search_criteria_registration_uri: List[OCI.SearchCriteriaRegistrationURI] = attr.ib(default=None)
    search_criteria_sip_contact: List[OCI.SearchCriteriaSIPContact] = attr.ib(default=None)
    endpoint_type: str = attr.ib(default=None)
    expired: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str),
            E("svc_provider_id", "svcProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("user_id", "userId", str),
            E("line_port", "linePort", str),
            E("device_level", "deviceLevel", str),
            E("device_name", "deviceName", str),
            E("device_type", "deviceType", str),
            E(
                "search_criteria_registration_uri",
                "searchCriteriaRegistrationURI",
                OCI.SearchCriteriaRegistrationURI,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_sip_contact",
                "searchCriteriaSIPContact",
                OCI.SearchCriteriaSIPContact,
                is_complex=True,
                is_array=True,
            ),
            E("endpoint_type", "endpointType", str),
            E("expired", "expired", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHolidayScheduleAddRequest(OCIRequest):
    """
    Add a system holiday schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        holiday_schedule_name: holidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    holiday_schedule_name: str = attr.ib()
    holiday01: "OCI.Holiday" = attr.ib(default=None)
    holiday02: "OCI.Holiday" = attr.ib(default=None)
    holiday03: "OCI.Holiday" = attr.ib(default=None)
    holiday04: "OCI.Holiday" = attr.ib(default=None)
    holiday05: "OCI.Holiday" = attr.ib(default=None)
    holiday06: "OCI.Holiday" = attr.ib(default=None)
    holiday07: "OCI.Holiday" = attr.ib(default=None)
    holiday08: "OCI.Holiday" = attr.ib(default=None)
    holiday09: "OCI.Holiday" = attr.ib(default=None)
    holiday10: "OCI.Holiday" = attr.ib(default=None)
    holiday11: "OCI.Holiday" = attr.ib(default=None)
    holiday12: "OCI.Holiday" = attr.ib(default=None)
    holiday13: "OCI.Holiday" = attr.ib(default=None)
    holiday14: "OCI.Holiday" = attr.ib(default=None)
    holiday15: "OCI.Holiday" = attr.ib(default=None)
    holiday16: "OCI.Holiday" = attr.ib(default=None)
    holiday17: "OCI.Holiday" = attr.ib(default=None)
    holiday18: "OCI.Holiday" = attr.ib(default=None)
    holiday19: "OCI.Holiday" = attr.ib(default=None)
    holiday20: "OCI.Holiday" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHolidayScheduleModifyRequest(OCIRequest):
    """
    Modify a system holiday schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        holiday_schedule_name: holidayScheduleName
        new_holiday_schedule_name: newHolidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    holiday_schedule_name: str = attr.ib()
    new_holiday_schedule_name: str = attr.ib(default=None)
    holiday01: "OCI.Holiday" = attr.ib(default=None)
    holiday02: "OCI.Holiday" = attr.ib(default=None)
    holiday03: "OCI.Holiday" = attr.ib(default=None)
    holiday04: "OCI.Holiday" = attr.ib(default=None)
    holiday05: "OCI.Holiday" = attr.ib(default=None)
    holiday06: "OCI.Holiday" = attr.ib(default=None)
    holiday07: "OCI.Holiday" = attr.ib(default=None)
    holiday08: "OCI.Holiday" = attr.ib(default=None)
    holiday09: "OCI.Holiday" = attr.ib(default=None)
    holiday10: "OCI.Holiday" = attr.ib(default=None)
    holiday11: "OCI.Holiday" = attr.ib(default=None)
    holiday12: "OCI.Holiday" = attr.ib(default=None)
    holiday13: "OCI.Holiday" = attr.ib(default=None)
    holiday14: "OCI.Holiday" = attr.ib(default=None)
    holiday15: "OCI.Holiday" = attr.ib(default=None)
    holiday16: "OCI.Holiday" = attr.ib(default=None)
    holiday17: "OCI.Holiday" = attr.ib(default=None)
    holiday18: "OCI.Holiday" = attr.ib(default=None)
    holiday19: "OCI.Holiday" = attr.ib(default=None)
    holiday20: "OCI.Holiday" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("new_holiday_schedule_name", "newHolidayScheduleName", str),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemHomeNetworkGetListRequest(OCIRequest):
    """
    Get the list of all Home Networks.

    The response is either a ``SystemHomeNetworkGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_home_msc_address: searchCriteriaHomeMscAddress
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_home_msc_address: List[OCI.SearchCriteriaHomeMscAddress] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_home_msc_address",
                "searchCriteriaHomeMscAddress",
                OCI.SearchCriteriaHomeMscAddress,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemInterceptUserAddDnListRequest(OCIRequest):
    """
    Request to add an Intercept User number(s) to the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        intercept_dn_list: interceptDNList
    """

    intercept_dn_list: List[OCI.InterceptDNListEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "intercept_dn_list",
                "interceptDNList",
                OCI.InterceptDNListEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemLogConfigModifyRequest(OCIRequest):
    """
    Modify the log configuration file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        config_file: configFile
    """

    config_file: "OCI.FileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("config_file", "configFile", OCI.FileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMediaSetModifyRequest(OCIRequest):
    """
    Request to modify a Media Set.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        set_name: setName
        media_name_list: mediaNameList
    """

    set_name: str = attr.ib()
    media_name_list: "OCI.ReplacementMediaNameList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("set_name", "setName", str, is_required=True),
            E(
                "media_name_list",
                "mediaNameList",
                OCI.ReplacementMediaNameList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemMeetMeConferencingModifyRequest(OCIRequest):
    """
    Modify the system level data associated with Meet-Me Conferencing.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        conference_id_length: conferenceIdLength
        moderator_pin_length: moderatorPinLength
        enable_conference_end_date_restriction: enableConferenceEndDateRestriction
        conference_end_date_restriction_months: conferenceEndDateRestrictionMonths
        delete_expired_conferences_after_hold_period:
            deleteExpiredConferencesAfterHoldPeriod
        expired_conference_hold_period_days: expiredConferenceHoldPeriodDays
        recording_web_app_url: recordingWebAppURL
        recording_file_format: recordingFileFormat
        terminate_after_grace_period: terminateAfterGracePeriod
        conference_grace_period_minutes: conferenceGracePeriodMinutes
        conference_participant_early_entry_minutes: conferenceParticipantEarlyEntryMinutes
        enable_conference_expiry_notification: enableConferenceExpiryNotification
        enable_active_conference_notification: enableActiveConferenceNotification
        conference_from_address: conferenceFromAddress
        conference_active_talker_refresh_interval_seconds:
            conferenceActiveTalkerRefreshIntervalSeconds
    """

    conference_id_length: int = attr.ib(default=None)
    moderator_pin_length: int = attr.ib(default=None)
    enable_conference_end_date_restriction: bool = attr.ib(default=None)
    conference_end_date_restriction_months: int = attr.ib(default=None)
    delete_expired_conferences_after_hold_period: bool = attr.ib(default=None)
    expired_conference_hold_period_days: int = attr.ib(default=None)
    recording_web_app_url: str = attr.ib(default=None)
    recording_file_format: str = attr.ib(default=None)
    terminate_after_grace_period: bool = attr.ib(default=None)
    conference_grace_period_minutes: "OCI.MeetMeConferencingConferenceDuration" = attr.ib(default=None)
    conference_participant_early_entry_minutes: int = attr.ib(default=None)
    enable_conference_expiry_notification: bool = attr.ib(default=None)
    enable_active_conference_notification: bool = attr.ib(default=None)
    conference_from_address: str = attr.ib(default=None)
    conference_active_talker_refresh_interval_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("conference_id_length", "conferenceIdLength", int),
            E("moderator_pin_length", "moderatorPinLength", int),
            E(
                "enable_conference_end_date_restriction",
                "enableConferenceEndDateRestriction",
                bool,
            ),
            E(
                "conference_end_date_restriction_months",
                "conferenceEndDateRestrictionMonths",
                int,
            ),
            E(
                "delete_expired_conferences_after_hold_period",
                "deleteExpiredConferencesAfterHoldPeriod",
                bool,
            ),
            E(
                "expired_conference_hold_period_days",
                "expiredConferenceHoldPeriodDays",
                int,
            ),
            E("recording_web_app_url", "recordingWebAppURL", str),
            E("recording_file_format", "recordingFileFormat", str),
            E("terminate_after_grace_period", "terminateAfterGracePeriod", bool),
            E(
                "conference_grace_period_minutes",
                "conferenceGracePeriodMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
            ),
            E(
                "conference_participant_early_entry_minutes",
                "conferenceParticipantEarlyEntryMinutes",
                int,
            ),
            E(
                "enable_conference_expiry_notification",
                "enableConferenceExpiryNotification",
                bool,
            ),
            E(
                "enable_active_conference_notification",
                "enableActiveConferenceNotification",
                bool,
            ),
            E("conference_from_address", "conferenceFromAddress", str),
            E(
                "conference_active_talker_refresh_interval_seconds",
                "conferenceActiveTalkerRefreshIntervalSeconds",
                int,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceAddRequest(OCIRequest):
    """
    Add a new Network Class of Service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        description: description
        communication_barring_profile0: communicationBarringProfile0
        communication_barring_profile1: communicationBarringProfile1
        communication_barring_profile2: communicationBarringProfile2
        communication_barring_profile3: communicationBarringProfile3
        communication_barring_profile4: communicationBarringProfile4
        communication_barring_profile5: communicationBarringProfile5
        communication_barring_profile6: communicationBarringProfile6
        communication_barring_profile7: communicationBarringProfile7
        communication_barring_profile8: communicationBarringProfile8
        communication_barring_profile9: communicationBarringProfile9
        network_translation_index: networkTranslationIndex
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    name: str = attr.ib()
    description: str = attr.ib(default=None)
    communication_barring_profile0: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile1: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile2: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile3: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile4: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile5: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile6: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile7: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile8: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile9: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    network_translation_index: str = attr.ib(default=None)
    call_processing_policy_profile_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "communication_barring_profile0",
                "communicationBarringProfile0",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile1",
                "communicationBarringProfile1",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile2",
                "communicationBarringProfile2",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile3",
                "communicationBarringProfile3",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile4",
                "communicationBarringProfile4",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile5",
                "communicationBarringProfile5",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile6",
                "communicationBarringProfile6",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile7",
                "communicationBarringProfile7",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile8",
                "communicationBarringProfile8",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile9",
                "communicationBarringProfile9",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E("network_translation_index", "networkTranslationIndex", str),
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNetworkClassOfServiceModifyRequest(OCIRequest):
    """
    Modify an existing Network Class of Service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        name: name
        new_name: newName
        description: description
        communication_barring_profile0: communicationBarringProfile0
        communication_barring_profile1: communicationBarringProfile1
        communication_barring_profile2: communicationBarringProfile2
        communication_barring_profile3: communicationBarringProfile3
        communication_barring_profile4: communicationBarringProfile4
        communication_barring_profile5: communicationBarringProfile5
        communication_barring_profile6: communicationBarringProfile6
        communication_barring_profile7: communicationBarringProfile7
        communication_barring_profile8: communicationBarringProfile8
        communication_barring_profile9: communicationBarringProfile9
        network_translation_index: networkTranslationIndex
        call_processing_policy_profile_name: callProcessingPolicyProfileName
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    communication_barring_profile0: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile1: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile2: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile3: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile4: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile5: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile6: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile7: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile8: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    communication_barring_profile9: "OCI.NetworkClassOfServiceCommunicationBarringProfile" = attr.ib(default=None)
    network_translation_index: str = attr.ib(default=None)
    call_processing_policy_profile_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E(
                "communication_barring_profile0",
                "communicationBarringProfile0",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile1",
                "communicationBarringProfile1",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile2",
                "communicationBarringProfile2",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile3",
                "communicationBarringProfile3",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile4",
                "communicationBarringProfile4",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile5",
                "communicationBarringProfile5",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile6",
                "communicationBarringProfile6",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile7",
                "communicationBarringProfile7",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile8",
                "communicationBarringProfile8",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E(
                "communication_barring_profile9",
                "communicationBarringProfile9",
                OCI.NetworkClassOfServiceCommunicationBarringProfile,
                is_complex=True,
            ),
            E("network_translation_index", "networkTranslationIndex", str),
            E(
                "call_processing_policy_profile_name",
                "callProcessingPolicyProfileName",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemNumberPortabilityQueryDigitPatternGetListRequest(OCIRequest):
    """
    Request to get the System Number Portability Query Digit Pattern List information.

    The response is either a ``SystemNumberPortabilityQueryDigitPatternGetListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        search_criteria_number_portability_query_digit_pattern:
            searchCriteriaNumberPortabilityQueryDigitPattern
        search_criteria_number_portability_status: searchCriteriaNumberPortabilityStatus
        response_size_limit: responseSizeLimit
    """

    search_criteria_number_portability_query_digit_pattern: List[OCI.SearchCriteriaNumberPortabilityQueryDigitPattern] = attr.ib(default=None)
    search_criteria_number_portability_status: List[OCI.SearchCriteriaNumberPortabilityStatus] = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "search_criteria_number_portability_query_digit_pattern",
                "searchCriteriaNumberPortabilityQueryDigitPattern",
                OCI.SearchCriteriaNumberPortabilityQueryDigitPattern,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_number_portability_status",
                "searchCriteriaNumberPortabilityStatus",
                OCI.SearchCriteriaNumberPortabilityStatus,
                is_complex=True,
                is_array=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemOfficeZoneModifyRequest(OCIRequest):
    """
    Modify an existing Office Zone.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        office_zone_name: officeZoneName
        new_office_zone_name: newOfficeZoneName
        description: description
        replacement_zone_list: replacementZoneList
        primary_zone_name: primaryZoneName
    """

    office_zone_name: str = attr.ib()
    new_office_zone_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    replacement_zone_list: "OCI.ReplacementZoneList" = attr.ib(default=None)
    primary_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("office_zone_name", "officeZoneName", str, is_required=True),
            E("new_office_zone_name", "newOfficeZoneName", str),
            E("description", "description", str),
            E(
                "replacement_zone_list",
                "replacementZoneList",
                OCI.ReplacementZoneList,
                is_complex=True,
            ),
            E("primary_zone_name", "primaryZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPreferredCarrierGetGroupListRequest(OCIRequest):
    """
    Requests a list of groups using the specified carrier.

    It is possible to restrict the number of rows returned by specifying various search
    criteria.  Multiple search criteria are logically ANDed together.

    The response is either a ``SystemPreferredCarrierGetGroupListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        carrier: carrier
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_group_name: searchCriteriaGroupName
        search_criteria_exact_service_provider: searchCriteriaExactServiceProvider
    """

    carrier: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_group_name: List[OCI.SearchCriteriaGroupName] = attr.ib(default=None)
    search_criteria_exact_service_provider: "OCI.SearchCriteriaExactServiceProvider" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("carrier", "carrier", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_name",
                "searchCriteriaGroupName",
                OCI.SearchCriteriaGroupName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_service_provider",
                "searchCriteriaExactServiceProvider",
                OCI.SearchCriteriaExactServiceProvider,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemPreferredCarrierGetUserListRequest(OCIRequest):
    """
    Requests a list of users using the specified carrier.

    It is possible to restrict the number of rows returned by specifying various search
    criteria.  Multiple search criteria are logically ANDed together.

    The response is either a ``SystemPreferreredCarrierGetUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        carrier: carrier
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    carrier: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("carrier", "carrier", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemRoamingNetworkGetListRequest(OCIRequest):
    """
    Get the list of all Roaming Networks.

    The response is either a ``SystemRoamingNetworkGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_roaming_msc_address: searchCriteriaRoamingMscAddress
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_roaming_msc_address: List[OCI.SearchCriteriaRoamingMscAddress] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_roaming_msc_address",
                "searchCriteriaRoamingMscAddress",
                OCI.SearchCriteriaRoamingMscAddress,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAuthenticationEndpointLockoutClearRequest(OCIRequest):
    """
    Request to clear sip authentication endpoint lockouts in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_endpoint_key: userEndpointKey
    """

    user_endpoint_key: List[OCI.UserEndpointKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "user_endpoint_key",
                "userEndpointKey",
                OCI.UserEndpointKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAuthenticationEndpointLockoutGetRequest(OCIRequest):
    """
    Request to get sip authentication endpoint lockout data in the system.

    The response is either a ``SystemSIPAuthenticationEndpointLockoutGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_service_provider_id: searchCriteriaServiceProviderId
        search_criteria_exact_organization_type: searchCriteriaExactOrganizationType
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_line_port_user_part: searchCriteriaLinePortUserPart
        search_criteria_line_port_domain: searchCriteriaLinePortDomain
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_service_provider_id: List[OCI.SearchCriteriaServiceProviderId] = attr.ib(default=None)
    search_criteria_exact_organization_type: "OCI.SearchCriteriaExactOrganizationType" = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_line_port_user_part: List[OCI.SearchCriteriaLinePortUserPart] = attr.ib(default=None)
    search_criteria_line_port_domain: List[OCI.SearchCriteriaLinePortDomain] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_service_provider_id",
                "searchCriteriaServiceProviderId",
                OCI.SearchCriteriaServiceProviderId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_organization_type",
                "searchCriteriaExactOrganizationType",
                OCI.SearchCriteriaExactOrganizationType,
                is_complex=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_user_part",
                "searchCriteriaLinePortUserPart",
                OCI.SearchCriteriaLinePortUserPart,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_domain",
                "searchCriteriaLinePortDomain",
                OCI.SearchCriteriaLinePortDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAuthenticationTrunkGroupLockoutClearRequest(OCIRequest):
    """
    Request to clear sip authentication trunk group lockouts in the system.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        trunk_groupkey: trunkGroupkey
    """

    trunk_groupkey: List[OCI.TrunkGroupKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_groupkey",
                "trunkGroupkey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPAuthenticationTrunkGroupLockoutGetRequest(OCIRequest):
    """
    Request to get sip authentication trunk group lockout data in the system.

    The response is either a ``SystemSIPAuthenticationTrunkGroupLockoutGetResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_service_provider_id: searchCriteriaServiceProviderId
        search_criteria_exact_organization_type: searchCriteriaExactOrganizationType
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_trunk_group_name: searchCriteriaTrunkGroupName
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_service_provider_id: List[OCI.SearchCriteriaServiceProviderId] = attr.ib(default=None)
    search_criteria_exact_organization_type: "OCI.SearchCriteriaExactOrganizationType" = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_trunk_group_name: List[OCI.SearchCriteriaTrunkGroupName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_service_provider_id",
                "searchCriteriaServiceProviderId",
                OCI.SearchCriteriaServiceProviderId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_organization_type",
                "searchCriteriaExactOrganizationType",
                OCI.SearchCriteriaExactOrganizationType,
                is_complex=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_trunk_group_name",
                "searchCriteriaTrunkGroupName",
                OCI.SearchCriteriaTrunkGroupName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        authentication_override: authenticationOverride
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    authentication_override: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E(
                "authentication_override",
                "authenticationOverride",
                bool,
                is_required=True,
            ),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest14sp1(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeAddRequest14sp2()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        authentication_override: authenticationOverride
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    authentication_override: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions" = attr.ib(default=None)
    early_media_support: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E(
                "authentication_override",
                "authenticationOverride",
                bool,
                is_required=True,
            ),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest14sp2(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeAddRequest14sp3()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest14sp3(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``SystemSIPDeviceTypeAddRequest14sp6()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        supports_broad_works_info_for_call_waiting: supportsBroadWorksINFOForCallWaiting
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    tdm_overlay: bool = attr.ib()
    supports_broad_works_info_for_call_waiting: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E("tdm_overlay", "tdmOverlay", bool, is_required=True),
            E(
                "supports_broad_works_info_for_call_waiting",
                "supportsBroadWorksINFOForCallWaiting",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileAddRequest(OCIRequest):
    """
    Request to add a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeFileAddRequest14sp8()``

    Attributes:
        device_type: deviceType
        file_type: fileType
        file_format: fileFormat
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        allow_file_customization: allowFileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
    """

    device_type: str = attr.ib()
    file_type: str = attr.ib()
    file_format: str = attr.ib()
    remote_file_format: str = attr.ib()
    file_category: str = attr.ib()
    allow_file_customization: bool = attr.ib()
    file_source: str = attr.ib()
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib()
    mac_based_file_authentication: bool = attr.ib()
    user_name_password_file_authentication: bool = attr.ib()
    mac_in_non_request_uri: bool = attr.ib()
    mac_format_in_non_request_uri: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E(
                "allow_file_customization",
                "allowFileCustomization",
                bool,
                is_required=True,
            ),
            E("file_source", "fileSource", str, is_required=True),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileAddRequest14sp8(OCIRequest):
    """
    Request to add a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        allow_file_customization: allowFileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    remote_file_format: str = attr.ib()
    file_category: str = attr.ib()
    allow_file_customization: bool = attr.ib()
    file_source: str = attr.ib()
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib()
    mac_based_file_authentication: bool = attr.ib()
    user_name_password_file_authentication: bool = attr.ib()
    mac_in_non_request_uri: bool = attr.ib()
    mac_format_in_non_request_uri: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E(
                "allow_file_customization",
                "allowFileCustomization",
                bool,
                is_required=True,
            ),
            E("file_source", "fileSource", str, is_required=True),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileAddRequest16sp1(OCIRequest):
    """
    Replaced By ``SystemSIPDeviceTypeFileAddRequest18()``.

    Request to add a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    remote_file_format: str = attr.ib()
    file_category: str = attr.ib()
    file_customization: str = attr.ib()
    file_source: str = attr.ib()
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib()
    mac_based_file_authentication: bool = attr.ib()
    user_name_password_file_authentication: bool = attr.ib()
    mac_in_non_request_uri: bool = attr.ib()
    mac_format_in_non_request_uri: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileAddRequest18(OCIRequest):
    """
    Request to add a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        allow_http: allowHttp
        allow_https: allowHttps
        allow_tftp: allowTftp
        enable_caching: enableCaching
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    remote_file_format: str = attr.ib()
    file_category: str = attr.ib()
    file_customization: str = attr.ib()
    file_source: str = attr.ib()
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib()
    mac_based_file_authentication: bool = attr.ib()
    user_name_password_file_authentication: bool = attr.ib()
    mac_in_non_request_uri: bool = attr.ib()
    mac_format_in_non_request_uri: str = attr.ib(default=None)
    allow_http: bool = attr.ib()
    allow_https: bool = attr.ib()
    allow_tftp: bool = attr.ib()
    enable_caching: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("allow_http", "allowHttp", bool, is_required=True),
            E("allow_https", "allowHttps", bool, is_required=True),
            E("allow_tftp", "allowTftp", bool, is_required=True),
            E("enable_caching", "enableCaching", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileAddRequest19(OCIRequest):
    """
    Request to add a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        allow_http: allowHttp
        allow_https: allowHttps
        allow_tftp: allowTftp
        enable_caching: enableCaching
        allow_upload_from_device: allowUploadFromDevice
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    remote_file_format: str = attr.ib()
    file_category: str = attr.ib()
    file_customization: str = attr.ib()
    file_source: str = attr.ib()
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib()
    mac_based_file_authentication: bool = attr.ib()
    user_name_password_file_authentication: bool = attr.ib()
    mac_in_non_request_uri: bool = attr.ib()
    mac_format_in_non_request_uri: str = attr.ib(default=None)
    allow_http: bool = attr.ib()
    allow_https: bool = attr.ib()
    allow_tftp: bool = attr.ib()
    enable_caching: bool = attr.ib()
    allow_upload_from_device: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("allow_http", "allowHttp", bool, is_required=True),
            E("allow_https", "allowHttps", bool, is_required=True),
            E("allow_tftp", "allowTftp", bool, is_required=True),
            E("enable_caching", "enableCaching", bool, is_required=True),
            E(
                "allow_upload_from_device",
                "allowUploadFromDevice",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileAddRequest20(OCIRequest):
    """
    Request to add a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        remote_file_format: remoteFileFormat
        file_category: fileCategory
        file_customization: fileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        allow_http: allowHttp
        allow_https: allowHttps
        allow_tftp: allowTftp
        enable_caching: enableCaching
        allow_upload_from_device: allowUploadFromDevice
        default_extended_file_capture_mode: defaultExtendedFileCaptureMode
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    remote_file_format: str = attr.ib()
    file_category: str = attr.ib()
    file_customization: str = attr.ib()
    file_source: str = attr.ib()
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib()
    mac_based_file_authentication: bool = attr.ib()
    user_name_password_file_authentication: bool = attr.ib()
    mac_in_non_request_uri: bool = attr.ib()
    mac_format_in_non_request_uri: str = attr.ib(default=None)
    allow_http: bool = attr.ib()
    allow_https: bool = attr.ib()
    allow_tftp: bool = attr.ib()
    enable_caching: bool = attr.ib()
    allow_upload_from_device: bool = attr.ib()
    default_extended_file_capture_mode: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("remote_file_format", "remoteFileFormat", str, is_required=True),
            E("file_category", "fileCategory", str, is_required=True),
            E("file_customization", "fileCustomization", str, is_required=True),
            E("file_source", "fileSource", str, is_required=True),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E(
                "use_http_digest_authentication",
                "useHttpDigestAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "mac_based_file_authentication",
                "macBasedFileAuthentication",
                bool,
                is_required=True,
            ),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
                is_required=True,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool, is_required=True),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("allow_http", "allowHttp", bool, is_required=True),
            E("allow_https", "allowHttps", bool, is_required=True),
            E("allow_tftp", "allowTftp", bool, is_required=True),
            E("enable_caching", "enableCaching", bool, is_required=True),
            E(
                "allow_upload_from_device",
                "allowUploadFromDevice",
                bool,
                is_required=True,
            ),
            E(
                "default_extended_file_capture_mode",
                "defaultExtendedFileCaptureMode",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileModifyRequest(OCIRequest):
    """
    Request to modify a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``SystemSIPDeviceTypeFileModifyRequest14sp8()``

    Attributes:
        device_type: deviceType
        file_type: fileType
        allow_file_customization: allowFileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
    """

    device_type: str = attr.ib()
    file_type: str = attr.ib()
    allow_file_customization: bool = attr.ib(default=None)
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib(default=None)
    mac_based_file_authentication: bool = attr.ib(default=None)
    user_name_password_file_authentication: bool = attr.ib(default=None)
    mac_in_non_request_uri: bool = attr.ib(default=None)
    mac_format_in_non_request_uri: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_type", "fileType", str, is_required=True),
            E("allow_file_customization", "allowFileCustomization", bool),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
            E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileModifyRequest14sp8(OCIRequest):
    """
    Request to modify a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        allow_file_customization: allowFileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    allow_file_customization: bool = attr.ib(default=None)
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib(default=None)
    mac_based_file_authentication: bool = attr.ib(default=None)
    user_name_password_file_authentication: bool = attr.ib(default=None)
    mac_in_non_request_uri: bool = attr.ib(default=None)
    mac_format_in_non_request_uri: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("allow_file_customization", "allowFileCustomization", bool),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
            E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeFileModifyRequest16sp1(OCIRequest):
    """
    Request to modify a sip device type file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: defaultExtendedFileCaptureMode

    Attributes:
        device_type: deviceType
        file_format: fileFormat
        file_customization: fileCustomization
        file_source: fileSource
        upload_file: uploadFile
        use_http_digest_authentication: useHttpDigestAuthentication
        mac_based_file_authentication: macBasedFileAuthentication
        user_name_password_file_authentication: userNamePasswordFileAuthentication
        mac_in_non_request_uri: macInNonRequestURI
        mac_format_in_non_request_uri: macFormatInNonRequestURI
        allow_http: allowHttp
        allow_https: allowHttps
        allow_tftp: allowTftp
        enable_caching: enableCaching
        allow_upload_from_device: allowUploadFromDevice
        default_extended_file_capture_mode: defaultExtendedFileCaptureMode
    """

    device_type: str = attr.ib()
    file_format: str = attr.ib()
    file_customization: str = attr.ib(default=None)
    file_source: str = attr.ib(default=None)
    upload_file: "OCI.FileResource" = attr.ib(default=None)
    use_http_digest_authentication: bool = attr.ib(default=None)
    mac_based_file_authentication: bool = attr.ib(default=None)
    user_name_password_file_authentication: bool = attr.ib(default=None)
    mac_in_non_request_uri: bool = attr.ib(default=None)
    mac_format_in_non_request_uri: str = attr.ib(default=None)
    allow_http: bool = attr.ib(default=None)
    allow_https: bool = attr.ib(default=None)
    allow_tftp: bool = attr.ib(default=None)
    enable_caching: bool = attr.ib(default=None)
    allow_upload_from_device: bool = attr.ib(default=None)
    default_extended_file_capture_mode: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("file_format", "fileFormat", str, is_required=True),
            E("file_customization", "fileCustomization", str),
            E("file_source", "fileSource", str),
            E("upload_file", "uploadFile", OCI.FileResource, is_complex=True),
            E("use_http_digest_authentication", "useHttpDigestAuthentication", bool),
            E("mac_based_file_authentication", "macBasedFileAuthentication", bool),
            E(
                "user_name_password_file_authentication",
                "userNamePasswordFileAuthentication",
                bool,
            ),
            E("mac_in_non_request_uri", "macInNonRequestURI", bool),
            E("mac_format_in_non_request_uri", "macFormatInNonRequestURI", str),
            E("allow_http", "allowHttp", bool),
            E("allow_https", "allowHttps", bool),
            E("allow_tftp", "allowTftp", bool),
            E("enable_caching", "enableCaching", bool),
            E("allow_upload_from_device", "allowUploadFromDevice", bool),
            E(
                "default_extended_file_capture_mode",
                "defaultExtendedFileCaptureMode",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeGetListRequest(OCIRequest):
    """
    Request to get the list of sip device types in the system.

    See Also: ``SystemDeviceTypeGetAvailableListRequest14sp3()``.

    The response is either ``SystemSIPDeviceTypeGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_device_type: searchCriteriaDeviceType
        search_criteria_exact_signaling_address_type:
            searchCriteriaExactSignalingAddressType
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_device_type: List[OCI.SearchCriteriaDeviceType] = attr.ib(default=None)
    search_criteria_exact_signaling_address_type: "OCI.SearchCriteriaExactSignalingAddressType" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_device_type",
                "searchCriteriaDeviceType",
                OCI.SearchCriteriaDeviceType,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_signaling_address_type",
                "searchCriteriaExactSignalingAddressType",
                OCI.SearchCriteriaExactSignalingAddressType,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeLanguageMappingModifyRequest(OCIRequest):
    """
    Request to modify the device language name that is mapped to a BroadWorks language
    name.

    The request can be used to map many languages.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        language_mapping: languageMapping
    """

    device_type: str = attr.ib()
    language_mapping: List[OCI.DeviceManagementLanguageMapping] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "language_mapping",
                "languageMapping",
                OCI.DeviceManagementLanguageMapping,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleAddEventRequest(OCIRequest):
    """
    Add an event to system schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        schedule_key: scheduleKey
        event_name: eventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    start_date: str = attr.ib()
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib()
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleDeleteEventListRequest(OCIRequest):
    """
    Delete a list of events from a system schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        schedule_key: scheduleKey
        event_name: eventName
    """

    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleDeleteListRequest(OCIRequest):
    """
    Delete a list of system schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        schedule_key: scheduleKey
    """

    schedule_key: List[OCI.ScheduleKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleGetEventListRequest(OCIRequest):
    """
    Get the list of events of a system schedule.

    The response is either a ``SystemScheduleGetResponse()`` or an ``ErrorResponse()``.

    Attributes:
        schedule_key: scheduleKey
    """

    schedule_key: "OCI.ScheduleKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleGetEventRequest(OCIRequest):
    """
    Get an event from a system schedule.

    The response is either a ``SystemScheduleGetEventResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        schedule_key: scheduleKey
        event_name: eventName
    """

    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleModifyEventRequest(OCIRequest):
    """
    Modify an event of a system schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        schedule_key: scheduleKey
        event_name: eventName
        new_event_name: newEventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    new_event_name: str = attr.ib(default=None)
    start_date: str = attr.ib(default=None)
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib(default=None)
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("new_event_name", "newEventName", str),
            E("start_date", "startDate", str),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemScheduleModifyRequest(OCIRequest):
    """
    Modify a system schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        schedule_key: scheduleKey
        new_schedule_name: newScheduleName
    """

    schedule_key: "OCI.ScheduleKey" = attr.ib()
    new_schedule_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_schedule_name", "newScheduleName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationAddClassificationRequest(OCIRequest):
    """
    Add a new Security Classification The response is either a ``SuccessResponse()`` or an
    ``ErrorResponse()``.


    Attributes:
        security_classification_name: securityClassificationName
        audio_file: audioFile
    """

    security_classification_name: str = attr.ib()
    audio_file: "OCI.LabeledMediaFileResource" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "security_classification_name",
                "securityClassificationName",
                str,
                is_required=True,
            ),
            E(
                "audio_file",
                "audioFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationGetClassificationTrunkGroupUsageListRequest(OCIRequest):
    """
    Get a list of users that currently have the specified Security Classification
    assigned.

    The response is either
    ``SystemSecurityClassificationGetClassificationTrunkGroupUsageListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        security_classification: securityClassification
        response_size_limit: responseSizeLimit
        search_criteria_trunk_group_name: searchCriteriaTrunkGroupName
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_service_provider_id: searchCriteriaServiceProviderId
        search_criteria_exact_organization_type: searchCriteriaExactOrganizationType
    """

    security_classification: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_trunk_group_name: List[OCI.SearchCriteriaTrunkGroupName] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_service_provider_id: List[OCI.SearchCriteriaServiceProviderId] = attr.ib(default=None)
    search_criteria_exact_organization_type: "OCI.SearchCriteriaExactOrganizationType" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "security_classification",
                "securityClassification",
                str,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_trunk_group_name",
                "searchCriteriaTrunkGroupName",
                OCI.SearchCriteriaTrunkGroupName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_service_provider_id",
                "searchCriteriaServiceProviderId",
                OCI.SearchCriteriaServiceProviderId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_organization_type",
                "searchCriteriaExactOrganizationType",
                OCI.SearchCriteriaExactOrganizationType,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationGetClassificationUserUsageListRequest(OCIRequest):
    """
    Get a list of users that currently have the specified Security Classification
    assigned.

    The response is either
    ``SystemSecurityClassificationGetClassificationUserUsageListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        security_classification: securityClassification
        response_size_limit: responseSizeLimit
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    security_classification: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "security_classification",
                "securityClassification",
                str,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSecurityClassificationModifyClassificationRequest(OCIRequest):
    """
    Modify a Security Classification The response is either a ``SuccessResponse()`` or an
    ``ErrorResponse()``.


    Attributes:
        security_classification_name: securityClassificationName
        new_security_classification_name: newSecurityClassificationName
        audio_file: audioFile
    """

    security_classification_name: str = attr.ib()
    new_security_classification_name: str = attr.ib(default=None)
    audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "security_classification_name",
                "securityClassificationName",
                str,
                is_required=True,
            ),
            E("new_security_classification_name", "newSecurityClassificationName", str),
            E("audio_file", "audioFile", OCI.LabeledMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemServiceCodeGetListRequest(OCIRequest):
    """
    Request to get all service codes that have been defined in the system.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either ``SystemServiceCodeGetListResponse()`` or ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_service_code: searchCriteriaServiceCode
        search_criteria_service_code_description: searchCriteriaServiceCodeDescription
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_service_code: List[OCI.SearchCriteriaServiceCode] = attr.ib(default=None)
    search_criteria_service_code_description: List[OCI.SearchCriteriaServiceCodeDescription] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_service_code",
                "searchCriteriaServiceCode",
                OCI.SearchCriteriaServiceCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_service_code_description",
                "searchCriteriaServiceCodeDescription",
                OCI.SearchCriteriaServiceCodeDescription,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemServiceDnAddListRequest(OCIRequest):
    """
    Adds system service Dns.

    It is possible to add either: a single DN, a list of DNs a range of DNs, or any
    combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
        dn_range: dnRange
    """

    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemServiceDnDeleteListRequest(OCIRequest):
    """
    Deletes system service DNs.

    It is possible to delete either: a single DN, a list of DNs, a range of DNs, or any
    combination thereof.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        phone_number: phoneNumber
        dn_range: dnRange
    """

    phone_number: List[str] = attr.ib(default=None)
    dn_range: List[OCI.DNRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("phone_number", "phoneNumber", str, is_array=True),
            E("dn_range", "dnRange", OCI.DNRange, is_complex=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemVoicePortalAddRequest(OCIRequest):
    """
    Request to add a system voice portal instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in IMS mode: publicUserIdentity, ignored in standalone mode if
    provided.

    Attributes:
        system_voice_portal_id: systemVoicePortalId
        name: name
        calling_line_id_name: callingLineIdName
        language: language
        time_zone: timeZone
        phone_number: phoneNumber
        public_user_identity: publicUserIdentity
        network_voice_portal_number: networkVoicePortalNumber
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        use_voice_portal_default_greeting: useVoicePortalDefaultGreeting
        voice_portal_greeting_file: voicePortalGreetingFile
        use_voice_messaging_default_greeting: useVoiceMessagingDefaultGreeting
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    system_voice_portal_id: str = attr.ib()
    name: str = attr.ib()
    calling_line_id_name: str = attr.ib()
    language: str = attr.ib()
    time_zone: str = attr.ib()
    phone_number: str = attr.ib(default=None)
    public_user_identity: str = attr.ib(default=None)
    network_voice_portal_number: str = attr.ib(default=None)
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login: bool = attr.ib()
    use_voice_portal_wizard: bool = attr.ib()
    use_voice_portal_default_greeting: bool = attr.ib()
    voice_portal_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    use_voice_messaging_default_greeting: bool = attr.ib()
    voice_messaging_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_voice_portal_id", "systemVoicePortalId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("calling_line_id_name", "callingLineIdName", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("time_zone", "timeZone", str, is_required=True),
            E("phone_number", "phoneNumber", str),
            E("public_user_identity", "publicUserIdentity", str),
            E("network_voice_portal_number", "networkVoicePortalNumber", str),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
                is_required=True,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool, is_required=True),
            E(
                "use_voice_portal_default_greeting",
                "useVoicePortalDefaultGreeting",
                bool,
                is_required=True,
            ),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "use_voice_messaging_default_greeting",
                "useVoiceMessagingDefaultGreeting",
                bool,
                is_required=True,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSystemVoicePortalModifyRequest(OCIRequest):
    """
    Request to update a System Voice portal instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        system_voice_portal_id: systemVoicePortalId
        new_system_voice_portal_id: newSystemVoicePortalId
        name: name
        calling_line_id_name: callingLineIdName
        language: language
        time_zone: timeZone
        phone_number: phoneNumber
        public_user_identity: publicUserIdentity
        network_voice_portal_number: networkVoicePortalNumber
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        become_default_system_voice_portal: becomeDefaultSystemVoicePortal
        use_voice_portal_default_greeting: useVoicePortalDefaultGreeting
        voice_portal_greeting_file: voicePortalGreetingFile
        use_voice_messaging_default_greeting: useVoiceMessagingDefaultGreeting
        voice_messaging_greeting_file: voiceMessagingGreetingFile
    """

    system_voice_portal_id: str = attr.ib()
    new_system_voice_portal_id: str = attr.ib(default=None)
    name: str = attr.ib(default=None)
    calling_line_id_name: str = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    public_user_identity: str = attr.ib(default=None)
    network_voice_portal_number: str = attr.ib(default=None)
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login: bool = attr.ib(default=None)
    use_voice_portal_wizard: bool = attr.ib(default=None)
    become_default_system_voice_portal: bool = attr.ib(default=None)
    use_voice_portal_default_greeting: bool = attr.ib(default=None)
    voice_portal_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    use_voice_messaging_default_greeting: bool = attr.ib(default=None)
    voice_messaging_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("system_voice_portal_id", "systemVoicePortalId", str, is_required=True),
            E("new_system_voice_portal_id", "newSystemVoicePortalId", str),
            E("name", "name", str),
            E("calling_line_id_name", "callingLineIdName", str),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E("phone_number", "phoneNumber", str),
            E("public_user_identity", "publicUserIdentity", str),
            E("network_voice_portal_number", "networkVoicePortalNumber", str),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool),
            E(
                "become_default_system_voice_portal",
                "becomeDefaultSystemVoicePortal",
                bool,
            ),
            E(
                "use_voice_portal_default_greeting",
                "useVoicePortalDefaultGreeting",
                bool,
            ),
            E(
                "voice_portal_greeting_file",
                "voicePortalGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "use_voice_messaging_default_greeting",
                "useVoiceMessagingDefaultGreeting",
                bool,
            ),
            E(
                "voice_messaging_greeting_file",
                "voiceMessagingGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemThirdPartyVoiceMailSupportGetDnListRequest(OCIRequest):
    """
    Request to get a list of ThirdPartyVoiceMailSupport User DN's defined in the system.

    The response is either a ``SystemThirdPartyVoiceMailSupportGetDnListResponse()`` or an
    ``ErrorResponse()``. The search can be done using multiple criterion.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_system_service_dn: searchCriteriaSystemServiceDn
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_system_service_dn: List[OCI.SearchCriteriaSystemServiceDn] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_system_service_dn",
                "searchCriteriaSystemServiceDn",
                OCI.SearchCriteriaSystemServiceDn,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTimeScheduleAddRequest(OCIRequest):
    """
    Add a system time schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        time_schedule_name: timeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    time_schedule_name: str = attr.ib()
    time_interval01: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval02: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval03: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval04: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval05: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval06: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval07: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval08: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval09: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval10: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval11: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval12: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval13: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval14: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval15: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval16: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval17: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval18: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval19: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval20: "OCI.TimeInterval" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTimeScheduleModifyRequest(OCIRequest):
    """
    Modify a specified system time schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        time_schedule_name: timeScheduleName
        new_time_schedule_name: newTimeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    time_schedule_name: str = attr.ib()
    new_time_schedule_name: str = attr.ib(default=None)
    time_interval01: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval02: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval03: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval04: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval05: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval06: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval07: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval08: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval09: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval10: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval11: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval12: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval13: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval14: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval15: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval16: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval17: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval18: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval19: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval20: "OCI.TimeInterval" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("new_time_schedule_name", "newTimeScheduleName", str),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemTwoStageDialingGetDnListRequest(OCIRequest):
    """
    Request to get a list of Two Stage Dialing dns defined in the system.

    The response is either a ``SystemTwoStageDialingGetDnListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_system_service_dn: searchCriteriaSystemServiceDn
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_system_service_dn: List[OCI.SearchCriteriaSystemServiceDn] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_system_service_dn",
                "searchCriteriaSystemServiceDn",
                OCI.SearchCriteriaSystemServiceDn,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneAddRequest(OCIRequest):
    """
    Add a Zone and optional Net Addresses and Physical Locations.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        zone_name: zoneName
        net_address: netAddress
        net_address_range: netAddressRange
        location_based_physical_location: locationBasedPhysicalLocation
        calling_zone_physical_location: callingZonePhysicalLocation
    """

    zone_name: str = attr.ib()
    net_address: List[str] = attr.ib(default=None)
    net_address_range: List[OCI.IPAddressRange] = attr.ib(default=None)
    location_based_physical_location: List[str] = attr.ib(default=None)
    calling_zone_physical_location: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("net_address", "netAddress", str, is_array=True),
            E(
                "net_address_range",
                "netAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "location_based_physical_location",
                "locationBasedPhysicalLocation",
                str,
                is_array=True,
            ),
            E("calling_zone_physical_location", "callingZonePhysicalLocation", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingRestrictionsNetAddressAddListRequest(OCIRequest):
    """
    Adds a list of IP addresses to a zone The response is ``SuccessResponse()`` or an
    ``ErrorResponse()``.

    Replaced by: ``SystemZoneNetAddressAddListRequest()``

    Attributes:
        zone_name: zoneName
        net_address: netAddress
        net_address_range: netAddressRange
    """

    zone_name: str = attr.ib()
    net_address: List[str] = attr.ib(default=None)
    net_address_range: List[OCI.IPAddressRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("net_address", "netAddress", str, is_array=True),
            E(
                "net_address_range",
                "netAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingRestrictionsNetAddressDeleteListRequest(OCIRequest):
    """
    Deletes a list of IP addresses from a zone The response is ``SuccessResponse()`` or an
    ``ErrorResponse()``.

    Replaced by: ``SystemZoneNetAddressDeleteListRequest()``

    Attributes:
        zone_name: zoneName
        net_address: netAddress
        net_address_range: netAddressRange
    """

    zone_name: str = attr.ib()
    net_address: List[str] = attr.ib(default=None)
    net_address_range: List[OCI.IPAddressRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("net_address", "netAddress", str, is_array=True),
            E(
                "net_address_range",
                "netAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneCallingRestrictionsNetAddressGetListRequest(OCIRequest):
    """
    Gets a list of IP Addresses and/or Ranges assigned to a zone Response is
    ``SystemZoneCallingRestrictionsNetAddressGetListResponse()``.

    Replaced by: ``SystemZoneNetAddressGetListRequest()``

    Attributes:
        zone_name: zoneName
        response_size_limit: responseSizeLimit
        search_criteria_zone_ip_address: searchCriteriaZoneIPAddress
    """

    zone_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_zone_ip_address: List[OCI.SearchCriteriaZoneIPAddress] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_zone_ip_address",
                "searchCriteriaZoneIPAddress",
                OCI.SearchCriteriaZoneIPAddress,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneLocationBasedPhysicalLocationGetListRequest(OCIRequest):
    """
    Gets a list of physical locations assigned to a zone.

    Response is ``SystemZoneLocationBasedPhysicalLocationGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        zone_name: zoneName
        response_size_limit: responseSizeLimit
        search_criteria_physical_location: searchCriteriaPhysicalLocation
    """

    zone_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_physical_location: List[OCI.SearchCriteriaPhysicalLocation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_physical_location",
                "searchCriteriaPhysicalLocation",
                OCI.SearchCriteriaPhysicalLocation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneNetAddressAddListRequest(OCIRequest):
    """
    Adds a list of IP addresses to a zone The response is ``SuccessResponse()`` or an
    ``ErrorResponse()``.


    Attributes:
        zone_name: zoneName
        net_address: netAddress
        net_address_range: netAddressRange
    """

    zone_name: str = attr.ib()
    net_address: List[str] = attr.ib(default=None)
    net_address_range: List[OCI.IPAddressRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("net_address", "netAddress", str, is_array=True),
            E(
                "net_address_range",
                "netAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneNetAddressDeleteListRequest(OCIRequest):
    """
    Deletes a list of IP addresses from a zone The response is ``SuccessResponse()`` or an
    ``ErrorResponse()``.


    Attributes:
        zone_name: zoneName
        net_address: netAddress
        net_address_range: netAddressRange
    """

    zone_name: str = attr.ib()
    net_address: List[str] = attr.ib(default=None)
    net_address_range: List[OCI.IPAddressRange] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("net_address", "netAddress", str, is_array=True),
            E(
                "net_address_range",
                "netAddressRange",
                OCI.IPAddressRange,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemZoneNetAddressGetListRequest(OCIRequest):
    """
    Gets a list of IP Addresses and/or Ranges assigned to a zone.

    Response is ``SystemZoneNetAddressGetListResponse()`` or an ``ErrorResponse()``.

    Attributes:
        zone_name: zoneName
        response_size_limit: responseSizeLimit
        search_criteria_zone_ip_address: searchCriteriaZoneIPAddress
    """

    zone_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_zone_ip_address: List[OCI.SearchCriteriaZoneIPAddress] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("zone_name", "zoneName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_zone_ip_address",
                "searchCriteriaZoneIPAddress",
                OCI.SearchCriteriaZoneIPAddress,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAccessDeviceFileGetListRequest(OCIRequest):
    """
    Request to get the list of Device Management user modifiable files.

    The response is either ``UserAccessDeviceFileGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device: accessDevice
    """

    user_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAccessDeviceFileGetRequest(OCIRequest):
    """
    Request to get a user modifiable file.

    The response is either ``UserAccessDeviceFileGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device: accessDevice
        file_format: fileFormat
    """

    user_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()
    file_format: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
            E("file_format", "fileFormat", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAccessDeviceFileModifyRequest(OCIRequest):
    """
    Request to modify a user modifiable access device file.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device: accessDevice
        file_format: fileFormat
        upload_file: uploadFile
    """

    user_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()
    file_format: str = attr.ib()
    upload_file: "OCI.FileResource" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
            E("file_format", "fileFormat", str, is_required=True),
            E(
                "upload_file",
                "uploadFile",
                OCI.FileResource,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAccessDeviceResetRequest(OCIRequest):
    """
    Reset a specific user SIP device that supports the reset operation.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device: accessDevice
    """

    user_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAccessDeviceTagsGetRequest(OCIRequest):
    """
    Request to get all the device tag names and values for a specific device.

    The resolved tags are returned only if the device is the main device for this user.

    The response is either a ``UserAccessDeviceTagsGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device: accessDevice
    """

    user_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAlternateNumbersModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Alternate Numbers.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        distinctive_ring: distinctiveRing
        alternate_entry01: alternateEntry01
        alternate_entry02: alternateEntry02
        alternate_entry03: alternateEntry03
        alternate_entry04: alternateEntry04
        alternate_entry05: alternateEntry05
        alternate_entry06: alternateEntry06
        alternate_entry07: alternateEntry07
        alternate_entry08: alternateEntry08
        alternate_entry09: alternateEntry09
        alternate_entry10: alternateEntry10
    """

    user_id: str = attr.ib()
    distinctive_ring: bool = attr.ib(default=None)
    alternate_entry01: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry02: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry03: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry04: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry05: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry06: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry07: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry08: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry09: "OCI.AlternateNumberEntry21" = attr.ib(default=None)
    alternate_entry10: "OCI.AlternateNumberEntry21" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("distinctive_ring", "distinctiveRing", bool),
            E(
                "alternate_entry01",
                "alternateEntry01",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry02",
                "alternateEntry02",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry03",
                "alternateEntry03",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry04",
                "alternateEntry04",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry05",
                "alternateEntry05",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry06",
                "alternateEntry06",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry07",
                "alternateEntry07",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry08",
                "alternateEntry08",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry09",
                "alternateEntry09",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
            E(
                "alternate_entry10",
                "alternateEntry10",
                OCI.AlternateNumberEntry21,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnnouncementFileAddRequest(OCIRequest):
    """
    Add an announcement to the user announcement repository The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        user_id: userId
        announcement_file_name: announcementFileName
        announcement_file: announcementFile
    """

    user_id: str = attr.ib()
    announcement_file_name: str = attr.ib()
    announcement_file: "OCI.LabeledMediaFileResource" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("announcement_file_name", "announcementFileName", str, is_required=True),
            E(
                "announcement_file",
                "announcementFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnnouncementFileDeleteListRequest(OCIRequest):
    """
    Delete one or more announcements from the user announcement repository The response is
    either a ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        user_id: userId
        announcement_file_key: announcementFileKey
    """

    user_id: str = attr.ib()
    announcement_file_key: List[OCI.AnnouncementFileKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "announcement_file_key",
                "announcementFileKey",
                OCI.AnnouncementFileKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnnouncementFileGetListRequest(OCIRequest):
    """
    Get the list of announcement names with associated media type and filesize for a User
    and given Announcement Repository Type The response is either a
    ``UserAnnouncementFileGetListResponse()`` or an ``ErrorResponse()``.


    Attributes:
        user_id: userId
        announcement_file_type: announcementFileType
        include_announcement_table: includeAnnouncementTable
        response_size_limit: responseSizeLimit
        search_criteria_announcement_file_name: searchCriteriaAnnouncementFileName
    """

    user_id: str = attr.ib()
    announcement_file_type: str = attr.ib(default=None)
    include_announcement_table: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_announcement_file_name: List[OCI.SearchCriteriaAnnouncementFileName] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("announcement_file_type", "announcementFileType", str),
            E(
                "include_announcement_table",
                "includeAnnouncementTable",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_announcement_file_name",
                "searchCriteriaAnnouncementFileName",
                OCI.SearchCriteriaAnnouncementFileName,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnnouncementFileGetRequest(OCIRequest):
    """
    Request to get the announcement repository file information.

    The response is either ``UserAnnouncementFileGetResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        announcement_file_key: announcementFileKey
    """

    user_id: str = attr.ib()
    announcement_file_key: "OCI.AnnouncementFileKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "announcement_file_key",
                "announcementFileKey",
                OCI.AnnouncementFileKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAnnouncementFileModifyRequest(OCIRequest):
    """
    This command is used to change the name of the file or upload a new announcement file
    for an existing announcement in the user repository.

    When modifying the file type the command will fail if the media type of the new file
    changes the announcement from audio to video (or vice versa).

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        announcement_file_key: announcementFileKey
        new_announcement_file_name: newAnnouncementFileName
        announcement_file: announcementFile
    """

    user_id: str = attr.ib()
    announcement_file_key: "OCI.AnnouncementFileKey" = attr.ib()
    new_announcement_file_name: str = attr.ib(default=None)
    announcement_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "announcement_file_key",
                "announcementFileKey",
                OCI.AnnouncementFileKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_announcement_file_name", "newAnnouncementFileName", str),
            E(
                "announcement_file",
                "announcementFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAttendantConsoleModifyRequest(OCIRequest):
    """
    Modify user's attendant console settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        launch_on_login: launchOnLogin
        allow_user_config_call_details: allowUserConfigCallDetails
        allow_user_view_call_details: allowUserViewCallDetails
        display_column_list: displayColumnList
        monitored_user_id_list: monitoredUserIdList
    """

    user_id: str = attr.ib()
    launch_on_login: bool = attr.ib(default=None)
    allow_user_config_call_details: bool = attr.ib(default=None)
    allow_user_view_call_details: bool = attr.ib(default=None)
    display_column_list: "OCI.AttendantConsoleReplacementDisplayColumnList" = attr.ib(default=None)
    monitored_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("launch_on_login", "launchOnLogin", bool),
            E("allow_user_config_call_details", "allowUserConfigCallDetails", bool),
            E("allow_user_view_call_details", "allowUserViewCallDetails", bool),
            E(
                "display_column_list",
                "displayColumnList",
                OCI.AttendantConsoleReplacementDisplayColumnList,
                is_complex=True,
            ),
            E(
                "monitored_user_id_list",
                "monitoredUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereAddSelectiveCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's BroadWorks Anywhere phone number.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereAddSelectiveCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's BroadWorks Anywhere phone number.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereModifyPhoneNumberRequest(OCIRequest):
    """
    Modify a BroadWorks Anywhere phone number The response is either a
    ``SuccessResponse()`` or an ``ErrorResponse()``.


    Attributes:
        user_id: userId
        phone_number: phoneNumber
        new_phone_number: newPhoneNumber
        description: description
        is_active: isActive
        outbound_alternate_number: outboundAlternateNumber
        broadworks_call_control: broadworksCallControl
        use_diversion_inhibitor: useDiversionInhibitor
        answer_confirmation_required: answerConfirmationRequired
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    new_phone_number: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    is_active: bool = attr.ib(default=None)
    outbound_alternate_number: str = attr.ib(default=None)
    broadworks_call_control: bool = attr.ib(default=None)
    use_diversion_inhibitor: bool = attr.ib(default=None)
    answer_confirmation_required: bool = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("new_phone_number", "newPhoneNumber", str),
            E("description", "description", str),
            E("is_active", "isActive", bool),
            E("outbound_alternate_number", "outboundAlternateNumber", str),
            E("broadworks_call_control", "broadworksCallControl", bool),
            E("use_diversion_inhibitor", "useDiversionInhibitor", bool),
            E("answer_confirmation_required", "answerConfirmationRequired", bool),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityModifyRequest21(OCIRequest):
    """
    Modify the user's BroadWorks Mobility service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    isActive, useMobileIdentityCallAnchoring, and preventCallsToOwnMobiles parameters can
    be modified by users with Group Authorization Level and above.  The mobileIdentity,
    profileIdentityDevicesToRing, rofileIdentityIncludeSharedCallAppearance,
    profileIdentityIncludeBroadworksAnywhere mobileIdentity and
    profileIdentityMobilityNumbersAlerted parameters can be modified by users with User
    Authorization Level and above when the BroadWorks Mobility service is turned on.

    Attributes:
        user_id: userId
        is_active: isActive
        use_mobile_identity_call_anchoring: useMobileIdentityCallAnchoring
        prevent_calls_to_own_mobiles: preventCallsToOwnMobiles
        mobile_identity: mobileIdentity
        profile_identity_devices_to_ring: profileIdentityDevicesToRing
        profile_identity_include_shared_call_appearance:
            profileIdentityIncludeSharedCallAppearance
        profile_identity_include_broadworks_anywhere:
            profileIdentityIncludeBroadworksAnywhere
        profile_identity_include_executive_assistant:
            profileIdentityIncludeExecutiveAssistant
        profile_identity_mobility_numbers_alerted: profileIdentityMobilityNumbersAlerted
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    use_mobile_identity_call_anchoring: bool = attr.ib(default=None)
    prevent_calls_to_own_mobiles: bool = attr.ib(default=None)
    mobile_identity: List[OCI.BroadWorksMobilityUserMobileIdentityModifyEntry] = attr.ib(default=None)
    profile_identity_devices_to_ring: str = attr.ib(default=None)
    profile_identity_include_shared_call_appearance: bool = attr.ib(default=None)
    profile_identity_include_broadworks_anywhere: bool = attr.ib(default=None)
    profile_identity_include_executive_assistant: bool = attr.ib(default=None)
    profile_identity_mobility_numbers_alerted: "OCI.BroadWorksMobilityAlertingMobileNumberReplacementList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "use_mobile_identity_call_anchoring",
                "useMobileIdentityCallAnchoring",
                bool,
            ),
            E("prevent_calls_to_own_mobiles", "preventCallsToOwnMobiles", bool),
            E(
                "mobile_identity",
                "mobileIdentity",
                OCI.BroadWorksMobilityUserMobileIdentityModifyEntry,
                is_complex=True,
                is_array=True,
            ),
            E("profile_identity_devices_to_ring", "profileIdentityDevicesToRing", str),
            E(
                "profile_identity_include_shared_call_appearance",
                "profileIdentityIncludeSharedCallAppearance",
                bool,
            ),
            E(
                "profile_identity_include_broadworks_anywhere",
                "profileIdentityIncludeBroadworksAnywhere",
                bool,
            ),
            E(
                "profile_identity_include_executive_assistant",
                "profileIdentityIncludeExecutiveAssistant",
                bool,
            ),
            E(
                "profile_identity_mobility_numbers_alerted",
                "profileIdentityMobilityNumbersAlerted",
                OCI.BroadWorksMobilityAlertingMobileNumberReplacementList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistEnterpriseModifyRequest(OCIRequest):
    """
    Replace the BroadWorks Receptionist - Enterprise monitored user list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        monitored_user_id_list: monitoredUserIdList
    """

    user_id: str = attr.ib()
    monitored_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "monitored_user_id_list",
                "monitoredUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistOfficeModifyRequest(OCIRequest):
    """
    Replace the Receptionist Office monitored user list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        monitored_user_id_list: monitoredUserIdList
    """

    user_id: str = attr.ib()
    monitored_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "monitored_user_id_list",
                "monitoredUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistSmallBusinessModifyRequest(OCIRequest):
    """
    Replace the Receptionist Small Business monitored user list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        monitored_user_id_list: monitoredUserIdList
    """

    user_id: str = attr.ib()
    monitored_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "monitored_user_id_list",
                "monitoredUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBusyLampFieldModifyRequest(OCIRequest):
    """
    Modify the settings for the busy lamp field service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        list_uri: listURI
        monitored_user_id_list: monitoredUserIdList
        enable_call_park_notification: enableCallParkNotification
    """

    user_id: str = attr.ib()
    list_uri: str = attr.ib(default=None)
    monitored_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    enable_call_park_notification: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("list_uri", "listURI", str),
            E(
                "monitored_user_id_list",
                "monitoredUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("enable_call_park_notification", "enableCallParkNotification", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterEnhancedReportingReportTemplateParamInfoGetRequest(OCIRequest):
    """
    Request to get the input parameter info for a call center report template.

    The response is either a
    ``UserCallCenterEnhancedReportingReportTemplateParamInfoGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        report_template: reportTemplate
    """

    report_template: "OCI.CallCenterReportTemplateKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "report_template",
                "reportTemplate",
                OCI.CallCenterReportTemplateKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterModifyAvailabilityListRequest(OCIRequest):
    """
    Request for an agent to login or logout of one or more Call Centers.

    Contains a list specifing the desired login status of one or more call centers.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserCallCenterModifyRequest()``

    Attributes:
        user_id: userId
        call_center_availability: callCenterAvailability
    """

    user_id: str = attr.ib()
    call_center_availability: List[OCI.CallCenterAgentAvailability] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "call_center_availability",
                "callCenterAvailability",
                OCI.CallCenterAgentAvailability,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterModifyCallCenterListRequest(OCIRequest):
    """
    Request to modify the call center list for an agent.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        agent_user_id: agentUserId
        service_user_id_list: serviceUserIdList
    """

    agent_user_id: str = attr.ib()
    service_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("agent_user_id", "agentUserId", str, is_required=True),
            E(
                "service_user_id_list",
                "serviceUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterModifyRequest(OCIRequest):
    """
    Modifies the agents call center settings and the availability for an agent in one or
    more Call Centers.

    Contains a list specifying the desired availability status of one or more call
    centers.  A default unavailable code will be used if the parameter
    agentUnavailableCode is not active, included or is invalid.  Changing the
    agentACDState from unavailable to any other state will automatically clear the
    unavailable code.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``UserCallCenterModifyRequest17sp4()``.

    Attributes:
        user_id: userId
        agent_acd_state: agentACDState
        agent_unavailable_code: agentUnavailableCode
        use_default_guard_timer: useDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_unavailable_on_personal_calls: forceUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        make_outgoing_calls_as_call_center: makeOutgoingCallsAsCallCenter
        outgoing_call_dnis: outgoingCallDNIS
        call_center_availability: callCenterAvailability
    """

    user_id: str = attr.ib()
    agent_acd_state: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    use_default_guard_timer: bool = attr.ib(default=None)
    enable_guard_timer: bool = attr.ib(default=None)
    guard_timer_seconds: int = attr.ib(default=None)
    use_system_default_unavailable_settings: bool = attr.ib(default=None)
    force_agent_unavailable_on_dnd_activation: bool = attr.ib(default=None)
    force_unavailable_on_personal_calls: bool = attr.ib(default=None)
    force_agent_unavailable_on_bounced_call_limit: bool = attr.ib(default=None)
    number_consecutive_bounced_calls_to_force_agent_unavailable: int = attr.ib(default=None)
    make_outgoing_calls_as_call_center: bool = attr.ib(default=None)
    outgoing_call_dnis: "OCI.DNISKey" = attr.ib(default=None)
    call_center_availability: List[OCI.CallCenterAgentAvailability] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("agent_acd_state", "agentACDState", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("use_default_guard_timer", "useDefaultGuardTimer", bool),
            E("enable_guard_timer", "enableGuardTimer", bool),
            E("guard_timer_seconds", "guardTimerSeconds", int),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_unavailable_on_personal_calls",
                "forceUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "make_outgoing_calls_as_call_center",
                "makeOutgoingCallsAsCallCenter",
                bool,
            ),
            E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
            E(
                "call_center_availability",
                "callCenterAvailability",
                OCI.CallCenterAgentAvailability,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterModifyRequest17sp4(OCIRequest):
    """
    Modifies the agents call center settings and the availability for an agent in one or
    more Call Centers.

    Contains a list specifying the desired availability status of one or more call
    centers.  A default unavailable code will be used if the parameter
    agentUnavailableCode is not active, included or is invalid.  Changing the
    agentACDState from unavailable to any other state will automatically clear the
    unavailable code.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``UserCallCenterModifyRequest19()``.

    Attributes:
        user_id: userId
        agent_acd_state: agentACDState
        agent_threshold_profile_name: agentThresholdProfileName
        agent_unavailable_code: agentUnavailableCode
        use_default_guard_timer: useDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        make_outgoing_calls_as_call_center: makeOutgoingCallsAsCallCenter
        outgoing_call_dnis: outgoingCallDNIS
        call_center_availability: callCenterAvailability
    """

    user_id: str = attr.ib()
    agent_acd_state: str = attr.ib(default=None)
    agent_threshold_profile_name: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    use_default_guard_timer: bool = attr.ib(default=None)
    enable_guard_timer: bool = attr.ib(default=None)
    guard_timer_seconds: int = attr.ib(default=None)
    use_system_default_unavailable_settings: bool = attr.ib(default=None)
    force_agent_unavailable_on_dnd_activation: bool = attr.ib(default=None)
    force_agent_unavailable_on_personal_calls: bool = attr.ib(default=None)
    force_agent_unavailable_on_bounced_call_limit: bool = attr.ib(default=None)
    number_consecutive_bounced_calls_to_force_agent_unavailable: int = attr.ib(default=None)
    force_agent_unavailable_on_not_reachable: bool = attr.ib(default=None)
    make_outgoing_calls_as_call_center: bool = attr.ib(default=None)
    outgoing_call_dnis: "OCI.DNISKey" = attr.ib(default=None)
    call_center_availability: List[OCI.CallCenterAgentAvailability] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("agent_acd_state", "agentACDState", str),
            E("agent_threshold_profile_name", "agentThresholdProfileName", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("use_default_guard_timer", "useDefaultGuardTimer", bool),
            E("enable_guard_timer", "enableGuardTimer", bool),
            E("guard_timer_seconds", "guardTimerSeconds", int),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
            E(
                "make_outgoing_calls_as_call_center",
                "makeOutgoingCallsAsCallCenter",
                bool,
            ),
            E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
            E(
                "call_center_availability",
                "callCenterAvailability",
                OCI.CallCenterAgentAvailability,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterModifyRequest19(OCIRequest):
    """
    Modifies the agents call center settings and the availability for an agent in one or
    more Call Centers.

    Contains a list specifying the desired availability status of one or more call
    centers.  A default unavailable code will be used if the parameter
    agentUnavailableCode is not active, included or is invalid.  Changing the
    agentACDState from unavailable to any other state will automatically clear the
    unavailable code.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        agent_acd_state: agentACDState
        agent_threshold_profile_name: agentThresholdProfileName
        agent_unavailable_code: agentUnavailableCode
        use_default_guard_timer: useDefaultGuardTimer
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        use_system_default_unavailable_settings: useSystemDefaultUnavailableSettings
        force_agent_unavailable_on_dnd_activation: forceAgentUnavailableOnDNDActivation
        force_agent_unavailable_on_personal_calls: forceAgentUnavailableOnPersonalCalls
        force_agent_unavailable_on_bounced_call_limit:
            forceAgentUnavailableOnBouncedCallLimit
        number_consecutive_bounced_calls_to_force_agent_unavailable:
            numberConsecutiveBouncedCallsToForceAgentUnavailable
        force_agent_unavailable_on_not_reachable: forceAgentUnavailableOnNotReachable
        make_outgoing_calls_as_call_center: makeOutgoingCallsAsCallCenter
        outgoing_call_dnis: outgoingCallDNIS
        call_center_agent_settings: callCenterAgentSettings
    """

    user_id: str = attr.ib()
    agent_acd_state: str = attr.ib(default=None)
    agent_threshold_profile_name: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    use_default_guard_timer: bool = attr.ib(default=None)
    enable_guard_timer: bool = attr.ib(default=None)
    guard_timer_seconds: int = attr.ib(default=None)
    use_system_default_unavailable_settings: bool = attr.ib(default=None)
    force_agent_unavailable_on_dnd_activation: bool = attr.ib(default=None)
    force_agent_unavailable_on_personal_calls: bool = attr.ib(default=None)
    force_agent_unavailable_on_bounced_call_limit: bool = attr.ib(default=None)
    number_consecutive_bounced_calls_to_force_agent_unavailable: int = attr.ib(default=None)
    force_agent_unavailable_on_not_reachable: bool = attr.ib(default=None)
    make_outgoing_calls_as_call_center: bool = attr.ib(default=None)
    outgoing_call_dnis: "OCI.DNISKey" = attr.ib(default=None)
    call_center_agent_settings: List[OCI.CallCenterAgentSettings] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("agent_acd_state", "agentACDState", str),
            E("agent_threshold_profile_name", "agentThresholdProfileName", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("use_default_guard_timer", "useDefaultGuardTimer", bool),
            E("enable_guard_timer", "enableGuardTimer", bool),
            E("guard_timer_seconds", "guardTimerSeconds", int),
            E(
                "use_system_default_unavailable_settings",
                "useSystemDefaultUnavailableSettings",
                bool,
            ),
            E(
                "force_agent_unavailable_on_dnd_activation",
                "forceAgentUnavailableOnDNDActivation",
                bool,
            ),
            E(
                "force_agent_unavailable_on_personal_calls",
                "forceAgentUnavailableOnPersonalCalls",
                bool,
            ),
            E(
                "force_agent_unavailable_on_bounced_call_limit",
                "forceAgentUnavailableOnBouncedCallLimit",
                bool,
            ),
            E(
                "number_consecutive_bounced_calls_to_force_agent_unavailable",
                "numberConsecutiveBouncedCallsToForceAgentUnavailable",
                int,
            ),
            E(
                "force_agent_unavailable_on_not_reachable",
                "forceAgentUnavailableOnNotReachable",
                bool,
            ),
            E(
                "make_outgoing_calls_as_call_center",
                "makeOutgoingCallsAsCallCenter",
                bool,
            ),
            E("outgoing_call_dnis", "outgoingCallDNIS", OCI.DNISKey, is_complex=True),
            E(
                "call_center_agent_settings",
                "callCenterAgentSettings",
                OCI.CallCenterAgentSettings,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterModifySupervisedAgentListRequest(OCIRequest):
    """
    Modifies a list of users to be supervised by a supervisor on a call center.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        supervisor_user_id: supervisorUserId
        service_user_id: serviceUserId
        agent_user_id_list: agentUserIdList
    """

    supervisor_user_id: str = attr.ib()
    service_user_id: str = attr.ib()
    agent_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "agent_user_id_list",
                "agentUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's call forwarding selective service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        forward_to_number_selection: forwardToNumberSelection
        forward_to_phone_number: forwardToPhoneNumber
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    forward_to_number_selection: str = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "forward_to_number_selection",
                "forwardToNumberSelection",
                str,
                is_required=True,
            ),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveAddCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's call forwarding selective service.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        forward_to_number_selection: forwardToNumberSelection
        forward_to_phone_number: forwardToPhoneNumber
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    forward_to_number_selection: str = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("forward_to_number_selection", "forwardToNumberSelection", str),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveModifyRequest(OCIRequest):
    """
    Modify the user's call forwarding selective service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        default_forward_to_phone_number: defaultForwardToPhoneNumber
        play_ring_reminder: playRingReminder
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    default_forward_to_phone_number: str = attr.ib(default=None)
    play_ring_reminder: bool = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("default_forward_to_phone_number", "defaultForwardToPhoneNumber", str),
            E("play_ring_reminder", "playRingReminder", bool),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallMeNowAddCriteriaRequest(OCIRequest):
    """
    Add a criterion to the user's call me now service.

    The criterion added is automatically active.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        reject_call: rejectCall
        to_dn_criteria: toDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    reject_call: bool = attr.ib()
    to_dn_criteria: "OCI.CallMeNowToDnCriteria" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("reject_call", "rejectCall", bool, is_required=True),
            E(
                "to_dn_criteria",
                "toDnCriteria",
                OCI.CallMeNowToDnCriteria,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallMeNowModifyRequest(OCIRequest):
    """
    Modify the user's call me now service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        answer_confirmation: answerConfirmation
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    answer_confirmation: str = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("answer_confirmation", "answerConfirmation", str),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's call notify service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyAddCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's call notify service.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyModifyRequest(OCIRequest):
    """
    Modify the user's call notify service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        call_notify_email_address: callNotifyEmailAddress
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    call_notify_email_address: str = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_notify_email_address", "callNotifyEmailAddress", str),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateProjectRoomAddRequest(OCIRequest):
    """
    Request to add collaborate project room.

    The response is either a ``UserCollaborateProjectRoomAddResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_name: roomName
        attendee_notification: attendeeNotification
        end_collaborate_room_session_on_owner_exit: endCollaborateRoomSessionOnOwnerExit
        owner_required: ownerRequired
        room_schedule: roomSchedule
    """

    user_id: str = attr.ib()
    room_name: str = attr.ib()
    attendee_notification: str = attr.ib()
    end_collaborate_room_session_on_owner_exit: bool = attr.ib()
    owner_required: bool = attr.ib()
    room_schedule: "OCI.CollaborateRoomSchedule" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_name", "roomName", str, is_required=True),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "end_collaborate_room_session_on_owner_exit",
                "endCollaborateRoomSessionOnOwnerExit",
                bool,
                is_required=True,
            ),
            E("owner_required", "ownerRequired", bool, is_required=True),
            E(
                "room_schedule",
                "roomSchedule",
                OCI.CollaborateRoomSchedule,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCollaborateProjectRoomModifyRequest(OCIRequest):
    """
    Request to modify collaborate room settings for a project room.

    The request fails when modifying collaborate room settings for instant rooms or My
    Room.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        room_id: roomId
        room_name: roomName
        attendee_notification: attendeeNotification
        end_collaborate_room_session_on_owner_exit: endCollaborateRoomSessionOnOwnerExit
        owner_required: ownerRequired
        room_schedule: roomSchedule
    """

    user_id: str = attr.ib()
    room_id: str = attr.ib()
    room_name: str = attr.ib(default=None)
    attendee_notification: str = attr.ib(default=None)
    end_collaborate_room_session_on_owner_exit: bool = attr.ib(default=None)
    owner_required: bool = attr.ib(default=None)
    room_schedule: "OCI.CollaborateRoomSchedule" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("room_id", "roomId", str, is_required=True),
            E("room_name", "roomName", str),
            E("attendee_notification", "attendeeNotification", str),
            E(
                "end_collaborate_room_session_on_owner_exit",
                "endCollaborateRoomSessionOnOwnerExit",
                bool,
            ),
            E("owner_required", "ownerRequired", bool),
            E(
                "room_schedule",
                "roomSchedule",
                OCI.CollaborateRoomSchedule,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommunicationBarringAuthorizationCodeAddListRequest(OCIRequest):
    """
    Add a list of Communication Barring Authorization codes to a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        code: code
    """

    user_id: str = attr.ib()
    code: List[OCI.CommunicationBarringAuthorizationCodeEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "code",
                "code",
                OCI.CommunicationBarringAuthorizationCodeEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserModifyActiveCriteriaListRequest(OCIRequest):
    """
    Modify the user's custom ringback service criteria's active setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserEnhancedCallLogsGetListRequest16(OCIRequest):
    """
    Request user's call logs.

    If the callLogType is not specified, all types of calls logs (placed, received,
    missed) are returned.  It is possible to restrict the number of rows returned using
    responsePagingControl.

    The response is either a ``UserEnhancedCallLogsGetListResponse16()`` or an
    ``ErrorResponse()``. Replaced by ``UserEnhancedCallLogsGetListRequest17sp4()``

    Attributes:
        user_id: userId
        call_log_type: callLogType
        response_paging_control: responsePagingControl
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserEnterpriseCommonPhoneListGetPagedSortedListRequest(OCIRequest):
    """
    Get an enterprise's common phone list for a user.

    The response is either a ``UserEnterpriseCommonPhoneListGetPagedSortedListResponse()``
    or an ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. The sort can be done on the name or the number in the common
    phone list.

    Attributes:
        user_id: userId
        response_paging_control: responsePagingControl
        sort_by_enterprise_common_phone_list_number: sortByEnterpriseCommonPhoneListNumber
        sort_by_enterprise_common_phone_list_name: sortByEnterpriseCommonPhoneListName
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_enterprise_common_phone_list_name:
            searchCriteriaEnterpriseCommonPhoneListName
        search_criteria_enterprise_common_phone_list_number:
            searchCriteriaEnterpriseCommonPhoneListNumber
    """

    user_id: str = attr.ib()
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib()
    sort_by_enterprise_common_phone_list_number: "OCI.SortByEnterpriseCommonPhoneListNumber" = attr.ib(default=None)
    sort_by_enterprise_common_phone_list_name: "OCI.SortByEnterpriseCommonPhoneListName" = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_enterprise_common_phone_list_name: List[OCI.SearchCriteriaEnterpriseCommonPhoneListName] = attr.ib(default=None)
    search_criteria_enterprise_common_phone_list_number: List[OCI.SearchCriteriaEnterpriseCommonPhoneListNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
                is_required=True,
            ),
            E(
                "sort_by_enterprise_common_phone_list_number",
                "sortByEnterpriseCommonPhoneListNumber",
                OCI.SortByEnterpriseCommonPhoneListNumber,
                is_complex=True,
            ),
            E(
                "sort_by_enterprise_common_phone_list_name",
                "sortByEnterpriseCommonPhoneListName",
                OCI.SortByEnterpriseCommonPhoneListName,
                is_complex=True,
            ),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_enterprise_common_phone_list_name",
                "searchCriteriaEnterpriseCommonPhoneListName",
                OCI.SearchCriteriaEnterpriseCommonPhoneListName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_enterprise_common_phone_list_number",
                "searchCriteriaEnterpriseCommonPhoneListNumber",
                OCI.SearchCriteriaEnterpriseCommonPhoneListNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveAddFilteringSelectiveCriteriaRequest(OCIRequest):
    """
    Add a filtering criteria to an executive user.

    Both executive and the executive assistant can run this command.  For the
    callToNumber, the extension element is not used and the number element is only used
    when the type is BroadWorks Mobility.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        filter: filter
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    filter: bool = attr.ib()
    from_dn_criteria: "OCI.ExecutiveCallFilteringCriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("filter", "filter", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.ExecutiveCallFilteringCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveAssistantModifyRequest(OCIRequest):
    """
    Modify the setting for executive assistant.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable_divert: enableDivert
        divert_to_phone_number: divertToPhoneNumber
        opt_in_status: optInStatus
    """

    user_id: str = attr.ib()
    enable_divert: bool = attr.ib(default=None)
    divert_to_phone_number: str = attr.ib(default=None)
    opt_in_status: List[OCI.ExecutiveAssistantOptInStatus] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable_divert", "enableDivert", bool),
            E("divert_to_phone_number", "divertToPhoneNumber", str),
            E(
                "opt_in_status",
                "optInStatus",
                OCI.ExecutiveAssistantOptInStatus,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveModifyAssistantRequest(OCIRequest):
    """
    Request to modify the assistant setting and the list of assistants assigned to an
    executive user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        allow_opt_in_out: allowOptInOut
        assistant_user_id_list: assistantUserIdList
    """

    user_id: str = attr.ib()
    allow_opt_in_out: bool = attr.ib(default=None)
    assistant_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("allow_opt_in_out", "allowOptInOut", bool),
            E(
                "assistant_user_id_list",
                "assistantUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveModifyFilteringRequest(OCIRequest):
    """
    Modify the filtering setting for an executive user.

    Both executive and the executive assistant can run this command.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable_filtering: enableFiltering
        filtering_mode: filteringMode
        simple_filter_type: simpleFilterType
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    enable_filtering: bool = attr.ib(default=None)
    filtering_mode: str = attr.ib(default=None)
    simple_filter_type: str = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable_filtering", "enableFiltering", bool),
            E("filtering_mode", "filteringMode", str),
            E("simple_filter_type", "simpleFilterType", str),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFaxMessagingModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Fax Messaging.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        phone_number: phoneNumber
        extension: extension
        sip_alias_list: sipAliasList
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    sip_alias_list: "OCI.ReplacementSIPAliasList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E(
                "sip_alias_list",
                "sipAliasList",
                OCI.ReplacementSIPAliasList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFeatureAccessCodeModifyListRequest(OCIRequest):
    """
    Enable or disable a list of feature access codes for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        feature_access_code: featureAccessCode
    """

    user_id: str = attr.ib()
    feature_access_code: List[OCI.UserFeatureAccessCodeModifyEntry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "feature_access_code",
                "featureAccessCode",
                OCI.UserFeatureAccessCodeModifyEntry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetListInSystemRequest(OCIRequest):
    """
    Request the list of users in the system.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``UserGetListInSystemResponse()`` or an ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_service_provider: searchCriteriaExactServiceProvider
        search_criteria_exact_user_in_trunk_group: searchCriteriaExactUserInTrunkGroup
        search_criteria_exact_user_network_class_of_service:
            searchCriteriaExactUserNetworkClassOfService
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_service_provider: "OCI.SearchCriteriaExactServiceProvider" = attr.ib(default=None)
    search_criteria_exact_user_in_trunk_group: "OCI.SearchCriteriaExactUserInTrunkGroup" = attr.ib(default=None)
    search_criteria_exact_user_network_class_of_service: "OCI.SearchCriteriaExactUserNetworkClassOfService" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_service_provider",
                "searchCriteriaExactServiceProvider",
                OCI.SearchCriteriaExactServiceProvider,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_in_trunk_group",
                "searchCriteriaExactUserInTrunkGroup",
                OCI.SearchCriteriaExactUserInTrunkGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_network_class_of_service",
                "searchCriteriaExactUserNetworkClassOfService",
                OCI.SearchCriteriaExactUserNetworkClassOfService,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetServiceInstanceListInSystemRequest(OCIRequest):
    """
    Request the list of Service Instances in the system.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``UserGetServiceInstanceListInSystemResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        response_size_limit: responseSizeLimit
        search_criteria_exact_service_type: searchCriteriaExactServiceType
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_service_provider: searchCriteriaExactServiceProvider
    """

    response_size_limit: int = attr.ib(default=None)
    search_criteria_exact_service_type: "OCI.SearchCriteriaExactServiceType" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_service_provider: "OCI.SearchCriteriaExactServiceProvider" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_exact_service_type",
                "searchCriteriaExactServiceType",
                OCI.SearchCriteriaExactServiceType,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_service_provider",
                "searchCriteriaExactServiceProvider",
                OCI.SearchCriteriaExactServiceProvider,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGroupCommonPhoneListGetPagedSortedListRequest(OCIRequest):
    """
    Get a user's group's common phone list.

    The response is either a ``UserGroupCommonPhoneListGetPagedSortedListResponse()`` or
    an ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. The sort can be done on the name or the number in the common
    phone list.

    Attributes:
        user_id: userId
        response_paging_control: responsePagingControl
        sort_by_group_common_phone_list_number: sortByGroupCommonPhoneListNumber
        sort_by_group_common_phone_list_name: sortByGroupCommonPhoneListName
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_group_common_phone_list_name:
            searchCriteriaGroupCommonPhoneListName
        search_criteria_group_common_phone_list_number:
            searchCriteriaGroupCommonPhoneListNumber
    """

    user_id: str = attr.ib()
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib()
    sort_by_group_common_phone_list_number: "OCI.SortByGroupCommonPhoneListNumber" = attr.ib(default=None)
    sort_by_group_common_phone_list_name: "OCI.SortByGroupCommonPhoneListName" = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_group_common_phone_list_name: List[OCI.SearchCriteriaGroupCommonPhoneListName] = attr.ib(default=None)
    search_criteria_group_common_phone_list_number: List[OCI.SearchCriteriaGroupCommonPhoneListNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
                is_required=True,
            ),
            E(
                "sort_by_group_common_phone_list_number",
                "sortByGroupCommonPhoneListNumber",
                OCI.SortByGroupCommonPhoneListNumber,
                is_complex=True,
            ),
            E(
                "sort_by_group_common_phone_list_name",
                "sortByGroupCommonPhoneListName",
                OCI.SortByGroupCommonPhoneListName,
                is_complex=True,
            ),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_group_common_phone_list_name",
                "searchCriteriaGroupCommonPhoneListName",
                OCI.SearchCriteriaGroupCommonPhoneListName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_common_phone_list_number",
                "searchCriteriaGroupCommonPhoneListNumber",
                OCI.SearchCriteriaGroupCommonPhoneListNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGroupCustomContactDirectoryGetPagedSortedListRequest(OCIRequest):
    """
    Gets a Custom Contact Directory in a group.

    The response is either ``UserGroupCustomContactDirectoryGetPagedSortedListResponse()``
    or ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. The sort can be done on the user last name, first name, or
    department.

    Attributes:
        user_id: userId
        name: name
        response_paging_control: responsePagingControl
        sort_by_user_last_name: sortByUserLastName
        sort_by_user_first_name: sortByUserFirstName
        sort_by_user_department: sortByUserDepartment
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_department_name: searchCriteriaDepartmentName
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    name: str = attr.ib()
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib()
    sort_by_user_last_name: "OCI.SortByUserLastName" = attr.ib(default=None)
    sort_by_user_first_name: "OCI.SortByUserFirstName" = attr.ib(default=None)
    sort_by_user_department: "OCI.SortByUserDepartment" = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_department_name: List[OCI.SearchCriteriaDepartmentName] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
                is_required=True,
            ),
            E(
                "sort_by_user_last_name",
                "sortByUserLastName",
                OCI.SortByUserLastName,
                is_complex=True,
            ),
            E(
                "sort_by_user_first_name",
                "sortByUserFirstName",
                OCI.SortByUserFirstName,
                is_complex=True,
            ),
            E(
                "sort_by_user_department",
                "sortByUserDepartment",
                OCI.SortByUserDepartment,
                is_complex=True,
            ),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_department_name",
                "searchCriteriaDepartmentName",
                OCI.SearchCriteriaDepartmentName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHolidayScheduleAddRequest(OCIRequest):
    """
    Add a holiday schedule to a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        holiday_schedule_name: holidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    user_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()
    holiday01: "OCI.Holiday" = attr.ib(default=None)
    holiday02: "OCI.Holiday" = attr.ib(default=None)
    holiday03: "OCI.Holiday" = attr.ib(default=None)
    holiday04: "OCI.Holiday" = attr.ib(default=None)
    holiday05: "OCI.Holiday" = attr.ib(default=None)
    holiday06: "OCI.Holiday" = attr.ib(default=None)
    holiday07: "OCI.Holiday" = attr.ib(default=None)
    holiday08: "OCI.Holiday" = attr.ib(default=None)
    holiday09: "OCI.Holiday" = attr.ib(default=None)
    holiday10: "OCI.Holiday" = attr.ib(default=None)
    holiday11: "OCI.Holiday" = attr.ib(default=None)
    holiday12: "OCI.Holiday" = attr.ib(default=None)
    holiday13: "OCI.Holiday" = attr.ib(default=None)
    holiday14: "OCI.Holiday" = attr.ib(default=None)
    holiday15: "OCI.Holiday" = attr.ib(default=None)
    holiday16: "OCI.Holiday" = attr.ib(default=None)
    holiday17: "OCI.Holiday" = attr.ib(default=None)
    holiday18: "OCI.Holiday" = attr.ib(default=None)
    holiday19: "OCI.Holiday" = attr.ib(default=None)
    holiday20: "OCI.Holiday" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHolidayScheduleModifyRequest(OCIRequest):
    """
    Modify a holiday schedule for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        holiday_schedule_name: holidayScheduleName
        new_holiday_schedule_name: newHolidayScheduleName
        holiday01: holiday01
        holiday02: holiday02
        holiday03: holiday03
        holiday04: holiday04
        holiday05: holiday05
        holiday06: holiday06
        holiday07: holiday07
        holiday08: holiday08
        holiday09: holiday09
        holiday10: holiday10
        holiday11: holiday11
        holiday12: holiday12
        holiday13: holiday13
        holiday14: holiday14
        holiday15: holiday15
        holiday16: holiday16
        holiday17: holiday17
        holiday18: holiday18
        holiday19: holiday19
        holiday20: holiday20
    """

    user_id: str = attr.ib()
    holiday_schedule_name: str = attr.ib()
    new_holiday_schedule_name: str = attr.ib(default=None)
    holiday01: "OCI.Holiday" = attr.ib(default=None)
    holiday02: "OCI.Holiday" = attr.ib(default=None)
    holiday03: "OCI.Holiday" = attr.ib(default=None)
    holiday04: "OCI.Holiday" = attr.ib(default=None)
    holiday05: "OCI.Holiday" = attr.ib(default=None)
    holiday06: "OCI.Holiday" = attr.ib(default=None)
    holiday07: "OCI.Holiday" = attr.ib(default=None)
    holiday08: "OCI.Holiday" = attr.ib(default=None)
    holiday09: "OCI.Holiday" = attr.ib(default=None)
    holiday10: "OCI.Holiday" = attr.ib(default=None)
    holiday11: "OCI.Holiday" = attr.ib(default=None)
    holiday12: "OCI.Holiday" = attr.ib(default=None)
    holiday13: "OCI.Holiday" = attr.ib(default=None)
    holiday14: "OCI.Holiday" = attr.ib(default=None)
    holiday15: "OCI.Holiday" = attr.ib(default=None)
    holiday16: "OCI.Holiday" = attr.ib(default=None)
    holiday17: "OCI.Holiday" = attr.ib(default=None)
    holiday18: "OCI.Holiday" = attr.ib(default=None)
    holiday19: "OCI.Holiday" = attr.ib(default=None)
    holiday20: "OCI.Holiday" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("holiday_schedule_name", "holidayScheduleName", str, is_required=True),
            E("new_holiday_schedule_name", "newHolidayScheduleName", str),
            E("holiday01", "holiday01", OCI.Holiday, is_complex=True),
            E("holiday02", "holiday02", OCI.Holiday, is_complex=True),
            E("holiday03", "holiday03", OCI.Holiday, is_complex=True),
            E("holiday04", "holiday04", OCI.Holiday, is_complex=True),
            E("holiday05", "holiday05", OCI.Holiday, is_complex=True),
            E("holiday06", "holiday06", OCI.Holiday, is_complex=True),
            E("holiday07", "holiday07", OCI.Holiday, is_complex=True),
            E("holiday08", "holiday08", OCI.Holiday, is_complex=True),
            E("holiday09", "holiday09", OCI.Holiday, is_complex=True),
            E("holiday10", "holiday10", OCI.Holiday, is_complex=True),
            E("holiday11", "holiday11", OCI.Holiday, is_complex=True),
            E("holiday12", "holiday12", OCI.Holiday, is_complex=True),
            E("holiday13", "holiday13", OCI.Holiday, is_complex=True),
            E("holiday14", "holiday14", OCI.Holiday, is_complex=True),
            E("holiday15", "holiday15", OCI.Holiday, is_complex=True),
            E("holiday16", "holiday16", OCI.Holiday, is_complex=True),
            E("holiday17", "holiday17", OCI.Holiday, is_complex=True),
            E("holiday18", "holiday18", OCI.Holiday, is_complex=True),
            E("holiday19", "holiday19", OCI.Holiday, is_complex=True),
            E("holiday20", "holiday20", OCI.Holiday, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInterceptUserModifyRequest(OCIRequest):
    """
    Modify the user's intercept user service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserInterceptUserModifyRequest16()``

    Attributes:
        user_id: userId
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    announcement_selection: str = attr.ib(default=None)
    audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    play_new_phone_number: bool = attr.ib(default=None)
    new_phone_number: str = attr.ib(default=None)
    transfer_on_zero_to_phone_number: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("announcement_selection", "announcementSelection", str),
            E("audio_file", "audioFile", OCI.LabeledFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledFileResource, is_complex=True),
            E("play_new_phone_number", "playNewPhoneNumber", bool),
            E("new_phone_number", "newPhoneNumber", str),
            E("transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserInterceptUserModifyRequest16(OCIRequest):
    """
    Modify the user's intercept user service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        play_new_phone_number: playNewPhoneNumber
        new_phone_number: newPhoneNumber
        transfer_on_zero_to_phone_number: transferOnZeroToPhoneNumber
        transfer_phone_number: transferPhoneNumber
        reroute_outbound_calls: rerouteOutboundCalls
        outbound_reroute_phone_number: outboundReroutePhoneNumber
        allow_outbound_local_calls: allowOutboundLocalCalls
        inbound_call_mode: inboundCallMode
        alternate_blocking_announcement: alternateBlockingAnnouncement
        route_to_voice_mail: routeToVoiceMail
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    announcement_selection: str = attr.ib(default=None)
    audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    play_new_phone_number: bool = attr.ib(default=None)
    new_phone_number: str = attr.ib(default=None)
    transfer_on_zero_to_phone_number: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    reroute_outbound_calls: bool = attr.ib(default=None)
    outbound_reroute_phone_number: str = attr.ib(default=None)
    allow_outbound_local_calls: bool = attr.ib(default=None)
    inbound_call_mode: str = attr.ib(default=None)
    alternate_blocking_announcement: bool = attr.ib(default=None)
    route_to_voice_mail: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("announcement_selection", "announcementSelection", str),
            E("audio_file", "audioFile", OCI.LabeledMediaFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledMediaFileResource, is_complex=True),
            E("play_new_phone_number", "playNewPhoneNumber", bool),
            E("new_phone_number", "newPhoneNumber", str),
            E("transfer_on_zero_to_phone_number", "transferOnZeroToPhoneNumber", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("reroute_outbound_calls", "rerouteOutboundCalls", bool),
            E("outbound_reroute_phone_number", "outboundReroutePhoneNumber", str),
            E("allow_outbound_local_calls", "allowOutboundLocalCalls", bool),
            E("inbound_call_mode", "inboundCallMode", str),
            E("alternate_blocking_announcement", "alternateBlockingAnnouncement", bool),
            E("route_to_voice_mail", "routeToVoiceMail", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserLDAPIntegrationGetDirectoryListRequest(OCIRequest):
    """
    Request the LDAP entry lists for a user.

    The response is either a ``UserLDAPIntegrationGetDirectoryListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        search_key: searchKey
        page: page
    """

    user_id: str = attr.ib()
    search_key: str = attr.ib(default=None)
    page: "OCI.LDAPPage" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("search_key", "searchKey", str),
            E("page", "page", OCI.LDAPPage, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMaliciousCallTraceModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Malicious Call Trace.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        trace_type_selection: traceTypeSelection
        trace_for_time_period: traceForTimePeriod
        trace_time_period: traceTimePeriod
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    trace_type_selection: str = attr.ib(default=None)
    trace_for_time_period: bool = attr.ib(default=None)
    trace_time_period: "OCI.MaliciousCallTraceTimePeriod" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("trace_type_selection", "traceTypeSelection", str),
            E("trace_for_time_period", "traceForTimePeriod", bool),
            E(
                "trace_time_period",
                "traceTimePeriod",
                OCI.MaliciousCallTraceTimePeriod,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingAddConferenceRequest(OCIRequest):
    """
    Add a Meet-Me conference.

    The response is either ``UserMeetMeConferencingAddConferenceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        bridge_id: bridgeId
        title: title
        estimated_participants: estimatedParticipants
        restrict_participants: restrictParticipants
        max_participants: maxParticipants
        account_code: accountCode
        mute_all_attendees_on_entry: muteAllAttendeesOnEntry
        end_conference_on_moderator_exit: endConferenceOnModeratorExit
        moderator_required: moderatorRequired
        attendee_notification: attendeeNotification
        conference_schedule: conferenceSchedule
    """

    user_id: str = attr.ib()
    bridge_id: str = attr.ib()
    title: str = attr.ib()
    estimated_participants: int = attr.ib(default=None)
    restrict_participants: bool = attr.ib(default=None)
    max_participants: int = attr.ib(default=None)
    account_code: str = attr.ib(default=None)
    mute_all_attendees_on_entry: bool = attr.ib()
    end_conference_on_moderator_exit: bool = attr.ib()
    moderator_required: bool = attr.ib()
    attendee_notification: str = attr.ib()
    conference_schedule: "OCI.MeetMeConferencingConferenceSchedule" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("bridge_id", "bridgeId", str, is_required=True),
            E("title", "title", str, is_required=True),
            E("estimated_participants", "estimatedParticipants", int),
            E("restrict_participants", "restrictParticipants", bool),
            E("max_participants", "maxParticipants", int),
            E("account_code", "accountCode", str),
            E(
                "mute_all_attendees_on_entry",
                "muteAllAttendeesOnEntry",
                bool,
                is_required=True,
            ),
            E(
                "end_conference_on_moderator_exit",
                "endConferenceOnModeratorExit",
                bool,
                is_required=True,
            ),
            E("moderator_required", "moderatorRequired", bool, is_required=True),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "conference_schedule",
                "conferenceSchedule",
                OCI.MeetMeConferencingConferenceSchedule,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingAddConferenceRequest19(OCIRequest):
    """
    Add a Meet-Me conference.

    The response is either ``UserMeetMeConferencingAddConferenceResponse19()`` or
    ``ErrorResponse()``. The startTime element is adjusted to the first occurrence of the
    recurrent schedule that comes at or after the startTime.  The startTime, endTime and
    recurrence information for a conferenceSchedule element will be adjusted to the user
    Host time zone.

    Attributes:
        user_id: userId
        bridge_id: bridgeId
        title: title
        estimated_participants: estimatedParticipants
        restrict_participants: restrictParticipants
        max_participants: maxParticipants
        account_code: accountCode
        mute_all_attendees_on_entry: muteAllAttendeesOnEntry
        end_conference_on_moderator_exit: endConferenceOnModeratorExit
        moderator_required: moderatorRequired
        require_security_pin: requireSecurityPin
        allow_unique_identifier: allowUniqueIdentifier
        attendee_notification: attendeeNotification
        conference_schedule: conferenceSchedule
    """

    user_id: str = attr.ib()
    bridge_id: str = attr.ib()
    title: str = attr.ib()
    estimated_participants: int = attr.ib(default=None)
    restrict_participants: bool = attr.ib(default=None)
    max_participants: int = attr.ib(default=None)
    account_code: str = attr.ib(default=None)
    mute_all_attendees_on_entry: bool = attr.ib()
    end_conference_on_moderator_exit: bool = attr.ib()
    moderator_required: bool = attr.ib()
    require_security_pin: bool = attr.ib()
    allow_unique_identifier: bool = attr.ib()
    attendee_notification: str = attr.ib()
    conference_schedule: "OCI.MeetMeConferencingConferenceSchedule" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("bridge_id", "bridgeId", str, is_required=True),
            E("title", "title", str, is_required=True),
            E("estimated_participants", "estimatedParticipants", int),
            E("restrict_participants", "restrictParticipants", bool),
            E("max_participants", "maxParticipants", int),
            E("account_code", "accountCode", str),
            E(
                "mute_all_attendees_on_entry",
                "muteAllAttendeesOnEntry",
                bool,
                is_required=True,
            ),
            E(
                "end_conference_on_moderator_exit",
                "endConferenceOnModeratorExit",
                bool,
                is_required=True,
            ),
            E("moderator_required", "moderatorRequired", bool, is_required=True),
            E("require_security_pin", "requireSecurityPin", bool, is_required=True),
            E(
                "allow_unique_identifier",
                "allowUniqueIdentifier",
                bool,
                is_required=True,
            ),
            E("attendee_notification", "attendeeNotification", str, is_required=True),
            E(
                "conference_schedule",
                "conferenceSchedule",
                OCI.MeetMeConferencingConferenceSchedule,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingDeleteConferenceListRequest(OCIRequest):
    """
    Request to delete one or more conferences which are owned by the user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
    """

    user_id: str = attr.ib()
    conference_key: List[OCI.MeetMeConferencingConferenceKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingDeleteConferenceRecordingListRequest(OCIRequest):
    """
    Request to delete one or more conference recordings owned by the user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        recording_key: recordingKey
    """

    user_id: str = attr.ib()
    recording_key: List[OCI.MeetMeConferencingConferenceRecordingKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "recording_key",
                "recordingKey",
                OCI.MeetMeConferencingConferenceRecordingKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceDelegateListRequest(OCIRequest):
    """
    Get the conference delegates for this conference.

    The response is either ``UserMeetMeConferencingGetConferenceDelegateListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceGreetingRequest(OCIRequest):
    """
    Get the information of a conference custom greeting.

    The response is either ``UserMeetMeConferencingGetConferenceGreetingResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceGreetingRequest20(OCIRequest):
    """
    Get the information of a conference custom greeting.

    The response is either ``UserMeetMeConferencingGetConferenceGreetingResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceRequest(OCIRequest):
    """
    Get the information of a conference owned by the user.

    The response is either ``UserMeetMeConferencingGetConferenceResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceRequest19(OCIRequest):
    """
    Get the information of a conference owned by the user.

    The response is either ``UserMeetMeConferencingGetConferenceResponse19()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetConferenceRequest20(OCIRequest):
    """
    Get the information of a conference owned by the user.

    The response is either ``UserMeetMeConferencingGetConferenceResponse20()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingModifyConferenceDelegateListRequest(OCIRequest):
    """
    Modify the existing conference delegates list.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
        conference_delegate_user_list: conferenceDelegateUserList
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()
    conference_delegate_user_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "conference_delegate_user_list",
                "conferenceDelegateUserList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingModifyConferenceGreetingRequest(OCIRequest):
    """
    Modify an existing custom greeting audio file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
        play_entrance_greeting: playEntranceGreeting
        entrance_greeting_file: entranceGreetingFile
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()
    play_entrance_greeting: bool = attr.ib(default=None)
    entrance_greeting_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
            E("play_entrance_greeting", "playEntranceGreeting", bool),
            E(
                "entrance_greeting_file",
                "entranceGreetingFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingModifyConferenceGreetingRequest20(OCIRequest):
    """
    Modify an existing custom greeting audio file.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
        play_entrance_greeting: playEntranceGreeting
        entrance_greeting_file: entranceGreetingFile
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()
    play_entrance_greeting: bool = attr.ib(default=None)
    entrance_greeting_file: "OCI.AnnouncementFileKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
            E("play_entrance_greeting", "playEntranceGreeting", bool),
            E(
                "entrance_greeting_file",
                "entranceGreetingFile",
                OCI.AnnouncementFileKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingModifyConferenceRequest(OCIRequest):
    """
    Modify an existing conference.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The startTime
    element is adjusted to the first occurrence of the recurrent schedule that comes at or
    after the startTime.  The startTime, endTime and recurrence information for a
    conferenceSchedule element will be adjusted to the user Host time zone.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
        title: title
        estimated_participants: estimatedParticipants
        restrict_participants: restrictParticipants
        max_participants: maxParticipants
        account_code: accountCode
        mute_all_attendees_on_entry: muteAllAttendeesOnEntry
        end_conference_on_moderator_exit: endConferenceOnModeratorExit
        moderator_required: moderatorRequired
        require_security_pin: requireSecurityPin
        allow_unique_identifier: allowUniqueIdentifier
        attendee_notification: attendeeNotification
        conference_schedule: conferenceSchedule
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()
    title: str = attr.ib(default=None)
    estimated_participants: int = attr.ib(default=None)
    restrict_participants: bool = attr.ib(default=None)
    max_participants: int = attr.ib(default=None)
    account_code: str = attr.ib(default=None)
    mute_all_attendees_on_entry: bool = attr.ib(default=None)
    end_conference_on_moderator_exit: bool = attr.ib(default=None)
    moderator_required: bool = attr.ib(default=None)
    require_security_pin: bool = attr.ib(default=None)
    allow_unique_identifier: bool = attr.ib(default=None)
    attendee_notification: str = attr.ib(default=None)
    conference_schedule: "OCI.MeetMeConferencingConferenceSchedule" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
            E("title", "title", str),
            E("estimated_participants", "estimatedParticipants", int),
            E("restrict_participants", "restrictParticipants", bool),
            E("max_participants", "maxParticipants", int),
            E("account_code", "accountCode", str),
            E("mute_all_attendees_on_entry", "muteAllAttendeesOnEntry", bool),
            E("end_conference_on_moderator_exit", "endConferenceOnModeratorExit", bool),
            E("moderator_required", "moderatorRequired", bool),
            E("require_security_pin", "requireSecurityPin", bool),
            E("allow_unique_identifier", "allowUniqueIdentifier", bool),
            E("attendee_notification", "attendeeNotification", str),
            E(
                "conference_schedule",
                "conferenceSchedule",
                OCI.MeetMeConferencingConferenceSchedule,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserModifyRequest14(OCIRequest):
    """
    Request to modify a user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        old_password: oldPassword
        new_password: newPassword
        department: department
        language: language
        time_zone: timeZone
        sip_alias_list: sipAliasList
        endpoint: endpoint
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
    """

    user_id: str = attr.ib()
    last_name: str = attr.ib(default=None)
    first_name: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    hiragana_last_name: str = attr.ib(default=None)
    hiragana_first_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    old_password: str = attr.ib(default=None)
    new_password: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    sip_alias_list: "OCI.ReplacementSIPAliasList" = attr.ib(default=None)
    endpoint: str = attr.ib(default=None)
    title: str = attr.ib(default=None)
    pager_phone_number: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    email_address: str = attr.ib(default=None)
    yahoo_id: str = attr.ib(default=None)
    address_location: str = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("last_name", "lastName", str),
            E("first_name", "firstName", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("old_password", "oldPassword", str),
            E("new_password", "newPassword", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E(
                "sip_alias_list",
                "sipAliasList",
                OCI.ReplacementSIPAliasList,
                is_complex=True,
            ),
            E("endpoint", "endpoint", str, is_complex=True),  # unknown
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserModifyRequest14sp9(OCIRequest):
    """
    Request to modify a user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``UserModifyRequest16()``

    Attributes:
        user_id: userId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        old_password: oldPassword
        new_password: newPassword
        department: department
        language: language
        time_zone: timeZone
        sip_alias_list: sipAliasList
        endpoint: endpoint
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        network_class_of_service: networkClassOfService
    """

    user_id: str = attr.ib()
    last_name: str = attr.ib(default=None)
    first_name: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    hiragana_last_name: str = attr.ib(default=None)
    hiragana_first_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    old_password: str = attr.ib(default=None)
    new_password: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    sip_alias_list: "OCI.ReplacementSIPAliasList" = attr.ib(default=None)
    endpoint: str = attr.ib(default=None)
    title: str = attr.ib(default=None)
    pager_phone_number: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    email_address: str = attr.ib(default=None)
    yahoo_id: str = attr.ib(default=None)
    address_location: str = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("last_name", "lastName", str),
            E("first_name", "firstName", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("old_password", "oldPassword", str),
            E("new_password", "newPassword", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E(
                "sip_alias_list",
                "sipAliasList",
                OCI.ReplacementSIPAliasList,
                is_complex=True,
            ),
            E("endpoint", "endpoint", str, is_complex=True),  # unknown
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserModifyRequest16(OCIRequest):
    """
    Replaced By ``UserModifyRequest17sp4()`` Request to modify a user.

    When oldPassword is specified, all password rule applies.  If oldPassword in not
    specified, any password rule related to old password does not apply.  The request will
    fail if officeZoneName or primaryZoneName is present but the Location-Based Calling
    Restrictions service is not assigned to the user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        old_password: oldPassword
        new_password: newPassword
        department: department
        language: language
        time_zone: timeZone
        sip_alias_list: sipAliasList
        endpoint: endpoint
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
    """

    user_id: str = attr.ib()
    last_name: str = attr.ib(default=None)
    first_name: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    hiragana_last_name: str = attr.ib(default=None)
    hiragana_first_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    old_password: str = attr.ib(default=None)
    new_password: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    sip_alias_list: "OCI.ReplacementSIPAliasList" = attr.ib(default=None)
    endpoint: str = attr.ib(default=None)
    title: str = attr.ib(default=None)
    pager_phone_number: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    email_address: str = attr.ib(default=None)
    yahoo_id: str = attr.ib(default=None)
    address_location: str = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)
    office_zone_name: str = attr.ib(default=None)
    primary_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("last_name", "lastName", str),
            E("first_name", "firstName", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("old_password", "oldPassword", str),
            E("new_password", "newPassword", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E(
                "sip_alias_list",
                "sipAliasList",
                OCI.ReplacementSIPAliasList,
                is_complex=True,
            ),
            E("endpoint", "endpoint", str, is_complex=True),  # unknown
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserModifyRequest17sp4(OCIRequest):
    """
    Request to modify a user.

    When oldPassword is specified, all password rule applies.  If oldPassword in not
    specified, any password rule related to old password does not apply.  The request will
    fail if officeZoneName or primaryZoneName is present but the Location-Based Calling
    Restrictions service is not assigned to the user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    data elements are only used in AS data mode: contact[2]-contact[5] The impId and
    impPassword are accepted when the Third-Party IMP service is assigned to the user;
    when Integrated IMP service is assigned to the user and active, only the impPassword
    is accepted; all other cases, the request fails if either field is changed.

    Attributes:
        user_id: userId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        name_dialing_name: nameDialingName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        old_password: oldPassword
        new_password: newPassword
        department: department
        language: language
        time_zone: timeZone
        sip_alias_list: sipAliasList
        endpoint: endpoint
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
        imp_id: impId
        imp_password: impPassword
    """

    user_id: str = attr.ib()
    last_name: str = attr.ib(default=None)
    first_name: str = attr.ib(default=None)
    calling_line_id_last_name: str = attr.ib(default=None)
    calling_line_id_first_name: str = attr.ib(default=None)
    name_dialing_name: "OCI.NameDialingName" = attr.ib(default=None)
    hiragana_last_name: str = attr.ib(default=None)
    hiragana_first_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    old_password: str = attr.ib(default=None)
    new_password: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    sip_alias_list: "OCI.ReplacementSIPAliasList" = attr.ib(default=None)
    endpoint: str = attr.ib(default=None)
    title: str = attr.ib(default=None)
    pager_phone_number: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    email_address: str = attr.ib(default=None)
    yahoo_id: str = attr.ib(default=None)
    address_location: str = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)
    office_zone_name: str = attr.ib(default=None)
    primary_zone_name: str = attr.ib(default=None)
    imp_id: str = attr.ib(default=None)
    imp_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("last_name", "lastName", str),
            E("first_name", "firstName", str),
            E("calling_line_id_last_name", "callingLineIdLastName", str),
            E("calling_line_id_first_name", "callingLineIdFirstName", str),
            E(
                "name_dialing_name",
                "nameDialingName",
                OCI.NameDialingName,
                is_complex=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("old_password", "oldPassword", str),
            E("new_password", "newPassword", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E(
                "sip_alias_list",
                "sipAliasList",
                OCI.ReplacementSIPAliasList,
                is_complex=True,
            ),
            E("endpoint", "endpoint", str, is_complex=True),  # unknown
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
            E("imp_id", "impId", str),
            E("imp_password", "impPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldUserModifyRequest(OCIRequest):
    """
    Modify data for Music On Hold User.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserMusicOnHoldUserModifyRequest16()``

    Attributes:
        user_id: userId
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    user_id: str = attr.ib()
    source: "OCI.MusicOnHoldUserSourceModify" = attr.ib(default=None)
    use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    internal_source: "OCI.MusicOnHoldUserSourceModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("source", "source", OCI.MusicOnHoldUserSourceModify, is_complex=True),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldUserSourceModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldUserModifyRequest16(OCIRequest):
    """
    Modify data for Music On Hold User.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    user_id: str = attr.ib()
    source: "OCI.MusicOnHoldUserSourceModify16" = attr.ib(default=None)
    use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    internal_source: "OCI.MusicOnHoldUserSourceModify16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("source", "source", OCI.MusicOnHoldUserSourceModify16, is_complex=True),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldUserSourceModify16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMusicOnHoldUserModifyRequest20(OCIRequest):
    """
    Modify data for Music On Hold User.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        source: source
        use_alternate_source_for_internal_calls: useAlternateSourceForInternalCalls
        internal_source: internalSource
    """

    user_id: str = attr.ib()
    source: "OCI.MusicOnHoldUserSourceModify20" = attr.ib(default=None)
    use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    internal_source: "OCI.MusicOnHoldUserSourceModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("source", "source", OCI.MusicOnHoldUserSourceModify20, is_complex=True),
            E(
                "use_alternate_source_for_internal_calls",
                "useAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "internal_source",
                "internalSource",
                OCI.MusicOnHoldUserSourceModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOCICallControlApplicationModifyRequest(OCIRequest):
    """
    Modify which OCI Call Control Applications are enabled on a user The response is
    either ``SuccessResponse()`` or ``ErrorResponse()``.


    Attributes:
        user_id: userId
        application_id_list: applicationIdList
    """

    user_id: str = attr.ib()
    application_id_list: "OCI.ReplacementOCICallControlApplicationIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "application_id_list",
                "applicationIdList",
                OCI.ReplacementOCICallControlApplicationIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanAuthorizationCodeAddListRequest(OCIRequest):
    """
    Add a list of authorization codes to a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        code_entry: codeEntry
    """

    user_id: str = attr.ib()
    code_entry: List[OCI.OutgoingCallingPlanAuthorizationCodeEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "code_entry",
                "codeEntry",
                OCI.OutgoingCallingPlanAuthorizationCodeEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanCallMeNowModifyRequest(OCIRequest):
    """
    Modify the Call Me Now call permissions for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingCallingPlanCallMeNowPermissionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanCallMeNowPermissionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanOriginatingModifyRequest(OCIRequest):
    """
    Modify the originating permissions for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingCallingPlanOriginatingPermissionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanOriginatingPermissionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanRedirectedModifyRequest(OCIRequest):
    """
    Modify the call forwarded/transferred permissions for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingCallingPlanRedirectedPermissionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanRedirectedPermissionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanRedirectingModifyRequest(OCIRequest):
    """
    Modify the initiating call forwards/transfer permissions for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingCallingPlanRedirectingPermissionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanRedirectingPermissionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanTransferNumbersModifyRequest(OCIRequest):
    """
    Modify the transfer numbers for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_numbers: userNumbers
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_numbers: "OCI.OutgoingCallingPlanTransferNumbersModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_numbers",
                "userNumbers",
                OCI.OutgoingCallingPlanTransferNumbersModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantExclusionNumberGetListRequest(OCIRequest):
    """
    Request to get the User Personal Assistant Exclusion Number List information.

    The response is either a userPersonalAssistantExclusionNumberGetListResponse or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        search_criteria_personal_assistant_exclusion_number:
            searchCriteriaPersonalAssistantExclusionNumber
        search_criteria_personal_assistant_exclusion_number_description:
            searchCriteriaPersonalAssistantExclusionNumberDescription
        response_size_limit: responseSizeLimit
    """

    user_id: str = attr.ib()
    search_criteria_personal_assistant_exclusion_number: List[OCI.SearchCriteriaPersonalAssistantExclusionNumber] = attr.ib(default=None)
    search_criteria_personal_assistant_exclusion_number_description: List[OCI.SearchCriteriaPersonalAssistantExclusionNumberDescription] = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "search_criteria_personal_assistant_exclusion_number",
                "searchCriteriaPersonalAssistantExclusionNumber",
                OCI.SearchCriteriaPersonalAssistantExclusionNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_personal_assistant_exclusion_number_description",
                "searchCriteriaPersonalAssistantExclusionNumberDescription",
                OCI.SearchCriteriaPersonalAssistantExclusionNumberDescription,
                is_complex=True,
                is_array=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalPhoneListAddListRequest(OCIRequest):
    """
    Add one or more entries to a user's personal phone list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        entry: entry
    """

    user_id: str = attr.ib()
    entry: List[OCI.PhoneListEntry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "entry",
                "entry",
                OCI.PhoneListEntry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalPhoneListGetListRequest(OCIRequest):
    """
    Get a user's personal phone list.

    The response is either a ``UserPersonalPhoneListGetListResponse()`` or an
    ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. In all cases, if a responseSizeLimit is specified and the number
    of matching results is more than this limit, then an ``ErrorResponse()`` is returned.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_personal_phone_list_name:
            searchCriteriaUserPersonalPhoneListName
        search_criteria_user_personal_phone_list_number:
            searchCriteriaUserPersonalPhoneListNumber
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_personal_phone_list_name: List[OCI.SearchCriteriaUserPersonalPhoneListName] = attr.ib(default=None)
    search_criteria_user_personal_phone_list_number: List[OCI.SearchCriteriaUserPersonalPhoneListNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_personal_phone_list_name",
                "searchCriteriaUserPersonalPhoneListName",
                OCI.SearchCriteriaUserPersonalPhoneListName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_personal_phone_list_number",
                "searchCriteriaUserPersonalPhoneListNumber",
                OCI.SearchCriteriaUserPersonalPhoneListNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalPhoneListGetPagedSortedListRequest(OCIRequest):
    """
    Get a user's personal phone list.

    The response is either a ``UserPersonalPhoneListGetPagedSortedListResponse()`` or an
    ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. The sort can done by the personal phone list number or name.

    Attributes:
        user_id: userId
        response_paging_control: responsePagingControl
        sort_by_user_personal_phone_list_number: sortByUserPersonalPhoneListNumber
        sort_by_user_personal_phone_list_name: sortByUserPersonalPhoneListName
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_personal_phone_list_name:
            searchCriteriaUserPersonalPhoneListName
        search_criteria_user_personal_phone_list_number:
            searchCriteriaUserPersonalPhoneListNumber
    """

    user_id: str = attr.ib()
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib()
    sort_by_user_personal_phone_list_number: "OCI.SortByUserPersonalPhoneListNumber" = attr.ib(default=None)
    sort_by_user_personal_phone_list_name: "OCI.SortByUserPersonalPhoneListName" = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_personal_phone_list_name: List[OCI.SearchCriteriaUserPersonalPhoneListName] = attr.ib(default=None)
    search_criteria_user_personal_phone_list_number: List[OCI.SearchCriteriaUserPersonalPhoneListNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
                is_required=True,
            ),
            E(
                "sort_by_user_personal_phone_list_number",
                "sortByUserPersonalPhoneListNumber",
                OCI.SortByUserPersonalPhoneListNumber,
                is_complex=True,
            ),
            E(
                "sort_by_user_personal_phone_list_name",
                "sortByUserPersonalPhoneListName",
                OCI.SortByUserPersonalPhoneListName,
                is_complex=True,
            ),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_personal_phone_list_name",
                "searchCriteriaUserPersonalPhoneListName",
                OCI.SearchCriteriaUserPersonalPhoneListName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_personal_phone_list_number",
                "searchCriteriaUserPersonalPhoneListNumber",
                OCI.SearchCriteriaUserPersonalPhoneListNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPhoneDirectoryGetPagedSortedListRequest(OCIRequest):
    """
    Request a table containing the phone directory for a user.

    Setting isEnterpriseRequested to true will return enterprise directory members in the
    response if the user is in an enterprise.  Otherwise, just the group directory members
    for a user are returned in the response.

    The response is either ``UserPhoneDirectoryGetPagedSortedListResponse()`` or
    ``ErrorResponse()``. The search can be done using multiple criterias.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterias are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. The sort can be performed on user last name, first name, or
    department.

    Attributes:
        user_id: userId
        is_enterprise_info_requested: isEnterpriseInfoRequested
        response_paging_control: responsePagingControl
        sort_by_user_last_name: sortByUserLastName
        sort_by_user_first_name: sortByUserFirstName
        sort_by_user_department: sortByUserDepartment
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_department_name: searchCriteriaDepartmentName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    is_enterprise_info_requested: bool = attr.ib()
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib()
    sort_by_user_last_name: "OCI.SortByUserLastName" = attr.ib(default=None)
    sort_by_user_first_name: "OCI.SortByUserFirstName" = attr.ib(default=None)
    sort_by_user_department: "OCI.SortByUserDepartment" = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_department_name: List[OCI.SearchCriteriaDepartmentName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "is_enterprise_info_requested",
                "isEnterpriseInfoRequested",
                bool,
                is_required=True,
            ),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
                is_required=True,
            ),
            E(
                "sort_by_user_last_name",
                "sortByUserLastName",
                OCI.SortByUserLastName,
                is_complex=True,
            ),
            E(
                "sort_by_user_first_name",
                "sortByUserFirstName",
                OCI.SortByUserFirstName,
                is_complex=True,
            ),
            E(
                "sort_by_user_department",
                "sortByUserDepartment",
                OCI.SortByUserDepartment,
                is_complex=True,
            ),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_department_name",
                "searchCriteriaDepartmentName",
                OCI.SearchCriteriaDepartmentName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPolycomPhoneServicesGetRequest(OCIRequest):
    """
    Request the user's Polycom Phone Services attributes.

    The response is either a ``UserPolycomPhoneServicesGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device: accessDevice
    """

    user_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPolycomPhoneServicesModifyRequest(OCIRequest):
    """
    Modify the user's Polycom Phone Services attributes.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device: accessDevice
        integrate_phone_directory_with_broad_works: integratePhoneDirectoryWithBroadWorks
        include_user_personal_phone_list_in_directory:
            includeUserPersonalPhoneListInDirectory
        include_group_custom_contact_directory_in_directory:
            includeGroupCustomContactDirectoryInDirectory
        group_custom_contact_directory: groupCustomContactDirectory
    """

    user_id: str = attr.ib()
    access_device: "OCI.AccessDevice" = attr.ib()
    integrate_phone_directory_with_broad_works: bool = attr.ib(default=None)
    include_user_personal_phone_list_in_directory: bool = attr.ib(default=None)
    include_group_custom_contact_directory_in_directory: bool = attr.ib(default=None)
    group_custom_contact_directory: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device",
                "accessDevice",
                OCI.AccessDevice,
                is_complex=True,
                is_required=True,
            ),
            E(
                "integrate_phone_directory_with_broad_works",
                "integratePhoneDirectoryWithBroadWorks",
                bool,
            ),
            E(
                "include_user_personal_phone_list_in_directory",
                "includeUserPersonalPhoneListInDirectory",
                bool,
            ),
            E(
                "include_group_custom_contact_directory_in_directory",
                "includeGroupCustomContactDirectoryInDirectory",
                bool,
            ),
            E("group_custom_contact_directory", "groupCustomContactDirectory", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's pre-alerting service.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreferredCarrierUserModifyRequest(OCIRequest):
    """
    Modifies the currently configured preferred carriers for a user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        intra_lata_carrier: intraLataCarrier
        inter_lata_carrier: interLataCarrier
        international_carrier: internationalCarrier
    """

    user_id: str = attr.ib()
    intra_lata_carrier: "OCI.UserPreferredCarrierNameModify" = attr.ib(default=None)
    inter_lata_carrier: "OCI.UserPreferredCarrierNameModify" = attr.ib(default=None)
    international_carrier: "OCI.UserPreferredCarrierNameModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "intra_lata_carrier",
                "intraLataCarrier",
                OCI.UserPreferredCarrierNameModify,
                is_complex=True,
            ),
            E(
                "inter_lata_carrier",
                "interLataCarrier",
                OCI.UserPreferredCarrierNameModify,
                is_complex=True,
            ),
            E(
                "international_carrier",
                "internationalCarrier",
                OCI.UserPreferredCarrierNameModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's priority alert service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.PriorityAlertCriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.PriorityAlertCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertAddCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's priority alert service.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.PriorityAlertCriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.PriorityAlertCriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertModifyActiveCriteriaListRequest(OCIRequest):
    """
    Activate the user's priority alert criteria list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrivacyModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Privacy.

    This command is supported for regular users only.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        enable_directory_privacy: enableDirectoryPrivacy
        enable_auto_attendant_extension_dialing_privacy:
            enableAutoAttendantExtensionDialingPrivacy
        enable_auto_attendant_name_dialing_privacy: enableAutoAttendantNameDialingPrivacy
        enable_phone_status_privacy: enablePhoneStatusPrivacy
        permitted_monitor_user_id_list: permittedMonitorUserIdList
    """

    user_id: str = attr.ib()
    enable_directory_privacy: bool = attr.ib(default=None)
    enable_auto_attendant_extension_dialing_privacy: bool = attr.ib(default=None)
    enable_auto_attendant_name_dialing_privacy: bool = attr.ib(default=None)
    enable_phone_status_privacy: bool = attr.ib(default=None)
    permitted_monitor_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("enable_directory_privacy", "enableDirectoryPrivacy", bool),
            E(
                "enable_auto_attendant_extension_dialing_privacy",
                "enableAutoAttendantExtensionDialingPrivacy",
                bool,
            ),
            E(
                "enable_auto_attendant_name_dialing_privacy",
                "enableAutoAttendantNameDialingPrivacy",
                bool,
            ),
            E("enable_phone_status_privacy", "enablePhoneStatusPrivacy", bool),
            E(
                "permitted_monitor_user_id_list",
                "permittedMonitorUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPushToTalkModifyRequest(OCIRequest):
    """
    Change the push to talk service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        allow_auto_answer: allowAutoAnswer
        outgoing_connection_selection: outgoingConnectionSelection
        access_list_selection: accessListSelection
        selected_user_id_list: selectedUserIdList
    """

    user_id: str = attr.ib()
    allow_auto_answer: bool = attr.ib(default=None)
    outgoing_connection_selection: str = attr.ib(default=None)
    access_list_selection: str = attr.ib(default=None)
    selected_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("allow_auto_answer", "allowAutoAnswer", bool),
            E("outgoing_connection_selection", "outgoingConnectionSelection", str),
            E("access_list_selection", "accessListSelection", str),
            E(
                "selected_user_id_list",
                "selectedUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserRouteListModifyRequest(OCIRequest):
    """
    Modify the route list setting and the list of number ranges assigned to a user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        treat_originations_and_pbx_redirections_as_screened:
            treatOriginationsAndPBXRedirectionsAsScreened
        use_route_list_identity_for_non_emergency_calls:
            useRouteListIdentityForNonEmergencyCalls
        use_route_list_identity_for_emergency_calls: useRouteListIdentityForEmergencyCalls
        assigned_number_range_start_list: assignedNumberRangeStartList
    """

    user_id: str = attr.ib()
    treat_originations_and_pbx_redirections_as_screened: bool = attr.ib(default=None)
    use_route_list_identity_for_non_emergency_calls: bool = attr.ib(default=None)
    use_route_list_identity_for_emergency_calls: bool = attr.ib(default=None)
    assigned_number_range_start_list: "OCI.ReplacementDNList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "treat_originations_and_pbx_redirections_as_screened",
                "treatOriginationsAndPBXRedirectionsAsScreened",
                bool,
            ),
            E(
                "use_route_list_identity_for_non_emergency_calls",
                "useRouteListIdentityForNonEmergencyCalls",
                bool,
            ),
            E(
                "use_route_list_identity_for_emergency_calls",
                "useRouteListIdentityForEmergencyCalls",
                bool,
            ),
            E(
                "assigned_number_range_start_list",
                "assignedNumberRangeStartList",
                OCI.ReplacementDNList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserRoutePointSupervisorModifyListRequest(OCIRequest):
    """
    Request to modify the Route Point supervisor list for a user.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        supervisor_user_id_list: supervisorUserIdList
    """

    user_id: str = attr.ib()
    supervisor_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "supervisor_user_id_list",
                "supervisorUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleAddEventRequest(OCIRequest):
    """
    Add an event to user schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        user_id: userId
        schedule_key: scheduleKey
        event_name: eventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    user_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    start_date: str = attr.ib()
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib()
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("start_date", "startDate", str, is_required=True),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str, is_required=True),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleDeleteEventListRequest(OCIRequest):
    """
    Delete a list of events from a user schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_key: scheduleKey
        event_name: eventName
    """

    user_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleDeleteListRequest(OCIRequest):
    """
    Delete a list of user schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_key: scheduleKey
    """

    user_id: str = attr.ib()
    schedule_key: List[OCI.ScheduleKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleGetEventListRequest(OCIRequest):
    """
    Get the list of events of a user schedule.

    The response is either a ``UserScheduleGetEventListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_key: scheduleKey
    """

    user_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleGetEventRequest(OCIRequest):
    """
    Get an event from a user schedule.

    The response is either a ``UserScheduleGetEventResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_key: scheduleKey
        event_name: eventName
    """

    user_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleModifyEventRequest(OCIRequest):
    """
    Modify an event of a user schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after the startDate.  The endDate element is set to the sum of the
    adjusted starDate element value and the event duration.

    Attributes:
        user_id: userId
        schedule_key: scheduleKey
        event_name: eventName
        new_event_name: newEventName
        start_date: startDate
        all_day_event: allDayEvent
        start_time: startTime
        end_time: endTime
        end_date: endDate
        recurrence: recurrence
    """

    user_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    event_name: str = attr.ib()
    new_event_name: str = attr.ib(default=None)
    start_date: str = attr.ib(default=None)
    all_day_event: bool = attr.ib(default=None)
    start_time: "OCI.HourMinute" = attr.ib()
    end_time: "OCI.HourMinute" = attr.ib()
    end_date: str = attr.ib(default=None)
    recurrence: "OCI.Recurrence" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("event_name", "eventName", str, is_required=True),
            E("new_event_name", "newEventName", str),
            E("start_date", "startDate", str),
            E("all_day_event", "allDayEvent", bool),
            E(
                "start_time",
                "startTime",
                OCI.HourMinute,
                is_complex=True,
                is_required=True,
            ),
            E("end_time", "endTime", OCI.HourMinute, is_complex=True, is_required=True),
            E("end_date", "endDate", str),
            E("recurrence", "recurrence", OCI.Recurrence, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleModifyRequest(OCIRequest):
    """
    Modify a user schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_key: scheduleKey
        new_schedule_name: newScheduleName
    """

    user_id: str = attr.ib()
    schedule_key: "OCI.ScheduleKey" = attr.ib()
    new_schedule_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_key",
                "scheduleKey",
                OCI.ScheduleKey,
                is_complex=True,
                is_required=True,
            ),
            E("new_schedule_name", "newScheduleName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's selective call acceptance service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceAddCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's selective call acceptance service.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceModifyActiveCriteriaListRequest(OCIRequest):
    """
    Activate the user's selective call acceptance criteria list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's selective call rejection service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionAddCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's selective call rejection service.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        call_to_number: callToNumber
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.SelectiveCallRejectionCriteriaCallType" = attr.ib()
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.SelectiveCallRejectionCriteriaCallType,
                is_complex=True,
                is_required=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionModifyActiveCriteriaListRequest(OCIRequest):
    """
    Activate the user's selective call rejection criteria list.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's sequential ring service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingAddCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's sequential ring service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingModifyRequest(OCIRequest):
    """
    Modify the user's sequential ring service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        ring_base_location_first: ringBaseLocationFirst
        base_location_number_of_rings: baseLocationNumberOfRings
        continue_if_base_location_is_busy: continueIfBaseLocationIsBusy
        caller_may_stop_search: callerMayStopSearch
        location01: Location01
        location02: Location02
        location03: Location03
        location04: Location04
        location05: Location05
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    ring_base_location_first: bool = attr.ib(default=None)
    base_location_number_of_rings: int = attr.ib(default=None)
    continue_if_base_location_is_busy: bool = attr.ib(default=None)
    caller_may_stop_search: bool = attr.ib(default=None)
    location01: "OCI.SequentialRingLocationModify" = attr.ib(default=None)
    location02: "OCI.SequentialRingLocationModify" = attr.ib(default=None)
    location03: "OCI.SequentialRingLocationModify" = attr.ib(default=None)
    location04: "OCI.SequentialRingLocationModify" = attr.ib(default=None)
    location05: "OCI.SequentialRingLocationModify" = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("ring_base_location_first", "ringBaseLocationFirst", bool),
            E("base_location_number_of_rings", "baseLocationNumberOfRings", int),
            E("continue_if_base_location_is_busy", "continueIfBaseLocationIsBusy", bool),
            E("caller_may_stop_search", "callerMayStopSearch", bool),
            E(
                "location01",
                "Location01",
                OCI.SequentialRingLocationModify,
                is_complex=True,
            ),
            E(
                "location02",
                "Location02",
                OCI.SequentialRingLocationModify,
                is_complex=True,
            ),
            E(
                "location03",
                "Location03",
                OCI.SequentialRingLocationModify,
                is_complex=True,
            ),
            E(
                "location04",
                "Location04",
                OCI.SequentialRingLocationModify,
                is_complex=True,
            ),
            E(
                "location05",
                "Location05",
                OCI.SequentialRingLocationModify,
                is_complex=True,
            ),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserServiceScriptsUserModifyRequest(OCIRequest):
    """
    Modify the user level data associated with Service Scripts User Configuration.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        script_file: scriptFile
        script_url: scriptUrl
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    script_file: "OCI.ServiceScriptsFileResource" = attr.ib(default=None)
    script_url: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "script_file",
                "scriptFile",
                OCI.ServiceScriptsFileResource,
                is_complex=True,
            ),
            E("script_url", "scriptUrl", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserShInterfaceGetPublicIdDataRequest(OCIRequest):
    """
    Returns the Sh non-transparent data stored against a Public User Identity (a SIP URI
    or TEL URI).

    The response is either a ``UserShInterfaceGetPublicIdDataResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        public_user_identity: publicUserIdentity
    """

    public_user_identity: "OCI.PublicUserIdentity" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "public_user_identity",
                "publicUserIdentity",
                OCI.PublicUserIdentity,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserShInterfaceModifyRequest(OCIRequest):
    """
    Modifies the Sh Interface non-transparent data associated with a Public User Identity.

    The response is a ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        public_user_identity: publicUserIdentity
        scscf_name: SCSCFName
        ims_user_state: IMSUserState
    """

    public_user_identity: "OCI.PublicUserIdentity" = attr.ib()
    scscf_name: str = attr.ib(default=None)
    ims_user_state: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "public_user_identity",
                "publicUserIdentity",
                OCI.PublicUserIdentity,
                is_complex=True,
                is_required=True,
            ),
            E("scscf_name", "SCSCFName", str),
            E("ims_user_state", "IMSUserState", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserShInterfacePublicIdentityRefreshTaskStartRequest(OCIRequest):
    """
    Dispatches a Public Identity refresh task on the local Application Server node for the
    specified public identity.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        public_user_identity: publicUserIdentity
    """

    public_user_identity: "OCI.PublicUserIdentity" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "public_user_identity",
                "publicUserIdentity",
                OCI.PublicUserIdentity,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's simultaneous ring family service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyModifyRequest(OCIRequest):
    """
    Modify the user's simultaneous ring family service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserSimultaneousRingFamilyModifyRequest14sp4()``

    Attributes:
        user_id: userId
        is_active: isActive
        incoming_calls: incomingCalls
        sim_ring_phone_number_list: simRingPhoneNumberList
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    incoming_calls: str = attr.ib(default=None)
    sim_ring_phone_number_list: "OCI.ReplacementOutgoingDNorSIPURIList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("incoming_calls", "incomingCalls", str),
            E(
                "sim_ring_phone_number_list",
                "simRingPhoneNumberList",
                OCI.ReplacementOutgoingDNorSIPURIList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's simultaneous ring personal service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalModifyRequest(OCIRequest):
    """
    Modify the user's simultaneous ring personal service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserSimultaneousRingPersonalModifyRequest14sp4()``

    Attributes:
        user_id: userId
        is_active: isActive
        incoming_calls: incomingCalls
        sim_ring_phone_number_list: simRingPhoneNumberList
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    incoming_calls: str = attr.ib(default=None)
    sim_ring_phone_number_list: "OCI.ReplacementOutgoingDNorSIPURIList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("incoming_calls", "incomingCalls", str),
            E(
                "sim_ring_phone_number_list",
                "simRingPhoneNumberList",
                OCI.ReplacementOutgoingDNorSIPURIList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial100AddListRequest(OCIRequest):
    """
    Add one or more speed dial 100 settings for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        speed_dial_entry: speedDialEntry
    """

    user_id: str = attr.ib()
    speed_dial_entry: List[OCI.SpeedDial100Entry] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "speed_dial_entry",
                "speedDialEntry",
                OCI.SpeedDial100Entry,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial100ModifyListRequest(OCIRequest):
    """
    Modify the speed dial 100 settings for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        speed_dial_entry: speedDialEntry
    """

    user_id: str = attr.ib()
    speed_dial_entry: List[OCI.SpeedDial100EntryModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "speed_dial_entry",
                "speedDialEntry",
                OCI.SpeedDial100EntryModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSpeedDial8ModifyListRequest(OCIRequest):
    """
    Modify the speed dial 8 settings for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        speed_dial_entry: speedDialEntry
    """

    user_id: str = attr.ib()
    speed_dial_entry: List[OCI.SpeedDial8Entry] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "speed_dial_entry",
                "speedDialEntry",
                OCI.SpeedDial8Entry,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserTimeScheduleAddRequest(OCIRequest):
    """
    Add a time schedule for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        time_schedule_name: timeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    user_id: str = attr.ib()
    time_schedule_name: str = attr.ib()
    time_interval01: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval02: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval03: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval04: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval05: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval06: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval07: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval08: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval09: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval10: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval11: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval12: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval13: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval14: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval15: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval16: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval17: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval18: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval19: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval20: "OCI.TimeInterval" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserTimeScheduleModifyRequest(OCIRequest):
    """
    Modify a user time schedule.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        time_schedule_name: timeScheduleName
        new_time_schedule_name: newTimeScheduleName
        time_interval01: timeInterval01
        time_interval02: timeInterval02
        time_interval03: timeInterval03
        time_interval04: timeInterval04
        time_interval05: timeInterval05
        time_interval06: timeInterval06
        time_interval07: timeInterval07
        time_interval08: timeInterval08
        time_interval09: timeInterval09
        time_interval10: timeInterval10
        time_interval11: timeInterval11
        time_interval12: timeInterval12
        time_interval13: timeInterval13
        time_interval14: timeInterval14
        time_interval15: timeInterval15
        time_interval16: timeInterval16
        time_interval17: timeInterval17
        time_interval18: timeInterval18
        time_interval19: timeInterval19
        time_interval20: timeInterval20
    """

    user_id: str = attr.ib()
    time_schedule_name: str = attr.ib()
    new_time_schedule_name: str = attr.ib(default=None)
    time_interval01: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval02: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval03: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval04: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval05: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval06: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval07: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval08: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval09: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval10: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval11: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval12: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval13: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval14: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval15: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval16: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval17: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval18: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval19: "OCI.TimeInterval" = attr.ib(default=None)
    time_interval20: "OCI.TimeInterval" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("time_schedule_name", "timeScheduleName", str, is_required=True),
            E("new_time_schedule_name", "newTimeScheduleName", str),
            E("time_interval01", "timeInterval01", OCI.TimeInterval, is_complex=True),
            E("time_interval02", "timeInterval02", OCI.TimeInterval, is_complex=True),
            E("time_interval03", "timeInterval03", OCI.TimeInterval, is_complex=True),
            E("time_interval04", "timeInterval04", OCI.TimeInterval, is_complex=True),
            E("time_interval05", "timeInterval05", OCI.TimeInterval, is_complex=True),
            E("time_interval06", "timeInterval06", OCI.TimeInterval, is_complex=True),
            E("time_interval07", "timeInterval07", OCI.TimeInterval, is_complex=True),
            E("time_interval08", "timeInterval08", OCI.TimeInterval, is_complex=True),
            E("time_interval09", "timeInterval09", OCI.TimeInterval, is_complex=True),
            E("time_interval10", "timeInterval10", OCI.TimeInterval, is_complex=True),
            E("time_interval11", "timeInterval11", OCI.TimeInterval, is_complex=True),
            E("time_interval12", "timeInterval12", OCI.TimeInterval, is_complex=True),
            E("time_interval13", "timeInterval13", OCI.TimeInterval, is_complex=True),
            E("time_interval14", "timeInterval14", OCI.TimeInterval, is_complex=True),
            E("time_interval15", "timeInterval15", OCI.TimeInterval, is_complex=True),
            E("time_interval16", "timeInterval16", OCI.TimeInterval, is_complex=True),
            E("time_interval17", "timeInterval17", OCI.TimeInterval, is_complex=True),
            E("time_interval18", "timeInterval18", OCI.TimeInterval, is_complex=True),
            E("time_interval19", "timeInterval19", OCI.TimeInterval, is_complex=True),
            E("time_interval20", "timeInterval20", OCI.TimeInterval, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyDistributionListRequest(OCIRequest):
    """
    Modify a voice mail distribution list for a users voice message.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        list_id: listId
        description: description
        phone_number_list: phoneNumberList
    """

    user_id: str = attr.ib()
    list_id: int = attr.ib()
    description: str = attr.ib(default=None)
    phone_number_list: "OCI.ReplacementOutgoingDNorSIPURIList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("list_id", "listId", int, is_required=True),
            E("description", "description", str),
            E(
                "phone_number_list",
                "phoneNumberList",
                OCI.ReplacementOutgoingDNorSIPURIList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyOutgoingSMDIMWIRequest(OCIRequest):
    """
    Modify the user's voice messaging outgoing message waiting indicator service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        outgoing_smdimwi_phone_number_list: outgoingSMDIMWIPhoneNumberList
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    outgoing_smdimwi_phone_number_list: "OCI.ReplacementOutgoingDNList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "outgoing_smdimwi_phone_number_list",
                "outgoingSMDIMWIPhoneNumberList",
                OCI.ReplacementOutgoingDNList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyVoicePortalRequest(OCIRequest):
    """
    Modify the user's voice messaging voice portal settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Replaced By: ``UserVoiceMessagingUserModifyVoicePortalRequest16()``

    Attributes:
        user_id: userId
        use_personalized_name: usePersonalizedName
        voice_portal_auto_login: voicePortalAutoLogin
        personalized_name_audio_file: personalizedNameAudioFile
    """

    user_id: str = attr.ib()
    use_personalized_name: bool = attr.ib(default=None)
    voice_portal_auto_login: bool = attr.ib(default=None)
    personalized_name_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_personalized_name", "usePersonalizedName", bool),
            E("voice_portal_auto_login", "voicePortalAutoLogin", bool),
            E(
                "personalized_name_audio_file",
                "personalizedNameAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyVoicePortalRequest16(OCIRequest):
    """
    Modify the user's voice messaging voice portal settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        use_personalized_name: usePersonalizedName
        voice_portal_auto_login: voicePortalAutoLogin
        personalized_name_audio_file: personalizedNameAudioFile
    """

    user_id: str = attr.ib()
    use_personalized_name: bool = attr.ib(default=None)
    voice_portal_auto_login: bool = attr.ib(default=None)
    personalized_name_audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_personalized_name", "usePersonalizedName", bool),
            E("voice_portal_auto_login", "voicePortalAutoLogin", bool),
            E(
                "personalized_name_audio_file",
                "personalizedNameAudioFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyVoicePortalRequest20(OCIRequest):
    """
    Modify the user's voice messaging voice portal settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        use_personalized_name: usePersonalizedName
        voice_portal_auto_login: voicePortalAutoLogin
        personalized_name_audio_file: personalizedNameAudioFile
    """

    user_id: str = attr.ib()
    use_personalized_name: bool = attr.ib(default=None)
    voice_portal_auto_login: bool = attr.ib(default=None)
    personalized_name_audio_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_personalized_name", "usePersonalizedName", bool),
            E("voice_portal_auto_login", "voicePortalAutoLogin", bool),
            E(
                "personalized_name_audio_file",
                "personalizedNameAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListRequest(OCIRequest):
    """
    Request a summary table of all Mobile Subscriber Directory Numbers in an enterprise.

    The response is either
    ``EnterpriseBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_mobile_subscriber_directory_number:
            searchCriteriaMobileSubscriberDirectoryNumber
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_mobile_network: searchCriteriaExactMobileNetwork
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mobile_subscriber_directory_number: List[OCI.SearchCriteriaMobileSubscriberDirectoryNumber] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_mobile_network: "OCI.SearchCriteriaExactMobileNetwork" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_mobile_subscriber_directory_number",
                "searchCriteriaMobileSubscriberDirectoryNumber",
                OCI.SearchCriteriaMobileSubscriberDirectoryNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_mobile_network",
                "searchCriteriaExactMobileNetwork",
                OCI.SearchCriteriaExactMobileNetwork,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdDefaultProfileGetRequest(OCIRequest):
    """
    Gets an existing default Call Center Agent Threshold Profile in an Enterprise.

    If includeAgentsTable is set to true, a table with the list of agents assigned to the
    profile is included in the response.  The search criteria is used to filter the list
    of agents to be included in the table.

    The response is either a
    ``EnterpriseCallCenterAgentThresholdDefaultProfileGetResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        include_agents_table: includeAgentsTable
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    include_agents_table: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("include_agents_table", "includeAgentsTable", bool, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterAgentThresholdProfileGetAvailableAgentListRequest(OCIRequest):
    """
    Get the list of all Agents in the Enterprise that can be assigned to a given Call
    Center Agent Threshold Profile in an Enterprise.

    An agent is available to be assigned to a given Agent Threshold Profile if it is a
    Call Center Standard or Call Center Premium agent and the agent is not yet assigned to
    the profile.  The available agent list for a new Call Center Agent Threshold profile
    can be obtained by not setting the excludeAgentsAssignedToProfileName.  When the
    excludeAgentsAssignedToProfileName is specified, all agents already assigned to the
    specified profile are not included in the response, even if the search criterion
    element searchCriteriaAgentThresholdProfile is specified using the same profile name.

    The response is either a
    ``EnterpriseCallCenterAgentThresholdProfileGetAvailableAgentListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        exclude_agents_assigned_to_profile_name: excludeAgentsAssignedToProfileName
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_agent_threshold_profile: searchCriteriaAgentThresholdProfile
    """

    service_provider_id: str = attr.ib()
    exclude_agents_assigned_to_profile_name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_agent_threshold_profile: List[OCI.SearchCriteriaAgentThresholdProfile] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "exclude_agents_assigned_to_profile_name",
                "excludeAgentsAssignedToProfileName",
                str,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_agent_threshold_profile",
                "searchCriteriaAgentThresholdProfile",
                OCI.SearchCriteriaAgentThresholdProfile,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListRequest(OCIRequest):
    """
    Request to get a list of active enterprise level call center reporting scheduled
    reports.

    The response is either an
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_exact_call_center_report_template_key:
            searchCriteriaExactCallCenterReportTemplateKey
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_exact_call_center_report_template_key: "OCI.SearchCriteriaExactCallCenterReportTemplateKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_report_template_key",
                "searchCriteriaExactCallCenterReportTemplateKey",
                OCI.SearchCriteriaExactCallCenterReportTemplateKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListRequest(OCIRequest):
    """
    Request to get a list of completed enterprise level call center reporting scheduled
    reports.

    The response is either an
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_exact_call_center_report_template_key:
            searchCriteriaExactCallCenterReportTemplateKey
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_exact_call_center_report_template_key: "OCI.SearchCriteriaExactCallCenterReportTemplateKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_report_template_key",
                "searchCriteriaExactCallCenterReportTemplateKey",
                OCI.SearchCriteriaExactCallCenterReportTemplateKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportGetListRequest(OCIRequest):
    """
    Request to get a list of enterprise level call center reporting scheduled reports.

    The response is either an
    ``EnterpriseCallCenterEnhancedReportingScheduledReportGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_exact_call_center_report_template_key:
            searchCriteriaExactCallCenterReportTemplateKey
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_exact_call_center_report_template_key: "OCI.SearchCriteriaExactCallCenterReportTemplateKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_report_template_key",
                "searchCriteriaExactCallCenterReportTemplateKey",
                OCI.SearchCriteriaExactCallCenterReportTemplateKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnhancedCallLogsGetListRequest(OCIRequest):
    """
    Request users' call logs within an enterprise If the callLogType is not specified, all
    types of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.
    If responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either an ``EnterpriseEnhancedCallLogsGetListResponse()`` or an
    ``ErrorResponse()``. Replaced by ``EnterpriseEnhancedCallLogsGetListRequest17sp4()``.
    Originally deprecated in release 20.

    Attributes:
        service_provider_id: serviceProviderId
        call_log_type: callLogType
        group_id: groupId
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    group_id: List[str] = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E("group_id", "groupId", str, is_array=True),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnhancedCallLogsGetListRequest17sp4(OCIRequest):
    """
    Request users' call logs within an enterprise If the callLogType is not specified, all
    types of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.
    If responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either an ``EnterpriseEnhancedCallLogsGetListResponse17sp4()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode:
    callAuthorizationCodeFilter

    Attributes:
        service_provider_id: serviceProviderId
        call_log_type: callLogType
        group_id: groupId
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    group_id: List[str] = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E("group_id", "groupId", str, is_array=True),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnhancedCallLogsGetListRequest20(OCIRequest):
    """
    Request users' call logs within an enterprise If the callLogType is not specified, all
    types of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.
    If responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either an ``EnterpriseEnhancedCallLogsGetListResponse20()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode:
    callAuthorizationCodeFilter callSecurityClassification

    Attributes:
        service_provider_id: serviceProviderId
        call_log_type: callLogType
        group_id: groupId
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    group_id: List[str] = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E("group_id", "groupId", str, is_array=True),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnhancedCallLogsGetListRequest21(OCIRequest):
    """
    Request users' call logs within an enterprise If the callLogType is not specified, all
    types of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.
    If responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either an ``EnterpriseEnhancedCallLogsGetListResponse21()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode and ignored
    in HSS data mode: callAuthorizationCodeFilter

    Attributes:
        service_provider_id: serviceProviderId
        call_log_type: callLogType
        group_id: groupId
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    group_id: List[str] = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter21" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E("group_id", "groupId", str, is_array=True),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter21,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkGetAvailableUserListRequest(OCIRequest):
    """
    Request the list of users that are available to be added to an enterprise trunk.

    This list contains users in the enterprise that are trunk users and not already
    assigned to an enterprise trunk.  It is possible to search by various criteria to
    restrict the number of rows returned.  Multiple search criteria are logically ANDed
    together.

    The response is either an ``EnterpriseEnterpriseTrunkGetAvailableUserListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_alternate_trunk_identity: searchCriteriaAlternateTrunkIdentity
        search_criteria_alternate_trunk_identity_domain:
            searchCriteriaAlternateTrunkIdentityDomain
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity: List[OCI.SearchCriteriaAlternateTrunkIdentity] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity_domain: List[OCI.SearchCriteriaAlternateTrunkIdentityDomain] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity",
                "searchCriteriaAlternateTrunkIdentity",
                OCI.SearchCriteriaAlternateTrunkIdentity,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity_domain",
                "searchCriteriaAlternateTrunkIdentityDomain",
                OCI.SearchCriteriaAlternateTrunkIdentityDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseEnterpriseTrunkGetUserListRequest(OCIRequest):
    """
    Request the list of users in an enterprise trunk.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``EnterpriseEnterpriseTrunkGetUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        enterprise_trunk_name: enterpriseTrunkName
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_alternate_trunk_identity: searchCriteriaAlternateTrunkIdentity
        search_criteria_alternate_trunk_identity_domain:
            searchCriteriaAlternateTrunkIdentityDomain
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_route_list_assigned:
            searchCriteriaExactUserRouteListAssigned
    """

    service_provider_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity: List[OCI.SearchCriteriaAlternateTrunkIdentity] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity_domain: List[OCI.SearchCriteriaAlternateTrunkIdentityDomain] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_route_list_assigned: "OCI.SearchCriteriaExactUserRouteListAssigned" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity",
                "searchCriteriaAlternateTrunkIdentity",
                OCI.SearchCriteriaAlternateTrunkIdentity,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity_domain",
                "searchCriteriaAlternateTrunkIdentityDomain",
                OCI.SearchCriteriaAlternateTrunkIdentityDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_route_list_assigned",
                "searchCriteriaExactUserRouteListAssigned",
                OCI.SearchCriteriaExactUserRouteListAssigned,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterprisePhoneDirectoryGetListRequest(OCIRequest):
    """
    Request a table containing the phone directory for an enterprise.

    The directory includes all users in the enterprise and all entries in the enterprise
    common phone list.  It is possible to search by various criteria to restrict the
    number of rows returned.  Multiple search criteria are logically ANDed together.

    The response is either ``EnterprisePhoneDirectoryGetListResponse()`` or
    ``ErrorResponse()``. Replace by: ``EnterprisePhoneDirectoryGetListRequest17()``

    Attributes:
        enterprise_id: enterpriseId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    enterprise_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterprisePhoneDirectoryGetListRequest17(OCIRequest):
    """
    Request a table containing the phone directory for an enterprise.

    The directory includes all users in the enterprise and all entries in the enterprise
    common phone list.  It is possible to search by various criteria to restrict the
    number of rows returned.  Multiple search criteria are logically ANDed together.

    The response is either ``EnterprisePhoneDirectoryGetListResponse17()`` or
    ``ErrorResponse()``. Replaced by: ``EnterprisePhoneDirectoryGetListRequest18()``

    Attributes:
        enterprise_id: enterpriseId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    enterprise_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterprisePhoneDirectoryGetListRequest17sp3(OCIRequest):
    """
    Request a table containing the phone directory for an enterprise.

    The directory includes all users in the enterprise and all entries in the enterprise
    common phone list.  It is possible to search by various criteria to restrict the
    number of rows returned.  Multiple search criteria are logically ANDed together.

    The response is either ``EnterprisePhoneDirectoryGetListResponse17sp3()`` or
    ``ErrorResponse()``. Replaced by: ``EnterprisePhoneDirectoryGetListRequest18()``

    Attributes:
        enterprise_id: enterpriseId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_imp_id: searchCriteriaImpId
    """

    enterprise_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterprisePhoneDirectoryGetListRequest18(OCIRequest):
    """
    Request a table containing the phone directory for an enterprise.

    The directory includes all users in the enterprise and all entries in the enterprise
    common phone list.  It is possible to search by various criteria to restrict the
    number of rows returned.  Multiple search criteria are logically ANDed together.

    The response is either ``EnterprisePhoneDirectoryGetListResponse18()`` or
    ``ErrorResponse()``.

    Attributes:
        enterprise_id: enterpriseId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_imp_id: searchCriteriaImpId
    """

    enterprise_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("enterprise_id", "enterpriseId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterprisePreAlertingAnnouncementModifyRequest(OCIRequest):
    """
    Modify the enterprise level pre-alerting service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        announcement_interruption: announcementInterruption
        interruption_digit_sequence: interruptionDigitSequence
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    announcement_interruption: str = attr.ib(default=None)
    interruption_digit_sequence: str = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("announcement_interruption", "announcementInterruption", str),
            E("interruption_digit_sequence", "interruptionDigitSequence", str),
            E("audio_selection", "audioSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_selection", "videoSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupAddDeviceListRequest(OCIRequest):
    """
    Request to add one or more devices to an enterprise level session admission control
    group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        devices: devices
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    devices: List[OCI.EnterpriseAccessDevice] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "devices",
                "devices",
                OCI.EnterpriseAccessDevice,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupAddRequest(OCIRequest):
    """
    Request to add a session admission control group for the enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        become_default_group: becomeDefaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    max_session: int = attr.ib()
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    reserved_session: int = attr.ib()
    reserved_user_originating_sessions: int = attr.ib(default=None)
    reserved_user_terminating_sessions: int = attr.ib(default=None)
    become_default_group: bool = attr.ib()
    count_intra_sac_group_sessions: bool = attr.ib()
    devices: List[OCI.EnterpriseAccessDevice] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("become_default_group", "becomeDefaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E(
                "devices",
                "devices",
                OCI.EnterpriseAccessDevice,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupAddRequest19sp1(OCIRequest):
    """
    Request to add a session admission control group for the enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        become_default_group: becomeDefaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        devices: devices
        block_emergency_and_repair_calls_due_to_sac_limits:
            blockEmergencyAndRepairCallsDueToSACLimits
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    max_session: int = attr.ib()
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    reserved_session: int = attr.ib()
    reserved_user_originating_sessions: int = attr.ib(default=None)
    reserved_user_terminating_sessions: int = attr.ib(default=None)
    become_default_group: bool = attr.ib()
    count_intra_sac_group_sessions: bool = attr.ib()
    devices: List[OCI.EnterpriseAccessDevice] = attr.ib(default=None)
    block_emergency_and_repair_calls_due_to_sac_limits: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("max_session", "maxSession", int, is_required=True),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int, is_required=True),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("become_default_group", "becomeDefaultGroup", bool, is_required=True),
            E(
                "count_intra_sac_group_sessions",
                "countIntraSACGroupSessions",
                bool,
                is_required=True,
            ),
            E(
                "devices",
                "devices",
                OCI.EnterpriseAccessDevice,
                is_complex=True,
                is_array=True,
            ),
            E(
                "block_emergency_and_repair_calls_due_to_sac_limits",
                "blockEmergencyAndRepairCallsDueToSACLimits",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupDeleteDeviceListRequest(OCIRequest):
    """
    Request to delete one or more devices from an enterprise level session admission
    control group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        devices: devices
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    devices: List[OCI.EnterpriseAccessDevice] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "devices",
                "devices",
                OCI.EnterpriseAccessDevice,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccessDeviceGetUserListRequest(OCIRequest):
    """
    Requests the configuration of a specified group access device.

    The response is either ``GroupAccessDeviceGetUserListResponse()`` or
    ``ErrorResponse()``. The following elements are only used in HSS data mode and ignored
    in AS data mode: searchCriteriaAccessDeviceEndpointPrivateIdentity

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        device_name: deviceName
        response_size_limit: responseSizeLimit
        search_criteria_line_port_user_part: searchCriteriaLinePortUserPart
        search_criteria_line_port_domain: searchCriteriaLinePortDomain
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_exact_endpoint_type: searchCriteriaExactEndpointType
        search_criteria_exact_user_type: searchCriteriaExactUserType
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_port_number: searchCriteriaExactPortNumber
        search_criteria_access_device_endpoint_private_identity:
            searchCriteriaAccessDeviceEndpointPrivateIdentity
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    device_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_line_port_user_part: List[OCI.SearchCriteriaLinePortUserPart] = attr.ib(default=None)
    search_criteria_line_port_domain: List[OCI.SearchCriteriaLinePortDomain] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_exact_endpoint_type: "OCI.SearchCriteriaExactEndpointType" = attr.ib(default=None)
    search_criteria_exact_user_type: "OCI.SearchCriteriaExactUserType" = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_port_number: "OCI.SearchCriteriaExactPortNumber" = attr.ib(default=None)
    search_criteria_access_device_endpoint_private_identity: List[OCI.SearchCriteriaAccessDeviceEndpointPrivateIdentity] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_line_port_user_part",
                "searchCriteriaLinePortUserPart",
                OCI.SearchCriteriaLinePortUserPart,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_domain",
                "searchCriteriaLinePortDomain",
                OCI.SearchCriteriaLinePortDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_endpoint_type",
                "searchCriteriaExactEndpointType",
                OCI.SearchCriteriaExactEndpointType,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_type",
                "searchCriteriaExactUserType",
                OCI.SearchCriteriaExactUserType,
                is_complex=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_port_number",
                "searchCriteriaExactPortNumber",
                OCI.SearchCriteriaExactPortNumber,
                is_complex=True,
            ),
            E(
                "search_criteria_access_device_endpoint_private_identity",
                "searchCriteriaAccessDeviceEndpointPrivateIdentity",
                OCI.SearchCriteriaAccessDeviceEndpointPrivateIdentity,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAccountAuthorizationCodesGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of non restricted users for the account/authorization codes service.

    The response is either
    ``GroupAccountAuthorizationCodesGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereAddInstanceRequest(OCIRequest):
    """
    Add a BroadWorks Anywhere instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        broad_works_anywhere_scope: broadWorksAnywhereScope
        prompt_for_clid: promptForCLID
        silent_prompt_mode: silentPromptMode
        prompt_for_passcode: promptForPasscode
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    broad_works_anywhere_scope: str = attr.ib()
    prompt_for_clid: str = attr.ib()
    silent_prompt_mode: bool = attr.ib()
    prompt_for_passcode: bool = attr.ib()
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "broad_works_anywhere_scope",
                "broadWorksAnywhereScope",
                str,
                is_required=True,
            ),
            E("prompt_for_clid", "promptForCLID", str, is_required=True),
            E("silent_prompt_mode", "silentPromptMode", bool, is_required=True),
            E("prompt_for_passcode", "promptForPasscode", bool, is_required=True),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksAnywhereModifyInstanceRequest(OCIRequest):
    """
    Request to modify a BroadWorks Anywhere instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        broad_works_anywhere_scope: broadWorksAnywhereScope
        prompt_for_clid: promptForCLID
        silent_prompt_mode: silentPromptMode
        prompt_for_passcode: promptForPasscode
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    broad_works_anywhere_scope: str = attr.ib(default=None)
    prompt_for_clid: str = attr.ib(default=None)
    silent_prompt_mode: bool = attr.ib(default=None)
    prompt_for_passcode: bool = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("broad_works_anywhere_scope", "broadWorksAnywhereScope", str),
            E("prompt_for_clid", "promptForCLID", str),
            E("silent_prompt_mode", "silentPromptMode", bool),
            E("prompt_for_passcode", "promptForPasscode", bool),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListRequest(OCIRequest):
    """
    Get the list of assigned and unassigned Mobile Subscriber Directory Numbers in a
    group.

    Each DN can be assigned to a user.  . This command is applicable only for group in a
    service provider and will fail for a group in an enterprise.

    The response is either a
    ``GroupBroadWorksMobilityMobileSubscriberDirectoryNumberGetAssignmentListResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_mobile_subscriber_directory_number:
            searchCriteriaMobileSubscriberDirectoryNumber
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mobile_subscriber_directory_number: List[OCI.SearchCriteriaMobileSubscriberDirectoryNumber] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_mobile_subscriber_directory_number",
                "searchCriteriaMobileSubscriberDirectoryNumber",
                OCI.SearchCriteriaMobileSubscriberDirectoryNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCapacityManagementGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Call Capacity Management group.

    The available user list for a new Call Capacity Management group can be obtained by
    not setting the name.

    The response is either ``GroupCallCapacityManagementGetAvailableUserListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest14(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterAddInstanceRequest14sp3()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        enable_video: enableVideo
        queue_length: queueLength
        allow_agent_logoff: allowAgentLogoff
        play_music_on_hold: playMusicOnHold
        play_comfort_message: playComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    allow_agent_logoff: bool = attr.ib()
    play_music_on_hold: bool = attr.ib()
    play_comfort_message: bool = attr.ib()
    time_between_comfort_messages_seconds: int = attr.ib()
    enable_guard_timer: bool = attr.ib()
    guard_timer_seconds: int = attr.ib()
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
            E("play_comfort_message", "playComfortMessage", bool, is_required=True),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest14sp3(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterAddInstanceRequest14sp9()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        enable_video: enableVideo
        queue_length: queueLength
        allow_agent_logoff: allowAgentLogoff
        play_music_on_hold: playMusicOnHold
        play_comfort_message: playComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        enable_call_queue_when_no_agents_available: enableCallQueueWhenNoAgentsAvailable
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    allow_agent_logoff: bool = attr.ib()
    play_music_on_hold: bool = attr.ib()
    play_comfort_message: bool = attr.ib()
    time_between_comfort_messages_seconds: int = attr.ib()
    enable_guard_timer: bool = attr.ib()
    guard_timer_seconds: int = attr.ib()
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()
    allow_calls_to_agents_in_wrap_up: bool = attr.ib()
    enable_call_queue_when_no_agents_available: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
            E("play_comfort_message", "playComfortMessage", bool, is_required=True),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "allow_calls_to_agents_in_wrap_up",
                "allowCallsToAgentsInWrapUp",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_queue_when_no_agents_available",
                "enableCallQueueWhenNoAgentsAvailable",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest14sp9(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterAddInstanceRequest16()``,
    ``GroupCallCenterAddAgentListRequest()``, ``GroupCallCenterModifyPolicyRequest()``,
    ``GroupCallCenterModifyAnnouncementRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        enable_video: enableVideo
        queue_length: queueLength
        allow_agent_logoff: allowAgentLogoff
        play_music_on_hold: playMusicOnHold
        play_comfort_message: playComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        enable_call_queue_when_no_agents_available: enableCallQueueWhenNoAgentsAvailable
        statistics_source: statisticsSource
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    allow_agent_logoff: bool = attr.ib()
    play_music_on_hold: bool = attr.ib()
    play_comfort_message: bool = attr.ib()
    time_between_comfort_messages_seconds: int = attr.ib()
    enable_guard_timer: bool = attr.ib()
    guard_timer_seconds: int = attr.ib()
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()
    allow_calls_to_agents_in_wrap_up: bool = attr.ib()
    enable_call_queue_when_no_agents_available: bool = attr.ib()
    statistics_source: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E("play_music_on_hold", "playMusicOnHold", bool, is_required=True),
            E("play_comfort_message", "playComfortMessage", bool, is_required=True),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
                is_required=True,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool, is_required=True),
            E("guard_timer_seconds", "guardTimerSeconds", int, is_required=True),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "allow_calls_to_agents_in_wrap_up",
                "allowCallsToAgentsInWrapUp",
                bool,
                is_required=True,
            ),
            E(
                "enable_call_queue_when_no_agents_available",
                "enableCallQueueWhenNoAgentsAvailable",
                bool,
                is_required=True,
            ),
            E("statistics_source", "statisticsSource", str, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest16(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``GroupCallCenterAddInstanceRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    type: str = attr.ib()
    policy: str = attr.ib()
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    reporting_server_name: str = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib()
    escape_digit: str = attr.ib()
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib(default=None)
    allow_agent_logoff: bool = attr.ib()
    allow_call_waiting_for_agents: bool = attr.ib()
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib()
    internal_preferred_audio_codec: str = attr.ib()
    play_ringing_when_offering_call: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest17(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    type: str = attr.ib()
    policy: str = attr.ib()
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    reporting_server_name: str = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib()
    escape_digit: str = attr.ib()
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib(default=None)
    allow_agent_logoff: bool = attr.ib()
    allow_call_waiting_for_agents: bool = attr.ib()
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib()
    internal_preferred_audio_codec: str = attr.ib()
    play_ringing_when_offering_call: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest17sp1(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``GroupCallCenterAddInstanceRequest17sp3()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    type: str = attr.ib()
    policy: str = attr.ib()
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    enable_reporting: bool = attr.ib(default=None)
    reporting_server_name: str = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib()
    escape_digit: str = attr.ib()
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib(default=None)
    allow_agent_logoff: bool = attr.ib()
    allow_call_waiting_for_agents: bool = attr.ib()
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib()
    internal_preferred_audio_codec: str = attr.ib()
    play_ringing_when_offering_call: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("enable_reporting", "enableReporting", bool),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest17sp3(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by
    ``GroupCallCenterAddInstanceRequest19()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    type: str = attr.ib()
    policy: str = attr.ib()
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    enable_reporting: bool = attr.ib(default=None)
    reporting_server_name: str = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib()
    escape_digit: str = attr.ib()
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib()
    allow_agent_logoff: bool = attr.ib()
    allow_call_waiting_for_agents: bool = attr.ib()
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib()
    internal_preferred_audio_codec: str = attr.ib()
    play_ringing_when_offering_call: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("enable_reporting", "enableReporting", bool),
            E("reporting_server_name", "reportingServerName", str),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
                is_required=True,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAddInstanceRequest19(OCIRequest):
    """
    Add a Call Center instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        routing_type: routingType
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    type: str = attr.ib()
    routing_type: str = attr.ib(default=None)
    policy: str = attr.ib()
    enable_video: bool = attr.ib()
    queue_length: int = attr.ib()
    enable_reporting: bool = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib()
    escape_digit: str = attr.ib()
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib()
    allow_agent_logoff: bool = attr.ib()
    allow_call_waiting_for_agents: bool = attr.ib()
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib()
    internal_preferred_audio_codec: str = attr.ib()
    play_ringing_when_offering_call: bool = attr.ib()
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("routing_type", "routingType", str),
            E("policy", "policy", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("queue_length", "queueLength", int, is_required=True),
            E("enable_reporting", "enableReporting", bool),
            E(
                "allow_caller_to_dial_escape_digit",
                "allowCallerToDialEscapeDigit",
                bool,
                is_required=True,
            ),
            E("escape_digit", "escapeDigit", str, is_required=True),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
                is_required=True,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool, is_required=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdDefaultProfileGetRequest(OCIRequest):
    """
    Gets an existing default Call Center Agent Threshold Profile in a Group.

    If includeAgentsTable is set to true, a table with the list of agents assigned to the
    profile is included in the response.  The search criteria is used to filter the list
    of agents to be included in the table.

    The response is either a ``GroupCallCenterAgentThresholdDefaultProfileGetResponse()``
    or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        include_agents_table: includeAgentsTable
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    include_agents_table: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("include_agents_table", "includeAgentsTable", bool, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterAgentThresholdProfileGetAvailableAgentListRequest(OCIRequest):
    """
    Get the list of all Agents in the Group that can be assigned to a given Call Center
    Agent Threshold Profile in a Group.

    An agent is available to be assigned to a given Agent Threshold Profile if it is a
    Call Center Standard or Call Center Premium agent and the agent is not yet assigned to
    the profile.  The available agent list for a new Call Center Agent Threshold profile
    can be obtained by not setting the excludeAgentsAssignedToProfileName.  When the
    excludeAgentsAssignedToProfileName is specified, all agents already assigned to the
    specified profile are not included in the response, even if the search criterion
    element searchCriteriaAgentThresholdProfile is specified using the same profile name.

    The response is either a
    ``GroupCallCenterAgentThresholdProfileGetAvailableAgentListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        exclude_agents_assigned_to_profile_name: excludeAgentsAssignedToProfileName
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_agent_threshold_profile: searchCriteriaAgentThresholdProfile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    exclude_agents_assigned_to_profile_name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_agent_threshold_profile: List[OCI.SearchCriteriaAgentThresholdProfile] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "exclude_agents_assigned_to_profile_name",
                "excludeAgentsAssignedToProfileName",
                str,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_agent_threshold_profile",
                "searchCriteriaAgentThresholdProfile",
                OCI.SearchCriteriaAgentThresholdProfile,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterComfortMessageBypassModifyRequest(OCIRequest):
    """
    Modify a call center's comfort message bypass settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        call_waiting_age_threshold_seconds: callWaitingAgeThresholdSeconds
        play_announcement_after_ringing: playAnnouncementAfterRinging
        ring_time_before_playing_announcement_seconds:
            ringTimeBeforePlayingAnnouncementSeconds
        audio_message_selection: audioMessageSelection
        audio_file: audioFile
        video_message_selection: videoMessageSelection
        video_file: videoFile
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    call_waiting_age_threshold_seconds: int = attr.ib(default=None)
    play_announcement_after_ringing: bool = attr.ib(default=None)
    ring_time_before_playing_announcement_seconds: int = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "call_waiting_age_threshold_seconds",
                "callWaitingAgeThresholdSeconds",
                int,
            ),
            E("play_announcement_after_ringing", "playAnnouncementAfterRinging", bool),
            E(
                "ring_time_before_playing_announcement_seconds",
                "ringTimeBeforePlayingAnnouncementSeconds",
                int,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterComfortMessageBypassModifyRequest17(OCIRequest):
    """
    Modify a call center's comfort message bypass settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        call_waiting_age_threshold_seconds: callWaitingAgeThresholdSeconds
        play_announcement_after_ringing: playAnnouncementAfterRinging
        ring_time_before_playing_announcement_seconds:
            ringTimeBeforePlayingAnnouncementSeconds
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    call_waiting_age_threshold_seconds: int = attr.ib(default=None)
    play_announcement_after_ringing: bool = attr.ib(default=None)
    ring_time_before_playing_announcement_seconds: int = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "call_waiting_age_threshold_seconds",
                "callWaitingAgeThresholdSeconds",
                int,
            ),
            E("play_announcement_after_ringing", "playAnnouncementAfterRinging", bool),
            E(
                "ring_time_before_playing_announcement_seconds",
                "ringTimeBeforePlayingAnnouncementSeconds",
                int,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterComfortMessageBypassModifyRequest20(OCIRequest):
    """
    Modify a call center's comfort message bypass settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        call_waiting_age_threshold_seconds: callWaitingAgeThresholdSeconds
        play_announcement_after_ringing: playAnnouncementAfterRinging
        ring_time_before_playing_announcement_seconds:
            ringTimeBeforePlayingAnnouncementSeconds
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    call_waiting_age_threshold_seconds: int = attr.ib(default=None)
    play_announcement_after_ringing: bool = attr.ib(default=None)
    ring_time_before_playing_announcement_seconds: int = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "call_waiting_age_threshold_seconds",
                "callWaitingAgeThresholdSeconds",
                int,
            ),
            E("play_announcement_after_ringing", "playAnnouncementAfterRinging", bool),
            E(
                "ring_time_before_playing_announcement_seconds",
                "ringTimeBeforePlayingAnnouncementSeconds",
                int,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportGetActiveListRequest(OCIRequest):
    """
    Request to get a list of active group level call center reporting scheduled reports.

    The response is either a
    ``GroupCallCenterEnhancedReportingScheduledReportGetActiveListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_exact_call_center_report_template_key:
            searchCriteriaExactCallCenterReportTemplateKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_exact_call_center_report_template_key: "OCI.SearchCriteriaExactCallCenterReportTemplateKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_report_template_key",
                "searchCriteriaExactCallCenterReportTemplateKey",
                OCI.SearchCriteriaExactCallCenterReportTemplateKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportGetCompletedListRequest(OCIRequest):
    """
    Request to get a list of completed group level call center reporting scheduled
    reports.

    The response is either a
    ``GroupCallCenterEnhancedReportingScheduledReportGetCompletedListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_exact_call_center_report_template_key:
            searchCriteriaExactCallCenterReportTemplateKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_exact_call_center_report_template_key: "OCI.SearchCriteriaExactCallCenterReportTemplateKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_report_template_key",
                "searchCriteriaExactCallCenterReportTemplateKey",
                OCI.SearchCriteriaExactCallCenterReportTemplateKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportGetListRequest(OCIRequest):
    """
    Request to get a list of group level call center reporting scheduled reports.

    The response is either a
    ``GroupCallCenterEnhancedReportingScheduledReportGetListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_call_center_scheduled_report_name:
            searchCriteriaCallCenterScheduledReportName
        search_criteria_exact_call_center_scheduled_report_created_by_supervisor:
            searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor
        search_criteria_exact_call_center_report_template_key:
            searchCriteriaExactCallCenterReportTemplateKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_call_center_scheduled_report_name: List[OCI.SearchCriteriaCallCenterScheduledReportName] = attr.ib(default=None)
    search_criteria_exact_call_center_scheduled_report_created_by_supervisor: "OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor" = attr.ib(default=None)
    search_criteria_exact_call_center_report_template_key: "OCI.SearchCriteriaExactCallCenterReportTemplateKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_call_center_scheduled_report_name",
                "searchCriteriaCallCenterScheduledReportName",
                OCI.SearchCriteriaCallCenterScheduledReportName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_call_center_scheduled_report_created_by_supervisor",
                "searchCriteriaExactCallCenterScheduledReportCreatedBySupervisor",
                OCI.SearchCriteriaExactCallCenterScheduledReportCreatedBySupervisor,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_call_center_report_template_key",
                "searchCriteriaExactCallCenterReportTemplateKey",
                OCI.SearchCriteriaExactCallCenterReportTemplateKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterForcedForwardingModifyRequest(OCIRequest):
    """
    Modify a call center's forced forwarding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        allow_enable_via_fac: allowEnableViaFAC
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_file: audioFile
        video_message_selection: videoMessageSelection
        video_file: videoFile
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    allow_enable_via_fac: bool = attr.ib(default=None)
    play_announcement_before_forwarding: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("allow_enable_via_fac", "allowEnableViaFAC", bool),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterForcedForwardingModifyRequest17(OCIRequest):
    """
    Modify a call center's forced forwarding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        allow_enable_via_fac: allowEnableViaFAC
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    allow_enable_via_fac: bool = attr.ib(default=None)
    play_announcement_before_forwarding: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("allow_enable_via_fac", "allowEnableViaFAC", bool),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterForcedForwardingModifyRequest20(OCIRequest):
    """
    Modify a call center's forced forwarding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        allow_enable_via_fac: allowEnableViaFAC
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    allow_enable_via_fac: bool = attr.ib(default=None)
    play_announcement_before_forwarding: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("allow_enable_via_fac", "allowEnableViaFAC", bool),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAgentListRequest(OCIRequest):
    """
    Get a list of agents assigned to a call center.

    The response is either a ``GroupCallCenterGetAgentListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_skill_level: searchCriteriaExactSkillLevel
    """

    service_user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_skill_level: "OCI.SearchCriteriaExactSkillLevel" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_skill_level",
                "searchCriteriaExactSkillLevel",
                OCI.SearchCriteriaExactSkillLevel,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAvailableAgentListRequest(OCIRequest):
    """
    Get a list of users that can be assigned as agents to a given type of Call Center.

    Searching for users by group only makes sense when the call center is part of an
    Enterprise.

    The response is either ``GroupCallCenterGetAvailableAgentListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        call_center_type: callCenterType
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    call_center_type: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("call_center_type", "callCenterType", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAvailableSupervisorListRequest(OCIRequest):
    """
    Get a list of users that can be assigned as supervisors to a Call Center.

    Searching for users by group only makes sense when the call center is part of an
    Enterprise.

    The response is either ``GroupCallCenterGetAvailableSupervisorListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Call Center group.

    Searching for users by group only makes sense when the call center is part of an
    Enterprise.

    The response is either ``GroupCallCenterGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterGetAvailableAgentListRequest()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceModifyRequest(OCIRequest):
    """
    Modify a call center's holiday service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_file: audioFile
        video_message_selection: videoMessageSelection
        video_file: videoFile
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("holiday_schedule", "holidaySchedule", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceModifyRequest17(OCIRequest):
    """
    Modify a call center's holiday service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("holiday_schedule", "holidaySchedule", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceModifyRequest17sp1(OCIRequest):
    """
    Modify a call center's holiday service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterHolidayServiceModifyRequest20(OCIRequest):
    """
    Modify a call center's holiday service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyAgentListRequest(OCIRequest):
    """
    Request to modify the agent list for a call center.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. If the
    agentUserIdList is used for Skill Based Premium call centers, the agents will be set
    to skill level 1.

    Attributes:
        service_user_id: serviceUserId
        agent_user_id_list: agentUserIdList
        skilled_agent_user_id_list: skilledAgentUserIdList
    """

    service_user_id: str = attr.ib()
    agent_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    skilled_agent_user_id_list: List[OCI.CallCenterReplacementSkilledAgents] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "agent_user_id_list",
                "agentUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E(
                "skilled_agent_user_id_list",
                "skilledAgentUserIdList",
                OCI.CallCenterReplacementSkilledAgents,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceRequest(OCIRequest):
    """
    Request to modify a Call Center instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupCallCenterModifyInstanceRequest16()``

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        enable_video: enableVideo
        queue_length: queueLength
        allow_agent_logoff: allowAgentLogoff
        play_music_on_hold: playMusicOnHold
        play_comfort_message: playComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        enable_guard_timer: enableGuardTimer
        guard_timer_seconds: guardTimerSeconds
        agent_user_id_list: agentUserIdList
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        enable_call_queue_when_no_agents_available: enableCallQueueWhenNoAgentsAvailable
        statistics_source: statisticsSource
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    policy: str = attr.ib(default=None)
    hunt_after_no_answer: bool = attr.ib(default=None)
    no_answer_number_of_rings: int = attr.ib(default=None)
    forward_after_timeout: bool = attr.ib(default=None)
    forward_timeout_seconds: int = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    queue_length: int = attr.ib(default=None)
    allow_agent_logoff: bool = attr.ib(default=None)
    play_music_on_hold: bool = attr.ib(default=None)
    play_comfort_message: bool = attr.ib(default=None)
    time_between_comfort_messages_seconds: int = attr.ib(default=None)
    enable_guard_timer: bool = attr.ib(default=None)
    guard_timer_seconds: int = attr.ib(default=None)
    agent_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib(default=None)
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    enable_call_queue_when_no_agents_available: bool = attr.ib(default=None)
    statistics_source: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("policy", "policy", str),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool),
            E("no_answer_number_of_rings", "noAnswerNumberOfRings", int),
            E("forward_after_timeout", "forwardAfterTimeout", bool),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("enable_video", "enableVideo", bool),
            E("queue_length", "queueLength", int),
            E("allow_agent_logoff", "allowAgentLogoff", bool),
            E("play_music_on_hold", "playMusicOnHold", bool),
            E("play_comfort_message", "playComfortMessage", bool),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
            ),
            E("enable_guard_timer", "enableGuardTimer", bool),
            E("guard_timer_seconds", "guardTimerSeconds", int),
            E(
                "agent_user_id_list",
                "agentUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E(
                "enable_call_queue_when_no_agents_available",
                "enableCallQueueWhenNoAgentsAvailable",
                bool,
            ),
            E("statistics_source", "statisticsSource", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceRequest16(OCIRequest):
    """
    Request to modify a Call Center instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    type: str = attr.ib(default=None)
    policy: str = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    queue_length: int = attr.ib(default=None)
    reporting_server_name: str = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib(default=None)
    escape_digit: str = attr.ib(default=None)
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib(default=None)
    allow_agent_logoff: bool = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib(default=None)
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib(default=None)
    internal_preferred_audio_codec: str = attr.ib(default=None)
    play_ringing_when_offering_call: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("type", "type", str),
            E("policy", "policy", str),
            E("enable_video", "enableVideo", bool),
            E("queue_length", "queueLength", int),
            E("reporting_server_name", "reportingServerName", str),
            E("allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool),
            E("escape_digit", "escapeDigit", str),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool),
            E("allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("external_preferred_audio_codec", "externalPreferredAudioCodec", str),
            E("internal_preferred_audio_codec", "internalPreferredAudioCodec", str),
            E("play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceRequest17sp1(OCIRequest):
    """
    Request to modify a Call Center instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``GroupCallCenterModifyInstanceRequest19()``

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        reporting_server_name: reportingServerName
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    type: str = attr.ib(default=None)
    policy: str = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    queue_length: int = attr.ib(default=None)
    enable_reporting: bool = attr.ib(default=None)
    reporting_server_name: str = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib(default=None)
    escape_digit: str = attr.ib(default=None)
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib(default=None)
    allow_agent_logoff: bool = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib(default=None)
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib(default=None)
    internal_preferred_audio_codec: str = attr.ib(default=None)
    play_ringing_when_offering_call: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("type", "type", str),
            E("policy", "policy", str),
            E("enable_video", "enableVideo", bool),
            E("queue_length", "queueLength", int),
            E("enable_reporting", "enableReporting", bool),
            E("reporting_server_name", "reportingServerName", str),
            E("allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool),
            E("escape_digit", "escapeDigit", str),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool),
            E("allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("external_preferred_audio_codec", "externalPreferredAudioCodec", str),
            E("internal_preferred_audio_codec", "internalPreferredAudioCodec", str),
            E("play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyInstanceRequest19(OCIRequest):
    """
    Request to modify a Call Center instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        routing_type: routingType
        policy: policy
        enable_video: enableVideo
        queue_length: queueLength
        enable_reporting: enableReporting
        allow_caller_to_dial_escape_digit: allowCallerToDialEscapeDigit
        escape_digit: escapeDigit
        reset_call_statistics_upon_entry_in_queue: resetCallStatisticsUponEntryInQueue
        allow_agent_logoff: allowAgentLogoff
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        allow_calls_to_agents_in_wrap_up: allowCallsToAgentsInWrapUp
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    type: str = attr.ib(default=None)
    routing_type: str = attr.ib(default=None)
    policy: str = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    queue_length: int = attr.ib(default=None)
    enable_reporting: bool = attr.ib(default=None)
    allow_caller_to_dial_escape_digit: bool = attr.ib(default=None)
    escape_digit: str = attr.ib(default=None)
    reset_call_statistics_upon_entry_in_queue: bool = attr.ib(default=None)
    allow_agent_logoff: bool = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib(default=None)
    allow_calls_to_agents_in_wrap_up: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib(default=None)
    internal_preferred_audio_codec: str = attr.ib(default=None)
    play_ringing_when_offering_call: bool = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("type", "type", str),
            E("routing_type", "routingType", str),
            E("policy", "policy", str),
            E("enable_video", "enableVideo", bool),
            E("queue_length", "queueLength", int),
            E("enable_reporting", "enableReporting", bool),
            E("allow_caller_to_dial_escape_digit", "allowCallerToDialEscapeDigit", bool),
            E("escape_digit", "escapeDigit", str),
            E(
                "reset_call_statistics_upon_entry_in_queue",
                "resetCallStatisticsUponEntryInQueue",
                bool,
            ),
            E("allow_agent_logoff", "allowAgentLogoff", bool),
            E("allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool),
            E("allow_calls_to_agents_in_wrap_up", "allowCallsToAgentsInWrapUp", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("external_preferred_audio_codec", "externalPreferredAudioCodec", str),
            E("internal_preferred_audio_codec", "internalPreferredAudioCodec", str),
            E("play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceModifyRequest(OCIRequest):
    """
    Modify a call center's night service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_file: audioFile
        video_message_selection: videoMessageSelection
        video_file: videoFile
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_file: manualAudioFile
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_file: manualVideoFile
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    business_hours: str = attr.ib(default=None)
    force_night_service: bool = attr.ib(default=None)
    allow_manual_override_via_fac: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    manual_announcement_mode: str = attr.ib(default=None)
    manual_audio_message_selection: str = attr.ib(default=None)
    manual_audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    manual_video_message_selection: str = attr.ib(default=None)
    manual_video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("business_hours", "businessHours", str),
            E("force_night_service", "forceNightService", bool),
            E("allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("manual_announcement_mode", "manualAnnouncementMode", str),
            E("manual_audio_message_selection", "manualAudioMessageSelection", str),
            E(
                "manual_audio_file",
                "manualAudioFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
            E("manual_video_message_selection", "manualVideoMessageSelection", str),
            E(
                "manual_video_file",
                "manualVideoFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceModifyRequest17(OCIRequest):
    """
    Modify a call center's night service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    business_hours: str = attr.ib(default=None)
    force_night_service: bool = attr.ib(default=None)
    allow_manual_override_via_fac: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_announcement_mode: str = attr.ib(default=None)
    manual_audio_message_selection: str = attr.ib(default=None)
    manual_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_video_message_selection: str = attr.ib(default=None)
    manual_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("business_hours", "businessHours", str),
            E("force_night_service", "forceNightService", bool),
            E("allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_announcement_mode", "manualAnnouncementMode", str),
            E("manual_audio_message_selection", "manualAudioMessageSelection", str),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_video_message_selection", "manualVideoMessageSelection", str),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceModifyRequest17sp1(OCIRequest):
    """
    Modify a call center's night service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    force_night_service: bool = attr.ib(default=None)
    allow_manual_override_via_fac: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_announcement_mode: str = attr.ib(default=None)
    manual_audio_message_selection: str = attr.ib(default=None)
    manual_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_video_message_selection: str = attr.ib(default=None)
    manual_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool),
            E("allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_announcement_mode", "manualAnnouncementMode", str),
            E("manual_audio_message_selection", "manualAudioMessageSelection", str),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_video_message_selection", "manualVideoMessageSelection", str),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterNightServiceModifyRequest20(OCIRequest):
    """
    Modify a call center's night service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        allow_manual_override_via_fac: allowManualOverrideViaFAC
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    force_night_service: bool = attr.ib(default=None)
    allow_manual_override_via_fac: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    manual_announcement_mode: str = attr.ib(default=None)
    manual_audio_message_selection: str = attr.ib(default=None)
    manual_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    manual_video_message_selection: str = attr.ib(default=None)
    manual_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool),
            E("allow_manual_override_via_fac", "allowManualOverrideViaFAC", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("manual_announcement_mode", "manualAnnouncementMode", str),
            E("manual_audio_message_selection", "manualAudioMessageSelection", str),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("manual_video_message_selection", "manualVideoMessageSelection", str),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterOverflowModifyRequest(OCIRequest):
    """
    Modify a call center's overflow settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_file: audioFile
        video_message_selection: videoMessageSelection
        video_file: videoFile
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    overflow_after_timeout: bool = attr.ib(default=None)
    timeout_seconds: int = attr.ib(default=None)
    play_announcement_before_overflow_processing: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool),
            E("timeout_seconds", "timeoutSeconds", int),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterOverflowModifyRequest17(OCIRequest):
    """
    Modify a call center's overflow settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    overflow_after_timeout: bool = attr.ib(default=None)
    timeout_seconds: int = attr.ib(default=None)
    play_announcement_before_overflow_processing: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool),
            E("timeout_seconds", "timeoutSeconds", int),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterOverflowModifyRequest20(OCIRequest):
    """
    Modify a call center's overflow settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    overflow_after_timeout: bool = attr.ib(default=None)
    timeout_seconds: int = attr.ib(default=None)
    play_announcement_before_overflow_processing: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool),
            E("timeout_seconds", "timeoutSeconds", int),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallModifyRequest(OCIRequest):
    """
    Modify a call center's stranded call settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_file: audioFile
        video_message_selection: videoMessageSelection
        video_file: videoFile
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_message_selection", "videoMessageSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallModifyRequest17(OCIRequest):
    """
    Modify a call center's stranded call settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallModifyRequest20(OCIRequest):
    """
    Modify a call center's stranded call settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallUnavailableModifyRequest(OCIRequest):
    """
    Modify a call center's stranded calls - unavailable settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        condition_policy_on_number_of_agents_with_specified_unavailable_code:
            conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode
        number_of_agents_with_specified_unavailable_code:
            numberOfAgentsWithSpecifiedUnavailableCode
        agents_unavailable_code: agentsUnavailableCode
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    condition_policy_on_number_of_agents_with_specified_unavailable_code: bool = attr.ib(default=None)
    number_of_agents_with_specified_unavailable_code: int = attr.ib(default=None)
    agents_unavailable_code: str = attr.ib(default=None)
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "condition_policy_on_number_of_agents_with_specified_unavailable_code",
                "conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode",
                bool,
            ),
            E(
                "number_of_agents_with_specified_unavailable_code",
                "numberOfAgentsWithSpecifiedUnavailableCode",
                int,
            ),
            E("agents_unavailable_code", "agentsUnavailableCode", str),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterStrandedCallUnavailableModifyRequest20(OCIRequest):
    """
    Modify a call center's stranded calls - unavailable settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        condition_policy_on_number_of_agents_with_specified_unavailable_code:
            conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode
        number_of_agents_with_specified_unavailable_code:
            numberOfAgentsWithSpecifiedUnavailableCode
        agents_unavailable_code: agentsUnavailableCode
        action: action
        transfer_phone_number: transferPhoneNumber
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    condition_policy_on_number_of_agents_with_specified_unavailable_code: bool = attr.ib(default=None)
    number_of_agents_with_specified_unavailable_code: int = attr.ib(default=None)
    agents_unavailable_code: str = attr.ib(default=None)
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "condition_policy_on_number_of_agents_with_specified_unavailable_code",
                "conditionPolicyOnNumberOfAgentsWithSpecifiedUnavailableCode",
                bool,
            ),
            E(
                "number_of_agents_with_specified_unavailable_code",
                "numberOfAgentsWithSpecifiedUnavailableCode",
                int,
            ),
            E("agents_unavailable_code", "agentsUnavailableCode", str),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkGetAvailableAlternateRecallUserListRequest(OCIRequest):
    """
    Get a list of hunt groups that are available to select as an alternate recall user.

    The response is either ``GroupCallParkGetAvailableAlternateRecallUserListResponse()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallParkGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Call Park group.

    The available user list for a new Call Park group can be obtained by not setting the
    name.

    The response is either ``GroupCallParkGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallPickupGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Call Pickup group.

    The available user list for a new Call Pickup group can be obtained by not setting the
    name.

    The response is either ``GroupCallPickupGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCollaborateBridgeAddInstanceRequest(OCIRequest):
    """
    Add a collaborate bridge to a group.

    The domain is required in the serviceUserId.  The request fails when supportOutdial is
    enabled and the system-level collaborate supportOutdial setting is disabled.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        maximum_bridge_participants: maximumBridgeParticipants
        network_class_of_service: networkClassOfService
        max_collaborate_room_participants: maxCollaborateRoomParticipants
        support_outdial: supportOutdial
        collaborate_owner_user_id: collaborateOwnerUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    maximum_bridge_participants: "OCI.CollaborateBridgeMaximumParticipants" = attr.ib()
    network_class_of_service: str = attr.ib(default=None)
    max_collaborate_room_participants: int = attr.ib()
    support_outdial: bool = attr.ib()
    collaborate_owner_user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "maximum_bridge_participants",
                "maximumBridgeParticipants",
                OCI.CollaborateBridgeMaximumParticipants,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "max_collaborate_room_participants",
                "maxCollaborateRoomParticipants",
                int,
                is_required=True,
            ),
            E("support_outdial", "supportOutdial", bool, is_required=True),
            E("collaborate_owner_user_id", "collaborateOwnerUserId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCollaborateBridgeGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users with the Collaborate – Audio service assigned that can be assigned
    to a collaborate bridge.

    For an Enterprise Group this will include all users in the group’s enterprise.  The
    SearchCriteriaExactUserGroup parameter is only applicable for enterprise groups.

    The response is either ``GroupCollaborateBridgeGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCollaborateBridgeModifyInstanceRequest(OCIRequest):
    """
    Request to modify a Collaborate bridge.

    The request fails when the collaborateOwnerUserIdList is included in the request for
    the default collaborate bridge.  The request fails when the supportOutdial is included
    in the request and the system-level collaborate supportOutdial setting is disabled.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        maximum_bridge_participants: maximumBridgeParticipants
        network_class_of_service: networkClassOfService
        max_collaborate_room_participants: maxCollaborateRoomParticipants
        support_outdial: supportOutdial
        collaborate_owner_user_id_list: collaborateOwnerUserIdList
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    maximum_bridge_participants: "OCI.CollaborateBridgeMaximumParticipants" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)
    max_collaborate_room_participants: int = attr.ib(default=None)
    support_outdial: bool = attr.ib(default=None)
    collaborate_owner_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E(
                "maximum_bridge_participants",
                "maximumBridgeParticipants",
                OCI.CollaborateBridgeMaximumParticipants,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "max_collaborate_room_participants",
                "maxCollaborateRoomParticipants",
                int,
            ),
            E("support_outdial", "supportOutdial", bool),
            E(
                "collaborate_owner_user_id_list",
                "collaborateOwnerUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be part of a custom contact directory.

    The response is either ``GroupCustomContactDirectoryGetAvailableUserListResponse()``
    or ``ErrorResponse()``. Replace by:
    ``GroupCustomContactDirectoryGetAvailableUserListRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryGetAvailableUserListRequest17(OCIRequest):
    """
    Get a list of users that can be part of a custom contact directory.

    The response is either ``GroupCustomContactDirectoryGetAvailableUserListResponse17()``
    or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryGetRequest17(OCIRequest):
    """
    Gets a Custom Contact Directory in a group.

    The response is either ``GroupCustomContactDirectoryGetResponse17()`` or
    ``ErrorResponse()``. The search can be done using multiple criterion.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterion are included
    in the results.  If no search criteria is specified, all results are returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``. In all cases, if a responseSizeLimit is specified and the number
    of matching results is more than this limit, then an ``ErrorResponse()`` is returned.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        response_size_limit: responseSizeLimit
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_imp_id: searchCriteriaImpId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomContactDirectoryModifyRequest17(OCIRequest):
    """
    Adds a Custom Contact Directory to a group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        entry_list: entryList
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    entry_list: "OCI.ReplacementCustomContactDirectoryEntryList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E(
                "entry_list",
                "entryList",
                OCI.ReplacementCustomContactDirectoryEntryList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomRingbackGroupModifyRequest(OCIRequest):
    """
    Modify the group's custom ring back service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``GroupCustomRingbackGroupModifyRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("audio_selection", "audioSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedFileResource, is_complex=True),
            E("video_selection", "videoSelection", str),
            E("video_file", "videoFile", OCI.ExtendedFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomRingbackGroupModifyRequest16(OCIRequest):
    """
    Modify the group's custom ring back service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("audio_selection", "audioSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_selection", "videoSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCustomRingbackGroupModifyRequest20(OCIRequest):
    """
    Modify the group's custom ring back service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_active: isActive
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource20" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("audio_selection", "audioSelection", str),
            E(
                "audio_file",
                "audioFile",
                OCI.ExtendedMediaFileResource20,
                is_complex=True,
            ),
            E("video_selection", "videoSelection", str),
            E(
                "video_file",
                "videoFile",
                OCI.ExtendedMediaFileResource20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetAssignmentListRequest(OCIRequest):
    """
    Get the list of assigned and unassigned DNs in a group.

    Each DN can be assigned to a user and/or department.  Ranges of DNs with identical
    assignment and activation properties are coalesced to a single table row entry.

    The response is either a ``GroupDnGetAssignmentListResponse()`` or an
    ``ErrorResponse()``. Replaced by: ``GroupDnGetAssignmentListRequest18()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_exact_dn_department: searchCriteriaExactDnDepartment
        search_criteria_exact_dn_activation: searchCriteriaExactDnActivation
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_exact_dn_department: "OCI.SearchCriteriaExactDnDepartment" = attr.ib(default=None)
    search_criteria_exact_dn_activation: "OCI.SearchCriteriaExactDnActivation" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_dn_department",
                "searchCriteriaExactDnDepartment",
                OCI.SearchCriteriaExactDnDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_dn_activation",
                "searchCriteriaExactDnActivation",
                OCI.SearchCriteriaExactDnActivation,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDnGetAssignmentListRequest18(OCIRequest):
    """
    Get the list of assigned and unassigned DNs in a group.

    Each DN can be assigned to a user and/or department.  Ranges of DNs with identical
    assignment and activation properties are coalesced to a single table row entry.  Dns
    assigned to the IMRN pool are not listed in the response.

    The response is either a ``GroupDnGetAssignmentListResponse18()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_exact_dn_department: searchCriteriaExactDnDepartment
        search_criteria_exact_dn_activation: searchCriteriaExactDnActivation
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_exact_dn_department: "OCI.SearchCriteriaExactDnDepartment" = attr.ib(default=None)
    search_criteria_exact_dn_activation: "OCI.SearchCriteriaExactDnActivation" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_dn_department",
                "searchCriteriaExactDnDepartment",
                OCI.SearchCriteriaExactDnDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_dn_activation",
                "searchCriteriaExactDnActivation",
                OCI.SearchCriteriaExactDnActivation,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupDomainGetAssignedUserListRequest(OCIRequest):
    """
    Request a list of users within in a group that have a given domain assigned.

    The response is either ``GroupDomainGetAssignedUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        domain: domain
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    domain: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("domain", "domain", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEndpointGetListRequest(OCIRequest):
    """
    Request to search endpoints in the group.

    The response is either ``GroupEndpointGetListResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_line_port_user_part: searchCriteriaLinePortUserPart
        search_criteria_line_port_domain: searchCriteriaLinePortDomain
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_device_type: searchCriteriaDeviceType
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_line_port_user_part: List[OCI.SearchCriteriaLinePortUserPart] = attr.ib(default=None)
    search_criteria_line_port_domain: List[OCI.SearchCriteriaLinePortDomain] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_device_type: List[OCI.SearchCriteriaDeviceType] = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_line_port_user_part",
                "searchCriteriaLinePortUserPart",
                OCI.SearchCriteriaLinePortUserPart,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_domain",
                "searchCriteriaLinePortDomain",
                OCI.SearchCriteriaLinePortDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_type",
                "searchCriteriaDeviceType",
                OCI.SearchCriteriaDeviceType,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnhancedCallLogsGetListRequest(OCIRequest):
    """
    Request users' call logs within a group If the callLogType is not specified, all types
    of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.If
    responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either a ``GroupEnhancedCallLogsGetListResponse()`` or an
    ``ErrorResponse()``. Replaced by ``GroupEnhancedCallLogsGetListRequest17sp4()``.
    Originally deprecated in release 20.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        call_log_type: callLogType
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnhancedCallLogsGetListRequest17sp4(OCIRequest):
    """
    Request users' call logs within a group If the callLogType is not specified, all types
    of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.If
    responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either a ``GroupEnhancedCallLogsGetListResponse17sp4()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode:
    callAuthorizationCodeFilter

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        call_log_type: callLogType
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnhancedCallLogsGetListRequest20(OCIRequest):
    """
    Request users' call logs within a group If the callLogType is not specified, all types
    of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.If
    responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either a ``GroupEnhancedCallLogsGetListResponse20()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode:
    callAuthorizationCodeFilter callSecurityClassification

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        call_log_type: callLogType
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnhancedCallLogsGetListRequest21(OCIRequest):
    """
    Request users' call logs within a group If the callLogType is not specified, all types
    of calls logs (placed, received, missed) are returned.

    It is possible to restrict the number of rows returned using responsePagingControl.If
    responsePagingControl is not specified, the value of Enhanced Call Logs system
    parameter maxNonPagedResponseSize will control the maximum number of call logs can be
    returned.

    The response is either a ``GroupEnhancedCallLogsGetListResponse21()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode and ignored
    in HSS data mode: callAuthorizationCodeFilter

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        call_log_type: callLogType
        user_dn_range: userDnRange
        user_extension_range: userExtensionRange
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    user_dn_range: List[OCI.DNRange] = attr.ib(default=None)
    user_extension_range: List[OCI.ExtensionRange17] = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter21" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.EnhancedCallLogsResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "user_dn_range",
                "userDnRange",
                OCI.DNRange,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_extension_range",
                "userExtensionRange",
                OCI.ExtensionRange17,
                is_complex=True,
                is_array=True,
            ),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter21,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.EnhancedCallLogsResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkGetAvailableUserListRequest(OCIRequest):
    """
    Request the list of users that are available to be added to an enterprise trunk.

    This list contains users in the group that are trunk users and not already assigned to
    an enterprise trunk.  It is possible to search by various criteria to restrict the
    number of rows returned.  Multiple search criteria are logically ANDed together.

    The response is either a ``GroupEnterpriseTrunkGetAvailableUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_alternate_trunk_identity: searchCriteriaAlternateTrunkIdentity
        search_criteria_alternate_trunk_identity_domain:
            searchCriteriaAlternateTrunkIdentityDomain
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity: List[OCI.SearchCriteriaAlternateTrunkIdentity] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity_domain: List[OCI.SearchCriteriaAlternateTrunkIdentityDomain] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity",
                "searchCriteriaAlternateTrunkIdentity",
                OCI.SearchCriteriaAlternateTrunkIdentity,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity_domain",
                "searchCriteriaAlternateTrunkIdentityDomain",
                OCI.SearchCriteriaAlternateTrunkIdentityDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupEnterpriseTrunkGetUserListRequest(OCIRequest):
    """
    Request the list of users in an enterprise trunk.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``GroupEnterpriseTrunkGetUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        enterprise_trunk_name: enterpriseTrunkName
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_alternate_trunk_identity: searchCriteriaAlternateTrunkIdentity
        search_criteria_alternate_trunk_identity_domain:
            searchCriteriaAlternateTrunkIdentityDomain
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_route_list_assigned:
            searchCriteriaExactUserRouteListAssigned
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    enterprise_trunk_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity: List[OCI.SearchCriteriaAlternateTrunkIdentity] = attr.ib(default=None)
    search_criteria_alternate_trunk_identity_domain: List[OCI.SearchCriteriaAlternateTrunkIdentityDomain] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_route_list_assigned: "OCI.SearchCriteriaExactUserRouteListAssigned" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("enterprise_trunk_name", "enterpriseTrunkName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity",
                "searchCriteriaAlternateTrunkIdentity",
                OCI.SearchCriteriaAlternateTrunkIdentity,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_alternate_trunk_identity_domain",
                "searchCriteriaAlternateTrunkIdentityDomain",
                OCI.SearchCriteriaAlternateTrunkIdentityDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_route_list_assigned",
                "searchCriteriaExactUserRouteListAssigned",
                OCI.SearchCriteriaExactUserRouteListAssigned,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeAddInstanceRequest(OCIRequest):
    """
    Add a Find-me/Follow-me instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeAlertingGroupGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Find-me/Follow-me alerting group.

    The response is either
    ``GroupFindMeFollowMeAlertingGroupGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeModifyAlertingGroupSelectiveCriteriaRequest(OCIRequest):
    """
    Modify a Find-me/Follow-me alerting group criteria.

    For the callToNumbers in the callToNumberList, the extension and number elements are
    not used and the only types accepted for each number are Primary and Alternates.  If
    other type is specified the command fails.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        alerting_group_name: alertingGroupName
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        call_to_number_list: callToNumberList
    """

    service_user_id: str = attr.ib()
    alerting_group_name: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("alerting_group_name", "alertingGroupName", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFindMeFollowMeModifyInstanceRequest(OCIRequest):
    """
    Request to modify a Find-me/Follow-me instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostAddInstanceRequest(OCIRequest):
    """
    Add a flexible seating host instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        access_device_endpoint: accessDeviceEndpoint
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileFlexibleSeatingHost" = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceMultipleContactEndpointAdd" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileFlexibleSeatingHost,
                is_complex=True,
                is_required=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointAdd,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostGetInstanceListRequest(OCIRequest):
    """
    Get a list of flexible seating host instances within a group.

    The response is either ``GroupFlexibleSeatingHostGetInstanceListResponse()`` or
    ``ErrorResponse()``. It is possible to get the instances within a specified
    department.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_department_name: groupDepartmentName
        response_size_limit: responseSizeLimit
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_service_instance_name: searchCriteriaServiceInstanceName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_department_name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_service_instance_name: List[OCI.SearchCriteriaServiceInstanceName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("group_department_name", "groupDepartmentName", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_service_instance_name",
                "searchCriteriaServiceInstanceName",
                OCI.SearchCriteriaServiceInstanceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupFlexibleSeatingHostModifyInstanceRequest(OCIRequest):
    """
    Request to modify a flexible seating host instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        access_device_endpoint: accessDeviceEndpoint
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfileFlexibleSeatingHost" = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceMultipleContactEndpointModify" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfileFlexibleSeatingHost,
                is_complex=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointModify,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingAddInstanceRequest(OCIRequest):
    """
    Add a Group Paging instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        confirmation_tone_timeout_seconds: confirmationToneTimeoutSeconds
        deliver_originator_clid_instead: deliverOriginatorCLIDInstead
        originator_clid_prefix: originatorCLIDPrefix
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    confirmation_tone_timeout_seconds: int = attr.ib()
    deliver_originator_clid_instead: bool = attr.ib()
    originator_clid_prefix: str = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "confirmation_tone_timeout_seconds",
                "confirmationToneTimeoutSeconds",
                int,
                is_required=True,
            ),
            E(
                "deliver_originator_clid_instead",
                "deliverOriginatorCLIDInstead",
                bool,
                is_required=True,
            ),
            E("originator_clid_prefix", "originatorCLIDPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetAvailableOriginatorListRequest(OCIRequest):
    """
    Get a list of users that can be assigned as originators to a given paging group.

    Searching for users by group only makes sense when the paging group is part of an
    Enterprise.

    The response is either ``GroupGroupPagingGetAvailableOriginatorListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingGetAvailableTargetListRequest(OCIRequest):
    """
    Get a list of users that can be assigned as targets to a given paging group.

    Searching for users by group only makes sense when the paging group is part of an
    Enterprise.

    The response is either ``GroupGroupPagingGetAvailableTargetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupGroupPagingModifyInstanceRequest(OCIRequest):
    """
    Request to modify a Group Paging instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        confirmation_tone_timeout_seconds: confirmationToneTimeoutSeconds
        deliver_originator_clid_instead: deliverOriginatorCLIDInstead
        originator_clid_prefix: originatorCLIDPrefix
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    confirmation_tone_timeout_seconds: int = attr.ib(default=None)
    deliver_originator_clid_instead: bool = attr.ib(default=None)
    originator_clid_prefix: str = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E(
                "confirmation_tone_timeout_seconds",
                "confirmationToneTimeoutSeconds",
                int,
            ),
            E("deliver_originator_clid_instead", "deliverOriginatorCLIDInstead", bool),
            E("originator_clid_prefix", "originatorCLIDPrefix", str),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupAddInstanceRequest14(OCIRequest):
    """
    Add a Hunt Group instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupAddInstanceRequest17sp3(OCIRequest):
    """
    Add a Hunt Group instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: useSystemHuntGroupCLIDSetting, use value
    "true" in HSS data mode includeHuntGroupNameInCLID, use value "true" in HSS data mode

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()
    use_system_hunt_group_clid_setting: bool = attr.ib()
    include_hunt_group_name_in_clid: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupAddInstanceRequest17sp4(OCIRequest):
    """
    Add a Hunt Group instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: useSystemHuntGroupCLIDSetting, use value
    "true" in HSS data mode includeHuntGroupNameInCLID, use value "true" in HSS data mode

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()
    use_system_hunt_group_clid_setting: bool = attr.ib()
    include_hunt_group_name_in_clid: bool = attr.ib()
    enable_not_reachable_forwarding: bool = attr.ib()
    not_reachable_forward_to_phone_number: str = attr.ib(default=None)
    make_busy_when_not_reachable: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
            E(
                "enable_not_reachable_forwarding",
                "enableNotReachableForwarding",
                bool,
                is_required=True,
            ),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E(
                "make_busy_when_not_reachable",
                "makeBusyWhenNotReachable",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupAddInstanceRequest19(OCIRequest):
    """
    Add a Hunt Group instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: useSystemHuntGroupCLIDSetting, use value
    "true" in HSS data mode includeHuntGroupNameInCLID, use value "true" in HSS data mode

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
        allow_members_to_control_group_busy: allowMembersToControlGroupBusy
        enable_group_busy: enableGroupBusy
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()
    use_system_hunt_group_clid_setting: bool = attr.ib()
    include_hunt_group_name_in_clid: bool = attr.ib()
    enable_not_reachable_forwarding: bool = attr.ib()
    not_reachable_forward_to_phone_number: str = attr.ib(default=None)
    make_busy_when_not_reachable: bool = attr.ib()
    allow_members_to_control_group_busy: bool = attr.ib()
    enable_group_busy: bool = attr.ib()
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
            E(
                "enable_not_reachable_forwarding",
                "enableNotReachableForwarding",
                bool,
                is_required=True,
            ),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E(
                "make_busy_when_not_reachable",
                "makeBusyWhenNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "allow_members_to_control_group_busy",
                "allowMembersToControlGroupBusy",
                bool,
                is_required=True,
            ),
            E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupAddInstanceRequest20(OCIRequest):
    """
    Add a Hunt Group instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: useSystemHuntGroupCLIDSetting, use value
    "true" in HSS data mode includeHuntGroupNameInCLID, use value "true" in HSS data mode

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_id: agentUserId
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
        allow_members_to_control_group_busy: allowMembersToControlGroupBusy
        enable_group_busy: enableGroupBusy
        apply_group_busy_when_terminating_to_agent: applyGroupBusyWhenTerminatingToAgent
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    policy: str = attr.ib()
    hunt_after_no_answer: bool = attr.ib()
    no_answer_number_of_rings: int = attr.ib()
    forward_after_timeout: bool = attr.ib()
    forward_timeout_seconds: int = attr.ib()
    forward_to_phone_number: str = attr.ib(default=None)
    agent_user_id: List[str] = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib()
    use_system_hunt_group_clid_setting: bool = attr.ib()
    include_hunt_group_name_in_clid: bool = attr.ib()
    enable_not_reachable_forwarding: bool = attr.ib()
    not_reachable_forward_to_phone_number: str = attr.ib(default=None)
    make_busy_when_not_reachable: bool = attr.ib()
    allow_members_to_control_group_busy: bool = attr.ib()
    enable_group_busy: bool = attr.ib()
    apply_group_busy_when_terminating_to_agent: bool = attr.ib()
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("policy", "policy", str, is_required=True),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool, is_required=True),
            E(
                "no_answer_number_of_rings",
                "noAnswerNumberOfRings",
                int,
                is_required=True,
            ),
            E("forward_after_timeout", "forwardAfterTimeout", bool, is_required=True),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int, is_required=True),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E("agent_user_id", "agentUserId", str, is_array=True),
            E(
                "allow_call_waiting_for_agents",
                "allowCallWaitingForAgents",
                bool,
                is_required=True,
            ),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
                is_required=True,
            ),
            E(
                "include_hunt_group_name_in_clid",
                "includeHuntGroupNameInCLID",
                bool,
                is_required=True,
            ),
            E(
                "enable_not_reachable_forwarding",
                "enableNotReachableForwarding",
                bool,
                is_required=True,
            ),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E(
                "make_busy_when_not_reachable",
                "makeBusyWhenNotReachable",
                bool,
                is_required=True,
            ),
            E(
                "allow_members_to_control_group_busy",
                "allowMembersToControlGroupBusy",
                bool,
                is_required=True,
            ),
            E("enable_group_busy", "enableGroupBusy", bool, is_required=True),
            E(
                "apply_group_busy_when_terminating_to_agent",
                "applyGroupBusyWhenTerminatingToAgent",
                bool,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Hunt Group group.

    Searching for users by group only makes sense when the hunt group is part of an
    Enterprise.

    The response is either ``GroupHuntGroupGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupHuntGroupModifyInstanceRequest(OCIRequest):
    """
    Request to modify a Hunt Group instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: useSystemHuntGroupCLIDSetting
    includeHuntGroupNameInCLID

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        policy: policy
        hunt_after_no_answer: huntAfterNoAnswer
        no_answer_number_of_rings: noAnswerNumberOfRings
        forward_after_timeout: forwardAfterTimeout
        forward_timeout_seconds: forwardTimeoutSeconds
        forward_to_phone_number: forwardToPhoneNumber
        agent_user_id_list: agentUserIdList
        allow_call_waiting_for_agents: allowCallWaitingForAgents
        use_system_hunt_group_clid_setting: useSystemHuntGroupCLIDSetting
        include_hunt_group_name_in_clid: includeHuntGroupNameInCLID
        enable_not_reachable_forwarding: enableNotReachableForwarding
        not_reachable_forward_to_phone_number: notReachableForwardToPhoneNumber
        make_busy_when_not_reachable: makeBusyWhenNotReachable
        allow_members_to_control_group_busy: allowMembersToControlGroupBusy
        enable_group_busy: enableGroupBusy
        apply_group_busy_when_terminating_to_agent: applyGroupBusyWhenTerminatingToAgent
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    policy: str = attr.ib(default=None)
    hunt_after_no_answer: bool = attr.ib(default=None)
    no_answer_number_of_rings: int = attr.ib(default=None)
    forward_after_timeout: bool = attr.ib(default=None)
    forward_timeout_seconds: int = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    agent_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    allow_call_waiting_for_agents: bool = attr.ib(default=None)
    use_system_hunt_group_clid_setting: bool = attr.ib(default=None)
    include_hunt_group_name_in_clid: bool = attr.ib(default=None)
    enable_not_reachable_forwarding: bool = attr.ib(default=None)
    not_reachable_forward_to_phone_number: str = attr.ib(default=None)
    make_busy_when_not_reachable: bool = attr.ib(default=None)
    allow_members_to_control_group_busy: bool = attr.ib(default=None)
    enable_group_busy: bool = attr.ib(default=None)
    apply_group_busy_when_terminating_to_agent: bool = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("policy", "policy", str),
            E("hunt_after_no_answer", "huntAfterNoAnswer", bool),
            E("no_answer_number_of_rings", "noAnswerNumberOfRings", int),
            E("forward_after_timeout", "forwardAfterTimeout", bool),
            E("forward_timeout_seconds", "forwardTimeoutSeconds", int),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "agent_user_id_list",
                "agentUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("allow_call_waiting_for_agents", "allowCallWaitingForAgents", bool),
            E(
                "use_system_hunt_group_clid_setting",
                "useSystemHuntGroupCLIDSetting",
                bool,
            ),
            E("include_hunt_group_name_in_clid", "includeHuntGroupNameInCLID", bool),
            E("enable_not_reachable_forwarding", "enableNotReachableForwarding", bool),
            E(
                "not_reachable_forward_to_phone_number",
                "notReachableForwardToPhoneNumber",
                str,
            ),
            E("make_busy_when_not_reachable", "makeBusyWhenNotReachable", bool),
            E(
                "allow_members_to_control_group_busy",
                "allowMembersToControlGroupBusy",
                bool,
            ),
            E("enable_group_busy", "enableGroupBusy", bool),
            E(
                "apply_group_busy_when_terminating_to_agent",
                "applyGroupBusyWhenTerminatingToAgent",
                bool,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupIncomingCallingPlanModifyListRequest(OCIRequest):
    """
    Change the group's incoming calling plan settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.IncomingCallingPlanPermissionsModify" = attr.ib(default=None)
    department_permissions: List[OCI.IncomingCallingPlanDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.IncomingCallingPlanPermissionsModify,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.IncomingCallingPlanDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallAddInstanceRequest14(OCIRequest):
    """
    Request to add an Instant Group Call service instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        destination_phone_number: destinationPhoneNumber
        is_answer_timeout_enabled: isAnswerTimeoutEnabled
        answer_timeout_minutes: answerTimeoutMinutes
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    destination_phone_number: List[str] = attr.ib(default=None)
    is_answer_timeout_enabled: bool = attr.ib()
    answer_timeout_minutes: int = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("destination_phone_number", "destinationPhoneNumber", str, is_array=True),
            E(
                "is_answer_timeout_enabled",
                "isAnswerTimeoutEnabled",
                bool,
                is_required=True,
            ),
            E("answer_timeout_minutes", "answerTimeoutMinutes", int),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupInstantGroupCallModifyInstanceRequest(OCIRequest):
    """
    Request to modify an Instant Group Call service instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        destination_phone_number_list: destinationPhoneNumberList
        is_answer_timeout_enabled: isAnswerTimeoutEnabled
        answer_timeout_minutes: answerTimeoutMinutes
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    destination_phone_number_list: "OCI.ReplacementOutgoingDNorSIPURIList" = attr.ib(default=None)
    is_answer_timeout_enabled: bool = attr.ib(default=None)
    answer_timeout_minutes: int = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E(
                "destination_phone_number_list",
                "destinationPhoneNumberList",
                OCI.ReplacementOutgoingDNorSIPURIList,
                is_complex=True,
            ),
            E("is_answer_timeout_enabled", "isAnswerTimeoutEnabled", bool),
            E("answer_timeout_minutes", "answerTimeoutMinutes", int),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMWIDeliveryToMobileEndpointCustomTemplateAddRequest(OCIRequest):
    """
    Create a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        language: language
        type: type
        is_enabled: isEnabled
        template_body: templateBody
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()
    is_enabled: bool = attr.ib()
    template_body: "OCI.MWIDeliveryToMobileEndpointTemplateBody" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E(
                "template_body",
                "templateBody",
                OCI.MWIDeliveryToMobileEndpointTemplateBody,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMWIDeliveryToMobileEndpointCustomTemplateModifyRequest(OCIRequest):
    """
    Modify a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        language: language
        type: type
        is_enabled: isEnabled
        template_body: templateBody
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()
    is_enabled: bool = attr.ib(default=None)
    template_body: "OCI.MWIDeliveryToMobileEndpointTemplateBody" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
            E("is_enabled", "isEnabled", bool),
            E(
                "template_body",
                "templateBody",
                OCI.MWIDeliveryToMobileEndpointTemplateBody,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingAddInstanceRequest(OCIRequest):
    """
    Add a Meet-Me Conferencing bridge to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_id: conferenceHostUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    allocated_ports: "OCI.MeetMeConferencingConferencePorts" = attr.ib()
    network_class_of_service: str = attr.ib(default=None)
    allow_individual_out_dial: bool = attr.ib()
    operator_number: str = attr.ib(default=None)
    conference_host_user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E("conference_host_user_id", "conferenceHostUserId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingAddInstanceRequest18(OCIRequest):
    """
    Add a Meet-Me Conferencing bridge to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_id: conferenceHostUserId
        play_warning_prompt: playWarningPrompt
        conference_end_warning_prompt_minutes: conferenceEndWarningPromptMinutes
        enable_max_conference_duration: enableMaxConferenceDuration
        max_conference_duration_minutes: maxConferenceDurationMinutes
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    allocated_ports: "OCI.MeetMeConferencingConferencePorts" = attr.ib()
    network_class_of_service: str = attr.ib(default=None)
    allow_individual_out_dial: bool = attr.ib()
    operator_number: str = attr.ib(default=None)
    conference_host_user_id: List[str] = attr.ib(default=None)
    play_warning_prompt: bool = attr.ib()
    conference_end_warning_prompt_minutes: int = attr.ib()
    enable_max_conference_duration: bool = attr.ib()
    max_conference_duration_minutes: "OCI.MeetMeConferencingConferenceDuration" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E("conference_host_user_id", "conferenceHostUserId", str, is_array=True),
            E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
            E(
                "conference_end_warning_prompt_minutes",
                "conferenceEndWarningPromptMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_max_conference_duration",
                "enableMaxConferenceDuration",
                bool,
                is_required=True,
            ),
            E(
                "max_conference_duration_minutes",
                "maxConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingAddInstanceRequest19(OCIRequest):
    """
    Add a Meet-Me Conferencing bridge to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        security_pin_length: securityPinLength
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_id: conferenceHostUserId
        play_warning_prompt: playWarningPrompt
        conference_end_warning_prompt_minutes: conferenceEndWarningPromptMinutes
        enable_max_conference_duration: enableMaxConferenceDuration
        max_conference_duration_minutes: maxConferenceDurationMinutes
        max_scheduled_conference_duration_minutes: maxScheduledConferenceDurationMinutes
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    allocated_ports: "OCI.MeetMeConferencingConferencePorts" = attr.ib()
    network_class_of_service: str = attr.ib(default=None)
    security_pin_length: int = attr.ib()
    allow_individual_out_dial: bool = attr.ib()
    operator_number: str = attr.ib(default=None)
    conference_host_user_id: List[str] = attr.ib(default=None)
    play_warning_prompt: bool = attr.ib()
    conference_end_warning_prompt_minutes: int = attr.ib()
    enable_max_conference_duration: bool = attr.ib()
    max_conference_duration_minutes: "OCI.MeetMeConferencingConferenceDuration" = attr.ib()
    max_scheduled_conference_duration_minutes: "OCI.MeetMeConferencingConferenceDuration" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E("security_pin_length", "securityPinLength", int, is_required=True),
            E(
                "allow_individual_out_dial",
                "allowIndividualOutDial",
                bool,
                is_required=True,
            ),
            E("operator_number", "operatorNumber", str),
            E("conference_host_user_id", "conferenceHostUserId", str, is_array=True),
            E("play_warning_prompt", "playWarningPrompt", bool, is_required=True),
            E(
                "conference_end_warning_prompt_minutes",
                "conferenceEndWarningPromptMinutes",
                int,
                is_required=True,
            ),
            E(
                "enable_max_conference_duration",
                "enableMaxConferenceDuration",
                bool,
                is_required=True,
            ),
            E(
                "max_conference_duration_minutes",
                "maxConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
            E(
                "max_scheduled_conference_duration_minutes",
                "maxScheduledConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Meet-Me Conferencing bridge.

    Searching for users by group only makes sense when the Meet-Me Conferencing is part of
    an Enterprise.

    The response is either ``GroupMeetMeConferencingGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMeetMeConferencingModifyInstanceRequest(OCIRequest):
    """
    Request to modify a Meet-Me Conferencing bridge.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        allocated_ports: allocatedPorts
        network_class_of_service: networkClassOfService
        security_pin_length: securityPinLength
        allow_individual_out_dial: allowIndividualOutDial
        operator_number: operatorNumber
        conference_host_user_id_list: conferenceHostUserIdList
        play_warning_prompt: playWarningPrompt
        conference_end_warning_prompt_minutes: conferenceEndWarningPromptMinutes
        enable_max_conference_duration: enableMaxConferenceDuration
        max_conference_duration_minutes: maxConferenceDurationMinutes
        max_scheduled_conference_duration_minutes: maxScheduledConferenceDurationMinutes
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    allocated_ports: "OCI.MeetMeConferencingConferencePorts" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)
    security_pin_length: int = attr.ib(default=None)
    allow_individual_out_dial: bool = attr.ib(default=None)
    operator_number: str = attr.ib(default=None)
    conference_host_user_id_list: "OCI.ReplacementUserIdList" = attr.ib(default=None)
    play_warning_prompt: bool = attr.ib(default=None)
    conference_end_warning_prompt_minutes: int = attr.ib(default=None)
    enable_max_conference_duration: bool = attr.ib(default=None)
    max_conference_duration_minutes: "OCI.MeetMeConferencingConferenceDuration" = attr.ib(default=None)
    max_scheduled_conference_duration_minutes: "OCI.MeetMeConferencingConferenceDuration" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E(
                "allocated_ports",
                "allocatedPorts",
                OCI.MeetMeConferencingConferencePorts,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E("security_pin_length", "securityPinLength", int),
            E("allow_individual_out_dial", "allowIndividualOutDial", bool),
            E("operator_number", "operatorNumber", str),
            E(
                "conference_host_user_id_list",
                "conferenceHostUserIdList",
                OCI.ReplacementUserIdList,
                is_complex=True,
            ),
            E("play_warning_prompt", "playWarningPrompt", bool),
            E(
                "conference_end_warning_prompt_minutes",
                "conferenceEndWarningPromptMinutes",
                int,
            ),
            E("enable_max_conference_duration", "enableMaxConferenceDuration", bool),
            E(
                "max_conference_duration_minutes",
                "maxConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
            ),
            E(
                "max_scheduled_conference_duration_minutes",
                "maxScheduledConferenceDurationMinutes",
                OCI.MeetMeConferencingConferenceDuration,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldAddInstanceRequest14(OCIRequest):
    """
    Add a Music On Hold Instance to a department.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: GroupMusicOnHoldAddInstanceRequest14Sp4

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        message_selection: messageSelection
        access_device_endpoint: accessDeviceEndpoint
        audio_file: audioFile
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib()
    is_active_during_call_hold: bool = attr.ib()
    is_active_during_call_park: bool = attr.ib()
    message_selection: str = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib(default=None)
    audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E("message_selection", "messageSelection", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
            ),
            E("audio_file", "audioFile", OCI.LabeledFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldAddInstanceRequest14sp4(OCIRequest):
    """
    Add a Music On Hold Instance to a department.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        message_selection: messageSelection
        access_device_endpoint: accessDeviceEndpoint
        audio_file: audioFile
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib()
    is_active_during_call_hold: bool = attr.ib()
    is_active_during_call_park: bool = attr.ib()
    is_active_during_busy_camp_on: bool = attr.ib()
    message_selection: str = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib(default=None)
    audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "department",
                "department",
                OCI.DepartmentKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "is_active_during_call_hold",
                "isActiveDuringCallHold",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_call_park",
                "isActiveDuringCallPark",
                bool,
                is_required=True,
            ),
            E(
                "is_active_during_busy_camp_on",
                "isActiveDuringBusyCampOn",
                bool,
                is_required=True,
            ),
            E("message_selection", "messageSelection", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
            ),
            E("audio_file", "audioFile", OCI.LabeledFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupMusicOnHoldModifyInstanceRequest14(OCIRequest):
    """
    Modify data for a group or department Music On Hold Instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        department: department
        is_active_during_call_hold: isActiveDuringCallHold
        is_active_during_call_park: isActiveDuringCallPark
        is_active_during_busy_camp_on: isActiveDuringBusyCampOn
        message_selection: messageSelection
        access_device_endpoint: accessDeviceEndpoint
        audio_file: audioFile
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    is_active_during_call_hold: bool = attr.ib(default=None)
    is_active_during_call_park: bool = attr.ib(default=None)
    is_active_during_busy_camp_on: bool = attr.ib(default=None)
    message_selection: str = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceEndpointModify" = attr.ib(default=None)
    audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("is_active_during_call_hold", "isActiveDuringCallHold", bool),
            E("is_active_during_call_park", "isActiveDuringCallPark", bool),
            E("is_active_during_busy_camp_on", "isActiveDuringBusyCampOn", bool),
            E("message_selection", "messageSelection", str),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointModify,
                is_complex=True,
            ),
            E("audio_file", "audioFile", OCI.LabeledFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceGetAssignedUserListRequest(OCIRequest):
    """
    Get a list of users within a group that have a given Network Class of Service
    assigned.

    The response is either a ``GroupNetworkClassOfServiceGetAssignedUserListResponse()``
    or an ``ErorResponse()``. Replaced by:
    ``GroupNetworkClassOfServiceGetAssignedUserListRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupNetworkClassOfServiceGetAssignedUserListRequest21(OCIRequest):
    """
    Get a list of users within a group that have a given Network Class of Service
    assigned.

    The response is either a ``GroupNetworkClassOfServiceGetAssignedUserListResponse21()``
    or an ``ErorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        network_class_of_service: networkClassOfService
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    network_class_of_service: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "network_class_of_service",
                "networkClassOfService",
                str,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOfficeZoneGetAssignedUserListRequest(OCIRequest):
    """
    Get a list of users within a group that have a given Office Zone assigned.

    The response is either a ``GroupOfficeZoneGetAssignedUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        office_zone_name: officeZoneName
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    office_zone_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("office_zone_name", "officeZoneName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanCallMeNowModifyListRequest(OCIRequest):
    """
    Modify the Call Me Now call permissions for a group default and it's departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingCallingPlanCallMeNowPermissionsModify" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingCallingPlanCallMeNowDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanCallMeNowPermissionsModify,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanCallMeNowDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanOriginatingModifyListRequest(OCIRequest):
    """
    Modify the originating permissions for a group default and it's departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingCallingPlanOriginatingPermissionsModify" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingCallingPlanOriginatingDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanOriginatingPermissionsModify,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanOriginatingDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanRedirectedModifyListRequest(OCIRequest):
    """
    Modify the call forwarded/transferred permissions for a group default and it's
    departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingCallingPlanRedirectedPermissionsModify" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingCallingPlanRedirectedDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanRedirectedPermissionsModify,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanRedirectedDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanRedirectingModifyListRequest(OCIRequest):
    """
    Modify the initiating call forwards/transfer permissions for a group default and it's
    departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingCallingPlanRedirectingPermissionsModify" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingCallingPlanRedirectingDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanRedirectingPermissionsModify,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanRedirectingDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanTransferNumbersModifyListRequest(OCIRequest):
    """
    Modify the list of transfer numbers for a group default and it's departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_numbers: groupNumbers
        department_numbers: departmentNumbers
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_numbers: "OCI.OutgoingCallingPlanTransferNumbersModify" = attr.ib(default=None)
    department_numbers: List[OCI.OutgoingCallingPlanDepartmentTransferNumbersModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_numbers",
                "groupNumbers",
                OCI.OutgoingCallingPlanTransferNumbersModify,
                is_complex=True,
            ),
            E(
                "department_numbers",
                "departmentNumbers",
                OCI.OutgoingCallingPlanDepartmentTransferNumbersModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPhoneDirectoryGetListRequest(OCIRequest):
    """
    Request a table containing the phone directory for a group.

    If the specified group is part of an enterprise, the directory includes all users in
    the enterprise and all entries in the enterprise common phone list and the common
    phone list of the specified group.  If the specified group is part of a service
    provider, the directory includes all users in the group and all entries in the common
    phone list of the specified group.  It is possible to search by various criteria to
    restrict the number of rows returned.  Multiple search criteria are logically ANDed
    together.

    The response is either ``GroupPhoneDirectoryGetListResponse()`` or
    ``ErrorResponse()``. Replace by: ``GroupPhoneDirectoryGetListRequest17()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPhoneDirectoryGetListRequest17(OCIRequest):
    """
    Request a table containing the phone directory for a group.

    If the specified group is part of an enterprise, the directory includes all users in
    the enterprise and all entries in the enterprise common phone list and the common
    phone list of the specified group.  If the specified group is part of a service
    provider, the directory includes all users in the group and all entries in the common
    phone list of the specified group.  It is possible to search by various criteria to
    restrict the number of rows returned.  Multiple search criteria are logically ANDed
    together.

    The response is either ``GroupPhoneDirectoryGetListResponse17()`` or
    ``ErrorResponse()``. Replaced by: ``GroupPhoneDirectoryGetListRequest18()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPhoneDirectoryGetListRequest17sp3(OCIRequest):
    """
    Request a table containing the phone directory for a group.

    If the specified group is part of an enterprise, the directory includes all users in
    the enterprise and all entries in the enterprise common phone list and the common
    phone list of the specified group.  If the specified group is part of a service
    provider, the directory includes all users in the group and all entries in the common
    phone list of the specified group.  It is possible to search by various criteria to
    restrict the number of rows returned.  Multiple search criteria are logically ANDed
    together.

    The response is either ``GroupPhoneDirectoryGetListResponse17sp3()`` or
    ``ErrorResponse()``. Replaced by: ``GroupPhoneDirectoryGetListRequest18()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_imp_id: searchCriteriaImpId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPhoneDirectoryGetListRequest18(OCIRequest):
    """
    Request a table containing the phone directory for a group.

    If the specified group is part of an enterprise, the directory includes all users in
    the enterprise and all entries in the enterprise common phone list and the common
    phone list of the specified group.  If the specified group is part of a service
    provider, the directory includes all users in the group and all entries in the common
    phone list of the specified group.  It is possible to search by various criteria to
    restrict the number of rows returned.  Multiple search criteria are logically ANDed
    together.

    The response is either ``GroupPhoneDirectoryGetListResponse18()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        is_extended_info_requested: isExtendedInfoRequested
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_imp_id: searchCriteriaImpId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    is_extended_info_requested: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "is_extended_info_requested",
                "isExtendedInfoRequested",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPreAlertingAnnouncementModifyRequest(OCIRequest):
    """
    Modify the group level pre-alerting service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        announcement_interruption: announcementInterruption
        interruption_digit_sequence: interruptionDigitSequence
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    announcement_interruption: str = attr.ib(default=None)
    interruption_digit_sequence: str = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("announcement_interruption", "announcementInterruption", str),
            E("interruption_digit_sequence", "interruptionDigitSequence", str),
            E("audio_selection", "audioSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_selection", "videoSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupPreAlertingAnnouncementModifyRequest20(OCIRequest):
    """
    Modify the group level pre-alerting service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        announcement_interruption: announcementInterruption
        interruption_digit_sequence: interruptionDigitSequence
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    announcement_interruption: str = attr.ib(default=None)
    interruption_digit_sequence: str = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource20" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("announcement_interruption", "announcementInterruption", str),
            E("interruption_digit_sequence", "interruptionDigitSequence", str),
            E("audio_selection", "audioSelection", str),
            E(
                "audio_file",
                "audioFile",
                OCI.ExtendedMediaFileResource20,
                is_complex=True,
            ),
            E("video_selection", "videoSelection", str),
            E(
                "video_file",
                "videoFile",
                OCI.ExtendedMediaFileResource20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointAddInstanceRequest(OCIRequest):
    """
    Add a Route Point instance to a group.

    The Route Point is a Call Center queue that performs the same function but allows an
    external system to perform the distribution of calls instead of making those decisions
    itself.  The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        queue_length: queueLength
        no_answer_timeout_rings: noAnswerTimeoutRings
        enable_video: enableVideo
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileCallCenter" = attr.ib()
    network_class_of_service: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib()
    internal_preferred_audio_codec: str = attr.ib()
    queue_length: int = attr.ib()
    no_answer_timeout_rings: int = attr.ib()
    enable_video: bool = attr.ib()
    play_ringing_when_offering_call: bool = attr.ib()
    override_agent_wrap_up_time: bool = attr.ib()
    wrap_up_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib()
    agent_state_after_call: str = attr.ib()
    agent_unavailable_code: str = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib()
    force_delivery_wait_time_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileCallCenter,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "external_preferred_audio_codec",
                "externalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E(
                "internal_preferred_audio_codec",
                "internalPreferredAudioCodec",
                str,
                is_required=True,
            ),
            E("queue_length", "queueLength", int, is_required=True),
            E("no_answer_timeout_rings", "noAnswerTimeoutRings", int, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E(
                "play_ringing_when_offering_call",
                "playRingingWhenOfferingCall",
                bool,
                is_required=True,
            ),
            E(
                "override_agent_wrap_up_time",
                "overrideAgentWrapUpTime",
                bool,
                is_required=True,
            ),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
                is_required=True,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str, is_required=True),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool, is_required=True),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointForcedForwardingModifyRequest(OCIRequest):
    """
    Modify a route point's forced forwarding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    play_announcement_before_forwarding: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointForcedForwardingModifyRequest20(OCIRequest):
    """
    Modify a route point's forced forwarding settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        is_active: isActive
        forward_to_phone_number: forwardToPhoneNumber
        play_announcement_before_forwarding: playAnnouncementBeforeForwarding
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    play_announcement_before_forwarding: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "play_announcement_before_forwarding",
                "playAnnouncementBeforeForwarding",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointHolidayServiceModifyRequest(OCIRequest):
    """
    Modify a route point's holiday service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    holiday_schedule: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("holiday_schedule", "holidaySchedule", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointHolidayServiceModifyRequest17sp1(OCIRequest):
    """
    Modify a route point's holiday service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointHolidayServiceModifyRequest20(OCIRequest):
    """
    Modify a route point's holiday service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        holiday_schedule: holidaySchedule
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyInstanceRequest(OCIRequest):
    """
    Request to modify a Route Point instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        external_preferred_audio_codec: externalPreferredAudioCodec
        internal_preferred_audio_codec: internalPreferredAudioCodec
        queue_length: queueLength
        no_answer_timeout_rings: noAnswerTimeoutRings
        enable_video: enableVideo
        play_ringing_when_offering_call: playRingingWhenOfferingCall
        override_agent_wrap_up_time: overrideAgentWrapUpTime
        wrap_up_seconds: wrapUpSeconds
        enable_automatic_state_change_for_agents: enableAutomaticStateChangeForAgents
        agent_state_after_call: agentStateAfterCall
        agent_unavailable_code: agentUnavailableCode
        force_delivery_of_calls: forceDeliveryOfCalls
        force_delivery_wait_time_seconds: forceDeliveryWaitTimeSeconds
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)
    external_preferred_audio_codec: str = attr.ib(default=None)
    internal_preferred_audio_codec: str = attr.ib(default=None)
    queue_length: int = attr.ib(default=None)
    no_answer_timeout_rings: int = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    play_ringing_when_offering_call: bool = attr.ib(default=None)
    override_agent_wrap_up_time: bool = attr.ib(default=None)
    wrap_up_seconds: int = attr.ib(default=None)
    enable_automatic_state_change_for_agents: bool = attr.ib(default=None)
    agent_state_after_call: str = attr.ib(default=None)
    agent_unavailable_code: str = attr.ib(default=None)
    force_delivery_of_calls: bool = attr.ib(default=None)
    force_delivery_wait_time_seconds: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E("external_preferred_audio_codec", "externalPreferredAudioCodec", str),
            E("internal_preferred_audio_codec", "internalPreferredAudioCodec", str),
            E("queue_length", "queueLength", int),
            E("no_answer_timeout_rings", "noAnswerTimeoutRings", int),
            E("enable_video", "enableVideo", bool),
            E("play_ringing_when_offering_call", "playRingingWhenOfferingCall", bool),
            E("override_agent_wrap_up_time", "overrideAgentWrapUpTime", bool),
            E("wrap_up_seconds", "wrapUpSeconds", int),
            E(
                "enable_automatic_state_change_for_agents",
                "enableAutomaticStateChangeForAgents",
                bool,
            ),
            E("agent_state_after_call", "agentStateAfterCall", str),
            E("agent_unavailable_code", "agentUnavailableCode", str),
            E("force_delivery_of_calls", "forceDeliveryOfCalls", bool),
            E("force_delivery_wait_time_seconds", "forceDeliveryWaitTimeSeconds", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointNightServiceModifyRequest(OCIRequest):
    """
    Modify a route point's night service settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    business_hours: str = attr.ib(default=None)
    force_night_service: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_announcement_mode: str = attr.ib(default=None)
    manual_audio_message_selection: str = attr.ib(default=None)
    manual_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_video_message_selection: str = attr.ib(default=None)
    manual_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("business_hours", "businessHours", str),
            E("force_night_service", "forceNightService", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_announcement_mode", "manualAnnouncementMode", str),
            E("manual_audio_message_selection", "manualAudioMessageSelection", str),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_video_message_selection", "manualVideoMessageSelection", str),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointNightServiceModifyRequest17sp1(OCIRequest):
    """
    Modify a route point's night service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    force_night_service: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_announcement_mode: str = attr.ib(default=None)
    manual_audio_message_selection: str = attr.ib(default=None)
    manual_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    manual_video_message_selection: str = attr.ib(default=None)
    manual_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_announcement_mode", "manualAnnouncementMode", str),
            E("manual_audio_message_selection", "manualAudioMessageSelection", str),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("manual_video_message_selection", "manualVideoMessageSelection", str),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointNightServiceModifyRequest20(OCIRequest):
    """
    Modify a route point's night service settings.

    Only Group and Enterprise level schedules are accepted.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        business_hours: businessHours
        force_night_service: forceNightService
        transfer_phone_number: transferPhoneNumber
        play_announcement_before_action: playAnnouncementBeforeAction
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
        manual_announcement_mode: manualAnnouncementMode
        manual_audio_message_selection: manualAudioMessageSelection
        manual_audio_url_list: manualAudioUrlList
        manual_audio_file_list: manualAudioFileList
        manual_video_message_selection: manualVideoMessageSelection
        manual_video_url_list: manualVideoUrlList
        manual_video_file_list: manualVideoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    force_night_service: bool = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    play_announcement_before_action: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    manual_announcement_mode: str = attr.ib(default=None)
    manual_audio_message_selection: str = attr.ib(default=None)
    manual_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    manual_video_message_selection: str = attr.ib(default=None)
    manual_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    manual_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E("force_night_service", "forceNightService", bool),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("play_announcement_before_action", "playAnnouncementBeforeAction", bool),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("manual_announcement_mode", "manualAnnouncementMode", str),
            E("manual_audio_message_selection", "manualAudioMessageSelection", str),
            E(
                "manual_audio_url_list",
                "manualAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_audio_file_list",
                "manualAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("manual_video_message_selection", "manualVideoMessageSelection", str),
            E(
                "manual_video_url_list",
                "manualVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "manual_video_file_list",
                "manualVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointOverflowModifyRequest(OCIRequest):
    """
    Modify a route point's overflow settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    overflow_after_timeout: bool = attr.ib(default=None)
    timeout_seconds: int = attr.ib(default=None)
    play_announcement_before_overflow_processing: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool),
            E("timeout_seconds", "timeoutSeconds", int),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointOverflowModifyRequest20(OCIRequest):
    """
    Modify a route point's overflow settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        action: action
        transfer_phone_number: transferPhoneNumber
        overflow_after_timeout: overflowAfterTimeout
        timeout_seconds: timeoutSeconds
        play_announcement_before_overflow_processing:
            playAnnouncementBeforeOverflowProcessing
        audio_message_selection: audioMessageSelection
        audio_url_list: audioUrlList
        audio_file_list: audioFileList
        video_message_selection: videoMessageSelection
        video_url_list: videoUrlList
        video_file_list: videoFileList
    """

    service_user_id: str = attr.ib()
    action: str = attr.ib(default=None)
    transfer_phone_number: str = attr.ib(default=None)
    overflow_after_timeout: bool = attr.ib(default=None)
    timeout_seconds: int = attr.ib(default=None)
    play_announcement_before_overflow_processing: bool = attr.ib(default=None)
    audio_message_selection: str = attr.ib(default=None)
    audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    video_message_selection: str = attr.ib(default=None)
    video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("action", "action", str),
            E("transfer_phone_number", "transferPhoneNumber", str),
            E("overflow_after_timeout", "overflowAfterTimeout", bool),
            E("timeout_seconds", "timeoutSeconds", int),
            E(
                "play_announcement_before_overflow_processing",
                "playAnnouncementBeforeOverflowProcessing",
                bool,
            ),
            E("audio_message_selection", "audioMessageSelection", str),
            E(
                "audio_url_list",
                "audioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "audio_file_list",
                "audioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("video_message_selection", "videoMessageSelection", str),
            E(
                "video_url_list",
                "videoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "video_file_list",
                "videoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSeriesCompletionGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to a Series Completion group.

    The available user list for a new Series Completion group can be obtained by not
    setting the name.

    The response is either ``GroupSeriesCompletionGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib(default=None)
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupServiceModifyAuthorizationListRequest(OCIRequest):
    """
    Requests to change the group's service authorization status.

    The boolean flags are used to authorize or unauthorize services and packs.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_pack_authorization: servicePackAuthorization
        group_service_authorization: groupServiceAuthorization
        user_service_authorization: userServiceAuthorization
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_pack_authorization: List[OCI.ServicePackAuthorization] = attr.ib(default=None)
    group_service_authorization: List[OCI.GroupServiceAuthorization] = attr.ib(default=None)
    user_service_authorization: List[OCI.UserServiceAuthorization] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "service_pack_authorization",
                "servicePackAuthorization",
                OCI.ServicePackAuthorization,
                is_complex=True,
                is_array=True,
            ),
            E(
                "group_service_authorization",
                "groupServiceAuthorization",
                OCI.GroupServiceAuthorization,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_service_authorization",
                "userServiceAuthorization",
                OCI.UserServiceAuthorization,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupSessionAdmissionControlGroupModifyRequest(OCIRequest):
    """
    Request to modify a session admission control group for the group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        become_default_group: becomeDefaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        device_list: deviceList
        block_emergency_and_repair_calls_due_to_sac_limits:
            blockEmergencyAndRepairCallsDueToSACLimits
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    max_session: int = attr.ib(default=None)
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    reserved_session: int = attr.ib(default=None)
    reserved_user_originating_sessions: int = attr.ib(default=None)
    reserved_user_terminating_sessions: int = attr.ib(default=None)
    become_default_group: bool = attr.ib(default=None)
    count_intra_sac_group_sessions: bool = attr.ib(default=None)
    device_list: "OCI.ReplacementDeviceList" = attr.ib(default=None)
    block_emergency_and_repair_calls_due_to_sac_limits: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("max_session", "maxSession", int),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("become_default_group", "becomeDefaultGroup", bool),
            E("count_intra_sac_group_sessions", "countIntraSACGroupSessions", bool),
            E("device_list", "deviceList", OCI.ReplacementDeviceList, is_complex=True),
            E(
                "block_emergency_and_repair_calls_due_to_sac_limits",
                "blockEmergencyAndRepairCallsDueToSACLimits",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest14(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The domain is required in the serviceUserId.  The publicUserIdentity in the
    ServiceInstanceAddProfile is not allowed for trunk groups.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        access_device_endpoint: accessDeviceEndpoint
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileTrunkGroup" = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileTrunkGroup,
                is_complex=True,
                is_required=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
            ),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest14sp1(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The domain is required in the serviceUserId.  The publicUserIdentity in the
    ServiceInstanceAddProfile is not allowed for trunk groups.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        access_device_endpoint: accessDeviceEndpoint
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_id: capacityExceededRerouteTrunkGroupId
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_id:
            unreachableDestinationRerouteTrunkGroupId
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfileTrunkGroup" = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_id: str = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_id: str = attr.ib(default=None)
    unreachable_destination_trap_initial_calls: int = attr.ib()
    unreachable_destination_trap_offset_calls: int = attr.ib()
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfileTrunkGroup,
                is_complex=True,
                is_required=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
            ),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_id",
                "capacityExceededRerouteTrunkGroupId",
                str,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_id",
                "unreachableDestinationRerouteTrunkGroupId",
                str,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest14sp4(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    unreachable_destination_trap_initial_calls: int = attr.ib()
    unreachable_destination_trap_offset_calls: int = attr.ib()
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("pilot_user", "pilotUser", OCI.TrunkGroupPilotUser, is_complex=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest14sp9(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        use_pilot_user_calling_line_identity: usePilotUserCallingLineIdentity
        use_pilot_user_charge_number: usePilotUserChargeNumber
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    unreachable_destination_trap_initial_calls: int = attr.ib()
    unreachable_destination_trap_offset_calls: int = attr.ib()
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    use_pilot_user_calling_line_identity: bool = attr.ib()
    use_pilot_user_charge_number: bool = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("pilot_user", "pilotUser", OCI.TrunkGroupPilotUser, is_complex=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "use_pilot_user_calling_line_identity",
                "usePilotUserCallingLineIdentity",
                bool,
                is_required=True,
            ),
            E(
                "use_pilot_user_charge_number",
                "usePilotUserChargeNumber",
                bool,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest15(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("pilot_user", "pilotUser", OCI.TrunkGroupPilotUser, is_complex=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest15sp2(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("pilot_user", "pilotUser", OCI.TrunkGroupPilotUser, is_complex=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest17(OCIRequest):
    """
    Replaced By ``GroupTrunkGroupAddInstanceRequest17sp4()`` Add a Trunk Group instance to
    a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("pilot_user", "pilotUser", OCI.TrunkGroupPilotUser, is_complex=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest17sp3(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``GroupTrunkGroupAddInstanceRequest17sp4()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib()
    prefix_enabled: bool = attr.ib()
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib()
    send_continuous_options_message: bool = attr.ib()
    continuous_options_sending_interval_seconds: int = attr.ib()
    failure_options_sending_interval_seconds: int = attr.ib()
    failure_threshold_counter: int = attr.ib()
    success_threshold_counter: int = attr.ib()
    invite_failure_threshold_counter: int = attr.ib()
    invite_failure_threshold_window_seconds: int = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("pilot_user", "pilotUser", OCI.TrunkGroupPilotUser, is_complex=True),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest17sp4(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupMultipleContactPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib()
    allow_termination_to_dtg_identity: bool = attr.ib()
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    include_trunk_group_identity_for_network_calls: bool = attr.ib()
    include_otg_identity_for_network_calls: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib()
    prefix_enabled: bool = attr.ib()
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib()
    send_continuous_options_message: bool = attr.ib()
    continuous_options_sending_interval_seconds: int = attr.ib()
    failure_options_sending_interval_seconds: int = attr.ib()
    failure_threshold_counter: int = attr.ib()
    success_threshold_counter: int = attr.ib()
    invite_failure_threshold_counter: int = attr.ib()
    invite_failure_threshold_window_seconds: int = attr.ib()
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib()
    use_system_calling_line_asserted_identity_policy: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "pilot_user",
                "pilotUser",
                OCI.TrunkGroupMultipleContactPilotUser,
                is_complex=True,
            ),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest19(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The command will fail if enableNetworkAddressIdentity is set to true and administrator
    is not System/Provisioning level administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by
    ``GroupTrunkGroupAddInstanceRequest19sp1()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_policy: pilotUserCallingLineIdentityPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupMultipleContactPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib()
    allow_termination_to_dtg_identity: bool = attr.ib()
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    include_trunk_group_identity_for_network_calls: bool = attr.ib()
    include_otg_identity_for_network_calls: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib()
    prefix_enabled: bool = attr.ib()
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib()
    send_continuous_options_message: bool = attr.ib()
    continuous_options_sending_interval_seconds: int = attr.ib()
    failure_options_sending_interval_seconds: int = attr.ib()
    failure_threshold_counter: int = attr.ib()
    success_threshold_counter: int = attr.ib()
    invite_failure_threshold_counter: int = attr.ib()
    invite_failure_threshold_window_seconds: int = attr.ib()
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib()
    use_system_calling_line_asserted_identity_policy: bool = attr.ib()
    pilot_user_call_optimization_policy: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "pilot_user",
                "pilotUser",
                OCI.TrunkGroupMultipleContactPilotUser,
                is_complex=True,
            ),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_policy",
                "pilotUserCallingLineIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest19sp1(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The command will fail if enableNetworkAddressIdentity is set to true and administrator
    is not System/Provisioning level administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``GroupTrunkGroupAddInstanceRequest20sp1()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
        pilot_user_network_class_of_service: pilotUserNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupMultipleContactPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib()
    allow_termination_to_dtg_identity: bool = attr.ib()
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    include_trunk_group_identity_for_network_calls: bool = attr.ib()
    include_otg_identity_for_network_calls: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_for_external_calls_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib()
    prefix_enabled: bool = attr.ib()
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib()
    send_continuous_options_message: bool = attr.ib()
    continuous_options_sending_interval_seconds: int = attr.ib()
    failure_options_sending_interval_seconds: int = attr.ib()
    failure_threshold_counter: int = attr.ib()
    success_threshold_counter: int = attr.ib()
    invite_failure_threshold_counter: int = attr.ib()
    invite_failure_threshold_window_seconds: int = attr.ib()
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib()
    use_system_calling_line_asserted_identity_policy: bool = attr.ib()
    pilot_user_call_optimization_policy: str = attr.ib()
    clid_source_for_screened_calls_policy: str = attr.ib()
    use_system_clid_source_for_screened_calls_policy: bool = attr.ib()
    user_lookup_policy: str = attr.ib()
    use_system_user_lookup_policy: bool = attr.ib()
    pilot_user_calling_line_identity_for_emergency_calls_policy: str = attr.ib()
    pilot_user_network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "pilot_user",
                "pilotUser",
                OCI.TrunkGroupMultipleContactPilotUser,
                is_complex=True,
            ),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
            E(
                "use_system_user_lookup_policy",
                "useSystemUserLookupPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_network_class_of_service",
                "pilotUserNetworkClassOfService",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest20sp1(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The command will fail if enableNetworkAddressIdentity is set to true and administrator
    is not System/Provisioning level administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Replaced by:
    ``GroupTrunkGroupAddInstanceRequest21()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
        pilot_user_network_class_of_service: pilotUserNetworkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupMultipleContactPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib()
    allow_termination_to_dtg_identity: bool = attr.ib()
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    include_trunk_group_identity_for_network_calls: bool = attr.ib()
    include_otg_identity_for_network_calls: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_for_external_calls_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib()
    prefix_enabled: bool = attr.ib()
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib()
    send_continuous_options_message: bool = attr.ib()
    continuous_options_sending_interval_seconds: int = attr.ib()
    failure_options_sending_interval_seconds: int = attr.ib()
    failure_threshold_counter: int = attr.ib()
    success_threshold_counter: int = attr.ib()
    invite_failure_threshold_counter: int = attr.ib()
    invite_failure_threshold_window_seconds: int = attr.ib()
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib()
    use_system_calling_line_asserted_identity_policy: bool = attr.ib()
    pilot_user_call_optimization_policy: str = attr.ib()
    clid_source_for_screened_calls_policy: str = attr.ib()
    use_system_clid_source_for_screened_calls_policy: bool = attr.ib()
    user_lookup_policy: str = attr.ib()
    use_system_user_lookup_policy: bool = attr.ib()
    pilot_user_calling_line_identity_for_emergency_calls_policy: str = attr.ib()
    pilot_user_network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "pilot_user",
                "pilotUser",
                OCI.TrunkGroupMultipleContactPilotUser,
                is_complex=True,
            ),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
            E(
                "use_system_user_lookup_policy",
                "useSystemUserLookupPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_network_class_of_service",
                "pilotUserNetworkClassOfService",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupAddInstanceRequest21(OCIRequest):
    """
    Add a Trunk Group instance to a group.

    The command will fail if enableNetworkAddressIdentity is set to true and administrator
    is not System/Provisioning level administrator.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Following
    attributes are only used in IMS mode: implicitRegistrationSetSupportPolicy
    useSystemImplicitRegistrationSetSupportPolicy
    sipIdentityForPilotAndProxyTrunkModesPolicy
    useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        pilot_user: pilotUser
        department: department
        access_device: accessDevice
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_key: capacityExceededRerouteTrunkGroupKey
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_key:
            unreachableDestinationRerouteTrunkGroupKey
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
        hosted_user_id: hostedUserId
        trunk_group_identity: trunkGroupIdentity
        otg_dtg_identity: otgDtgIdentity
        allow_termination_to_trunk_group_identity: allowTerminationToTrunkGroupIdentity
        allow_termination_to_dtg_identity: allowTerminationToDtgIdentity
        include_trunk_group_identity: includeTrunkGroupIdentity
        include_dtg_identity: includeDtgIdentity
        include_trunk_group_identity_for_network_calls:
            includeTrunkGroupIdentityForNetworkCalls
        include_otg_identity_for_network_calls: includeOtgIdentityForNetworkCalls
        enable_network_address_identity: enableNetworkAddressIdentity
        allow_unscreened_calls: allowUnscreenedCalls
        allow_unscreened_emergency_calls: allowUnscreenedEmergencyCalls
        pilot_user_calling_line_identity_for_external_calls_policy:
            pilotUserCallingLineIdentityForExternalCallsPolicy
        pilot_user_charge_number_policy: pilotUserChargeNumberPolicy
        call_forwarding_always_action: callForwardingAlwaysAction
        call_forwarding_always_forward_address: callForwardingAlwaysForwardAddress
        call_forwarding_always_reroute_trunk_group_key:
            callForwardingAlwaysRerouteTrunkGroupKey
        peering_domain: peeringDomain
        route_to_peering_domain: routeToPeeringDomain
        prefix_enabled: prefixEnabled
        prefix: prefix
        stateful_rerouting_enabled: statefulReroutingEnabled
        send_continuous_options_message: sendContinuousOptionsMessage
        continuous_options_sending_interval_seconds:
            continuousOptionsSendingIntervalSeconds
        failure_options_sending_interval_seconds: failureOptionsSendingIntervalSeconds
        failure_threshold_counter: failureThresholdCounter
        success_threshold_counter: successThresholdCounter
        invite_failure_threshold_counter: inviteFailureThresholdCounter
        invite_failure_threshold_window_seconds: inviteFailureThresholdWindowSeconds
        pilot_user_calling_line_asserted_identity_policy:
            pilotUserCallingLineAssertedIdentityPolicy
        use_system_calling_line_asserted_identity_policy:
            useSystemCallingLineAssertedIdentityPolicy
        pilot_user_call_optimization_policy: pilotUserCallOptimizationPolicy
        clid_source_for_screened_calls_policy: clidSourceForScreenedCallsPolicy
        use_system_clid_source_for_screened_calls_policy:
            useSystemCLIDSourceForScreenedCallsPolicy
        user_lookup_policy: userLookupPolicy
        use_system_user_lookup_policy: useSystemUserLookupPolicy
        pilot_user_calling_line_identity_for_emergency_calls_policy:
            pilotUserCallingLineIdentityForEmergencyCallsPolicy
        pilot_user_network_class_of_service: pilotUserNetworkClassOfService
        implicit_registration_set_support_policy: implicitRegistrationSetSupportPolicy
        use_system_implicit_registration_set_support_policy:
            useSystemImplicitRegistrationSetSupportPolicy
        sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            sipIdentityForPilotAndProxyTrunkModesPolicy
        use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy:
            useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy
        use_system_support_connected_identity_policy:
            useSystemSupportConnectedIdentityPolicy
        support_connected_identity_policy: supportConnectedIdentityPolicy
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    pilot_user: "OCI.TrunkGroupMultipleContactPilotUser" = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    access_device: "OCI.AccessDevice" = attr.ib(default=None)
    max_active_calls: int = attr.ib()
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib()
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib()
    capacity_exceeded_trap_offset_calls: int = attr.ib()
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    invitation_timeout: int = attr.ib()
    require_authentication: bool = attr.ib()
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)
    hosted_user_id: List[str] = attr.ib(default=None)
    trunk_group_identity: str = attr.ib(default=None)
    otg_dtg_identity: str = attr.ib(default=None)
    allow_termination_to_trunk_group_identity: bool = attr.ib()
    allow_termination_to_dtg_identity: bool = attr.ib()
    include_trunk_group_identity: bool = attr.ib()
    include_dtg_identity: bool = attr.ib()
    include_trunk_group_identity_for_network_calls: bool = attr.ib()
    include_otg_identity_for_network_calls: bool = attr.ib()
    enable_network_address_identity: bool = attr.ib()
    allow_unscreened_calls: bool = attr.ib()
    allow_unscreened_emergency_calls: bool = attr.ib()
    pilot_user_calling_line_identity_for_external_calls_policy: str = attr.ib()
    pilot_user_charge_number_policy: str = attr.ib()
    call_forwarding_always_action: str = attr.ib(default=None)
    call_forwarding_always_forward_address: str = attr.ib(default=None)
    call_forwarding_always_reroute_trunk_group_key: "OCI.TrunkGroupKey" = attr.ib(default=None)
    peering_domain: str = attr.ib(default=None)
    route_to_peering_domain: bool = attr.ib()
    prefix_enabled: bool = attr.ib()
    prefix: str = attr.ib(default=None)
    stateful_rerouting_enabled: bool = attr.ib()
    send_continuous_options_message: bool = attr.ib()
    continuous_options_sending_interval_seconds: int = attr.ib()
    failure_options_sending_interval_seconds: int = attr.ib()
    failure_threshold_counter: int = attr.ib()
    success_threshold_counter: int = attr.ib()
    invite_failure_threshold_counter: int = attr.ib()
    invite_failure_threshold_window_seconds: int = attr.ib()
    pilot_user_calling_line_asserted_identity_policy: str = attr.ib()
    use_system_calling_line_asserted_identity_policy: bool = attr.ib()
    pilot_user_call_optimization_policy: str = attr.ib()
    clid_source_for_screened_calls_policy: str = attr.ib()
    use_system_clid_source_for_screened_calls_policy: bool = attr.ib()
    user_lookup_policy: str = attr.ib()
    use_system_user_lookup_policy: bool = attr.ib()
    pilot_user_calling_line_identity_for_emergency_calls_policy: str = attr.ib()
    pilot_user_network_class_of_service: str = attr.ib(default=None)
    implicit_registration_set_support_policy: str = attr.ib()
    use_system_implicit_registration_set_support_policy: bool = attr.ib()
    sip_identity_for_pilot_and_proxy_trunk_modes_policy: str = attr.ib()
    use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy: bool = attr.ib()
    use_system_support_connected_identity_policy: bool = attr.ib()
    support_connected_identity_policy: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E(
                "pilot_user",
                "pilotUser",
                OCI.TrunkGroupMultipleContactPilotUser,
                is_complex=True,
            ),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("access_device", "accessDevice", OCI.AccessDevice, is_complex=True),
            E("max_active_calls", "maxActiveCalls", int, is_required=True),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool, is_required=True),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_key",
                "capacityExceededRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
                is_required=True,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
                is_required=True,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_key",
                "unreachableDestinationRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("invitation_timeout", "invitationTimeout", int, is_required=True),
            E("require_authentication", "requireAuthentication", bool, is_required=True),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
            E("hosted_user_id", "hostedUserId", str, is_array=True),
            E("trunk_group_identity", "trunkGroupIdentity", str),
            E("otg_dtg_identity", "otgDtgIdentity", str),
            E(
                "allow_termination_to_trunk_group_identity",
                "allowTerminationToTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E(
                "allow_termination_to_dtg_identity",
                "allowTerminationToDtgIdentity",
                bool,
                is_required=True,
            ),
            E(
                "include_trunk_group_identity",
                "includeTrunkGroupIdentity",
                bool,
                is_required=True,
            ),
            E("include_dtg_identity", "includeDtgIdentity", bool, is_required=True),
            E(
                "include_trunk_group_identity_for_network_calls",
                "includeTrunkGroupIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "include_otg_identity_for_network_calls",
                "includeOtgIdentityForNetworkCalls",
                bool,
                is_required=True,
            ),
            E(
                "enable_network_address_identity",
                "enableNetworkAddressIdentity",
                bool,
                is_required=True,
            ),
            E("allow_unscreened_calls", "allowUnscreenedCalls", bool, is_required=True),
            E(
                "allow_unscreened_emergency_calls",
                "allowUnscreenedEmergencyCalls",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_external_calls_policy",
                "pilotUserCallingLineIdentityForExternalCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_charge_number_policy",
                "pilotUserChargeNumberPolicy",
                str,
                is_required=True,
            ),
            E("call_forwarding_always_action", "callForwardingAlwaysAction", str),
            E(
                "call_forwarding_always_forward_address",
                "callForwardingAlwaysForwardAddress",
                str,
            ),
            E(
                "call_forwarding_always_reroute_trunk_group_key",
                "callForwardingAlwaysRerouteTrunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
            ),
            E("peering_domain", "peeringDomain", str),
            E("route_to_peering_domain", "routeToPeeringDomain", bool, is_required=True),
            E("prefix_enabled", "prefixEnabled", bool, is_required=True),
            E("prefix", "prefix", str),
            E(
                "stateful_rerouting_enabled",
                "statefulReroutingEnabled",
                bool,
                is_required=True,
            ),
            E(
                "send_continuous_options_message",
                "sendContinuousOptionsMessage",
                bool,
                is_required=True,
            ),
            E(
                "continuous_options_sending_interval_seconds",
                "continuousOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_options_sending_interval_seconds",
                "failureOptionsSendingIntervalSeconds",
                int,
                is_required=True,
            ),
            E(
                "failure_threshold_counter",
                "failureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "success_threshold_counter",
                "successThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_counter",
                "inviteFailureThresholdCounter",
                int,
                is_required=True,
            ),
            E(
                "invite_failure_threshold_window_seconds",
                "inviteFailureThresholdWindowSeconds",
                int,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_asserted_identity_policy",
                "pilotUserCallingLineAssertedIdentityPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_calling_line_asserted_identity_policy",
                "useSystemCallingLineAssertedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_call_optimization_policy",
                "pilotUserCallOptimizationPolicy",
                str,
                is_required=True,
            ),
            E(
                "clid_source_for_screened_calls_policy",
                "clidSourceForScreenedCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_clid_source_for_screened_calls_policy",
                "useSystemCLIDSourceForScreenedCallsPolicy",
                bool,
                is_required=True,
            ),
            E("user_lookup_policy", "userLookupPolicy", str, is_required=True),
            E(
                "use_system_user_lookup_policy",
                "useSystemUserLookupPolicy",
                bool,
                is_required=True,
            ),
            E(
                "pilot_user_calling_line_identity_for_emergency_calls_policy",
                "pilotUserCallingLineIdentityForEmergencyCallsPolicy",
                str,
                is_required=True,
            ),
            E(
                "pilot_user_network_class_of_service",
                "pilotUserNetworkClassOfService",
                str,
            ),
            E(
                "implicit_registration_set_support_policy",
                "implicitRegistrationSetSupportPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_implicit_registration_set_support_policy",
                "useSystemImplicitRegistrationSetSupportPolicy",
                bool,
                is_required=True,
            ),
            E(
                "sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "sipIdentityForPilotAndProxyTrunkModesPolicy",
                str,
                is_required=True,
            ),
            E(
                "use_system_sip_identity_for_pilot_and_proxy_trunk_modes_policy",
                "useSystemSIPIdentityForPilotAndProxyTrunkModesPolicy",
                bool,
                is_required=True,
            ),
            E(
                "use_system_support_connected_identity_policy",
                "useSystemSupportConnectedIdentityPolicy",
                bool,
                is_required=True,
            ),
            E(
                "support_connected_identity_policy",
                "supportConnectedIdentityPolicy",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetAvailableHostedUserListRequest(OCIRequest):
    """
    Get a list of hosted users that can be assigned to a Trunk Group.

    The response is either ``GroupTrunkGroupGetAvailableHostedUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceUserListRequest(OCIRequest):
    """
    Get a list of user's on a Trunk Group Instance.

    The response is either a ``GroupTrunkGroupGetInstanceUserListResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupGetInstanceUserListRequest14sp4(OCIRequest):
    """
    Get a list of user's on a Trunk Group Instance.

    The response is either a ``GroupTrunkGroupGetInstanceUserListResponse14sp4()`` or an
    ``ErrorResponse()``.

    Attributes:
        trunk_group_key: trunkGroupKey
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    trunk_group_key: "OCI.TrunkGroupKey" = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "trunk_group_key",
                "trunkGroupKey",
                OCI.TrunkGroupKey,
                is_complex=True,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupTrunkGroupModifyInstanceRequest14(OCIRequest):
    """
    Modify a Trunk Group Instance in a group.

    The publicUserIdentity in the ServiceInstanceModifyProfile is not allowed for trunk
    groups.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        access_device_endpoint: accessDeviceEndpoint
        max_active_calls: maxActiveCalls
        max_incoming_calls: maxIncomingCalls
        max_outgoing_calls: maxOutgoingCalls
        enable_bursting: enableBursting
        bursting_max_active_calls: burstingMaxActiveCalls
        bursting_max_incoming_calls: burstingMaxIncomingCalls
        bursting_max_outgoing_calls: burstingMaxOutgoingCalls
        capacity_exceeded_action: capacityExceededAction
        capacity_exceeded_forward_address: capacityExceededForwardAddress
        capacity_exceeded_reroute_trunk_group_id: capacityExceededRerouteTrunkGroupId
        capacity_exceeded_trap_initial_calls: capacityExceededTrapInitialCalls
        capacity_exceeded_trap_offset_calls: capacityExceededTrapOffsetCalls
        unreachable_destination_action: unreachableDestinationAction
        unreachable_destination_forward_address: unreachableDestinationForwardAddress
        unreachable_destination_reroute_trunk_group_id:
            unreachableDestinationRerouteTrunkGroupId
        unreachable_destination_trap_initial_calls: unreachableDestinationTrapInitialCalls
        unreachable_destination_trap_offset_calls: unreachableDestinationTrapOffsetCalls
        invitation_timeout: invitationTimeout
        require_authentication: requireAuthentication
        sip_authentication_user_name: sipAuthenticationUserName
        sip_authentication_password: sipAuthenticationPassword
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfileTrunkGroup" = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceEndpointModify" = attr.ib(default=None)
    max_active_calls: int = attr.ib(default=None)
    max_incoming_calls: int = attr.ib(default=None)
    max_outgoing_calls: int = attr.ib(default=None)
    enable_bursting: bool = attr.ib(default=None)
    bursting_max_active_calls: int = attr.ib(default=None)
    bursting_max_incoming_calls: int = attr.ib(default=None)
    bursting_max_outgoing_calls: int = attr.ib(default=None)
    capacity_exceeded_action: str = attr.ib(default=None)
    capacity_exceeded_forward_address: str = attr.ib(default=None)
    capacity_exceeded_reroute_trunk_group_id: str = attr.ib(default=None)
    capacity_exceeded_trap_initial_calls: int = attr.ib(default=None)
    capacity_exceeded_trap_offset_calls: int = attr.ib(default=None)
    unreachable_destination_action: str = attr.ib(default=None)
    unreachable_destination_forward_address: str = attr.ib(default=None)
    unreachable_destination_reroute_trunk_group_id: str = attr.ib(default=None)
    unreachable_destination_trap_initial_calls: int = attr.ib(default=None)
    unreachable_destination_trap_offset_calls: int = attr.ib(default=None)
    invitation_timeout: int = attr.ib(default=None)
    require_authentication: bool = attr.ib(default=None)
    sip_authentication_user_name: str = attr.ib(default=None)
    sip_authentication_password: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfileTrunkGroup,
                is_complex=True,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointModify,
                is_complex=True,
            ),
            E("max_active_calls", "maxActiveCalls", int),
            E("max_incoming_calls", "maxIncomingCalls", int),
            E("max_outgoing_calls", "maxOutgoingCalls", int),
            E("enable_bursting", "enableBursting", bool),
            E("bursting_max_active_calls", "burstingMaxActiveCalls", int),
            E("bursting_max_incoming_calls", "burstingMaxIncomingCalls", int),
            E("bursting_max_outgoing_calls", "burstingMaxOutgoingCalls", int),
            E("capacity_exceeded_action", "capacityExceededAction", str),
            E(
                "capacity_exceeded_forward_address",
                "capacityExceededForwardAddress",
                str,
            ),
            E(
                "capacity_exceeded_reroute_trunk_group_id",
                "capacityExceededRerouteTrunkGroupId",
                str,
            ),
            E(
                "capacity_exceeded_trap_initial_calls",
                "capacityExceededTrapInitialCalls",
                int,
            ),
            E(
                "capacity_exceeded_trap_offset_calls",
                "capacityExceededTrapOffsetCalls",
                int,
            ),
            E("unreachable_destination_action", "unreachableDestinationAction", str),
            E(
                "unreachable_destination_forward_address",
                "unreachableDestinationForwardAddress",
                str,
            ),
            E(
                "unreachable_destination_reroute_trunk_group_id",
                "unreachableDestinationRerouteTrunkGroupId",
                str,
            ),
            E(
                "unreachable_destination_trap_initial_calls",
                "unreachableDestinationTrapInitialCalls",
                int,
            ),
            E(
                "unreachable_destination_trap_offset_calls",
                "unreachableDestinationTrapOffsetCalls",
                int,
            ),
            E("invitation_timeout", "invitationTimeout", int),
            E("require_authentication", "requireAuthentication", bool),
            E("sip_authentication_user_name", "sipAuthenticationUserName", str),
            E("sip_authentication_password", "sipAuthenticationPassword", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVirtualOnNetEnterpriseExtensionsAddUserRequest(OCIRequest):
    """
    Adds Virtual On-Net users to a Group.

    It is possible to add either: a single user, or a list of users, or a range of users,
    or any combination thereof.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        virtual_on_net_user: virtualOnNetUser
        virtual_on_net_user_range: virtualOnNetUserRange
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    virtual_on_net_user: List[OCI.VirtualOnNetUser] = attr.ib(default=None)
    virtual_on_net_user_range: "OCI.VirtualOnNetUserRange" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "virtual_on_net_user",
                "virtualOnNetUser",
                OCI.VirtualOnNetUser,
                is_complex=True,
                is_array=True,
            ),
            E(
                "virtual_on_net_user_range",
                "virtualOnNetUserRange",
                OCI.VirtualOnNetUserRange,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceMessagingGroupModifyVoicePortalRequest(OCIRequest):
    """
    Request to modify the group voice portal information for a voice messaging group.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_instance_profile: serviceInstanceProfile
        is_active: isActive
        enable_extended_scope: enableExtendedScope
        allow_identification_by_phone_number_or_voice_mail_aliases_on_login:
            allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin
        use_voice_portal_wizard: useVoicePortalWizard
        voice_portal_external_routing_scope: voicePortalExternalRoutingScope
        use_external_routing: useExternalRouting
        external_routing_address: externalRoutingAddress
        home_zone_name: homeZoneName
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    is_active: bool = attr.ib(default=None)
    enable_extended_scope: bool = attr.ib(default=None)
    allow_identification_by_phone_number_or_voice_mail_aliases_on_login: bool = attr.ib(default=None)
    use_voice_portal_wizard: bool = attr.ib(default=None)
    voice_portal_external_routing_scope: str = attr.ib(default=None)
    use_external_routing: bool = attr.ib(default=None)
    external_routing_address: str = attr.ib(default=None)
    home_zone_name: str = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("is_active", "isActive", bool),
            E("enable_extended_scope", "enableExtendedScope", bool),
            E(
                "allow_identification_by_phone_number_or_voice_mail_aliases_on_login",
                "allowIdentificationByPhoneNumberOrVoiceMailAliasesOnLogin",
                bool,
            ),
            E("use_voice_portal_wizard", "useVoicePortalWizard", bool),
            E(
                "voice_portal_external_routing_scope",
                "voicePortalExternalRoutingScope",
                str,
            ),
            E("use_external_routing", "useExternalRouting", bool),
            E("external_routing_address", "externalRoutingAddress", str),
            E("home_zone_name", "homeZoneName", str),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceXmlAddInstanceRequest(OCIRequest):
    """
    Add a VoiceXML instance to a group.

    The domain is required in the serviceUserId.  For a valid voiceXml instance to work
    properly, a device with Static Registration is expected with a valid contact.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        access_device_endpoint: accessDeviceEndpoint
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    network_class_of_service: str = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupVoiceXmlModifyInstanceRequest(OCIRequest):
    """
    Request to modify a VoiceXML instance.

    For a valid voiceXml instance to work properly, a device with Static Registration is
    expected with a valid contact.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        network_class_of_service: networkClassOfService
        access_device_endpoint: accessDeviceEndpoint
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceEndpointModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderAccessDeviceGetUserListRequest(OCIRequest):
    """
    Requests the list of users on a specified device.

    The response is either ``ServiceProviderAccessDeviceGetResponse()`` or
    ``ErrorResponse()``. The following elements are only used in HSS data mode and ignored
    in AS data mode: searchCriteriaAccessDeviceEndpointPrivateIdentity

    Attributes:
        service_provider_id: serviceProviderId
        device_name: deviceName
        response_size_limit: responseSizeLimit
        search_criteria_line_port_user_part: searchCriteriaLinePortUserPart
        search_criteria_line_port_domain: searchCriteriaLinePortDomain
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_exact_endpoint_type: searchCriteriaExactEndpointType
        search_criteria_exact_user_type: searchCriteriaExactUserType
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_port_number: searchCriteriaExactPortNumber
        search_criteria_access_device_endpoint_private_identity:
            searchCriteriaAccessDeviceEndpointPrivateIdentity
    """

    service_provider_id: str = attr.ib()
    device_name: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_line_port_user_part: List[OCI.SearchCriteriaLinePortUserPart] = attr.ib(default=None)
    search_criteria_line_port_domain: List[OCI.SearchCriteriaLinePortDomain] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_endpoint_type: "OCI.SearchCriteriaExactEndpointType" = attr.ib(default=None)
    search_criteria_exact_user_type: "OCI.SearchCriteriaExactUserType" = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_port_number: "OCI.SearchCriteriaExactPortNumber" = attr.ib(default=None)
    search_criteria_access_device_endpoint_private_identity: List[OCI.SearchCriteriaAccessDeviceEndpointPrivateIdentity] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("device_name", "deviceName", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_line_port_user_part",
                "searchCriteriaLinePortUserPart",
                OCI.SearchCriteriaLinePortUserPart,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_domain",
                "searchCriteriaLinePortDomain",
                OCI.SearchCriteriaLinePortDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_endpoint_type",
                "searchCriteriaExactEndpointType",
                OCI.SearchCriteriaExactEndpointType,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_type",
                "searchCriteriaExactUserType",
                OCI.SearchCriteriaExactUserType,
                is_complex=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_port_number",
                "searchCriteriaExactPortNumber",
                OCI.SearchCriteriaExactPortNumber,
                is_complex=True,
            ),
            E(
                "search_criteria_access_device_endpoint_private_identity",
                "searchCriteriaAccessDeviceEndpointPrivateIdentity",
                OCI.SearchCriteriaAccessDeviceEndpointPrivateIdentity,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderCommunicationBarringProfileModifyRequest(OCIRequest):
    """
    Modify an existing Communication Barring Profile.

    The priorities for OriginatingRules, RedirectingRules, CallMeNowRules and
    IncomingRules are requantized to consecutive integers as part of the modify.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callMeNowDefaultAction
    callMeNowDefaultCallTimeout callMeNowRule applyToAttendedCallTransfers

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        new_name: newName
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        become_default: becomeDefault
        apply_to_attended_call_transfers: applyToAttendedCallTransfers
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib(default=None)
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: "OCI.ServiceProviderReplacementCommunicationBarringHierarchicalOriginatingRuleList" = attr.ib(default=None)
    redirecting_default_action: str = attr.ib(default=None)
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: "OCI.ServiceProviderReplacementCommunicationBarringHierarchicalRedirectingRuleList" = attr.ib(default=None)
    call_me_now_default_action: str = attr.ib(default=None)
    call_me_now_default_call_timeout: int = attr.ib(default=None)
    call_me_now_rule: "OCI.ServiceProviderReplacementCommunicationBarringHierarchicalCallMeNowRuleList" = attr.ib(default=None)
    incoming_default_action: str = attr.ib(default=None)
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: "OCI.ReplacementCommunicationBarringIncomingRuleList19sp1" = attr.ib(default=None)
    become_default: bool = attr.ib(default=None)
    apply_to_attended_call_transfers: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("originating_default_action", "originatingDefaultAction", str),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ServiceProviderReplacementCommunicationBarringHierarchicalOriginatingRuleList,
                is_complex=True,
            ),
            E("redirecting_default_action", "redirectingDefaultAction", str),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ServiceProviderReplacementCommunicationBarringHierarchicalRedirectingRuleList,
                is_complex=True,
            ),
            E("call_me_now_default_action", "callMeNowDefaultAction", str),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.ServiceProviderReplacementCommunicationBarringHierarchicalCallMeNowRuleList,
                is_complex=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.ReplacementCommunicationBarringIncomingRuleList19sp1,
                is_complex=True,
            ),
            E("become_default", "becomeDefault", bool),
            E("apply_to_attended_call_transfers", "applyToAttendedCallTransfers", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderEndpointGetListRequest(OCIRequest):
    """
    Request to search endpoints in the service provider/enterprise.

    The response is either ``ServiceProviderEndpointGetListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_group_id: searchCriteriaGroupId
        search_criteria_line_port_user_part: searchCriteriaLinePortUserPart
        search_criteria_line_port_domain: searchCriteriaLinePortDomain
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_device_type: searchCriteriaDeviceType
        search_criteria_device_name: searchCriteriaDeviceName
        search_criteria_device_mac_address: searchCriteriaDeviceMACAddress
        search_criteria_device_net_address: searchCriteriaDeviceNetAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_line_port_user_part: List[OCI.SearchCriteriaLinePortUserPart] = attr.ib(default=None)
    search_criteria_line_port_domain: List[OCI.SearchCriteriaLinePortDomain] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_device_type: List[OCI.SearchCriteriaDeviceType] = attr.ib(default=None)
    search_criteria_device_name: List[OCI.SearchCriteriaDeviceName] = attr.ib(default=None)
    search_criteria_device_mac_address: List[OCI.SearchCriteriaDeviceMACAddress] = attr.ib(default=None)
    search_criteria_device_net_address: List[OCI.SearchCriteriaDeviceNetAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "searchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_user_part",
                "searchCriteriaLinePortUserPart",
                OCI.SearchCriteriaLinePortUserPart,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_line_port_domain",
                "searchCriteriaLinePortDomain",
                OCI.SearchCriteriaLinePortDomain,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_type",
                "searchCriteriaDeviceType",
                OCI.SearchCriteriaDeviceType,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_name",
                "searchCriteriaDeviceName",
                OCI.SearchCriteriaDeviceName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_mac_address",
                "searchCriteriaDeviceMACAddress",
                OCI.SearchCriteriaDeviceMACAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_device_net_address",
                "searchCriteriaDeviceNetAddress",
                OCI.SearchCriteriaDeviceNetAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateAddRequest(OCIRequest):
    """
    Create a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        language: language
        type: type
        is_enabled: isEnabled
        template_body: templateBody
    """

    service_provider_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()
    is_enabled: bool = attr.ib()
    template_body: "OCI.MWIDeliveryToMobileEndpointTemplateBody" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
            E("is_enabled", "isEnabled", bool, is_required=True),
            E(
                "template_body",
                "templateBody",
                OCI.MWIDeliveryToMobileEndpointTemplateBody,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderMWIDeliveryToMobileEndpointCustomTemplateModifyRequest(OCIRequest):
    """
    Modify a MWI Delivery to Mobile Endpoint Custom Template.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        language: language
        type: type
        is_enabled: isEnabled
        template_body: templateBody
    """

    service_provider_id: str = attr.ib()
    language: str = attr.ib()
    type: str = attr.ib()
    is_enabled: bool = attr.ib(default=None)
    template_body: "OCI.MWIDeliveryToMobileEndpointTemplateBody" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("language", "language", str, is_required=True),
            E("type", "type", str, is_required=True),
            E("is_enabled", "isEnabled", bool),
            E(
                "template_body",
                "templateBody",
                OCI.MWIDeliveryToMobileEndpointTemplateBody,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class ServiceProviderServiceModifyAuthorizationListRequest(OCIRequest):
    """
    Requests to change the service provider's service authorization status.

    The boolean flags are used to authorize or unauthorize services.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_service_authorization: groupServiceAuthorization
        user_service_authorization: userServiceAuthorization
    """

    service_provider_id: str = attr.ib()
    group_service_authorization: List[OCI.GroupServiceAuthorization] = attr.ib(default=None)
    user_service_authorization: List[OCI.UserServiceAuthorization] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E(
                "group_service_authorization",
                "groupServiceAuthorization",
                OCI.GroupServiceAuthorization,
                is_complex=True,
                is_array=True,
            ),
            E(
                "user_service_authorization",
                "userServiceAuthorization",
                OCI.UserServiceAuthorization,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemCommunicationBarringProfileModifyRequest(OCIRequest):
    """
    Modify an existing Communication Barring Profile.

    When the originatingDefaultAction is not Treatment, originatingDefaultTreatmentId will
    be automatically cleared.  Also when the action of originatingRule is not Treatment,
    treatmentId will be automatically cleared for the rule.  The priorities for
    IncomingRules are requantized to consecutive integers as part of the modify.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    following elements are only used in AS data mode: callMeNowDefaultAction
    callMeNowDefaultCallTimeout callMeNowRule applyToAttendedCallTransfers

    Attributes:
        name: name
        new_name: newName
        description: description
        originating_default_action: originatingDefaultAction
        originating_default_treatment_id: originatingDefaultTreatmentId
        originating_default_transfer_number: originatingDefaultTransferNumber
        originating_default_call_timeout: originatingDefaultCallTimeout
        originating_rule: originatingRule
        redirecting_default_action: redirectingDefaultAction
        redirecting_default_call_timeout: redirectingDefaultCallTimeout
        redirecting_rule: redirectingRule
        incoming_default_action: incomingDefaultAction
        incoming_default_call_timeout: incomingDefaultCallTimeout
        incoming_rule: incomingRule
        call_me_now_default_action: callMeNowDefaultAction
        call_me_now_default_call_timeout: callMeNowDefaultCallTimeout
        call_me_now_rule: callMeNowRule
        apply_to_attended_call_transfers: applyToAttendedCallTransfers
    """

    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    originating_default_action: str = attr.ib(default=None)
    originating_default_treatment_id: str = attr.ib(default=None)
    originating_default_transfer_number: str = attr.ib(default=None)
    originating_default_call_timeout: int = attr.ib(default=None)
    originating_rule: "OCI.ReplacementCommunicationBarringOriginatingRuleList" = attr.ib(default=None)
    redirecting_default_action: str = attr.ib(default=None)
    redirecting_default_call_timeout: int = attr.ib(default=None)
    redirecting_rule: "OCI.ReplacementCommunicationBarringRedirectingRuleList" = attr.ib(default=None)
    incoming_default_action: str = attr.ib(default=None)
    incoming_default_call_timeout: int = attr.ib(default=None)
    incoming_rule: "OCI.ReplacementCommunicationBarringIncomingRuleList19sp1" = attr.ib(default=None)
    call_me_now_default_action: str = attr.ib(default=None)
    call_me_now_default_call_timeout: int = attr.ib(default=None)
    call_me_now_rule: "OCI.ReplacementCommunicationBarringCallMeNowRuleList" = attr.ib(default=None)
    apply_to_attended_call_transfers: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("originating_default_action", "originatingDefaultAction", str),
            E("originating_default_treatment_id", "originatingDefaultTreatmentId", str),
            E(
                "originating_default_transfer_number",
                "originatingDefaultTransferNumber",
                str,
            ),
            E("originating_default_call_timeout", "originatingDefaultCallTimeout", int),
            E(
                "originating_rule",
                "originatingRule",
                OCI.ReplacementCommunicationBarringOriginatingRuleList,
                is_complex=True,
            ),
            E("redirecting_default_action", "redirectingDefaultAction", str),
            E("redirecting_default_call_timeout", "redirectingDefaultCallTimeout", int),
            E(
                "redirecting_rule",
                "redirectingRule",
                OCI.ReplacementCommunicationBarringRedirectingRuleList,
                is_complex=True,
            ),
            E("incoming_default_action", "incomingDefaultAction", str),
            E("incoming_default_call_timeout", "incomingDefaultCallTimeout", int),
            E(
                "incoming_rule",
                "incomingRule",
                OCI.ReplacementCommunicationBarringIncomingRuleList19sp1,
                is_complex=True,
            ),
            E("call_me_now_default_action", "callMeNowDefaultAction", str),
            E("call_me_now_default_call_timeout", "callMeNowDefaultCallTimeout", int),
            E(
                "call_me_now_rule",
                "callMeNowRule",
                OCI.ReplacementCommunicationBarringCallMeNowRuleList,
                is_complex=True,
            ),
            E("apply_to_attended_call_transfers", "applyToAttendedCallTransfers", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemVerifyTranslationAndRoutingRequest(OCIRequest):
    """
    Represents a Verify Translation and Routing request which can be either a request
    containing parameters or a request containing a SIP message.

    Returns a ``SystemVerifyTranslationAndRoutingResponse()``.

    Attributes:
        parameters: parameters
        sip_message: sipMessage
    """

    parameters: "OCI.VerifyTranslationAndRoutingParameters" = attr.ib(default=None)
    sip_message: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E(
                "parameters",
                "parameters",
                OCI.VerifyTranslationAndRoutingParameters,
                is_complex=True,
            ),
            E("sip_message", "sipMessage", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAddRequest14(OCIRequest):
    """
    Request to add a user.

    The domain is required in the userId.  The password is not required if external
    authentication is enabled.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        user_id: userId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        password: password
        department: department
        language: language
        time_zone: timeZone
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_group_device_endpoint: trunkGroupDeviceEndpoint
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    user_id: str = attr.ib()
    last_name: str = attr.ib()
    first_name: str = attr.ib()
    calling_line_id_last_name: str = attr.ib()
    calling_line_id_first_name: str = attr.ib()
    hiragana_last_name: str = attr.ib(default=None)
    hiragana_first_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    alias: List[str] = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib(default=None)
    trunk_group_device_endpoint: "OCI.TrunkGroupDeviceEndpointAdd" = attr.ib(default=None)
    title: str = attr.ib(default=None)
    pager_phone_number: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    email_address: str = attr.ib(default=None)
    yahoo_id: str = attr.ib(default=None)
    address_location: str = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("user_id", "userId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("password", "password", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
            ),
            E(
                "trunk_group_device_endpoint",
                "trunkGroupDeviceEndpoint",
                OCI.TrunkGroupDeviceEndpointAdd,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAddRequest14sp9(OCIRequest):
    """
    Replaced By ``UserAddRequest17sp4()`` Request to add a user.

    The domain is required in the userId.  The password is not required if external
    authentication is enabled.  The officeZoneName and primaryZoneName elements are
    ignored and provided here for backwards compatibility only.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        user_id: userId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        password: password
        department: department
        language: language
        time_zone: timeZone
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        network_class_of_service: networkClassOfService
        office_zone_name: officeZoneName
        primary_zone_name: primaryZoneName
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    user_id: str = attr.ib()
    last_name: str = attr.ib()
    first_name: str = attr.ib()
    calling_line_id_last_name: str = attr.ib()
    calling_line_id_first_name: str = attr.ib()
    hiragana_last_name: str = attr.ib(default=None)
    hiragana_first_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    alias: List[str] = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib(default=None)
    trunk_addressing: "OCI.TrunkAddressingAdd" = attr.ib(default=None)
    title: str = attr.ib(default=None)
    pager_phone_number: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    email_address: str = attr.ib(default=None)
    yahoo_id: str = attr.ib(default=None)
    address_location: str = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)
    office_zone_name: str = attr.ib(default=None)
    primary_zone_name: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("user_id", "userId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("password", "password", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingAdd,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("network_class_of_service", "networkClassOfService", str),
            E("office_zone_name", "officeZoneName", str),
            E("primary_zone_name", "primaryZoneName", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAddRequest17sp4(OCIRequest):
    """
    Request to add a user.

    The domain is required in the userId.  The password is not required if external
    authentication is enabled.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        user_id: userId
        last_name: lastName
        first_name: firstName
        calling_line_id_last_name: callingLineIdLastName
        calling_line_id_first_name: callingLineIdFirstName
        name_dialing_name: nameDialingName
        hiragana_last_name: hiraganaLastName
        hiragana_first_name: hiraganaFirstName
        phone_number: phoneNumber
        extension: extension
        calling_line_id_phone_number: callingLineIdPhoneNumber
        password: password
        department: department
        language: language
        time_zone: timeZone
        alias: alias
        access_device_endpoint: accessDeviceEndpoint
        trunk_addressing: trunkAddressing
        title: title
        pager_phone_number: pagerPhoneNumber
        mobile_phone_number: mobilePhoneNumber
        email_address: emailAddress
        yahoo_id: yahooId
        address_location: addressLocation
        address: address
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    user_id: str = attr.ib()
    last_name: str = attr.ib()
    first_name: str = attr.ib()
    calling_line_id_last_name: str = attr.ib()
    calling_line_id_first_name: str = attr.ib()
    name_dialing_name: "OCI.NameDialingName" = attr.ib(default=None)
    hiragana_last_name: str = attr.ib(default=None)
    hiragana_first_name: str = attr.ib(default=None)
    phone_number: str = attr.ib(default=None)
    extension: str = attr.ib(default=None)
    calling_line_id_phone_number: str = attr.ib(default=None)
    password: str = attr.ib(default=None)
    department: "OCI.DepartmentKey" = attr.ib(default=None)
    language: str = attr.ib(default=None)
    time_zone: str = attr.ib(default=None)
    alias: List[str] = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceMultipleContactEndpointAdd" = attr.ib(default=None)
    trunk_addressing: "OCI.TrunkAddressingMultipleContactAdd" = attr.ib(default=None)
    title: str = attr.ib(default=None)
    pager_phone_number: str = attr.ib(default=None)
    mobile_phone_number: str = attr.ib(default=None)
    email_address: str = attr.ib(default=None)
    yahoo_id: str = attr.ib(default=None)
    address_location: str = attr.ib(default=None)
    address: "OCI.StreetAddress" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("user_id", "userId", str, is_required=True),
            E("last_name", "lastName", str, is_required=True),
            E("first_name", "firstName", str, is_required=True),
            E(
                "calling_line_id_last_name",
                "callingLineIdLastName",
                str,
                is_required=True,
            ),
            E(
                "calling_line_id_first_name",
                "callingLineIdFirstName",
                str,
                is_required=True,
            ),
            E(
                "name_dialing_name",
                "nameDialingName",
                OCI.NameDialingName,
                is_complex=True,
            ),
            E("hiragana_last_name", "hiraganaLastName", str),
            E("hiragana_first_name", "hiraganaFirstName", str),
            E("phone_number", "phoneNumber", str),
            E("extension", "extension", str),
            E("calling_line_id_phone_number", "callingLineIdPhoneNumber", str),
            E("password", "password", str),
            E("department", "department", OCI.DepartmentKey, is_complex=True),
            E("language", "language", str),
            E("time_zone", "timeZone", str),
            E("alias", "alias", str, is_array=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointAdd,
                is_complex=True,
            ),
            E(
                "trunk_addressing",
                "trunkAddressing",
                OCI.TrunkAddressingMultipleContactAdd,
                is_complex=True,
            ),
            E("title", "title", str),
            E("pager_phone_number", "pagerPhoneNumber", str),
            E("mobile_phone_number", "mobilePhoneNumber", str),
            E("email_address", "emailAddress", str),
            E("yahoo_id", "yahooId", str),
            E("address_location", "addressLocation", str),
            E("address", "address", OCI.StreetAddress, is_complex=True),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserAttendantConsoleGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of available users for the Attendant Console service.

    The response is either ``UserAttendantConsoleGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksAnywhereModifySelectiveCriteriaRequest(OCIRequest):
    """
    Modify selective criteria for the user's BroadWorks Anywhere phone number.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        phone_number: phoneNumber
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    phone_number: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("phone_number", "phoneNumber", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityMobileIdentityAddRequest(OCIRequest):
    """
    Add a mobile identity to the user's list of mobile identities.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The request
    fails when the devicesToRing is set to Mobile and the mobileNumberAlerted list is
    empty.

    Attributes:
        user_id: userId
        mobile_number: mobileNumber
        description: description
        is_primary: isPrimary
        enable_alerting: enableAlerting
        alert_agent_calls: alertAgentCalls
        alert_click_to_dial_calls: alertClickToDialCalls
        alert_group_paging_calls: alertGroupPagingCalls
        use_mobility_calling_line_id: useMobilityCallingLineID
        enable_diversion_inhibitor: enableDiversionInhibitor
        require_answer_confirmation: requireAnswerConfirmation
        broadworks_call_control: broadworksCallControl
        use_setting_level: useSettingLevel
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        devices_to_ring: devicesToRing
        include_shared_call_appearance: includeSharedCallAppearance
        include_broadworks_anywhere: includeBroadworksAnywhere
        include_executive_assistant: includeExecutiveAssistant
        mobile_number_alerted: mobileNumberAlerted
        enable_call_anchoring: enableCallAnchoring
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
    """

    user_id: str = attr.ib()
    mobile_number: str = attr.ib()
    description: str = attr.ib(default=None)
    is_primary: bool = attr.ib()
    enable_alerting: bool = attr.ib()
    alert_agent_calls: bool = attr.ib()
    alert_click_to_dial_calls: bool = attr.ib()
    alert_group_paging_calls: bool = attr.ib()
    use_mobility_calling_line_id: bool = attr.ib()
    enable_diversion_inhibitor: bool = attr.ib()
    require_answer_confirmation: bool = attr.ib()
    broadworks_call_control: bool = attr.ib()
    use_setting_level: str = attr.ib()
    deny_call_originations: bool = attr.ib()
    deny_call_terminations: bool = attr.ib()
    devices_to_ring: str = attr.ib()
    include_shared_call_appearance: bool = attr.ib()
    include_broadworks_anywhere: bool = attr.ib()
    include_executive_assistant: bool = attr.ib()
    mobile_number_alerted: List[str] = attr.ib(default=None)
    enable_call_anchoring: bool = attr.ib()
    time_schedule: "OCI.ScheduleGlobalKey" = attr.ib(default=None)
    holiday_schedule: "OCI.ScheduleGlobalKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("mobile_number", "mobileNumber", str, is_required=True),
            E("description", "description", str),
            E("is_primary", "isPrimary", bool, is_required=True),
            E("enable_alerting", "enableAlerting", bool, is_required=True),
            E("alert_agent_calls", "alertAgentCalls", bool, is_required=True),
            E(
                "alert_click_to_dial_calls",
                "alertClickToDialCalls",
                bool,
                is_required=True,
            ),
            E(
                "alert_group_paging_calls",
                "alertGroupPagingCalls",
                bool,
                is_required=True,
            ),
            E(
                "use_mobility_calling_line_id",
                "useMobilityCallingLineID",
                bool,
                is_required=True,
            ),
            E(
                "enable_diversion_inhibitor",
                "enableDiversionInhibitor",
                bool,
                is_required=True,
            ),
            E(
                "require_answer_confirmation",
                "requireAnswerConfirmation",
                bool,
                is_required=True,
            ),
            E(
                "broadworks_call_control",
                "broadworksCallControl",
                bool,
                is_required=True,
            ),
            E("use_setting_level", "useSettingLevel", str, is_required=True),
            E("deny_call_originations", "denyCallOriginations", bool, is_required=True),
            E("deny_call_terminations", "denyCallTerminations", bool, is_required=True),
            E("devices_to_ring", "devicesToRing", str, is_required=True),
            E(
                "include_shared_call_appearance",
                "includeSharedCallAppearance",
                bool,
                is_required=True,
            ),
            E(
                "include_broadworks_anywhere",
                "includeBroadworksAnywhere",
                bool,
                is_required=True,
            ),
            E(
                "include_executive_assistant",
                "includeExecutiveAssistant",
                bool,
                is_required=True,
            ),
            E("mobile_number_alerted", "mobileNumberAlerted", str, is_array=True),
            E("enable_call_anchoring", "enableCallAnchoring", bool, is_required=True),
            E("time_schedule", "timeSchedule", OCI.ScheduleGlobalKey, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.ScheduleGlobalKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksMobilityMobileIdentityModifyRequest(OCIRequest):
    """
    Modify the settings for one of the user's BroadWorks Mobility mobile Identities.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The request
    fails when enableAlerting or timeSchedule or holidaySchedule are included in the
    request when the user’s use mobile identity call anchoring controls is disabled.  The
    description, enableAlerting, alertAgentCalls, alertClickToDialCalls,
    alertGroupPagingCalls, useMobilityCallingLineID, enableDiversionInhibitor,
    requireAnswerConfirmation, broadworksCallControl, devicesToRing,
    includeSharedCallAppearance, includeBroadworksAnywhere, includeExecutiveAssistance,
    mobileNumberAlerted, enableCallAnchoring, timeSchedule and holidaySchedule parameters
    require an authorization level of User for modification when the BroadWorks Mobility
    service is on.  The isPrimary, useSettingLevel, denyCallOrigination, and
    denyCallTerminiations parameters require an authorization level of Group for
    modification.

    Attributes:
        user_id: userId
        mobile_number: mobileNumber
        description: description
        is_primary: isPrimary
        enable_alerting: enableAlerting
        alert_agent_calls: alertAgentCalls
        alert_click_to_dial_calls: alertClickToDialCalls
        alert_group_paging_calls: alertGroupPagingCalls
        use_mobility_calling_line_id: useMobilityCallingLineID
        enable_diversion_inhibitor: enableDiversionInhibitor
        require_answer_confirmation: requireAnswerConfirmation
        broadworks_call_control: broadworksCallControl
        use_setting_level: useSettingLevel
        deny_call_originations: denyCallOriginations
        deny_call_terminations: denyCallTerminations
        devices_to_ring: devicesToRing
        include_shared_call_appearance: includeSharedCallAppearance
        include_broadworks_anywhere: includeBroadworksAnywhere
        include_executive_assistant: includeExecutiveAssistant
        mobile_numbers_alerted: mobileNumbersAlerted
        enable_call_anchoring: enableCallAnchoring
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
    """

    user_id: str = attr.ib()
    mobile_number: str = attr.ib()
    description: str = attr.ib(default=None)
    is_primary: bool = attr.ib(default=None)
    enable_alerting: bool = attr.ib(default=None)
    alert_agent_calls: bool = attr.ib(default=None)
    alert_click_to_dial_calls: bool = attr.ib(default=None)
    alert_group_paging_calls: bool = attr.ib(default=None)
    use_mobility_calling_line_id: bool = attr.ib(default=None)
    enable_diversion_inhibitor: bool = attr.ib(default=None)
    require_answer_confirmation: bool = attr.ib(default=None)
    broadworks_call_control: bool = attr.ib(default=None)
    use_setting_level: str = attr.ib(default=None)
    deny_call_originations: bool = attr.ib(default=None)
    deny_call_terminations: bool = attr.ib(default=None)
    devices_to_ring: str = attr.ib(default=None)
    include_shared_call_appearance: bool = attr.ib(default=None)
    include_broadworks_anywhere: bool = attr.ib(default=None)
    include_executive_assistant: bool = attr.ib(default=None)
    mobile_numbers_alerted: "OCI.BroadWorksMobilityAlertingMobileNumberReplacementList" = attr.ib(default=None)
    enable_call_anchoring: bool = attr.ib(default=None)
    time_schedule: "OCI.ScheduleGlobalKey" = attr.ib(default=None)
    holiday_schedule: "OCI.ScheduleGlobalKey" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("mobile_number", "mobileNumber", str, is_required=True),
            E("description", "description", str),
            E("is_primary", "isPrimary", bool),
            E("enable_alerting", "enableAlerting", bool),
            E("alert_agent_calls", "alertAgentCalls", bool),
            E("alert_click_to_dial_calls", "alertClickToDialCalls", bool),
            E("alert_group_paging_calls", "alertGroupPagingCalls", bool),
            E("use_mobility_calling_line_id", "useMobilityCallingLineID", bool),
            E("enable_diversion_inhibitor", "enableDiversionInhibitor", bool),
            E("require_answer_confirmation", "requireAnswerConfirmation", bool),
            E("broadworks_call_control", "broadworksCallControl", bool),
            E("use_setting_level", "useSettingLevel", str),
            E("deny_call_originations", "denyCallOriginations", bool),
            E("deny_call_terminations", "denyCallTerminations", bool),
            E("devices_to_ring", "devicesToRing", str),
            E("include_shared_call_appearance", "includeSharedCallAppearance", bool),
            E("include_broadworks_anywhere", "includeBroadworksAnywhere", bool),
            E("include_executive_assistant", "includeExecutiveAssistant", bool),
            E(
                "mobile_numbers_alerted",
                "mobileNumbersAlerted",
                OCI.BroadWorksMobilityAlertingMobileNumberReplacementList,
                is_complex=True,
            ),
            E("enable_call_anchoring", "enableCallAnchoring", bool),
            E("time_schedule", "timeSchedule", OCI.ScheduleGlobalKey, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.ScheduleGlobalKey,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistEnterpriseGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of available users for BroadWorks Receptionist - Enterprise monitoring.

    The response is either
    ``UserBroadWorksReceptionistEnterpriseGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistOfficeGetAvailableUserListRequest(OCIRequest):
    """
    Get the Receptionist Office available user list.

    The response is either
    ``UserBroadWorksReceptionistOfficeGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBroadWorksReceptionistSmallBusinessGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of available users for the Receptionist Small Business service.

    The response is either
    ``UserBroadWorksReceptionistSmallBusinessGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserBusyLampFieldGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of available users for the busy lamp field service.

    The response is either ``UserBusyLampFieldGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterGetSupervisedAgentListRequest(OCIRequest):
    """
    Get a list of agents supervised by a supervisor on a given call center.

    The response is either a ``UserCallCenterGetSupervisedAgentListResponse()`` or an
    ``ErrorResponse()``. The search can be done using multiple criterias.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterias are included
    in the results.  If no search criteria is specified, all results are returned.  In all
    cases, if a responseSizeLimit is specified and the number of matching results is more
    than this limit, then an ``ErrorResponse()`` is returned.  Specifying
    searchCriteriaModeOr without any search criteria results in an ``ErrorResponse()``.

    Attributes:
        supervisor_user_id: supervisorUserId
        service_user_id: serviceUserId
        response_size_limit: responseSizeLimit
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_imp_id: searchCriteriaImpId
    """

    supervisor_user_id: str = attr.ib()
    service_user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallForwardingSelectiveModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's call forwarding selective service.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        forward_to_number_selection: forwardToNumberSelection
        forward_to_phone_number: forwardToPhoneNumber
        from_dn_criteria: fromDnCriteria
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    forward_to_number_selection: str = attr.ib(default=None)
    forward_to_phone_number: str = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("forward_to_number_selection", "forwardToNumberSelection", str),
            E("forward_to_phone_number", "forwardToPhoneNumber", str),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallMeNowModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's call me now service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        reject_call: rejectCall
        to_dn_criteria: toDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    reject_call: bool = attr.ib(default=None)
    to_dn_criteria: "OCI.CallMeNowToDnCriteriaModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("reject_call", "rejectCall", bool),
            E(
                "to_dn_criteria",
                "toDnCriteria",
                OCI.CallMeNowToDnCriteriaModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallNotifyModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's call notify service.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommPilotExpressModifyRequest(OCIRequest):
    """
    Modify the user's commPilot express service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Attributes:
        user_id: userId
        profile: profile
        available_in_office: availableInOffice
        available_out_of_office: availableOutOfOffice
        busy: busy
        unavailable: unavailable
    """

    user_id: str = attr.ib()
    profile: str = attr.ib(default=None)
    available_in_office: "OCI.CommPilotExpressAvailableInOfficeModify" = attr.ib(default=None)
    available_out_of_office: "OCI.CommPilotExpressAvailableOutOfOfficeModify" = attr.ib(default=None)
    busy: "OCI.CommPilotExpressBusyModify" = attr.ib(default=None)
    unavailable: "OCI.CommPilotExpressUnavailableModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("profile", "profile", str),
            E(
                "available_in_office",
                "availableInOffice",
                OCI.CommPilotExpressAvailableInOfficeModify,
                is_complex=True,
            ),
            E(
                "available_out_of_office",
                "availableOutOfOffice",
                OCI.CommPilotExpressAvailableOutOfOfficeModify,
                is_complex=True,
            ),
            E("busy", "busy", OCI.CommPilotExpressBusyModify, is_complex=True),
            E(
                "unavailable",
                "unavailable",
                OCI.CommPilotExpressUnavailableModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserAddCriteriaRequest(OCIRequest):
    """
    Add a criteria to the user's custom ringback service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    audio_selection: str = attr.ib()
    audio_file: "OCI.ExtendedFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib()
    video_file: "OCI.ExtendedFileResource" = attr.ib(default=None)
    call_waiting_audio_selection: str = attr.ib(default=None)
    call_waiting_audio_file: "OCI.ExtendedFileResource" = attr.ib(default=None)
    call_waiting_video_selection: str = attr.ib(default=None)
    call_waiting_video_file: "OCI.ExtendedFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.ExtendedFileResource, is_complex=True),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file", "videoFile", OCI.ExtendedFileResource, is_complex=True),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.ExtendedFileResource,
                is_complex=True,
            ),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.ExtendedFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserAddCriteriaRequest16(OCIRequest):
    """
    Add a criteria to the user's custom ringback service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    audio_selection: str = attr.ib()
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib()
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    call_waiting_audio_selection: str = attr.ib(default=None)
    call_waiting_audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    call_waiting_video_selection: str = attr.ib(default=None)
    call_waiting_video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_selection", "videoSelection", str, is_required=True),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserAddCriteriaRequest20(OCIRequest):
    """
    Add a criteria to the user's custom ringback service.

    For the callToNumber, the extension element is not used and the number element is only
    used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number: callToNumber
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib()
    from_dn_criteria: "OCI.CriteriaFromDn" = attr.ib()
    call_to_number: List[OCI.CallToNumber] = attr.ib(default=None)
    audio_selection: str = attr.ib()
    audio_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    video_selection: str = attr.ib()
    video_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    call_waiting_audio_selection: str = attr.ib(default=None)
    call_waiting_audio_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    call_waiting_video_selection: str = attr.ib(default=None)
    call_waiting_video_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool, is_required=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDn,
                is_complex=True,
                is_required=True,
            ),
            E(
                "call_to_number",
                "callToNumber",
                OCI.CallToNumber,
                is_complex=True,
                is_array=True,
            ),
            E("audio_selection", "audioSelection", str, is_required=True),
            E(
                "audio_file",
                "audioFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E("video_selection", "videoSelection", str, is_required=True),
            E(
                "video_file",
                "videoFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's custom ringback service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Replaced By: ``UserCustomRingbackUserModifyCriteriaRequest16()``

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedFileResource" = attr.ib(default=None)
    call_waiting_audio_selection: str = attr.ib(default=None)
    call_waiting_audio_file: "OCI.ExtendedFileResource" = attr.ib(default=None)
    call_waiting_video_selection: str = attr.ib(default=None)
    call_waiting_video_file: "OCI.ExtendedFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E("audio_selection", "audioSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedFileResource, is_complex=True),
            E("video_selection", "videoSelection", str),
            E("video_file", "videoFile", OCI.ExtendedFileResource, is_complex=True),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.ExtendedFileResource,
                is_complex=True,
            ),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.ExtendedFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserModifyCriteriaRequest16(OCIRequest):
    """
    Modify a criteria for the user's custom ringback service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    call_waiting_audio_selection: str = attr.ib(default=None)
    call_waiting_audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    call_waiting_video_selection: str = attr.ib(default=None)
    call_waiting_video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E("audio_selection", "audioSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_selection", "videoSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCustomRingbackUserModifyCriteriaRequest20(OCIRequest):
    """
    Modify a criteria for the user's custom ringback service.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number_list: callToNumberList
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        call_waiting_audio_selection: callWaitingAudioSelection
        call_waiting_audio_file: callWaitingAudioFile
        call_waiting_video_selection: callWaitingVideoSelection
        call_waiting_video_file: callWaitingVideoFile
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    call_waiting_audio_selection: str = attr.ib(default=None)
    call_waiting_audio_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    call_waiting_video_selection: str = attr.ib(default=None)
    call_waiting_video_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
            E("audio_selection", "audioSelection", str),
            E(
                "audio_file",
                "audioFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E("video_selection", "videoSelection", str),
            E(
                "video_file",
                "videoFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E("call_waiting_audio_selection", "callWaitingAudioSelection", str),
            E(
                "call_waiting_audio_file",
                "callWaitingAudioFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E("call_waiting_video_selection", "callWaitingVideoSelection", str),
            E(
                "call_waiting_video_file",
                "callWaitingVideoFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserEnhancedCallLogsGetListRequest17sp4(OCIRequest):
    """
    Request user's call logs.

    If the callLogType is not specified, all types of calls logs (placed, received,
    missed) are returned.  The filters "dateTimeRange", "numberFilter",
    "redirectedNumberFilter", accountAuthorizationCodeFilter" and ""subscriberType" are
    ignored if call logs are stored in CDS. When "ReceivedOrMissed" is specified as
    "callLogType" and call logs are stored in CDS, all call logs including placed will be
    returned.  It is possible to restrict the number of rows returned using
    responsePagingControl.  If responsePagingControl is not specified, the value of
    Enhanced Call Logs system parameter maxNonPagedResponseSize will control the maximum
    number of call logs can be returned.

    The response is either a ``UserEnhancedCallLogsGetListResponse17sp4()`` or an
    ``ErrorResponse()``. Replaced by UserEnhancedCallLogsGetListRequest17sp4V2. Originally
    deprecated in release 20.

    Attributes:
        user_id: userId
        call_log_type: callLogType
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserEnhancedCallLogsGetListRequest20(OCIRequest):
    """
    Request user's call logs.

    If the callLogType is not specified, all types of calls logs (placed, received,
    missed) are returned.  The filters "dateTimeRange", "numberFilter",
    "redirectedNumberFilter", "accountAuthorizationCodeFilter"
    "callAuthorizationCodeFilter" and "subscriberType" are ignored if call logs are stored
    in CDS. When "ReceivedOrMissed" is specified as "callLogType" and call logs are stored
    in CDS, all call logs including placed will be returned.  It is possible to restrict
    the number of rows returned using responsePagingControl.  If responsePagingControl is
    not specified, the value of Enhanced Call Logs system parameter
    maxNonPagedResponseSize will control the maximum number of call logs can be returned.

    The response is either a ``UserEnhancedCallLogsGetListResponse20()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode:
    callAuthorizationCodeFilter callSecurityClassification

    Attributes:
        user_id: userId
        call_log_type: callLogType
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserEnhancedCallLogsGetListRequest21(OCIRequest):
    """
    Request user's call logs.

    If the callLogType is not specified, all types of calls logs (placed, received,
    missed) are returned.  The filters "dateTimeRange", "numberFilter",
    "redirectedNumberFilter", "accountAuthorizationCodeFilter"
    "callAuthorizationCodeFilter" and "subscriberType" are ignored if call logs are stored
    in CDS. When "ReceivedOrMissed" is specified as "callLogType" and call logs are stored
    in CDS, all call logs including placed will be returned.  It is possible to restrict
    the number of rows returned using responsePagingControl.  If responsePagingControl is
    not specified, the value of Enhanced Call Logs system parameter
    maxNonPagedResponseSize will control the maximum number of call logs can be returned.

    The response is either a ``UserEnhancedCallLogsGetListResponse21()`` or an
    ``ErrorResponse()``. The following elements are only used in AS data mode and ignored
    in HSS data mode: callAuthorizationCodeFilter

    Attributes:
        user_id: userId
        call_log_type: callLogType
        date_time_range: dateTimeRange
        number_filter: numberFilter
        redirected_number_filter: redirectedNumberFilter
        account_authorization_code_filter: accountAuthorizationCodeFilter
        call_authorization_code_filter: callAuthorizationCodeFilter
        subscriber_type: subscriberType
        response_paging_control: responsePagingControl
    """

    user_id: str = attr.ib()
    call_log_type: str = attr.ib(default=None)
    date_time_range: "OCI.EnhancedCallLogsTimeRange" = attr.ib()
    number_filter: "OCI.EnhancedCallLogsNumberFilter" = attr.ib(default=None)
    redirected_number_filter: "OCI.EnhancedCallLogsRedirectedNumberFilter21" = attr.ib(default=None)
    account_authorization_code_filter: "OCI.EnhancedCallLogsAccountAuthorizationCodeFilter" = attr.ib(default=None)
    call_authorization_code_filter: "OCI.EnhancedCallLogsCallAuthorizationCodeFilter" = attr.ib(default=None)
    subscriber_type: str = attr.ib(default=None)
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("call_log_type", "callLogType", str),
            E(
                "date_time_range",
                "dateTimeRange",
                OCI.EnhancedCallLogsTimeRange,
                is_complex=True,
                is_required=True,
            ),
            E(
                "number_filter",
                "numberFilter",
                OCI.EnhancedCallLogsNumberFilter,
                is_complex=True,
            ),
            E(
                "redirected_number_filter",
                "redirectedNumberFilter",
                OCI.EnhancedCallLogsRedirectedNumberFilter21,
                is_complex=True,
            ),
            E(
                "account_authorization_code_filter",
                "accountAuthorizationCodeFilter",
                OCI.EnhancedCallLogsAccountAuthorizationCodeFilter,
                is_complex=True,
            ),
            E(
                "call_authorization_code_filter",
                "callAuthorizationCodeFilter",
                OCI.EnhancedCallLogsCallAuthorizationCodeFilter,
                is_complex=True,
            ),
            E("subscriber_type", "subscriberType", str),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveGetAvailableAssistantListRequest(OCIRequest):
    """
    Get a list of users that can be assigned to an executive.

    Searching for users by group only makes sense when the executive user is part of an
    Enterprise.

    The response is either ``UserExecutiveGetAvailableAssistantListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserExecutiveModifyFilteringSelectiveCriteriaRequest(OCIRequest):
    """
    Modify a filtering selective criteria for an executive.

    Both executive and the executive assistant can run this command.  For the
    callToNumbers in the callToNumberList, the extension element is not used and the
    number element is only used when the type is BroadWorks Mobility.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        filter: filter
        from_dn_criteria: fromDnCriteria
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    filter: bool = attr.ib(default=None)
    from_dn_criteria: "OCI.ExecutiveCallFilteringCriteriaFromDnModify" = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("filter", "filter", bool),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.ExecutiveCallFilteringCriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFlexibleSeatingGuestGetAvailableHostListRequest(OCIRequest):
    """
    Get a list of hosts that can be assigned to flexible seating guests.

    The response is either ``UserFlexibleSeatingGuestGetAvailableUserListResponse()`` or
    ``ErrorResponse()``. The response will include active hosts based on the following
    criteria.  - host that has the equivalent device type as the guest, host already
    assigned to another guest and for a guest in a Service Provider host in the user’s
    group and for a user in an Enterprise a host within the user’s group and host in the
    user’s enterprise that has the accessLevel set to Enterprise.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserFlexibleSeatingGuestModifyRequest(OCIRequest):
    """
    Modify the user level data associated with flexible seating guest.

    accessDeviceEndpoint can only be configured by group or a higher level administrator.
    The request fails if isActive is set to false and the guest is associated to a host.
    The request fails when enableAssociationLimit, associationLimitHours,
    unlockPhonePINCode are changed when the guest is associated to a host.  The request
    fails when accessDeviceEndpoint is set in the request when the guest is associated to
    a host.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        enable_association_limit: enableAssociationLimit
        association_limit_hours: associationLimitHours
        unlock_phone_pin_code: unlockPhonePINCode
        access_device_endpoint: accessDeviceEndpoint
        host_user_id: hostUserId
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    enable_association_limit: bool = attr.ib(default=None)
    association_limit_hours: int = attr.ib(default=None)
    unlock_phone_pin_code: str = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceMultipleContactEndpointModify" = attr.ib(default=None)
    host_user_id: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("enable_association_limit", "enableAssociationLimit", bool),
            E("association_limit_hours", "associationLimitHours", int),
            E("unlock_phone_pin_code", "unlockPhonePINCode", str),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceMultipleContactEndpointModify,
                is_complex=True,
            ),
            E("host_user_id", "hostUserId", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetListInGroupRequest(OCIRequest):
    """
    Request the list of users in a group.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``UserGetListInGroupResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: GroupId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_in_trunk_group: searchCriteriaExactUserInTrunkGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_in_trunk_group: "OCI.SearchCriteriaExactUserInTrunkGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "GroupId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_in_trunk_group",
                "searchCriteriaExactUserInTrunkGroup",
                OCI.SearchCriteriaExactUserInTrunkGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetListInServiceProviderRequest(OCIRequest):
    """
    Request the list of users in a service provider or enterprise.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.

    The response is either a ``UserGetListInServiceProviderResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_exact_user_in_trunk_group: searchCriteriaExactUserInTrunkGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_exact_user_in_trunk_group: "OCI.SearchCriteriaExactUserInTrunkGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_in_trunk_group",
                "searchCriteriaExactUserInTrunkGroup",
                OCI.SearchCriteriaExactUserInTrunkGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserGetServiceInstanceListInServiceProviderRequest(OCIRequest):
    """
    Request the list of Service Instances in a service provider or an enterprise.

    It is possible to search by various criteria to restrict the number of rows returned.
    Multiple search criteria are logically ANDed together.
    searchCriteriaExactUserDepartment criteria is only applicable for an enterprise and is
    ignored if set for a service provider.

    The response is either a ``UserGetServiceInstanceListInServiceProviderResponse()`` or
    an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        response_size_limit: responseSizeLimit
        search_criteria_group_id: SearchCriteriaGroupId
        search_criteria_exact_service_type: SearchCriteriaExactServiceType
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    service_provider_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_group_id: List[OCI.SearchCriteriaGroupId] = attr.ib(default=None)
    search_criteria_exact_service_type: "OCI.SearchCriteriaExactServiceType" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_group_id",
                "SearchCriteriaGroupId",
                OCI.SearchCriteriaGroupId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_service_type",
                "SearchCriteriaExactServiceType",
                OCI.SearchCriteriaExactServiceType,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserHotelingGuestGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of users that can be assigned as Hoteling Guests.

    The response is either ``UserHotelingGuestGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserIncomingCallingPlanModifyRequest(OCIRequest):
    """
    Change the user's incoming calling plan settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.IncomingCallingPlanPermissionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.IncomingCallingPlanPermissionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserMeetMeConferencingGetAvailableDelegateListRequest(OCIRequest):
    """
    Get a list of users that can be assigned as a delegate to a Meet-Me Conference.

    Searching for users, who are host on a Meet-Me Conferencing bridge.

    The response is either ``UserMeetMeConferencingGetAvailableDelegateListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        conference_key: conferenceKey
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
    """

    user_id: str = attr.ib()
    conference_key: "OCI.MeetMeConferencingConferenceKey" = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "conference_key",
                "conferenceKey",
                OCI.MeetMeConferencingConferenceKey,
                is_complex=True,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanDigitPlanCallMeNowModifyRequest(OCIRequest):
    """
    Modify the Call Me Now call permissions for digit patterns for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanDigitPlanOriginatingModifyRequest(OCIRequest):
    """
    Modify the originating permissions for digit patterns for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanDigitPlanRedirectingModifyRequest(OCIRequest):
    """
    Modify the redirecting permissions for digit patterns for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyRequest(OCIRequest):
    """
    Modify the Call Me Now permissions for Pinhole digit patterns for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanPinholeDigitPlanOriginatingModifyRequest(OCIRequest):
    """
    Modify the originating permissions for Pinhole digit patterns for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserOutgoingCallingPlanPinholeDigitPlanRedirectingModifyRequest(OCIRequest):
    """
    Modify the redirecting permissions for Pinhole digit patterns for a user.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        use_custom_settings: useCustomSettings
        user_permissions: userPermissions
    """

    user_id: str = attr.ib()
    use_custom_settings: bool = attr.ib(default=None)
    user_permissions: "OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("use_custom_settings", "useCustomSettings", bool),
            E(
                "user_permissions",
                "userPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPersonalAssistantCallToNumberModifyListRequest(OCIRequest):
    """
    Request to modify the user assigned Call to Number List information.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. For the
    callToNumbers in the callToNumberList, the extension element is not used and the
    number element is only used when the type is BroadWorks Mobility.

    Attributes:
        user_id: userId
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPhoneDirectoryGetListRequest(OCIRequest):
    """
    Request a table containing the phone directory for a user's group.

    If the user's group is part of an enterprise, the directory includes all users in the
    enterprise and all entries in the enterprise common phone list and the common phone
    list of the specified group (if includeCommonPhoneList is set to true). If the user's
    group is part of a service provider, the directory includes all users in the group and
    all entries in the common phone list (if includeCommonPhoneList is set to true) of the
    specified group.

    The response is either ``UserPhoneDirectoryGetListResponse()`` or ``ErrorResponse()``.
    If the searchCriteriaModeOr is present, any result matching any one criteria is
    included in the results.  Otherwise, only results matching all the search criterias
    are included in the results.  If no search criteria is specified, all results are
    returned.  In all cases, if a responseSizeLimit is specified and the number of
    matching results is more than this limit, then an ``ErrorResponse()`` is returned.
    Specifying searchCriteriaModeOr without any search criteria results in an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        include_common_phone_list: includeCommonPhoneList
        response_size_limit: responseSizeLimit
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_custom_contact_directory:
            searchCriteriaExactCustomContactDirectory
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    include_common_phone_list: bool = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_custom_contact_directory: "OCI.SearchCriteriaExactCustomContactDirectory" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "include_common_phone_list",
                "includeCommonPhoneList",
                bool,
                is_required=True,
            ),
            E("response_size_limit", "responseSizeLimit", int),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_custom_contact_directory",
                "searchCriteriaExactCustomContactDirectory",
                OCI.SearchCriteriaExactCustomContactDirectory,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPhoneDirectoryGetPagedListRequest(OCIRequest):
    """
    Request a table containing the phone directory for a user.

    Setting isEnterpriseRequested to true will return enterprise directory members in the
    response if the user is in an enterprise.  Otherwise, just the group directory members
    for a user are returned in the response.

    The response is either ``UserPhoneDirectoryGetPagedListResponse()`` or
    ``ErrorResponse()``. The search can be done using multiple criterias.  If the
    searchCriteriaModeOr is present, any result matching any one criteria is included in
    the results.  Otherwise, only results matching all the search criterias are included
    in the results.  If no search criteria is specified, all results are returned.  In all
    cases, if a responseSizeLimit is specified and the number of matching results is more
    than this limit, then an ``ErrorResponse()`` is returned.  Specifying
    searchCriteriaModeOr without any search criteria results in an ``ErrorResponse()``.
    The boolean sortByFirstName is optional.  If it is not specified, the response is
    sorted by Last Name.

    Attributes:
        user_id: userId
        is_enterprise_info_requested: isEnterpriseInfoRequested
        response_paging_control: responsePagingControl
        search_criteria_mode_or: searchCriteriaModeOr
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_dn: searchCriteriaDn
        search_criteria_group_location_code: searchCriteriaGroupLocationCode
        search_criteria_extension: searchCriteriaExtension
        search_criteria_mobile_phone_number: searchCriteriaMobilePhoneNumber
        search_criteria_email_address: searchCriteriaEmailAddress
        search_criteria_yahoo_id: searchCriteriaYahooId
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_imp_id: searchCriteriaImpId
        sort_by_first_name: sortByFirstName
    """

    user_id: str = attr.ib()
    is_enterprise_info_requested: bool = attr.ib()
    response_paging_control: "OCI.ResponsePagingControl" = attr.ib()
    search_criteria_mode_or: bool = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_group_location_code: List[OCI.SearchCriteriaGroupLocationCode] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_mobile_phone_number: List[OCI.SearchCriteriaMobilePhoneNumber] = attr.ib(default=None)
    search_criteria_email_address: List[OCI.SearchCriteriaEmailAddress] = attr.ib(default=None)
    search_criteria_yahoo_id: List[OCI.SearchCriteriaYahooId] = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)
    sort_by_first_name: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "is_enterprise_info_requested",
                "isEnterpriseInfoRequested",
                bool,
                is_required=True,
            ),
            E(
                "response_paging_control",
                "responsePagingControl",
                OCI.ResponsePagingControl,
                is_complex=True,
                is_required=True,
            ),
            E("search_criteria_mode_or", "searchCriteriaModeOr", bool),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_group_location_code",
                "searchCriteriaGroupLocationCode",
                OCI.SearchCriteriaGroupLocationCode,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_mobile_phone_number",
                "searchCriteriaMobilePhoneNumber",
                OCI.SearchCriteriaMobilePhoneNumber,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_email_address",
                "searchCriteriaEmailAddress",
                OCI.SearchCriteriaEmailAddress,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_yahoo_id",
                "searchCriteriaYahooId",
                OCI.SearchCriteriaYahooId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
            E("sort_by_first_name", "sortByFirstName", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's pre-alerting service.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementModifyRequest(OCIRequest):
    """
    Modify the user's pre-alerting service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("audio_selection", "audioSelection", str),
            E("audio_file", "audioFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E("video_selection", "videoSelection", str),
            E("video_file", "videoFile", OCI.ExtendedMediaFileResource, is_complex=True),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPreAlertingAnnouncementModifyRequest20(OCIRequest):
    """
    Modify the user's pre-alerting service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        audio_selection: audioSelection
        audio_file: audioFile
        video_selection: videoSelection
        video_file: videoFile
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    audio_selection: str = attr.ib(default=None)
    audio_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    video_selection: str = attr.ib(default=None)
    video_file: "OCI.ExtendedMediaFileLevelResource20" = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("audio_selection", "audioSelection", str),
            E(
                "audio_file",
                "audioFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E("video_selection", "videoSelection", str),
            E(
                "video_file",
                "videoFile",
                OCI.ExtendedMediaFileLevelResource20,
                is_complex=True,
            ),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPriorityAlertModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's priority alert service.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.PriorityAlertCriteriaFromDnModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.PriorityAlertCriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPrivacyGetAvailableMonitorsUserListRequest(OCIRequest):
    """
    Retrieves a list of users in the enterprise or group available for phone status
    monitoring the user specified in the userId element.

    The response is either ``UserPrivacyGetAvailableMonitorsUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserPushToTalkGetAvailableUserListRequest(OCIRequest):
    """
    Get a list of available users for the push to talk service.

    The response is either ``UserPushToTalkGetAvailableUserListResponse()`` or
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        response_size_limit: responseSizeLimit
        search_criteria_user_last_name: searchCriteriaUserLastName
        search_criteria_user_first_name: searchCriteriaUserFirstName
        search_criteria_exact_user_department: searchCriteriaExactUserDepartment
        search_criteria_exact_user_group: searchCriteriaExactUserGroup
        search_criteria_user_id: searchCriteriaUserId
        search_criteria_dn: searchCriteriaDn
        search_criteria_extension: searchCriteriaExtension
        search_criteria_imp_id: searchCriteriaImpId
    """

    user_id: str = attr.ib()
    response_size_limit: int = attr.ib(default=None)
    search_criteria_user_last_name: List[OCI.SearchCriteriaUserLastName] = attr.ib(default=None)
    search_criteria_user_first_name: List[OCI.SearchCriteriaUserFirstName] = attr.ib(default=None)
    search_criteria_exact_user_department: "OCI.SearchCriteriaExactUserDepartment" = attr.ib(default=None)
    search_criteria_exact_user_group: "OCI.SearchCriteriaExactUserGroup" = attr.ib(default=None)
    search_criteria_user_id: List[OCI.SearchCriteriaUserId] = attr.ib(default=None)
    search_criteria_dn: List[OCI.SearchCriteriaDn] = attr.ib(default=None)
    search_criteria_extension: List[OCI.SearchCriteriaExtension] = attr.ib(default=None)
    search_criteria_imp_id: List[OCI.SearchCriteriaImpId] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("response_size_limit", "responseSizeLimit", int),
            E(
                "search_criteria_user_last_name",
                "searchCriteriaUserLastName",
                OCI.SearchCriteriaUserLastName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_user_first_name",
                "searchCriteriaUserFirstName",
                OCI.SearchCriteriaUserFirstName,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_exact_user_department",
                "searchCriteriaExactUserDepartment",
                OCI.SearchCriteriaExactUserDepartment,
                is_complex=True,
            ),
            E(
                "search_criteria_exact_user_group",
                "searchCriteriaExactUserGroup",
                OCI.SearchCriteriaExactUserGroup,
                is_complex=True,
            ),
            E(
                "search_criteria_user_id",
                "searchCriteriaUserId",
                OCI.SearchCriteriaUserId,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_dn",
                "searchCriteriaDn",
                OCI.SearchCriteriaDn,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_extension",
                "searchCriteriaExtension",
                OCI.SearchCriteriaExtension,
                is_complex=True,
                is_array=True,
            ),
            E(
                "search_criteria_imp_id",
                "searchCriteriaImpId",
                OCI.SearchCriteriaImpId,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserScheduleGetEventDetailListRequest(OCIRequest):
    """
    Request the list of schedules viewable by a User.

    The list can be filtered by schedule type.

    The response is either a ``UserScheduleGetEventListForGroupResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        schedule_global_key: scheduleGlobalKey
    """

    user_id: str = attr.ib()
    schedule_global_key: "OCI.ScheduleGlobalKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "schedule_global_key",
                "scheduleGlobalKey",
                OCI.ScheduleGlobalKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallAcceptanceModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's selective call acceptance service.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's selective call rejection service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSelectiveCallRejectionModifyCriteriaRequest16(OCIRequest):
    """
    Modify a criteria for the user's selective call rejection service.

    For the callToNumbers in the callToNumberList, the extension element is not used and
    the number element is only used when the type is BroadWorks Mobility.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        call_to_number_list: callToNumberList
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.SelectiveCallRejectionCriteriaCallTypeModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    call_to_number_list: "OCI.ReplacementCallToNumberList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.SelectiveCallRejectionCriteriaCallTypeModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "call_to_number_list",
                "callToNumberList",
                OCI.ReplacementCallToNumberList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSequentialRingModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's sequential ring service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        from_dn_criteria: fromDnCriteria
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceAddEndpointRequest14(OCIRequest):
    """
    Associate an access device instance to the user's Shared Call Appearance.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device_endpoint: accessDeviceEndpoint
    """

    user_id: str = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceAddEndpointRequest14sp2(OCIRequest):
    """
    Associate an access device instance to the user's Shared Call Appearance.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device_endpoint: accessDeviceEndpoint
        is_active: isActive
        allow_origination: allowOrigination
        allow_termination: allowTermination
    """

    user_id: str = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointAdd" = attr.ib()
    is_active: bool = attr.ib()
    allow_origination: bool = attr.ib()
    allow_termination: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointAdd,
                is_complex=True,
                is_required=True,
            ),
            E("is_active", "isActive", bool, is_required=True),
            E("allow_origination", "allowOrigination", bool, is_required=True),
            E("allow_termination", "allowTermination", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceDeleteEndpointListRequest14(OCIRequest):
    """
    Disassociate one or more of a user's Shared Call Appearance endpoints.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device_endpoint: accessDeviceEndpoint
    """

    user_id: str = attr.ib()
    access_device_endpoint: List[OCI.AccessDeviceEndpointKey] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointKey,
                is_complex=True,
                is_required=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceGetEndpointRequest(OCIRequest):
    """
    Get the user's Shared Call Appearance endpoint setting.

    The response is either a ``UserSharedCallAppearanceGetEndpointResponse()`` or an
    ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device_endpoint: accessDeviceEndpoint
    """

    user_id: str = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointKey" = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointKey,
                is_complex=True,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSharedCallAppearanceModifyEndpointRequest(OCIRequest):
    """
    Associate/Disassociate an access device instance to the user's Shared Call Appearance.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        access_device_endpoint: accessDeviceEndpoint
        is_active: isActive
        allow_origination: allowOrigination
        allow_termination: allowTermination
    """

    user_id: str = attr.ib()
    access_device_endpoint: "OCI.AccessDeviceEndpointKey" = attr.ib()
    is_active: bool = attr.ib(default=None)
    allow_origination: bool = attr.ib(default=None)
    allow_termination: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointKey,
                is_complex=True,
                is_required=True,
            ),
            E("is_active", "isActive", bool),
            E("allow_origination", "allowOrigination", bool),
            E("allow_termination", "allowTermination", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's simultaneous ring family service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingFamilyModifyRequest17(OCIRequest):
    """
    Modify the user's simultaneous ring family service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        do_not_ring_if_on_call: doNotRingIfOnCall
        simultaneous_ring_number_list: simultaneousRingNumberList
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    do_not_ring_if_on_call: bool = attr.ib(default=None)
    simultaneous_ring_number_list: "OCI.SimultaneousRingReplacementNumberList" = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("do_not_ring_if_on_call", "doNotRingIfOnCall", bool),
            E(
                "simultaneous_ring_number_list",
                "simultaneousRingNumberList",
                OCI.SimultaneousRingReplacementNumberList,
                is_complex=True,
            ),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalModifyCriteriaRequest(OCIRequest):
    """
    Modify a criteria for the user's simultaneous ring personal service.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        criteria_name: criteriaName
        new_criteria_name: newCriteriaName
        time_schedule: timeSchedule
        holiday_schedule: holidaySchedule
        blacklisted: blacklisted
        from_dn_criteria: fromDnCriteria
    """

    user_id: str = attr.ib()
    criteria_name: str = attr.ib()
    new_criteria_name: str = attr.ib(default=None)
    time_schedule: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    blacklisted: bool = attr.ib(default=None)
    from_dn_criteria: "OCI.CriteriaFromDnModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("criteria_name", "criteriaName", str, is_required=True),
            E("new_criteria_name", "newCriteriaName", str),
            E("time_schedule", "timeSchedule", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("blacklisted", "blacklisted", bool),
            E(
                "from_dn_criteria",
                "fromDnCriteria",
                OCI.CriteriaFromDnModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserSimultaneousRingPersonalModifyRequest17(OCIRequest):
    """
    Modify the user's simultaneous ring personal service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        do_not_ring_if_on_call: doNotRingIfOnCall
        simultaneous_ring_number_list: simultaneousRingNumberList
        criteria_activation: criteriaActivation
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    do_not_ring_if_on_call: bool = attr.ib(default=None)
    simultaneous_ring_number_list: "OCI.SimultaneousRingReplacementNumberList" = attr.ib(default=None)
    criteria_activation: List[OCI.CriteriaActivation] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E("do_not_ring_if_on_call", "doNotRingIfOnCall", bool),
            E(
                "simultaneous_ring_number_list",
                "simultaneousRingNumberList",
                OCI.SimultaneousRingReplacementNumberList,
                is_complex=True,
            ),
            E(
                "criteria_activation",
                "criteriaActivation",
                OCI.CriteriaActivation,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVideoAddOnModifyRequest14(OCIRequest):
    """
    Modify the user's Video Add-On service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        is_active: isActive
        max_originating_call_delay_seconds: maxOriginatingCallDelaySeconds
        access_device_endpoint: accessDeviceEndpoint
    """

    user_id: str = attr.ib()
    is_active: bool = attr.ib(default=None)
    max_originating_call_delay_seconds: int = attr.ib(default=None)
    access_device_endpoint: "OCI.AccessDeviceEndpointModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("is_active", "isActive", bool),
            E(
                "max_originating_call_delay_seconds",
                "maxOriginatingCallDelaySeconds",
                int,
            ),
            E(
                "access_device_endpoint",
                "accessDeviceEndpoint",
                OCI.AccessDeviceEndpointModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyGreetingRequest(OCIRequest):
    """
    Modify the user's voice messaging greeting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.

    Replaced By: ``UserVoiceMessagingUserModifyGreetingRequest16()``

    Attributes:
        user_id: userId
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_video_file: busyPersonalVideoFile
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        no_answer_number_of_rings: noAnswerNumberOfRings
    """

    user_id: str = attr.ib()
    busy_announcement_selection: str = attr.ib(default=None)
    busy_personal_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    busy_personal_video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    no_answer_announcement_selection: str = attr.ib(default=None)
    no_answer_personal_audio_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    no_answer_personal_video_file: "OCI.LabeledFileResource" = attr.ib(default=None)
    no_answer_alternate_greeting01: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify" = attr.ib(default=None)
    no_answer_alternate_greeting02: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify" = attr.ib(default=None)
    no_answer_alternate_greeting03: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify" = attr.ib(default=None)
    no_answer_number_of_rings: int = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("busy_announcement_selection", "busyAnnouncementSelection", str),
            E(
                "busy_personal_audio_file",
                "busyPersonalAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "busy_personal_video_file",
                "busyPersonalVideoFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E("no_answer_announcement_selection", "noAnswerAnnouncementSelection", str),
            E(
                "no_answer_personal_audio_file",
                "noAnswerPersonalAudioFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "no_answer_personal_video_file",
                "noAnswerPersonalVideoFile",
                OCI.LabeledFileResource,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify,
                is_complex=True,
            ),
            E("no_answer_number_of_rings", "noAnswerNumberOfRings", int),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyGreetingRequest16(OCIRequest):
    """
    Modify the user's voice messaging greeting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.  The following elements are
    only used in AS data mode: disableMessageDeposit disableMessageDepositAction
    greetingOnlyForwardDestination Replaced by
    ``UserVoiceMessagingUserModifyGreetingRequest20()``

    Attributes:
        user_id: userId
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_video_file: busyPersonalVideoFile
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        extended_away_enabled: extendedAwayEnabled
        extended_away_disable_message_deposit: extendedAwayDisableMessageDeposit
        extended_away_audio_file: extendedAwayAudioFile
        extended_away_video_file: extendedAwayVideoFile
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        no_answer_number_of_rings: noAnswerNumberOfRings
        disable_message_deposit: disableMessageDeposit
        disable_message_deposit_action: disableMessageDepositAction
        greeting_only_forward_destination: greetingOnlyForwardDestination
    """

    user_id: str = attr.ib()
    busy_announcement_selection: str = attr.ib(default=None)
    busy_personal_audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    busy_personal_video_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    no_answer_announcement_selection: str = attr.ib(default=None)
    no_answer_personal_audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    no_answer_personal_video_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    extended_away_enabled: bool = attr.ib(default=None)
    extended_away_disable_message_deposit: bool = attr.ib(default=None)
    extended_away_audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    extended_away_video_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    no_answer_alternate_greeting01: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify16" = attr.ib(default=None)
    no_answer_alternate_greeting02: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify16" = attr.ib(default=None)
    no_answer_alternate_greeting03: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify16" = attr.ib(default=None)
    no_answer_number_of_rings: int = attr.ib(default=None)
    disable_message_deposit: bool = attr.ib(default=None)
    disable_message_deposit_action: str = attr.ib(default=None)
    greeting_only_forward_destination: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("busy_announcement_selection", "busyAnnouncementSelection", str),
            E(
                "busy_personal_audio_file",
                "busyPersonalAudioFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "busy_personal_video_file",
                "busyPersonalVideoFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E("no_answer_announcement_selection", "noAnswerAnnouncementSelection", str),
            E(
                "no_answer_personal_audio_file",
                "noAnswerPersonalAudioFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "no_answer_personal_video_file",
                "noAnswerPersonalVideoFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E("extended_away_enabled", "extendedAwayEnabled", bool),
            E(
                "extended_away_disable_message_deposit",
                "extendedAwayDisableMessageDeposit",
                bool,
            ),
            E(
                "extended_away_audio_file",
                "extendedAwayAudioFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "extended_away_video_file",
                "extendedAwayVideoFile",
                OCI.LabeledMediaFileResource,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify16,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify16,
                is_complex=True,
            ),
            E("no_answer_number_of_rings", "noAnswerNumberOfRings", int),
            E("disable_message_deposit", "disableMessageDeposit", bool),
            E("disable_message_deposit_action", "disableMessageDepositAction", str),
            E(
                "greeting_only_forward_destination",
                "greetingOnlyForwardDestination",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserVoiceMessagingUserModifyGreetingRequest20(OCIRequest):
    """
    Modify the user's voice messaging greeting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. Engineering
    Note: This command is used internally by Call Processing.  The following elements are
    only used in AS data mode: disableMessageDeposit disableMessageDepositAction
    greetingOnlyForwardDestination

    Attributes:
        user_id: userId
        busy_announcement_selection: busyAnnouncementSelection
        busy_personal_audio_file: busyPersonalAudioFile
        busy_personal_video_file: busyPersonalVideoFile
        no_answer_announcement_selection: noAnswerAnnouncementSelection
        no_answer_personal_audio_file: noAnswerPersonalAudioFile
        no_answer_personal_video_file: noAnswerPersonalVideoFile
        no_answer_alternate_greeting01: noAnswerAlternateGreeting01
        no_answer_alternate_greeting02: noAnswerAlternateGreeting02
        no_answer_alternate_greeting03: noAnswerAlternateGreeting03
        extended_away_enabled: extendedAwayEnabled
        extended_away_disable_message_deposit: extendedAwayDisableMessageDeposit
        extended_away_audio_file: extendedAwayAudioFile
        extended_away_video_file: extendedAwayVideoFile
        no_answer_number_of_rings: noAnswerNumberOfRings
        disable_message_deposit: disableMessageDeposit
        disable_message_deposit_action: disableMessageDepositAction
        greeting_only_forward_destination: greetingOnlyForwardDestination
    """

    user_id: str = attr.ib()
    busy_announcement_selection: str = attr.ib(default=None)
    busy_personal_audio_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    busy_personal_video_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    no_answer_announcement_selection: str = attr.ib(default=None)
    no_answer_personal_audio_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    no_answer_personal_video_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    no_answer_alternate_greeting01: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify20" = attr.ib(default=None)
    no_answer_alternate_greeting02: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify20" = attr.ib(default=None)
    no_answer_alternate_greeting03: "OCI.VoiceMessagingAlternateNoAnswerGreetingModify20" = attr.ib(default=None)
    extended_away_enabled: bool = attr.ib(default=None)
    extended_away_disable_message_deposit: bool = attr.ib(default=None)
    extended_away_audio_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    extended_away_video_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    no_answer_number_of_rings: int = attr.ib(default=None)
    disable_message_deposit: bool = attr.ib(default=None)
    disable_message_deposit_action: str = attr.ib(default=None)
    greeting_only_forward_destination: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("busy_announcement_selection", "busyAnnouncementSelection", str),
            E(
                "busy_personal_audio_file",
                "busyPersonalAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "busy_personal_video_file",
                "busyPersonalVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E("no_answer_announcement_selection", "noAnswerAnnouncementSelection", str),
            E(
                "no_answer_personal_audio_file",
                "noAnswerPersonalAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "no_answer_personal_video_file",
                "noAnswerPersonalVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting01",
                "noAnswerAlternateGreeting01",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify20,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting02",
                "noAnswerAlternateGreeting02",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify20,
                is_complex=True,
            ),
            E(
                "no_answer_alternate_greeting03",
                "noAnswerAlternateGreeting03",
                OCI.VoiceMessagingAlternateNoAnswerGreetingModify20,
                is_complex=True,
            ),
            E("extended_away_enabled", "extendedAwayEnabled", bool),
            E(
                "extended_away_disable_message_deposit",
                "extendedAwayDisableMessageDeposit",
                bool,
            ),
            E(
                "extended_away_audio_file",
                "extendedAwayAudioFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E(
                "extended_away_video_file",
                "extendedAwayVideoFile",
                OCI.AnnouncementFileLevelKey,
                is_complex=True,
            ),
            E("no_answer_number_of_rings", "noAnswerNumberOfRings", int),
            E("disable_message_deposit", "disableMessageDeposit", bool),
            E("disable_message_deposit_action", "disableMessageDepositAction", str),
            E(
                "greeting_only_forward_destination",
                "greetingOnlyForwardDestination",
                str,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportAddRequest(OCIRequest):
    """
    Request to add an enterprise level call center reporting scheduled report.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after startDate.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        description: description
        report_template: reportTemplate
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    report_template: "OCI.CallCenterReportTemplateKey" = attr.ib()
    schedule: "OCI.CallCenterReportSchedule" = attr.ib()
    sampling_period: str = attr.ib(default=None)
    start_day_of_week: str = attr.ib(default=None)
    report_time_zone: str = attr.ib()
    report_date_format: str = attr.ib()
    report_time_format: str = attr.ib()
    report_interval: "OCI.CallCenterReportInterval" = attr.ib()
    report_format: str = attr.ib()
    agent: "OCI.CallCenterScheduledReportAgentSelection" = attr.ib(default=None)
    call_center: "OCI.CallCenterScheduledReportCallCenterSelection" = attr.ib(default=None)
    dnis: "OCI.CallCenterScheduledReportDNISSelection" = attr.ib(default=None)
    call_completion_threshold_seconds: int = attr.ib(default=None)
    short_duration_threshold_seconds: int = attr.ib(default=None)
    service_level_threshold_seconds: List[int] = attr.ib(default=None)
    service_level_inclusions: "OCI.CallCenterScheduledReportServiceLevelInclusions" = attr.ib(default=None)
    service_level_objective_percentage: int = attr.ib(default=None)
    abandoned_call_threshold_seconds: List[int] = attr.ib(default=None)
    email_address: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "report_template",
                "reportTemplate",
                OCI.CallCenterReportTemplateKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "schedule",
                "schedule",
                OCI.CallCenterReportSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str, is_required=True),
            E("report_date_format", "reportDateFormat", str, is_required=True),
            E("report_time_format", "reportTimeFormat", str, is_required=True),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
                is_required=True,
            ),
            E("report_format", "reportFormat", str, is_required=True),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelection,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelection,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelection,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                int,
                is_array=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusions,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                int,
                is_array=True,
            ),
            E("email_address", "emailAddress", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseCallCenterEnhancedReportingScheduledReportModifyRequest(OCIRequest):
    """
    Request to modify an enterprise level call center reporting scheduled report.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after startDate.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        new_name: newName
        description: description
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    schedule: "OCI.CallCenterReportSchedule" = attr.ib(default=None)
    sampling_period: str = attr.ib(default=None)
    start_day_of_week: str = attr.ib(default=None)
    report_time_zone: str = attr.ib(default=None)
    report_date_format: str = attr.ib(default=None)
    report_time_format: str = attr.ib(default=None)
    report_interval: "OCI.CallCenterReportInterval" = attr.ib(default=None)
    report_format: str = attr.ib(default=None)
    agent: "OCI.CallCenterScheduledReportAgentSelection" = attr.ib(default=None)
    call_center: "OCI.CallCenterScheduledReportCallCenterSelection" = attr.ib(default=None)
    dnis: "OCI.CallCenterScheduledReportDNISSelection" = attr.ib(default=None)
    call_completion_threshold_seconds: int = attr.ib(default=None)
    short_duration_threshold_seconds: int = attr.ib(default=None)
    service_level_threshold_seconds: "OCI.CallCenterReportServiceLevelThresholdReplacementList" = attr.ib(default=None)
    service_level_inclusions: "OCI.CallCenterScheduledReportServiceLevelInclusionsModify" = attr.ib(default=None)
    service_level_objective_percentage: int = attr.ib(default=None)
    abandoned_call_threshold_seconds: "OCI.CallCenterReportAbandonedCallThresholdReplacementList" = attr.ib(default=None)
    email_address: "OCI.CallCenterReportReplacementEmailList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("schedule", "schedule", OCI.CallCenterReportSchedule, is_complex=True),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str),
            E("report_date_format", "reportDateFormat", str),
            E("report_time_format", "reportTimeFormat", str),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
            ),
            E("report_format", "reportFormat", str),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelection,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelection,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelection,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                OCI.CallCenterReportServiceLevelThresholdReplacementList,
                is_complex=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusionsModify,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                OCI.CallCenterReportAbandonedCallThresholdReplacementList,
                is_complex=True,
            ),
            E(
                "email_address",
                "emailAddress",
                OCI.CallCenterReportReplacementEmailList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class EnterpriseSessionAdmissionControlGroupModifyRequest(OCIRequest):
    """
    Request to modify a session admission control group for the enterprise.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        name: name
        new_name: newName
        max_session: maxSession
        max_user_originating_sessions: maxUserOriginatingSessions
        max_user_terminating_sessions: maxUserTerminatingSessions
        reserved_session: reservedSession
        reserved_user_originating_sessions: reservedUserOriginatingSessions
        reserved_user_terminating_sessions: reservedUserTerminatingSessions
        become_default_group: becomeDefaultGroup
        count_intra_sac_group_sessions: countIntraSACGroupSessions
        device_list: deviceList
        block_emergency_and_repair_calls_due_to_sac_limits:
            blockEmergencyAndRepairCallsDueToSACLimits
    """

    service_provider_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    max_session: int = attr.ib(default=None)
    max_user_originating_sessions: int = attr.ib(default=None)
    max_user_terminating_sessions: int = attr.ib(default=None)
    reserved_session: int = attr.ib(default=None)
    reserved_user_originating_sessions: int = attr.ib(default=None)
    reserved_user_terminating_sessions: int = attr.ib(default=None)
    become_default_group: bool = attr.ib(default=None)
    count_intra_sac_group_sessions: bool = attr.ib(default=None)
    device_list: "OCI.ReplacementEnterpriseDeviceList" = attr.ib(default=None)
    block_emergency_and_repair_calls_due_to_sac_limits: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("max_session", "maxSession", int),
            E("max_user_originating_sessions", "maxUserOriginatingSessions", int),
            E("max_user_terminating_sessions", "maxUserTerminatingSessions", int),
            E("reserved_session", "reservedSession", int),
            E(
                "reserved_user_originating_sessions",
                "reservedUserOriginatingSessions",
                int,
            ),
            E(
                "reserved_user_terminating_sessions",
                "reservedUserTerminatingSessions",
                int,
            ),
            E("become_default_group", "becomeDefaultGroup", bool),
            E("count_intra_sac_group_sessions", "countIntraSACGroupSessions", bool),
            E(
                "device_list",
                "deviceList",
                OCI.ReplacementEnterpriseDeviceList,
                is_complex=True,
            ),
            E(
                "block_emergency_and_repair_calls_due_to_sac_limits",
                "blockEmergencyAndRepairCallsDueToSACLimits",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuAddRequest(OCIRequest):
    """
    Request to add an Auto Attendant submenu instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. This request is
    only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        enable_level_extension_dialing: enableLevelExtensionDialing
        key_configuration: keyConfiguration
    """

    service_user_id: str = attr.ib()
    submenu_id: str = attr.ib()
    announcement_selection: str = attr.ib()
    audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    enable_level_extension_dialing: bool = attr.ib()
    key_configuration: List[OCI.AutoAttendantKeyConfiguration19] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.LabeledMediaFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledMediaFileResource, is_complex=True),
            E(
                "enable_level_extension_dialing",
                "enableLevelExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "key_configuration",
                "keyConfiguration",
                OCI.AutoAttendantKeyConfiguration19,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuAddRequest20(OCIRequest):
    """
    Request to add an Auto Attendant submenu instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. This request is
    only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        enable_level_extension_dialing: enableLevelExtensionDialing
        key_configuration: keyConfiguration
    """

    service_user_id: str = attr.ib()
    submenu_id: str = attr.ib()
    announcement_selection: str = attr.ib()
    audio_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    video_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    enable_level_extension_dialing: bool = attr.ib()
    key_configuration: List[OCI.AutoAttendantKeyConfiguration20] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True),
            E("announcement_selection", "announcementSelection", str, is_required=True),
            E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E(
                "enable_level_extension_dialing",
                "enableLevelExtensionDialing",
                bool,
                is_required=True,
            ),
            E(
                "key_configuration",
                "keyConfiguration",
                OCI.AutoAttendantKeyConfiguration20,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuModifyRequest(OCIRequest):
    """
    Request to modify an Auto Attendant submenu instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. This request is
    only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
        new_submenu_id: newSubmenuId
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        enable_level_extension_dialing: enableLevelExtensionDialing
        key_configuration: keyConfiguration
    """

    service_user_id: str = attr.ib()
    submenu_id: str = attr.ib()
    new_submenu_id: str = attr.ib(default=None)
    announcement_selection: str = attr.ib(default=None)
    audio_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    video_file: "OCI.LabeledMediaFileResource" = attr.ib(default=None)
    enable_level_extension_dialing: bool = attr.ib(default=None)
    key_configuration: List[OCI.AutoAttendantKeyModifyConfiguration] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True),
            E("new_submenu_id", "newSubmenuId", str),
            E("announcement_selection", "announcementSelection", str),
            E("audio_file", "audioFile", OCI.LabeledMediaFileResource, is_complex=True),
            E("video_file", "videoFile", OCI.LabeledMediaFileResource, is_complex=True),
            E("enable_level_extension_dialing", "enableLevelExtensionDialing", bool),
            E(
                "key_configuration",
                "keyConfiguration",
                OCI.AutoAttendantKeyModifyConfiguration,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantSubmenuModifyRequest20(OCIRequest):
    """
    Request to modify an Auto Attendant submenu instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. This request is
    only valid for Standard auto attendants.

    Attributes:
        service_user_id: serviceUserId
        submenu_id: submenuId
        new_submenu_id: newSubmenuId
        announcement_selection: announcementSelection
        audio_file: audioFile
        video_file: videoFile
        enable_level_extension_dialing: enableLevelExtensionDialing
        key_configuration: keyConfiguration
    """

    service_user_id: str = attr.ib()
    submenu_id: str = attr.ib()
    new_submenu_id: str = attr.ib(default=None)
    announcement_selection: str = attr.ib(default=None)
    audio_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    video_file: "OCI.AnnouncementFileLevelKey" = attr.ib(default=None)
    enable_level_extension_dialing: bool = attr.ib(default=None)
    key_configuration: List[OCI.AutoAttendantKeyModifyConfiguration20] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("submenu_id", "submenuId", str, is_required=True),
            E("new_submenu_id", "newSubmenuId", str),
            E("announcement_selection", "announcementSelection", str),
            E("audio_file", "audioFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("video_file", "videoFile", OCI.AnnouncementFileLevelKey, is_complex=True),
            E("enable_level_extension_dialing", "enableLevelExtensionDialing", bool),
            E(
                "key_configuration",
                "keyConfiguration",
                OCI.AutoAttendantKeyModifyConfiguration20,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportAddRequest(OCIRequest):
    """
    Request to add a group level call center reporting scheduled report.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after startDate.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        description: description
        report_template: reportTemplate
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    description: str = attr.ib(default=None)
    report_template: "OCI.CallCenterReportTemplateKey" = attr.ib()
    schedule: "OCI.CallCenterReportSchedule" = attr.ib()
    sampling_period: str = attr.ib(default=None)
    start_day_of_week: str = attr.ib(default=None)
    report_time_zone: str = attr.ib()
    report_date_format: str = attr.ib()
    report_time_format: str = attr.ib()
    report_interval: "OCI.CallCenterReportInterval" = attr.ib()
    report_format: str = attr.ib()
    agent: "OCI.CallCenterScheduledReportAgentSelection" = attr.ib(default=None)
    call_center: "OCI.CallCenterScheduledReportCallCenterSelection" = attr.ib(default=None)
    dnis: "OCI.CallCenterScheduledReportDNISSelection" = attr.ib(default=None)
    call_completion_threshold_seconds: int = attr.ib(default=None)
    short_duration_threshold_seconds: int = attr.ib(default=None)
    service_level_threshold_seconds: List[int] = attr.ib(default=None)
    service_level_inclusions: "OCI.CallCenterScheduledReportServiceLevelInclusions" = attr.ib(default=None)
    service_level_objective_percentage: int = attr.ib(default=None)
    abandoned_call_threshold_seconds: List[int] = attr.ib(default=None)
    email_address: List[str] = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("description", "description", str),
            E(
                "report_template",
                "reportTemplate",
                OCI.CallCenterReportTemplateKey,
                is_complex=True,
                is_required=True,
            ),
            E(
                "schedule",
                "schedule",
                OCI.CallCenterReportSchedule,
                is_complex=True,
                is_required=True,
            ),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str, is_required=True),
            E("report_date_format", "reportDateFormat", str, is_required=True),
            E("report_time_format", "reportTimeFormat", str, is_required=True),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
                is_required=True,
            ),
            E("report_format", "reportFormat", str, is_required=True),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelection,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelection,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelection,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                int,
                is_array=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusions,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                int,
                is_array=True,
            ),
            E("email_address", "emailAddress", str, is_required=True, is_array=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterEnhancedReportingScheduledReportModifyRequest(OCIRequest):
    """
    Request to modify a group level call center reporting scheduled report.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after startDate.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        name: name
        new_name: newName
        description: description
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    schedule: "OCI.CallCenterReportSchedule" = attr.ib(default=None)
    sampling_period: str = attr.ib(default=None)
    start_day_of_week: str = attr.ib(default=None)
    report_time_zone: str = attr.ib(default=None)
    report_date_format: str = attr.ib(default=None)
    report_time_format: str = attr.ib(default=None)
    report_interval: "OCI.CallCenterReportInterval" = attr.ib(default=None)
    report_format: str = attr.ib(default=None)
    agent: "OCI.CallCenterScheduledReportAgentSelection" = attr.ib(default=None)
    call_center: "OCI.CallCenterScheduledReportCallCenterSelection" = attr.ib(default=None)
    dnis: "OCI.CallCenterScheduledReportDNISSelection" = attr.ib(default=None)
    call_completion_threshold_seconds: int = attr.ib(default=None)
    short_duration_threshold_seconds: int = attr.ib(default=None)
    service_level_threshold_seconds: "OCI.CallCenterReportServiceLevelThresholdReplacementList" = attr.ib(default=None)
    service_level_inclusions: "OCI.CallCenterScheduledReportServiceLevelInclusionsModify" = attr.ib(default=None)
    service_level_objective_percentage: int = attr.ib(default=None)
    abandoned_call_threshold_seconds: "OCI.CallCenterReportAbandonedCallThresholdReplacementList" = attr.ib(default=None)
    email_address: "OCI.CallCenterReportReplacementEmailList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("schedule", "schedule", OCI.CallCenterReportSchedule, is_complex=True),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str),
            E("report_date_format", "reportDateFormat", str),
            E("report_time_format", "reportTimeFormat", str),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
            ),
            E("report_format", "reportFormat", str),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelection,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelection,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelection,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                OCI.CallCenterReportServiceLevelThresholdReplacementList,
                is_complex=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusionsModify,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                OCI.CallCenterReportAbandonedCallThresholdReplacementList,
                is_complex=True,
            ),
            E(
                "email_address",
                "emailAddress",
                OCI.CallCenterReportReplacementEmailList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyAnnouncementRequest16(OCIRequest):
    """
    Modify a call center's announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_file: entranceMessageAudioFile
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_file: entranceMessageVideoFile
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_file: periodicComfortMessageAudioFile
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_file: periodicComfortMessageVideoFile
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
    """

    service_user_id: str = attr.ib()
    play_entrance_message: bool = attr.ib(default=None)
    mandatory_entrance_message: bool = attr.ib(default=None)
    entrance_audio_message_selection: str = attr.ib(default=None)
    entrance_message_audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    entrance_video_message_selection: str = attr.ib(default=None)
    entrance_message_video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    play_periodic_comfort_message: bool = attr.ib(default=None)
    time_between_comfort_messages_seconds: int = attr.ib(default=None)
    periodic_comfort_audio_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_audio_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    periodic_comfort_video_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_video_file: "OCI.ExtendedMediaFileResource" = attr.ib(default=None)
    enable_media_on_hold_for_queued_calls: bool = attr.ib(default=None)
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify16" = attr.ib(default=None)
    media_on_hold_use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    media_on_hold_internal_source: "OCI.CallCenterMediaOnHoldSourceModify16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("play_entrance_message", "playEntranceMessage", bool),
            E("mandatory_entrance_message", "mandatoryEntranceMessage", bool),
            E("entrance_audio_message_selection", "entranceAudioMessageSelection", str),
            E(
                "entrance_message_audio_file",
                "entranceMessageAudioFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_file",
                "entranceMessageVideoFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
            E("play_periodic_comfort_message", "playPeriodicComfortMessage", bool),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_audio_file",
                "periodicComfortMessageAudioFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_file",
                "periodicComfortMessageVideoFile",
                OCI.ExtendedMediaFileResource,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify16,
                is_complex=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceModify16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyAnnouncementRequest17(OCIRequest):
    """
    Modify a call center's announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        estimated_wait_message_options_modify: estimatedWaitMessageOptionsModify
    """

    service_user_id: str = attr.ib()
    play_entrance_message: bool = attr.ib(default=None)
    mandatory_entrance_message: bool = attr.ib(default=None)
    entrance_audio_message_selection: str = attr.ib(default=None)
    entrance_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    entrance_video_message_selection: str = attr.ib(default=None)
    entrance_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    play_periodic_comfort_message: bool = attr.ib(default=None)
    time_between_comfort_messages_seconds: int = attr.ib(default=None)
    periodic_comfort_audio_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    periodic_comfort_video_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    enable_media_on_hold_for_queued_calls: bool = attr.ib(default=None)
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify17" = attr.ib(default=None)
    media_on_hold_use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    media_on_hold_internal_source: "OCI.CallCenterMediaOnHoldSourceModify17" = attr.ib(default=None)
    play_whisper_message: bool = attr.ib(default=None)
    whisper_audio_message_selection: str = attr.ib(default=None)
    whisper_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    whisper_video_message_selection: str = attr.ib(default=None)
    whisper_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    estimated_wait_message_options_modify: "OCI.EstimatedWaitMessageOptionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("play_entrance_message", "playEntranceMessage", bool),
            E("mandatory_entrance_message", "mandatoryEntranceMessage", bool),
            E("entrance_audio_message_selection", "entranceAudioMessageSelection", str),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("play_periodic_comfort_message", "playPeriodicComfortMessage", bool),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify17,
                is_complex=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceModify17,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_modify",
                "estimatedWaitMessageOptionsModify",
                OCI.EstimatedWaitMessageOptionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyAnnouncementRequest20(OCIRequest):
    """
    Modify a call center's announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        media_on_hold_use_alternate_source_for_internal_calls:
            mediaOnHoldUseAlternateSourceForInternalCalls
        media_on_hold_internal_source: mediaOnHoldInternalSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        estimated_wait_message_options_modify: estimatedWaitMessageOptionsModify
    """

    service_user_id: str = attr.ib()
    play_entrance_message: bool = attr.ib(default=None)
    mandatory_entrance_message: bool = attr.ib(default=None)
    entrance_audio_message_selection: str = attr.ib(default=None)
    entrance_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    entrance_video_message_selection: str = attr.ib(default=None)
    entrance_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    play_periodic_comfort_message: bool = attr.ib(default=None)
    time_between_comfort_messages_seconds: int = attr.ib(default=None)
    periodic_comfort_audio_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    periodic_comfort_video_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    enable_media_on_hold_for_queued_calls: bool = attr.ib(default=None)
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify20" = attr.ib(default=None)
    media_on_hold_use_alternate_source_for_internal_calls: bool = attr.ib(default=None)
    media_on_hold_internal_source: "OCI.CallCenterMediaOnHoldSourceModify20" = attr.ib(default=None)
    play_whisper_message: bool = attr.ib(default=None)
    whisper_audio_message_selection: str = attr.ib(default=None)
    whisper_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    whisper_video_message_selection: str = attr.ib(default=None)
    whisper_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    estimated_wait_message_options_modify: "OCI.EstimatedWaitMessageOptionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E("play_entrance_message", "playEntranceMessage", bool),
            E("mandatory_entrance_message", "mandatoryEntranceMessage", bool),
            E("entrance_audio_message_selection", "entranceAudioMessageSelection", str),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("play_periodic_comfort_message", "playPeriodicComfortMessage", bool),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify20,
                is_complex=True,
            ),
            E(
                "media_on_hold_use_alternate_source_for_internal_calls",
                "mediaOnHoldUseAlternateSourceForInternalCalls",
                bool,
            ),
            E(
                "media_on_hold_internal_source",
                "mediaOnHoldInternalSource",
                OCI.CallCenterMediaOnHoldSourceModify20,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_modify",
                "estimatedWaitMessageOptionsModify",
                OCI.EstimatedWaitMessageOptionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyDNISAnnouncementRequest(OCIRequest):
    """
    Modify a call center DNIS announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        estimated_wait_message_options_modify: estimatedWaitMessageOptionsModify
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    play_entrance_message: bool = attr.ib(default=None)
    mandatory_entrance_message: bool = attr.ib(default=None)
    entrance_audio_message_selection: str = attr.ib(default=None)
    entrance_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    entrance_video_message_selection: str = attr.ib(default=None)
    entrance_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    play_periodic_comfort_message: bool = attr.ib(default=None)
    time_between_comfort_messages_seconds: int = attr.ib(default=None)
    periodic_comfort_audio_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    periodic_comfort_video_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    enable_media_on_hold_for_queued_calls: bool = attr.ib(default=None)
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify17" = attr.ib(default=None)
    play_whisper_message: bool = attr.ib(default=None)
    whisper_audio_message_selection: str = attr.ib(default=None)
    whisper_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    whisper_video_message_selection: str = attr.ib(default=None)
    whisper_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify" = attr.ib(default=None)
    estimated_wait_message_options_modify: "OCI.EstimatedWaitMessageOptionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E("play_entrance_message", "playEntranceMessage", bool),
            E("mandatory_entrance_message", "mandatoryEntranceMessage", bool),
            E("entrance_audio_message_selection", "entranceAudioMessageSelection", str),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("play_periodic_comfort_message", "playPeriodicComfortMessage", bool),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify17,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_modify",
                "estimatedWaitMessageOptionsModify",
                OCI.EstimatedWaitMessageOptionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupCallCenterModifyDNISAnnouncementRequest20(OCIRequest):
    """
    Modify a call center DNIS announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
        play_entrance_message: playEntranceMessage
        mandatory_entrance_message: mandatoryEntranceMessage
        entrance_audio_message_selection: entranceAudioMessageSelection
        entrance_message_audio_url_list: entranceMessageAudioUrlList
        entrance_message_audio_file_list: entranceMessageAudioFileList
        entrance_video_message_selection: entranceVideoMessageSelection
        entrance_message_video_url_list: entranceMessageVideoUrlList
        entrance_message_video_file_list: entranceMessageVideoFileList
        play_periodic_comfort_message: playPeriodicComfortMessage
        time_between_comfort_messages_seconds: timeBetweenComfortMessagesSeconds
        periodic_comfort_audio_message_selection: periodicComfortAudioMessageSelection
        periodic_comfort_message_audio_url_list: periodicComfortMessageAudioUrlList
        periodic_comfort_message_audio_file_list: periodicComfortMessageAudioFileList
        periodic_comfort_video_message_selection: periodicComfortVideoMessageSelection
        periodic_comfort_message_video_url_list: periodicComfortMessageVideoUrlList
        periodic_comfort_message_video_file_list: periodicComfortMessageVideoFileList
        enable_media_on_hold_for_queued_calls: enableMediaOnHoldForQueuedCalls
        media_on_hold_source: mediaOnHoldSource
        play_whisper_message: playWhisperMessage
        whisper_audio_message_selection: whisperAudioMessageSelection
        whisper_message_audio_url_list: whisperMessageAudioUrlList
        whisper_message_audio_file_list: whisperMessageAudioFileList
        whisper_video_message_selection: whisperVideoMessageSelection
        whisper_message_video_url_list: whisperMessageVideoUrlList
        whisper_message_video_file_list: whisperMessageVideoFileList
        estimated_wait_message_options_modify: estimatedWaitMessageOptionsModify
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    play_entrance_message: bool = attr.ib(default=None)
    mandatory_entrance_message: bool = attr.ib(default=None)
    entrance_audio_message_selection: str = attr.ib(default=None)
    entrance_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    entrance_video_message_selection: str = attr.ib(default=None)
    entrance_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    entrance_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    play_periodic_comfort_message: bool = attr.ib(default=None)
    time_between_comfort_messages_seconds: int = attr.ib(default=None)
    periodic_comfort_audio_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    periodic_comfort_video_message_selection: str = attr.ib(default=None)
    periodic_comfort_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    periodic_comfort_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    enable_media_on_hold_for_queued_calls: bool = attr.ib(default=None)
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify20" = attr.ib(default=None)
    play_whisper_message: bool = attr.ib(default=None)
    whisper_audio_message_selection: str = attr.ib(default=None)
    whisper_message_audio_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_audio_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    whisper_video_message_selection: str = attr.ib(default=None)
    whisper_message_video_url_list: "OCI.CallCenterAnnouncementURLListModify" = attr.ib(default=None)
    whisper_message_video_file_list: "OCI.CallCenterAnnouncementFileListModify20" = attr.ib(default=None)
    estimated_wait_message_options_modify: "OCI.EstimatedWaitMessageOptionsModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E("play_entrance_message", "playEntranceMessage", bool),
            E("mandatory_entrance_message", "mandatoryEntranceMessage", bool),
            E("entrance_audio_message_selection", "entranceAudioMessageSelection", str),
            E(
                "entrance_message_audio_url_list",
                "entranceMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_audio_file_list",
                "entranceMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("entrance_video_message_selection", "entranceVideoMessageSelection", str),
            E(
                "entrance_message_video_url_list",
                "entranceMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "entrance_message_video_file_list",
                "entranceMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("play_periodic_comfort_message", "playPeriodicComfortMessage", bool),
            E(
                "time_between_comfort_messages_seconds",
                "timeBetweenComfortMessagesSeconds",
                int,
            ),
            E(
                "periodic_comfort_audio_message_selection",
                "periodicComfortAudioMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_audio_url_list",
                "periodicComfortMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_audio_file_list",
                "periodicComfortMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E(
                "periodic_comfort_video_message_selection",
                "periodicComfortVideoMessageSelection",
                str,
            ),
            E(
                "periodic_comfort_message_video_url_list",
                "periodicComfortMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "periodic_comfort_message_video_file_list",
                "periodicComfortMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E(
                "enable_media_on_hold_for_queued_calls",
                "enableMediaOnHoldForQueuedCalls",
                bool,
            ),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify20,
                is_complex=True,
            ),
            E("play_whisper_message", "playWhisperMessage", bool),
            E("whisper_audio_message_selection", "whisperAudioMessageSelection", str),
            E(
                "whisper_message_audio_url_list",
                "whisperMessageAudioUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_audio_file_list",
                "whisperMessageAudioFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E("whisper_video_message_selection", "whisperVideoMessageSelection", str),
            E(
                "whisper_message_video_url_list",
                "whisperMessageVideoUrlList",
                OCI.CallCenterAnnouncementURLListModify,
                is_complex=True,
            ),
            E(
                "whisper_message_video_file_list",
                "whisperMessageVideoFileList",
                OCI.CallCenterAnnouncementFileListModify20,
                is_complex=True,
            ),
            E(
                "estimated_wait_message_options_modify",
                "estimatedWaitMessageOptionsModify",
                OCI.EstimatedWaitMessageOptionsModify,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDigitPlanCallMeNowModifyListRequest(OCIRequest):
    """
    Modify the Call Me Now call permissions for digit patterns for a group default and
    it's departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingCallingPlanDigitPatternCallMeNowDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanDigitPatternCallMeNowDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDigitPlanOriginatingModifyListRequest(OCIRequest):
    """
    Modify the originating permissions for digit patterns for a group default and it's
    departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingCallingPlanDigitPatternOriginatingDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanDigitPatternOriginatingDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanDigitPlanRedirectingModifyListRequest(OCIRequest):
    """
    Modify the redirecting permissions for digit patterns for a group default and it's
    departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingCallingPlanDigitPatternRedirectingDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingCallingPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingCallingPlanDigitPatternRedirectingDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyListRequest(OCIRequest):
    """
    Modify the Call Me Now permissions for Pinhole digit patterns for a group default and
    its departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternCallMeNowDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPlanOriginatingModifyListRequest(OCIRequest):
    """
    Modify the originating permissions for Pinhole digit patterns for a group default and
    its departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternOriginatingDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupOutgoingCallingPlanPinholeDigitPlanRedirectingModifyListRequest(OCIRequest):
    """
    Modify the redirecting permissions for Pinhole digit patterns for a group default and
    its departments.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        group_permissions: groupPermissions
        department_permissions: departmentPermissions
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    group_permissions: "OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions" = attr.ib(default=None)
    department_permissions: List[OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingDepartmentPermissionsModify] = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E(
                "group_permissions",
                "groupPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingPermissions,
                is_complex=True,
            ),
            E(
                "department_permissions",
                "departmentPermissions",
                OCI.OutgoingPinholeDigitPlanDigitPatternRedirectingDepartmentPermissionsModify,
                is_complex=True,
                is_array=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyAnnouncementRequest(OCIRequest):
    """
    Modify a route point's announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        media_on_hold_source: mediaOnHoldSource
    """

    service_user_id: str = attr.ib()
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify17" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify17,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyAnnouncementRequest20(OCIRequest):
    """
    Modify a route point's announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        media_on_hold_source: mediaOnHoldSource
    """

    service_user_id: str = attr.ib()
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyDNISAnnouncementRequest(OCIRequest):
    """
    Modify a route point DNIS announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
        media_on_hold_source: mediaOnHoldSource
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify17" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify17,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupRoutePointModifyDNISAnnouncementRequest20(OCIRequest):
    """
    Modify a route point DNIS announcement settings.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        dnis_key: dnisKey
        media_on_hold_source: mediaOnHoldSource
    """

    dnis_key: "OCI.DNISKey" = attr.ib()
    media_on_hold_source: "OCI.CallCenterMediaOnHoldSourceModify20" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("dnis_key", "dnisKey", OCI.DNISKey, is_complex=True, is_required=True),
            E(
                "media_on_hold_source",
                "mediaOnHoldSource",
                OCI.CallCenterMediaOnHoldSourceModify20,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest14sp6(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By : ``SystemSIPDeviceTypeAddRequest15()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        supports_broad_works_info_for_call_waiting: supportsBroadWorksINFOForCallWaiting
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions14sp6" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    tdm_overlay: bool = attr.ib()
    supports_broad_works_info_for_call_waiting: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions14sp6,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E("tdm_overlay", "tdmOverlay", bool, is_required=True),
            E(
                "supports_broad_works_info_for_call_waiting",
                "supportsBroadWorksINFOForCallWaiting",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest15(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By : ``SystemSIPDeviceTypeAddRequest16()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions14sp6" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    tdm_overlay: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions14sp6,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E("tdm_overlay", "tdmOverlay", bool, is_required=True),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest16(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``SystemSIPDeviceTypeAddRequest16sp1()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest16sp1(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``SystemSIPDeviceTypeAddRequest17()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    use_business_trunking_contact: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "use_business_trunking_contact",
                "useBusinessTrunkingContact",
                bool,
                is_required=True,
            ),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest17(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest17sp4(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``SystemSIPDeviceTypeAddRequest18()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()
    support_identity_in_update_and_re_invite: bool = attr.ib()
    unscreened_presentation_identity_policy: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest18(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode: enable3G4GContinuity Replaced by:
    ``SystemSIPDeviceTypeAddRequest19()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    rfc3264_hold: bool = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()
    support_identity_in_update_and_re_invite: bool = attr.ib()
    unscreened_presentation_identity_policy: str = attr.ib()
    enable3_g4_g_continuity: bool = attr.ib()
    support_emergency_disconnect_control: bool = attr.ib()
    device_type_configuration_option: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("rfc3264_hold", "RFC3264Hold", bool, is_required=True),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest18sp1(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode: enable3G4GContinuity, use value "false" in AS
    data mode The following elements are only used in AS data mode:
    holdAnnouncementMethod, use value "useInactive" in HSS data mode The following element
    values are only applicable in AS data mode: holdNormalization=useRfc3264Hold will
    raise an error in HSS data mode

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    hold_normalization: str = attr.ib()
    hold_announcement_method: str = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()
    support_identity_in_update_and_re_invite: bool = attr.ib()
    unscreened_presentation_identity_policy: str = attr.ib()
    enable3_g4_g_continuity: bool = attr.ib()
    support_emergency_disconnect_control: bool = attr.ib()
    device_type_configuration_option: str = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest19(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode: enable3G4GContinuity, use value "false" in AS
    data mode The following elements are only used in AS data mode:
    holdAnnouncementMethod, use value "useInactive" in HSS data mode supportRFC3398, use
    value "false" in HSS data mode The following element values are only applicable in AS
    data mode: holdNormalization=useRfc3264Hold will raise an error in HSS data mode
    Replaced by: ``SystemSIPDeviceTypeAddRequest19sp1()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    hold_normalization: str = attr.ib()
    hold_announcement_method: str = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()
    support_identity_in_update_and_re_invite: bool = attr.ib()
    unscreened_presentation_identity_policy: str = attr.ib()
    enable3_g4_g_continuity: bool = attr.ib()
    support_emergency_disconnect_control: bool = attr.ib()
    device_type_configuration_option: str = attr.ib()
    support_rfc3398: bool = attr.ib()
    static_line_ordering: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest19sp1(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode: enable3G4GContinuity, use value "false" in AS
    data mode The following elements are only used in AS data mode:
    holdAnnouncementMethod, use value "useInactive" in HSS data mode supportRFC3398, use
    value "false" in HSS data mode bypassMediaTreatment, use value "false" in HSS data
    mode The following element values are only applicable in AS data mode:
    holdNormalization=useRfc3264Hold will raise an error in HSS data mode Replaced by:
    ``SystemSIPDeviceTypeAddRequest20()``

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
        bypass_media_treatment: bypassMediaTreatment
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    hold_normalization: str = attr.ib()
    hold_announcement_method: str = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()
    support_identity_in_update_and_re_invite: bool = attr.ib()
    unscreened_presentation_identity_policy: str = attr.ib()
    enable3_g4_g_continuity: bool = attr.ib()
    support_emergency_disconnect_control: bool = attr.ib()
    device_type_configuration_option: str = attr.ib()
    support_rfc3398: bool = attr.ib()
    static_line_ordering: bool = attr.ib()
    bypass_media_treatment: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
            E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest20(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode: enable3G4GContinuity, use value "false" in AS
    data mode The following elements are only used in AS data mode:
    holdAnnouncementMethod, use value "useInactive" in HSS data mode supportRFC3398, use
    value "false" in HSS data mode supportClientSessionInfo, use value "false" in HSS data
    mode supportCallInfoConferenceSubscriptionURI, use value "false" in HSS data mode
    supportRemotePartyInfo, use value "false" in HSS data mode The following element
    values are only applicable in AS data mode: holdNormalization=useRfc3264Hold will
    raise an error in HSS data mode

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
        support_client_session_info: supportClientSessionInfo
        support_call_info_conference_subscription_uri:
            supportCallInfoConferenceSubscriptionURI
        support_remote_party_info: supportRemotePartyInfo
        support_visual_device_management: supportVisualDeviceManagement
        bypass_media_treatment: bypassMediaTreatment
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    hold_normalization: str = attr.ib()
    hold_announcement_method: str = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()
    support_identity_in_update_and_re_invite: bool = attr.ib()
    unscreened_presentation_identity_policy: str = attr.ib()
    enable3_g4_g_continuity: bool = attr.ib()
    support_emergency_disconnect_control: bool = attr.ib()
    device_type_configuration_option: str = attr.ib()
    support_rfc3398: bool = attr.ib()
    static_line_ordering: bool = attr.ib()
    support_client_session_info: bool = attr.ib()
    support_call_info_conference_subscription_uri: bool = attr.ib()
    support_remote_party_info: bool = attr.ib()
    support_visual_device_management: bool = attr.ib()
    bypass_media_treatment: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
            E(
                "support_client_session_info",
                "supportClientSessionInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_call_info_conference_subscription_uri",
                "supportCallInfoConferenceSubscriptionURI",
                bool,
                is_required=True,
            ),
            E(
                "support_remote_party_info",
                "supportRemotePartyInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_visual_device_management",
                "supportVisualDeviceManagement",
                bool,
                is_required=True,
            ),
            E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeAddRequest21(OCIRequest):
    """
    Request to add a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode: enhancedForICS, use value "false" in AS data
    mode supports3G4GContinuity, use value "false" in AS data mode publishesOwnPresence,
    use value "false" in AS data mode The following elements are only used in AS data
    mode: holdAnnouncementMethod, use value "useInactive" in HSS data mode supportRFC3398,
    use value "false" in HSS data mode supportClientSessionInfo, use value "false" in HSS
    data mode supportCallInfoConferenceSubscriptionURI, use value "false" in HSS data mode
    supportRemotePartyInfo, use value "false" in HSS data mode The following element
    values are only applicable in AS data mode: holdNormalization=useRfc3264Hold will
    raise an error in HSS data mode The following elements are only used in AS data mode
    and ignored in HSS data mode: supportCauseParameter

    Attributes:
        device_type: deviceType
        number_of_ports: numberOfPorts
        profile: profile
        registration_capable: registrationCapable
        is_conference_device: isConferenceDevice
        is_mobility_manager_device: isMobilityManagerDevice
        is_music_on_hold_device: isMusicOnHoldDevice
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enhanced_for_ics: enhancedForICS
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        device_type_configuration_option: deviceTypeConfigurationOption
        support_rfc3398: supportRFC3398
        static_line_ordering: staticLineOrdering
        support_client_session_info: supportClientSessionInfo
        support_call_info_conference_subscription_uri:
            supportCallInfoConferenceSubscriptionURI
        support_remote_party_info: supportRemotePartyInfo
        support_visual_device_management: supportVisualDeviceManagement
        bypass_media_treatment: bypassMediaTreatment
        supports3_g4_g_continuity: supports3G4GContinuity
        publishes_own_presence: publishesOwnPresence
        support_cause_parameter: supportCauseParameter
    """

    device_type: str = attr.ib()
    number_of_ports: "OCI.UnboundedPositiveInt" = attr.ib()
    profile: str = attr.ib()
    registration_capable: bool = attr.ib()
    is_conference_device: bool = attr.ib()
    is_mobility_manager_device: bool = attr.ib()
    is_music_on_hold_device: bool = attr.ib()
    hold_normalization: str = attr.ib()
    hold_announcement_method: str = attr.ib()
    is_trusted: bool = attr.ib()
    e164_capable: bool = attr.ib()
    route_advance: bool = attr.ib()
    forwarding_override: bool = attr.ib()
    wireless_integration: bool = attr.ib()
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib()
    pbx_integration: bool = attr.ib()
    static_registration_capable: bool = attr.ib()
    cpe_device_options: "OCI.CPEDeviceOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib()
    authenticate_refer: bool = attr.ib()
    auto_config_soft_client: bool = attr.ib()
    authentication_mode: str = attr.ib()
    requires_broad_works_digit_collection: bool = attr.ib()
    requires_broad_works_call_waiting_tone: bool = attr.ib()
    requires_mwi_subscription: bool = attr.ib()
    use_history_info_header_on_access_side: bool = attr.ib()
    advice_of_charge_capable: bool = attr.ib()
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib()
    trunk_mode: str = attr.ib()
    add_p_called_party_id: bool = attr.ib()
    support_identity_in_update_and_re_invite: bool = attr.ib()
    unscreened_presentation_identity_policy: str = attr.ib()
    enhanced_for_ics: bool = attr.ib()
    support_emergency_disconnect_control: bool = attr.ib()
    device_type_configuration_option: str = attr.ib()
    support_rfc3398: bool = attr.ib()
    static_line_ordering: bool = attr.ib()
    support_client_session_info: bool = attr.ib()
    support_call_info_conference_subscription_uri: bool = attr.ib()
    support_remote_party_info: bool = attr.ib()
    support_visual_device_management: bool = attr.ib()
    bypass_media_treatment: bool = attr.ib()
    supports3_g4_g_continuity: bool = attr.ib()
    publishes_own_presence: bool = attr.ib()
    support_cause_parameter: bool = attr.ib()

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E(
                "number_of_ports",
                "numberOfPorts",
                OCI.UnboundedPositiveInt,
                is_complex=True,
                is_required=True,
            ),
            E("profile", "profile", str, is_required=True),
            E("registration_capable", "registrationCapable", bool, is_required=True),
            E("is_conference_device", "isConferenceDevice", bool, is_required=True),
            E(
                "is_mobility_manager_device",
                "isMobilityManagerDevice",
                bool,
                is_required=True,
            ),
            E("is_music_on_hold_device", "isMusicOnHoldDevice", bool, is_required=True),
            E("hold_normalization", "holdNormalization", str, is_required=True),
            E(
                "hold_announcement_method",
                "holdAnnouncementMethod",
                str,
                is_required=True,
            ),
            E("is_trusted", "isTrusted", bool, is_required=True),
            E("e164_capable", "E164Capable", bool, is_required=True),
            E("route_advance", "routeAdvance", bool, is_required=True),
            E("forwarding_override", "forwardingOverride", bool, is_required=True),
            E("wireless_integration", "wirelessIntegration", bool, is_required=True),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool, is_required=True),
            E("pbx_integration", "PBXIntegration", bool, is_required=True),
            E(
                "static_registration_capable",
                "staticRegistrationCapable",
                bool,
                is_required=True,
            ),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str, is_required=True),
            E("authenticate_refer", "authenticateRefer", bool, is_required=True),
            E("auto_config_soft_client", "autoConfigSoftClient", bool, is_required=True),
            E("authentication_mode", "authenticationMode", str, is_required=True),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
                is_required=True,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
                is_required=True,
            ),
            E(
                "requires_mwi_subscription",
                "requiresMWISubscription",
                bool,
                is_required=True,
            ),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
                is_required=True,
            ),
            E(
                "advice_of_charge_capable",
                "adviceOfChargeCapable",
                bool,
                is_required=True,
            ),
            E("reset_event", "resetEvent", str),
            E(
                "support_call_center_mime_type",
                "supportCallCenterMIMEType",
                bool,
                is_required=True,
            ),
            E("trunk_mode", "trunkMode", str, is_required=True),
            E("add_p_called_party_id", "addPCalledPartyId", bool, is_required=True),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
                is_required=True,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
                is_required=True,
            ),
            E("enhanced_for_ics", "enhancedForICS", bool, is_required=True),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
                is_required=True,
            ),
            E(
                "device_type_configuration_option",
                "deviceTypeConfigurationOption",
                str,
                is_required=True,
            ),
            E("support_rfc3398", "supportRFC3398", bool, is_required=True),
            E("static_line_ordering", "staticLineOrdering", bool, is_required=True),
            E(
                "support_client_session_info",
                "supportClientSessionInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_call_info_conference_subscription_uri",
                "supportCallInfoConferenceSubscriptionURI",
                bool,
                is_required=True,
            ),
            E(
                "support_remote_party_info",
                "supportRemotePartyInfo",
                bool,
                is_required=True,
            ),
            E(
                "support_visual_device_management",
                "supportVisualDeviceManagement",
                bool,
                is_required=True,
            ),
            E("bypass_media_treatment", "bypassMediaTreatment", bool, is_required=True),
            E(
                "supports3_g4_g_continuity",
                "supports3G4GContinuity",
                bool,
                is_required=True,
            ),
            E("publishes_own_presence", "publishesOwnPresence", bool, is_required=True),
            E(
                "support_cause_parameter",
                "supportCauseParameter",
                bool,
                is_required=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest(OCIRequest):
    """
    Request to modify a sip device type.

    The following elements are not changeable: numberOfPorts SignalingAddressType
    isConferenceDevice isMusicOnHoldDevice

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        authentication_override: authenticationOverride
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    authentication_override: bool = attr.ib(default=None)
    rfc3264_hold: bool = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    use_business_trunking_contact: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("authentication_override", "authenticationOverride", bool),
            E("rfc3264_hold", "RFC3264Hold", bool),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("use_business_trunking_contact", "useBusinessTrunkingContact", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest14sp2(OCIRequest):
    """
    Request to modify a sip device type.

    The following elements are not changeable: numberOfPorts SignalingAddressType
    isConferenceDevice isMusicOnHoldDevice isMobilityManagerDevice

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By : ``SystemSIPDeviceTypeModifyRequest15()``

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        supports_broad_works_info_for_call_waiting: supportsBroadWorksINFOForCallWaiting
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    rfc3264_hold: bool = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    use_business_trunking_contact: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)
    authenticate_refer: bool = attr.ib(default=None)
    auto_config_soft_client: bool = attr.ib(default=None)
    authentication_mode: str = attr.ib(default=None)
    tdm_overlay: bool = attr.ib(default=None)
    supports_broad_works_info_for_call_waiting: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("rfc3264_hold", "RFC3264Hold", bool),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("use_business_trunking_contact", "useBusinessTrunkingContact", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
            E("authenticate_refer", "authenticateRefer", bool),
            E("auto_config_soft_client", "autoConfigSoftClient", bool),
            E("authentication_mode", "authenticationMode", str),
            E("tdm_overlay", "tdmOverlay", bool),
            E(
                "supports_broad_works_info_for_call_waiting",
                "supportsBroadWorksINFOForCallWaiting",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest15(OCIRequest):
    """
    Request to modify a sip device type.

    The following elements are not changeable: numberOfPorts SignalingAddressType
    isConferenceDevice isMusicOnHoldDevice isMobilityManagerDevice

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By : ``SystemSIPDeviceTypeModifyRequest16()``

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        tdm_overlay: tdmOverlay
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    rfc3264_hold: bool = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    use_business_trunking_contact: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)
    authenticate_refer: bool = attr.ib(default=None)
    auto_config_soft_client: bool = attr.ib(default=None)
    authentication_mode: str = attr.ib(default=None)
    tdm_overlay: bool = attr.ib(default=None)
    requires_broad_works_call_waiting_tone: bool = attr.ib(default=None)
    requires_mwi_subscription: bool = attr.ib(default=None)
    use_history_info_header_on_access_side: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("rfc3264_hold", "RFC3264Hold", bool),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("use_business_trunking_contact", "useBusinessTrunkingContact", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
            E("authenticate_refer", "authenticateRefer", bool),
            E("auto_config_soft_client", "autoConfigSoftClient", bool),
            E("authentication_mode", "authenticationMode", str),
            E("tdm_overlay", "tdmOverlay", bool),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
            ),
            E("requires_mwi_subscription", "requiresMWISubscription", bool),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest16(OCIRequest):
    """
    Request to modify a sip device type.

    The following elements are not changeable: numberOfPorts SignalingAddressType
    isConferenceDevice isMusicOnHoldDevice isMobilityManagerDevice

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. Replaced by:
    ``SystemSIPDeviceTypeModifyRequest16sp1()``

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    rfc3264_hold: bool = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    use_business_trunking_contact: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions16" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)
    authenticate_refer: bool = attr.ib(default=None)
    auto_config_soft_client: bool = attr.ib(default=None)
    authentication_mode: str = attr.ib(default=None)
    requires_broad_works_digit_collection: bool = attr.ib(default=None)
    requires_broad_works_call_waiting_tone: bool = attr.ib(default=None)
    requires_mwi_subscription: bool = attr.ib(default=None)
    use_history_info_header_on_access_side: bool = attr.ib(default=None)
    advice_of_charge_capable: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("rfc3264_hold", "RFC3264Hold", bool),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("use_business_trunking_contact", "useBusinessTrunkingContact", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions16,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
            E("authenticate_refer", "authenticateRefer", bool),
            E("auto_config_soft_client", "autoConfigSoftClient", bool),
            E("authentication_mode", "authenticationMode", str),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
            ),
            E("requires_mwi_subscription", "requiresMWISubscription", bool),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
            ),
            E("advice_of_charge_capable", "adviceOfChargeCapable", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest16sp1(OCIRequest):
    """
    Request to modify a sip device type.

    The following elements are not changeable: numberOfPorts SignalingAddressType
    isConferenceDevice isMusicOnHoldDevice isMobilityManagerDevice

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        use_business_trunking_contact: useBusinessTrunkingContact
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    rfc3264_hold: bool = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    use_business_trunking_contact: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)
    authenticate_refer: bool = attr.ib(default=None)
    auto_config_soft_client: bool = attr.ib(default=None)
    authentication_mode: str = attr.ib(default=None)
    requires_broad_works_digit_collection: bool = attr.ib(default=None)
    requires_broad_works_call_waiting_tone: bool = attr.ib(default=None)
    requires_mwi_subscription: bool = attr.ib(default=None)
    use_history_info_header_on_access_side: bool = attr.ib(default=None)
    advice_of_charge_capable: bool = attr.ib(default=None)
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("rfc3264_hold", "RFC3264Hold", bool),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("use_business_trunking_contact", "useBusinessTrunkingContact", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
            E("authenticate_refer", "authenticateRefer", bool),
            E("auto_config_soft_client", "autoConfigSoftClient", bool),
            E("authentication_mode", "authenticationMode", str),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
            ),
            E("requires_mwi_subscription", "requiresMWISubscription", bool),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
            ),
            E("advice_of_charge_capable", "adviceOfChargeCapable", bool),
            E("reset_event", "resetEvent", str),
            E("support_call_center_mime_type", "supportCallCenterMIMEType", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest17(OCIRequest):
    """
    Request to modify a sip device type.

    The following elements are not changeable: numberOfPorts SignalingAddressType
    isConferenceDevice isMusicOnHoldDevice isMobilityManagerDevice

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in HSS data mode: enable3G4GContinuity Replaced by:
    ``SystemSIPDeviceTypeModifyRequest19()``

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        rfc3264_hold: RFC3264Hold
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    rfc3264_hold: bool = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)
    authenticate_refer: bool = attr.ib(default=None)
    auto_config_soft_client: bool = attr.ib(default=None)
    authentication_mode: str = attr.ib(default=None)
    requires_broad_works_digit_collection: bool = attr.ib(default=None)
    requires_broad_works_call_waiting_tone: bool = attr.ib(default=None)
    requires_mwi_subscription: bool = attr.ib(default=None)
    use_history_info_header_on_access_side: bool = attr.ib(default=None)
    advice_of_charge_capable: bool = attr.ib(default=None)
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib(default=None)
    trunk_mode: str = attr.ib(default=None)
    add_p_called_party_id: bool = attr.ib(default=None)
    support_identity_in_update_and_re_invite: bool = attr.ib(default=None)
    unscreened_presentation_identity_policy: str = attr.ib(default=None)
    enable3_g4_g_continuity: bool = attr.ib(default=None)
    support_emergency_disconnect_control: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("rfc3264_hold", "RFC3264Hold", bool),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
            E("authenticate_refer", "authenticateRefer", bool),
            E("auto_config_soft_client", "autoConfigSoftClient", bool),
            E("authentication_mode", "authenticationMode", str),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
            ),
            E("requires_mwi_subscription", "requiresMWISubscription", bool),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
            ),
            E("advice_of_charge_capable", "adviceOfChargeCapable", bool),
            E("reset_event", "resetEvent", str),
            E("support_call_center_mime_type", "supportCallCenterMIMEType", bool),
            E("trunk_mode", "trunkMode", str),
            E("add_p_called_party_id", "addPCalledPartyId", bool),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest18sp1(OCIRequest):
    """
    Request to modify a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are not changeable: numberOfPorts SignalingAddressType isConferenceDevice
    isMusicOnHoldDevice isMobilityManagerDevice deviceTypeConfigurationOption
    staticLineOrdering The following elements are only used in HSS data mode:
    enable3G4GContinuity The following elements are only used in AS data mode:
    holdAnnouncementMethod supportRFC3398 supportClientSessionInfo
    supportCallInfoConferenceSubscriptionURI supportRemotePartyInfo The following element
    values are only applicable in AS data mode: holdNormalization=useRfc3264Hold will
    raise an error in HSS data mode

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enable3_g4_g_continuity: enable3G4GContinuity
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        support_rfc3398: supportRFC3398
        support_client_session_info: supportClientSessionInfo
        support_call_info_conference_subscription_uri:
            supportCallInfoConferenceSubscriptionURI
        support_remote_party_info: supportRemotePartyInfo
        support_visual_device_management: supportVisualDeviceManagement
        bypass_media_treatment: bypassMediaTreatment
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    hold_normalization: str = attr.ib(default=None)
    hold_announcement_method: str = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)
    authenticate_refer: bool = attr.ib(default=None)
    auto_config_soft_client: bool = attr.ib(default=None)
    authentication_mode: str = attr.ib(default=None)
    requires_broad_works_digit_collection: bool = attr.ib(default=None)
    requires_broad_works_call_waiting_tone: bool = attr.ib(default=None)
    requires_mwi_subscription: bool = attr.ib(default=None)
    use_history_info_header_on_access_side: bool = attr.ib(default=None)
    advice_of_charge_capable: bool = attr.ib(default=None)
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib(default=None)
    trunk_mode: str = attr.ib(default=None)
    add_p_called_party_id: bool = attr.ib(default=None)
    support_identity_in_update_and_re_invite: bool = attr.ib(default=None)
    unscreened_presentation_identity_policy: str = attr.ib(default=None)
    enable3_g4_g_continuity: bool = attr.ib(default=None)
    support_emergency_disconnect_control: bool = attr.ib(default=None)
    support_rfc3398: bool = attr.ib(default=None)
    support_client_session_info: bool = attr.ib(default=None)
    support_call_info_conference_subscription_uri: bool = attr.ib(default=None)
    support_remote_party_info: bool = attr.ib(default=None)
    support_visual_device_management: bool = attr.ib(default=None)
    bypass_media_treatment: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("hold_normalization", "holdNormalization", str),
            E("hold_announcement_method", "holdAnnouncementMethod", str),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
            E("authenticate_refer", "authenticateRefer", bool),
            E("auto_config_soft_client", "autoConfigSoftClient", bool),
            E("authentication_mode", "authenticationMode", str),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
            ),
            E("requires_mwi_subscription", "requiresMWISubscription", bool),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
            ),
            E("advice_of_charge_capable", "adviceOfChargeCapable", bool),
            E("reset_event", "resetEvent", str),
            E("support_call_center_mime_type", "supportCallCenterMIMEType", bool),
            E("trunk_mode", "trunkMode", str),
            E("add_p_called_party_id", "addPCalledPartyId", bool),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
            ),
            E("enable3_g4_g_continuity", "enable3G4GContinuity", bool),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
            ),
            E("support_rfc3398", "supportRFC3398", bool),
            E("support_client_session_info", "supportClientSessionInfo", bool),
            E(
                "support_call_info_conference_subscription_uri",
                "supportCallInfoConferenceSubscriptionURI",
                bool,
            ),
            E("support_remote_party_info", "supportRemotePartyInfo", bool),
            E("support_visual_device_management", "supportVisualDeviceManagement", bool),
            E("bypass_media_treatment", "bypassMediaTreatment", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class SystemSIPDeviceTypeModifyRequest21(OCIRequest):
    """
    Request to modify a sip device type.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are not changeable: numberOfPorts SignalingAddressType isConferenceDevice
    isMusicOnHoldDevice isMobilityManagerDevice deviceTypeConfigurationOption
    staticLineOrdering The following elements are only used in AS data mode:
    holdAnnouncementMethod supportRFC3398 supportClientSessionInfo
    supportCallInfoConferenceSubscriptionURI supportRemotePartyInfo The following element
    values are only applicable in AS data mode: holdNormalization=useRfc3264Hold will
    raise an error in HSS data mode The following elements are only used in AS data mode
    and ignored in HSS data mode: supportCauseParameter The following elements are only
    used in HSS data mode and ignored in AS mode: enhancedForICS supports3G4GContinuity
    publishesOwnPresence

    Attributes:
        device_type: deviceType
        is_obsolete: isObsolete
        registration_capable: registrationCapable
        hold_normalization: holdNormalization
        hold_announcement_method: holdAnnouncementMethod
        is_trusted: isTrusted
        e164_capable: E164Capable
        route_advance: routeAdvance
        forwarding_override: forwardingOverride
        wireless_integration: wirelessIntegration
        web_based_config_url: webBasedConfigURL
        is_video_capable: isVideoCapable
        pbx_integration: PBXIntegration
        static_registration_capable: staticRegistrationCapable
        cpe_device_options: cpeDeviceOptions
        early_media_support: earlyMediaSupport
        authenticate_refer: authenticateRefer
        auto_config_soft_client: autoConfigSoftClient
        authentication_mode: authenticationMode
        requires_broad_works_digit_collection: requiresBroadWorksDigitCollection
        requires_broad_works_call_waiting_tone: requiresBroadWorksCallWaitingTone
        requires_mwi_subscription: requiresMWISubscription
        use_history_info_header_on_access_side: useHistoryInfoHeaderOnAccessSide
        advice_of_charge_capable: adviceOfChargeCapable
        reset_event: resetEvent
        support_call_center_mime_type: supportCallCenterMIMEType
        trunk_mode: trunkMode
        add_p_called_party_id: addPCalledPartyId
        support_identity_in_update_and_re_invite: supportIdentityInUpdateAndReInvite
        unscreened_presentation_identity_policy: unscreenedPresentationIdentityPolicy
        enhanced_for_ics: enhancedForICS
        support_emergency_disconnect_control: supportEmergencyDisconnectControl
        support_rfc3398: supportRFC3398
        support_client_session_info: supportClientSessionInfo
        support_call_info_conference_subscription_uri:
            supportCallInfoConferenceSubscriptionURI
        support_remote_party_info: supportRemotePartyInfo
        support_visual_device_management: supportVisualDeviceManagement
        bypass_media_treatment: bypassMediaTreatment
        supports3_g4_g_continuity: supports3G4GContinuity
        publishes_own_presence: publishesOwnPresence
        support_cause_parameter: supportCauseParameter
    """

    device_type: str = attr.ib()
    is_obsolete: bool = attr.ib(default=None)
    registration_capable: bool = attr.ib(default=None)
    hold_normalization: str = attr.ib(default=None)
    hold_announcement_method: str = attr.ib(default=None)
    is_trusted: bool = attr.ib(default=None)
    e164_capable: bool = attr.ib(default=None)
    route_advance: bool = attr.ib(default=None)
    forwarding_override: bool = attr.ib(default=None)
    wireless_integration: bool = attr.ib(default=None)
    web_based_config_url: str = attr.ib(default=None)
    is_video_capable: bool = attr.ib(default=None)
    pbx_integration: bool = attr.ib(default=None)
    static_registration_capable: bool = attr.ib(default=None)
    cpe_device_options: "OCI.CPEDeviceModifyOptions16sp1" = attr.ib(default=None)
    early_media_support: str = attr.ib(default=None)
    authenticate_refer: bool = attr.ib(default=None)
    auto_config_soft_client: bool = attr.ib(default=None)
    authentication_mode: str = attr.ib(default=None)
    requires_broad_works_digit_collection: bool = attr.ib(default=None)
    requires_broad_works_call_waiting_tone: bool = attr.ib(default=None)
    requires_mwi_subscription: bool = attr.ib(default=None)
    use_history_info_header_on_access_side: bool = attr.ib(default=None)
    advice_of_charge_capable: bool = attr.ib(default=None)
    reset_event: str = attr.ib(default=None)
    support_call_center_mime_type: bool = attr.ib(default=None)
    trunk_mode: str = attr.ib(default=None)
    add_p_called_party_id: bool = attr.ib(default=None)
    support_identity_in_update_and_re_invite: bool = attr.ib(default=None)
    unscreened_presentation_identity_policy: str = attr.ib(default=None)
    enhanced_for_ics: bool = attr.ib(default=None)
    support_emergency_disconnect_control: bool = attr.ib(default=None)
    support_rfc3398: bool = attr.ib(default=None)
    support_client_session_info: bool = attr.ib(default=None)
    support_call_info_conference_subscription_uri: bool = attr.ib(default=None)
    support_remote_party_info: bool = attr.ib(default=None)
    support_visual_device_management: bool = attr.ib(default=None)
    bypass_media_treatment: bool = attr.ib(default=None)
    supports3_g4_g_continuity: bool = attr.ib(default=None)
    publishes_own_presence: bool = attr.ib(default=None)
    support_cause_parameter: bool = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("device_type", "deviceType", str, is_required=True),
            E("is_obsolete", "isObsolete", bool),
            E("registration_capable", "registrationCapable", bool),
            E("hold_normalization", "holdNormalization", str),
            E("hold_announcement_method", "holdAnnouncementMethod", str),
            E("is_trusted", "isTrusted", bool),
            E("e164_capable", "E164Capable", bool),
            E("route_advance", "routeAdvance", bool),
            E("forwarding_override", "forwardingOverride", bool),
            E("wireless_integration", "wirelessIntegration", bool),
            E("web_based_config_url", "webBasedConfigURL", str),
            E("is_video_capable", "isVideoCapable", bool),
            E("pbx_integration", "PBXIntegration", bool),
            E("static_registration_capable", "staticRegistrationCapable", bool),
            E(
                "cpe_device_options",
                "cpeDeviceOptions",
                OCI.CPEDeviceModifyOptions16sp1,
                is_complex=True,
            ),
            E("early_media_support", "earlyMediaSupport", str),
            E("authenticate_refer", "authenticateRefer", bool),
            E("auto_config_soft_client", "autoConfigSoftClient", bool),
            E("authentication_mode", "authenticationMode", str),
            E(
                "requires_broad_works_digit_collection",
                "requiresBroadWorksDigitCollection",
                bool,
            ),
            E(
                "requires_broad_works_call_waiting_tone",
                "requiresBroadWorksCallWaitingTone",
                bool,
            ),
            E("requires_mwi_subscription", "requiresMWISubscription", bool),
            E(
                "use_history_info_header_on_access_side",
                "useHistoryInfoHeaderOnAccessSide",
                bool,
            ),
            E("advice_of_charge_capable", "adviceOfChargeCapable", bool),
            E("reset_event", "resetEvent", str),
            E("support_call_center_mime_type", "supportCallCenterMIMEType", bool),
            E("trunk_mode", "trunkMode", str),
            E("add_p_called_party_id", "addPCalledPartyId", bool),
            E(
                "support_identity_in_update_and_re_invite",
                "supportIdentityInUpdateAndReInvite",
                bool,
            ),
            E(
                "unscreened_presentation_identity_policy",
                "unscreenedPresentationIdentityPolicy",
                str,
            ),
            E("enhanced_for_ics", "enhancedForICS", bool),
            E(
                "support_emergency_disconnect_control",
                "supportEmergencyDisconnectControl",
                bool,
            ),
            E("support_rfc3398", "supportRFC3398", bool),
            E("support_client_session_info", "supportClientSessionInfo", bool),
            E(
                "support_call_info_conference_subscription_uri",
                "supportCallInfoConferenceSubscriptionURI",
                bool,
            ),
            E("support_remote_party_info", "supportRemotePartyInfo", bool),
            E("support_visual_device_management", "supportVisualDeviceManagement", bool),
            E("bypass_media_treatment", "bypassMediaTreatment", bool),
            E("supports3_g4_g_continuity", "supports3G4GContinuity", bool),
            E("publishes_own_presence", "publishesOwnPresence", bool),
            E("support_cause_parameter", "supportCauseParameter", bool),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCallCenterEnhancedReportingScheduledReportModifyRequest(OCIRequest):
    """
    Request to modify a call center reporting scheduled report created by a supervisor.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``. The
    startDate element is adjusted to the first occurrence of the recurrent schedule that
    comes at or after startDate.

    Attributes:
        supervisor_user_id: supervisorUserId
        name: name
        new_name: newName
        description: description
        schedule: schedule
        sampling_period: samplingPeriod
        start_day_of_week: startDayOfWeek
        report_time_zone: reportTimeZone
        report_date_format: reportDateFormat
        report_time_format: reportTimeFormat
        report_interval: reportInterval
        report_format: reportFormat
        agent: agent
        call_center: callCenter
        dnis: dnis
        call_completion_threshold_seconds: callCompletionThresholdSeconds
        short_duration_threshold_seconds: shortDurationThresholdSeconds
        service_level_threshold_seconds: serviceLevelThresholdSeconds
        service_level_inclusions: serviceLevelInclusions
        service_level_objective_percentage: serviceLevelObjectivePercentage
        abandoned_call_threshold_seconds: abandonedCallThresholdSeconds
        email_address: emailAddress
    """

    supervisor_user_id: str = attr.ib()
    name: str = attr.ib()
    new_name: str = attr.ib(default=None)
    description: str = attr.ib(default=None)
    schedule: "OCI.CallCenterReportSchedule" = attr.ib(default=None)
    sampling_period: str = attr.ib(default=None)
    start_day_of_week: str = attr.ib(default=None)
    report_time_zone: str = attr.ib(default=None)
    report_date_format: str = attr.ib(default=None)
    report_time_format: str = attr.ib(default=None)
    report_interval: "OCI.CallCenterReportInterval" = attr.ib(default=None)
    report_format: str = attr.ib(default=None)
    agent: "OCI.CallCenterScheduledReportAgentSelection" = attr.ib(default=None)
    call_center: "OCI.CallCenterScheduledReportCallCenterSelection" = attr.ib(default=None)
    dnis: "OCI.CallCenterScheduledReportDNISSelection" = attr.ib(default=None)
    call_completion_threshold_seconds: int = attr.ib(default=None)
    short_duration_threshold_seconds: int = attr.ib(default=None)
    service_level_threshold_seconds: "OCI.CallCenterReportServiceLevelThresholdReplacementList" = attr.ib(default=None)
    service_level_inclusions: "OCI.CallCenterScheduledReportServiceLevelInclusionsModify" = attr.ib(default=None)
    service_level_objective_percentage: int = attr.ib(default=None)
    abandoned_call_threshold_seconds: "OCI.CallCenterReportAbandonedCallThresholdReplacementList" = attr.ib(default=None)
    email_address: "OCI.CallCenterReportReplacementEmailList" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("supervisor_user_id", "supervisorUserId", str, is_required=True),
            E("name", "name", str, is_required=True),
            E("new_name", "newName", str),
            E("description", "description", str),
            E("schedule", "schedule", OCI.CallCenterReportSchedule, is_complex=True),
            E("sampling_period", "samplingPeriod", str),
            E("start_day_of_week", "startDayOfWeek", str),
            E("report_time_zone", "reportTimeZone", str),
            E("report_date_format", "reportDateFormat", str),
            E("report_time_format", "reportTimeFormat", str),
            E(
                "report_interval",
                "reportInterval",
                OCI.CallCenterReportInterval,
                is_complex=True,
            ),
            E("report_format", "reportFormat", str),
            E(
                "agent",
                "agent",
                OCI.CallCenterScheduledReportAgentSelection,
                is_complex=True,
            ),
            E(
                "call_center",
                "callCenter",
                OCI.CallCenterScheduledReportCallCenterSelection,
                is_complex=True,
            ),
            E(
                "dnis",
                "dnis",
                OCI.CallCenterScheduledReportDNISSelection,
                is_complex=True,
            ),
            E(
                "call_completion_threshold_seconds",
                "callCompletionThresholdSeconds",
                int,
            ),
            E("short_duration_threshold_seconds", "shortDurationThresholdSeconds", int),
            E(
                "service_level_threshold_seconds",
                "serviceLevelThresholdSeconds",
                OCI.CallCenterReportServiceLevelThresholdReplacementList,
                is_complex=True,
            ),
            E(
                "service_level_inclusions",
                "serviceLevelInclusions",
                OCI.CallCenterScheduledReportServiceLevelInclusionsModify,
                is_complex=True,
            ),
            E(
                "service_level_objective_percentage",
                "serviceLevelObjectivePercentage",
                int,
            ),
            E(
                "abandoned_call_threshold_seconds",
                "abandonedCallThresholdSeconds",
                OCI.CallCenterReportAbandonedCallThresholdReplacementList,
                is_complex=True,
            ),
            E(
                "email_address",
                "emailAddress",
                OCI.CallCenterReportReplacementEmailList,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantAddInstanceRequest14(OCIRequest):
    """
    Add a Auto Attendant instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupAutoAttendantAddInstanceRequest16()``

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule_name: holidayScheduleName
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    enable_video: bool = attr.ib()
    business_hours: str = attr.ib(default=None)
    holiday_schedule_name: str = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib()
    name_dialing_scope: str = attr.ib()
    name_dialing_entries: str = attr.ib()
    business_hours_menu: "OCI.AutoAttendantAddMenu" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantAddMenu" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", str),
            E("holiday_schedule_name", "holidayScheduleName", str),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantAddMenu,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantAddMenu,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantAddInstanceRequest16(OCIRequest):
    """
    Add a Auto Attendant instance to a group.

    The domain is required in the serviceUserId.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule_name: holidayScheduleName
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    enable_video: bool = attr.ib()
    business_hours: str = attr.ib(default=None)
    holiday_schedule_name: str = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib()
    name_dialing_scope: str = attr.ib()
    name_dialing_entries: str = attr.ib()
    business_hours_menu: "OCI.AutoAttendantAddMenu16" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantAddMenu16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", str),
            E("holiday_schedule_name", "holidayScheduleName", str),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantAddMenu16,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantAddMenu16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantAddInstanceRequest17sp1(OCIRequest):
    """
    Add a Auto Attendant instance to a group.

    The domain is required in the serviceUserId.  Only Group and Enterprise level
    schedules are accepted.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    enable_video: bool = attr.ib()
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib()
    name_dialing_scope: str = attr.ib()
    name_dialing_entries: str = attr.ib()
    business_hours_menu: "OCI.AutoAttendantAddMenu16" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantAddMenu16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantAddMenu16,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantAddMenu16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantAddInstanceRequest19(OCIRequest):
    """
    Add a Auto Attendant instance to a group.

    The domain is required in the serviceUserId.  Only Group and Enterprise level
    schedules are accepted.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: type, use AutoAttendantType.BASIC in HSS mode.
    holidayMenu.  The following elements are only valid for Standard Auto Attendants:
    holidayMenu

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
        holiday_menu: holidayMenu
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    type: str = attr.ib()
    enable_video: bool = attr.ib()
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib()
    name_dialing_scope: str = attr.ib()
    name_dialing_entries: str = attr.ib()
    business_hours_menu: "OCI.AutoAttendantAddMenu19" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantAddMenu19" = attr.ib(default=None)
    holiday_menu: "OCI.AutoAttendantAddMenu19" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantAddMenu19,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantAddMenu19,
                is_complex=True,
            ),
            E(
                "holiday_menu",
                "holidayMenu",
                OCI.AutoAttendantAddMenu19,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantAddInstanceRequest20(OCIRequest):
    """
    Add a Auto Attendant instance to a group.

    The domain is required in the serviceUserId.  Only Group and Enterprise level
    schedules are accepted.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: type, use AutoAttendantType.BASIC in HSS mode.
    holidayMenu.  The following elements are only valid for Standard Auto Attendants:
    holidayMenu

    Attributes:
        service_provider_id: serviceProviderId
        group_id: groupId
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        type: type
        first_digit_timeout_seconds: firstDigitTimeoutSeconds
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
        holiday_menu: holidayMenu
        network_class_of_service: networkClassOfService
    """

    service_provider_id: str = attr.ib()
    group_id: str = attr.ib()
    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceAddProfile" = attr.ib()
    type: str = attr.ib()
    first_digit_timeout_seconds: int = attr.ib()
    enable_video: bool = attr.ib()
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib()
    name_dialing_scope: str = attr.ib()
    name_dialing_entries: str = attr.ib()
    business_hours_menu: "OCI.AutoAttendantAddMenu20" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantAddMenu20" = attr.ib(default=None)
    holiday_menu: "OCI.AutoAttendantAddMenu20" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_provider_id", "serviceProviderId", str, is_required=True),
            E("group_id", "groupId", str, is_required=True),
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceAddProfile,
                is_complex=True,
                is_required=True,
            ),
            E("type", "type", str, is_required=True),
            E(
                "first_digit_timeout_seconds",
                "firstDigitTimeoutSeconds",
                int,
                is_required=True,
            ),
            E("enable_video", "enableVideo", bool, is_required=True),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str, is_required=True),
            E("name_dialing_scope", "nameDialingScope", str, is_required=True),
            E("name_dialing_entries", "nameDialingEntries", str, is_required=True),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantAddMenu20,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantAddMenu20,
                is_complex=True,
            ),
            E(
                "holiday_menu",
                "holidayMenu",
                OCI.AutoAttendantAddMenu20,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantModifyInstanceRequest(OCIRequest):
    """
    Request to modify an Auto Attendant instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Replaced By: ``GroupAutoAttendantModifyInstanceRequest16()``

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule_name: holidayScheduleName
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    business_hours: str = attr.ib(default=None)
    holiday_schedule_name: str = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib(default=None)
    name_dialing_scope: str = attr.ib(default=None)
    name_dialing_entries: str = attr.ib(default=None)
    business_hours_menu: "OCI.AutoAttendantModifyMenu" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantModifyMenu" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("enable_video", "enableVideo", bool),
            E("business_hours", "businessHours", str),
            E("holiday_schedule_name", "holidayScheduleName", str),
            E("extension_dialing_scope", "extensionDialingScope", str),
            E("name_dialing_scope", "nameDialingScope", str),
            E("name_dialing_entries", "nameDialingEntries", str),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantModifyMenu,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantModifyMenu,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantModifyInstanceRequest16(OCIRequest):
    """
    Request to modify an Auto Attendant instance.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``.

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule_name: holidayScheduleName
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    business_hours: str = attr.ib(default=None)
    holiday_schedule_name: str = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib(default=None)
    name_dialing_scope: str = attr.ib(default=None)
    name_dialing_entries: str = attr.ib(default=None)
    business_hours_menu: "OCI.AutoAttendantModifyMenu16" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantModifyMenu16" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("enable_video", "enableVideo", bool),
            E("business_hours", "businessHours", str),
            E("holiday_schedule_name", "holidayScheduleName", str),
            E("extension_dialing_scope", "extensionDialingScope", str),
            E("name_dialing_scope", "nameDialingScope", str),
            E("name_dialing_entries", "nameDialingEntries", str),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantModifyMenu16,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantModifyMenu16,
                is_complex=True,
            ),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantModifyInstanceRequest17sp1(OCIRequest):
    """
    Request to modify an Auto Attendant instance.

    Only Group and Enterprise level schedules are accepted.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: holidayMenu.  The following elementsare only
    valid for Standard Auto Attendants: holidayMenu

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        first_digit_timeout_seconds: firstDigitTimeoutSeconds
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
        holiday_menu: holidayMenu
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    first_digit_timeout_seconds: int = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib(default=None)
    name_dialing_scope: str = attr.ib(default=None)
    name_dialing_entries: str = attr.ib(default=None)
    business_hours_menu: "OCI.AutoAttendantModifyMenu16" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantModifyMenu16" = attr.ib(default=None)
    holiday_menu: "OCI.AutoAttendantModifyMenu16" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("first_digit_timeout_seconds", "firstDigitTimeoutSeconds", int),
            E("enable_video", "enableVideo", bool),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str),
            E("name_dialing_scope", "nameDialingScope", str),
            E("name_dialing_entries", "nameDialingEntries", str),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantModifyMenu16,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantModifyMenu16,
                is_complex=True,
            ),
            E(
                "holiday_menu",
                "holidayMenu",
                OCI.AutoAttendantModifyMenu16,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class GroupAutoAttendantModifyInstanceRequest20(OCIRequest):
    """
    Request to modify an Auto Attendant instance.

    Only Group and Enterprise level schedules are accepted.

    The response is either ``SuccessResponse()`` or ``ErrorResponse()``. The following
    elements are only used in AS data mode: holidayMenu.  The following elements are only
    valid for Standard Auto Attendants: holidayMenu

    Attributes:
        service_user_id: serviceUserId
        service_instance_profile: serviceInstanceProfile
        first_digit_timeout_seconds: firstDigitTimeoutSeconds
        enable_video: enableVideo
        business_hours: businessHours
        holiday_schedule: holidaySchedule
        extension_dialing_scope: extensionDialingScope
        name_dialing_scope: nameDialingScope
        name_dialing_entries: nameDialingEntries
        business_hours_menu: businessHoursMenu
        after_hours_menu: afterHoursMenu
        holiday_menu: holidayMenu
        network_class_of_service: networkClassOfService
    """

    service_user_id: str = attr.ib()
    service_instance_profile: "OCI.ServiceInstanceModifyProfile" = attr.ib(default=None)
    first_digit_timeout_seconds: int = attr.ib(default=None)
    enable_video: bool = attr.ib(default=None)
    business_hours: "OCI.TimeSchedule" = attr.ib(default=None)
    holiday_schedule: "OCI.HolidaySchedule" = attr.ib(default=None)
    extension_dialing_scope: str = attr.ib(default=None)
    name_dialing_scope: str = attr.ib(default=None)
    name_dialing_entries: str = attr.ib(default=None)
    business_hours_menu: "OCI.AutoAttendantModifyMenu20" = attr.ib(default=None)
    after_hours_menu: "OCI.AutoAttendantModifyMenu20" = attr.ib(default=None)
    holiday_menu: "OCI.AutoAttendantModifyMenu20" = attr.ib(default=None)
    network_class_of_service: str = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("service_user_id", "serviceUserId", str, is_required=True),
            E(
                "service_instance_profile",
                "serviceInstanceProfile",
                OCI.ServiceInstanceModifyProfile,
                is_complex=True,
            ),
            E("first_digit_timeout_seconds", "firstDigitTimeoutSeconds", int),
            E("enable_video", "enableVideo", bool),
            E("business_hours", "businessHours", OCI.TimeSchedule, is_complex=True),
            E(
                "holiday_schedule",
                "holidaySchedule",
                OCI.HolidaySchedule,
                is_complex=True,
            ),
            E("extension_dialing_scope", "extensionDialingScope", str),
            E("name_dialing_scope", "nameDialingScope", str),
            E("name_dialing_entries", "nameDialingEntries", str),
            E(
                "business_hours_menu",
                "businessHoursMenu",
                OCI.AutoAttendantModifyMenu20,
                is_complex=True,
            ),
            E(
                "after_hours_menu",
                "afterHoursMenu",
                OCI.AutoAttendantModifyMenu20,
                is_complex=True,
            ),
            E(
                "holiday_menu",
                "holidayMenu",
                OCI.AutoAttendantModifyMenu20,
                is_complex=True,
            ),
            E("network_class_of_service", "networkClassOfService", str),
        )


@attr.s(slots=True, frozen=True, kw_only=True)
class UserCommPilotExpressSRModifyRequest(OCIRequest):
    """
    Modify the user's commPilot express SR service setting.

    The response is either a ``SuccessResponse()`` or an ``ErrorResponse()``.

    Attributes:
        user_id: userId
        profile: profile
        available_in_office: availableInOffice
        available_out_of_office: availableOutOfOffice
        busy: busy
        unavailable: unavailable
    """

    user_id: str = attr.ib()
    profile: str = attr.ib(default=None)
    available_in_office: "OCI.CommPilotExpressSRAvailableInOfficeModify" = attr.ib(default=None)
    available_out_of_office: "OCI.CommPilotExpressSRAvailableOutOfOfficeModify" = attr.ib(default=None)
    busy: "OCI.CommPilotExpressSRBusyModify" = attr.ib(default=None)
    unavailable: "OCI.CommPilotExpressSRUnavailableModify" = attr.ib(default=None)

    @classmethod
    def _elements(cls) -> Tuple[E, ...]:
        return (
            E("user_id", "userId", str, is_required=True),
            E("profile", "profile", str),
            E(
                "available_in_office",
                "availableInOffice",
                OCI.CommPilotExpressSRAvailableInOfficeModify,
                is_complex=True,
            ),
            E(
                "available_out_of_office",
                "availableOutOfOffice",
                OCI.CommPilotExpressSRAvailableOutOfOfficeModify,
                is_complex=True,
            ),
            E("busy", "busy", OCI.CommPilotExpressSRBusyModify, is_complex=True),
            E(
                "unavailable",
                "unavailable",
                OCI.CommPilotExpressSRUnavailableModify,
                is_complex=True,
            ),
        )


# fmt: on
# end
